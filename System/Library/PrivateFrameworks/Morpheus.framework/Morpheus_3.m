void mlx::core::Subtract::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::Subtract::eval();
}

void mlx::core::`anonymous namespace'::binary<mlx::core::detail::Subtract>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  char v10;
  _BYTE *v11;
  char *v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  int *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  _BYTE *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  _BYTE *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  int v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  char v64;
  _BYTE *v65;
  char *v66;
  unsigned int v67;
  char v68;
  int v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  unsigned int v73;
  char v74;
  char v75;
  char v76;
  _QWORD *v77;
  _QWORD *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  _DWORD *v88;
  int *v89;
  unsigned int v90;
  int v91;
  int v92;
  _DWORD *v93;
  int *v94;
  int *v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  char v109;
  _BYTE *v110;
  char *v111;
  unsigned int v112;
  char v113;
  int v114;
  char v115;
  _BYTE *v116;
  char *v117;
  unsigned int v118;
  char v119;
  int v120;
  _BYTE *v121;
  char *v122;
  char *v123;
  unsigned int v124;
  char v125;
  char v126;
  char v127;
  _QWORD *v128;
  _QWORD *v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  _DWORD *v139;
  int *v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  _DWORD *v145;
  int *v146;
  unsigned int v147;
  int v148;
  int v149;
  _DWORD *v150;
  int *v151;
  int *v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  _QWORD *v157;
  _QWORD *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  float v196;
  float *v197;
  float *v198;
  unsigned int v199;
  float v200;
  int v201;
  float v202;
  float *v203;
  float *v204;
  unsigned int v205;
  float v206;
  int v207;
  float *v208;
  float *v209;
  float *v210;
  unsigned int v211;
  float v212;
  float v213;
  float v214;
  _QWORD *v215;
  int *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int **v223;
  int *v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  _QWORD *v230;
  int *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  int **v238;
  int *v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  unsigned int v244;
  _QWORD *v245;
  int *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  int v251;
  unsigned int v252;
  _QWORD *v253;
  int *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  _QWORD *v261;
  int *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  unint64_t v297;
  int v298;
  int v299;
  int v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  _BYTE *v312;
  _BYTE *v313;
  _BYTE *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  int v320;
  unint64_t v321;
  int v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int *v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int *v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  int v339;
  int v340;
  unint64_t v341;
  int v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  _DWORD *v352;
  _DWORD *v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  int v358;
  int v359;
  int v360;
  unint64_t v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  unint64_t v377;
  int v378;
  int v379;
  int v380;
  unint64_t v381;
  int v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  _DWORD *v392;
  _DWORD *v393;
  _DWORD *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  int v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  int v418;
  int v419;
  int v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  float *v432;
  float *v433;
  float *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  ldiv_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  ldiv_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _BYTE *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  ldiv_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  ldiv_t v531;
  int v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  unint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  int *v543;
  uint64_t v544;
  unint64_t v545;
  int v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int *v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  int *v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  int v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int *v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  int *v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  ldiv_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  ldiv_t v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  unint64_t i;
  uint64_t v610;
  int v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  int v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  unint64_t j;
  uint64_t v632;
  uint64_t v633;
  int v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  int v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  int v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  unint64_t k;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  ldiv_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  ldiv_t v678;
  int v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int *v685;
  uint64_t v686;
  unint64_t v687;
  _QWORD *v688;
  uint64_t v689;
  int *v690;
  uint64_t v691;
  unint64_t v692;
  int v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  int *v699;
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  _QWORD *v703;
  uint64_t v704;
  int *v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  int v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int *v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  _QWORD *v721;
  uint64_t v722;
  int *v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  unint64_t v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  ldiv_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  ldiv_t v740;
  int v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t *v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  unint64_t m;
  uint64_t v757;
  int v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  unint64_t v774;
  uint64_t v775;
  uint64_t v776;
  int v777;
  unint64_t n;
  uint64_t v779;
  uint64_t v780;
  int v781;
  unint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t *v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  int v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  unint64_t ii;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  int v815;
  ldiv_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  ldiv_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  _QWORD *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  _QWORD *v852;
  uint64_t v853;
  _QWORD *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  _QWORD *v874;
  _QWORD *v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  ldiv_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  ldiv_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  float *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  _QWORD *v932;
  uint64_t v933;
  _QWORD *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  _QWORD *v954;
  _QWORD *v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  unsigned int v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int v991;
  unsigned int v992;
  int v993;
  unint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  int *v998;
  uint64_t v999;
  uint64_t v1000;
  char v1001;
  unsigned int v1002;
  int v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int *v1008;
  uint64_t v1009;
  uint64_t v1010;
  char v1011;
  unsigned int v1012;
  int v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  int v1022;
  unsigned int v1023;
  int v1024;
  unint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int v1033;
  unsigned int v1034;
  int v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int *v1040;
  uint64_t v1041;
  uint64_t v1042;
  char v1043;
  unsigned int v1044;
  int v1045;
  unint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  int *v1050;
  uint64_t v1051;
  uint64_t v1052;
  char v1053;
  unsigned int v1054;
  int v1055;
  unint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064;
  unsigned int v1065;
  int v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int v1075;
  unsigned int v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unsigned int v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  unsigned int v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  float v1108;
  unsigned int v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  float v1119;
  unsigned int v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  uint64_t *v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t *v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  unsigned int v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  int v1146;
  ldiv_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  int v1151;
  ldiv_t v1152;
  uint64_t v1153;
  unsigned int v1154;
  int v1155;
  unint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  int *v1160;
  uint64_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  unsigned int v1164;
  _QWORD *v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int v1174;
  ldiv_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  int v1181;
  ldiv_t v1182;
  uint64_t v1183;
  unsigned int v1184;
  int v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t *v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t *v1195;
  uint64_t v1196;
  uint64_t v1197;
  int v1198;
  int v1199;
  unint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  unsigned int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int v1210;
  ldiv_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  int v1215;
  ldiv_t v1216;
  uint64_t v1217;
  unsigned int v1218;
  int v1219;
  unint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  int *v1224;
  uint64_t v1225;
  unint64_t v1226;
  uint64_t v1227;
  unsigned int v1228;
  _QWORD *v1229;
  uint64_t v1230;
  unint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  ldiv_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  int v1245;
  ldiv_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  int v1249;
  unint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t *v1259;
  uint64_t v1260;
  uint64_t v1261;
  int v1262;
  int v1263;
  unint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  unsigned int v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  int v1274;
  ldiv_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  int v1279;
  ldiv_t v1280;
  uint64_t v1281;
  unsigned int v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  uint64_t *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t *v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unsigned int v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  int v1309;
  ldiv_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  int v1314;
  ldiv_t v1315;
  uint64_t v1316;
  unsigned int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  unsigned int v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  int v1344;
  ldiv_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  int v1349;
  ldiv_t v1350;
  uint64_t v1351;
  unsigned int v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  uint64_t *v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int v1373;
  unsigned int v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  int quot;
  ldiv_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  int v1383;
  ldiv_t v1384;
  uint64_t v1385;
  int v1386;
  unsigned int v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  uint64_t *v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t *v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  int v1408;
  unsigned int v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  int v1413;
  ldiv_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  int v1418;
  ldiv_t v1419;
  uint64_t v1420;
  int v1421;
  unsigned int v1422;
  int v1423;
  unint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  int *v1428;
  uint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  char v1432;
  unsigned int v1433;
  _QWORD *v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  int v1443;
  ldiv_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  ldiv_t v1451;
  uint64_t v1452;
  char v1453;
  unsigned int v1454;
  int v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  int *v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  char v1464;
  unsigned int v1465;
  _QWORD *v1466;
  uint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  int v1475;
  ldiv_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  int v1482;
  ldiv_t v1483;
  uint64_t v1484;
  char v1485;
  unsigned int v1486;
  int v1487;
  unint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t *v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t *v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  int v1501;
  unint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  int v1505;
  unsigned int v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  int v1512;
  ldiv_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  int v1517;
  ldiv_t v1518;
  uint64_t v1519;
  int v1520;
  unsigned int v1521;
  int v1522;
  unint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t *v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t *v1532;
  uint64_t v1533;
  uint64_t v1534;
  int v1535;
  int v1536;
  unint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  int v1540;
  unsigned int v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  int v1547;
  ldiv_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  int v1552;
  ldiv_t v1553;
  uint64_t v1554;
  int v1555;
  unsigned int v1556;
  int v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  int *v1562;
  uint64_t v1563;
  unint64_t v1564;
  uint64_t v1565;
  char v1566;
  unsigned int v1567;
  _QWORD *v1568;
  uint64_t v1569;
  unint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  int v1577;
  ldiv_t v1578;
  uint64_t v1579;
  unint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  int v1584;
  ldiv_t v1585;
  uint64_t v1586;
  char v1587;
  unsigned int v1588;
  int v1589;
  unint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  int *v1594;
  uint64_t v1595;
  unint64_t v1596;
  uint64_t v1597;
  char v1598;
  unsigned int v1599;
  _QWORD *v1600;
  uint64_t v1601;
  unint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  unint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  int v1609;
  ldiv_t v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  int v1616;
  ldiv_t v1617;
  uint64_t v1618;
  char v1619;
  unsigned int v1620;
  int v1621;
  unint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t *v1631;
  uint64_t v1632;
  uint64_t v1633;
  int v1634;
  int v1635;
  unint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  int v1639;
  unsigned int v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  int v1646;
  ldiv_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  int v1651;
  ldiv_t v1652;
  uint64_t v1653;
  int v1654;
  unsigned int v1655;
  int v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t *v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t *v1666;
  uint64_t v1667;
  uint64_t v1668;
  int v1669;
  int v1670;
  unint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  int v1674;
  unsigned int v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  int v1681;
  ldiv_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  int v1686;
  ldiv_t v1687;
  uint64_t v1688;
  int v1689;
  unsigned int v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  uint64_t *v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t *v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  unsigned int v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  int v1717;
  ldiv_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  int v1722;
  ldiv_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  unsigned int v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  unint64_t v1734;
  uint64_t *v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t *v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  unsigned int v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  int v1753;
  ldiv_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  int v1758;
  ldiv_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  unsigned int v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  unint64_t v1770;
  uint64_t *v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t *v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  float v1783;
  unsigned int v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  int v1789;
  ldiv_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  int v1794;
  ldiv_t v1795;
  uint64_t v1796;
  float v1797;
  unsigned int v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  unint64_t v1806;
  uint64_t *v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t *v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  float v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  int v1825;
  ldiv_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  int v1830;
  ldiv_t v1831;
  uint64_t v1832;
  float v1833;
  unsigned int v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  unsigned int v1865;
  unsigned int v1866;
  uint64_t v1867;
  uint64_t v1868;
  unsigned int v1869;
  unsigned int v1870;
  unsigned int v1871;
  unsigned int v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  int *v1880;
  int *v1881;
  int *v1882;
  int *v1883;
  int *v1884;
  int *v1885;
  uint64_t v1886;
  unint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  unint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  unint64_t v1894;
  uint64_t v1895;
  unint64_t v1896;
  uint64_t v1897;
  unint64_t v1898;
  unint64_t v1899;
  unint64_t v1900;
  unint64_t v1901;
  unint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  unint64_t v1905;
  unint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  unint64_t v1909;
  unint64_t v1910;
  unint64_t v1911;
  unint64_t v1912;
  unint64_t v1913;
  unint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  uint64_t v1924;
  unint64_t v1925;
  uint64_t v1926;
  unint64_t v1927;
  unint64_t v1928;
  unint64_t v1929;
  unint64_t v1930;
  unint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  unint64_t v1934;
  unint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  unint64_t v1938;
  unint64_t v1939;
  unint64_t v1940;
  unint64_t v1941;
  unint64_t v1942;
  unint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  int v1949;
  int *v1950;
  int *v1951;
  int v1952;
  uint64_t v1953;
  unint64_t v1954;
  unint64_t v1955;
  unint64_t v1956;
  unint64_t v1957;
  unint64_t v1958;
  unint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = (**(_BYTE **)(*a1 + 152) != 0) ^ (**(_BYTE **)(*a2 + 152) != 0);
          goto LABEL_16;
        case 1:
          v35 = *(_DWORD *)(*a2 + 160);
          if (v35 >= 1)
          {
            v36 = **(unsigned __int8 **)(*a1 + 152);
            v37 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v38 = *(unsigned __int8 **)(*a2 + 152);
            v39 = v35 + 1;
            do
            {
              v40 = *v38++;
              *v37++ = (v36 != 0) ^ (v40 != 0);
              --v39;
            }
            while (v39 > 1);
          }
          return;
        case 2:
          v41 = *(_DWORD *)(*a1 + 160);
          if (v41 >= 1)
          {
            v42 = **(unsigned __int8 **)(*a2 + 152);
            v43 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v44 = *(unsigned __int8 **)(*a1 + 152);
            v45 = v41 + 1;
            do
            {
              v46 = *v44++;
              *v43++ = (v42 != 0) ^ (v46 != 0);
              --v45;
            }
            while (v45 > 1);
          }
          return;
        case 3:
          v47 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v47 >= 1)
          {
            v48 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v49 = *(unsigned __int8 **)(*a2 + 152);
            v50 = *(unsigned __int8 **)(*a1 + 152);
            v51 = v47 + 1;
            do
            {
              v52 = *v50++;
              v53 = v52 != 0;
              v54 = *v49++;
              *v48++ = v53 ^ (v54 != 0);
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          v26 = *(_QWORD **)a3;
          v27 = (_QWORD *)*a1;
          v28 = *(int **)*a1;
          v29 = (v27[1] - (_QWORD)v28) >> 2;
          v30 = (v29 - 1);
          if ((int)v30 >= -1)
            v31 = -1;
          else
            v31 = v29 - 1;
          v32 = v31 + 1;
          v33 = v29 + 1;
          break;
      }
      while (1)
      {
        v34 = v33 - 2;
        if (v33 - 2 < 0)
          break;
        --v33;
        if (*(_QWORD *)(v27[3] + 8 * v34) != *(_QWORD *)(v26[3] + 8 * v34))
          goto LABEL_147;
      }
      v33 = v32;
LABEL_147:
      v215 = (_QWORD *)*a2;
      v216 = *(int **)*a2;
      v217 = (v215[1] - (_QWORD)v216) >> 2;
      v218 = (v217 - 1);
      if ((int)v218 >= -1)
        v219 = -1;
      else
        v219 = v217 - 1;
      v220 = v219 + 1;
      v221 = v217 + 1;
      while (1)
      {
        v222 = v221 - 2;
        if (v221 - 2 < 0)
          break;
        --v221;
        if (*(_QWORD *)(v215[3] + 8 * v222) != *(_QWORD *)(v26[3] + 8 * v222))
          goto LABEL_201;
      }
      v221 = v220;
LABEL_201:
      v269 = v29 + 1;
      while (1)
      {
        v270 = v269 - 2;
        if (v269 - 2 < 0)
          break;
        --v269;
        if (*(_QWORD *)(v27[3] + 8 * v270))
          goto LABEL_236;
      }
      v269 = v32;
LABEL_236:
      v283 = v217 + 1;
      while (1)
      {
        v284 = v283 - 2;
        if (v283 - 2 < 0)
          break;
        --v283;
        if (*(_QWORD *)(v215[3] + 8 * v284))
          goto LABEL_271;
      }
      v283 = v220;
LABEL_271:
      v297 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v33 <= v221)
        v298 = v221;
      else
        v298 = v33;
      if (v33 <= v283)
        v33 = v283;
      if (v269 > v221)
        v221 = v269;
      if (v297 > v221)
      {
        v299 = 1;
      }
      else
      {
        v221 = (uint64_t)(v26[1] - *v26) >> 2;
        v299 = 4;
      }
      if (v297 > v33)
      {
        v300 = 2;
      }
      else
      {
        v33 = v221;
        v300 = v299;
      }
      if (v297 > v298)
      {
        v33 = v298;
        v300 = 3;
      }
      v1944 = v218;
      v1960 = v30;
      if (!v33)
        goto LABEL_300;
      v301 = *(_QWORD *)(v26[3] + 8 * (v33 - 1));
      if (v301 < 0x10)
        goto LABEL_300;
      switch(v300)
      {
        case 1:
          if (v33 == 2)
          {
            v1353 = *v28;
            if ((_DWORD)v1353)
            {
              v1354 = 0;
              v1355 = 0;
              v1356 = 0;
              v1357 = v27[19];
              v1358 = v215[19];
              v1359 = v26[19];
              v1360 = v28[1];
              v1361 = (uint64_t *)v27[3];
              v1362 = *v1361;
              v1363 = v1361[1];
              v1364 = (uint64_t *)v215[3];
              v1366 = *v1364;
              v1365 = v1364[1];
              if (v1360 <= 1)
                v1367 = 1;
              else
                v1367 = v28[1];
              v1368 = v1362 - v1363 * v1360;
              v1369 = v1366 - v1365 * v216[1];
              do
              {
                if ((_DWORD)v1360)
                {
                  v1370 = 0;
                  v1371 = v1358 + v1355;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1372 = 0;
                      v1373 = *(unsigned __int8 *)(v1357 + v1356);
                      v1374 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1359 + v1372) = (v1373 != 0) ^ (*(_BYTE *)(v1371 + v1372) != 0);
                        --v1374;
                        ++v1372;
                      }
                      while (v1374 > 1);
                    }
                    v1356 += v1363;
                    v1355 += v1365;
                    v1359 += (int)v301;
                    ++v1370;
                    v1371 += v1365;
                  }
                  while (v1370 != v1367);
                }
                v1356 += v1368;
                v1355 += v1369;
                ++v1354;
              }
              while (v1354 != v1353);
            }
          }
          else if (v33 == 1)
          {
            v971 = *v28;
            if ((_DWORD)v971)
            {
              v972 = 0;
              v973 = 0;
              v974 = v27[19];
              v975 = v215[19];
              v976 = v26[19];
              v977 = *(_QWORD *)v27[3];
              v978 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v979 = 0;
                  v980 = *(unsigned __int8 *)(v974 + v973);
                  v981 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v976 + v979) = (v980 != 0) ^ (*(_BYTE *)(v975 + v979) != 0);
                    --v981;
                    ++v979;
                  }
                  while (v981 > 1);
                }
                v973 += v977;
                v976 += (int)v301;
                ++v972;
                v975 += v978;
              }
              while (v972 != v971);
            }
          }
          else
          {
            v1901 = v26[6];
            if (v1901)
            {
              v1930 = 0;
              v1852 = v215[19];
              v1867 = v27[19];
              v1375 = v26[19];
              do
              {
                v1376 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1377 = v27[3];
                  quot = v1930;
                  do
                  {
                    v1379 = ldiv(quot, v28[v30]);
                    quot = v1379.quot;
                    v1376 += *(_QWORD *)(v1377 + 8 * v30--) * v1379.rem;
                  }
                  while (v30 != -1);
                }
                v1380 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1381) = 0;
                }
                else
                {
                  v1381 = 0;
                  v1382 = v215[3];
                  v1383 = v1930;
                  do
                  {
                    v1384 = ldiv(v1383, v216[v1380]);
                    v1383 = v1384.quot;
                    v1381 += *(_QWORD *)(v1382 + 8 * v1380--) * v1384.rem;
                  }
                  while (v1380 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1385 = 0;
                  v1386 = *(unsigned __int8 *)(v1867 + (int)v1376);
                  v1387 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1375 + v1385) = (v1386 != 0) ^ (*(_BYTE *)(v1852 + (int)v1381 + v1385) != 0);
                    --v1387;
                    ++v1385;
                  }
                  while (v1387 > 1);
                }
                v1375 += (int)v301;
                v1930 += (int)v301;
              }
              while (v1930 < v1901);
            }
          }
          break;
        case 2:
          if (v33 == 2)
          {
            v1388 = *v28;
            if ((_DWORD)v1388)
            {
              v1389 = 0;
              v1390 = 0;
              v1391 = 0;
              v1392 = v27[19];
              v1393 = v215[19];
              v1394 = v26[19];
              v1395 = v28[1];
              v1396 = (uint64_t *)v27[3];
              v1397 = *v1396;
              v1398 = v1396[1];
              v1399 = (uint64_t *)v215[3];
              v1401 = *v1399;
              v1400 = v1399[1];
              if (v1395 <= 1)
                v1402 = 1;
              else
                v1402 = v28[1];
              v1403 = v1397 - v1398 * v1395;
              v1404 = v1401 - v1400 * v216[1];
              do
              {
                if ((_DWORD)v1395)
                {
                  v1405 = 0;
                  v1406 = v1392 + v1391;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1407 = 0;
                      v1408 = *(unsigned __int8 *)(v1393 + v1390);
                      v1409 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1394 + v1407) = (v1408 != 0) ^ (*(_BYTE *)(v1406 + v1407) != 0);
                        --v1409;
                        ++v1407;
                      }
                      while (v1409 > 1);
                    }
                    v1391 += v1398;
                    v1390 += v1400;
                    v1394 += (int)v301;
                    ++v1405;
                    v1406 += v1398;
                  }
                  while (v1405 != v1402);
                }
                v1391 += v1403;
                v1390 += v1404;
                ++v1389;
              }
              while (v1389 != v1388);
            }
          }
          else if (v33 == 1)
          {
            v982 = *v28;
            if ((_DWORD)v982)
            {
              v983 = 0;
              v984 = 0;
              v985 = v27[19];
              v986 = v215[19];
              v987 = v26[19];
              v988 = *(_QWORD *)v27[3];
              v989 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v990 = 0;
                  v991 = *(unsigned __int8 *)(v986 + v984);
                  v992 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v987 + v990) = (v991 != 0) ^ (*(_BYTE *)(v985 + v990) != 0);
                    --v992;
                    ++v990;
                  }
                  while (v992 > 1);
                }
                v984 += v989;
                v987 += (int)v301;
                ++v983;
                v985 += v988;
              }
              while (v983 != v982);
            }
          }
          else
          {
            v1902 = v26[6];
            if (v1902)
            {
              v1931 = 0;
              v1853 = v215[19];
              v1868 = v27[19];
              v1410 = v26[19];
              do
              {
                v1411 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1412 = v27[3];
                  v1413 = v1931;
                  do
                  {
                    v1414 = ldiv(v1413, v28[v30]);
                    v1413 = v1414.quot;
                    v1411 += *(_QWORD *)(v1412 + 8 * v30--) * v1414.rem;
                  }
                  while (v30 != -1);
                }
                v1415 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1416) = 0;
                }
                else
                {
                  v1416 = 0;
                  v1417 = v215[3];
                  v1418 = v1931;
                  do
                  {
                    v1419 = ldiv(v1418, v216[v1415]);
                    v1418 = v1419.quot;
                    v1416 += *(_QWORD *)(v1417 + 8 * v1415--) * v1419.rem;
                  }
                  while (v1415 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1420 = 0;
                  v1421 = *(unsigned __int8 *)(v1853 + (int)v1416);
                  v1422 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1410 + v1420) = (v1421 != 0) ^ (*(_BYTE *)(v1868 + (int)v1411 + v1420) != 0);
                    --v1422;
                    ++v1420;
                  }
                  while (v1422 > 1);
                }
                v1410 += (int)v301;
                v1931 += (int)v301;
              }
              while (v1931 < v1902);
            }
          }
          break;
        case 3:
          if (v33 == 2)
          {
            v1121 = *v28;
            if ((_DWORD)v1121)
            {
              v1122 = 0;
              v1123 = 0;
              v1124 = 0;
              v1125 = v27[19];
              v1126 = v215[19];
              v1127 = v26[19];
              v1128 = v28[1];
              v1129 = (uint64_t *)v27[3];
              v1130 = *v1129;
              v1131 = v1129[1];
              v1132 = (uint64_t *)v215[3];
              v1134 = *v1132;
              v1133 = v1132[1];
              if (v1128 <= 1)
                v1135 = 1;
              else
                v1135 = v28[1];
              v1136 = v1130 - v1131 * v1128;
              v1137 = v1134 - v1133 * v216[1];
              do
              {
                if ((_DWORD)v1128)
                {
                  v1138 = 0;
                  v1139 = v1126 + v1123;
                  v1140 = v1125 + v1124;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1141 = 0;
                      v1142 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1127 + v1141) = (*(_BYTE *)(v1140 + v1141) != 0) ^ (*(_BYTE *)(v1139 + v1141) != 0);
                        --v1142;
                        ++v1141;
                      }
                      while (v1142 > 1);
                    }
                    v1124 += v1131;
                    v1123 += v1133;
                    v1127 += (int)v301;
                    ++v1138;
                    v1139 += v1133;
                    v1140 += v1131;
                  }
                  while (v1138 != v1135);
                }
                v1124 += v1136;
                v1123 += v1137;
                ++v1122;
              }
              while (v1122 != v1121);
            }
          }
          else if (v33 == 1)
          {
            v302 = *v28;
            if ((_DWORD)v302)
            {
              v303 = 0;
              v304 = v27[19];
              v305 = v215[19];
              v306 = v26[19];
              v307 = *(_QWORD *)v27[3];
              v308 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v309 = 0;
                  v310 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v306 + v309) = (*(_BYTE *)(v304 + v309) != 0) ^ (*(_BYTE *)(v305 + v309) != 0);
                    --v310;
                    ++v309;
                  }
                  while (v310 > 1);
                }
                v306 += (int)v301;
                ++v303;
                v305 += v308;
                v304 += v307;
              }
              while (v303 != v302);
            }
          }
          else
          {
            v1894 = v26[6];
            if (v1894)
            {
              v1923 = 0;
              v1847 = v215[19];
              v1864 = v27[19];
              v1143 = v26[19];
              do
              {
                v1144 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1145 = v27[3];
                  v1146 = v1923;
                  do
                  {
                    v1147 = ldiv(v1146, v28[v30]);
                    v1146 = v1147.quot;
                    v1144 += *(_QWORD *)(v1145 + 8 * v30--) * v1147.rem;
                  }
                  while (v30 != -1);
                }
                v1148 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1149) = 0;
                }
                else
                {
                  v1149 = 0;
                  v1150 = v215[3];
                  v1151 = v1923;
                  do
                  {
                    v1152 = ldiv(v1151, v216[v1148]);
                    v1151 = v1152.quot;
                    v1149 += *(_QWORD *)(v1150 + 8 * v1148--) * v1152.rem;
                  }
                  while (v1148 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1153 = 0;
                  v1154 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1143 + v1153) = (*(_BYTE *)(v1864 + (int)v1144 + v1153) != 0) ^ (*(_BYTE *)(v1847 + (int)v1149 + v1153) != 0);
                    --v1154;
                    ++v1153;
                  }
                  while (v1154 > 1);
                }
                v1143 += (int)v301;
                v1923 += (int)v301;
              }
              while (v1923 < v1894);
            }
          }
          break;
        default:
LABEL_300:
          switch(v297)
          {
            case 1uLL:
              v311 = v26[6];
              if (v311)
              {
                v312 = (_BYTE *)v27[19];
                v313 = (_BYTE *)v215[19];
                v314 = (_BYTE *)v26[19];
                v315 = *(_QWORD *)v27[3];
                v316 = *(_QWORD *)v215[3];
                do
                {
                  *v314++ = (*v312 != 0) ^ (*v313 != 0);
                  v313 += v316;
                  v312 += v315;
                  --v311;
                }
                while (v311);
              }
              break;
            case 2uLL:
              v448 = *v28;
              if ((_DWORD)v448)
              {
                v449 = 0;
                v450 = 0;
                v451 = 0;
                v452 = 0;
                v453 = v27[19];
                v454 = v215[19];
                v455 = v26[19];
                v456 = v28[1];
                v457 = (uint64_t *)v27[3];
                v458 = *v457;
                v459 = v457[1];
                v460 = (uint64_t *)v215[3];
                v461 = *v460;
                v462 = v460[1];
                v463 = v461 - v462 * v216[1];
                if (v456 <= 1)
                  v464 = 1;
                else
                  v464 = v28[1];
                v465 = v458 - v459 * v456;
                do
                {
                  if ((_DWORD)v456)
                  {
                    v466 = v450 + v464;
                    v467 = (_BYTE *)(v455 + v450);
                    v468 = v464;
                    do
                    {
                      *v467++ = (*(_BYTE *)(v453 + v452) != 0) ^ (*(_BYTE *)(v454 + v451) != 0);
                      v452 += v459;
                      v451 += v462;
                      --v468;
                    }
                    while (v468);
                    v450 = v466;
                  }
                  v452 += v465;
                  v451 += v463;
                  ++v449;
                }
                while (v449 != v448);
              }
              break;
            case 3uLL:
              v469 = *v28;
              if ((_DWORD)v469)
              {
                v470 = 0;
                v471 = 0;
                v472 = 0;
                v473 = 0;
                v474 = v27[19];
                v475 = v215[19];
                v476 = v26[19];
                v477 = v28[1];
                v478 = (_QWORD *)v27[3];
                v479 = v478[1];
                v480 = (_QWORD *)v215[3];
                v481 = v480[1];
                v482 = *v480 - v481 * v216[1];
                if (v477 <= 1)
                  v483 = 1;
                else
                  v483 = v28[1];
                v484 = *v478 - v479 * v477;
                do
                {
                  if ((_DWORD)v477)
                  {
                    v485 = 0;
                    v486 = v28[2];
                    v487 = v478[2];
                    v488 = v480[2];
                    if (v486 <= 1)
                      v489 = 1;
                    else
                      v489 = v28[2];
                    v490 = v481 - v488 * v216[2];
                    do
                    {
                      v491 = v489;
                      if ((_DWORD)v486)
                      {
                        do
                        {
                          *(_BYTE *)(v476 + v471++) = (*(_BYTE *)(v474 + v473) != 0) ^ (*(_BYTE *)(v475 + v472) != 0);
                          v473 += v487;
                          v472 += v488;
                          --v491;
                        }
                        while (v491);
                      }
                      v473 += v479 - v487 * v486;
                      v472 += v490;
                      ++v485;
                    }
                    while (v485 != v483);
                  }
                  v473 += v484;
                  v472 += v482;
                  ++v470;
                }
                while (v470 != v469);
              }
              break;
            case 4uLL:
              v1967 = *v28;
              if ((_DWORD)v1967)
              {
                v492 = 0;
                v493 = 0;
                v494 = 0;
                v495 = 0;
                v496 = v27[19];
                v497 = v215[19];
                v498 = v26[19];
                v499 = v28[1];
                v500 = (_QWORD *)v27[3];
                v501 = (_QWORD *)v215[3];
                v1862 = v501[1];
                v1874 = v500[1];
                v1916 = *v501 - v1862 * v216[1];
                v1949 = v28[1];
                if (v499 <= 1)
                  v502 = 1;
                else
                  v502 = v28[1];
                v1887 = *v500 - v500[1] * v499;
                do
                {
                  if (v1949)
                  {
                    v503 = 0;
                    v504 = v28[2];
                    v505 = v500[2];
                    v506 = v501[2];
                    if (v504 <= 1)
                      v507 = 1;
                    else
                      v507 = v28[2];
                    v508 = v1862 - v506 * v216[2];
                    do
                    {
                      if ((_DWORD)v504)
                      {
                        v509 = 0;
                        v510 = v28[3];
                        v511 = v500[3];
                        v512 = v501[3];
                        if (v510 <= 1)
                          v513 = 1;
                        else
                          v513 = v28[3];
                        v514 = v506 - v512 * v216[3];
                        do
                        {
                          v515 = v513;
                          if ((_DWORD)v510)
                          {
                            do
                            {
                              *(_BYTE *)(v498 + v493++) = (*(_BYTE *)(v496 + v495) != 0) ^ (*(_BYTE *)(v497 + v494) != 0);
                              v495 += v511;
                              v494 += v512;
                              --v515;
                            }
                            while (v515);
                          }
                          v495 += v505 - v511 * v510;
                          v494 += v514;
                          ++v509;
                        }
                        while (v509 != v507);
                      }
                      v495 += v1874 - v505 * v504;
                      v494 += v508;
                      ++v503;
                    }
                    while (v503 != v502);
                  }
                  v495 += v1887;
                  v494 += v1916;
                  ++v492;
                }
                while (v492 != v1967);
              }
              break;
            default:
              v437 = v26[6];
              if (v437)
              {
                v438 = 0;
                v1886 = v215[19];
                v1915 = v27[19];
                v1873 = v26[19];
                do
                {
                  v439 = 0;
                  if ((v30 & 0x80000000) == 0)
                  {
                    v440 = v27[3];
                    v441 = v438;
                    do
                    {
                      v442 = ldiv(v441, v28[v30]);
                      v441 = v442.quot;
                      v439 += *(_QWORD *)(v440 + 8 * v30--) * v442.rem;
                    }
                    while (v30 != -1);
                  }
                  v443 = v1944;
                  if ((v1944 & 0x80000000) != 0)
                  {
                    LODWORD(v444) = 0;
                  }
                  else
                  {
                    v444 = 0;
                    v445 = v215[3];
                    v446 = v438;
                    do
                    {
                      v447 = ldiv(v446, v216[v443]);
                      v446 = v447.quot;
                      v444 += *(_QWORD *)(v445 + 8 * v443--) * v447.rem;
                    }
                    while (v443 != -1);
                  }
                  *(_BYTE *)(v1873 + v438++) = (*(_BYTE *)(v1915 + (int)v439) != 0) ^ (*(_BYTE *)(v1886 + (int)v444) != 0);
                  v30 = v1960;
                }
                while (v438 != v437);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            v10 = **(_BYTE **)(*a1 + 152);
            v11 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v12 = *(char **)(*a2 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = v10 - v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v63 = *(_DWORD *)(*a1 + 160);
          if (v63 >= 1)
          {
            v64 = **(_BYTE **)(*a2 + 152);
            v65 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v66 = *(char **)(*a1 + 152);
            v67 = v63 + 1;
            do
            {
              v68 = *v66++;
              *v65++ = v68 - v64;
              --v67;
            }
            while (v67 > 1);
          }
          return;
        case 3:
          v69 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v69 >= 1)
          {
            v70 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v71 = *(char **)(*a2 + 152);
            v72 = *(char **)(*a1 + 152);
            v73 = v69 + 1;
            do
            {
              v75 = *v72++;
              v74 = v75;
              v76 = *v71++;
              *v70++ = v74 - v76;
              --v73;
            }
            while (v73 > 1);
          }
          return;
        default:
          v55 = *(_QWORD **)a3;
          v56 = *a1;
          v57 = *(int **)*a1;
          v58 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v57) >> 2;
          v59 = v58 - 1;
          if ((int)v58 - 1 >= -1)
            v59 = -1;
          v60 = v59 + 1;
          v61 = v58 + 1;
          break;
      }
      while (1)
      {
        v62 = v61 - 2;
        if (v61 - 2 < 0)
          break;
        --v61;
        if (*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v62) != *(_QWORD *)(v55[3] + 8 * v62))
          goto LABEL_155;
      }
      v61 = v60;
LABEL_155:
      v223 = (int **)*a2;
      v224 = *(int **)*a2;
      v225 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v224) >> 2;
      v226 = v225 - 1;
      if ((int)v225 - 1 >= -1)
        v226 = -1;
      v227 = v226 + 1;
      v228 = v225 + 1;
      while (1)
      {
        v229 = v228 - 2;
        if (v228 - 2 < 0)
          break;
        --v228;
        if (*(_QWORD *)&v223[3][2 * v229] != *(_QWORD *)(v55[3] + 8 * v229))
          goto LABEL_206;
      }
      v228 = v227;
LABEL_206:
      v271 = v58 + 1;
      while (1)
      {
        v272 = v271 - 2;
        if (v271 - 2 < 0)
          break;
        --v271;
        if (*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v272))
          goto LABEL_241;
      }
      v271 = v60;
LABEL_241:
      v285 = v225 + 1;
      while (1)
      {
        v286 = v285 - 2;
        if (v285 - 2 < 0)
          break;
        --v285;
        if (*(_QWORD *)&v223[3][2 * v286])
          goto LABEL_306;
      }
      v285 = v227;
LABEL_306:
      v317 = (uint64_t)(v55[1] - *v55) >> 2;
      if (v61 <= v228)
        v318 = v228;
      else
        v318 = v61;
      if (v61 <= v285)
        v61 = v285;
      if (v271 > v228)
        v228 = v271;
      if (v317 > v228)
      {
        v319 = 1;
      }
      else
      {
        v228 = (uint64_t)(v55[1] - *v55) >> 2;
        v319 = 4;
      }
      if (v317 > v61)
      {
        v320 = 2;
      }
      else
      {
        v61 = v228;
        v320 = v319;
      }
      if (v317 > v318)
      {
        v61 = v318;
        v320 = 3;
      }
      if (!v61)
        goto LABEL_336;
      v321 = *(_QWORD *)(v55[3] + 8 * (v61 - 1));
      if (v321 < 0x10)
        goto LABEL_336;
      v1961 = *(_QWORD *)(v55[3] + 8 * (v61 - 1));
      switch(v320)
      {
        case 1:
          if (v61 == 2)
          {
            v1423 = *v57;
            if (*v57)
            {
              v1424 = 0;
              v1425 = 0;
              v1426 = 0;
              v1427 = *(_QWORD *)(v56 + 152);
              v1428 = v223[19];
              v1429 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1430 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1431 = 0;
                      v1432 = *(_BYTE *)(v1427 + v1426);
                      v1433 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1429 + v1431) = v1432 - *((_BYTE *)v1428 + v1425 + v1431);
                        --v1433;
                        ++v1431;
                      }
                      while (v1433 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1434 = *(_QWORD **)(v56 + 24);
                    v1435 = v1434[1];
                    v1426 += v1435;
                    v1425 += *((_QWORD *)v223[3] + 1);
                    v1429 += (int)v321;
                    ++v1430;
                    v1436 = v57[1];
                  }
                  while (v1430 < v1436);
                  v1423 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1436 = 0;
                  v1434 = *(_QWORD **)(v56 + 24);
                  v1435 = v1434[1];
                }
                v1426 = *v1434 + v1426 - v1436 * v1435;
                v1425 = *(_QWORD *)v223[3] + v1425 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1424;
              }
              while (v1424 < v1423);
            }
          }
          else if (v61 == 1)
          {
            v993 = *v57;
            if (*v57)
            {
              v994 = 0;
              v995 = 0;
              v996 = 0;
              v997 = *(_QWORD *)(v56 + 152);
              v998 = v223[19];
              v999 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v1000 = 0;
                  v1001 = *(_BYTE *)(v997 + v996);
                  v1002 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v999 + v1000) = v1001 - *((_BYTE *)v998 + v995 + v1000);
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v993 = **(_DWORD **)*a1;
                }
                v996 += **(_QWORD **)(v56 + 24);
                v995 += *(_QWORD *)v223[3];
                v999 += (int)v321;
                ++v994;
              }
              while (v994 < v993);
            }
          }
          else if (v55[6])
          {
            v1882 = v223[19];
            v1903 = *(_QWORD *)(v56 + 152);
            v1932 = (int)v321;
            v1956 = 0;
            v1869 = v321 + 1;
            v1437 = v55[19];
            do
            {
              v1438 = *(_QWORD *)*a1;
              v1439 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1438) >> 2;
              v1440 = 0;
              v1441 = (v1439 - 1);
              if ((int)v1439 - 1 >= 0)
              {
                v1442 = *(_QWORD *)(*a1 + 24);
                v1443 = v1956;
                do
                {
                  v1444 = ldiv(v1443, *(int *)(v1438 + 4 * v1441));
                  v1443 = v1444.quot;
                  v1440 += *(_QWORD *)(v1442 + 8 * v1441--) * v1444.rem;
                }
                while (v1441 != -1);
              }
              v1445 = *(_QWORD *)*a2;
              v1446 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1445) >> 2;
              v1447 = 0;
              v1448 = (v1446 - 1);
              if ((int)v1446 - 1 >= 0)
              {
                v1449 = *(_QWORD *)(*a2 + 24);
                v1450 = v1956;
                do
                {
                  v1451 = ldiv(v1450, *(int *)(v1445 + 4 * v1448));
                  v1450 = v1451.quot;
                  v1447 += *(_QWORD *)(v1449 + 8 * v1448--) * v1451.rem;
                }
                while (v1448 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1452 = 0;
                v1453 = *(_BYTE *)(v1903 + (int)v1440);
                v1454 = v1869;
                do
                {
                  *(_BYTE *)(v1437 + v1452) = v1453 - *((_BYTE *)v1882 + (int)v1447 + v1452);
                  --v1454;
                  ++v1452;
                }
                while (v1454 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1437 += v1932;
              v1956 += v1932;
            }
            while (v1956 < v55[6]);
          }
          break;
        case 2:
          if (v61 == 2)
          {
            v1455 = *v57;
            if (*v57)
            {
              v1456 = 0;
              v1457 = 0;
              v1458 = 0;
              v1459 = *(_QWORD *)(v56 + 152);
              v1460 = v223[19];
              v1461 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1462 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1463 = 0;
                      v1464 = *((_BYTE *)v1460 + v1457);
                      v1465 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1461 + v1463) = *(_BYTE *)(v1459 + v1458 + v1463) - v1464;
                        --v1465;
                        ++v1463;
                      }
                      while (v1465 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1466 = *(_QWORD **)(v56 + 24);
                    v1467 = v1466[1];
                    v1458 += v1467;
                    v1457 += *((_QWORD *)v223[3] + 1);
                    v1461 += (int)v321;
                    ++v1462;
                    v1468 = v57[1];
                  }
                  while (v1462 < v1468);
                  v1455 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1468 = 0;
                  v1466 = *(_QWORD **)(v56 + 24);
                  v1467 = v1466[1];
                }
                v1458 = *v1466 + v1458 - v1468 * v1467;
                v1457 = *(_QWORD *)v223[3] + v1457 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1456;
              }
              while (v1456 < v1455);
            }
          }
          else if (v61 == 1)
          {
            v1003 = *v57;
            if (*v57)
            {
              v1004 = 0;
              v1005 = 0;
              v1006 = 0;
              v1007 = *(_QWORD *)(v56 + 152);
              v1008 = v223[19];
              v1009 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v1010 = 0;
                  v1011 = *((_BYTE *)v1008 + v1005);
                  v1012 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v1009 + v1010) = *(_BYTE *)(v1007 + v1006 + v1010) - v1011;
                    --v1012;
                    ++v1010;
                  }
                  while (v1012 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v1003 = **(_DWORD **)*a1;
                }
                v1006 += **(_QWORD **)(v56 + 24);
                v1005 += *(_QWORD *)v223[3];
                v1009 += (int)v321;
                ++v1004;
              }
              while (v1004 < v1003);
            }
          }
          else if (v55[6])
          {
            v1883 = v223[19];
            v1904 = *(_QWORD *)(v56 + 152);
            v1933 = (int)v321;
            v1957 = 0;
            v1870 = v321 + 1;
            v1469 = v55[19];
            do
            {
              v1470 = *(_QWORD *)*a1;
              v1471 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1470) >> 2;
              v1472 = 0;
              v1473 = (v1471 - 1);
              if ((int)v1471 - 1 >= 0)
              {
                v1474 = *(_QWORD *)(*a1 + 24);
                v1475 = v1957;
                do
                {
                  v1476 = ldiv(v1475, *(int *)(v1470 + 4 * v1473));
                  v1475 = v1476.quot;
                  v1472 += *(_QWORD *)(v1474 + 8 * v1473--) * v1476.rem;
                }
                while (v1473 != -1);
              }
              v1477 = *(_QWORD *)*a2;
              v1478 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1477) >> 2;
              v1479 = 0;
              v1480 = (v1478 - 1);
              if ((int)v1478 - 1 >= 0)
              {
                v1481 = *(_QWORD *)(*a2 + 24);
                v1482 = v1957;
                do
                {
                  v1483 = ldiv(v1482, *(int *)(v1477 + 4 * v1480));
                  v1482 = v1483.quot;
                  v1479 += *(_QWORD *)(v1481 + 8 * v1480--) * v1483.rem;
                }
                while (v1480 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1484 = 0;
                v1485 = *((_BYTE *)v1883 + (int)v1479);
                v1486 = v1870;
                do
                {
                  *(_BYTE *)(v1469 + v1484) = *(_BYTE *)(v1904 + (int)v1472 + v1484) - v1485;
                  --v1486;
                  ++v1484;
                }
                while (v1486 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1469 += v1933;
              v1957 += v1933;
            }
            while (v1957 < v55[6]);
          }
          break;
        case 3:
          if (v61 == 2)
          {
            v1155 = *v57;
            if (*v57)
            {
              v1156 = 0;
              v1157 = 0;
              v1158 = 0;
              v1159 = *(_QWORD *)(v56 + 152);
              v1160 = v223[19];
              v1161 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1162 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1163 = 0;
                      v1164 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1161 + v1163) = *(_BYTE *)(v1159 + v1158 + v1163)
                                                  - *((_BYTE *)v1160 + v1157 + v1163);
                        --v1164;
                        ++v1163;
                      }
                      while (v1164 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1165 = *(_QWORD **)(v56 + 24);
                    v1166 = v1165[1];
                    v1158 += v1166;
                    v1157 += *((_QWORD *)v223[3] + 1);
                    v1161 += (int)v321;
                    ++v1162;
                    v1167 = v57[1];
                  }
                  while (v1162 < v1167);
                  v1155 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1167 = 0;
                  v1165 = *(_QWORD **)(v56 + 24);
                  v1166 = v1165[1];
                }
                v1158 = *v1165 + v1158 - v1167 * v1166;
                v1157 = *(_QWORD *)v223[3] + v1157 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1156;
              }
              while (v1156 < v1155);
            }
          }
          else if (v61 == 1)
          {
            v322 = *v57;
            if (*v57)
            {
              v323 = 0;
              v324 = 0;
              v325 = 0;
              v326 = *(_QWORD *)(v56 + 152);
              v327 = v223[19];
              v328 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v329 = 0;
                  v330 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v328 + v329) = *(_BYTE *)(v326 + v325 + v329) - *((_BYTE *)v327 + v324 + v329);
                    --v330;
                    ++v329;
                  }
                  while (v330 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v322 = **(_DWORD **)*a1;
                }
                v325 += **(_QWORD **)(v56 + 24);
                v324 += *(_QWORD *)v223[3];
                v328 += (int)v321;
                ++v323;
              }
              while (v323 < v322);
            }
          }
          else if (v55[6])
          {
            v1880 = v223[19];
            v1895 = *(_QWORD *)(v56 + 152);
            v1924 = (int)v321;
            v1954 = 0;
            v1865 = v321 + 1;
            v1168 = v55[19];
            do
            {
              v1169 = *(_QWORD *)*a1;
              v1170 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1169) >> 2;
              v1171 = 0;
              v1172 = (v1170 - 1);
              if ((int)v1170 - 1 >= 0)
              {
                v1173 = *(_QWORD *)(*a1 + 24);
                v1174 = v1954;
                do
                {
                  v1175 = ldiv(v1174, *(int *)(v1169 + 4 * v1172));
                  v1174 = v1175.quot;
                  v1171 += *(_QWORD *)(v1173 + 8 * v1172--) * v1175.rem;
                }
                while (v1172 != -1);
              }
              v1176 = *(_QWORD *)*a2;
              v1177 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1176) >> 2;
              v1178 = 0;
              v1179 = (v1177 - 1);
              if ((int)v1177 - 1 >= 0)
              {
                v1180 = *(_QWORD *)(*a2 + 24);
                v1181 = v1954;
                do
                {
                  v1182 = ldiv(v1181, *(int *)(v1176 + 4 * v1179));
                  v1181 = v1182.quot;
                  v1178 += *(_QWORD *)(v1180 + 8 * v1179--) * v1182.rem;
                }
                while (v1179 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1183 = 0;
                v1184 = v1865;
                do
                {
                  *(_BYTE *)(v1168 + v1183) = *(_BYTE *)(v1895 + (int)v1171 + v1183)
                                            - *((_BYTE *)v1880 + (int)v1178 + v1183);
                  --v1184;
                  ++v1183;
                }
                while (v1184 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1168 += v1924;
              v1954 += v1924;
            }
            while (v1954 < v55[6]);
          }
          break;
        default:
LABEL_336:
          switch(v317)
          {
            case 1uLL:
              if (v55[6])
              {
                v331 = 0;
                v332 = 0;
                v333 = 0;
                v334 = *(_QWORD *)(v56 + 152);
                v335 = v223[19];
                v336 = v55[19];
                do
                {
                  *(_BYTE *)(v336 + v331) = *(_BYTE *)(v334 + v333) - *((_BYTE *)v335 + v332);
                  v333 += **(_QWORD **)(*a1 + 24);
                  v332 += **(_QWORD **)(*a2 + 24);
                  ++v331;
                }
                while (v331 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v532 = *v57;
              if (*v57)
              {
                v533 = 0;
                v534 = 0;
                v535 = 0;
                v536 = 0;
                v537 = *(_QWORD *)(v56 + 152);
                v538 = v223[19];
                v539 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v540 = 0;
                    do
                    {
                      *(_BYTE *)(v539 + v534 + v540) = *(_BYTE *)(v537 + v536) - *((_BYTE *)v538 + v535);
                      v56 = *a1;
                      v541 = *(_QWORD **)(*a1 + 24);
                      v542 = v541[1];
                      v536 += v542;
                      v223 = (int **)*a2;
                      v543 = *(int **)(*a2 + 24);
                      v544 = *((_QWORD *)v543 + 1);
                      v535 += v544;
                      ++v540;
                      v57 = *(int **)*a1;
                      v545 = v57[1];
                    }
                    while (v540 < v545);
                    v532 = *v57;
                    v224 = *v223;
                    v534 += v540;
                  }
                  else
                  {
                    v545 = 0;
                    v541 = *(_QWORD **)(v56 + 24);
                    v542 = v541[1];
                    v543 = v223[3];
                    v544 = *((_QWORD *)v543 + 1);
                  }
                  v536 = *v541 + v536 - v545 * v542;
                  v535 = *(_QWORD *)v543 + v535 - v544 * v224[1];
                  ++v533;
                }
                while (v533 < v532);
              }
              break;
            case 3uLL:
              v546 = *v57;
              if (*v57)
              {
                v547 = 0;
                v548 = 0;
                v549 = 0;
                v550 = 0;
                v551 = *(_QWORD *)(v56 + 152);
                v552 = v223[19];
                v553 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v554 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        v555 = 0;
                        do
                        {
                          *(_BYTE *)(v553 + v548 + v555) = *(_BYTE *)(v551 + v550) - *((_BYTE *)v552 + v549);
                          v56 = *a1;
                          v556 = *(_QWORD **)(*a1 + 24);
                          v557 = v556[2];
                          v550 += v557;
                          v223 = (int **)*a2;
                          v558 = *(int **)(*a2 + 24);
                          v559 = *((_QWORD *)v558 + 2);
                          v549 += v559;
                          ++v555;
                          v57 = *(int **)*a1;
                          v560 = v57[2];
                        }
                        while (v555 < v560);
                        v224 = *v223;
                        v548 += v555;
                      }
                      else
                      {
                        v560 = 0;
                        v556 = *(_QWORD **)(v56 + 24);
                        v557 = v556[2];
                        v558 = v223[3];
                        v559 = *((_QWORD *)v558 + 2);
                      }
                      v561 = v556[1];
                      v550 = v561 + v550 - v560 * v557;
                      v549 = *((_QWORD *)v558 + 1) + v549 - v559 * v224[2];
                      ++v554;
                      v562 = v57[1];
                    }
                    while (v554 < v562);
                    v546 = *v57;
                  }
                  else
                  {
                    v562 = 0;
                    v556 = *(_QWORD **)(v56 + 24);
                    v561 = v556[1];
                  }
                  v550 = *v556 + v550 - v562 * v561;
                  v549 = *(_QWORD *)v223[3] + v549 - *((_QWORD *)v223[3] + 1) * v224[1];
                  ++v547;
                }
                while (v547 < v546);
              }
              break;
            case 4uLL:
              v563 = *v57;
              if (*v57)
              {
                v564 = 0;
                v565 = 0;
                v566 = 0;
                v567 = 0;
                v568 = *(_QWORD *)(v56 + 152);
                v569 = v223[19];
                v570 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v571 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        v572 = 0;
                        do
                        {
                          if (v57[3])
                          {
                            v573 = 0;
                            do
                            {
                              *(_BYTE *)(v570 + v565 + v573) = *(_BYTE *)(v568 + v567) - *((_BYTE *)v569 + v566);
                              v56 = *a1;
                              v574 = *(_QWORD **)(*a1 + 24);
                              v575 = v574[3];
                              v567 += v575;
                              v223 = (int **)*a2;
                              v576 = *(int **)(*a2 + 24);
                              v577 = *((_QWORD *)v576 + 3);
                              v566 += v577;
                              ++v573;
                              v57 = *(int **)*a1;
                              v578 = v57[3];
                            }
                            while (v573 < v578);
                            v224 = *v223;
                            v565 += v573;
                          }
                          else
                          {
                            v578 = 0;
                            v574 = *(_QWORD **)(v56 + 24);
                            v575 = v574[3];
                            v576 = v223[3];
                            v577 = *((_QWORD *)v576 + 3);
                          }
                          v579 = v574[2];
                          v567 = v579 + v567 - v578 * v575;
                          v566 = *((_QWORD *)v576 + 2) + v566 - v577 * v224[3];
                          ++v572;
                          v580 = v57[2];
                        }
                        while (v572 < v580);
                      }
                      else
                      {
                        v580 = 0;
                        v574 = *(_QWORD **)(v56 + 24);
                        v579 = v574[2];
                      }
                      v567 = v574[1] + v567 - v580 * v579;
                      v566 = *((_QWORD *)v223[3] + 1) + v566 - *((_QWORD *)v223[3] + 2) * v224[2];
                      ++v571;
                      v581 = v57[1];
                    }
                    while (v571 < v581);
                    v563 = *v57;
                  }
                  else
                  {
                    v581 = 0;
                  }
                  v567 = **(_QWORD **)(v56 + 24) + v567 - *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8) * v581;
                  v566 = *(_QWORD *)v223[3] + v566 - *((_QWORD *)v223[3] + 1) * v224[1];
                  ++v564;
                }
                while (v564 < v563);
              }
              break;
            default:
              if (v55[6])
              {
                v516 = 0;
                v1950 = v223[19];
                v1968 = *(_QWORD *)(v56 + 152);
                v517 = v55[19];
                do
                {
                  v518 = *(_QWORD *)*a1;
                  v519 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v518) >> 2;
                  v520 = 0;
                  v521 = (v519 - 1);
                  if ((int)v519 - 1 >= 0)
                  {
                    v522 = *(_QWORD *)(*a1 + 24);
                    v523 = v516;
                    do
                    {
                      v524 = ldiv(v523, *(int *)(v518 + 4 * v521));
                      v523 = v524.quot;
                      v520 += *(_QWORD *)(v522 + 8 * v521--) * v524.rem;
                    }
                    while (v521 != -1);
                  }
                  v525 = *(_QWORD *)*a2;
                  v526 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v525) >> 2;
                  v527 = 0;
                  v528 = (v526 - 1);
                  if ((int)v526 - 1 >= 0)
                  {
                    v529 = *(_QWORD *)(*a2 + 24);
                    v530 = v516;
                    do
                    {
                      v531 = ldiv(v530, *(int *)(v525 + 4 * v528));
                      v530 = v531.quot;
                      v527 += *(_QWORD *)(v529 + 8 * v528--) * v531.rem;
                    }
                    while (v528 != -1);
                  }
                  *(_BYTE *)(v517 + v516++) = *(_BYTE *)(v1968 + (int)v520) - *((_BYTE *)v1950 + (int)v527);
                }
                while (v516 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            v17 = **(_DWORD **)(*a1 + 152);
            v18 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v19 = *(int **)(*a2 + 152);
            v20 = v16 + 1;
            do
            {
              v21 = *v19++;
              *v18++ = v17 - v21;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          v86 = *(_DWORD *)(*a1 + 160);
          if (v86 >= 1)
          {
            v87 = **(_DWORD **)(*a2 + 152);
            v88 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v89 = *(int **)(*a1 + 152);
            v90 = v86 + 1;
            do
            {
              v91 = *v89++;
              *v88++ = v91 - v87;
              --v90;
            }
            while (v90 > 1);
          }
          return;
        case 3:
          v92 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v92 >= 1)
          {
            v93 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v94 = *(int **)(*a2 + 152);
            v95 = *(int **)(*a1 + 152);
            v96 = v92 + 1;
            do
            {
              v98 = *v95++;
              v97 = v98;
              v99 = *v94++;
              *v93++ = v97 - v99;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          v77 = *(_QWORD **)a3;
          v78 = (_QWORD *)*a1;
          v79 = *(int **)*a1;
          v80 = (v78[1] - (_QWORD)v79) >> 2;
          v81 = (v80 - 1);
          if ((int)v81 >= -1)
            v82 = -1;
          else
            v82 = v80 - 1;
          v83 = v82 + 1;
          v84 = v80 + 1;
          break;
      }
      while (1)
      {
        v85 = v84 - 2;
        if (v84 - 2 < 0)
          break;
        --v84;
        if (*(_QWORD *)(v78[3] + 8 * v85) != *(_QWORD *)(v77[3] + 8 * v85))
          goto LABEL_162;
      }
      v84 = v83;
LABEL_162:
      v230 = (_QWORD *)*a2;
      v231 = *(int **)*a2;
      v232 = (v230[1] - (_QWORD)v231) >> 2;
      v233 = (v232 - 1);
      if ((int)v233 >= -1)
        v234 = -1;
      else
        v234 = v232 - 1;
      v235 = v234 + 1;
      v236 = v232 + 1;
      while (1)
      {
        v237 = v236 - 2;
        if (v236 - 2 < 0)
          break;
        --v236;
        if (*(_QWORD *)(v230[3] + 8 * v237) != *(_QWORD *)(v77[3] + 8 * v237))
          goto LABEL_211;
      }
      v236 = v235;
LABEL_211:
      v273 = v80 + 1;
      while (1)
      {
        v274 = v273 - 2;
        if (v273 - 2 < 0)
          break;
        --v273;
        if (*(_QWORD *)(v78[3] + 8 * v274))
          goto LABEL_246;
      }
      v273 = v83;
LABEL_246:
      v287 = v232 + 1;
      while (1)
      {
        v288 = v287 - 2;
        if (v287 - 2 < 0)
          break;
        --v287;
        if (*(_QWORD *)(v230[3] + 8 * v288))
          goto LABEL_342;
      }
      v287 = v235;
LABEL_342:
      v337 = (uint64_t)(v77[1] - *v77) >> 2;
      if (v84 <= v236)
        v338 = v236;
      else
        v338 = v84;
      if (v84 <= v287)
        v84 = v287;
      if (v273 > v236)
        v236 = v273;
      if (v337 > v236)
      {
        v339 = 1;
      }
      else
      {
        v236 = (uint64_t)(v77[1] - *v77) >> 2;
        v339 = 4;
      }
      if (v337 > v84)
      {
        v340 = 2;
      }
      else
      {
        v84 = v236;
        v340 = v339;
      }
      if (v337 > v338)
      {
        v84 = v338;
        v340 = 3;
      }
      v1945 = v233;
      v1962 = v81;
      if (!v84)
        goto LABEL_372;
      v341 = *(_QWORD *)(v77[3] + 8 * (v84 - 1));
      if (v341 < 0x10)
        goto LABEL_372;
      switch(v340)
      {
        case 1:
          if (v84 == 2)
          {
            v1487 = *v79;
            if (*v79)
            {
              v1488 = 0;
              v1489 = 0;
              v1490 = 0;
              v1491 = v78[19];
              v1492 = v230[19];
              v1493 = v77[19];
              v1494 = (uint64_t *)v78[3];
              v1495 = *v1494;
              v1496 = v1494[1];
              v1497 = (uint64_t *)v230[3];
              v1498 = *v1497;
              v1499 = v1497[1];
              v1500 = v79[1];
              v1501 = v1500;
              do
              {
                if (v1501)
                {
                  v1502 = 0;
                  v1503 = v1492 + 4 * v1489;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1504 = 0;
                      v1505 = *(_DWORD *)(v1491 + 4 * v1490);
                      v1506 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1493 + v1504) = v1505 - *(_DWORD *)(v1503 + v1504);
                        --v1506;
                        v1504 += 4;
                      }
                      while (v1506 > 1);
                      v1500 = v79[1];
                    }
                    v1490 += v1496;
                    v1489 += v1499;
                    v1493 += 4 * (int)v341;
                    ++v1502;
                    v1503 += 4 * v1499;
                  }
                  while (v1502 < v1500);
                  v1507 = v1500;
                  v1487 = *v79;
                  v1501 = v1500;
                }
                else
                {
                  v1507 = 0;
                }
                v1490 = v1490 + v1495 - v1507 * v1496;
                v1489 = v1489 + v1498 - v1499 * v231[1];
                ++v1488;
              }
              while (v1488 < v1487);
            }
          }
          else if (v84 == 1)
          {
            v1013 = *v79;
            if (*v79)
            {
              v1014 = 0;
              v1015 = 0;
              v1016 = v78[19];
              v1017 = v230[19];
              v1018 = v77[19];
              v1019 = *(_QWORD *)v78[3];
              v1020 = 4 * *(_QWORD *)v230[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v1021 = 0;
                  v1022 = *(_DWORD *)(v1016 + 4 * v1015);
                  v1023 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1018 + v1021) = v1022 - *(_DWORD *)(v1017 + v1021);
                    --v1023;
                    v1021 += 4;
                  }
                  while (v1023 > 1);
                  v1013 = *v79;
                }
                v1015 += v1019;
                ++v1014;
                v1018 += 4 * (int)v341;
                v1017 += v1020;
              }
              while (v1014 < v1013);
            }
          }
          else
          {
            v1905 = v77[6];
            if (v1905)
            {
              v1934 = 0;
              v1839 = v230[19];
              v1854 = v78[19];
              v1508 = v77[19];
              do
              {
                v1509 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1510 = v78[3];
                  v1511 = v81;
                  v1512 = v1934;
                  do
                  {
                    v1513 = ldiv(v1512, v79[v1511]);
                    v1512 = v1513.quot;
                    v1509 += *(_QWORD *)(v1510 + 8 * v1511--) * v1513.rem;
                  }
                  while (v1511 != -1);
                }
                v1514 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1515) = 0;
                }
                else
                {
                  v1515 = 0;
                  v1516 = v230[3];
                  v1517 = v1934;
                  do
                  {
                    v1518 = ldiv(v1517, v231[v1514]);
                    v1517 = v1518.quot;
                    v1515 += *(_QWORD *)(v1516 + 8 * v1514--) * v1518.rem;
                  }
                  while (v1514 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1519 = 0;
                  v1520 = *(_DWORD *)(v1854 + 4 * (int)v1509);
                  v1521 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1508 + v1519) = v1520 - *(_DWORD *)(v1839 + 4 * (int)v1515 + v1519);
                    --v1521;
                    v1519 += 4;
                  }
                  while (v1521 > 1);
                }
                v1508 += 4 * (int)v341;
                v1934 += (int)v341;
              }
              while (v1934 < v1905);
            }
          }
          break;
        case 2:
          if (v84 == 2)
          {
            v1522 = *v79;
            if (*v79)
            {
              v1523 = 0;
              v1524 = 0;
              v1525 = 0;
              v1526 = v78[19];
              v1527 = v230[19];
              v1528 = v77[19];
              v1529 = (uint64_t *)v78[3];
              v1530 = *v1529;
              v1531 = v1529[1];
              v1532 = (uint64_t *)v230[3];
              v1533 = *v1532;
              v1534 = v1532[1];
              v1535 = v79[1];
              v1536 = v1535;
              do
              {
                if (v1536)
                {
                  v1537 = 0;
                  v1538 = v1526 + 4 * v1525;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1539 = 0;
                      v1540 = *(_DWORD *)(v1527 + 4 * v1524);
                      v1541 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1528 + v1539) = *(_DWORD *)(v1538 + v1539) - v1540;
                        --v1541;
                        v1539 += 4;
                      }
                      while (v1541 > 1);
                      v1535 = v79[1];
                    }
                    v1525 += v1531;
                    v1524 += v1534;
                    v1528 += 4 * (int)v341;
                    ++v1537;
                    v1538 += 4 * v1531;
                  }
                  while (v1537 < v1535);
                  v1542 = v1535;
                  v1522 = *v79;
                  v1536 = v1535;
                }
                else
                {
                  v1542 = 0;
                }
                v1525 = v1525 + v1530 - v1542 * v1531;
                v1524 = v1524 + v1533 - v1534 * v231[1];
                ++v1523;
              }
              while (v1523 < v1522);
            }
          }
          else if (v84 == 1)
          {
            v1024 = *v79;
            if (*v79)
            {
              v1025 = 0;
              v1026 = 0;
              v1027 = v78[19];
              v1028 = v230[19];
              v1029 = v77[19];
              v1030 = *(_QWORD *)v230[3];
              v1031 = 4 * *(_QWORD *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v1032 = 0;
                  v1033 = *(_DWORD *)(v1028 + 4 * v1026);
                  v1034 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1029 + v1032) = *(_DWORD *)(v1027 + v1032) - v1033;
                    --v1034;
                    v1032 += 4;
                  }
                  while (v1034 > 1);
                  v1024 = *v79;
                }
                v1026 += v1030;
                ++v1025;
                v1029 += 4 * (int)v341;
                v1027 += v1031;
              }
              while (v1025 < v1024);
            }
          }
          else
          {
            v1906 = v77[6];
            if (v1906)
            {
              v1935 = 0;
              v1840 = v230[19];
              v1855 = v78[19];
              v1543 = v77[19];
              do
              {
                v1544 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1545 = v78[3];
                  v1546 = v81;
                  v1547 = v1935;
                  do
                  {
                    v1548 = ldiv(v1547, v79[v1546]);
                    v1547 = v1548.quot;
                    v1544 += *(_QWORD *)(v1545 + 8 * v1546--) * v1548.rem;
                  }
                  while (v1546 != -1);
                }
                v1549 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1550) = 0;
                }
                else
                {
                  v1550 = 0;
                  v1551 = v230[3];
                  v1552 = v1935;
                  do
                  {
                    v1553 = ldiv(v1552, v231[v1549]);
                    v1552 = v1553.quot;
                    v1550 += *(_QWORD *)(v1551 + 8 * v1549--) * v1553.rem;
                  }
                  while (v1549 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1554 = 0;
                  v1555 = *(_DWORD *)(v1840 + 4 * (int)v1550);
                  v1556 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1543 + v1554) = *(_DWORD *)(v1855 + 4 * (int)v1544 + v1554) - v1555;
                    --v1556;
                    v1554 += 4;
                  }
                  while (v1556 > 1);
                }
                v1543 += 4 * (int)v341;
                v1935 += (int)v341;
              }
              while (v1935 < v1906);
            }
          }
          break;
        case 3:
          if (v84 == 2)
          {
            v1185 = *v79;
            if (*v79)
            {
              v1186 = 0;
              v1187 = 0;
              v1188 = 0;
              v1189 = v78[19];
              v1190 = v230[19];
              v1191 = v77[19];
              v1192 = (uint64_t *)v78[3];
              v1193 = *v1192;
              v1194 = v1192[1];
              v1195 = (uint64_t *)v230[3];
              v1196 = *v1195;
              v1197 = v1195[1];
              v1198 = v79[1];
              v1199 = v1198;
              do
              {
                if (v1199)
                {
                  v1200 = 0;
                  v1201 = v1190 + 4 * v1187;
                  v1202 = v1189 + 4 * v1188;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1203 = 0;
                      v1204 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1191 + v1203) = *(_DWORD *)(v1202 + v1203) - *(_DWORD *)(v1201 + v1203);
                        --v1204;
                        v1203 += 4;
                      }
                      while (v1204 > 1);
                      v1198 = v79[1];
                    }
                    v1188 += v1194;
                    v1187 += v1197;
                    v1191 += 4 * (int)v341;
                    ++v1200;
                    v1201 += 4 * v1197;
                    v1202 += 4 * v1194;
                  }
                  while (v1200 < v1198);
                  v1205 = v1198;
                  v1185 = *v79;
                  v1199 = v1198;
                }
                else
                {
                  v1205 = 0;
                }
                v1188 = v1188 + v1193 - v1205 * v1194;
                v1187 = v1187 + v1196 - v1197 * v231[1];
                ++v1186;
              }
              while (v1186 < v1185);
            }
          }
          else if (v84 == 1)
          {
            v342 = *v79;
            if (*v79)
            {
              v343 = 0;
              v344 = v78[19];
              v345 = v230[19];
              v346 = v77[19];
              v347 = 4 * *(_QWORD *)v230[3];
              v348 = 4 * *(_QWORD *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v349 = 0;
                  v350 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v346 + v349) = *(_DWORD *)(v344 + v349) - *(_DWORD *)(v345 + v349);
                    --v350;
                    v349 += 4;
                  }
                  while (v350 > 1);
                  v342 = *v79;
                }
                ++v343;
                v346 += 4 * (int)v341;
                v345 += v347;
                v344 += v348;
              }
              while (v343 < v342);
            }
          }
          else
          {
            v1896 = v77[6];
            if (v1896)
            {
              v1925 = 0;
              v1835 = v230[19];
              v1848 = v78[19];
              v1206 = v77[19];
              do
              {
                v1207 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1208 = v78[3];
                  v1209 = v81;
                  v1210 = v1925;
                  do
                  {
                    v1211 = ldiv(v1210, v79[v1209]);
                    v1210 = v1211.quot;
                    v1207 += *(_QWORD *)(v1208 + 8 * v1209--) * v1211.rem;
                  }
                  while (v1209 != -1);
                }
                v1212 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1213) = 0;
                }
                else
                {
                  v1213 = 0;
                  v1214 = v230[3];
                  v1215 = v1925;
                  do
                  {
                    v1216 = ldiv(v1215, v231[v1212]);
                    v1215 = v1216.quot;
                    v1213 += *(_QWORD *)(v1214 + 8 * v1212--) * v1216.rem;
                  }
                  while (v1212 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1217 = 0;
                  v1218 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1206 + v1217) = *(_DWORD *)(v1848 + 4 * (int)v1207 + v1217)
                                               - *(_DWORD *)(v1835 + 4 * (int)v1213 + v1217);
                    --v1218;
                    v1217 += 4;
                  }
                  while (v1218 > 1);
                }
                v1206 += 4 * (int)v341;
                v1925 += (int)v341;
              }
              while (v1925 < v1896);
            }
          }
          break;
        default:
LABEL_372:
          switch(v337)
          {
            case 1uLL:
              v351 = v77[6];
              if (v351)
              {
                v352 = (_DWORD *)v78[19];
                v353 = (_DWORD *)v230[19];
                v354 = (_DWORD *)v77[19];
                v355 = 4 * *(_QWORD *)v230[3];
                v356 = 4 * *(_QWORD *)v78[3];
                do
                {
                  *v354++ = *v352 - *v353;
                  v353 = (_DWORD *)((char *)v353 + v355);
                  v352 = (_DWORD *)((char *)v352 + v356);
                  --v351;
                }
                while (v351);
              }
              break;
            case 2uLL:
              v594 = *v79;
              if (*v79)
              {
                v595 = 0;
                v596 = 0;
                v597 = 0;
                v598 = 0;
                v599 = v78[19];
                v600 = v230[19];
                v601 = v77[19];
                v602 = (uint64_t *)v78[3];
                v603 = *v602;
                v604 = v602[1];
                v605 = (uint64_t *)v230[3];
                v607 = *v605;
                v606 = v605[1];
                v608 = v79[1];
                do
                {
                  if (v608)
                  {
                    for (i = 0; i < v608; ++i)
                    {
                      *(_DWORD *)(v601 + 4 * v596 + 4 * i) = *(_DWORD *)(v599 + 4 * v598) - *(_DWORD *)(v600 + 4 * v597);
                      v598 += v604;
                      v597 += v606;
                      v608 = v79[1];
                    }
                    v610 = v608;
                    v594 = *v79;
                    v596 += i;
                  }
                  else
                  {
                    v610 = 0;
                  }
                  v598 = v598 + v603 - v610 * v604;
                  v597 = v597 + v607 - v606 * v231[1];
                  ++v595;
                }
                while (v595 < v594);
              }
              break;
            case 3uLL:
              v611 = *v79;
              if (*v79)
              {
                v612 = 0;
                v613 = 0;
                v614 = 0;
                v615 = 0;
                v616 = v78[19];
                v617 = v230[19];
                v618 = v77[19];
                v619 = (uint64_t *)v78[3];
                v620 = *v619;
                v621 = v619[1];
                v622 = (uint64_t *)v230[3];
                v623 = *v622;
                v624 = v622[1];
                v625 = v79[1];
                v626 = v625;
                do
                {
                  if (v626)
                  {
                    v627 = 0;
                    v628 = v619[2];
                    v629 = v622[2];
                    v630 = v79[2];
                    do
                    {
                      if (v630)
                      {
                        for (j = 0; j < v630; ++j)
                        {
                          *(_DWORD *)(v618 + 4 * v613 + 4 * j) = *(_DWORD *)(v616 + 4 * v615)
                                                               - *(_DWORD *)(v617 + 4 * v614);
                          v615 += v628;
                          v614 += v629;
                          v630 = v79[2];
                        }
                        v632 = v630;
                        v625 = v79[1];
                        v613 += j;
                      }
                      else
                      {
                        v632 = 0;
                      }
                      v615 = v615 + v621 - v632 * v628;
                      v614 = v614 + v624 - v629 * v231[2];
                      ++v627;
                    }
                    while (v627 < v625);
                    v633 = v625;
                    v611 = *v79;
                    v626 = v625;
                  }
                  else
                  {
                    v633 = 0;
                  }
                  v615 = v615 + v620 - v633 * v621;
                  v614 = v614 + v623 - v624 * v231[1];
                  ++v612;
                }
                while (v612 < v611);
              }
              break;
            case 4uLL:
              v634 = *v79;
              if (*v79)
              {
                v635 = 0;
                v636 = 0;
                v637 = 0;
                v638 = 0;
                v639 = v78[19];
                v640 = v230[19];
                v641 = v77[19];
                v642 = (uint64_t *)v78[3];
                v643 = *v642;
                v644 = v642[1];
                v645 = (uint64_t *)v230[3];
                v646 = *v645;
                v647 = v645[1];
                v648 = v79[1];
                v649 = v648;
                do
                {
                  if (v649)
                  {
                    v650 = 0;
                    v651 = v642[2];
                    v652 = v645[2];
                    v653 = v79[2];
                    v654 = v653;
                    do
                    {
                      if (v654)
                      {
                        v655 = 0;
                        v656 = v642[3];
                        v657 = v645[3];
                        v658 = v79[3];
                        do
                        {
                          if (v658)
                          {
                            for (k = 0; k < v658; ++k)
                            {
                              *(_DWORD *)(v641 + 4 * v636 + 4 * k) = *(_DWORD *)(v639 + 4 * v638)
                                                                   - *(_DWORD *)(v640 + 4 * v637);
                              v638 += v656;
                              v637 += v657;
                              v658 = v79[3];
                            }
                            v660 = v658;
                            v653 = v79[2];
                            v636 += k;
                          }
                          else
                          {
                            v660 = 0;
                          }
                          v638 = v638 + v651 - v660 * v656;
                          v637 = v637 + v652 - v657 * v231[3];
                          ++v655;
                        }
                        while (v655 < v653);
                        v661 = v653;
                        v648 = v79[1];
                        v654 = v653;
                      }
                      else
                      {
                        v661 = 0;
                      }
                      v638 = v638 + v644 - v661 * v651;
                      v637 = v637 + v647 - v652 * v231[2];
                      ++v650;
                    }
                    while (v650 < v648);
                    v662 = v648;
                    v634 = *v79;
                    v649 = v648;
                  }
                  else
                  {
                    v662 = 0;
                  }
                  v638 = v638 + v643 - v662 * v644;
                  v637 = v637 + v646 - v647 * v231[1];
                  ++v635;
                }
                while (v635 < v634);
              }
              break;
            default:
              v582 = v77[6];
              if (v582)
              {
                v583 = 0;
                v1888 = v230[19];
                v1917 = v78[19];
                v1875 = v77[19];
                do
                {
                  v584 = 0;
                  if ((v81 & 0x80000000) == 0)
                  {
                    v585 = v78[3];
                    v586 = v81;
                    v587 = v583;
                    do
                    {
                      v588 = ldiv(v587, v79[v586]);
                      v587 = v588.quot;
                      v584 += *(_QWORD *)(v585 + 8 * v586--) * v588.rem;
                    }
                    while (v586 != -1);
                  }
                  v589 = v1945;
                  if ((v1945 & 0x80000000) != 0)
                  {
                    LODWORD(v590) = 0;
                  }
                  else
                  {
                    v590 = 0;
                    v591 = v230[3];
                    v592 = v583;
                    do
                    {
                      v593 = ldiv(v592, v231[v589]);
                      v592 = v593.quot;
                      v590 += *(_QWORD *)(v591 + 8 * v589--) * v593.rem;
                    }
                    while (v589 != -1);
                  }
                  *(_DWORD *)(v1875 + 4 * v583++) = *(_DWORD *)(v1917 + 4 * (int)v584)
                                                  - *(_DWORD *)(v1888 + 4 * (int)v590);
                  v81 = v1962;
                }
                while (v583 != v582);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          v7 = **(_BYTE **)(*a1 + 152) - **(_BYTE **)(*a2 + 152);
LABEL_16:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          v108 = *(_DWORD *)(*a2 + 160);
          if (v108 >= 1)
          {
            v109 = **(_BYTE **)(*a1 + 152);
            v110 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v111 = *(char **)(*a2 + 152);
            v112 = v108 + 1;
            do
            {
              v113 = *v111++;
              *v110++ = v109 - v113;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        case 2:
          v114 = *(_DWORD *)(*a1 + 160);
          if (v114 >= 1)
          {
            v115 = **(_BYTE **)(*a2 + 152);
            v116 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v117 = *(char **)(*a1 + 152);
            v118 = v114 + 1;
            do
            {
              v119 = *v117++;
              *v116++ = v119 - v115;
              --v118;
            }
            while (v118 > 1);
          }
          return;
        case 3:
          v120 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v120 >= 1)
          {
            v121 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v122 = *(char **)(*a2 + 152);
            v123 = *(char **)(*a1 + 152);
            v124 = v120 + 1;
            do
            {
              v126 = *v123++;
              v125 = v126;
              v127 = *v122++;
              *v121++ = v125 - v127;
              --v124;
            }
            while (v124 > 1);
          }
          return;
        default:
          v100 = *(_QWORD **)a3;
          v101 = *a1;
          v102 = *(int **)*a1;
          v103 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v102) >> 2;
          v104 = v103 - 1;
          if ((int)v103 - 1 >= -1)
            v104 = -1;
          v105 = v104 + 1;
          v106 = v103 + 1;
          while (1)
          {
            v107 = v106 - 2;
            if (v106 - 2 < 0)
              break;
            --v106;
            if (*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v107) != *(_QWORD *)(v100[3] + 8 * v107))
              goto LABEL_170;
          }
          v106 = v105;
LABEL_170:
          v238 = (int **)*a2;
          v239 = *(int **)*a2;
          v240 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v239) >> 2;
          v241 = v240 - 1;
          if ((int)v240 - 1 >= -1)
            v241 = -1;
          v242 = v241 + 1;
          v243 = v240 + 1;
          while (1)
          {
            v244 = v243 - 2;
            if (v243 - 2 < 0)
              break;
            --v243;
            if (*(_QWORD *)&v238[3][2 * v244] != *(_QWORD *)(v100[3] + 8 * v244))
              goto LABEL_216;
          }
          v243 = v242;
LABEL_216:
          v275 = v103 + 1;
          while (1)
          {
            v276 = v275 - 2;
            if (v275 - 2 < 0)
              break;
            --v275;
            if (*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v276))
              goto LABEL_251;
          }
          v275 = v105;
LABEL_251:
          v289 = v240 + 1;
          while (1)
          {
            v290 = v289 - 2;
            if (v289 - 2 < 0)
              break;
            --v289;
            if (*(_QWORD *)&v238[3][2 * v290])
              goto LABEL_378;
          }
          v289 = v242;
LABEL_378:
          v357 = (uint64_t)(v100[1] - *v100) >> 2;
          if (v106 <= v243)
            v358 = v243;
          else
            v358 = v106;
          if (v106 <= v289)
            v106 = v289;
          if (v275 > v243)
            v243 = v275;
          if (v357 > v243)
          {
            v359 = 1;
          }
          else
          {
            v243 = (uint64_t)(v100[1] - *v100) >> 2;
            v359 = 4;
          }
          if (v357 > v106)
          {
            v360 = 2;
          }
          else
          {
            v106 = v243;
            v360 = v359;
          }
          if (v357 > v358)
          {
            v106 = v358;
            v360 = 3;
          }
          if (!v106)
            goto LABEL_408;
          v361 = *(_QWORD *)(v100[3] + 8 * (v106 - 1));
          if (v361 < 0x10)
            goto LABEL_408;
          v1963 = *(_QWORD *)(v100[3] + 8 * (v106 - 1));
          switch(v360)
          {
            case 1:
              if (v106 == 2)
              {
                v1557 = *v102;
                if (*v102)
                {
                  v1558 = 0;
                  v1559 = 0;
                  v1560 = 0;
                  v1561 = *(_QWORD *)(v101 + 152);
                  v1562 = v238[19];
                  v1563 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1564 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1565 = 0;
                          v1566 = *(_BYTE *)(v1561 + v1560);
                          v1567 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1563 + v1565) = v1566 - *((_BYTE *)v1562 + v1559 + v1565);
                            --v1567;
                            ++v1565;
                          }
                          while (v1567 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1568 = *(_QWORD **)(v101 + 24);
                        v1569 = v1568[1];
                        v1560 += v1569;
                        v1559 += *((_QWORD *)v238[3] + 1);
                        v1563 += (int)v361;
                        ++v1564;
                        v1570 = v102[1];
                      }
                      while (v1564 < v1570);
                      v1557 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1570 = 0;
                      v1568 = *(_QWORD **)(v101 + 24);
                      v1569 = v1568[1];
                    }
                    v1560 = *v1568 + v1560 - v1570 * v1569;
                    v1559 = *(_QWORD *)v238[3] + v1559 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1558;
                  }
                  while (v1558 < v1557);
                }
              }
              else if (v106 == 1)
              {
                v1035 = *v102;
                if (*v102)
                {
                  v1036 = 0;
                  v1037 = 0;
                  v1038 = 0;
                  v1039 = *(_QWORD *)(v101 + 152);
                  v1040 = v238[19];
                  v1041 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v1042 = 0;
                      v1043 = *(_BYTE *)(v1039 + v1038);
                      v1044 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v1041 + v1042) = v1043 - *((_BYTE *)v1040 + v1037 + v1042);
                        --v1044;
                        ++v1042;
                      }
                      while (v1044 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v1035 = **(_DWORD **)*a1;
                    }
                    v1038 += **(_QWORD **)(v101 + 24);
                    v1037 += *(_QWORD *)v238[3];
                    v1041 += (int)v361;
                    ++v1036;
                  }
                  while (v1036 < v1035);
                }
              }
              else if (v100[6])
              {
                v1884 = v238[19];
                v1907 = *(_QWORD *)(v101 + 152);
                v1936 = (int)v361;
                v1958 = 0;
                v1871 = v361 + 1;
                v1571 = v100[19];
                do
                {
                  v1572 = *(_QWORD *)*a1;
                  v1573 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1572) >> 2;
                  v1574 = 0;
                  v1575 = (v1573 - 1);
                  if ((int)v1573 - 1 >= 0)
                  {
                    v1576 = *(_QWORD *)(*a1 + 24);
                    v1577 = v1958;
                    do
                    {
                      v1578 = ldiv(v1577, *(int *)(v1572 + 4 * v1575));
                      v1577 = v1578.quot;
                      v1574 += *(_QWORD *)(v1576 + 8 * v1575--) * v1578.rem;
                    }
                    while (v1575 != -1);
                  }
                  v1579 = *(_QWORD *)*a2;
                  v1580 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1579) >> 2;
                  v1581 = 0;
                  v1582 = (v1580 - 1);
                  if ((int)v1580 - 1 >= 0)
                  {
                    v1583 = *(_QWORD *)(*a2 + 24);
                    v1584 = v1958;
                    do
                    {
                      v1585 = ldiv(v1584, *(int *)(v1579 + 4 * v1582));
                      v1584 = v1585.quot;
                      v1581 += *(_QWORD *)(v1583 + 8 * v1582--) * v1585.rem;
                    }
                    while (v1582 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1586 = 0;
                    v1587 = *(_BYTE *)(v1907 + (int)v1574);
                    v1588 = v1871;
                    do
                    {
                      *(_BYTE *)(v1571 + v1586) = v1587 - *((_BYTE *)v1884 + (int)v1581 + v1586);
                      --v1588;
                      ++v1586;
                    }
                    while (v1588 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1571 += v1936;
                  v1958 += v1936;
                }
                while (v1958 < v100[6]);
              }
              break;
            case 2:
              if (v106 == 2)
              {
                v1589 = *v102;
                if (*v102)
                {
                  v1590 = 0;
                  v1591 = 0;
                  v1592 = 0;
                  v1593 = *(_QWORD *)(v101 + 152);
                  v1594 = v238[19];
                  v1595 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1596 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1597 = 0;
                          v1598 = *((_BYTE *)v1594 + v1591);
                          v1599 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1595 + v1597) = *(_BYTE *)(v1593 + v1592 + v1597) - v1598;
                            --v1599;
                            ++v1597;
                          }
                          while (v1599 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1600 = *(_QWORD **)(v101 + 24);
                        v1601 = v1600[1];
                        v1592 += v1601;
                        v1591 += *((_QWORD *)v238[3] + 1);
                        v1595 += (int)v361;
                        ++v1596;
                        v1602 = v102[1];
                      }
                      while (v1596 < v1602);
                      v1589 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1602 = 0;
                      v1600 = *(_QWORD **)(v101 + 24);
                      v1601 = v1600[1];
                    }
                    v1592 = *v1600 + v1592 - v1602 * v1601;
                    v1591 = *(_QWORD *)v238[3] + v1591 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1590;
                  }
                  while (v1590 < v1589);
                }
              }
              else if (v106 == 1)
              {
                v1045 = *v102;
                if (*v102)
                {
                  v1046 = 0;
                  v1047 = 0;
                  v1048 = 0;
                  v1049 = *(_QWORD *)(v101 + 152);
                  v1050 = v238[19];
                  v1051 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v1052 = 0;
                      v1053 = *((_BYTE *)v1050 + v1047);
                      v1054 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v1051 + v1052) = *(_BYTE *)(v1049 + v1048 + v1052) - v1053;
                        --v1054;
                        ++v1052;
                      }
                      while (v1054 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v1045 = **(_DWORD **)*a1;
                    }
                    v1048 += **(_QWORD **)(v101 + 24);
                    v1047 += *(_QWORD *)v238[3];
                    v1051 += (int)v361;
                    ++v1046;
                  }
                  while (v1046 < v1045);
                }
              }
              else if (v100[6])
              {
                v1885 = v238[19];
                v1908 = *(_QWORD *)(v101 + 152);
                v1937 = (int)v361;
                v1959 = 0;
                v1872 = v361 + 1;
                v1603 = v100[19];
                do
                {
                  v1604 = *(_QWORD *)*a1;
                  v1605 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1604) >> 2;
                  v1606 = 0;
                  v1607 = (v1605 - 1);
                  if ((int)v1605 - 1 >= 0)
                  {
                    v1608 = *(_QWORD *)(*a1 + 24);
                    v1609 = v1959;
                    do
                    {
                      v1610 = ldiv(v1609, *(int *)(v1604 + 4 * v1607));
                      v1609 = v1610.quot;
                      v1606 += *(_QWORD *)(v1608 + 8 * v1607--) * v1610.rem;
                    }
                    while (v1607 != -1);
                  }
                  v1611 = *(_QWORD *)*a2;
                  v1612 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1611) >> 2;
                  v1613 = 0;
                  v1614 = (v1612 - 1);
                  if ((int)v1612 - 1 >= 0)
                  {
                    v1615 = *(_QWORD *)(*a2 + 24);
                    v1616 = v1959;
                    do
                    {
                      v1617 = ldiv(v1616, *(int *)(v1611 + 4 * v1614));
                      v1616 = v1617.quot;
                      v1613 += *(_QWORD *)(v1615 + 8 * v1614--) * v1617.rem;
                    }
                    while (v1614 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1618 = 0;
                    v1619 = *((_BYTE *)v1885 + (int)v1613);
                    v1620 = v1872;
                    do
                    {
                      *(_BYTE *)(v1603 + v1618) = *(_BYTE *)(v1908 + (int)v1606 + v1618) - v1619;
                      --v1620;
                      ++v1618;
                    }
                    while (v1620 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1603 += v1937;
                  v1959 += v1937;
                }
                while (v1959 < v100[6]);
              }
              break;
            case 3:
              if (v106 == 2)
              {
                v1219 = *v102;
                if (*v102)
                {
                  v1220 = 0;
                  v1221 = 0;
                  v1222 = 0;
                  v1223 = *(_QWORD *)(v101 + 152);
                  v1224 = v238[19];
                  v1225 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1226 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1227 = 0;
                          v1228 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1225 + v1227) = *(_BYTE *)(v1223 + v1222 + v1227)
                                                      - *((_BYTE *)v1224 + v1221 + v1227);
                            --v1228;
                            ++v1227;
                          }
                          while (v1228 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1229 = *(_QWORD **)(v101 + 24);
                        v1230 = v1229[1];
                        v1222 += v1230;
                        v1221 += *((_QWORD *)v238[3] + 1);
                        v1225 += (int)v361;
                        ++v1226;
                        v1231 = v102[1];
                      }
                      while (v1226 < v1231);
                      v1219 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1231 = 0;
                      v1229 = *(_QWORD **)(v101 + 24);
                      v1230 = v1229[1];
                    }
                    v1222 = *v1229 + v1222 - v1231 * v1230;
                    v1221 = *(_QWORD *)v238[3] + v1221 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1220;
                  }
                  while (v1220 < v1219);
                }
              }
              else if (v106 == 1)
              {
                v362 = *v102;
                if (*v102)
                {
                  v363 = 0;
                  v364 = 0;
                  v365 = 0;
                  v366 = *(_QWORD *)(v101 + 152);
                  v367 = v238[19];
                  v368 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v369 = 0;
                      v370 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v368 + v369) = *(_BYTE *)(v366 + v365 + v369) - *((_BYTE *)v367 + v364 + v369);
                        --v370;
                        ++v369;
                      }
                      while (v370 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v362 = **(_DWORD **)*a1;
                    }
                    v365 += **(_QWORD **)(v101 + 24);
                    v364 += *(_QWORD *)v238[3];
                    v368 += (int)v361;
                    ++v363;
                  }
                  while (v363 < v362);
                }
              }
              else if (v100[6])
              {
                v1881 = v238[19];
                v1897 = *(_QWORD *)(v101 + 152);
                v1926 = (int)v361;
                v1955 = 0;
                v1866 = v361 + 1;
                v1232 = v100[19];
                do
                {
                  v1233 = *(_QWORD *)*a1;
                  v1234 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1233) >> 2;
                  v1235 = 0;
                  v1236 = (v1234 - 1);
                  if ((int)v1234 - 1 >= 0)
                  {
                    v1237 = *(_QWORD *)(*a1 + 24);
                    v1238 = v1955;
                    do
                    {
                      v1239 = ldiv(v1238, *(int *)(v1233 + 4 * v1236));
                      v1238 = v1239.quot;
                      v1235 += *(_QWORD *)(v1237 + 8 * v1236--) * v1239.rem;
                    }
                    while (v1236 != -1);
                  }
                  v1240 = *(_QWORD *)*a2;
                  v1241 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1240) >> 2;
                  v1242 = 0;
                  v1243 = (v1241 - 1);
                  if ((int)v1241 - 1 >= 0)
                  {
                    v1244 = *(_QWORD *)(*a2 + 24);
                    v1245 = v1955;
                    do
                    {
                      v1246 = ldiv(v1245, *(int *)(v1240 + 4 * v1243));
                      v1245 = v1246.quot;
                      v1242 += *(_QWORD *)(v1244 + 8 * v1243--) * v1246.rem;
                    }
                    while (v1243 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1247 = 0;
                    v1248 = v1866;
                    do
                    {
                      *(_BYTE *)(v1232 + v1247) = *(_BYTE *)(v1897 + (int)v1235 + v1247)
                                                - *((_BYTE *)v1881 + (int)v1242 + v1247);
                      --v1248;
                      ++v1247;
                    }
                    while (v1248 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1232 += v1926;
                  v1955 += v1926;
                }
                while (v1955 < v100[6]);
              }
              break;
            default:
LABEL_408:
              switch(v357)
              {
                case 1uLL:
                  if (v100[6])
                  {
                    v371 = 0;
                    v372 = 0;
                    v373 = 0;
                    v374 = *(_QWORD *)(v101 + 152);
                    v375 = v238[19];
                    v376 = v100[19];
                    do
                    {
                      *(_BYTE *)(v376 + v371) = *(_BYTE *)(v374 + v373) - *((_BYTE *)v375 + v372);
                      v373 += **(_QWORD **)(*a1 + 24);
                      v372 += **(_QWORD **)(*a2 + 24);
                      ++v371;
                    }
                    while (v371 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  v679 = *v102;
                  if (*v102)
                  {
                    v680 = 0;
                    v681 = 0;
                    v682 = 0;
                    v683 = 0;
                    v684 = *(_QWORD *)(v101 + 152);
                    v685 = v238[19];
                    v686 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v687 = 0;
                        do
                        {
                          *(_BYTE *)(v686 + v681 + v687) = *(_BYTE *)(v684 + v683) - *((_BYTE *)v685 + v682);
                          v101 = *a1;
                          v688 = *(_QWORD **)(*a1 + 24);
                          v689 = v688[1];
                          v683 += v689;
                          v238 = (int **)*a2;
                          v690 = *(int **)(*a2 + 24);
                          v691 = *((_QWORD *)v690 + 1);
                          v682 += v691;
                          ++v687;
                          v102 = *(int **)*a1;
                          v692 = v102[1];
                        }
                        while (v687 < v692);
                        v679 = *v102;
                        v239 = *v238;
                        v681 += v687;
                      }
                      else
                      {
                        v692 = 0;
                        v688 = *(_QWORD **)(v101 + 24);
                        v689 = v688[1];
                        v690 = v238[3];
                        v691 = *((_QWORD *)v690 + 1);
                      }
                      v683 = *v688 + v683 - v692 * v689;
                      v682 = *(_QWORD *)v690 + v682 - v691 * v239[1];
                      ++v680;
                    }
                    while (v680 < v679);
                  }
                  break;
                case 3uLL:
                  v693 = *v102;
                  if (*v102)
                  {
                    v694 = 0;
                    v695 = 0;
                    v696 = 0;
                    v697 = 0;
                    v698 = *(_QWORD *)(v101 + 152);
                    v699 = v238[19];
                    v700 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v701 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            v702 = 0;
                            do
                            {
                              *(_BYTE *)(v700 + v695 + v702) = *(_BYTE *)(v698 + v697) - *((_BYTE *)v699 + v696);
                              v101 = *a1;
                              v703 = *(_QWORD **)(*a1 + 24);
                              v704 = v703[2];
                              v697 += v704;
                              v238 = (int **)*a2;
                              v705 = *(int **)(*a2 + 24);
                              v706 = *((_QWORD *)v705 + 2);
                              v696 += v706;
                              ++v702;
                              v102 = *(int **)*a1;
                              v707 = v102[2];
                            }
                            while (v702 < v707);
                            v239 = *v238;
                            v695 += v702;
                          }
                          else
                          {
                            v707 = 0;
                            v703 = *(_QWORD **)(v101 + 24);
                            v704 = v703[2];
                            v705 = v238[3];
                            v706 = *((_QWORD *)v705 + 2);
                          }
                          v708 = v703[1];
                          v697 = v708 + v697 - v707 * v704;
                          v696 = *((_QWORD *)v705 + 1) + v696 - v706 * v239[2];
                          ++v701;
                          v709 = v102[1];
                        }
                        while (v701 < v709);
                        v693 = *v102;
                      }
                      else
                      {
                        v709 = 0;
                        v703 = *(_QWORD **)(v101 + 24);
                        v708 = v703[1];
                      }
                      v697 = *v703 + v697 - v709 * v708;
                      v696 = *(_QWORD *)v238[3] + v696 - *((_QWORD *)v238[3] + 1) * v239[1];
                      ++v694;
                    }
                    while (v694 < v693);
                  }
                  break;
                case 4uLL:
                  v710 = *v102;
                  if (*v102)
                  {
                    v711 = 0;
                    v712 = 0;
                    v713 = 0;
                    v714 = 0;
                    v715 = *(_QWORD *)(v101 + 152);
                    v716 = v238[19];
                    v717 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v718 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            v719 = 0;
                            do
                            {
                              if (v102[3])
                              {
                                v720 = 0;
                                do
                                {
                                  *(_BYTE *)(v717 + v712 + v720) = *(_BYTE *)(v715 + v714) - *((_BYTE *)v716 + v713);
                                  v101 = *a1;
                                  v721 = *(_QWORD **)(*a1 + 24);
                                  v722 = v721[3];
                                  v714 += v722;
                                  v238 = (int **)*a2;
                                  v723 = *(int **)(*a2 + 24);
                                  v724 = *((_QWORD *)v723 + 3);
                                  v713 += v724;
                                  ++v720;
                                  v102 = *(int **)*a1;
                                  v725 = v102[3];
                                }
                                while (v720 < v725);
                                v239 = *v238;
                                v712 += v720;
                              }
                              else
                              {
                                v725 = 0;
                                v721 = *(_QWORD **)(v101 + 24);
                                v722 = v721[3];
                                v723 = v238[3];
                                v724 = *((_QWORD *)v723 + 3);
                              }
                              v726 = v721[2];
                              v714 = v726 + v714 - v725 * v722;
                              v713 = *((_QWORD *)v723 + 2) + v713 - v724 * v239[3];
                              ++v719;
                              v727 = v102[2];
                            }
                            while (v719 < v727);
                          }
                          else
                          {
                            v727 = 0;
                            v721 = *(_QWORD **)(v101 + 24);
                            v726 = v721[2];
                          }
                          v714 = v721[1] + v714 - v727 * v726;
                          v713 = *((_QWORD *)v238[3] + 1) + v713 - *((_QWORD *)v238[3] + 2) * v239[2];
                          ++v718;
                          v728 = v102[1];
                        }
                        while (v718 < v728);
                        v710 = *v102;
                      }
                      else
                      {
                        v728 = 0;
                      }
                      v714 = **(_QWORD **)(v101 + 24) + v714 - *(_QWORD *)(*(_QWORD *)(v101 + 24) + 8) * v728;
                      v713 = *(_QWORD *)v238[3] + v713 - *((_QWORD *)v238[3] + 1) * v239[1];
                      ++v711;
                    }
                    while (v711 < v710);
                  }
                  break;
                default:
                  if (v100[6])
                  {
                    v663 = 0;
                    v1951 = v238[19];
                    v1969 = *(_QWORD *)(v101 + 152);
                    v664 = v100[19];
                    do
                    {
                      v665 = *(_QWORD *)*a1;
                      v666 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v665) >> 2;
                      v667 = 0;
                      v668 = (v666 - 1);
                      if ((int)v666 - 1 >= 0)
                      {
                        v669 = *(_QWORD *)(*a1 + 24);
                        v670 = v663;
                        do
                        {
                          v671 = ldiv(v670, *(int *)(v665 + 4 * v668));
                          v670 = v671.quot;
                          v667 += *(_QWORD *)(v669 + 8 * v668--) * v671.rem;
                        }
                        while (v668 != -1);
                      }
                      v672 = *(_QWORD *)*a2;
                      v673 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v672) >> 2;
                      v674 = 0;
                      v675 = (v673 - 1);
                      if ((int)v673 - 1 >= 0)
                      {
                        v676 = *(_QWORD *)(*a2 + 24);
                        v677 = v663;
                        do
                        {
                          v678 = ldiv(v677, *(int *)(v672 + 4 * v675));
                          v677 = v678.quot;
                          v674 += *(_QWORD *)(v676 + 8 * v675--) * v678.rem;
                        }
                        while (v675 != -1);
                      }
                      *(_BYTE *)(v664 + v663++) = *(_BYTE *)(v1969 + (int)v667) - *((_BYTE *)v1951 + (int)v674);
                    }
                    while (v663 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          v137 = *(_DWORD *)(*a2 + 160);
          if (v137 >= 1)
          {
            v138 = **(_DWORD **)(*a1 + 152);
            v139 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v140 = *(int **)(*a2 + 152);
            v141 = v137 + 1;
            do
            {
              v142 = *v140++;
              *v139++ = v138 - v142;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        case 2:
          v143 = *(_DWORD *)(*a1 + 160);
          if (v143 >= 1)
          {
            v144 = **(_DWORD **)(*a2 + 152);
            v145 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v146 = *(int **)(*a1 + 152);
            v147 = v143 + 1;
            do
            {
              v148 = *v146++;
              *v145++ = v148 - v144;
              --v147;
            }
            while (v147 > 1);
          }
          return;
        case 3:
          v149 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v149 >= 1)
          {
            v150 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v151 = *(int **)(*a2 + 152);
            v152 = *(int **)(*a1 + 152);
            v153 = v149 + 1;
            do
            {
              v155 = *v152++;
              v154 = v155;
              v156 = *v151++;
              *v150++ = v154 - v156;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        default:
          v128 = *(_QWORD **)a3;
          v129 = (_QWORD *)*a1;
          v130 = *(int **)*a1;
          v131 = (v129[1] - (_QWORD)v130) >> 2;
          v132 = (v131 - 1);
          if ((int)v132 >= -1)
            v133 = -1;
          else
            v133 = v131 - 1;
          v134 = v133 + 1;
          v135 = v131 + 1;
          while (1)
          {
            v136 = v135 - 2;
            if (v135 - 2 < 0)
              break;
            --v135;
            if (*(_QWORD *)(v129[3] + 8 * v136) != *(_QWORD *)(v128[3] + 8 * v136))
              goto LABEL_177;
          }
          v135 = v134;
LABEL_177:
          v245 = (_QWORD *)*a2;
          v246 = *(int **)*a2;
          v247 = (v245[1] - (_QWORD)v246) >> 2;
          v248 = (v247 - 1);
          if ((int)v248 >= -1)
            v249 = -1;
          else
            v249 = v247 - 1;
          v250 = v249 + 1;
          v251 = v247 + 1;
          while (1)
          {
            v252 = v251 - 2;
            if (v251 - 2 < 0)
              break;
            --v251;
            if (*(_QWORD *)(v245[3] + 8 * v252) != *(_QWORD *)(v128[3] + 8 * v252))
              goto LABEL_221;
          }
          v251 = v250;
LABEL_221:
          v277 = v131 + 1;
          while (1)
          {
            v278 = v277 - 2;
            if (v277 - 2 < 0)
              break;
            --v277;
            if (*(_QWORD *)(v129[3] + 8 * v278))
              goto LABEL_256;
          }
          v277 = v134;
LABEL_256:
          v291 = v247 + 1;
          while (1)
          {
            v292 = v291 - 2;
            if (v291 - 2 < 0)
              break;
            --v291;
            if (*(_QWORD *)(v245[3] + 8 * v292))
              goto LABEL_414;
          }
          v291 = v250;
LABEL_414:
          v377 = (uint64_t)(v128[1] - *v128) >> 2;
          if (v135 <= v251)
            v378 = v251;
          else
            v378 = v135;
          if (v135 <= v291)
            v135 = v291;
          if (v277 > v251)
            v251 = v277;
          if (v377 > v251)
          {
            v379 = 1;
          }
          else
          {
            v251 = (uint64_t)(v128[1] - *v128) >> 2;
            v379 = 4;
          }
          if (v377 > v135)
          {
            v380 = 2;
          }
          else
          {
            v135 = v251;
            v380 = v379;
          }
          if (v377 > v378)
          {
            v135 = v378;
            v380 = 3;
          }
          v1946 = v248;
          v1964 = v132;
          if (!v135)
            goto LABEL_444;
          v381 = *(_QWORD *)(v128[3] + 8 * (v135 - 1));
          if (v381 < 0x10)
            goto LABEL_444;
          switch(v380)
          {
            case 1:
              if (v135 == 2)
              {
                v1621 = *v130;
                if (*v130)
                {
                  v1622 = 0;
                  v1623 = 0;
                  v1624 = 0;
                  v1625 = v129[19];
                  v1626 = v245[19];
                  v1627 = v128[19];
                  v1628 = (uint64_t *)v129[3];
                  v1629 = *v1628;
                  v1630 = v1628[1];
                  v1631 = (uint64_t *)v245[3];
                  v1632 = *v1631;
                  v1633 = v1631[1];
                  v1634 = v130[1];
                  v1635 = v1634;
                  do
                  {
                    if (v1635)
                    {
                      v1636 = 0;
                      v1637 = v1626 + 4 * v1623;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1638 = 0;
                          v1639 = *(_DWORD *)(v1625 + 4 * v1624);
                          v1640 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1627 + v1638) = v1639 - *(_DWORD *)(v1637 + v1638);
                            --v1640;
                            v1638 += 4;
                          }
                          while (v1640 > 1);
                          v1634 = v130[1];
                        }
                        v1624 += v1630;
                        v1623 += v1633;
                        v1627 += 4 * (int)v381;
                        ++v1636;
                        v1637 += 4 * v1633;
                      }
                      while (v1636 < v1634);
                      v1641 = v1634;
                      v1621 = *v130;
                      v1635 = v1634;
                    }
                    else
                    {
                      v1641 = 0;
                    }
                    v1624 = v1624 + v1629 - v1641 * v1630;
                    v1623 = v1623 + v1632 - v1633 * v246[1];
                    ++v1622;
                  }
                  while (v1622 < v1621);
                }
              }
              else if (v135 == 1)
              {
                v1055 = *v130;
                if (*v130)
                {
                  v1056 = 0;
                  v1057 = 0;
                  v1058 = v129[19];
                  v1059 = v245[19];
                  v1060 = v128[19];
                  v1061 = *(_QWORD *)v129[3];
                  v1062 = 4 * *(_QWORD *)v245[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v1063 = 0;
                      v1064 = *(_DWORD *)(v1058 + 4 * v1057);
                      v1065 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1060 + v1063) = v1064 - *(_DWORD *)(v1059 + v1063);
                        --v1065;
                        v1063 += 4;
                      }
                      while (v1065 > 1);
                      v1055 = *v130;
                    }
                    v1057 += v1061;
                    ++v1056;
                    v1060 += 4 * (int)v381;
                    v1059 += v1062;
                  }
                  while (v1056 < v1055);
                }
              }
              else
              {
                v1909 = v128[6];
                if (v1909)
                {
                  v1938 = 0;
                  v1841 = v245[19];
                  v1856 = v129[19];
                  v1642 = v128[19];
                  do
                  {
                    v1643 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1644 = v129[3];
                      v1645 = v132;
                      v1646 = v1938;
                      do
                      {
                        v1647 = ldiv(v1646, v130[v1645]);
                        v1646 = v1647.quot;
                        v1643 += *(_QWORD *)(v1644 + 8 * v1645--) * v1647.rem;
                      }
                      while (v1645 != -1);
                    }
                    v1648 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1649) = 0;
                    }
                    else
                    {
                      v1649 = 0;
                      v1650 = v245[3];
                      v1651 = v1938;
                      do
                      {
                        v1652 = ldiv(v1651, v246[v1648]);
                        v1651 = v1652.quot;
                        v1649 += *(_QWORD *)(v1650 + 8 * v1648--) * v1652.rem;
                      }
                      while (v1648 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1653 = 0;
                      v1654 = *(_DWORD *)(v1856 + 4 * (int)v1643);
                      v1655 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1642 + v1653) = v1654 - *(_DWORD *)(v1841 + 4 * (int)v1649 + v1653);
                        --v1655;
                        v1653 += 4;
                      }
                      while (v1655 > 1);
                    }
                    v1642 += 4 * (int)v381;
                    v1938 += (int)v381;
                  }
                  while (v1938 < v1909);
                }
              }
              break;
            case 2:
              if (v135 == 2)
              {
                v1656 = *v130;
                if (*v130)
                {
                  v1657 = 0;
                  v1658 = 0;
                  v1659 = 0;
                  v1660 = v129[19];
                  v1661 = v245[19];
                  v1662 = v128[19];
                  v1663 = (uint64_t *)v129[3];
                  v1664 = *v1663;
                  v1665 = v1663[1];
                  v1666 = (uint64_t *)v245[3];
                  v1667 = *v1666;
                  v1668 = v1666[1];
                  v1669 = v130[1];
                  v1670 = v1669;
                  do
                  {
                    if (v1670)
                    {
                      v1671 = 0;
                      v1672 = v1660 + 4 * v1659;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1673 = 0;
                          v1674 = *(_DWORD *)(v1661 + 4 * v1658);
                          v1675 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1662 + v1673) = *(_DWORD *)(v1672 + v1673) - v1674;
                            --v1675;
                            v1673 += 4;
                          }
                          while (v1675 > 1);
                          v1669 = v130[1];
                        }
                        v1659 += v1665;
                        v1658 += v1668;
                        v1662 += 4 * (int)v381;
                        ++v1671;
                        v1672 += 4 * v1665;
                      }
                      while (v1671 < v1669);
                      v1676 = v1669;
                      v1656 = *v130;
                      v1670 = v1669;
                    }
                    else
                    {
                      v1676 = 0;
                    }
                    v1659 = v1659 + v1664 - v1676 * v1665;
                    v1658 = v1658 + v1667 - v1668 * v246[1];
                    ++v1657;
                  }
                  while (v1657 < v1656);
                }
              }
              else if (v135 == 1)
              {
                v1066 = *v130;
                if (*v130)
                {
                  v1067 = 0;
                  v1068 = 0;
                  v1069 = v129[19];
                  v1070 = v245[19];
                  v1071 = v128[19];
                  v1072 = *(_QWORD *)v245[3];
                  v1073 = 4 * *(_QWORD *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v1074 = 0;
                      v1075 = *(_DWORD *)(v1070 + 4 * v1068);
                      v1076 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1071 + v1074) = *(_DWORD *)(v1069 + v1074) - v1075;
                        --v1076;
                        v1074 += 4;
                      }
                      while (v1076 > 1);
                      v1066 = *v130;
                    }
                    v1068 += v1072;
                    ++v1067;
                    v1071 += 4 * (int)v381;
                    v1069 += v1073;
                  }
                  while (v1067 < v1066);
                }
              }
              else
              {
                v1910 = v128[6];
                if (v1910)
                {
                  v1939 = 0;
                  v1842 = v245[19];
                  v1857 = v129[19];
                  v1677 = v128[19];
                  do
                  {
                    v1678 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1679 = v129[3];
                      v1680 = v132;
                      v1681 = v1939;
                      do
                      {
                        v1682 = ldiv(v1681, v130[v1680]);
                        v1681 = v1682.quot;
                        v1678 += *(_QWORD *)(v1679 + 8 * v1680--) * v1682.rem;
                      }
                      while (v1680 != -1);
                    }
                    v1683 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1684) = 0;
                    }
                    else
                    {
                      v1684 = 0;
                      v1685 = v245[3];
                      v1686 = v1939;
                      do
                      {
                        v1687 = ldiv(v1686, v246[v1683]);
                        v1686 = v1687.quot;
                        v1684 += *(_QWORD *)(v1685 + 8 * v1683--) * v1687.rem;
                      }
                      while (v1683 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1688 = 0;
                      v1689 = *(_DWORD *)(v1842 + 4 * (int)v1684);
                      v1690 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1677 + v1688) = *(_DWORD *)(v1857 + 4 * (int)v1678 + v1688) - v1689;
                        --v1690;
                        v1688 += 4;
                      }
                      while (v1690 > 1);
                    }
                    v1677 += 4 * (int)v381;
                    v1939 += (int)v381;
                  }
                  while (v1939 < v1910);
                }
              }
              break;
            case 3:
              if (v135 == 2)
              {
                v1249 = *v130;
                if (*v130)
                {
                  v1250 = 0;
                  v1251 = 0;
                  v1252 = 0;
                  v1253 = v129[19];
                  v1254 = v245[19];
                  v1255 = v128[19];
                  v1256 = (uint64_t *)v129[3];
                  v1257 = *v1256;
                  v1258 = v1256[1];
                  v1259 = (uint64_t *)v245[3];
                  v1260 = *v1259;
                  v1261 = v1259[1];
                  v1262 = v130[1];
                  v1263 = v1262;
                  do
                  {
                    if (v1263)
                    {
                      v1264 = 0;
                      v1265 = v1254 + 4 * v1251;
                      v1266 = v1253 + 4 * v1252;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1267 = 0;
                          v1268 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1255 + v1267) = *(_DWORD *)(v1266 + v1267) - *(_DWORD *)(v1265 + v1267);
                            --v1268;
                            v1267 += 4;
                          }
                          while (v1268 > 1);
                          v1262 = v130[1];
                        }
                        v1252 += v1258;
                        v1251 += v1261;
                        v1255 += 4 * (int)v381;
                        ++v1264;
                        v1265 += 4 * v1261;
                        v1266 += 4 * v1258;
                      }
                      while (v1264 < v1262);
                      v1269 = v1262;
                      v1249 = *v130;
                      v1263 = v1262;
                    }
                    else
                    {
                      v1269 = 0;
                    }
                    v1252 = v1252 + v1257 - v1269 * v1258;
                    v1251 = v1251 + v1260 - v1261 * v246[1];
                    ++v1250;
                  }
                  while (v1250 < v1249);
                }
              }
              else if (v135 == 1)
              {
                v382 = *v130;
                if (*v130)
                {
                  v383 = 0;
                  v384 = v129[19];
                  v385 = v245[19];
                  v386 = v128[19];
                  v387 = 4 * *(_QWORD *)v245[3];
                  v388 = 4 * *(_QWORD *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v389 = 0;
                      v390 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v386 + v389) = *(_DWORD *)(v384 + v389) - *(_DWORD *)(v385 + v389);
                        --v390;
                        v389 += 4;
                      }
                      while (v390 > 1);
                      v382 = *v130;
                    }
                    ++v383;
                    v386 += 4 * (int)v381;
                    v385 += v387;
                    v384 += v388;
                  }
                  while (v383 < v382);
                }
              }
              else
              {
                v1898 = v128[6];
                if (v1898)
                {
                  v1927 = 0;
                  v1836 = v245[19];
                  v1849 = v129[19];
                  v1270 = v128[19];
                  do
                  {
                    v1271 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1272 = v129[3];
                      v1273 = v132;
                      v1274 = v1927;
                      do
                      {
                        v1275 = ldiv(v1274, v130[v1273]);
                        v1274 = v1275.quot;
                        v1271 += *(_QWORD *)(v1272 + 8 * v1273--) * v1275.rem;
                      }
                      while (v1273 != -1);
                    }
                    v1276 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1277) = 0;
                    }
                    else
                    {
                      v1277 = 0;
                      v1278 = v245[3];
                      v1279 = v1927;
                      do
                      {
                        v1280 = ldiv(v1279, v246[v1276]);
                        v1279 = v1280.quot;
                        v1277 += *(_QWORD *)(v1278 + 8 * v1276--) * v1280.rem;
                      }
                      while (v1276 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1281 = 0;
                      v1282 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1270 + v1281) = *(_DWORD *)(v1849 + 4 * (int)v1271 + v1281)
                                                   - *(_DWORD *)(v1836 + 4 * (int)v1277 + v1281);
                        --v1282;
                        v1281 += 4;
                      }
                      while (v1282 > 1);
                    }
                    v1270 += 4 * (int)v381;
                    v1927 += (int)v381;
                  }
                  while (v1927 < v1898);
                }
              }
              break;
            default:
LABEL_444:
              switch(v377)
              {
                case 1uLL:
                  v391 = v128[6];
                  if (v391)
                  {
                    v392 = (_DWORD *)v129[19];
                    v393 = (_DWORD *)v245[19];
                    v394 = (_DWORD *)v128[19];
                    v395 = 4 * *(_QWORD *)v245[3];
                    v396 = 4 * *(_QWORD *)v129[3];
                    do
                    {
                      *v394++ = *v392 - *v393;
                      v393 = (_DWORD *)((char *)v393 + v395);
                      v392 = (_DWORD *)((char *)v392 + v396);
                      --v391;
                    }
                    while (v391);
                  }
                  break;
                case 2uLL:
                  v741 = *v130;
                  if (*v130)
                  {
                    v742 = 0;
                    v743 = 0;
                    v744 = 0;
                    v745 = 0;
                    v746 = v129[19];
                    v747 = v245[19];
                    v748 = v128[19];
                    v749 = (uint64_t *)v129[3];
                    v750 = *v749;
                    v751 = v749[1];
                    v752 = (uint64_t *)v245[3];
                    v754 = *v752;
                    v753 = v752[1];
                    v755 = v130[1];
                    do
                    {
                      if (v755)
                      {
                        for (m = 0; m < v755; ++m)
                        {
                          *(_DWORD *)(v748 + 4 * v743 + 4 * m) = *(_DWORD *)(v746 + 4 * v745)
                                                               - *(_DWORD *)(v747 + 4 * v744);
                          v745 += v751;
                          v744 += v753;
                          v755 = v130[1];
                        }
                        v757 = v755;
                        v741 = *v130;
                        v743 += m;
                      }
                      else
                      {
                        v757 = 0;
                      }
                      v745 = v745 + v750 - v757 * v751;
                      v744 = v744 + v754 - v753 * v246[1];
                      ++v742;
                    }
                    while (v742 < v741);
                  }
                  break;
                case 3uLL:
                  v758 = *v130;
                  if (*v130)
                  {
                    v759 = 0;
                    v760 = 0;
                    v761 = 0;
                    v762 = 0;
                    v763 = v129[19];
                    v764 = v245[19];
                    v765 = v128[19];
                    v766 = (uint64_t *)v129[3];
                    v767 = *v766;
                    v768 = v766[1];
                    v769 = (uint64_t *)v245[3];
                    v770 = *v769;
                    v771 = v769[1];
                    v772 = v130[1];
                    v773 = v772;
                    do
                    {
                      if (v773)
                      {
                        v774 = 0;
                        v775 = v766[2];
                        v776 = v769[2];
                        v777 = v130[2];
                        do
                        {
                          if (v777)
                          {
                            for (n = 0; n < v777; ++n)
                            {
                              *(_DWORD *)(v765 + 4 * v760 + 4 * n) = *(_DWORD *)(v763 + 4 * v762)
                                                                   - *(_DWORD *)(v764 + 4 * v761);
                              v762 += v775;
                              v761 += v776;
                              v777 = v130[2];
                            }
                            v779 = v777;
                            v772 = v130[1];
                            v760 += n;
                          }
                          else
                          {
                            v779 = 0;
                          }
                          v762 = v762 + v768 - v779 * v775;
                          v761 = v761 + v771 - v776 * v246[2];
                          ++v774;
                        }
                        while (v774 < v772);
                        v780 = v772;
                        v758 = *v130;
                        v773 = v772;
                      }
                      else
                      {
                        v780 = 0;
                      }
                      v762 = v762 + v767 - v780 * v768;
                      v761 = v761 + v770 - v771 * v246[1];
                      ++v759;
                    }
                    while (v759 < v758);
                  }
                  break;
                case 4uLL:
                  v781 = *v130;
                  if (*v130)
                  {
                    v782 = 0;
                    v783 = 0;
                    v784 = 0;
                    v785 = 0;
                    v786 = v129[19];
                    v787 = v245[19];
                    v788 = v128[19];
                    v789 = (uint64_t *)v129[3];
                    v790 = *v789;
                    v791 = v789[1];
                    v792 = (uint64_t *)v245[3];
                    v793 = *v792;
                    v794 = v792[1];
                    v795 = v130[1];
                    v796 = v795;
                    do
                    {
                      if (v796)
                      {
                        v797 = 0;
                        v798 = v789[2];
                        v799 = v792[2];
                        v800 = v130[2];
                        v801 = v800;
                        do
                        {
                          if (v801)
                          {
                            v802 = 0;
                            v803 = v789[3];
                            v804 = v792[3];
                            v805 = v130[3];
                            do
                            {
                              if (v805)
                              {
                                for (ii = 0; ii < v805; ++ii)
                                {
                                  *(_DWORD *)(v788 + 4 * v783 + 4 * ii) = *(_DWORD *)(v786 + 4 * v785)
                                                                        - *(_DWORD *)(v787 + 4 * v784);
                                  v785 += v803;
                                  v784 += v804;
                                  v805 = v130[3];
                                }
                                v807 = v805;
                                v800 = v130[2];
                                v783 += ii;
                              }
                              else
                              {
                                v807 = 0;
                              }
                              v785 = v785 + v798 - v807 * v803;
                              v784 = v784 + v799 - v804 * v246[3];
                              ++v802;
                            }
                            while (v802 < v800);
                            v808 = v800;
                            v795 = v130[1];
                            v801 = v800;
                          }
                          else
                          {
                            v808 = 0;
                          }
                          v785 = v785 + v791 - v808 * v798;
                          v784 = v784 + v794 - v799 * v246[2];
                          ++v797;
                        }
                        while (v797 < v795);
                        v809 = v795;
                        v781 = *v130;
                        v796 = v795;
                      }
                      else
                      {
                        v809 = 0;
                      }
                      v785 = v785 + v790 - v809 * v791;
                      v784 = v784 + v793 - v794 * v246[1];
                      ++v782;
                    }
                    while (v782 < v781);
                  }
                  break;
                default:
                  v729 = v128[6];
                  if (v729)
                  {
                    v730 = 0;
                    v1889 = v245[19];
                    v1918 = v129[19];
                    v1876 = v128[19];
                    do
                    {
                      v731 = 0;
                      if ((v132 & 0x80000000) == 0)
                      {
                        v732 = v129[3];
                        v733 = v132;
                        v734 = v730;
                        do
                        {
                          v735 = ldiv(v734, v130[v733]);
                          v734 = v735.quot;
                          v731 += *(_QWORD *)(v732 + 8 * v733--) * v735.rem;
                        }
                        while (v733 != -1);
                      }
                      v736 = v1946;
                      if ((v1946 & 0x80000000) != 0)
                      {
                        LODWORD(v737) = 0;
                      }
                      else
                      {
                        v737 = 0;
                        v738 = v245[3];
                        v739 = v730;
                        do
                        {
                          v740 = ldiv(v739, v246[v736]);
                          v739 = v740.quot;
                          v737 += *(_QWORD *)(v738 + 8 * v736--) * v740.rem;
                        }
                        while (v736 != -1);
                      }
                      *(_DWORD *)(v1876 + 4 * v730++) = *(_DWORD *)(v1918 + 4 * (int)v731)
                                                      - *(_DWORD *)(v1889 + 4 * (int)v737);
                      v132 = v1964;
                    }
                    while (v730 != v729);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v24)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a1 + 152) - **(_QWORD **)(*a2 + 152);
          return;
        case 1:
          v166 = *(_DWORD *)(*a2 + 160);
          if (v166 >= 1)
          {
            v167 = **(_QWORD **)(*a1 + 152);
            v168 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v169 = *(uint64_t **)(*a2 + 152);
            v170 = v166 + 1;
            do
            {
              v171 = *v169++;
              *v168++ = v167 - v171;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 2:
          v172 = *(_DWORD *)(*a1 + 160);
          if (v172 >= 1)
          {
            v173 = **(_QWORD **)(*a2 + 152);
            v174 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v175 = *(uint64_t **)(*a1 + 152);
            v176 = v172 + 1;
            do
            {
              v177 = *v175++;
              *v174++ = v177 - v173;
              --v176;
            }
            while (v176 > 1);
          }
          return;
        case 3:
          v178 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v178 >= 1)
          {
            v179 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v180 = *(uint64_t **)(*a2 + 152);
            v181 = *(uint64_t **)(*a1 + 152);
            v182 = v178 + 1;
            do
            {
              v184 = *v181++;
              v183 = v184;
              v185 = *v180++;
              *v179++ = v183 - v185;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        default:
          v157 = *(_QWORD **)a3;
          v158 = (_QWORD *)*a1;
          v159 = *(int **)*a1;
          v160 = (v158[1] - (_QWORD)v159) >> 2;
          v161 = (v160 - 1);
          if ((int)v161 >= -1)
            v162 = -1;
          else
            v162 = v160 - 1;
          v163 = v162 + 1;
          v164 = v160 + 1;
          while (1)
          {
            v165 = v164 - 2;
            if (v164 - 2 < 0)
              break;
            --v164;
            if (*(_QWORD *)(v158[3] + 8 * v165) != *(_QWORD *)(v157[3] + 8 * v165))
              goto LABEL_185;
          }
          v164 = v163;
LABEL_185:
          v253 = (_QWORD *)*a2;
          v254 = *(int **)*a2;
          v255 = (v253[1] - (_QWORD)v254) >> 2;
          v256 = (v255 - 1);
          if ((int)v256 >= -1)
            v257 = -1;
          else
            v257 = v255 - 1;
          v258 = v257 + 1;
          v259 = v255 + 1;
          while (1)
          {
            v260 = v259 - 2;
            if (v259 - 2 < 0)
              break;
            --v259;
            if (*(_QWORD *)(v253[3] + 8 * v260) != *(_QWORD *)(v157[3] + 8 * v260))
              goto LABEL_226;
          }
          v259 = v258;
LABEL_226:
          v279 = v160 + 1;
          while (1)
          {
            v280 = v279 - 2;
            if (v279 - 2 < 0)
              break;
            --v279;
            if (*(_QWORD *)(v158[3] + 8 * v280))
              goto LABEL_261;
          }
          v279 = v163;
LABEL_261:
          v293 = v255 + 1;
          while (1)
          {
            v294 = v293 - 2;
            if (v293 - 2 < 0)
              break;
            --v293;
            if (*(_QWORD *)(v253[3] + 8 * v294))
              goto LABEL_450;
          }
          v293 = v258;
LABEL_450:
          v397 = (uint64_t)(v157[1] - *v157) >> 2;
          if (v164 <= v259)
            v398 = v259;
          else
            v398 = v164;
          if (v164 <= v293)
            v164 = v293;
          if (v279 > v259)
            v259 = v279;
          if (v397 > v259)
          {
            v399 = 1;
          }
          else
          {
            v259 = (uint64_t)(v157[1] - *v157) >> 2;
            v399 = 4;
          }
          if (v397 > v164)
          {
            v400 = 2;
          }
          else
          {
            v164 = v259;
            v400 = v399;
          }
          if (v397 > v398)
          {
            v164 = v398;
            v400 = 3;
          }
          v1947 = v256;
          v1965 = v161;
          if (!v164)
            goto LABEL_479;
          v401 = *(_QWORD *)(v157[3] + 8 * (v164 - 1));
          if (v401 < 0x10)
            goto LABEL_479;
          switch(v400)
          {
            case 1:
              if (v164 == 2)
              {
                v1691 = *v159;
                if ((_DWORD)v1691)
                {
                  v1692 = 0;
                  v1693 = 0;
                  v1694 = 0;
                  v1695 = v158[19];
                  v1696 = v253[19];
                  v1697 = v157[19];
                  v1698 = v159[1];
                  v1699 = (uint64_t *)v158[3];
                  v1700 = *v1699;
                  v1701 = v1699[1];
                  v1702 = (uint64_t *)v253[3];
                  v1703 = *v1702;
                  v1704 = v1702[1];
                  if (v1698 <= 1)
                    v1705 = 1;
                  else
                    v1705 = v159[1];
                  v1706 = v1700 - v1701 * v1698;
                  v1707 = v1703 - v1704 * v254[1];
                  do
                  {
                    if ((_DWORD)v1698)
                    {
                      v1708 = 0;
                      v1709 = v1696 + 8 * v1693;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1710 = 0;
                          v1711 = *(_QWORD *)(v1695 + 8 * v1694);
                          v1712 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1697 + v1710) = v1711 - *(_QWORD *)(v1709 + v1710);
                            --v1712;
                            v1710 += 8;
                          }
                          while (v1712 > 1);
                        }
                        v1694 += v1701;
                        v1693 += v1704;
                        v1697 += 8 * (int)v401;
                        ++v1708;
                        v1709 += 8 * v1704;
                      }
                      while (v1708 != v1705);
                    }
                    v1694 += v1706;
                    v1693 += v1707;
                    ++v1692;
                  }
                  while (v1692 != v1691);
                }
              }
              else if (v164 == 1)
              {
                v1077 = *v159;
                if ((_DWORD)v1077)
                {
                  v1078 = 0;
                  v1079 = 0;
                  v1080 = v158[19];
                  v1081 = v253[19];
                  v1082 = v157[19];
                  v1083 = *(_QWORD *)v158[3];
                  v1084 = 8 * *(_QWORD *)v253[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v1085 = 0;
                      v1086 = *(_QWORD *)(v1080 + 8 * v1079);
                      v1087 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1082 + v1085) = v1086 - *(_QWORD *)(v1081 + v1085);
                        --v1087;
                        v1085 += 8;
                      }
                      while (v1087 > 1);
                    }
                    v1079 += v1083;
                    ++v1078;
                    v1082 += 8 * (int)v401;
                    v1081 += v1084;
                  }
                  while (v1078 != v1077);
                }
              }
              else
              {
                v1911 = v157[6];
                if (v1911)
                {
                  v1940 = 0;
                  v1843 = v253[19];
                  v1858 = v158[19];
                  v1713 = v157[19];
                  do
                  {
                    v1714 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1715 = v158[3];
                      v1716 = v161;
                      v1717 = v1940;
                      do
                      {
                        v1718 = ldiv(v1717, v159[v1716]);
                        v1717 = v1718.quot;
                        v1714 += *(_QWORD *)(v1715 + 8 * v1716--) * v1718.rem;
                      }
                      while (v1716 != -1);
                    }
                    v1719 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1720) = 0;
                    }
                    else
                    {
                      v1720 = 0;
                      v1721 = v253[3];
                      v1722 = v1940;
                      do
                      {
                        v1723 = ldiv(v1722, v254[v1719]);
                        v1722 = v1723.quot;
                        v1720 += *(_QWORD *)(v1721 + 8 * v1719--) * v1723.rem;
                      }
                      while (v1719 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1724 = 0;
                      v1725 = *(_QWORD *)(v1858 + 8 * (int)v1714);
                      v1726 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1713 + v1724) = v1725 - *(_QWORD *)(v1843 + 8 * (int)v1720 + v1724);
                        --v1726;
                        v1724 += 8;
                      }
                      while (v1726 > 1);
                    }
                    v1713 += 8 * (int)v401;
                    v1940 += (int)v401;
                  }
                  while (v1940 < v1911);
                }
              }
              break;
            case 2:
              if (v164 == 2)
              {
                v1727 = *v159;
                if ((_DWORD)v1727)
                {
                  v1728 = 0;
                  v1729 = 0;
                  v1730 = 0;
                  v1731 = v158[19];
                  v1732 = v253[19];
                  v1733 = v157[19];
                  v1734 = v159[1];
                  v1735 = (uint64_t *)v158[3];
                  v1736 = *v1735;
                  v1737 = v1735[1];
                  v1738 = (uint64_t *)v253[3];
                  v1739 = *v1738;
                  v1740 = v1738[1];
                  if (v1734 <= 1)
                    v1741 = 1;
                  else
                    v1741 = v159[1];
                  v1742 = v1736 - v1737 * v1734;
                  v1743 = v1739 - v1740 * v254[1];
                  do
                  {
                    if ((_DWORD)v1734)
                    {
                      v1744 = 0;
                      v1745 = v1731 + 8 * v1730;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1746 = 0;
                          v1747 = *(_QWORD *)(v1732 + 8 * v1729);
                          v1748 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1733 + v1746) = *(_QWORD *)(v1745 + v1746) - v1747;
                            --v1748;
                            v1746 += 8;
                          }
                          while (v1748 > 1);
                        }
                        v1730 += v1737;
                        v1729 += v1740;
                        v1733 += 8 * (int)v401;
                        ++v1744;
                        v1745 += 8 * v1737;
                      }
                      while (v1744 != v1741);
                    }
                    v1730 += v1742;
                    v1729 += v1743;
                    ++v1728;
                  }
                  while (v1728 != v1727);
                }
              }
              else if (v164 == 1)
              {
                v1088 = *v159;
                if ((_DWORD)v1088)
                {
                  v1089 = 0;
                  v1090 = 0;
                  v1091 = v158[19];
                  v1092 = v253[19];
                  v1093 = v157[19];
                  v1094 = *(_QWORD *)v253[3];
                  v1095 = 8 * *(_QWORD *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v1096 = 0;
                      v1097 = *(_QWORD *)(v1092 + 8 * v1090);
                      v1098 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1093 + v1096) = *(_QWORD *)(v1091 + v1096) - v1097;
                        --v1098;
                        v1096 += 8;
                      }
                      while (v1098 > 1);
                    }
                    v1090 += v1094;
                    ++v1089;
                    v1093 += 8 * (int)v401;
                    v1091 += v1095;
                  }
                  while (v1089 != v1088);
                }
              }
              else
              {
                v1912 = v157[6];
                if (v1912)
                {
                  v1941 = 0;
                  v1844 = v253[19];
                  v1859 = v158[19];
                  v1749 = v157[19];
                  do
                  {
                    v1750 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1751 = v158[3];
                      v1752 = v161;
                      v1753 = v1941;
                      do
                      {
                        v1754 = ldiv(v1753, v159[v1752]);
                        v1753 = v1754.quot;
                        v1750 += *(_QWORD *)(v1751 + 8 * v1752--) * v1754.rem;
                      }
                      while (v1752 != -1);
                    }
                    v1755 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1756) = 0;
                    }
                    else
                    {
                      v1756 = 0;
                      v1757 = v253[3];
                      v1758 = v1941;
                      do
                      {
                        v1759 = ldiv(v1758, v254[v1755]);
                        v1758 = v1759.quot;
                        v1756 += *(_QWORD *)(v1757 + 8 * v1755--) * v1759.rem;
                      }
                      while (v1755 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1760 = 0;
                      v1761 = *(_QWORD *)(v1844 + 8 * (int)v1756);
                      v1762 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1749 + v1760) = *(_QWORD *)(v1859 + 8 * (int)v1750 + v1760) - v1761;
                        --v1762;
                        v1760 += 8;
                      }
                      while (v1762 > 1);
                    }
                    v1749 += 8 * (int)v401;
                    v1941 += (int)v401;
                  }
                  while (v1941 < v1912);
                }
              }
              break;
            case 3:
              if (v164 == 2)
              {
                v1283 = *v159;
                if ((_DWORD)v1283)
                {
                  v1284 = 0;
                  v1285 = 0;
                  v1286 = 0;
                  v1287 = v158[19];
                  v1288 = v253[19];
                  v1289 = v157[19];
                  v1290 = v159[1];
                  v1291 = (uint64_t *)v158[3];
                  v1292 = *v1291;
                  v1293 = v1291[1];
                  v1294 = (uint64_t *)v253[3];
                  v1295 = *v1294;
                  v1296 = v1294[1];
                  if (v1290 <= 1)
                    v1297 = 1;
                  else
                    v1297 = v159[1];
                  v1298 = v1292 - v1293 * v1290;
                  v1299 = v1295 - v1296 * v254[1];
                  do
                  {
                    if ((_DWORD)v1290)
                    {
                      v1300 = 0;
                      v1301 = v1288 + 8 * v1285;
                      v1302 = v1287 + 8 * v1286;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1303 = 0;
                          v1304 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1289 + v1303) = *(_QWORD *)(v1302 + v1303) - *(_QWORD *)(v1301 + v1303);
                            --v1304;
                            v1303 += 8;
                          }
                          while (v1304 > 1);
                        }
                        v1286 += v1293;
                        v1285 += v1296;
                        v1289 += 8 * (int)v401;
                        ++v1300;
                        v1301 += 8 * v1296;
                        v1302 += 8 * v1293;
                      }
                      while (v1300 != v1297);
                    }
                    v1286 += v1298;
                    v1285 += v1299;
                    ++v1284;
                  }
                  while (v1284 != v1283);
                }
              }
              else if (v164 == 1)
              {
                v402 = *v159;
                if ((_DWORD)v402)
                {
                  v403 = 0;
                  v404 = v158[19];
                  v405 = v253[19];
                  v406 = v157[19];
                  v407 = 8 * *(_QWORD *)v253[3];
                  v408 = 8 * *(_QWORD *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v409 = 0;
                      v410 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v406 + v409) = *(_QWORD *)(v404 + v409) - *(_QWORD *)(v405 + v409);
                        --v410;
                        v409 += 8;
                      }
                      while (v410 > 1);
                    }
                    ++v403;
                    v406 += 8 * (int)v401;
                    v405 += v407;
                    v404 += v408;
                  }
                  while (v403 != v402);
                }
              }
              else
              {
                v1899 = v157[6];
                if (v1899)
                {
                  v1928 = 0;
                  v1837 = v253[19];
                  v1850 = v158[19];
                  v1305 = v157[19];
                  do
                  {
                    v1306 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1307 = v158[3];
                      v1308 = v161;
                      v1309 = v1928;
                      do
                      {
                        v1310 = ldiv(v1309, v159[v1308]);
                        v1309 = v1310.quot;
                        v1306 += *(_QWORD *)(v1307 + 8 * v1308--) * v1310.rem;
                      }
                      while (v1308 != -1);
                    }
                    v1311 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1312) = 0;
                    }
                    else
                    {
                      v1312 = 0;
                      v1313 = v253[3];
                      v1314 = v1928;
                      do
                      {
                        v1315 = ldiv(v1314, v254[v1311]);
                        v1314 = v1315.quot;
                        v1312 += *(_QWORD *)(v1313 + 8 * v1311--) * v1315.rem;
                      }
                      while (v1311 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1316 = 0;
                      v1317 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1305 + v1316) = *(_QWORD *)(v1850 + 8 * (int)v1306 + v1316)
                                                   - *(_QWORD *)(v1837 + 8 * (int)v1312 + v1316);
                        --v1317;
                        v1316 += 8;
                      }
                      while (v1317 > 1);
                    }
                    v1305 += 8 * (int)v401;
                    v1928 += (int)v401;
                  }
                  while (v1928 < v1899);
                }
              }
              break;
            default:
LABEL_479:
              switch(v397)
              {
                case 1uLL:
                  v411 = v157[6];
                  if (v411)
                  {
                    v412 = (_QWORD *)v158[19];
                    v413 = (_QWORD *)v253[19];
                    v414 = (_QWORD *)v157[19];
                    v415 = 8 * *(_QWORD *)v253[3];
                    v416 = 8 * *(_QWORD *)v158[3];
                    do
                    {
                      *v414++ = *v412 - *v413;
                      v413 = (_QWORD *)((char *)v413 + v415);
                      v412 = (_QWORD *)((char *)v412 + v416);
                      --v411;
                    }
                    while (v411);
                  }
                  break;
                case 2uLL:
                  v822 = *v159;
                  if ((_DWORD)v822)
                  {
                    v823 = 0;
                    v824 = 0;
                    v825 = 0;
                    v826 = 0;
                    v827 = v158[19];
                    v828 = v253[19];
                    v829 = v157[19];
                    v830 = v159[1];
                    v831 = (uint64_t *)v158[3];
                    v832 = *v831;
                    v833 = v831[1];
                    v834 = (uint64_t *)v253[3];
                    v835 = *v834;
                    v836 = v834[1];
                    v837 = v835 - v836 * v254[1];
                    if (v830 <= 1)
                      v838 = 1;
                    else
                      v838 = v159[1];
                    v839 = v832 - v833 * v830;
                    do
                    {
                      if ((_DWORD)v830)
                      {
                        v840 = v824 + v838;
                        v841 = (_QWORD *)(v829 + 8 * v824);
                        v842 = v838;
                        do
                        {
                          *v841++ = *(_QWORD *)(v827 + 8 * v826) - *(_QWORD *)(v828 + 8 * v825);
                          v826 += v833;
                          v825 += v836;
                          --v842;
                        }
                        while (v842);
                        v824 = v840;
                      }
                      v826 += v839;
                      v825 += v837;
                      ++v823;
                    }
                    while (v823 != v822);
                  }
                  break;
                case 3uLL:
                  v843 = *v159;
                  if ((_DWORD)v843)
                  {
                    v844 = 0;
                    v845 = 0;
                    v846 = 0;
                    v847 = 0;
                    v848 = v158[19];
                    v849 = v253[19];
                    v850 = v157[19];
                    v851 = v159[1];
                    v852 = (_QWORD *)v158[3];
                    v853 = v852[1];
                    v854 = (_QWORD *)v253[3];
                    v855 = v854[1];
                    v856 = *v854 - v855 * v254[1];
                    if (v851 <= 1)
                      v857 = 1;
                    else
                      v857 = v159[1];
                    v858 = *v852 - v853 * v851;
                    do
                    {
                      if ((_DWORD)v851)
                      {
                        v859 = 0;
                        v860 = v159[2];
                        v861 = v852[2];
                        v862 = v854[2];
                        if (v860 <= 1)
                          v863 = 1;
                        else
                          v863 = v159[2];
                        v864 = v855 - v862 * v254[2];
                        do
                        {
                          v865 = v863;
                          if ((_DWORD)v860)
                          {
                            do
                            {
                              *(_QWORD *)(v850 + 8 * v845++) = *(_QWORD *)(v848 + 8 * v847)
                                                             - *(_QWORD *)(v849 + 8 * v846);
                              v847 += v861;
                              v846 += v862;
                              --v865;
                            }
                            while (v865);
                          }
                          v847 += v853 - v861 * v860;
                          v846 += v864;
                          ++v859;
                        }
                        while (v859 != v857);
                      }
                      v847 += v858;
                      v846 += v856;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 4uLL:
                  v1970 = *v159;
                  if ((_DWORD)v1970)
                  {
                    v866 = 0;
                    v867 = 0;
                    v868 = 0;
                    v869 = 0;
                    v870 = v158[19];
                    v871 = v253[19];
                    v872 = v157[19];
                    v873 = v159[1];
                    v874 = (_QWORD *)v158[3];
                    v875 = (_QWORD *)v253[3];
                    v1863 = v875[1];
                    v1878 = v874[1];
                    v1920 = *v875 - v1863 * v254[1];
                    v1952 = v159[1];
                    if (v873 <= 1)
                      v876 = 1;
                    else
                      v876 = v159[1];
                    v1891 = *v874 - v874[1] * v873;
                    do
                    {
                      if (v1952)
                      {
                        v877 = 0;
                        v878 = v159[2];
                        v879 = v874[2];
                        v880 = v875[2];
                        if (v878 <= 1)
                          v881 = 1;
                        else
                          v881 = v159[2];
                        v882 = v1863 - v880 * v254[2];
                        do
                        {
                          if ((_DWORD)v878)
                          {
                            v883 = 0;
                            v884 = v159[3];
                            v885 = v874[3];
                            v886 = v875[3];
                            if (v884 <= 1)
                              v887 = 1;
                            else
                              v887 = v159[3];
                            v888 = v880 - v886 * v254[3];
                            do
                            {
                              v889 = v887;
                              if ((_DWORD)v884)
                              {
                                do
                                {
                                  *(_QWORD *)(v872 + 8 * v867++) = *(_QWORD *)(v870 + 8 * v869)
                                                                 - *(_QWORD *)(v871 + 8 * v868);
                                  v869 += v885;
                                  v868 += v886;
                                  --v889;
                                }
                                while (v889);
                              }
                              v869 += v879 - v885 * v884;
                              v868 += v888;
                              ++v883;
                            }
                            while (v883 != v881);
                          }
                          v869 += v1878 - v879 * v878;
                          v868 += v882;
                          ++v877;
                        }
                        while (v877 != v876);
                      }
                      v869 += v1891;
                      v868 += v1920;
                      ++v866;
                    }
                    while (v866 != v1970);
                  }
                  break;
                default:
                  v810 = v157[6];
                  if (v810)
                  {
                    v811 = 0;
                    v1890 = v253[19];
                    v1919 = v158[19];
                    v1877 = v157[19];
                    do
                    {
                      v812 = 0;
                      if ((v161 & 0x80000000) == 0)
                      {
                        v813 = v158[3];
                        v814 = v161;
                        v815 = v811;
                        do
                        {
                          v816 = ldiv(v815, v159[v814]);
                          v815 = v816.quot;
                          v812 += *(_QWORD *)(v813 + 8 * v814--) * v816.rem;
                        }
                        while (v814 != -1);
                      }
                      v817 = v1947;
                      if ((v1947 & 0x80000000) != 0)
                      {
                        LODWORD(v818) = 0;
                      }
                      else
                      {
                        v818 = 0;
                        v819 = v253[3];
                        v820 = v811;
                        do
                        {
                          v821 = ldiv(v820, v254[v817]);
                          v820 = v821.quot;
                          v818 += *(_QWORD *)(v819 + 8 * v817--) * v821.rem;
                        }
                        while (v817 != -1);
                      }
                      *(_QWORD *)(v1877 + 8 * v811++) = *(_QWORD *)(v1919 + 8 * (int)v812)
                                                      - *(_QWORD *)(v1890 + 8 * (int)v818);
                      v161 = v1965;
                    }
                    while (v811 != v810);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
          v195 = *(_DWORD *)(*a2 + 160);
          if (v195 >= 1)
          {
            v196 = **(float **)(*a1 + 152);
            v197 = *(float **)(*(_QWORD *)a3 + 152);
            v198 = *(float **)(*a2 + 152);
            v199 = v195 + 1;
            do
            {
              v200 = *v198++;
              *v197++ = v196 - v200;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 2:
          v201 = *(_DWORD *)(*a1 + 160);
          if (v201 >= 1)
          {
            v202 = **(float **)(*a2 + 152);
            v203 = *(float **)(*(_QWORD *)a3 + 152);
            v204 = *(float **)(*a1 + 152);
            v205 = v201 + 1;
            do
            {
              v206 = *v204++;
              *v203++ = v206 - v202;
              --v205;
            }
            while (v205 > 1);
          }
          return;
        case 3:
          v207 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v207 >= 1)
          {
            v208 = *(float **)(*(_QWORD *)a3 + 152);
            v209 = *(float **)(*a2 + 152);
            v210 = *(float **)(*a1 + 152);
            v211 = v207 + 1;
            do
            {
              v212 = *v210++;
              v213 = v212;
              v214 = *v209++;
              *v208++ = v213 - v214;
              --v211;
            }
            while (v211 > 1);
          }
          return;
        default:
          v186 = *(_QWORD **)a3;
          v187 = (_QWORD *)*a1;
          v188 = *(int **)*a1;
          v189 = (v187[1] - (_QWORD)v188) >> 2;
          v190 = (v189 - 1);
          if ((int)v190 >= -1)
            v191 = -1;
          else
            v191 = v189 - 1;
          v192 = v191 + 1;
          v193 = v189 + 1;
          while (1)
          {
            v194 = v193 - 2;
            if (v193 - 2 < 0)
              break;
            --v193;
            if (*(_QWORD *)(v187[3] + 8 * v194) != *(_QWORD *)(v186[3] + 8 * v194))
              goto LABEL_193;
          }
          v193 = v192;
LABEL_193:
          v261 = (_QWORD *)*a2;
          v262 = *(int **)*a2;
          v263 = (v261[1] - (_QWORD)v262) >> 2;
          v264 = (v263 - 1);
          if ((int)v264 >= -1)
            v265 = -1;
          else
            v265 = v263 - 1;
          v266 = v265 + 1;
          v267 = v263 + 1;
          while (1)
          {
            v268 = v267 - 2;
            if (v267 - 2 < 0)
              break;
            --v267;
            if (*(_QWORD *)(v261[3] + 8 * v268) != *(_QWORD *)(v186[3] + 8 * v268))
              goto LABEL_231;
          }
          v267 = v266;
LABEL_231:
          v281 = v189 + 1;
          while (1)
          {
            v282 = v281 - 2;
            if (v281 - 2 < 0)
              break;
            --v281;
            if (*(_QWORD *)(v187[3] + 8 * v282))
              goto LABEL_266;
          }
          v281 = v192;
LABEL_266:
          v295 = v263 + 1;
          while (1)
          {
            v296 = v295 - 2;
            if (v295 - 2 < 0)
              break;
            --v295;
            if (*(_QWORD *)(v261[3] + 8 * v296))
              goto LABEL_485;
          }
          v295 = v266;
LABEL_485:
          v417 = (uint64_t)(v186[1] - *v186) >> 2;
          if (v193 <= v267)
            v418 = v267;
          else
            v418 = v193;
          if (v193 <= v295)
            v193 = v295;
          if (v281 > v267)
            v267 = v281;
          if (v417 > v267)
          {
            v419 = 1;
          }
          else
          {
            v267 = (uint64_t)(v186[1] - *v186) >> 2;
            v419 = 4;
          }
          if (v417 > v193)
          {
            v420 = 2;
          }
          else
          {
            v193 = v267;
            v420 = v419;
          }
          if (v417 > v418)
          {
            v193 = v418;
            v420 = 3;
          }
          v1948 = v264;
          v1966 = v190;
          if (!v193)
            goto LABEL_514;
          v421 = *(_QWORD *)(v186[3] + 8 * (v193 - 1));
          if (v421 < 0x10)
            goto LABEL_514;
          switch(v420)
          {
            case 1:
              if (v193 == 2)
              {
                v1763 = *v188;
                if ((_DWORD)v1763)
                {
                  v1764 = 0;
                  v1765 = 0;
                  v1766 = 0;
                  v1767 = v187[19];
                  v1768 = v261[19];
                  v1769 = v186[19];
                  v1770 = v188[1];
                  v1771 = (uint64_t *)v187[3];
                  v1772 = *v1771;
                  v1773 = v1771[1];
                  v1774 = (uint64_t *)v261[3];
                  v1775 = *v1774;
                  v1776 = v1774[1];
                  if (v1770 <= 1)
                    v1777 = 1;
                  else
                    v1777 = v188[1];
                  v1778 = v1772 - v1773 * v1770;
                  v1779 = v1775 - v1776 * v262[1];
                  do
                  {
                    if ((_DWORD)v1770)
                    {
                      v1780 = 0;
                      v1781 = v1768 + 4 * v1765;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1782 = 0;
                          v1783 = *(float *)(v1767 + 4 * v1766);
                          v1784 = v421 + 1;
                          do
                          {
                            *(float *)(v1769 + v1782) = v1783 - *(float *)(v1781 + v1782);
                            --v1784;
                            v1782 += 4;
                          }
                          while (v1784 > 1);
                        }
                        v1766 += v1773;
                        v1765 += v1776;
                        v1769 += 4 * (int)v421;
                        ++v1780;
                        v1781 += 4 * v1776;
                      }
                      while (v1780 != v1777);
                    }
                    v1766 += v1778;
                    v1765 += v1779;
                    ++v1764;
                  }
                  while (v1764 != v1763);
                }
              }
              else if (v193 == 1)
              {
                v1099 = *v188;
                if ((_DWORD)v1099)
                {
                  v1100 = 0;
                  v1101 = 0;
                  v1102 = v187[19];
                  v1103 = v261[19];
                  v1104 = v186[19];
                  v1105 = *(_QWORD *)v187[3];
                  v1106 = 4 * *(_QWORD *)v261[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v1107 = 0;
                      v1108 = *(float *)(v1102 + 4 * v1101);
                      v1109 = v421 + 1;
                      do
                      {
                        *(float *)(v1104 + v1107) = v1108 - *(float *)(v1103 + v1107);
                        --v1109;
                        v1107 += 4;
                      }
                      while (v1109 > 1);
                    }
                    v1101 += v1105;
                    ++v1100;
                    v1104 += 4 * (int)v421;
                    v1103 += v1106;
                  }
                  while (v1100 != v1099);
                }
              }
              else
              {
                v1913 = v186[6];
                if (v1913)
                {
                  v1942 = 0;
                  v1845 = v261[19];
                  v1860 = v187[19];
                  v1785 = v186[19];
                  do
                  {
                    v1786 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1787 = v187[3];
                      v1788 = v190;
                      v1789 = v1942;
                      do
                      {
                        v1790 = ldiv(v1789, v188[v1788]);
                        v1789 = v1790.quot;
                        v1786 += *(_QWORD *)(v1787 + 8 * v1788--) * v1790.rem;
                      }
                      while (v1788 != -1);
                    }
                    v1791 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1792) = 0;
                    }
                    else
                    {
                      v1792 = 0;
                      v1793 = v261[3];
                      v1794 = v1942;
                      do
                      {
                        v1795 = ldiv(v1794, v262[v1791]);
                        v1794 = v1795.quot;
                        v1792 += *(_QWORD *)(v1793 + 8 * v1791--) * v1795.rem;
                      }
                      while (v1791 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1796 = 0;
                      v1797 = *(float *)(v1860 + 4 * (int)v1786);
                      v1798 = v421 + 1;
                      do
                      {
                        *(float *)(v1785 + v1796) = v1797 - *(float *)(v1845 + 4 * (int)v1792 + v1796);
                        --v1798;
                        v1796 += 4;
                      }
                      while (v1798 > 1);
                    }
                    v1785 += 4 * (int)v421;
                    v1942 += (int)v421;
                  }
                  while (v1942 < v1913);
                }
              }
              break;
            case 2:
              if (v193 == 2)
              {
                v1799 = *v188;
                if ((_DWORD)v1799)
                {
                  v1800 = 0;
                  v1801 = 0;
                  v1802 = 0;
                  v1803 = v187[19];
                  v1804 = v261[19];
                  v1805 = v186[19];
                  v1806 = v188[1];
                  v1807 = (uint64_t *)v187[3];
                  v1808 = *v1807;
                  v1809 = v1807[1];
                  v1810 = (uint64_t *)v261[3];
                  v1811 = *v1810;
                  v1812 = v1810[1];
                  if (v1806 <= 1)
                    v1813 = 1;
                  else
                    v1813 = v188[1];
                  v1814 = v1808 - v1809 * v1806;
                  v1815 = v1811 - v1812 * v262[1];
                  do
                  {
                    if ((_DWORD)v1806)
                    {
                      v1816 = 0;
                      v1817 = v1803 + 4 * v1802;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1818 = 0;
                          v1819 = *(float *)(v1804 + 4 * v1801);
                          v1820 = v421 + 1;
                          do
                          {
                            *(float *)(v1805 + v1818) = *(float *)(v1817 + v1818) - v1819;
                            --v1820;
                            v1818 += 4;
                          }
                          while (v1820 > 1);
                        }
                        v1802 += v1809;
                        v1801 += v1812;
                        v1805 += 4 * (int)v421;
                        ++v1816;
                        v1817 += 4 * v1809;
                      }
                      while (v1816 != v1813);
                    }
                    v1802 += v1814;
                    v1801 += v1815;
                    ++v1800;
                  }
                  while (v1800 != v1799);
                }
              }
              else if (v193 == 1)
              {
                v1110 = *v188;
                if ((_DWORD)v1110)
                {
                  v1111 = 0;
                  v1112 = 0;
                  v1113 = v187[19];
                  v1114 = v261[19];
                  v1115 = v186[19];
                  v1116 = *(_QWORD *)v261[3];
                  v1117 = 4 * *(_QWORD *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v1118 = 0;
                      v1119 = *(float *)(v1114 + 4 * v1112);
                      v1120 = v421 + 1;
                      do
                      {
                        *(float *)(v1115 + v1118) = *(float *)(v1113 + v1118) - v1119;
                        --v1120;
                        v1118 += 4;
                      }
                      while (v1120 > 1);
                    }
                    v1112 += v1116;
                    ++v1111;
                    v1115 += 4 * (int)v421;
                    v1113 += v1117;
                  }
                  while (v1111 != v1110);
                }
              }
              else
              {
                v1914 = v186[6];
                if (v1914)
                {
                  v1943 = 0;
                  v1846 = v261[19];
                  v1861 = v187[19];
                  v1821 = v186[19];
                  do
                  {
                    v1822 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1823 = v187[3];
                      v1824 = v190;
                      v1825 = v1943;
                      do
                      {
                        v1826 = ldiv(v1825, v188[v1824]);
                        v1825 = v1826.quot;
                        v1822 += *(_QWORD *)(v1823 + 8 * v1824--) * v1826.rem;
                      }
                      while (v1824 != -1);
                    }
                    v1827 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1828) = 0;
                    }
                    else
                    {
                      v1828 = 0;
                      v1829 = v261[3];
                      v1830 = v1943;
                      do
                      {
                        v1831 = ldiv(v1830, v262[v1827]);
                        v1830 = v1831.quot;
                        v1828 += *(_QWORD *)(v1829 + 8 * v1827--) * v1831.rem;
                      }
                      while (v1827 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1832 = 0;
                      v1833 = *(float *)(v1846 + 4 * (int)v1828);
                      v1834 = v421 + 1;
                      do
                      {
                        *(float *)(v1821 + v1832) = *(float *)(v1861 + 4 * (int)v1822 + v1832) - v1833;
                        --v1834;
                        v1832 += 4;
                      }
                      while (v1834 > 1);
                    }
                    v1821 += 4 * (int)v421;
                    v1943 += (int)v421;
                  }
                  while (v1943 < v1914);
                }
              }
              break;
            case 3:
              if (v193 == 2)
              {
                v1318 = *v188;
                if ((_DWORD)v1318)
                {
                  v1319 = 0;
                  v1320 = 0;
                  v1321 = 0;
                  v1322 = v187[19];
                  v1323 = v261[19];
                  v1324 = v186[19];
                  v1325 = v188[1];
                  v1326 = (uint64_t *)v187[3];
                  v1327 = *v1326;
                  v1328 = v1326[1];
                  v1329 = (uint64_t *)v261[3];
                  v1330 = *v1329;
                  v1331 = v1329[1];
                  if (v1325 <= 1)
                    v1332 = 1;
                  else
                    v1332 = v188[1];
                  v1333 = v1327 - v1328 * v1325;
                  v1334 = v1330 - v1331 * v262[1];
                  do
                  {
                    if ((_DWORD)v1325)
                    {
                      v1335 = 0;
                      v1336 = v1323 + 4 * v1320;
                      v1337 = v1322 + 4 * v1321;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1338 = 0;
                          v1339 = v421 + 1;
                          do
                          {
                            *(float *)(v1324 + v1338) = *(float *)(v1337 + v1338) - *(float *)(v1336 + v1338);
                            --v1339;
                            v1338 += 4;
                          }
                          while (v1339 > 1);
                        }
                        v1321 += v1328;
                        v1320 += v1331;
                        v1324 += 4 * (int)v421;
                        ++v1335;
                        v1336 += 4 * v1331;
                        v1337 += 4 * v1328;
                      }
                      while (v1335 != v1332);
                    }
                    v1321 += v1333;
                    v1320 += v1334;
                    ++v1319;
                  }
                  while (v1319 != v1318);
                }
              }
              else if (v193 == 1)
              {
                v422 = *v188;
                if ((_DWORD)v422)
                {
                  v423 = 0;
                  v424 = v187[19];
                  v425 = v261[19];
                  v426 = v186[19];
                  v427 = 4 * *(_QWORD *)v261[3];
                  v428 = 4 * *(_QWORD *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v429 = 0;
                      v430 = v421 + 1;
                      do
                      {
                        *(float *)(v426 + v429) = *(float *)(v424 + v429) - *(float *)(v425 + v429);
                        --v430;
                        v429 += 4;
                      }
                      while (v430 > 1);
                    }
                    ++v423;
                    v426 += 4 * (int)v421;
                    v425 += v427;
                    v424 += v428;
                  }
                  while (v423 != v422);
                }
              }
              else
              {
                v1900 = v186[6];
                if (v1900)
                {
                  v1929 = 0;
                  v1838 = v261[19];
                  v1851 = v187[19];
                  v1340 = v186[19];
                  do
                  {
                    v1341 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1342 = v187[3];
                      v1343 = v190;
                      v1344 = v1929;
                      do
                      {
                        v1345 = ldiv(v1344, v188[v1343]);
                        v1344 = v1345.quot;
                        v1341 += *(_QWORD *)(v1342 + 8 * v1343--) * v1345.rem;
                      }
                      while (v1343 != -1);
                    }
                    v1346 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1347) = 0;
                    }
                    else
                    {
                      v1347 = 0;
                      v1348 = v261[3];
                      v1349 = v1929;
                      do
                      {
                        v1350 = ldiv(v1349, v262[v1346]);
                        v1349 = v1350.quot;
                        v1347 += *(_QWORD *)(v1348 + 8 * v1346--) * v1350.rem;
                      }
                      while (v1346 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1351 = 0;
                      v1352 = v421 + 1;
                      do
                      {
                        *(float *)(v1340 + v1351) = *(float *)(v1851 + 4 * (int)v1341 + v1351)
                                                  - *(float *)(v1838 + 4 * (int)v1347 + v1351);
                        --v1352;
                        v1351 += 4;
                      }
                      while (v1352 > 1);
                    }
                    v1340 += 4 * (int)v421;
                    v1929 += (int)v421;
                  }
                  while (v1929 < v1900);
                }
              }
              break;
            default:
LABEL_514:
              switch(v417)
              {
                case 1uLL:
                  v431 = v186[6];
                  if (v431)
                  {
                    v432 = (float *)v187[19];
                    v433 = (float *)v261[19];
                    v434 = (float *)v186[19];
                    v435 = 4 * *(_QWORD *)v261[3];
                    v436 = 4 * *(_QWORD *)v187[3];
                    do
                    {
                      *v434++ = *v432 - *v433;
                      v433 = (float *)((char *)v433 + v435);
                      v432 = (float *)((char *)v432 + v436);
                      --v431;
                    }
                    while (v431);
                  }
                  break;
                case 2uLL:
                  v902 = *v188;
                  if ((_DWORD)v902)
                  {
                    v903 = 0;
                    v904 = 0;
                    v905 = 0;
                    v906 = 0;
                    v907 = v187[19];
                    v908 = v261[19];
                    v909 = v186[19];
                    v910 = v188[1];
                    v911 = (uint64_t *)v187[3];
                    v912 = *v911;
                    v913 = v911[1];
                    v914 = (uint64_t *)v261[3];
                    v915 = *v914;
                    v916 = v914[1];
                    v917 = v915 - v916 * v262[1];
                    if (v910 <= 1)
                      v918 = 1;
                    else
                      v918 = v188[1];
                    v919 = v912 - v913 * v910;
                    do
                    {
                      if ((_DWORD)v910)
                      {
                        v920 = v904 + v918;
                        v921 = (float *)(v909 + 4 * v904);
                        v922 = v918;
                        do
                        {
                          *v921++ = *(float *)(v907 + 4 * v906) - *(float *)(v908 + 4 * v905);
                          v906 += v913;
                          v905 += v916;
                          --v922;
                        }
                        while (v922);
                        v904 = v920;
                      }
                      v906 += v919;
                      v905 += v917;
                      ++v903;
                    }
                    while (v903 != v902);
                  }
                  break;
                case 3uLL:
                  v923 = *v188;
                  if ((_DWORD)v923)
                  {
                    v924 = 0;
                    v925 = 0;
                    v926 = 0;
                    v927 = 0;
                    v928 = v187[19];
                    v929 = v261[19];
                    v930 = v186[19];
                    v931 = v188[1];
                    v932 = (_QWORD *)v187[3];
                    v933 = v932[1];
                    v934 = (_QWORD *)v261[3];
                    v935 = v934[1];
                    v936 = *v934 - v935 * v262[1];
                    if (v931 <= 1)
                      v937 = 1;
                    else
                      v937 = v188[1];
                    v938 = *v932 - v933 * v931;
                    do
                    {
                      if ((_DWORD)v931)
                      {
                        v939 = 0;
                        v940 = v188[2];
                        v941 = v932[2];
                        v942 = v934[2];
                        if (v940 <= 1)
                          v943 = 1;
                        else
                          v943 = v188[2];
                        v944 = v935 - v942 * v262[2];
                        do
                        {
                          v945 = v943;
                          if ((_DWORD)v940)
                          {
                            do
                            {
                              *(float *)(v930 + 4 * v925++) = *(float *)(v928 + 4 * v927) - *(float *)(v929 + 4 * v926);
                              v927 += v941;
                              v926 += v942;
                              --v945;
                            }
                            while (v945);
                          }
                          v927 += v933 - v941 * v940;
                          v926 += v944;
                          ++v939;
                        }
                        while (v939 != v937);
                      }
                      v927 += v938;
                      v926 += v936;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 4uLL:
                  v1971 = *v188;
                  if ((_DWORD)v1971)
                  {
                    v946 = 0;
                    v947 = 0;
                    v948 = 0;
                    v949 = 0;
                    v950 = v187[19];
                    v951 = v261[19];
                    v952 = v186[19];
                    v953 = v188[1];
                    v954 = (_QWORD *)v187[3];
                    v955 = (_QWORD *)v261[3];
                    v1893 = v955[1];
                    v1922 = v954[1];
                    v1953 = *v955 - v1893 * v262[1];
                    if (v953 <= 1)
                      v956 = 1;
                    else
                      v956 = v188[1];
                    v957 = *v954 - v954[1] * v953;
                    do
                    {
                      if ((_DWORD)v953)
                      {
                        v958 = 0;
                        v959 = v188[2];
                        v960 = v954[2];
                        v961 = v955[2];
                        if (v959 <= 1)
                          v962 = 1;
                        else
                          v962 = v188[2];
                        v963 = v1893 - v961 * v262[2];
                        do
                        {
                          if ((_DWORD)v959)
                          {
                            v964 = 0;
                            v965 = v188[3];
                            v966 = v954[3];
                            v967 = v955[3];
                            if (v965 <= 1)
                              v968 = 1;
                            else
                              v968 = v188[3];
                            v969 = v961 - v967 * v262[3];
                            do
                            {
                              v970 = v968;
                              if ((_DWORD)v965)
                              {
                                do
                                {
                                  *(float *)(v952 + 4 * v947++) = *(float *)(v950 + 4 * v949)
                                                                - *(float *)(v951 + 4 * v948);
                                  v949 += v966;
                                  v948 += v967;
                                  --v970;
                                }
                                while (v970);
                              }
                              v949 += v960 - v966 * v965;
                              v948 += v969;
                              ++v964;
                            }
                            while (v964 != v962);
                          }
                          v949 += v1922 - v960 * v959;
                          v948 += v963;
                          ++v958;
                        }
                        while (v958 != v956);
                      }
                      v949 += v957;
                      v948 += v1953;
                      ++v946;
                    }
                    while (v946 != v1971);
                  }
                  break;
                default:
                  v890 = v186[6];
                  if (v890)
                  {
                    v891 = 0;
                    v1892 = v261[19];
                    v1921 = v187[19];
                    v1879 = v186[19];
                    do
                    {
                      v892 = 0;
                      if ((v190 & 0x80000000) == 0)
                      {
                        v893 = v187[3];
                        v894 = v190;
                        v895 = v891;
                        do
                        {
                          v896 = ldiv(v895, v188[v894]);
                          v895 = v896.quot;
                          v892 += *(_QWORD *)(v893 + 8 * v894--) * v896.rem;
                        }
                        while (v894 != -1);
                      }
                      v897 = v1948;
                      if ((v1948 & 0x80000000) != 0)
                      {
                        LODWORD(v898) = 0;
                      }
                      else
                      {
                        v898 = 0;
                        v899 = v261[3];
                        v900 = v891;
                        do
                        {
                          v901 = ldiv(v900, v262[v897]);
                          v900 = v901.quot;
                          v898 += *(_QWORD *)(v899 + 8 * v897--) * v901.rem;
                        }
                        while (v897 != -1);
                      }
                      *(float *)(v1879 + 4 * v891++) = *(float *)(v1921 + 4 * (int)v892)
                                                     - *(float *)(v1892 + 4 * (int)v898);
                      v190 = v1966;
                    }
                    while (v891 != v890);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::BitwiseBinary::eval_cpu(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[3];

  v3 = *a2;
  if (a2[1] - *a2 != 32)
    mlx::core::BitwiseBinary::eval_cpu();
  v4[0] = *a2;
  v4[1] = v3 + 16;
  v4[2] = a3;
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::BitwiseAnd>((uint64_t)v4);
      break;
    case 1:
      mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::BitwiseOr>((uint64_t)v4);
      break;
    case 2:
      mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::BitwiseXor>((uint64_t)v4);
      break;
    case 3:
      mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::LeftShift>((uint64_t)v4);
      break;
    case 4:
      mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::RightShift>((uint64_t)v4);
      break;
    default:
      return;
  }
}

void mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::BitwiseAnd>(uint64_t a1)
{
  mlx::core::array *v1;
  uint64_t *v3;
  uint64_t *v4;
  int binary_op_type;
  BOOL v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  int *v13;
  int *v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  char v43;
  int v44;
  int v45;
  char *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  int v50;
  BOOL v51;
  char v52;
  int v53;
  char *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  char v62;
  uint64_t *v63;
  uint64_t *v64;
  mlx::core::array *v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  char v76;
  _BYTE *v77;
  char *v78;
  unsigned int v79;
  char v80;
  int v81;
  char v82;
  _BYTE *v83;
  char *v84;
  unsigned int v85;
  char v86;
  int v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  unsigned int v91;
  char v92;
  char v93;
  char v94;
  int **v95;
  int *v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  unint64_t v106;
  int v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  int *v128;
  int *v129;
  unsigned int v130;
  int v131;
  int v132;
  int *v133;
  int *v134;
  int *v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  char v149;
  _BYTE *v150;
  char *v151;
  unsigned int v152;
  char v153;
  int v154;
  char v155;
  _BYTE *v156;
  char *v157;
  unsigned int v158;
  char v159;
  int v160;
  _BYTE *v161;
  char *v162;
  char *v163;
  unsigned int v164;
  char v165;
  char v166;
  char v167;
  _QWORD *v168;
  _QWORD *v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  int *v179;
  int *v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  int *v185;
  int *v186;
  unsigned int v187;
  int v188;
  int v189;
  int *v190;
  int *v191;
  int *v192;
  unsigned int v193;
  int v194;
  int v195;
  int v196;
  _QWORD *v197;
  _QWORD *v198;
  int *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  unsigned int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  _QWORD *v235;
  int *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  _QWORD *v243;
  int *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  int v249;
  unsigned int v250;
  int **v251;
  int *v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  _QWORD *v258;
  int *v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  int v263;
  int v264;
  unsigned int v265;
  _QWORD *v266;
  int *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  unint64_t v294;
  int v295;
  int v296;
  int v297;
  unint64_t v298;
  uint64_t v299;
  _BYTE *v300;
  _BYTE *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  BOOL v305;
  char v306;
  unint64_t v307;
  int v308;
  int v309;
  int v310;
  unint64_t v311;
  uint64_t v312;
  _DWORD *v313;
  _DWORD *v314;
  int *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  int v319;
  int v320;
  int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int *v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  int v331;
  int v332;
  unint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  _DWORD *v336;
  int *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  int v341;
  int v342;
  int v343;
  unint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  BOOL v360;
  char v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  int v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int *v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  int v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unsigned int v397;
  unint64_t v398;
  int *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  ldiv_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  ldiv_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  int *v426;
  uint64_t v427;
  unint64_t v428;
  int v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  int *v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  int v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int *v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  int *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  int v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int *v470;
  uint64_t v471;
  uint64_t v472;
  char v473;
  unsigned int v474;
  int v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int *v480;
  uint64_t v481;
  uint64_t v482;
  char v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  ldiv_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  ldiv_t v495;
  BOOL v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  char *v517;
  uint64_t v518;
  BOOL v519;
  char v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  BOOL v544;
  char v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  _QWORD *v554;
  _QWORD *v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  BOOL v570;
  char v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  int v577;
  ldiv_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  ldiv_t v583;
  int v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  unint64_t j;
  uint64_t v600;
  int v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  int v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  unint64_t k;
  uint64_t v622;
  uint64_t v623;
  int v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  int v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  int v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  unint64_t m;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  int v660;
  ldiv_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int v667;
  ldiv_t v668;
  int v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int *v675;
  uint64_t v676;
  unint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  int *v680;
  uint64_t v681;
  unint64_t v682;
  int v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  int *v689;
  uint64_t v690;
  unint64_t v691;
  unint64_t v692;
  _QWORD *v693;
  uint64_t v694;
  int *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unint64_t v699;
  int v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  int *v706;
  uint64_t v707;
  unint64_t v708;
  unint64_t v709;
  unint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  int *v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  int v724;
  ldiv_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  ldiv_t v730;
  int v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t *v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  unint64_t n;
  uint64_t v747;
  int v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  uint64_t v761;
  int v762;
  int v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  unint64_t ii;
  uint64_t v769;
  uint64_t v770;
  int v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t *v782;
  uint64_t v783;
  uint64_t v784;
  int v785;
  int v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  int v790;
  int v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  unint64_t jj;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  ldiv_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  int v810;
  ldiv_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t *v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  _QWORD *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  _QWORD *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  _QWORD *v864;
  _QWORD *v865;
  uint64_t v866;
  uint64_t v867;
  unint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  unint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  unsigned int v890;
  BOOL v891;
  char v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  int v902;
  unsigned int v903;
  BOOL v904;
  char v905;
  int v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  unsigned int v916;
  int v917;
  unint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  unsigned int v927;
  int v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int *v933;
  uint64_t v934;
  uint64_t v935;
  char v936;
  unsigned int v937;
  int v938;
  unint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int *v943;
  uint64_t v944;
  uint64_t v945;
  char v946;
  unsigned int v947;
  int v948;
  unint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  int v957;
  unsigned int v958;
  int v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  int v968;
  unsigned int v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  unsigned int v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unsigned int v991;
  int v992;
  unint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  int *v997;
  uint64_t v998;
  unint64_t v999;
  uint64_t v1000;
  unsigned int v1001;
  _QWORD *v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  unint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  int v1011;
  ldiv_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  int v1018;
  ldiv_t v1019;
  uint64_t v1020;
  unsigned int v1021;
  int v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  int *v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  char v1031;
  unsigned int v1032;
  _QWORD *v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  int v1042;
  ldiv_t v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  int v1049;
  ldiv_t v1050;
  uint64_t v1051;
  char v1052;
  unsigned int v1053;
  int v1054;
  unint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  int *v1059;
  uint64_t v1060;
  unint64_t v1061;
  uint64_t v1062;
  char v1063;
  unsigned int v1064;
  _QWORD *v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  int v1074;
  ldiv_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  int v1081;
  ldiv_t v1082;
  uint64_t v1083;
  char v1084;
  unsigned int v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  uint64_t *v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  unsigned int v1107;
  BOOL v1108;
  char v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t i;
  ldiv_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  int v1119;
  ldiv_t v1120;
  uint64_t v1121;
  unsigned int v1122;
  BOOL v1123;
  char v1124;
  int v1125;
  unint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t *v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t *v1135;
  uint64_t v1136;
  uint64_t v1137;
  int v1138;
  int v1139;
  unint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  unsigned int v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  int v1150;
  ldiv_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  ldiv_t v1156;
  uint64_t v1157;
  unsigned int v1158;
  int v1159;
  unint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  int *v1164;
  uint64_t v1165;
  unint64_t v1166;
  uint64_t v1167;
  unsigned int v1168;
  _QWORD *v1169;
  uint64_t v1170;
  unint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  int v1178;
  ldiv_t v1179;
  uint64_t v1180;
  unint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  ldiv_t v1186;
  uint64_t v1187;
  unsigned int v1188;
  int v1189;
  unint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t *v1199;
  uint64_t v1200;
  uint64_t v1201;
  int v1202;
  int v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  unsigned int v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  int v1214;
  ldiv_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  ldiv_t v1220;
  uint64_t v1221;
  unsigned int v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  uint64_t *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t *v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  unsigned int v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  ldiv_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int v1254;
  ldiv_t v1255;
  uint64_t v1256;
  unsigned int v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t *v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t *v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  int v1278;
  unsigned int v1279;
  BOOL v1280;
  char v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  ldiv_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int quot;
  ldiv_t v1291;
  uint64_t v1292;
  int v1293;
  unsigned int v1294;
  BOOL v1295;
  char v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  uint64_t *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  int v1317;
  unsigned int v1318;
  BOOL v1319;
  char v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  ldiv_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  int v1329;
  ldiv_t v1330;
  uint64_t v1331;
  int v1332;
  unsigned int v1333;
  BOOL v1334;
  char v1335;
  int v1336;
  unint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t *v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t *v1346;
  uint64_t v1347;
  uint64_t v1348;
  int v1349;
  int v1350;
  unint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  int v1354;
  unsigned int v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  int v1361;
  ldiv_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  int v1366;
  ldiv_t v1367;
  uint64_t v1368;
  int v1369;
  unsigned int v1370;
  int v1371;
  unint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t *v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t *v1381;
  uint64_t v1382;
  uint64_t v1383;
  int v1384;
  int v1385;
  unint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  int v1389;
  unsigned int v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  int v1396;
  ldiv_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  int v1401;
  ldiv_t v1402;
  uint64_t v1403;
  int v1404;
  unsigned int v1405;
  int v1406;
  unint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  int *v1411;
  uint64_t v1412;
  unint64_t v1413;
  uint64_t v1414;
  char v1415;
  unsigned int v1416;
  _QWORD *v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  unint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  int v1426;
  ldiv_t v1427;
  uint64_t v1428;
  unint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  int v1433;
  ldiv_t v1434;
  uint64_t v1435;
  char v1436;
  unsigned int v1437;
  int v1438;
  unint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  int *v1443;
  uint64_t v1444;
  unint64_t v1445;
  uint64_t v1446;
  char v1447;
  unsigned int v1448;
  _QWORD *v1449;
  uint64_t v1450;
  unint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  int v1458;
  ldiv_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  int v1465;
  ldiv_t v1466;
  uint64_t v1467;
  char v1468;
  unsigned int v1469;
  int v1470;
  unint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t *v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t *v1480;
  uint64_t v1481;
  uint64_t v1482;
  int v1483;
  int v1484;
  unint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  int v1488;
  unsigned int v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  int v1495;
  ldiv_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  ldiv_t v1501;
  uint64_t v1502;
  int v1503;
  unsigned int v1504;
  int v1505;
  unint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t *v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t *v1515;
  uint64_t v1516;
  uint64_t v1517;
  int v1518;
  int v1519;
  unint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  int v1523;
  unsigned int v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  int v1530;
  ldiv_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  int v1535;
  ldiv_t v1536;
  uint64_t v1537;
  int v1538;
  unsigned int v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  uint64_t *v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t *v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  unsigned int v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  int v1566;
  ldiv_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  int v1571;
  ldiv_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  unsigned int v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  unint64_t v1583;
  uint64_t *v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t *v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  unsigned int v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  int v1602;
  ldiv_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  int v1607;
  ldiv_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  unsigned int v1611;
  void *exception;
  unsigned int v1613;
  unsigned int v1614;
  unsigned int v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  unsigned int v1644;
  uint64_t v1645;
  uint64_t v1646;
  unsigned int v1647;
  unsigned int v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  int *v1655;
  int *v1656;
  int *v1657;
  unint64_t v1658;
  int *v1659;
  unint64_t v1660;
  unint64_t v1661;
  int *v1662;
  int *v1663;
  uint64_t v1664;
  unint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  uint64_t v1675;
  unint64_t v1676;
  unint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  unint64_t v1680;
  unint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  unint64_t v1684;
  unint64_t v1685;
  unint64_t v1686;
  unint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  unint64_t v1695;
  uint64_t v1696;
  unint64_t v1697;
  unint64_t v1698;
  unint64_t v1699;
  unint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  unint64_t v1703;
  unint64_t v1704;
  unint64_t v1705;
  unint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  int v1712;
  int *v1713;
  int v1714;
  unint64_t v1715;
  unint64_t v1716;
  unint64_t v1717;
  unint64_t v1718;
  unint64_t v1719;
  unint64_t v1720;
  mlx::core::array *v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;

  v1 = *(mlx::core::array **)(a1 + 16);
  switch(*(_DWORD *)(*(_QWORD *)v1 + 56))
  {
    case 0:
      v4 = *(uint64_t **)a1;
      v3 = *(uint64_t **)(a1 + 8);
      switch(binary_op_type)
      {
        case 0:
          if (**(_BYTE **)(*v4 + 152))
            v6 = **(_BYTE **)(*v3 + 152) == 0;
          else
            v6 = 1;
          v7 = !v6;
          **(_BYTE **)(*(_QWORD *)v1 + 152) = v7;
          goto LABEL_57;
        case 1:
          v35 = *(_DWORD *)(*v3 + 160);
          if (v35 >= 1)
          {
            v36 = **(unsigned __int8 **)(*v4 + 152);
            v37 = *(char **)(*(_QWORD *)v1 + 152);
            v38 = *(unsigned __int8 **)(*v3 + 152);
            v39 = v35 + 1;
            do
            {
              v41 = *v38++;
              v40 = v41;
              if (v36)
                v42 = v40 == 0;
              else
                v42 = 1;
              v43 = !v42;
              *v37++ = v43;
              --v39;
            }
            while (v39 > 1);
          }
          goto LABEL_57;
        case 2:
          v44 = *(_DWORD *)(*v4 + 160);
          if (v44 >= 1)
          {
            v45 = **(unsigned __int8 **)(*v3 + 152);
            v46 = *(char **)(*(_QWORD *)v1 + 152);
            v47 = *(unsigned __int8 **)(*v4 + 152);
            v48 = v44 + 1;
            do
            {
              v50 = *v47++;
              v49 = v50;
              if (v45)
                v51 = v49 == 0;
              else
                v51 = 1;
              v52 = !v51;
              *v46++ = v52;
              --v48;
            }
            while (v48 > 1);
          }
          goto LABEL_57;
        case 3:
          v53 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v53 >= 1)
          {
            v54 = *(char **)(*(_QWORD *)v1 + 152);
            v55 = *(unsigned __int8 **)(*v3 + 152);
            v56 = *(unsigned __int8 **)(*v4 + 152);
            v57 = v53 + 1;
            do
            {
              v58 = *v56++;
              v6 = v58 == 0;
              v60 = *v55++;
              v59 = v60;
              v62 = !v6 && v59 != 0;
              *v54++ = v62;
              --v57;
            }
            while (v57 > 1);
          }
          goto LABEL_57;
        default:
          v26 = *(_QWORD **)v1;
          v27 = (_QWORD *)*v4;
          v28 = *(int **)*v4;
          v29 = (v27[1] - (_QWORD)v28) >> 2;
          v30 = (v29 - 1);
          if ((int)v30 >= -1)
            v31 = -1;
          else
            v31 = v29 - 1;
          v32 = v31 + 1;
          v33 = v29 + 1;
          break;
      }
      while (1)
      {
        v34 = v33 - 2;
        if (v33 - 2 < 0)
          break;
        --v33;
        if (*(_QWORD *)(v27[3] + 8 * v34) != *(_QWORD *)(v26[3] + 8 * v34))
          goto LABEL_203;
      }
      v33 = v32;
LABEL_203:
      v235 = (_QWORD *)*v3;
      v236 = *(int **)*v3;
      v237 = (v235[1] - (_QWORD)v236) >> 2;
      v238 = (v237 - 1);
      if ((int)v238 >= -1)
        v239 = -1;
      else
        v239 = v237 - 1;
      v240 = v239 + 1;
      v241 = v237 + 1;
      while (1)
      {
        v242 = v241 - 2;
        if (v241 - 2 < 0)
          break;
        --v241;
        if (*(_QWORD *)(v235[3] + 8 * v242) != *(_QWORD *)(v26[3] + 8 * v242))
          goto LABEL_242;
      }
      v241 = v240;
LABEL_242:
      v274 = v29 + 1;
      while (1)
      {
        v275 = v274 - 2;
        if (v274 - 2 < 0)
          break;
        --v274;
        if (*(_QWORD *)(v27[3] + 8 * v275))
          goto LABEL_267;
      }
      v274 = v32;
LABEL_267:
      v284 = v237 + 1;
      while (1)
      {
        v285 = v284 - 2;
        if (v284 - 2 < 0)
          break;
        --v284;
        if (*(_QWORD *)(v235[3] + 8 * v285))
          goto LABEL_292;
      }
      v284 = v240;
LABEL_292:
      v294 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v33 <= v241)
        v295 = v241;
      else
        v295 = v33;
      if (v33 <= v284)
        v33 = v284;
      if (v274 > v241)
        v241 = v274;
      if (v294 > v241)
      {
        v296 = 1;
      }
      else
      {
        v241 = (uint64_t)(v26[1] - *v26) >> 2;
        v296 = 4;
      }
      if (v294 > v33)
      {
        v297 = 2;
      }
      else
      {
        v33 = v241;
        v297 = v296;
      }
      if (v294 > v295)
      {
        v33 = v295;
        v297 = 3;
      }
      v1707 = v238;
      v1722 = v30;
      if (!v33)
        goto LABEL_309;
      v298 = *(_QWORD *)(v26[3] + 8 * (v33 - 1));
      if (v298 < 0x10)
        goto LABEL_309;
      v1688 = *(_QWORD *)(v26[3] + 8 * (v33 - 1));
      switch(v297)
      {
        case 1:
          if (v33 == 2)
          {
            v1258 = *v28;
            if ((_DWORD)v1258)
            {
              v1259 = 0;
              v1260 = 0;
              v1261 = 0;
              v1262 = v27[19];
              v1263 = v235[19];
              v1264 = v26[19];
              v1265 = v28[1];
              v1266 = (uint64_t *)v27[3];
              v1267 = *v1266;
              v1268 = v1266[1];
              v1269 = (uint64_t *)v235[3];
              v1271 = *v1269;
              v1270 = v1269[1];
              if (v1265 <= 1)
                v1272 = 1;
              else
                v1272 = v28[1];
              v1273 = v1267 - v1268 * v1265;
              v1274 = v1271 - v1270 * v236[1];
              do
              {
                if ((_DWORD)v1265)
                {
                  v1275 = 0;
                  v1276 = v1263 + v1260;
                  do
                  {
                    if ((int)v298 >= 1)
                    {
                      v1277 = 0;
                      v1278 = *(unsigned __int8 *)(v1262 + v1261);
                      v1279 = v298 + 1;
                      do
                      {
                        if (v1278)
                          v1280 = *(_BYTE *)(v1276 + v1277) == 0;
                        else
                          v1280 = 1;
                        v1281 = !v1280;
                        *(_BYTE *)(v1264 + v1277) = v1281;
                        --v1279;
                        ++v1277;
                      }
                      while (v1279 > 1);
                    }
                    v1261 += v1268;
                    v1260 += v1270;
                    v1264 += (int)v298;
                    ++v1275;
                    v1276 += v1270;
                  }
                  while (v1275 != v1272);
                }
                v1261 += v1273;
                v1260 += v1274;
                ++v1259;
              }
              while (v1259 != v1258);
            }
          }
          else if (v33 == 1)
          {
            v880 = *v28;
            if ((_DWORD)v880)
            {
              v881 = 0;
              v882 = 0;
              v883 = v27[19];
              v884 = v235[19];
              v885 = v26[19];
              v886 = *(_QWORD *)v27[3];
              v887 = *(_QWORD *)v235[3];
              do
              {
                if ((int)v298 >= 1)
                {
                  v888 = 0;
                  v889 = *(unsigned __int8 *)(v883 + v882);
                  v890 = v298 + 1;
                  do
                  {
                    if (v889)
                      v891 = *(_BYTE *)(v884 + v888) == 0;
                    else
                      v891 = 1;
                    v892 = !v891;
                    *(_BYTE *)(v885 + v888) = v892;
                    --v890;
                    ++v888;
                  }
                  while (v890 > 1);
                }
                v882 += v886;
                v885 += (int)v298;
                ++v881;
                v884 += v887;
              }
              while (v881 != v880);
            }
          }
          else
          {
            v1660 = v26[6];
            if (v1660)
            {
              v1282 = 0;
              v1620 = v235[19];
              v1632 = v27[19];
              v1645 = (int)v298;
              v1614 = v298 + 1;
              v1283 = v26[19];
              do
              {
                v1678 = v1282;
                v1284 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1285 = v27[3];
                  do
                  {
                    v1286 = ldiv((int)v1282, v28[v30]);
                    LODWORD(v1282) = v1286.quot;
                    v1284 += *(_QWORD *)(v1285 + 8 * v30--) * v1286.rem;
                  }
                  while (v30 != -1);
                }
                v1287 = v1707;
                if ((v1707 & 0x80000000) != 0)
                {
                  LODWORD(v1288) = 0;
                }
                else
                {
                  v1288 = 0;
                  v1289 = v235[3];
                  quot = v1678;
                  do
                  {
                    v1291 = ldiv(quot, v236[v1287]);
                    quot = v1291.quot;
                    v1288 += *(_QWORD *)(v1289 + 8 * v1287--) * v1291.rem;
                  }
                  while (v1287 != -1);
                }
                if ((int)v1688 >= 1)
                {
                  v1292 = 0;
                  v1293 = *(unsigned __int8 *)(v1632 + (int)v1284);
                  v1294 = v1614;
                  do
                  {
                    if (v1293)
                      v1295 = *(_BYTE *)(v1620 + (int)v1288 + v1292) == 0;
                    else
                      v1295 = 1;
                    v1296 = !v1295;
                    *(_BYTE *)(v1283 + v1292) = v1296;
                    --v1294;
                    ++v1292;
                  }
                  while (v1294 > 1);
                }
                v1283 += v1645;
                v1282 = v1678 + v1645;
                v30 = v1722;
              }
              while (v1678 + v1645 < v1660);
            }
          }
          break;
        case 2:
          if (v33 == 2)
          {
            v1297 = *v28;
            if ((_DWORD)v1297)
            {
              v1298 = 0;
              v1299 = 0;
              v1300 = 0;
              v1301 = v27[19];
              v1302 = v235[19];
              v1303 = v26[19];
              v1304 = v28[1];
              v1305 = (uint64_t *)v27[3];
              v1306 = *v1305;
              v1307 = v1305[1];
              v1308 = (uint64_t *)v235[3];
              v1310 = *v1308;
              v1309 = v1308[1];
              if (v1304 <= 1)
                v1311 = 1;
              else
                v1311 = v28[1];
              v1312 = v1306 - v1307 * v1304;
              v1313 = v1310 - v1309 * v236[1];
              do
              {
                if ((_DWORD)v1304)
                {
                  v1314 = 0;
                  v1315 = v1301 + v1300;
                  do
                  {
                    if ((int)v298 >= 1)
                    {
                      v1316 = 0;
                      v1317 = *(unsigned __int8 *)(v1302 + v1299);
                      v1318 = v298 + 1;
                      do
                      {
                        if (v1317)
                          v1319 = *(_BYTE *)(v1315 + v1316) == 0;
                        else
                          v1319 = 1;
                        v1320 = !v1319;
                        *(_BYTE *)(v1303 + v1316) = v1320;
                        --v1318;
                        ++v1316;
                      }
                      while (v1318 > 1);
                    }
                    v1300 += v1307;
                    v1299 += v1309;
                    v1303 += (int)v298;
                    ++v1314;
                    v1315 += v1307;
                  }
                  while (v1314 != v1311);
                }
                v1300 += v1312;
                v1299 += v1313;
                ++v1298;
              }
              while (v1298 != v1297);
            }
          }
          else if (v33 == 1)
          {
            v893 = *v28;
            if ((_DWORD)v893)
            {
              v894 = 0;
              v895 = 0;
              v896 = v27[19];
              v897 = v235[19];
              v898 = v26[19];
              v899 = *(_QWORD *)v27[3];
              v900 = *(_QWORD *)v235[3];
              do
              {
                if ((int)v298 >= 1)
                {
                  v901 = 0;
                  v902 = *(unsigned __int8 *)(v897 + v895);
                  v903 = v298 + 1;
                  do
                  {
                    if (v902)
                      v904 = *(_BYTE *)(v896 + v901) == 0;
                    else
                      v904 = 1;
                    v905 = !v904;
                    *(_BYTE *)(v898 + v901) = v905;
                    --v903;
                    ++v901;
                  }
                  while (v903 > 1);
                }
                v895 += v900;
                v898 += (int)v298;
                ++v894;
                v896 += v899;
              }
              while (v894 != v893);
            }
          }
          else
          {
            v1661 = v26[6];
            if (v1661)
            {
              v1321 = 0;
              v1621 = v235[19];
              v1633 = v27[19];
              v1646 = (int)v298;
              v1615 = v298 + 1;
              v1322 = v26[19];
              do
              {
                v1679 = v1321;
                v1323 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1324 = v27[3];
                  do
                  {
                    v1325 = ldiv((int)v1321, v28[v30]);
                    LODWORD(v1321) = v1325.quot;
                    v1323 += *(_QWORD *)(v1324 + 8 * v30--) * v1325.rem;
                  }
                  while (v30 != -1);
                }
                v1326 = v1707;
                if ((v1707 & 0x80000000) != 0)
                {
                  LODWORD(v1327) = 0;
                }
                else
                {
                  v1327 = 0;
                  v1328 = v235[3];
                  v1329 = v1679;
                  do
                  {
                    v1330 = ldiv(v1329, v236[v1326]);
                    v1329 = v1330.quot;
                    v1327 += *(_QWORD *)(v1328 + 8 * v1326--) * v1330.rem;
                  }
                  while (v1326 != -1);
                }
                if ((int)v1688 >= 1)
                {
                  v1331 = 0;
                  v1332 = *(unsigned __int8 *)(v1621 + (int)v1327);
                  v1333 = v1615;
                  do
                  {
                    if (v1332)
                      v1334 = *(_BYTE *)(v1633 + (int)v1323 + v1331) == 0;
                    else
                      v1334 = 1;
                    v1335 = !v1334;
                    *(_BYTE *)(v1322 + v1331) = v1335;
                    --v1333;
                    ++v1331;
                  }
                  while (v1333 > 1);
                }
                v1322 += v1646;
                v1321 = v1679 + v1646;
                v30 = v1722;
              }
              while (v1679 + v1646 < v1661);
            }
          }
          break;
        case 3:
          if (v33 == 2)
          {
            v1086 = *v28;
            if ((_DWORD)v1086)
            {
              v1087 = 0;
              v1088 = 0;
              v1089 = 0;
              v1090 = v27[19];
              v1091 = v235[19];
              v1092 = v26[19];
              v1093 = v28[1];
              v1094 = (uint64_t *)v27[3];
              v1095 = *v1094;
              v1096 = v1094[1];
              v1097 = (uint64_t *)v235[3];
              v1099 = *v1097;
              v1098 = v1097[1];
              if (v1093 <= 1)
                v1100 = 1;
              else
                v1100 = v28[1];
              v1101 = v1095 - v1096 * v1093;
              v1102 = v1099 - v1098 * v236[1];
              do
              {
                if ((_DWORD)v1093)
                {
                  v1103 = 0;
                  v1104 = v1091 + v1088;
                  v1105 = v1090 + v1089;
                  do
                  {
                    if ((int)v298 >= 1)
                    {
                      v1106 = 0;
                      v1107 = v298 + 1;
                      do
                      {
                        if (*(_BYTE *)(v1105 + v1106))
                          v1108 = *(_BYTE *)(v1104 + v1106) == 0;
                        else
                          v1108 = 1;
                        v1109 = !v1108;
                        *(_BYTE *)(v1092 + v1106) = v1109;
                        --v1107;
                        ++v1106;
                      }
                      while (v1107 > 1);
                    }
                    v1089 += v1096;
                    v1088 += v1098;
                    v1092 += (int)v298;
                    ++v1103;
                    v1104 += v1098;
                    v1105 += v1096;
                  }
                  while (v1103 != v1100);
                }
                v1089 += v1101;
                v1088 += v1102;
                ++v1087;
              }
              while (v1087 != v1086);
            }
          }
          else if (v33 == 1)
          {
            v351 = *v28;
            if ((_DWORD)v351)
            {
              v352 = 0;
              v353 = v27[19];
              v354 = v235[19];
              v355 = v26[19];
              v356 = *(_QWORD *)v27[3];
              v357 = *(_QWORD *)v235[3];
              do
              {
                if ((int)v298 >= 1)
                {
                  v358 = 0;
                  v359 = v298 + 1;
                  do
                  {
                    if (*(_BYTE *)(v353 + v358))
                      v360 = *(_BYTE *)(v354 + v358) == 0;
                    else
                      v360 = 1;
                    v361 = !v360;
                    *(_BYTE *)(v355 + v358) = v361;
                    --v359;
                    ++v358;
                  }
                  while (v359 > 1);
                }
                v355 += (int)v298;
                ++v352;
                v354 += v357;
                v353 += v356;
              }
              while (v352 != v351);
            }
          }
          else
          {
            v1658 = v26[6];
            if (v1658)
            {
              v1110 = 0;
              v1616 = v235[19];
              v1628 = v27[19];
              v1643 = (int)v298;
              v1613 = v298 + 1;
              v1111 = v26[19];
              do
              {
                v1673 = v1110;
                v1112 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1113 = v27[3];
                  for (i = v30; i != -1; --i)
                  {
                    v1115 = ldiv((int)v1110, v28[i]);
                    LODWORD(v1110) = v1115.quot;
                    v1112 += *(_QWORD *)(v1113 + 8 * i) * v1115.rem;
                  }
                }
                v1116 = v1707;
                if ((v1707 & 0x80000000) != 0)
                {
                  LODWORD(v1117) = 0;
                }
                else
                {
                  v1117 = 0;
                  v1118 = v235[3];
                  v1119 = v1673;
                  do
                  {
                    v1120 = ldiv(v1119, v236[v1116]);
                    v1119 = v1120.quot;
                    v1117 += *(_QWORD *)(v1118 + 8 * v1116--) * v1120.rem;
                  }
                  while (v1116 != -1);
                }
                v30 = v1722;
                if ((int)v1688 >= 1)
                {
                  v1121 = 0;
                  v1122 = v1613;
                  do
                  {
                    if (*(_BYTE *)(v1628 + (int)v1112 + v1121))
                      v1123 = *(_BYTE *)(v1616 + (int)v1117 + v1121) == 0;
                    else
                      v1123 = 1;
                    v1124 = !v1123;
                    *(_BYTE *)(v1111 + v1121) = v1124;
                    --v1122;
                    ++v1121;
                  }
                  while (v1122 > 1);
                }
                v1111 += v1643;
                v1110 = v1673 + v1643;
              }
              while (v1673 + v1643 < v1658);
            }
          }
          break;
        default:
LABEL_309:
          switch(v294)
          {
            case 1uLL:
              v299 = v26[6];
              if (v299)
              {
                v300 = (_BYTE *)v27[19];
                v301 = (_BYTE *)v235[19];
                v302 = (char *)v26[19];
                v303 = *(_QWORD *)v27[3];
                v304 = *(_QWORD *)v235[3];
                do
                {
                  if (*v300)
                    v305 = *v301 == 0;
                  else
                    v305 = 1;
                  v306 = !v305;
                  *v302++ = v306;
                  v301 += v304;
                  v300 += v303;
                  --v299;
                }
                while (v299);
              }
              break;
            case 2uLL:
              v498 = *v28;
              if ((_DWORD)v498)
              {
                v499 = 0;
                v500 = 0;
                v501 = 0;
                v502 = 0;
                v503 = v27[19];
                v504 = v235[19];
                v505 = v26[19];
                v506 = v28[1];
                v507 = (uint64_t *)v27[3];
                v508 = *v507;
                v509 = v507[1];
                v510 = (uint64_t *)v235[3];
                v511 = *v510;
                v512 = v510[1];
                v513 = v511 - v512 * v236[1];
                if (v506 <= 1)
                  v514 = 1;
                else
                  v514 = v28[1];
                v515 = v508 - v509 * v506;
                do
                {
                  if ((_DWORD)v506)
                  {
                    v516 = v500 + v514;
                    v517 = (char *)(v505 + v500);
                    v518 = v514;
                    do
                    {
                      if (*(_BYTE *)(v503 + v502))
                        v519 = *(_BYTE *)(v504 + v501) == 0;
                      else
                        v519 = 1;
                      v520 = !v519;
                      *v517++ = v520;
                      v502 += v509;
                      v501 += v512;
                      --v518;
                    }
                    while (v518);
                    v500 = v516;
                  }
                  v502 += v515;
                  v501 += v513;
                  ++v499;
                }
                while (v499 != v498);
              }
              break;
            case 3uLL:
              v521 = *v28;
              if ((_DWORD)v521)
              {
                v522 = 0;
                v523 = 0;
                v524 = 0;
                v525 = 0;
                v526 = v27[19];
                v527 = v235[19];
                v528 = v26[19];
                v529 = v28[1];
                v530 = (_QWORD *)v27[3];
                v531 = v530[1];
                v532 = (_QWORD *)v235[3];
                v533 = v532[1];
                v534 = *v532 - v533 * v236[1];
                if (v529 <= 1)
                  v535 = 1;
                else
                  v535 = v28[1];
                v536 = *v530 - v531 * v529;
                do
                {
                  if ((_DWORD)v529)
                  {
                    v537 = 0;
                    v538 = v28[2];
                    v539 = v530[2];
                    v540 = v532[2];
                    if (v538 <= 1)
                      v541 = 1;
                    else
                      v541 = v28[2];
                    v542 = v533 - v540 * v236[2];
                    do
                    {
                      v543 = v541;
                      if ((_DWORD)v538)
                      {
                        do
                        {
                          if (*(_BYTE *)(v526 + v525))
                            v544 = *(_BYTE *)(v527 + v524) == 0;
                          else
                            v544 = 1;
                          v545 = !v544;
                          *(_BYTE *)(v528 + v523++) = v545;
                          v525 += v539;
                          v524 += v540;
                          --v543;
                        }
                        while (v543);
                      }
                      v525 += v531 - v539 * v538;
                      v524 += v542;
                      ++v537;
                    }
                    while (v537 != v535);
                  }
                  v525 += v536;
                  v524 += v534;
                  ++v522;
                }
                while (v522 != v521);
              }
              break;
            case 4uLL:
              v1727 = *v28;
              if ((_DWORD)v1727)
              {
                v546 = 0;
                v547 = 0;
                v548 = 0;
                v549 = 0;
                v550 = v27[19];
                v551 = v235[19];
                v552 = v26[19];
                v553 = v28[1];
                v554 = (_QWORD *)v27[3];
                v555 = (_QWORD *)v235[3];
                v1641 = v555[1];
                v1650 = v554[1];
                v1690 = *v555 - v1641 * v236[1];
                v1712 = v28[1];
                if (v553 <= 1)
                  v556 = 1;
                else
                  v556 = v28[1];
                v1665 = *v554 - v554[1] * v553;
                do
                {
                  if (v1712)
                  {
                    v557 = 0;
                    v558 = v28[2];
                    v559 = v554[2];
                    v560 = v555[2];
                    if (v558 <= 1)
                      v561 = 1;
                    else
                      v561 = v28[2];
                    v562 = v1641 - v560 * v236[2];
                    do
                    {
                      if ((_DWORD)v558)
                      {
                        v563 = 0;
                        v564 = v28[3];
                        v565 = v554[3];
                        v566 = v555[3];
                        if (v564 <= 1)
                          v567 = 1;
                        else
                          v567 = v28[3];
                        v568 = v560 - v566 * v236[3];
                        do
                        {
                          v569 = v567;
                          if ((_DWORD)v564)
                          {
                            do
                            {
                              if (*(_BYTE *)(v550 + v549))
                                v570 = *(_BYTE *)(v551 + v548) == 0;
                              else
                                v570 = 1;
                              v571 = !v570;
                              *(_BYTE *)(v552 + v547++) = v571;
                              v549 += v565;
                              v548 += v566;
                              --v569;
                            }
                            while (v569);
                          }
                          v549 += v559 - v565 * v564;
                          v548 += v568;
                          ++v563;
                        }
                        while (v563 != v561);
                      }
                      v549 += v1650 - v559 * v558;
                      v548 += v562;
                      ++v557;
                    }
                    while (v557 != v556);
                  }
                  v549 += v1665;
                  v548 += v1690;
                  ++v546;
                }
                while (v546 != v1727);
              }
              break;
            default:
              v1689 = v26[6];
              if (v1689)
              {
                v485 = 0;
                v1649 = v235[19];
                v1664 = v27[19];
                v1640 = v26[19];
                do
                {
                  v486 = 0;
                  if ((v30 & 0x80000000) == 0)
                  {
                    v487 = v27[3];
                    v488 = v30;
                    v489 = v485;
                    do
                    {
                      v490 = ldiv(v489, v28[v488]);
                      v489 = v490.quot;
                      v486 += *(_QWORD *)(v487 + 8 * v488--) * v490.rem;
                    }
                    while (v488 != -1);
                  }
                  v491 = v1707;
                  if ((v1707 & 0x80000000) != 0)
                  {
                    LODWORD(v492) = 0;
                  }
                  else
                  {
                    v492 = 0;
                    v493 = v235[3];
                    v494 = v485;
                    do
                    {
                      v495 = ldiv(v494, v236[v491]);
                      v494 = v495.quot;
                      v492 += *(_QWORD *)(v493 + 8 * v491--) * v495.rem;
                    }
                    while (v491 != -1);
                  }
                  if (*(_BYTE *)(v1664 + (int)v486))
                    v496 = *(_BYTE *)(v1649 + (int)v492) == 0;
                  else
                    v496 = 1;
                  v497 = !v496;
                  *(_BYTE *)(v1640 + v485++) = v497;
                  v30 = v1722;
                }
                while (v485 != v1689);
              }
              break;
          }
          break;
      }
LABEL_57:
      v63 = *(uint64_t **)a1;
      v64 = *(uint64_t **)(a1 + 8);
      v65 = *(mlx::core::array **)(a1 + 16);
      switch(v66)
      {
        case 0:
          v20 = **(_BYTE **)(*v64 + 152) & **(_BYTE **)(*v63 + 152);
          v21 = *(_QWORD *)v65;
          goto LABEL_59;
        case 1:
          v75 = *(_DWORD *)(*v64 + 160);
          if (v75 >= 1)
          {
            v76 = **(_BYTE **)(*v63 + 152);
            v77 = *(_BYTE **)(*(_QWORD *)v65 + 152);
            v78 = *(char **)(*v64 + 152);
            v79 = v75 + 1;
            do
            {
              v80 = *v78++;
              *v77++ = v80 & v76;
              --v79;
            }
            while (v79 > 1);
          }
          return;
        case 2:
          v81 = *(_DWORD *)(*v63 + 160);
          if (v81 >= 1)
          {
            v82 = **(_BYTE **)(*v64 + 152);
            v83 = *(_BYTE **)(*(_QWORD *)v65 + 152);
            v84 = *(char **)(*v63 + 152);
            v85 = v81 + 1;
            do
            {
              v86 = *v84++;
              *v83++ = v86 & v82;
              --v85;
            }
            while (v85 > 1);
          }
          return;
        case 3:
          v87 = *(_DWORD *)(*(_QWORD *)v65 + 48);
          if (v87 >= 1)
          {
            v88 = *(_BYTE **)(*(_QWORD *)v65 + 152);
            v89 = *(char **)(*v64 + 152);
            v90 = *(char **)(*v63 + 152);
            v91 = v87 + 1;
            do
            {
              v93 = *v90++;
              v92 = v93;
              v94 = *v89++;
              *v88++ = v94 & v92;
              --v91;
            }
            while (v91 > 1);
          }
          return;
        default:
          v67 = *(_QWORD **)v65;
          v68 = *v63;
          v69 = *(int **)*v63;
          v70 = (*(_QWORD *)(*v63 + 8) - (_QWORD)v69) >> 2;
          v71 = v70 - 1;
          if ((int)v70 - 1 >= -1)
            v71 = -1;
          v72 = v71 + 1;
          v73 = v70 + 1;
          break;
      }
      while (1)
      {
        v74 = v73 - 2;
        if (v73 - 2 < 0)
          break;
        --v73;
        if (*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v74) != *(_QWORD *)(v67[3] + 8 * v74))
          goto LABEL_79;
      }
      v73 = v72;
LABEL_79:
      v95 = (int **)*v64;
      v96 = *(int **)*v64;
      v97 = (*(_QWORD *)(*v64 + 8) - (_QWORD)v96) >> 2;
      v98 = v97 - 1;
      if ((int)v97 - 1 >= -1)
        v98 = -1;
      v99 = v98 + 1;
      v100 = v97 + 1;
      while (1)
      {
        v101 = v100 - 2;
        if (v100 - 2 < 0)
          break;
        --v100;
        if (*(_QWORD *)&v95[3][2 * v101] != *(_QWORD *)(v67[3] + 8 * v101))
          goto LABEL_86;
      }
      v100 = v99;
LABEL_86:
      v102 = v70 + 1;
      while (1)
      {
        v103 = v102 - 2;
        if (v102 - 2 < 0)
          break;
        --v102;
        if (*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v103))
          goto LABEL_91;
      }
      v102 = v72;
LABEL_91:
      v104 = v97 + 1;
      while (1)
      {
        v105 = v104 - 2;
        if (v104 - 2 < 0)
          break;
        --v104;
        if (*(_QWORD *)&v95[3][2 * v105])
          goto LABEL_96;
      }
      v104 = v99;
LABEL_96:
      v106 = (uint64_t)(v67[1] - *v67) >> 2;
      if (v73 <= v100)
        v107 = v100;
      else
        v107 = v73;
      if (v73 <= v104)
        v73 = v104;
      if (v102 > v100)
        v100 = v102;
      if (v106 > v100)
      {
        v108 = 1;
      }
      else
      {
        v100 = (uint64_t)(v67[1] - *v67) >> 2;
        v108 = 4;
      }
      if (v106 > v73)
      {
        v109 = 2;
      }
      else
      {
        v73 = v100;
        v109 = v108;
      }
      if (v106 > v107)
      {
        v73 = v107;
        v109 = 3;
      }
      v1721 = v65;
      if (!v73)
        goto LABEL_113;
      v110 = *(_QWORD *)(v67[3] + 8 * (v73 - 1));
      if (v110 < 0x10)
        goto LABEL_113;
      switch(v109)
      {
        case 1:
          if (v73 == 2)
          {
            v1022 = *v69;
            if (*v69)
            {
              v1023 = 0;
              v1024 = 0;
              v1025 = 0;
              v1026 = *(_QWORD *)(v68 + 152);
              v1027 = v95[19];
              v1028 = v67[19];
              do
              {
                if (v69[1])
                {
                  v1029 = 0;
                  do
                  {
                    if ((int)v110 >= 1)
                    {
                      v1030 = 0;
                      v1031 = *(_BYTE *)(v1026 + v1025);
                      v1032 = v110 + 1;
                      do
                      {
                        *(_BYTE *)(v1028 + v1030) = *((_BYTE *)v1027 + v1024 + v1030) & v1031;
                        --v1032;
                        ++v1030;
                      }
                      while (v1032 > 1);
                      v68 = *v63;
                      v95 = (int **)*v64;
                      v69 = *(int **)*v63;
                    }
                    v1033 = *(_QWORD **)(v68 + 24);
                    v1034 = v1033[1];
                    v1025 += v1034;
                    v1024 += *((_QWORD *)v95[3] + 1);
                    v1028 += (int)v110;
                    ++v1029;
                    v1035 = v69[1];
                  }
                  while (v1029 < v1035);
                  v1022 = *v69;
                  v96 = *v95;
                }
                else
                {
                  v1035 = 0;
                  v1033 = *(_QWORD **)(v68 + 24);
                  v1034 = v1033[1];
                }
                v1025 = *v1033 + v1025 - v1035 * v1034;
                v1024 = *(_QWORD *)v95[3] + v1024 - *((_QWORD *)v95[3] + 1) * v96[1];
                ++v1023;
              }
              while (v1023 < v1022);
            }
          }
          else if (v73 == 1)
          {
            v465 = *v69;
            if (*v69)
            {
              v466 = 0;
              v467 = 0;
              v468 = 0;
              v469 = *(_QWORD *)(v68 + 152);
              v470 = v95[19];
              v471 = v67[19];
              do
              {
                if ((int)v110 >= 1)
                {
                  v472 = 0;
                  v473 = *(_BYTE *)(v469 + v468);
                  v474 = v110 + 1;
                  do
                  {
                    *(_BYTE *)(v471 + v472) = *((_BYTE *)v470 + v467 + v472) & v473;
                    --v474;
                    ++v472;
                  }
                  while (v474 > 1);
                  v68 = *v63;
                  v95 = (int **)*v64;
                  v465 = **(_DWORD **)*v63;
                }
                v468 += **(_QWORD **)(v68 + 24);
                v467 += *(_QWORD *)v95[3];
                v471 += (int)v110;
                ++v466;
              }
              while (v466 < v465);
            }
          }
          else if (v67[6])
          {
            v1656 = v95[19];
            v1671 = *(_QWORD *)(v68 + 152);
            v1716 = 0;
            v1036 = v67[19];
            do
            {
              v1037 = *(_QWORD *)*v63;
              v1038 = (unint64_t)(*(_QWORD *)(*v63 + 8) - v1037) >> 2;
              v1039 = 0;
              v1040 = (v1038 - 1);
              if ((int)v1038 - 1 >= 0)
              {
                v1041 = *(_QWORD *)(*v63 + 24);
                v1042 = v1716;
                do
                {
                  v1043 = ldiv(v1042, *(int *)(v1037 + 4 * v1040));
                  v1042 = v1043.quot;
                  v1039 += *(_QWORD *)(v1041 + 8 * v1040--) * v1043.rem;
                }
                while (v1040 != -1);
              }
              v1044 = *(_QWORD *)*v64;
              v1045 = (unint64_t)(*(_QWORD *)(*v64 + 8) - v1044) >> 2;
              v1046 = 0;
              v1047 = (v1045 - 1);
              if ((int)v1045 - 1 >= 0)
              {
                v1048 = *(_QWORD *)(*v64 + 24);
                v1049 = v1716;
                do
                {
                  v1050 = ldiv(v1049, *(int *)(v1044 + 4 * v1047));
                  v1049 = v1050.quot;
                  v1046 += *(_QWORD *)(v1048 + 8 * v1047--) * v1050.rem;
                }
                while (v1047 != -1);
              }
              if ((int)v110 >= 1)
              {
                v1051 = 0;
                v1052 = *(_BYTE *)(v1671 + (int)v1039);
                v1053 = v110 + 1;
                do
                {
                  *(_BYTE *)(v1036 + v1051) = *((_BYTE *)v1656 + (int)v1046 + v1051) & v1052;
                  --v1053;
                  ++v1051;
                }
                while (v1053 > 1);
                v67 = *(_QWORD **)v1721;
              }
              v1036 += (int)v110;
              v1716 += (int)v110;
            }
            while (v1716 < v67[6]);
          }
          break;
        case 2:
          if (v73 == 2)
          {
            v1054 = *v69;
            if (*v69)
            {
              v1055 = 0;
              v1056 = 0;
              v1057 = 0;
              v1058 = *(_QWORD *)(v68 + 152);
              v1059 = v95[19];
              v1060 = v67[19];
              do
              {
                if (v69[1])
                {
                  v1061 = 0;
                  do
                  {
                    if ((int)v110 >= 1)
                    {
                      v1062 = 0;
                      v1063 = *((_BYTE *)v1059 + v1056);
                      v1064 = v110 + 1;
                      do
                      {
                        *(_BYTE *)(v1060 + v1062) = *(_BYTE *)(v1058 + v1057 + v1062) & v1063;
                        --v1064;
                        ++v1062;
                      }
                      while (v1064 > 1);
                      v68 = *v63;
                      v95 = (int **)*v64;
                      v69 = *(int **)*v63;
                    }
                    v1065 = *(_QWORD **)(v68 + 24);
                    v1066 = v1065[1];
                    v1057 += v1066;
                    v1056 += *((_QWORD *)v95[3] + 1);
                    v1060 += (int)v110;
                    ++v1061;
                    v1067 = v69[1];
                  }
                  while (v1061 < v1067);
                  v1054 = *v69;
                  v96 = *v95;
                }
                else
                {
                  v1067 = 0;
                  v1065 = *(_QWORD **)(v68 + 24);
                  v1066 = v1065[1];
                }
                v1057 = *v1065 + v1057 - v1067 * v1066;
                v1056 = *(_QWORD *)v95[3] + v1056 - *((_QWORD *)v95[3] + 1) * v96[1];
                ++v1055;
              }
              while (v1055 < v1054);
            }
          }
          else if (v73 == 1)
          {
            v475 = *v69;
            if (*v69)
            {
              v476 = 0;
              v477 = 0;
              v478 = 0;
              v479 = *(_QWORD *)(v68 + 152);
              v480 = v95[19];
              v481 = v67[19];
              do
              {
                if ((int)v110 >= 1)
                {
                  v482 = 0;
                  v483 = *((_BYTE *)v480 + v477);
                  v484 = v110 + 1;
                  do
                  {
                    *(_BYTE *)(v481 + v482) = *(_BYTE *)(v479 + v478 + v482) & v483;
                    --v484;
                    ++v482;
                  }
                  while (v484 > 1);
                  v68 = *v63;
                  v95 = (int **)*v64;
                  v475 = **(_DWORD **)*v63;
                }
                v478 += **(_QWORD **)(v68 + 24);
                v477 += *(_QWORD *)v95[3];
                v481 += (int)v110;
                ++v476;
              }
              while (v476 < v475);
            }
          }
          else if (v67[6])
          {
            v1657 = v95[19];
            v1672 = *(_QWORD *)(v68 + 152);
            v1717 = 0;
            v1068 = v67[19];
            do
            {
              v1069 = *(_QWORD *)*v63;
              v1070 = (unint64_t)(*(_QWORD *)(*v63 + 8) - v1069) >> 2;
              v1071 = 0;
              v1072 = (v1070 - 1);
              if ((int)v1070 - 1 >= 0)
              {
                v1073 = *(_QWORD *)(*v63 + 24);
                v1074 = v1717;
                do
                {
                  v1075 = ldiv(v1074, *(int *)(v1069 + 4 * v1072));
                  v1074 = v1075.quot;
                  v1071 += *(_QWORD *)(v1073 + 8 * v1072--) * v1075.rem;
                }
                while (v1072 != -1);
              }
              v1076 = *(_QWORD *)*v64;
              v1077 = (unint64_t)(*(_QWORD *)(*v64 + 8) - v1076) >> 2;
              v1078 = 0;
              v1079 = (v1077 - 1);
              if ((int)v1077 - 1 >= 0)
              {
                v1080 = *(_QWORD *)(*v64 + 24);
                v1081 = v1717;
                do
                {
                  v1082 = ldiv(v1081, *(int *)(v1076 + 4 * v1079));
                  v1081 = v1082.quot;
                  v1078 += *(_QWORD *)(v1080 + 8 * v1079--) * v1082.rem;
                }
                while (v1079 != -1);
              }
              if ((int)v110 >= 1)
              {
                v1083 = 0;
                v1084 = *((_BYTE *)v1657 + (int)v1078);
                v1085 = v110 + 1;
                do
                {
                  *(_BYTE *)(v1068 + v1083) = *(_BYTE *)(v1672 + (int)v1071 + v1083) & v1084;
                  --v1085;
                  ++v1083;
                }
                while (v1085 > 1);
                v67 = *(_QWORD **)v1721;
              }
              v1068 += (int)v110;
              v1717 += (int)v110;
            }
            while (v1717 < v67[6]);
          }
          break;
        case 3:
          if (v73 == 2)
          {
            v992 = *v69;
            if (*v69)
            {
              v993 = 0;
              v994 = 0;
              v995 = 0;
              v996 = *(_QWORD *)(v68 + 152);
              v997 = v95[19];
              v998 = v67[19];
              do
              {
                if (v69[1])
                {
                  v999 = 0;
                  do
                  {
                    if ((int)v110 >= 1)
                    {
                      v1000 = 0;
                      v1001 = v110 + 1;
                      do
                      {
                        *(_BYTE *)(v998 + v1000) = *((_BYTE *)v997 + v994 + v1000) & *(_BYTE *)(v996 + v995 + v1000);
                        --v1001;
                        ++v1000;
                      }
                      while (v1001 > 1);
                      v68 = *v63;
                      v95 = (int **)*v64;
                      v69 = *(int **)*v63;
                    }
                    v1002 = *(_QWORD **)(v68 + 24);
                    v1003 = v1002[1];
                    v995 += v1003;
                    v994 += *((_QWORD *)v95[3] + 1);
                    v998 += (int)v110;
                    ++v999;
                    v1004 = v69[1];
                  }
                  while (v999 < v1004);
                  v992 = *v69;
                  v96 = *v95;
                }
                else
                {
                  v1004 = 0;
                  v1002 = *(_QWORD **)(v68 + 24);
                  v1003 = v1002[1];
                }
                v995 = *v1002 + v995 - v1004 * v1003;
                v994 = *(_QWORD *)v95[3] + v994 - *((_QWORD *)v95[3] + 1) * v96[1];
                ++v993;
              }
              while (v993 < v992);
            }
          }
          else if (v73 == 1)
          {
            v226 = *v69;
            if (*v69)
            {
              v227 = 0;
              v228 = 0;
              v229 = 0;
              v230 = *(_QWORD *)(v68 + 152);
              v231 = v95[19];
              v232 = v67[19];
              do
              {
                if ((int)v110 >= 1)
                {
                  v233 = 0;
                  v234 = v110 + 1;
                  do
                  {
                    *(_BYTE *)(v232 + v233) = *((_BYTE *)v231 + v228 + v233) & *(_BYTE *)(v230 + v229 + v233);
                    --v234;
                    ++v233;
                  }
                  while (v234 > 1);
                  v68 = *v63;
                  v95 = (int **)*v64;
                  v226 = **(_DWORD **)*v63;
                }
                v229 += **(_QWORD **)(v68 + 24);
                v228 += *(_QWORD *)v95[3];
                v232 += (int)v110;
                ++v227;
              }
              while (v227 < v226);
            }
          }
          else if (v67[6])
          {
            v1655 = v95[19];
            v1670 = *(_QWORD *)(v68 + 152);
            v1715 = 0;
            v1005 = v67[19];
            do
            {
              v1006 = *(_QWORD *)*v63;
              v1007 = (unint64_t)(*(_QWORD *)(*v63 + 8) - v1006) >> 2;
              v1008 = 0;
              v1009 = (v1007 - 1);
              if ((int)v1007 - 1 >= 0)
              {
                v1010 = *(_QWORD *)(*v63 + 24);
                v1011 = v1715;
                do
                {
                  v1012 = ldiv(v1011, *(int *)(v1006 + 4 * v1009));
                  v1011 = v1012.quot;
                  v1008 += *(_QWORD *)(v1010 + 8 * v1009--) * v1012.rem;
                }
                while (v1009 != -1);
              }
              v1013 = *(_QWORD *)*v64;
              v1014 = (unint64_t)(*(_QWORD *)(*v64 + 8) - v1013) >> 2;
              v1015 = 0;
              v1016 = (v1014 - 1);
              if ((int)v1014 - 1 >= 0)
              {
                v1017 = *(_QWORD *)(*v64 + 24);
                v1018 = v1715;
                do
                {
                  v1019 = ldiv(v1018, *(int *)(v1013 + 4 * v1016));
                  v1018 = v1019.quot;
                  v1015 += *(_QWORD *)(v1017 + 8 * v1016--) * v1019.rem;
                }
                while (v1016 != -1);
              }
              if ((int)v110 >= 1)
              {
                v1020 = 0;
                v1021 = v110 + 1;
                do
                {
                  *(_BYTE *)(v1005 + v1020) = *((_BYTE *)v1655 + (int)v1015 + v1020) & *(_BYTE *)(v1670
                                                                                                + (int)v1008
                                                                                                + v1020);
                  --v1021;
                  ++v1020;
                }
                while (v1021 > 1);
                v67 = *(_QWORD **)v1721;
              }
              v1005 += (int)v110;
              v1715 += (int)v110;
            }
            while (v1715 < v67[6]);
          }
          break;
        default:
LABEL_113:
          switch(v106)
          {
            case 1uLL:
              if (v67[6])
              {
                v111 = 0;
                v112 = 0;
                v113 = 0;
                v114 = *(_QWORD *)(v68 + 152);
                v115 = v95[19];
                v116 = v67[19];
                do
                {
                  *(_BYTE *)(v116 + v111) = *((_BYTE *)v115 + v112) & *(_BYTE *)(v114 + v113);
                  v113 += **(_QWORD **)(*v63 + 24);
                  v112 += **(_QWORD **)(*v64 + 24);
                  ++v111;
                }
                while (v111 < *(_QWORD *)(*(_QWORD *)v65 + 48));
              }
              break;
            case 2uLL:
              v415 = *v69;
              if (*v69)
              {
                v416 = 0;
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = *(_QWORD *)(v68 + 152);
                v421 = v95[19];
                v422 = v67[19];
                do
                {
                  if (v69[1])
                  {
                    v423 = 0;
                    do
                    {
                      *(_BYTE *)(v422 + v417 + v423) = *((_BYTE *)v421 + v418) & *(_BYTE *)(v420 + v419);
                      v68 = *v63;
                      v424 = *(_QWORD **)(*v63 + 24);
                      v425 = v424[1];
                      v419 += v425;
                      v95 = (int **)*v64;
                      v426 = *(int **)(*v64 + 24);
                      v427 = *((_QWORD *)v426 + 1);
                      v418 += v427;
                      ++v423;
                      v69 = *(int **)*v63;
                      v428 = v69[1];
                    }
                    while (v423 < v428);
                    v415 = *v69;
                    v96 = *v95;
                    v417 += v423;
                  }
                  else
                  {
                    v428 = 0;
                    v424 = *(_QWORD **)(v68 + 24);
                    v425 = v424[1];
                    v426 = v95[3];
                    v427 = *((_QWORD *)v426 + 1);
                  }
                  v419 = *v424 + v419 - v428 * v425;
                  v418 = *(_QWORD *)v426 + v418 - v427 * v96[1];
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            case 3uLL:
              v429 = *v69;
              if (*v69)
              {
                v430 = 0;
                v431 = 0;
                v432 = 0;
                v433 = 0;
                v434 = *(_QWORD *)(v68 + 152);
                v435 = v95[19];
                v436 = v67[19];
                do
                {
                  if (v69[1])
                  {
                    v437 = 0;
                    do
                    {
                      if (v69[2])
                      {
                        v438 = 0;
                        do
                        {
                          *(_BYTE *)(v436 + v431 + v438) = *((_BYTE *)v435 + v432) & *(_BYTE *)(v434 + v433);
                          v68 = *v63;
                          v439 = *(_QWORD **)(*v63 + 24);
                          v440 = v439[2];
                          v433 += v440;
                          v95 = (int **)*v64;
                          v441 = *(int **)(*v64 + 24);
                          v442 = *((_QWORD *)v441 + 2);
                          v432 += v442;
                          ++v438;
                          v69 = *(int **)*v63;
                          v443 = v69[2];
                        }
                        while (v438 < v443);
                        v96 = *v95;
                        v431 += v438;
                      }
                      else
                      {
                        v443 = 0;
                        v439 = *(_QWORD **)(v68 + 24);
                        v440 = v439[2];
                        v441 = v95[3];
                        v442 = *((_QWORD *)v441 + 2);
                      }
                      v444 = v439[1];
                      v433 = v444 + v433 - v443 * v440;
                      v432 = *((_QWORD *)v441 + 1) + v432 - v442 * v96[2];
                      ++v437;
                      v445 = v69[1];
                    }
                    while (v437 < v445);
                    v429 = *v69;
                  }
                  else
                  {
                    v445 = 0;
                    v439 = *(_QWORD **)(v68 + 24);
                    v444 = v439[1];
                  }
                  v433 = *v439 + v433 - v445 * v444;
                  v432 = *(_QWORD *)v95[3] + v432 - *((_QWORD *)v95[3] + 1) * v96[1];
                  ++v430;
                }
                while (v430 < v429);
              }
              break;
            case 4uLL:
              v446 = *v69;
              if (*v69)
              {
                v447 = 0;
                v448 = 0;
                v449 = 0;
                v450 = 0;
                v451 = *(_QWORD *)(v68 + 152);
                v452 = v95[19];
                v453 = v67[19];
                do
                {
                  if (v69[1])
                  {
                    v454 = 0;
                    do
                    {
                      if (v69[2])
                      {
                        v455 = 0;
                        do
                        {
                          if (v69[3])
                          {
                            v456 = 0;
                            do
                            {
                              *(_BYTE *)(v453 + v448 + v456) = *((_BYTE *)v452 + v449) & *(_BYTE *)(v451 + v450);
                              v68 = *v63;
                              v457 = *(_QWORD **)(*v63 + 24);
                              v458 = v457[3];
                              v450 += v458;
                              v95 = (int **)*v64;
                              v459 = *(int **)(*v64 + 24);
                              v460 = *((_QWORD *)v459 + 3);
                              v449 += v460;
                              ++v456;
                              v69 = *(int **)*v63;
                              v461 = v69[3];
                            }
                            while (v456 < v461);
                            v96 = *v95;
                            v448 += v456;
                          }
                          else
                          {
                            v461 = 0;
                            v457 = *(_QWORD **)(v68 + 24);
                            v458 = v457[3];
                            v459 = v95[3];
                            v460 = *((_QWORD *)v459 + 3);
                          }
                          v462 = v457[2];
                          v450 = v462 + v450 - v461 * v458;
                          v449 = *((_QWORD *)v459 + 2) + v449 - v460 * v96[3];
                          ++v455;
                          v463 = v69[2];
                        }
                        while (v455 < v463);
                      }
                      else
                      {
                        v463 = 0;
                        v457 = *(_QWORD **)(v68 + 24);
                        v462 = v457[2];
                      }
                      v450 = v457[1] + v450 - v463 * v462;
                      v449 = *((_QWORD *)v95[3] + 1) + v449 - *((_QWORD *)v95[3] + 2) * v96[2];
                      ++v454;
                      v464 = v69[1];
                    }
                    while (v454 < v464);
                    v446 = *v69;
                  }
                  else
                  {
                    v464 = 0;
                  }
                  v450 = **(_QWORD **)(v68 + 24) + v450 - *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8) * v464;
                  v449 = *(_QWORD *)v95[3] + v449 - *((_QWORD *)v95[3] + 1) * v96[1];
                  ++v447;
                }
                while (v447 < v446);
              }
              break;
            default:
              if (v67[6])
              {
                v398 = 0;
                v1711 = *(_QWORD *)(v68 + 152);
                v399 = v95[19];
                v400 = v67[19];
                do
                {
                  v401 = *(_QWORD *)*v63;
                  v402 = (unint64_t)(*(_QWORD *)(*v63 + 8) - v401) >> 2;
                  v403 = 0;
                  v404 = (v402 - 1);
                  if ((int)v402 - 1 >= 0)
                  {
                    v405 = *(_QWORD *)(*v63 + 24);
                    v406 = v398;
                    do
                    {
                      v407 = ldiv(v406, *(int *)(v401 + 4 * v404));
                      v406 = v407.quot;
                      v403 += *(_QWORD *)(v405 + 8 * v404--) * v407.rem;
                    }
                    while (v404 != -1);
                  }
                  v408 = *(_QWORD *)*v64;
                  v409 = (unint64_t)(*(_QWORD *)(*v64 + 8) - v408) >> 2;
                  v410 = 0;
                  v411 = (v409 - 1);
                  if ((int)v409 - 1 >= 0)
                  {
                    v412 = *(_QWORD *)(*v64 + 24);
                    v413 = v398;
                    do
                    {
                      v414 = ldiv(v413, *(int *)(v408 + 4 * v411));
                      v413 = v414.quot;
                      v410 += *(_QWORD *)(v412 + 8 * v411--) * v414.rem;
                    }
                    while (v411 != -1);
                  }
                  *(_BYTE *)(v400 + v398++) = *((_BYTE *)v399 + (int)v410) & *(_BYTE *)(v1711 + (int)v403);
                }
                while (v398 < *(_QWORD *)(*(_QWORD *)v1721 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 1:
      goto LABEL_57;
    case 2:
      v9 = *(uint64_t **)a1;
      v8 = *(uint64_t **)(a1 + 8);
      switch(v10)
      {
        case 0:
          goto LABEL_18;
        case 1:
          v11 = *(_DWORD *)(*v8 + 160);
          if (v11 >= 1)
          {
            v12 = **(_DWORD **)(*v9 + 152);
            v13 = *(int **)(*(_QWORD *)v1 + 152);
            v14 = *(int **)(*v8 + 152);
            v15 = v11 + 1;
            do
            {
              v16 = *v14++;
              *v13++ = v16 & v12;
              --v15;
            }
            while (v15 > 1);
          }
          return;
        case 2:
          v126 = *(_DWORD *)(*v9 + 160);
          if (v126 >= 1)
          {
            v127 = **(_DWORD **)(*v8 + 152);
            v128 = *(int **)(*(_QWORD *)v1 + 152);
            v129 = *(int **)(*v9 + 152);
            v130 = v126 + 1;
            do
            {
              v131 = *v129++;
              *v128++ = v131 & v127;
              --v130;
            }
            while (v130 > 1);
          }
          return;
        case 3:
          v132 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v132 >= 1)
          {
            v133 = *(int **)(*(_QWORD *)v1 + 152);
            v134 = *(int **)(*v8 + 152);
            v135 = *(int **)(*v9 + 152);
            v136 = v132 + 1;
            do
            {
              v138 = *v135++;
              v137 = v138;
              v139 = *v134++;
              *v133++ = v139 & v137;
              --v136;
            }
            while (v136 > 1);
          }
          return;
        default:
          v117 = *(_QWORD **)v1;
          v118 = (_QWORD *)*v9;
          v119 = *(int **)*v9;
          v120 = (v118[1] - (_QWORD)v119) >> 2;
          v121 = (v120 - 1);
          if ((int)v121 >= -1)
            v122 = -1;
          else
            v122 = v120 - 1;
          v123 = v122 + 1;
          v124 = v120 + 1;
          break;
      }
      while (1)
      {
        v125 = v124 - 2;
        if (v124 - 2 < 0)
          break;
        --v124;
        if (*(_QWORD *)(v118[3] + 8 * v125) != *(_QWORD *)(v117[3] + 8 * v125))
          goto LABEL_211;
      }
      v124 = v123;
LABEL_211:
      v243 = (_QWORD *)*v8;
      v244 = *(int **)*v8;
      v245 = (v243[1] - (_QWORD)v244) >> 2;
      v246 = (v245 - 1);
      if ((int)v246 >= -1)
        v247 = -1;
      else
        v247 = v245 - 1;
      v248 = v247 + 1;
      v249 = v245 + 1;
      while (1)
      {
        v250 = v249 - 2;
        if (v249 - 2 < 0)
          break;
        --v249;
        if (*(_QWORD *)(v243[3] + 8 * v250) != *(_QWORD *)(v117[3] + 8 * v250))
          goto LABEL_247;
      }
      v249 = v248;
LABEL_247:
      v276 = v120 + 1;
      while (1)
      {
        v277 = v276 - 2;
        if (v276 - 2 < 0)
          break;
        --v276;
        if (*(_QWORD *)(v118[3] + 8 * v277))
          goto LABEL_272;
      }
      v276 = v123;
LABEL_272:
      v286 = v245 + 1;
      while (1)
      {
        v287 = v286 - 2;
        if (v286 - 2 < 0)
          break;
        --v286;
        if (*(_QWORD *)(v243[3] + 8 * v287))
          goto LABEL_321;
      }
      v286 = v248;
LABEL_321:
      v307 = (uint64_t)(v117[1] - *v117) >> 2;
      if (v124 <= v249)
        v308 = v249;
      else
        v308 = v124;
      if (v124 <= v286)
        v124 = v286;
      if (v276 > v249)
        v249 = v276;
      if (v307 > v249)
      {
        v309 = 1;
      }
      else
      {
        v249 = (uint64_t)(v117[1] - *v117) >> 2;
        v309 = 4;
      }
      if (v307 > v124)
      {
        v310 = 2;
      }
      else
      {
        v124 = v249;
        v310 = v309;
      }
      if (v307 > v308)
      {
        v124 = v308;
        v310 = 3;
      }
      v1708 = v246;
      v1723 = v121;
      if (!v124)
        goto LABEL_338;
      v311 = *(_QWORD *)(v117[3] + 8 * (v124 - 1));
      if (v311 < 0x10)
        goto LABEL_338;
      switch(v310)
      {
        case 1:
          if (v124 == 2)
          {
            v1336 = *v119;
            if (*v119)
            {
              v1337 = 0;
              v1338 = 0;
              v1339 = 0;
              v1340 = v118[19];
              v1341 = v243[19];
              v1342 = v117[19];
              v1343 = (uint64_t *)v118[3];
              v1344 = *v1343;
              v1345 = v1343[1];
              v1346 = (uint64_t *)v243[3];
              v1347 = *v1346;
              v1348 = v1346[1];
              v1349 = v119[1];
              v1350 = v1349;
              do
              {
                if (v1350)
                {
                  v1351 = 0;
                  v1352 = v1341 + 4 * v1338;
                  do
                  {
                    if ((int)v311 >= 1)
                    {
                      v1353 = 0;
                      v1354 = *(_DWORD *)(v1340 + 4 * v1339);
                      v1355 = v311 + 1;
                      do
                      {
                        *(_DWORD *)(v1342 + v1353) = *(_DWORD *)(v1352 + v1353) & v1354;
                        --v1355;
                        v1353 += 4;
                      }
                      while (v1355 > 1);
                      v1349 = v119[1];
                    }
                    v1339 += v1345;
                    v1338 += v1348;
                    v1342 += 4 * (int)v311;
                    ++v1351;
                    v1352 += 4 * v1348;
                  }
                  while (v1351 < v1349);
                  v1356 = v1349;
                  v1336 = *v119;
                  v1350 = v1349;
                }
                else
                {
                  v1356 = 0;
                }
                v1339 = v1339 + v1344 - v1356 * v1345;
                v1338 = v1338 + v1347 - v1348 * v244[1];
                ++v1337;
              }
              while (v1337 < v1336);
            }
          }
          else if (v124 == 1)
          {
            v906 = *v119;
            if (*v119)
            {
              v907 = 0;
              v908 = 0;
              v909 = v118[19];
              v910 = v243[19];
              v911 = v117[19];
              v912 = *(_QWORD *)v118[3];
              v913 = 4 * *(_QWORD *)v243[3];
              do
              {
                if ((int)v311 >= 1)
                {
                  v914 = 0;
                  v915 = *(_DWORD *)(v909 + 4 * v908);
                  v916 = v311 + 1;
                  do
                  {
                    *(_DWORD *)(v911 + v914) = *(_DWORD *)(v910 + v914) & v915;
                    --v916;
                    v914 += 4;
                  }
                  while (v916 > 1);
                  v906 = *v119;
                }
                v908 += v912;
                ++v907;
                v911 += 4 * (int)v311;
                v910 += v913;
              }
              while (v907 < v906);
            }
          }
          else
          {
            v1680 = v117[6];
            if (v1680)
            {
              v1699 = 0;
              v1622 = v243[19];
              v1634 = v118[19];
              v1357 = v117[19];
              do
              {
                v1358 = 0;
                if ((v121 & 0x80000000) == 0)
                {
                  v1359 = v118[3];
                  v1360 = v121;
                  v1361 = v1699;
                  do
                  {
                    v1362 = ldiv(v1361, v119[v1360]);
                    v1361 = v1362.quot;
                    v1358 += *(_QWORD *)(v1359 + 8 * v1360--) * v1362.rem;
                  }
                  while (v1360 != -1);
                }
                v1363 = v1708;
                if ((v1708 & 0x80000000) != 0)
                {
                  LODWORD(v1364) = 0;
                }
                else
                {
                  v1364 = 0;
                  v1365 = v243[3];
                  v1366 = v1699;
                  do
                  {
                    v1367 = ldiv(v1366, v244[v1363]);
                    v1366 = v1367.quot;
                    v1364 += *(_QWORD *)(v1365 + 8 * v1363--) * v1367.rem;
                  }
                  while (v1363 != -1);
                }
                v121 = v1723;
                if ((int)v311 >= 1)
                {
                  v1368 = 0;
                  v1369 = *(_DWORD *)(v1634 + 4 * (int)v1358);
                  v1370 = v311 + 1;
                  do
                  {
                    *(_DWORD *)(v1357 + v1368) = *(_DWORD *)(v1622 + 4 * (int)v1364 + v1368) & v1369;
                    --v1370;
                    v1368 += 4;
                  }
                  while (v1370 > 1);
                }
                v1357 += 4 * (int)v311;
                v1699 += (int)v311;
              }
              while (v1699 < v1680);
            }
          }
          break;
        case 2:
          if (v124 == 2)
          {
            v1371 = *v119;
            if (*v119)
            {
              v1372 = 0;
              v1373 = 0;
              v1374 = 0;
              v1375 = v118[19];
              v1376 = v243[19];
              v1377 = v117[19];
              v1378 = (uint64_t *)v118[3];
              v1379 = *v1378;
              v1380 = v1378[1];
              v1381 = (uint64_t *)v243[3];
              v1382 = *v1381;
              v1383 = v1381[1];
              v1384 = v119[1];
              v1385 = v1384;
              do
              {
                if (v1385)
                {
                  v1386 = 0;
                  v1387 = v1375 + 4 * v1374;
                  do
                  {
                    if ((int)v311 >= 1)
                    {
                      v1388 = 0;
                      v1389 = *(_DWORD *)(v1376 + 4 * v1373);
                      v1390 = v311 + 1;
                      do
                      {
                        *(_DWORD *)(v1377 + v1388) = *(_DWORD *)(v1387 + v1388) & v1389;
                        --v1390;
                        v1388 += 4;
                      }
                      while (v1390 > 1);
                      v1384 = v119[1];
                    }
                    v1374 += v1380;
                    v1373 += v1383;
                    v1377 += 4 * (int)v311;
                    ++v1386;
                    v1387 += 4 * v1380;
                  }
                  while (v1386 < v1384);
                  v1391 = v1384;
                  v1371 = *v119;
                  v1385 = v1384;
                }
                else
                {
                  v1391 = 0;
                }
                v1374 = v1374 + v1379 - v1391 * v1380;
                v1373 = v1373 + v1382 - v1383 * v244[1];
                ++v1372;
              }
              while (v1372 < v1371);
            }
          }
          else if (v124 == 1)
          {
            v917 = *v119;
            if (*v119)
            {
              v918 = 0;
              v919 = 0;
              v920 = v118[19];
              v921 = v243[19];
              v922 = v117[19];
              v923 = *(_QWORD *)v243[3];
              v924 = 4 * *(_QWORD *)v118[3];
              do
              {
                if ((int)v311 >= 1)
                {
                  v925 = 0;
                  v926 = *(_DWORD *)(v921 + 4 * v919);
                  v927 = v311 + 1;
                  do
                  {
                    *(_DWORD *)(v922 + v925) = *(_DWORD *)(v920 + v925) & v926;
                    --v927;
                    v925 += 4;
                  }
                  while (v927 > 1);
                  v917 = *v119;
                }
                v919 += v923;
                ++v918;
                v922 += 4 * (int)v311;
                v920 += v924;
              }
              while (v918 < v917);
            }
          }
          else
          {
            v1681 = v117[6];
            if (v1681)
            {
              v1700 = 0;
              v1623 = v243[19];
              v1635 = v118[19];
              v1392 = v117[19];
              do
              {
                v1393 = 0;
                if ((v121 & 0x80000000) == 0)
                {
                  v1394 = v118[3];
                  v1395 = v121;
                  v1396 = v1700;
                  do
                  {
                    v1397 = ldiv(v1396, v119[v1395]);
                    v1396 = v1397.quot;
                    v1393 += *(_QWORD *)(v1394 + 8 * v1395--) * v1397.rem;
                  }
                  while (v1395 != -1);
                }
                v1398 = v1708;
                if ((v1708 & 0x80000000) != 0)
                {
                  LODWORD(v1399) = 0;
                }
                else
                {
                  v1399 = 0;
                  v1400 = v243[3];
                  v1401 = v1700;
                  do
                  {
                    v1402 = ldiv(v1401, v244[v1398]);
                    v1401 = v1402.quot;
                    v1399 += *(_QWORD *)(v1400 + 8 * v1398--) * v1402.rem;
                  }
                  while (v1398 != -1);
                }
                v121 = v1723;
                if ((int)v311 >= 1)
                {
                  v1403 = 0;
                  v1404 = *(_DWORD *)(v1623 + 4 * (int)v1399);
                  v1405 = v311 + 1;
                  do
                  {
                    *(_DWORD *)(v1392 + v1403) = *(_DWORD *)(v1635 + 4 * (int)v1393 + v1403) & v1404;
                    --v1405;
                    v1403 += 4;
                  }
                  while (v1405 > 1);
                }
                v1392 += 4 * (int)v311;
                v1700 += (int)v311;
              }
              while (v1700 < v1681);
            }
          }
          break;
        case 3:
          if (v124 == 2)
          {
            v1125 = *v119;
            if (*v119)
            {
              v1126 = 0;
              v1127 = 0;
              v1128 = 0;
              v1129 = v118[19];
              v1130 = v243[19];
              v1131 = v117[19];
              v1132 = (uint64_t *)v118[3];
              v1133 = *v1132;
              v1134 = v1132[1];
              v1135 = (uint64_t *)v243[3];
              v1136 = *v1135;
              v1137 = v1135[1];
              v1138 = v119[1];
              v1139 = v1138;
              do
              {
                if (v1139)
                {
                  v1140 = 0;
                  v1141 = v1130 + 4 * v1127;
                  v1142 = v1129 + 4 * v1128;
                  do
                  {
                    if ((int)v311 >= 1)
                    {
                      v1143 = 0;
                      v1144 = v311 + 1;
                      do
                      {
                        *(_DWORD *)(v1131 + v1143) = *(_DWORD *)(v1141 + v1143) & *(_DWORD *)(v1142 + v1143);
                        --v1144;
                        v1143 += 4;
                      }
                      while (v1144 > 1);
                      v1138 = v119[1];
                    }
                    v1128 += v1134;
                    v1127 += v1137;
                    v1131 += 4 * (int)v311;
                    ++v1140;
                    v1141 += 4 * v1137;
                    v1142 += 4 * v1134;
                  }
                  while (v1140 < v1138);
                  v1145 = v1138;
                  v1125 = *v119;
                  v1139 = v1138;
                }
                else
                {
                  v1145 = 0;
                }
                v1128 = v1128 + v1133 - v1145 * v1134;
                v1127 = v1127 + v1136 - v1137 * v244[1];
                ++v1126;
              }
              while (v1126 < v1125);
            }
          }
          else if (v124 == 1)
          {
            v362 = *v119;
            if (*v119)
            {
              v363 = 0;
              v364 = v118[19];
              v365 = v243[19];
              v366 = v117[19];
              v367 = 4 * *(_QWORD *)v243[3];
              v368 = 4 * *(_QWORD *)v118[3];
              do
              {
                if ((int)v311 >= 1)
                {
                  v369 = 0;
                  v370 = v311 + 1;
                  do
                  {
                    *(_DWORD *)(v366 + v369) = *(_DWORD *)(v365 + v369) & *(_DWORD *)(v364 + v369);
                    --v370;
                    v369 += 4;
                  }
                  while (v370 > 1);
                  v362 = *v119;
                }
                ++v363;
                v366 += 4 * (int)v311;
                v365 += v367;
                v364 += v368;
              }
              while (v363 < v362);
            }
          }
          else
          {
            v1674 = v117[6];
            if (v1674)
            {
              v1695 = 0;
              v1617 = v243[19];
              v1629 = v118[19];
              v1146 = v117[19];
              do
              {
                v1147 = 0;
                if ((v121 & 0x80000000) == 0)
                {
                  v1148 = v118[3];
                  v1149 = v121;
                  v1150 = v1695;
                  do
                  {
                    v1151 = ldiv(v1150, v119[v1149]);
                    v1150 = v1151.quot;
                    v1147 += *(_QWORD *)(v1148 + 8 * v1149--) * v1151.rem;
                  }
                  while (v1149 != -1);
                }
                v1152 = v1708;
                if ((v1708 & 0x80000000) != 0)
                {
                  LODWORD(v1153) = 0;
                }
                else
                {
                  v1153 = 0;
                  v1154 = v243[3];
                  v1155 = v1695;
                  do
                  {
                    v1156 = ldiv(v1155, v244[v1152]);
                    v1155 = v1156.quot;
                    v1153 += *(_QWORD *)(v1154 + 8 * v1152--) * v1156.rem;
                  }
                  while (v1152 != -1);
                }
                v121 = v1723;
                if ((int)v311 >= 1)
                {
                  v1157 = 0;
                  v1158 = v311 + 1;
                  do
                  {
                    *(_DWORD *)(v1146 + v1157) = *(_DWORD *)(v1617 + 4 * (int)v1153 + v1157) & *(_DWORD *)(v1629 + 4 * (int)v1147 + v1157);
                    --v1158;
                    v1157 += 4;
                  }
                  while (v1158 > 1);
                }
                v1146 += 4 * (int)v311;
                v1695 += (int)v311;
              }
              while (v1695 < v1674);
            }
          }
          break;
        default:
LABEL_338:
          switch(v307)
          {
            case 1uLL:
              v312 = v117[6];
              if (v312)
              {
                v313 = (_DWORD *)v118[19];
                v314 = (_DWORD *)v243[19];
                v315 = (int *)v117[19];
                v316 = 4 * *(_QWORD *)v243[3];
                v317 = 4 * *(_QWORD *)v118[3];
                do
                {
                  *v315++ = *v314 & *v313;
                  v314 = (_DWORD *)((char *)v314 + v316);
                  v313 = (_DWORD *)((char *)v313 + v317);
                  --v312;
                }
                while (v312);
              }
              break;
            case 2uLL:
              v584 = *v119;
              if (*v119)
              {
                v585 = 0;
                v586 = 0;
                v587 = 0;
                v588 = 0;
                v589 = v118[19];
                v590 = v243[19];
                v591 = v117[19];
                v592 = (uint64_t *)v118[3];
                v593 = *v592;
                v594 = v592[1];
                v595 = (uint64_t *)v243[3];
                v597 = *v595;
                v596 = v595[1];
                v598 = v119[1];
                do
                {
                  if (v598)
                  {
                    for (j = 0; j < v598; ++j)
                    {
                      *(_DWORD *)(v591 + 4 * v586 + 4 * j) = *(_DWORD *)(v590 + 4 * v587) & *(_DWORD *)(v589 + 4 * v588);
                      v588 += v594;
                      v587 += v596;
                      v598 = v119[1];
                    }
                    v600 = v598;
                    v584 = *v119;
                    v586 += j;
                  }
                  else
                  {
                    v600 = 0;
                  }
                  v588 = v588 + v593 - v600 * v594;
                  v587 = v587 + v597 - v596 * v244[1];
                  ++v585;
                }
                while (v585 < v584);
              }
              break;
            case 3uLL:
              v601 = *v119;
              if (*v119)
              {
                v602 = 0;
                v603 = 0;
                v604 = 0;
                v605 = 0;
                v606 = v118[19];
                v607 = v243[19];
                v608 = v117[19];
                v609 = (uint64_t *)v118[3];
                v610 = *v609;
                v611 = v609[1];
                v612 = (uint64_t *)v243[3];
                v613 = *v612;
                v614 = v612[1];
                v615 = v119[1];
                v616 = v615;
                do
                {
                  if (v616)
                  {
                    v617 = 0;
                    v618 = v609[2];
                    v619 = v612[2];
                    v620 = v119[2];
                    do
                    {
                      if (v620)
                      {
                        for (k = 0; k < v620; ++k)
                        {
                          *(_DWORD *)(v608 + 4 * v603 + 4 * k) = *(_DWORD *)(v607 + 4 * v604) & *(_DWORD *)(v606 + 4 * v605);
                          v605 += v618;
                          v604 += v619;
                          v620 = v119[2];
                        }
                        v622 = v620;
                        v615 = v119[1];
                        v603 += k;
                      }
                      else
                      {
                        v622 = 0;
                      }
                      v605 = v605 + v611 - v622 * v618;
                      v604 = v604 + v614 - v619 * v244[2];
                      ++v617;
                    }
                    while (v617 < v615);
                    v623 = v615;
                    v601 = *v119;
                    v616 = v615;
                  }
                  else
                  {
                    v623 = 0;
                  }
                  v605 = v605 + v610 - v623 * v611;
                  v604 = v604 + v613 - v614 * v244[1];
                  ++v602;
                }
                while (v602 < v601);
              }
              break;
            case 4uLL:
              v624 = *v119;
              if (*v119)
              {
                v625 = 0;
                v626 = 0;
                v627 = 0;
                v628 = 0;
                v629 = v118[19];
                v630 = v243[19];
                v631 = v117[19];
                v632 = (uint64_t *)v118[3];
                v633 = *v632;
                v634 = v632[1];
                v635 = (uint64_t *)v243[3];
                v636 = *v635;
                v637 = v635[1];
                v638 = v119[1];
                v639 = v638;
                do
                {
                  if (v639)
                  {
                    v640 = 0;
                    v641 = v632[2];
                    v642 = v635[2];
                    v643 = v119[2];
                    v644 = v643;
                    do
                    {
                      if (v644)
                      {
                        v645 = 0;
                        v646 = v632[3];
                        v647 = v635[3];
                        v648 = v119[3];
                        do
                        {
                          if (v648)
                          {
                            for (m = 0; m < v648; ++m)
                            {
                              *(_DWORD *)(v631 + 4 * v626 + 4 * m) = *(_DWORD *)(v630 + 4 * v627) & *(_DWORD *)(v629 + 4 * v628);
                              v628 += v646;
                              v627 += v647;
                              v648 = v119[3];
                            }
                            v650 = v648;
                            v643 = v119[2];
                            v626 += m;
                          }
                          else
                          {
                            v650 = 0;
                          }
                          v628 = v628 + v641 - v650 * v646;
                          v627 = v627 + v642 - v647 * v244[3];
                          ++v645;
                        }
                        while (v645 < v643);
                        v651 = v643;
                        v638 = v119[1];
                        v644 = v643;
                      }
                      else
                      {
                        v651 = 0;
                      }
                      v628 = v628 + v634 - v651 * v641;
                      v627 = v627 + v637 - v642 * v244[2];
                      ++v640;
                    }
                    while (v640 < v638);
                    v652 = v638;
                    v624 = *v119;
                    v639 = v638;
                  }
                  else
                  {
                    v652 = 0;
                  }
                  v628 = v628 + v633 - v652 * v634;
                  v627 = v627 + v636 - v637 * v244[1];
                  ++v625;
                }
                while (v625 < v624);
              }
              break;
            default:
              v572 = v117[6];
              if (v572)
              {
                v573 = 0;
                v1666 = v243[19];
                v1691 = v118[19];
                v1651 = v117[19];
                do
                {
                  v574 = 0;
                  if ((v121 & 0x80000000) == 0)
                  {
                    v575 = v118[3];
                    v576 = v121;
                    v577 = v573;
                    do
                    {
                      v578 = ldiv(v577, v119[v576]);
                      v577 = v578.quot;
                      v574 += *(_QWORD *)(v575 + 8 * v576--) * v578.rem;
                    }
                    while (v576 != -1);
                  }
                  v579 = v1708;
                  if ((v1708 & 0x80000000) != 0)
                  {
                    LODWORD(v580) = 0;
                  }
                  else
                  {
                    v580 = 0;
                    v581 = v243[3];
                    v582 = v573;
                    do
                    {
                      v583 = ldiv(v582, v244[v579]);
                      v582 = v583.quot;
                      v580 += *(_QWORD *)(v581 + 8 * v579--) * v583.rem;
                    }
                    while (v579 != -1);
                  }
                  *(_DWORD *)(v1651 + 4 * v573++) = *(_DWORD *)(v1666 + 4 * (int)v580) & *(_DWORD *)(v1691 + 4 * (int)v574);
                  v121 = v1723;
                }
                while (v573 != v572);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      v17 = *(uint64_t **)a1;
      v18 = *(uint64_t **)(a1 + 8);
      switch(v19)
      {
        case 0:
          v20 = **(_BYTE **)(*v18 + 152) & **(_BYTE **)(*v17 + 152);
          v21 = *(_QWORD *)v1;
LABEL_59:
          **(_BYTE **)(v21 + 152) = v20;
          return;
        case 1:
          v148 = *(_DWORD *)(*v18 + 160);
          if (v148 >= 1)
          {
            v149 = **(_BYTE **)(*v17 + 152);
            v150 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v151 = *(char **)(*v18 + 152);
            v152 = v148 + 1;
            do
            {
              v153 = *v151++;
              *v150++ = v153 & v149;
              --v152;
            }
            while (v152 > 1);
          }
          return;
        case 2:
          v154 = *(_DWORD *)(*v17 + 160);
          if (v154 >= 1)
          {
            v155 = **(_BYTE **)(*v18 + 152);
            v156 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v157 = *(char **)(*v17 + 152);
            v158 = v154 + 1;
            do
            {
              v159 = *v157++;
              *v156++ = v159 & v155;
              --v158;
            }
            while (v158 > 1);
          }
          return;
        case 3:
          v160 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v160 >= 1)
          {
            v161 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v162 = *(char **)(*v18 + 152);
            v163 = *(char **)(*v17 + 152);
            v164 = v160 + 1;
            do
            {
              v166 = *v163++;
              v165 = v166;
              v167 = *v162++;
              *v161++ = v167 & v165;
              --v164;
            }
            while (v164 > 1);
          }
          return;
        default:
          v140 = *(_QWORD **)v1;
          v141 = *v17;
          v142 = *(int **)*v17;
          v143 = (*(_QWORD *)(*v17 + 8) - (_QWORD)v142) >> 2;
          v144 = v143 - 1;
          if ((int)v143 - 1 >= -1)
            v144 = -1;
          v145 = v144 + 1;
          v146 = v143 + 1;
          break;
      }
      while (1)
      {
        v147 = v146 - 2;
        if (v146 - 2 < 0)
          break;
        --v146;
        if (*(_QWORD *)(*(_QWORD *)(v141 + 24) + 8 * v147) != *(_QWORD *)(v140[3] + 8 * v147))
          goto LABEL_219;
      }
      v146 = v145;
LABEL_219:
      v251 = (int **)*v18;
      v252 = *(int **)*v18;
      v253 = (*(_QWORD *)(*v18 + 8) - (_QWORD)v252) >> 2;
      v254 = v253 - 1;
      if ((int)v253 - 1 >= -1)
        v254 = -1;
      v255 = v254 + 1;
      v256 = v253 + 1;
      while (1)
      {
        v257 = v256 - 2;
        if (v256 - 2 < 0)
          break;
        --v256;
        if (*(_QWORD *)&v251[3][2 * v257] != *(_QWORD *)(v140[3] + 8 * v257))
          goto LABEL_252;
      }
      v256 = v255;
LABEL_252:
      v278 = v143 + 1;
      while (1)
      {
        v279 = v278 - 2;
        if (v278 - 2 < 0)
          break;
        --v278;
        if (*(_QWORD *)(*(_QWORD *)(v141 + 24) + 8 * v279))
          goto LABEL_277;
      }
      v278 = v145;
LABEL_277:
      v288 = v253 + 1;
      while (1)
      {
        v289 = v288 - 2;
        if (v288 - 2 < 0)
          break;
        --v288;
        if (*(_QWORD *)&v251[3][2 * v289])
          goto LABEL_344;
      }
      v288 = v255;
LABEL_344:
      v318 = (uint64_t)(v140[1] - *v140) >> 2;
      if (v146 <= v256)
        v319 = v256;
      else
        v319 = v146;
      if (v146 <= v288)
        v146 = v288;
      if (v278 > v256)
        v256 = v278;
      if (v318 > v256)
      {
        v320 = 1;
      }
      else
      {
        v256 = (uint64_t)(v140[1] - *v140) >> 2;
        v320 = 4;
      }
      if (v318 > v146)
      {
        v321 = 2;
      }
      else
      {
        v146 = v256;
        v321 = v320;
      }
      if (v318 > v319)
      {
        v146 = v319;
        v321 = 3;
      }
      if (!v146)
        goto LABEL_361;
      v322 = *(_QWORD *)(v140[3] + 8 * (v146 - 1));
      if (v322 < 0x10)
        goto LABEL_361;
      v1726 = *(_QWORD *)(v140[3] + 8 * (v146 - 1));
      switch(v321)
      {
        case 1:
          if (v146 == 2)
          {
            v1406 = *v142;
            if (*v142)
            {
              v1407 = 0;
              v1408 = 0;
              v1409 = 0;
              v1410 = *(_QWORD *)(v141 + 152);
              v1411 = v251[19];
              v1412 = v140[19];
              do
              {
                if (v142[1])
                {
                  v1413 = 0;
                  do
                  {
                    if ((int)v322 >= 1)
                    {
                      v1414 = 0;
                      v1415 = *(_BYTE *)(v1410 + v1409);
                      v1416 = v322 + 1;
                      do
                      {
                        *(_BYTE *)(v1412 + v1414) = *((_BYTE *)v1411 + v1408 + v1414) & v1415;
                        --v1416;
                        ++v1414;
                      }
                      while (v1416 > 1);
                      v141 = *v17;
                      v251 = (int **)*v18;
                      v142 = *(int **)*v17;
                    }
                    v1417 = *(_QWORD **)(v141 + 24);
                    v1418 = v1417[1];
                    v1409 += v1418;
                    v1408 += *((_QWORD *)v251[3] + 1);
                    v1412 += (int)v322;
                    ++v1413;
                    v1419 = v142[1];
                  }
                  while (v1413 < v1419);
                  v1406 = *v142;
                  v252 = *v251;
                }
                else
                {
                  v1419 = 0;
                  v1417 = *(_QWORD **)(v141 + 24);
                  v1418 = v1417[1];
                }
                v1409 = *v1417 + v1409 - v1419 * v1418;
                v1408 = *(_QWORD *)v251[3] + v1408 - *((_QWORD *)v251[3] + 1) * v252[1];
                ++v1407;
              }
              while (v1407 < v1406);
            }
          }
          else if (v146 == 1)
          {
            v928 = *v142;
            if (*v142)
            {
              v929 = 0;
              v930 = 0;
              v931 = 0;
              v932 = *(_QWORD *)(v141 + 152);
              v933 = v251[19];
              v934 = v140[19];
              do
              {
                if ((int)v322 >= 1)
                {
                  v935 = 0;
                  v936 = *(_BYTE *)(v932 + v931);
                  v937 = v322 + 1;
                  do
                  {
                    *(_BYTE *)(v934 + v935) = *((_BYTE *)v933 + v930 + v935) & v936;
                    --v937;
                    ++v935;
                  }
                  while (v937 > 1);
                  v141 = *v17;
                  v251 = (int **)*v18;
                  v928 = **(_DWORD **)*v17;
                }
                v931 += **(_QWORD **)(v141 + 24);
                v930 += *(_QWORD *)v251[3];
                v934 += (int)v322;
                ++v929;
              }
              while (v929 < v928);
            }
          }
          else if (v140[6])
          {
            v1662 = v251[19];
            v1682 = *(_QWORD *)(v141 + 152);
            v1701 = (int)v322;
            v1719 = 0;
            v1647 = v322 + 1;
            v1420 = v140[19];
            do
            {
              v1421 = *(_QWORD *)*v17;
              v1422 = (unint64_t)(*(_QWORD *)(*v17 + 8) - v1421) >> 2;
              v1423 = 0;
              v1424 = (v1422 - 1);
              if ((int)v1422 - 1 >= 0)
              {
                v1425 = *(_QWORD *)(*v17 + 24);
                v1426 = v1719;
                do
                {
                  v1427 = ldiv(v1426, *(int *)(v1421 + 4 * v1424));
                  v1426 = v1427.quot;
                  v1423 += *(_QWORD *)(v1425 + 8 * v1424--) * v1427.rem;
                }
                while (v1424 != -1);
              }
              v1428 = *(_QWORD *)*v18;
              v1429 = (unint64_t)(*(_QWORD *)(*v18 + 8) - v1428) >> 2;
              v1430 = 0;
              v1431 = (v1429 - 1);
              if ((int)v1429 - 1 >= 0)
              {
                v1432 = *(_QWORD *)(*v18 + 24);
                v1433 = v1719;
                do
                {
                  v1434 = ldiv(v1433, *(int *)(v1428 + 4 * v1431));
                  v1433 = v1434.quot;
                  v1430 += *(_QWORD *)(v1432 + 8 * v1431--) * v1434.rem;
                }
                while (v1431 != -1);
              }
              if ((int)v1726 >= 1)
              {
                v1435 = 0;
                v1436 = *(_BYTE *)(v1682 + (int)v1423);
                v1437 = v1647;
                do
                {
                  *(_BYTE *)(v1420 + v1435) = *((_BYTE *)v1662 + (int)v1430 + v1435) & v1436;
                  --v1437;
                  ++v1435;
                }
                while (v1437 > 1);
                v140 = *(_QWORD **)v1;
              }
              v1420 += v1701;
              v1719 += v1701;
            }
            while (v1719 < v140[6]);
          }
          break;
        case 2:
          if (v146 == 2)
          {
            v1438 = *v142;
            if (*v142)
            {
              v1439 = 0;
              v1440 = 0;
              v1441 = 0;
              v1442 = *(_QWORD *)(v141 + 152);
              v1443 = v251[19];
              v1444 = v140[19];
              do
              {
                if (v142[1])
                {
                  v1445 = 0;
                  do
                  {
                    if ((int)v322 >= 1)
                    {
                      v1446 = 0;
                      v1447 = *((_BYTE *)v1443 + v1440);
                      v1448 = v322 + 1;
                      do
                      {
                        *(_BYTE *)(v1444 + v1446) = *(_BYTE *)(v1442 + v1441 + v1446) & v1447;
                        --v1448;
                        ++v1446;
                      }
                      while (v1448 > 1);
                      v141 = *v17;
                      v251 = (int **)*v18;
                      v142 = *(int **)*v17;
                    }
                    v1449 = *(_QWORD **)(v141 + 24);
                    v1450 = v1449[1];
                    v1441 += v1450;
                    v1440 += *((_QWORD *)v251[3] + 1);
                    v1444 += (int)v322;
                    ++v1445;
                    v1451 = v142[1];
                  }
                  while (v1445 < v1451);
                  v1438 = *v142;
                  v252 = *v251;
                }
                else
                {
                  v1451 = 0;
                  v1449 = *(_QWORD **)(v141 + 24);
                  v1450 = v1449[1];
                }
                v1441 = *v1449 + v1441 - v1451 * v1450;
                v1440 = *(_QWORD *)v251[3] + v1440 - *((_QWORD *)v251[3] + 1) * v252[1];
                ++v1439;
              }
              while (v1439 < v1438);
            }
          }
          else if (v146 == 1)
          {
            v938 = *v142;
            if (*v142)
            {
              v939 = 0;
              v940 = 0;
              v941 = 0;
              v942 = *(_QWORD *)(v141 + 152);
              v943 = v251[19];
              v944 = v140[19];
              do
              {
                if ((int)v322 >= 1)
                {
                  v945 = 0;
                  v946 = *((_BYTE *)v943 + v940);
                  v947 = v322 + 1;
                  do
                  {
                    *(_BYTE *)(v944 + v945) = *(_BYTE *)(v942 + v941 + v945) & v946;
                    --v947;
                    ++v945;
                  }
                  while (v947 > 1);
                  v141 = *v17;
                  v251 = (int **)*v18;
                  v938 = **(_DWORD **)*v17;
                }
                v941 += **(_QWORD **)(v141 + 24);
                v940 += *(_QWORD *)v251[3];
                v944 += (int)v322;
                ++v939;
              }
              while (v939 < v938);
            }
          }
          else if (v140[6])
          {
            v1663 = v251[19];
            v1683 = *(_QWORD *)(v141 + 152);
            v1702 = (int)v322;
            v1720 = 0;
            v1648 = v322 + 1;
            v1452 = v140[19];
            do
            {
              v1453 = *(_QWORD *)*v17;
              v1454 = (unint64_t)(*(_QWORD *)(*v17 + 8) - v1453) >> 2;
              v1455 = 0;
              v1456 = (v1454 - 1);
              if ((int)v1454 - 1 >= 0)
              {
                v1457 = *(_QWORD *)(*v17 + 24);
                v1458 = v1720;
                do
                {
                  v1459 = ldiv(v1458, *(int *)(v1453 + 4 * v1456));
                  v1458 = v1459.quot;
                  v1455 += *(_QWORD *)(v1457 + 8 * v1456--) * v1459.rem;
                }
                while (v1456 != -1);
              }
              v1460 = *(_QWORD *)*v18;
              v1461 = (unint64_t)(*(_QWORD *)(*v18 + 8) - v1460) >> 2;
              v1462 = 0;
              v1463 = (v1461 - 1);
              if ((int)v1461 - 1 >= 0)
              {
                v1464 = *(_QWORD *)(*v18 + 24);
                v1465 = v1720;
                do
                {
                  v1466 = ldiv(v1465, *(int *)(v1460 + 4 * v1463));
                  v1465 = v1466.quot;
                  v1462 += *(_QWORD *)(v1464 + 8 * v1463--) * v1466.rem;
                }
                while (v1463 != -1);
              }
              if ((int)v1726 >= 1)
              {
                v1467 = 0;
                v1468 = *((_BYTE *)v1663 + (int)v1462);
                v1469 = v1648;
                do
                {
                  *(_BYTE *)(v1452 + v1467) = *(_BYTE *)(v1683 + (int)v1455 + v1467) & v1468;
                  --v1469;
                  ++v1467;
                }
                while (v1469 > 1);
                v140 = *(_QWORD **)v1;
              }
              v1452 += v1702;
              v1720 += v1702;
            }
            while (v1720 < v140[6]);
          }
          break;
        case 3:
          if (v146 == 2)
          {
            v1159 = *v142;
            if (*v142)
            {
              v1160 = 0;
              v1161 = 0;
              v1162 = 0;
              v1163 = *(_QWORD *)(v141 + 152);
              v1164 = v251[19];
              v1165 = v140[19];
              do
              {
                if (v142[1])
                {
                  v1166 = 0;
                  do
                  {
                    if ((int)v322 >= 1)
                    {
                      v1167 = 0;
                      v1168 = v322 + 1;
                      do
                      {
                        *(_BYTE *)(v1165 + v1167) = *((_BYTE *)v1164 + v1161 + v1167) & *(_BYTE *)(v1163 + v1162 + v1167);
                        --v1168;
                        ++v1167;
                      }
                      while (v1168 > 1);
                      v141 = *v17;
                      v251 = (int **)*v18;
                      v142 = *(int **)*v17;
                    }
                    v1169 = *(_QWORD **)(v141 + 24);
                    v1170 = v1169[1];
                    v1162 += v1170;
                    v1161 += *((_QWORD *)v251[3] + 1);
                    v1165 += (int)v322;
                    ++v1166;
                    v1171 = v142[1];
                  }
                  while (v1166 < v1171);
                  v1159 = *v142;
                  v252 = *v251;
                }
                else
                {
                  v1171 = 0;
                  v1169 = *(_QWORD **)(v141 + 24);
                  v1170 = v1169[1];
                }
                v1162 = *v1169 + v1162 - v1171 * v1170;
                v1161 = *(_QWORD *)v251[3] + v1161 - *((_QWORD *)v251[3] + 1) * v252[1];
                ++v1160;
              }
              while (v1160 < v1159);
            }
          }
          else if (v146 == 1)
          {
            v371 = *v142;
            if (*v142)
            {
              v372 = 0;
              v373 = 0;
              v374 = 0;
              v375 = *(_QWORD *)(v141 + 152);
              v376 = v251[19];
              v377 = v140[19];
              do
              {
                if ((int)v322 >= 1)
                {
                  v378 = 0;
                  v379 = v322 + 1;
                  do
                  {
                    *(_BYTE *)(v377 + v378) = *((_BYTE *)v376 + v373 + v378) & *(_BYTE *)(v375 + v374 + v378);
                    --v379;
                    ++v378;
                  }
                  while (v379 > 1);
                  v141 = *v17;
                  v251 = (int **)*v18;
                  v371 = **(_DWORD **)*v17;
                }
                v374 += **(_QWORD **)(v141 + 24);
                v373 += *(_QWORD *)v251[3];
                v377 += (int)v322;
                ++v372;
              }
              while (v372 < v371);
            }
          }
          else if (v140[6])
          {
            v1659 = v251[19];
            v1675 = *(_QWORD *)(v141 + 152);
            v1696 = (int)v322;
            v1718 = 0;
            v1644 = v322 + 1;
            v1172 = v140[19];
            do
            {
              v1173 = *(_QWORD *)*v17;
              v1174 = (unint64_t)(*(_QWORD *)(*v17 + 8) - v1173) >> 2;
              v1175 = 0;
              v1176 = (v1174 - 1);
              if ((int)v1174 - 1 >= 0)
              {
                v1177 = *(_QWORD *)(*v17 + 24);
                v1178 = v1718;
                do
                {
                  v1179 = ldiv(v1178, *(int *)(v1173 + 4 * v1176));
                  v1178 = v1179.quot;
                  v1175 += *(_QWORD *)(v1177 + 8 * v1176--) * v1179.rem;
                }
                while (v1176 != -1);
              }
              v1180 = *(_QWORD *)*v18;
              v1181 = (unint64_t)(*(_QWORD *)(*v18 + 8) - v1180) >> 2;
              v1182 = 0;
              v1183 = (v1181 - 1);
              if ((int)v1181 - 1 >= 0)
              {
                v1184 = *(_QWORD *)(*v18 + 24);
                v1185 = v1718;
                do
                {
                  v1186 = ldiv(v1185, *(int *)(v1180 + 4 * v1183));
                  v1185 = v1186.quot;
                  v1182 += *(_QWORD *)(v1184 + 8 * v1183--) * v1186.rem;
                }
                while (v1183 != -1);
              }
              if ((int)v1726 >= 1)
              {
                v1187 = 0;
                v1188 = v1644;
                do
                {
                  *(_BYTE *)(v1172 + v1187) = *((_BYTE *)v1659 + (int)v1182 + v1187) & *(_BYTE *)(v1675
                                                                                                + (int)v1175
                                                                                                + v1187);
                  --v1188;
                  ++v1187;
                }
                while (v1188 > 1);
                v140 = *(_QWORD **)v1;
              }
              v1172 += v1696;
              v1718 += v1696;
            }
            while (v1718 < v140[6]);
          }
          break;
        default:
LABEL_361:
          switch(v318)
          {
            case 1uLL:
              if (v140[6])
              {
                v323 = 0;
                v324 = 0;
                v325 = 0;
                v326 = *(_QWORD *)(v141 + 152);
                v327 = v251[19];
                v328 = v140[19];
                do
                {
                  *(_BYTE *)(v328 + v323) = *((_BYTE *)v327 + v324) & *(_BYTE *)(v326 + v325);
                  v325 += **(_QWORD **)(*v17 + 24);
                  v324 += **(_QWORD **)(*v18 + 24);
                  ++v323;
                }
                while (v323 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
            case 2uLL:
              v669 = *v142;
              if (*v142)
              {
                v670 = 0;
                v671 = 0;
                v672 = 0;
                v673 = 0;
                v674 = *(_QWORD *)(v141 + 152);
                v675 = v251[19];
                v676 = v140[19];
                do
                {
                  if (v142[1])
                  {
                    v677 = 0;
                    do
                    {
                      *(_BYTE *)(v676 + v671 + v677) = *((_BYTE *)v675 + v672) & *(_BYTE *)(v674 + v673);
                      v141 = *v17;
                      v678 = *(_QWORD **)(*v17 + 24);
                      v679 = v678[1];
                      v673 += v679;
                      v251 = (int **)*v18;
                      v680 = *(int **)(*v18 + 24);
                      v681 = *((_QWORD *)v680 + 1);
                      v672 += v681;
                      ++v677;
                      v142 = *(int **)*v17;
                      v682 = v142[1];
                    }
                    while (v677 < v682);
                    v669 = *v142;
                    v252 = *v251;
                    v671 += v677;
                  }
                  else
                  {
                    v682 = 0;
                    v678 = *(_QWORD **)(v141 + 24);
                    v679 = v678[1];
                    v680 = v251[3];
                    v681 = *((_QWORD *)v680 + 1);
                  }
                  v673 = *v678 + v673 - v682 * v679;
                  v672 = *(_QWORD *)v680 + v672 - v681 * v252[1];
                  ++v670;
                }
                while (v670 < v669);
              }
              break;
            case 3uLL:
              v683 = *v142;
              if (*v142)
              {
                v684 = 0;
                v685 = 0;
                v686 = 0;
                v687 = 0;
                v688 = *(_QWORD *)(v141 + 152);
                v689 = v251[19];
                v690 = v140[19];
                do
                {
                  if (v142[1])
                  {
                    v691 = 0;
                    do
                    {
                      if (v142[2])
                      {
                        v692 = 0;
                        do
                        {
                          *(_BYTE *)(v690 + v685 + v692) = *((_BYTE *)v689 + v686) & *(_BYTE *)(v688 + v687);
                          v141 = *v17;
                          v693 = *(_QWORD **)(*v17 + 24);
                          v694 = v693[2];
                          v687 += v694;
                          v251 = (int **)*v18;
                          v695 = *(int **)(*v18 + 24);
                          v696 = *((_QWORD *)v695 + 2);
                          v686 += v696;
                          ++v692;
                          v142 = *(int **)*v17;
                          v697 = v142[2];
                        }
                        while (v692 < v697);
                        v252 = *v251;
                        v685 += v692;
                      }
                      else
                      {
                        v697 = 0;
                        v693 = *(_QWORD **)(v141 + 24);
                        v694 = v693[2];
                        v695 = v251[3];
                        v696 = *((_QWORD *)v695 + 2);
                      }
                      v698 = v693[1];
                      v687 = v698 + v687 - v697 * v694;
                      v686 = *((_QWORD *)v695 + 1) + v686 - v696 * v252[2];
                      ++v691;
                      v699 = v142[1];
                    }
                    while (v691 < v699);
                    v683 = *v142;
                  }
                  else
                  {
                    v699 = 0;
                    v693 = *(_QWORD **)(v141 + 24);
                    v698 = v693[1];
                  }
                  v687 = *v693 + v687 - v699 * v698;
                  v686 = *(_QWORD *)v251[3] + v686 - *((_QWORD *)v251[3] + 1) * v252[1];
                  ++v684;
                }
                while (v684 < v683);
              }
              break;
            case 4uLL:
              v700 = *v142;
              if (*v142)
              {
                v701 = 0;
                v702 = 0;
                v703 = 0;
                v704 = 0;
                v705 = *(_QWORD *)(v141 + 152);
                v706 = v251[19];
                v707 = v140[19];
                do
                {
                  if (v142[1])
                  {
                    v708 = 0;
                    do
                    {
                      if (v142[2])
                      {
                        v709 = 0;
                        do
                        {
                          if (v142[3])
                          {
                            v710 = 0;
                            do
                            {
                              *(_BYTE *)(v707 + v702 + v710) = *((_BYTE *)v706 + v703) & *(_BYTE *)(v705 + v704);
                              v141 = *v17;
                              v711 = *(_QWORD **)(*v17 + 24);
                              v712 = v711[3];
                              v704 += v712;
                              v251 = (int **)*v18;
                              v713 = *(int **)(*v18 + 24);
                              v714 = *((_QWORD *)v713 + 3);
                              v703 += v714;
                              ++v710;
                              v142 = *(int **)*v17;
                              v715 = v142[3];
                            }
                            while (v710 < v715);
                            v252 = *v251;
                            v702 += v710;
                          }
                          else
                          {
                            v715 = 0;
                            v711 = *(_QWORD **)(v141 + 24);
                            v712 = v711[3];
                            v713 = v251[3];
                            v714 = *((_QWORD *)v713 + 3);
                          }
                          v716 = v711[2];
                          v704 = v716 + v704 - v715 * v712;
                          v703 = *((_QWORD *)v713 + 2) + v703 - v714 * v252[3];
                          ++v709;
                          v717 = v142[2];
                        }
                        while (v709 < v717);
                      }
                      else
                      {
                        v717 = 0;
                        v711 = *(_QWORD **)(v141 + 24);
                        v716 = v711[2];
                      }
                      v704 = v711[1] + v704 - v717 * v716;
                      v703 = *((_QWORD *)v251[3] + 1) + v703 - *((_QWORD *)v251[3] + 2) * v252[2];
                      ++v708;
                      v718 = v142[1];
                    }
                    while (v708 < v718);
                    v700 = *v142;
                  }
                  else
                  {
                    v718 = 0;
                  }
                  v704 = **(_QWORD **)(v141 + 24) + v704 - *(_QWORD *)(*(_QWORD *)(v141 + 24) + 8) * v718;
                  v703 = *(_QWORD *)v251[3] + v703 - *((_QWORD *)v251[3] + 1) * v252[1];
                  ++v701;
                }
                while (v701 < v700);
              }
              break;
            default:
              if (v140[6])
              {
                v653 = 0;
                v1713 = v251[19];
                v1728 = *(_QWORD *)(v141 + 152);
                v654 = v140[19];
                do
                {
                  v655 = *(_QWORD *)*v17;
                  v656 = (unint64_t)(*(_QWORD *)(*v17 + 8) - v655) >> 2;
                  v657 = 0;
                  v658 = (v656 - 1);
                  if ((int)v656 - 1 >= 0)
                  {
                    v659 = *(_QWORD *)(*v17 + 24);
                    v660 = v653;
                    do
                    {
                      v661 = ldiv(v660, *(int *)(v655 + 4 * v658));
                      v660 = v661.quot;
                      v657 += *(_QWORD *)(v659 + 8 * v658--) * v661.rem;
                    }
                    while (v658 != -1);
                  }
                  v662 = *(_QWORD *)*v18;
                  v663 = (unint64_t)(*(_QWORD *)(*v18 + 8) - v662) >> 2;
                  v664 = 0;
                  v665 = (v663 - 1);
                  if ((int)v663 - 1 >= 0)
                  {
                    v666 = *(_QWORD *)(*v18 + 24);
                    v667 = v653;
                    do
                    {
                      v668 = ldiv(v667, *(int *)(v662 + 4 * v665));
                      v667 = v668.quot;
                      v664 += *(_QWORD *)(v666 + 8 * v665--) * v668.rem;
                    }
                    while (v665 != -1);
                  }
                  *(_BYTE *)(v654 + v653++) = *((_BYTE *)v1713 + (int)v664) & *(_BYTE *)(v1728 + (int)v657);
                }
                while (v653 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 4:
      v9 = *(uint64_t **)a1;
      v8 = *(uint64_t **)(a1 + 8);
      switch(v22)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(_QWORD *)v1 + 152) = **(_DWORD **)(*v8 + 152) & **(_DWORD **)(*v9 + 152);
          return;
        case 1:
          v177 = *(_DWORD *)(*v8 + 160);
          if (v177 >= 1)
          {
            v178 = **(_DWORD **)(*v9 + 152);
            v179 = *(int **)(*(_QWORD *)v1 + 152);
            v180 = *(int **)(*v8 + 152);
            v181 = v177 + 1;
            do
            {
              v182 = *v180++;
              *v179++ = v182 & v178;
              --v181;
            }
            while (v181 > 1);
          }
          return;
        case 2:
          v183 = *(_DWORD *)(*v9 + 160);
          if (v183 >= 1)
          {
            v184 = **(_DWORD **)(*v8 + 152);
            v185 = *(int **)(*(_QWORD *)v1 + 152);
            v186 = *(int **)(*v9 + 152);
            v187 = v183 + 1;
            do
            {
              v188 = *v186++;
              *v185++ = v188 & v184;
              --v187;
            }
            while (v187 > 1);
          }
          return;
        case 3:
          v189 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v189 >= 1)
          {
            v190 = *(int **)(*(_QWORD *)v1 + 152);
            v191 = *(int **)(*v8 + 152);
            v192 = *(int **)(*v9 + 152);
            v193 = v189 + 1;
            do
            {
              v195 = *v192++;
              v194 = v195;
              v196 = *v191++;
              *v190++ = v196 & v194;
              --v193;
            }
            while (v193 > 1);
          }
          return;
        default:
          v168 = *(_QWORD **)v1;
          v169 = (_QWORD *)*v9;
          v170 = *(int **)*v9;
          v171 = (v169[1] - (_QWORD)v170) >> 2;
          v172 = (v171 - 1);
          if ((int)v172 >= -1)
            v173 = -1;
          else
            v173 = v171 - 1;
          v174 = v173 + 1;
          v175 = v171 + 1;
          break;
      }
      while (1)
      {
        v176 = v175 - 2;
        if (v175 - 2 < 0)
          break;
        --v175;
        if (*(_QWORD *)(v169[3] + 8 * v176) != *(_QWORD *)(v168[3] + 8 * v176))
          goto LABEL_226;
      }
      v175 = v174;
LABEL_226:
      v258 = (_QWORD *)*v8;
      v259 = *(int **)*v8;
      v260 = (v258[1] - (_QWORD)v259) >> 2;
      v261 = (v260 - 1);
      if ((int)v261 >= -1)
        v262 = -1;
      else
        v262 = v260 - 1;
      v263 = v262 + 1;
      v264 = v260 + 1;
      while (1)
      {
        v265 = v264 - 2;
        if (v264 - 2 < 0)
          break;
        --v264;
        if (*(_QWORD *)(v258[3] + 8 * v265) != *(_QWORD *)(v168[3] + 8 * v265))
          goto LABEL_257;
      }
      v264 = v263;
LABEL_257:
      v280 = v171 + 1;
      while (1)
      {
        v281 = v280 - 2;
        if (v280 - 2 < 0)
          break;
        --v280;
        if (*(_QWORD *)(v169[3] + 8 * v281))
          goto LABEL_282;
      }
      v280 = v174;
LABEL_282:
      v290 = v260 + 1;
      while (1)
      {
        v291 = v290 - 2;
        if (v290 - 2 < 0)
          break;
        --v290;
        if (*(_QWORD *)(v258[3] + 8 * v291))
          goto LABEL_367;
      }
      v290 = v263;
LABEL_367:
      v329 = (uint64_t)(v168[1] - *v168) >> 2;
      if (v175 <= v264)
        v330 = v264;
      else
        v330 = v175;
      if (v175 <= v290)
        v175 = v290;
      if (v280 > v264)
        v264 = v280;
      if (v329 > v264)
      {
        v331 = 1;
      }
      else
      {
        v264 = (uint64_t)(v168[1] - *v168) >> 2;
        v331 = 4;
      }
      if (v329 > v175)
      {
        v332 = 2;
      }
      else
      {
        v175 = v264;
        v332 = v331;
      }
      if (v329 > v330)
      {
        v175 = v330;
        v332 = 3;
      }
      v1709 = v261;
      v1724 = v172;
      if (!v175)
        goto LABEL_384;
      v333 = *(_QWORD *)(v168[3] + 8 * (v175 - 1));
      if (v333 < 0x10)
        goto LABEL_384;
      switch(v332)
      {
        case 1:
          if (v175 == 2)
          {
            v1470 = *v170;
            if (*v170)
            {
              v1471 = 0;
              v1472 = 0;
              v1473 = 0;
              v1474 = v169[19];
              v1475 = v258[19];
              v1476 = v168[19];
              v1477 = (uint64_t *)v169[3];
              v1478 = *v1477;
              v1479 = v1477[1];
              v1480 = (uint64_t *)v258[3];
              v1481 = *v1480;
              v1482 = v1480[1];
              v1483 = v170[1];
              v1484 = v1483;
              do
              {
                if (v1484)
                {
                  v1485 = 0;
                  v1486 = v1475 + 4 * v1472;
                  do
                  {
                    if ((int)v333 >= 1)
                    {
                      v1487 = 0;
                      v1488 = *(_DWORD *)(v1474 + 4 * v1473);
                      v1489 = v333 + 1;
                      do
                      {
                        *(_DWORD *)(v1476 + v1487) = *(_DWORD *)(v1486 + v1487) & v1488;
                        --v1489;
                        v1487 += 4;
                      }
                      while (v1489 > 1);
                      v1483 = v170[1];
                    }
                    v1473 += v1479;
                    v1472 += v1482;
                    v1476 += 4 * (int)v333;
                    ++v1485;
                    v1486 += 4 * v1482;
                  }
                  while (v1485 < v1483);
                  v1490 = v1483;
                  v1470 = *v170;
                  v1484 = v1483;
                }
                else
                {
                  v1490 = 0;
                }
                v1473 = v1473 + v1478 - v1490 * v1479;
                v1472 = v1472 + v1481 - v1482 * v259[1];
                ++v1471;
              }
              while (v1471 < v1470);
            }
          }
          else if (v175 == 1)
          {
            v948 = *v170;
            if (*v170)
            {
              v949 = 0;
              v950 = 0;
              v951 = v169[19];
              v952 = v258[19];
              v953 = v168[19];
              v954 = *(_QWORD *)v169[3];
              v955 = 4 * *(_QWORD *)v258[3];
              do
              {
                if ((int)v333 >= 1)
                {
                  v956 = 0;
                  v957 = *(_DWORD *)(v951 + 4 * v950);
                  v958 = v333 + 1;
                  do
                  {
                    *(_DWORD *)(v953 + v956) = *(_DWORD *)(v952 + v956) & v957;
                    --v958;
                    v956 += 4;
                  }
                  while (v958 > 1);
                  v948 = *v170;
                }
                v950 += v954;
                ++v949;
                v953 += 4 * (int)v333;
                v952 += v955;
              }
              while (v949 < v948);
            }
          }
          else
          {
            v1684 = v168[6];
            if (v1684)
            {
              v1703 = 0;
              v1624 = v258[19];
              v1636 = v169[19];
              v1491 = v168[19];
              do
              {
                v1492 = 0;
                if ((v172 & 0x80000000) == 0)
                {
                  v1493 = v169[3];
                  v1494 = v172;
                  v1495 = v1703;
                  do
                  {
                    v1496 = ldiv(v1495, v170[v1494]);
                    v1495 = v1496.quot;
                    v1492 += *(_QWORD *)(v1493 + 8 * v1494--) * v1496.rem;
                  }
                  while (v1494 != -1);
                }
                v1497 = v1709;
                if ((v1709 & 0x80000000) != 0)
                {
                  LODWORD(v1498) = 0;
                }
                else
                {
                  v1498 = 0;
                  v1499 = v258[3];
                  v1500 = v1703;
                  do
                  {
                    v1501 = ldiv(v1500, v259[v1497]);
                    v1500 = v1501.quot;
                    v1498 += *(_QWORD *)(v1499 + 8 * v1497--) * v1501.rem;
                  }
                  while (v1497 != -1);
                }
                v172 = v1724;
                if ((int)v333 >= 1)
                {
                  v1502 = 0;
                  v1503 = *(_DWORD *)(v1636 + 4 * (int)v1492);
                  v1504 = v333 + 1;
                  do
                  {
                    *(_DWORD *)(v1491 + v1502) = *(_DWORD *)(v1624 + 4 * (int)v1498 + v1502) & v1503;
                    --v1504;
                    v1502 += 4;
                  }
                  while (v1504 > 1);
                }
                v1491 += 4 * (int)v333;
                v1703 += (int)v333;
              }
              while (v1703 < v1684);
            }
          }
          break;
        case 2:
          if (v175 == 2)
          {
            v1505 = *v170;
            if (*v170)
            {
              v1506 = 0;
              v1507 = 0;
              v1508 = 0;
              v1509 = v169[19];
              v1510 = v258[19];
              v1511 = v168[19];
              v1512 = (uint64_t *)v169[3];
              v1513 = *v1512;
              v1514 = v1512[1];
              v1515 = (uint64_t *)v258[3];
              v1516 = *v1515;
              v1517 = v1515[1];
              v1518 = v170[1];
              v1519 = v1518;
              do
              {
                if (v1519)
                {
                  v1520 = 0;
                  v1521 = v1509 + 4 * v1508;
                  do
                  {
                    if ((int)v333 >= 1)
                    {
                      v1522 = 0;
                      v1523 = *(_DWORD *)(v1510 + 4 * v1507);
                      v1524 = v333 + 1;
                      do
                      {
                        *(_DWORD *)(v1511 + v1522) = *(_DWORD *)(v1521 + v1522) & v1523;
                        --v1524;
                        v1522 += 4;
                      }
                      while (v1524 > 1);
                      v1518 = v170[1];
                    }
                    v1508 += v1514;
                    v1507 += v1517;
                    v1511 += 4 * (int)v333;
                    ++v1520;
                    v1521 += 4 * v1514;
                  }
                  while (v1520 < v1518);
                  v1525 = v1518;
                  v1505 = *v170;
                  v1519 = v1518;
                }
                else
                {
                  v1525 = 0;
                }
                v1508 = v1508 + v1513 - v1525 * v1514;
                v1507 = v1507 + v1516 - v1517 * v259[1];
                ++v1506;
              }
              while (v1506 < v1505);
            }
          }
          else if (v175 == 1)
          {
            v959 = *v170;
            if (*v170)
            {
              v960 = 0;
              v961 = 0;
              v962 = v169[19];
              v963 = v258[19];
              v964 = v168[19];
              v965 = *(_QWORD *)v258[3];
              v966 = 4 * *(_QWORD *)v169[3];
              do
              {
                if ((int)v333 >= 1)
                {
                  v967 = 0;
                  v968 = *(_DWORD *)(v963 + 4 * v961);
                  v969 = v333 + 1;
                  do
                  {
                    *(_DWORD *)(v964 + v967) = *(_DWORD *)(v962 + v967) & v968;
                    --v969;
                    v967 += 4;
                  }
                  while (v969 > 1);
                  v959 = *v170;
                }
                v961 += v965;
                ++v960;
                v964 += 4 * (int)v333;
                v962 += v966;
              }
              while (v960 < v959);
            }
          }
          else
          {
            v1685 = v168[6];
            if (v1685)
            {
              v1704 = 0;
              v1625 = v258[19];
              v1637 = v169[19];
              v1526 = v168[19];
              do
              {
                v1527 = 0;
                if ((v172 & 0x80000000) == 0)
                {
                  v1528 = v169[3];
                  v1529 = v172;
                  v1530 = v1704;
                  do
                  {
                    v1531 = ldiv(v1530, v170[v1529]);
                    v1530 = v1531.quot;
                    v1527 += *(_QWORD *)(v1528 + 8 * v1529--) * v1531.rem;
                  }
                  while (v1529 != -1);
                }
                v1532 = v1709;
                if ((v1709 & 0x80000000) != 0)
                {
                  LODWORD(v1533) = 0;
                }
                else
                {
                  v1533 = 0;
                  v1534 = v258[3];
                  v1535 = v1704;
                  do
                  {
                    v1536 = ldiv(v1535, v259[v1532]);
                    v1535 = v1536.quot;
                    v1533 += *(_QWORD *)(v1534 + 8 * v1532--) * v1536.rem;
                  }
                  while (v1532 != -1);
                }
                v172 = v1724;
                if ((int)v333 >= 1)
                {
                  v1537 = 0;
                  v1538 = *(_DWORD *)(v1625 + 4 * (int)v1533);
                  v1539 = v333 + 1;
                  do
                  {
                    *(_DWORD *)(v1526 + v1537) = *(_DWORD *)(v1637 + 4 * (int)v1527 + v1537) & v1538;
                    --v1539;
                    v1537 += 4;
                  }
                  while (v1539 > 1);
                }
                v1526 += 4 * (int)v333;
                v1704 += (int)v333;
              }
              while (v1704 < v1685);
            }
          }
          break;
        case 3:
          if (v175 == 2)
          {
            v1189 = *v170;
            if (*v170)
            {
              v1190 = 0;
              v1191 = 0;
              v1192 = 0;
              v1193 = v169[19];
              v1194 = v258[19];
              v1195 = v168[19];
              v1196 = (uint64_t *)v169[3];
              v1197 = *v1196;
              v1198 = v1196[1];
              v1199 = (uint64_t *)v258[3];
              v1200 = *v1199;
              v1201 = v1199[1];
              v1202 = v170[1];
              v1203 = v1202;
              do
              {
                if (v1203)
                {
                  v1204 = 0;
                  v1205 = v1194 + 4 * v1191;
                  v1206 = v1193 + 4 * v1192;
                  do
                  {
                    if ((int)v333 >= 1)
                    {
                      v1207 = 0;
                      v1208 = v333 + 1;
                      do
                      {
                        *(_DWORD *)(v1195 + v1207) = *(_DWORD *)(v1205 + v1207) & *(_DWORD *)(v1206 + v1207);
                        --v1208;
                        v1207 += 4;
                      }
                      while (v1208 > 1);
                      v1202 = v170[1];
                    }
                    v1192 += v1198;
                    v1191 += v1201;
                    v1195 += 4 * (int)v333;
                    ++v1204;
                    v1205 += 4 * v1201;
                    v1206 += 4 * v1198;
                  }
                  while (v1204 < v1202);
                  v1209 = v1202;
                  v1189 = *v170;
                  v1203 = v1202;
                }
                else
                {
                  v1209 = 0;
                }
                v1192 = v1192 + v1197 - v1209 * v1198;
                v1191 = v1191 + v1200 - v1201 * v259[1];
                ++v1190;
              }
              while (v1190 < v1189);
            }
          }
          else if (v175 == 1)
          {
            v380 = *v170;
            if (*v170)
            {
              v381 = 0;
              v382 = v169[19];
              v383 = v258[19];
              v384 = v168[19];
              v385 = 4 * *(_QWORD *)v258[3];
              v386 = 4 * *(_QWORD *)v169[3];
              do
              {
                if ((int)v333 >= 1)
                {
                  v387 = 0;
                  v388 = v333 + 1;
                  do
                  {
                    *(_DWORD *)(v384 + v387) = *(_DWORD *)(v383 + v387) & *(_DWORD *)(v382 + v387);
                    --v388;
                    v387 += 4;
                  }
                  while (v388 > 1);
                  v380 = *v170;
                }
                ++v381;
                v384 += 4 * (int)v333;
                v383 += v385;
                v382 += v386;
              }
              while (v381 < v380);
            }
          }
          else
          {
            v1676 = v168[6];
            if (v1676)
            {
              v1697 = 0;
              v1618 = v258[19];
              v1630 = v169[19];
              v1210 = v168[19];
              do
              {
                v1211 = 0;
                if ((v172 & 0x80000000) == 0)
                {
                  v1212 = v169[3];
                  v1213 = v172;
                  v1214 = v1697;
                  do
                  {
                    v1215 = ldiv(v1214, v170[v1213]);
                    v1214 = v1215.quot;
                    v1211 += *(_QWORD *)(v1212 + 8 * v1213--) * v1215.rem;
                  }
                  while (v1213 != -1);
                }
                v1216 = v1709;
                if ((v1709 & 0x80000000) != 0)
                {
                  LODWORD(v1217) = 0;
                }
                else
                {
                  v1217 = 0;
                  v1218 = v258[3];
                  v1219 = v1697;
                  do
                  {
                    v1220 = ldiv(v1219, v259[v1216]);
                    v1219 = v1220.quot;
                    v1217 += *(_QWORD *)(v1218 + 8 * v1216--) * v1220.rem;
                  }
                  while (v1216 != -1);
                }
                v172 = v1724;
                if ((int)v333 >= 1)
                {
                  v1221 = 0;
                  v1222 = v333 + 1;
                  do
                  {
                    *(_DWORD *)(v1210 + v1221) = *(_DWORD *)(v1618 + 4 * (int)v1217 + v1221) & *(_DWORD *)(v1630 + 4 * (int)v1211 + v1221);
                    --v1222;
                    v1221 += 4;
                  }
                  while (v1222 > 1);
                }
                v1210 += 4 * (int)v333;
                v1697 += (int)v333;
              }
              while (v1697 < v1676);
            }
          }
          break;
        default:
LABEL_384:
          switch(v329)
          {
            case 1uLL:
              v334 = v168[6];
              if (v334)
              {
                v335 = (_DWORD *)v169[19];
                v336 = (_DWORD *)v258[19];
                v337 = (int *)v168[19];
                v338 = 4 * *(_QWORD *)v258[3];
                v339 = 4 * *(_QWORD *)v169[3];
                do
                {
                  *v337++ = *v336 & *v335;
                  v336 = (_DWORD *)((char *)v336 + v338);
                  v335 = (_DWORD *)((char *)v335 + v339);
                  --v334;
                }
                while (v334);
              }
              break;
            case 2uLL:
              v731 = *v170;
              if (*v170)
              {
                v732 = 0;
                v733 = 0;
                v734 = 0;
                v735 = 0;
                v736 = v169[19];
                v737 = v258[19];
                v738 = v168[19];
                v739 = (uint64_t *)v169[3];
                v740 = *v739;
                v741 = v739[1];
                v742 = (uint64_t *)v258[3];
                v744 = *v742;
                v743 = v742[1];
                v745 = v170[1];
                do
                {
                  if (v745)
                  {
                    for (n = 0; n < v745; ++n)
                    {
                      *(_DWORD *)(v738 + 4 * v733 + 4 * n) = *(_DWORD *)(v737 + 4 * v734) & *(_DWORD *)(v736 + 4 * v735);
                      v735 += v741;
                      v734 += v743;
                      v745 = v170[1];
                    }
                    v747 = v745;
                    v731 = *v170;
                    v733 += n;
                  }
                  else
                  {
                    v747 = 0;
                  }
                  v735 = v735 + v740 - v747 * v741;
                  v734 = v734 + v744 - v743 * v259[1];
                  ++v732;
                }
                while (v732 < v731);
              }
              break;
            case 3uLL:
              v748 = *v170;
              if (*v170)
              {
                v749 = 0;
                v750 = 0;
                v751 = 0;
                v752 = 0;
                v753 = v169[19];
                v754 = v258[19];
                v755 = v168[19];
                v756 = (uint64_t *)v169[3];
                v757 = *v756;
                v758 = v756[1];
                v759 = (uint64_t *)v258[3];
                v760 = *v759;
                v761 = v759[1];
                v762 = v170[1];
                v763 = v762;
                do
                {
                  if (v763)
                  {
                    v764 = 0;
                    v765 = v756[2];
                    v766 = v759[2];
                    v767 = v170[2];
                    do
                    {
                      if (v767)
                      {
                        for (ii = 0; ii < v767; ++ii)
                        {
                          *(_DWORD *)(v755 + 4 * v750 + 4 * ii) = *(_DWORD *)(v754 + 4 * v751) & *(_DWORD *)(v753 + 4 * v752);
                          v752 += v765;
                          v751 += v766;
                          v767 = v170[2];
                        }
                        v769 = v767;
                        v762 = v170[1];
                        v750 += ii;
                      }
                      else
                      {
                        v769 = 0;
                      }
                      v752 = v752 + v758 - v769 * v765;
                      v751 = v751 + v761 - v766 * v259[2];
                      ++v764;
                    }
                    while (v764 < v762);
                    v770 = v762;
                    v748 = *v170;
                    v763 = v762;
                  }
                  else
                  {
                    v770 = 0;
                  }
                  v752 = v752 + v757 - v770 * v758;
                  v751 = v751 + v760 - v761 * v259[1];
                  ++v749;
                }
                while (v749 < v748);
              }
              break;
            case 4uLL:
              v771 = *v170;
              if (*v170)
              {
                v772 = 0;
                v773 = 0;
                v774 = 0;
                v775 = 0;
                v776 = v169[19];
                v777 = v258[19];
                v778 = v168[19];
                v779 = (uint64_t *)v169[3];
                v780 = *v779;
                v781 = v779[1];
                v782 = (uint64_t *)v258[3];
                v783 = *v782;
                v784 = v782[1];
                v785 = v170[1];
                v786 = v785;
                do
                {
                  if (v786)
                  {
                    v787 = 0;
                    v788 = v779[2];
                    v789 = v782[2];
                    v790 = v170[2];
                    v791 = v790;
                    do
                    {
                      if (v791)
                      {
                        v792 = 0;
                        v793 = v779[3];
                        v794 = v782[3];
                        v795 = v170[3];
                        do
                        {
                          if (v795)
                          {
                            for (jj = 0; jj < v795; ++jj)
                            {
                              *(_DWORD *)(v778 + 4 * v773 + 4 * jj) = *(_DWORD *)(v777 + 4 * v774) & *(_DWORD *)(v776 + 4 * v775);
                              v775 += v793;
                              v774 += v794;
                              v795 = v170[3];
                            }
                            v797 = v795;
                            v790 = v170[2];
                            v773 += jj;
                          }
                          else
                          {
                            v797 = 0;
                          }
                          v775 = v775 + v788 - v797 * v793;
                          v774 = v774 + v789 - v794 * v259[3];
                          ++v792;
                        }
                        while (v792 < v790);
                        v798 = v790;
                        v785 = v170[1];
                        v791 = v790;
                      }
                      else
                      {
                        v798 = 0;
                      }
                      v775 = v775 + v781 - v798 * v788;
                      v774 = v774 + v784 - v789 * v259[2];
                      ++v787;
                    }
                    while (v787 < v785);
                    v799 = v785;
                    v771 = *v170;
                    v786 = v785;
                  }
                  else
                  {
                    v799 = 0;
                  }
                  v775 = v775 + v780 - v799 * v781;
                  v774 = v774 + v783 - v784 * v259[1];
                  ++v772;
                }
                while (v772 < v771);
              }
              break;
            default:
              v719 = v168[6];
              if (v719)
              {
                v720 = 0;
                v1667 = v258[19];
                v1692 = v169[19];
                v1652 = v168[19];
                do
                {
                  v721 = 0;
                  if ((v172 & 0x80000000) == 0)
                  {
                    v722 = v169[3];
                    v723 = v172;
                    v724 = v720;
                    do
                    {
                      v725 = ldiv(v724, v170[v723]);
                      v724 = v725.quot;
                      v721 += *(_QWORD *)(v722 + 8 * v723--) * v725.rem;
                    }
                    while (v723 != -1);
                  }
                  v726 = v1709;
                  if ((v1709 & 0x80000000) != 0)
                  {
                    LODWORD(v727) = 0;
                  }
                  else
                  {
                    v727 = 0;
                    v728 = v258[3];
                    v729 = v720;
                    do
                    {
                      v730 = ldiv(v729, v259[v726]);
                      v729 = v730.quot;
                      v727 += *(_QWORD *)(v728 + 8 * v726--) * v730.rem;
                    }
                    while (v726 != -1);
                  }
                  *(_DWORD *)(v1652 + 4 * v720++) = *(_DWORD *)(v1667 + 4 * (int)v727) & *(_DWORD *)(v1692 + 4 * (int)v721);
                  v172 = v1724;
                }
                while (v720 != v719);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      v24 = *(uint64_t **)a1;
      v23 = *(uint64_t **)(a1 + 8);
      switch(v25)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)v1 + 152) = **(_QWORD **)(*v23 + 152) & **(_QWORD **)(*v24 + 152);
          return;
        case 1:
          v206 = *(_DWORD *)(*v23 + 160);
          if (v206 >= 1)
          {
            v207 = **(_QWORD **)(*v24 + 152);
            v208 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v209 = *(uint64_t **)(*v23 + 152);
            v210 = v206 + 1;
            do
            {
              v211 = *v209++;
              *v208++ = v211 & v207;
              --v210;
            }
            while (v210 > 1);
          }
          return;
        case 2:
          v212 = *(_DWORD *)(*v24 + 160);
          if (v212 >= 1)
          {
            v213 = **(_QWORD **)(*v23 + 152);
            v214 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v215 = *(uint64_t **)(*v24 + 152);
            v216 = v212 + 1;
            do
            {
              v217 = *v215++;
              *v214++ = v217 & v213;
              --v216;
            }
            while (v216 > 1);
          }
          return;
        case 3:
          v218 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v218 >= 1)
          {
            v219 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v220 = *(uint64_t **)(*v23 + 152);
            v221 = *(uint64_t **)(*v24 + 152);
            v222 = v218 + 1;
            do
            {
              v224 = *v221++;
              v223 = v224;
              v225 = *v220++;
              *v219++ = v225 & v223;
              --v222;
            }
            while (v222 > 1);
          }
          return;
        default:
          v197 = *(_QWORD **)v1;
          v198 = (_QWORD *)*v24;
          v199 = *(int **)*v24;
          v200 = (v198[1] - (_QWORD)v199) >> 2;
          v201 = (v200 - 1);
          if ((int)v201 >= -1)
            v202 = -1;
          else
            v202 = v200 - 1;
          v203 = v202 + 1;
          v204 = v200 + 1;
          break;
      }
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](exception, "[BitwiseBinary::eval_cpu] Type not supported");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  while (1)
  {
    v205 = v204 - 2;
    if (v204 - 2 < 0)
      break;
    --v204;
    if (*(_QWORD *)(v198[3] + 8 * v205) != *(_QWORD *)(v197[3] + 8 * v205))
      goto LABEL_234;
  }
  v204 = v203;
LABEL_234:
  v266 = (_QWORD *)*v23;
  v267 = *(int **)*v23;
  v268 = (v266[1] - (_QWORD)v267) >> 2;
  v269 = (v268 - 1);
  if ((int)v269 >= -1)
    v270 = -1;
  else
    v270 = v268 - 1;
  v271 = v270 + 1;
  v272 = v268 + 1;
  while (1)
  {
    v273 = v272 - 2;
    if (v272 - 2 < 0)
      break;
    --v272;
    if (*(_QWORD *)(v266[3] + 8 * v273) != *(_QWORD *)(v197[3] + 8 * v273))
      goto LABEL_262;
  }
  v272 = v271;
LABEL_262:
  v282 = v200 + 1;
  while (1)
  {
    v283 = v282 - 2;
    if (v282 - 2 < 0)
      break;
    --v282;
    if (*(_QWORD *)(v198[3] + 8 * v283))
      goto LABEL_287;
  }
  v282 = v203;
LABEL_287:
  v292 = v268 + 1;
  while (1)
  {
    v293 = v292 - 2;
    if (v292 - 2 < 0)
      break;
    --v292;
    if (*(_QWORD *)(v266[3] + 8 * v293))
      goto LABEL_390;
  }
  v292 = v271;
LABEL_390:
  v340 = (uint64_t)(v197[1] - *v197) >> 2;
  if (v204 <= v272)
    v341 = v272;
  else
    v341 = v204;
  if (v204 <= v292)
    v204 = v292;
  if (v282 > v272)
    v272 = v282;
  if (v340 > v272)
  {
    v342 = 1;
  }
  else
  {
    v272 = (uint64_t)(v197[1] - *v197) >> 2;
    v342 = 4;
  }
  if (v340 > v204)
  {
    v343 = 2;
  }
  else
  {
    v204 = v272;
    v343 = v342;
  }
  if (v340 > v341)
  {
    v204 = v341;
    v343 = 3;
  }
  v1710 = v269;
  v1725 = v201;
  if (!v204)
    goto LABEL_407;
  v344 = *(_QWORD *)(v197[3] + 8 * (v204 - 1));
  if (v344 < 0x10)
    goto LABEL_407;
  switch(v343)
  {
    case 1:
      if (v204 == 2)
      {
        v1540 = *v199;
        if ((_DWORD)v1540)
        {
          v1541 = 0;
          v1542 = 0;
          v1543 = 0;
          v1544 = v198[19];
          v1545 = v266[19];
          v1546 = v197[19];
          v1547 = v199[1];
          v1548 = (uint64_t *)v198[3];
          v1549 = *v1548;
          v1550 = v1548[1];
          v1551 = (uint64_t *)v266[3];
          v1552 = *v1551;
          v1553 = v1551[1];
          if (v1547 <= 1)
            v1554 = 1;
          else
            v1554 = v199[1];
          v1555 = v1549 - v1550 * v1547;
          v1556 = v1552 - v1553 * v267[1];
          do
          {
            if ((_DWORD)v1547)
            {
              v1557 = 0;
              v1558 = v1545 + 8 * v1542;
              do
              {
                if ((int)v344 >= 1)
                {
                  v1559 = 0;
                  v1560 = *(_QWORD *)(v1544 + 8 * v1543);
                  v1561 = v344 + 1;
                  do
                  {
                    *(_QWORD *)(v1546 + v1559) = *(_QWORD *)(v1558 + v1559) & v1560;
                    --v1561;
                    v1559 += 8;
                  }
                  while (v1561 > 1);
                }
                v1543 += v1550;
                v1542 += v1553;
                v1546 += 8 * (int)v344;
                ++v1557;
                v1558 += 8 * v1553;
              }
              while (v1557 != v1554);
            }
            v1543 += v1555;
            v1542 += v1556;
            ++v1541;
          }
          while (v1541 != v1540);
        }
      }
      else if (v204 == 1)
      {
        v970 = *v199;
        if ((_DWORD)v970)
        {
          v971 = 0;
          v972 = 0;
          v973 = v198[19];
          v974 = v266[19];
          v975 = v197[19];
          v976 = *(_QWORD *)v198[3];
          v977 = 8 * *(_QWORD *)v266[3];
          do
          {
            if ((int)v344 >= 1)
            {
              v978 = 0;
              v979 = *(_QWORD *)(v973 + 8 * v972);
              v980 = v344 + 1;
              do
              {
                *(_QWORD *)(v975 + v978) = *(_QWORD *)(v974 + v978) & v979;
                --v980;
                v978 += 8;
              }
              while (v980 > 1);
            }
            v972 += v976;
            ++v971;
            v975 += 8 * (int)v344;
            v974 += v977;
          }
          while (v971 != v970);
        }
      }
      else
      {
        v1686 = v197[6];
        if (v1686)
        {
          v1705 = 0;
          v1626 = v266[19];
          v1638 = v198[19];
          v1562 = v197[19];
          do
          {
            v1563 = 0;
            if ((v201 & 0x80000000) == 0)
            {
              v1564 = v198[3];
              v1565 = v201;
              v1566 = v1705;
              do
              {
                v1567 = ldiv(v1566, v199[v1565]);
                v1566 = v1567.quot;
                v1563 += *(_QWORD *)(v1564 + 8 * v1565--) * v1567.rem;
              }
              while (v1565 != -1);
            }
            v1568 = v1710;
            if ((v1710 & 0x80000000) != 0)
            {
              LODWORD(v1569) = 0;
            }
            else
            {
              v1569 = 0;
              v1570 = v266[3];
              v1571 = v1705;
              do
              {
                v1572 = ldiv(v1571, v267[v1568]);
                v1571 = v1572.quot;
                v1569 += *(_QWORD *)(v1570 + 8 * v1568--) * v1572.rem;
              }
              while (v1568 != -1);
            }
            v201 = v1725;
            if ((int)v344 >= 1)
            {
              v1573 = 0;
              v1574 = *(_QWORD *)(v1638 + 8 * (int)v1563);
              v1575 = v344 + 1;
              do
              {
                *(_QWORD *)(v1562 + v1573) = *(_QWORD *)(v1626 + 8 * (int)v1569 + v1573) & v1574;
                --v1575;
                v1573 += 8;
              }
              while (v1575 > 1);
            }
            v1562 += 8 * (int)v344;
            v1705 += (int)v344;
          }
          while (v1705 < v1686);
        }
      }
      break;
    case 2:
      if (v204 == 2)
      {
        v1576 = *v199;
        if ((_DWORD)v1576)
        {
          v1577 = 0;
          v1578 = 0;
          v1579 = 0;
          v1580 = v198[19];
          v1581 = v266[19];
          v1582 = v197[19];
          v1583 = v199[1];
          v1584 = (uint64_t *)v198[3];
          v1585 = *v1584;
          v1586 = v1584[1];
          v1587 = (uint64_t *)v266[3];
          v1588 = *v1587;
          v1589 = v1587[1];
          if (v1583 <= 1)
            v1590 = 1;
          else
            v1590 = v199[1];
          v1591 = v1585 - v1586 * v1583;
          v1592 = v1588 - v1589 * v267[1];
          do
          {
            if ((_DWORD)v1583)
            {
              v1593 = 0;
              v1594 = v1580 + 8 * v1579;
              do
              {
                if ((int)v344 >= 1)
                {
                  v1595 = 0;
                  v1596 = *(_QWORD *)(v1581 + 8 * v1578);
                  v1597 = v344 + 1;
                  do
                  {
                    *(_QWORD *)(v1582 + v1595) = *(_QWORD *)(v1594 + v1595) & v1596;
                    --v1597;
                    v1595 += 8;
                  }
                  while (v1597 > 1);
                }
                v1579 += v1586;
                v1578 += v1589;
                v1582 += 8 * (int)v344;
                ++v1593;
                v1594 += 8 * v1586;
              }
              while (v1593 != v1590);
            }
            v1579 += v1591;
            v1578 += v1592;
            ++v1577;
          }
          while (v1577 != v1576);
        }
      }
      else if (v204 == 1)
      {
        v981 = *v199;
        if ((_DWORD)v981)
        {
          v982 = 0;
          v983 = 0;
          v984 = v198[19];
          v985 = v266[19];
          v986 = v197[19];
          v987 = *(_QWORD *)v266[3];
          v988 = 8 * *(_QWORD *)v198[3];
          do
          {
            if ((int)v344 >= 1)
            {
              v989 = 0;
              v990 = *(_QWORD *)(v985 + 8 * v983);
              v991 = v344 + 1;
              do
              {
                *(_QWORD *)(v986 + v989) = *(_QWORD *)(v984 + v989) & v990;
                --v991;
                v989 += 8;
              }
              while (v991 > 1);
            }
            v983 += v987;
            ++v982;
            v986 += 8 * (int)v344;
            v984 += v988;
          }
          while (v982 != v981);
        }
      }
      else
      {
        v1687 = v197[6];
        if (v1687)
        {
          v1706 = 0;
          v1627 = v266[19];
          v1639 = v198[19];
          v1598 = v197[19];
          do
          {
            v1599 = 0;
            if ((v201 & 0x80000000) == 0)
            {
              v1600 = v198[3];
              v1601 = v201;
              v1602 = v1706;
              do
              {
                v1603 = ldiv(v1602, v199[v1601]);
                v1602 = v1603.quot;
                v1599 += *(_QWORD *)(v1600 + 8 * v1601--) * v1603.rem;
              }
              while (v1601 != -1);
            }
            v1604 = v1710;
            if ((v1710 & 0x80000000) != 0)
            {
              LODWORD(v1605) = 0;
            }
            else
            {
              v1605 = 0;
              v1606 = v266[3];
              v1607 = v1706;
              do
              {
                v1608 = ldiv(v1607, v267[v1604]);
                v1607 = v1608.quot;
                v1605 += *(_QWORD *)(v1606 + 8 * v1604--) * v1608.rem;
              }
              while (v1604 != -1);
            }
            v201 = v1725;
            if ((int)v344 >= 1)
            {
              v1609 = 0;
              v1610 = *(_QWORD *)(v1627 + 8 * (int)v1605);
              v1611 = v344 + 1;
              do
              {
                *(_QWORD *)(v1598 + v1609) = *(_QWORD *)(v1639 + 8 * (int)v1599 + v1609) & v1610;
                --v1611;
                v1609 += 8;
              }
              while (v1611 > 1);
            }
            v1598 += 8 * (int)v344;
            v1706 += (int)v344;
          }
          while (v1706 < v1687);
        }
      }
      break;
    case 3:
      if (v204 == 2)
      {
        v1223 = *v199;
        if ((_DWORD)v1223)
        {
          v1224 = 0;
          v1225 = 0;
          v1226 = 0;
          v1227 = v198[19];
          v1228 = v266[19];
          v1229 = v197[19];
          v1230 = v199[1];
          v1231 = (uint64_t *)v198[3];
          v1232 = *v1231;
          v1233 = v1231[1];
          v1234 = (uint64_t *)v266[3];
          v1235 = *v1234;
          v1236 = v1234[1];
          if (v1230 <= 1)
            v1237 = 1;
          else
            v1237 = v199[1];
          v1238 = v1232 - v1233 * v1230;
          v1239 = v1235 - v1236 * v267[1];
          do
          {
            if ((_DWORD)v1230)
            {
              v1240 = 0;
              v1241 = v1228 + 8 * v1225;
              v1242 = v1227 + 8 * v1226;
              do
              {
                if ((int)v344 >= 1)
                {
                  v1243 = 0;
                  v1244 = v344 + 1;
                  do
                  {
                    *(_QWORD *)(v1229 + v1243) = *(_QWORD *)(v1241 + v1243) & *(_QWORD *)(v1242 + v1243);
                    --v1244;
                    v1243 += 8;
                  }
                  while (v1244 > 1);
                }
                v1226 += v1233;
                v1225 += v1236;
                v1229 += 8 * (int)v344;
                ++v1240;
                v1241 += 8 * v1236;
                v1242 += 8 * v1233;
              }
              while (v1240 != v1237);
            }
            v1226 += v1238;
            v1225 += v1239;
            ++v1224;
          }
          while (v1224 != v1223);
        }
      }
      else if (v204 == 1)
      {
        v389 = *v199;
        if ((_DWORD)v389)
        {
          v390 = 0;
          v391 = v198[19];
          v392 = v266[19];
          v393 = v197[19];
          v394 = 8 * *(_QWORD *)v266[3];
          v395 = 8 * *(_QWORD *)v198[3];
          do
          {
            if ((int)v344 >= 1)
            {
              v396 = 0;
              v397 = v344 + 1;
              do
              {
                *(_QWORD *)(v393 + v396) = *(_QWORD *)(v392 + v396) & *(_QWORD *)(v391 + v396);
                --v397;
                v396 += 8;
              }
              while (v397 > 1);
            }
            ++v390;
            v393 += 8 * (int)v344;
            v392 += v394;
            v391 += v395;
          }
          while (v390 != v389);
        }
      }
      else
      {
        v1677 = v197[6];
        if (v1677)
        {
          v1698 = 0;
          v1619 = v266[19];
          v1631 = v198[19];
          v1245 = v197[19];
          do
          {
            v1246 = 0;
            if ((v201 & 0x80000000) == 0)
            {
              v1247 = v198[3];
              v1248 = v201;
              v1249 = v1698;
              do
              {
                v1250 = ldiv(v1249, v199[v1248]);
                v1249 = v1250.quot;
                v1246 += *(_QWORD *)(v1247 + 8 * v1248--) * v1250.rem;
              }
              while (v1248 != -1);
            }
            v1251 = v1710;
            if ((v1710 & 0x80000000) != 0)
            {
              LODWORD(v1252) = 0;
            }
            else
            {
              v1252 = 0;
              v1253 = v266[3];
              v1254 = v1698;
              do
              {
                v1255 = ldiv(v1254, v267[v1251]);
                v1254 = v1255.quot;
                v1252 += *(_QWORD *)(v1253 + 8 * v1251--) * v1255.rem;
              }
              while (v1251 != -1);
            }
            v201 = v1725;
            if ((int)v344 >= 1)
            {
              v1256 = 0;
              v1257 = v344 + 1;
              do
              {
                *(_QWORD *)(v1245 + v1256) = *(_QWORD *)(v1619 + 8 * (int)v1252 + v1256) & *(_QWORD *)(v1631 + 8 * (int)v1246 + v1256);
                --v1257;
                v1256 += 8;
              }
              while (v1257 > 1);
            }
            v1245 += 8 * (int)v344;
            v1698 += (int)v344;
          }
          while (v1698 < v1677);
        }
      }
      break;
    default:
LABEL_407:
      switch(v340)
      {
        case 1uLL:
          v345 = v197[6];
          if (v345)
          {
            v346 = (_QWORD *)v198[19];
            v347 = (_QWORD *)v266[19];
            v348 = (_QWORD *)v197[19];
            v349 = 8 * *(_QWORD *)v266[3];
            v350 = 8 * *(_QWORD *)v198[3];
            do
            {
              *v348++ = *v347 & *v346;
              v347 = (_QWORD *)((char *)v347 + v349);
              v346 = (_QWORD *)((char *)v346 + v350);
              --v345;
            }
            while (v345);
          }
          break;
        case 2uLL:
          v812 = *v199;
          if ((_DWORD)v812)
          {
            v813 = 0;
            v814 = 0;
            v815 = 0;
            v816 = 0;
            v817 = v198[19];
            v818 = v266[19];
            v819 = v197[19];
            v820 = v199[1];
            v821 = (uint64_t *)v198[3];
            v822 = *v821;
            v823 = v821[1];
            v824 = (uint64_t *)v266[3];
            v825 = *v824;
            v826 = v824[1];
            v827 = v825 - v826 * v267[1];
            if (v820 <= 1)
              v828 = 1;
            else
              v828 = v199[1];
            v829 = v822 - v823 * v820;
            do
            {
              if ((_DWORD)v820)
              {
                v830 = v814 + v828;
                v831 = (_QWORD *)(v819 + 8 * v814);
                v832 = v828;
                do
                {
                  *v831++ = *(_QWORD *)(v818 + 8 * v815) & *(_QWORD *)(v817 + 8 * v816);
                  v816 += v823;
                  v815 += v826;
                  --v832;
                }
                while (v832);
                v814 = v830;
              }
              v816 += v829;
              v815 += v827;
              ++v813;
            }
            while (v813 != v812);
          }
          break;
        case 3uLL:
          v833 = *v199;
          if ((_DWORD)v833)
          {
            v834 = 0;
            v835 = 0;
            v836 = 0;
            v837 = 0;
            v838 = v198[19];
            v839 = v266[19];
            v840 = v197[19];
            v841 = v199[1];
            v842 = (_QWORD *)v198[3];
            v843 = v842[1];
            v844 = (_QWORD *)v266[3];
            v845 = v844[1];
            v846 = *v844 - v845 * v267[1];
            if (v841 <= 1)
              v847 = 1;
            else
              v847 = v199[1];
            v848 = *v842 - v843 * v841;
            do
            {
              if ((_DWORD)v841)
              {
                v849 = 0;
                v850 = v199[2];
                v851 = v842[2];
                v852 = v844[2];
                if (v850 <= 1)
                  v853 = 1;
                else
                  v853 = v199[2];
                v854 = v845 - v852 * v267[2];
                do
                {
                  v855 = v853;
                  if ((_DWORD)v850)
                  {
                    do
                    {
                      *(_QWORD *)(v840 + 8 * v835++) = *(_QWORD *)(v839 + 8 * v836) & *(_QWORD *)(v838 + 8 * v837);
                      v837 += v851;
                      v836 += v852;
                      --v855;
                    }
                    while (v855);
                  }
                  v837 += v843 - v851 * v850;
                  v836 += v854;
                  ++v849;
                }
                while (v849 != v847);
              }
              v837 += v848;
              v836 += v846;
              ++v834;
            }
            while (v834 != v833);
          }
          break;
        case 4uLL:
          v1729 = *v199;
          if ((_DWORD)v1729)
          {
            v856 = 0;
            v857 = 0;
            v858 = 0;
            v859 = 0;
            v860 = v198[19];
            v861 = v266[19];
            v862 = v197[19];
            v863 = v199[1];
            v864 = (_QWORD *)v198[3];
            v865 = (_QWORD *)v266[3];
            v1642 = v865[1];
            v1654 = v864[1];
            v1694 = *v865 - v1642 * v267[1];
            v1714 = v199[1];
            if (v863 <= 1)
              v866 = 1;
            else
              v866 = v199[1];
            v1669 = *v864 - v864[1] * v863;
            do
            {
              if (v1714)
              {
                v867 = 0;
                v868 = v199[2];
                v869 = v864[2];
                v870 = v865[2];
                if (v868 <= 1)
                  v871 = 1;
                else
                  v871 = v199[2];
                v872 = v1642 - v870 * v267[2];
                do
                {
                  if ((_DWORD)v868)
                  {
                    v873 = 0;
                    v874 = v199[3];
                    v875 = v864[3];
                    v876 = v865[3];
                    if (v874 <= 1)
                      v877 = 1;
                    else
                      v877 = v199[3];
                    v878 = v870 - v876 * v267[3];
                    do
                    {
                      v879 = v877;
                      if ((_DWORD)v874)
                      {
                        do
                        {
                          *(_QWORD *)(v862 + 8 * v857++) = *(_QWORD *)(v861 + 8 * v858) & *(_QWORD *)(v860 + 8 * v859);
                          v859 += v875;
                          v858 += v876;
                          --v879;
                        }
                        while (v879);
                      }
                      v859 += v869 - v875 * v874;
                      v858 += v878;
                      ++v873;
                    }
                    while (v873 != v871);
                  }
                  v859 += v1654 - v869 * v868;
                  v858 += v872;
                  ++v867;
                }
                while (v867 != v866);
              }
              v859 += v1669;
              v858 += v1694;
              ++v856;
            }
            while (v856 != v1729);
          }
          break;
        default:
          v800 = v197[6];
          if (v800)
          {
            v801 = 0;
            v1668 = v266[19];
            v1693 = v198[19];
            v1653 = v197[19];
            do
            {
              v802 = 0;
              if ((v201 & 0x80000000) == 0)
              {
                v803 = v198[3];
                v804 = v201;
                v805 = v801;
                do
                {
                  v806 = ldiv(v805, v199[v804]);
                  v805 = v806.quot;
                  v802 += *(_QWORD *)(v803 + 8 * v804--) * v806.rem;
                }
                while (v804 != -1);
              }
              v807 = v1710;
              if ((v1710 & 0x80000000) != 0)
              {
                LODWORD(v808) = 0;
              }
              else
              {
                v808 = 0;
                v809 = v266[3];
                v810 = v801;
                do
                {
                  v811 = ldiv(v810, v267[v807]);
                  v810 = v811.quot;
                  v808 += *(_QWORD *)(v809 + 8 * v807--) * v811.rem;
                }
                while (v807 != -1);
              }
              *(_QWORD *)(v1653 + 8 * v801++) = *(_QWORD *)(v1668 + 8 * (int)v808) & *(_QWORD *)(v1693
                                                                                                 + 8 * (int)v802);
              v201 = v1725;
            }
            while (v801 != v800);
          }
          break;
      }
      return;
  }
}

void sub_2423D2DF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::BitwiseOr>(uint64_t a1)
{
  mlx::core::array *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int binary_op_type;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int *v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  char v34;
  _BYTE *v35;
  char *v36;
  unsigned int v37;
  char v38;
  int v39;
  char v40;
  _BYTE *v41;
  char *v42;
  unsigned int v43;
  char v44;
  int v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  unsigned int v49;
  char v50;
  char v51;
  char v52;
  uint64_t *v53;
  uint64_t *v54;
  mlx::core::array *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  char v66;
  _BYTE *v67;
  char *v68;
  unsigned int v69;
  char v70;
  int v71;
  char v72;
  _BYTE *v73;
  char *v74;
  unsigned int v75;
  char v76;
  int v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  unsigned int v81;
  char v82;
  char v83;
  char v84;
  int **v85;
  int *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  int *v118;
  int *v119;
  unsigned int v120;
  int v121;
  int v122;
  int *v123;
  int *v124;
  int *v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  _QWORD *v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  char v139;
  _BYTE *v140;
  char *v141;
  unsigned int v142;
  char v143;
  int v144;
  char v145;
  _BYTE *v146;
  char *v147;
  unsigned int v148;
  char v149;
  int v150;
  _BYTE *v151;
  char *v152;
  char *v153;
  unsigned int v154;
  char v155;
  char v156;
  char v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  int *v169;
  int *v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int *v175;
  int *v176;
  unsigned int v177;
  int v178;
  int v179;
  int *v180;
  int *v181;
  int *v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  _QWORD *v187;
  _QWORD *v188;
  int *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD *v225;
  int *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  unsigned int v232;
  _QWORD *v233;
  int *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  int **v241;
  int *v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  unsigned int v247;
  _QWORD *v248;
  int *v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  _QWORD *v256;
  int *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unint64_t v284;
  int v285;
  int v286;
  int v287;
  unint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  _BYTE *v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  int v296;
  int v297;
  int v298;
  unint64_t v299;
  uint64_t v300;
  _DWORD *v301;
  _DWORD *v302;
  int *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  int v307;
  int v308;
  int v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int *v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  int v320;
  unint64_t v321;
  uint64_t v322;
  _DWORD *v323;
  _DWORD *v324;
  int *v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  int v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  int v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  int v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  unint64_t v384;
  int *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  ldiv_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  ldiv_t v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int *v407;
  uint64_t v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  int *v412;
  uint64_t v413;
  unint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  int *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  int v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  int *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  int v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int *v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  unsigned int v460;
  int v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int *v466;
  uint64_t v467;
  uint64_t v468;
  char v469;
  unsigned int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  ldiv_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  ldiv_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _BYTE *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  _QWORD *v534;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  ldiv_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  ldiv_t v561;
  int v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  unint64_t j;
  uint64_t v578;
  int v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  unint64_t k;
  uint64_t v600;
  uint64_t v601;
  int v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  int v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  int v622;
  unint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  unint64_t m;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  ldiv_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  ldiv_t v646;
  int v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int *v653;
  uint64_t v654;
  unint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  int *v658;
  uint64_t v659;
  unint64_t v660;
  int v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int *v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  _QWORD *v671;
  uint64_t v672;
  int *v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  int v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int *v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  int *v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  ldiv_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  int v707;
  ldiv_t v708;
  int v709;
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t *v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  unint64_t n;
  uint64_t v725;
  int v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t *v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  int v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  unint64_t ii;
  uint64_t v747;
  uint64_t v748;
  int v749;
  unint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t *v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  int v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  int v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  unint64_t jj;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  ldiv_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  ldiv_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  _QWORD *v820;
  uint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  _QWORD *v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  char v867;
  unsigned int v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  char v878;
  unsigned int v879;
  int v880;
  unint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  unsigned int v890;
  int v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  unsigned int v901;
  int v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int *v907;
  uint64_t v908;
  uint64_t v909;
  char v910;
  unsigned int v911;
  int v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int *v917;
  uint64_t v918;
  uint64_t v919;
  char v920;
  unsigned int v921;
  int v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  int v931;
  unsigned int v932;
  int v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  int v942;
  unsigned int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  unsigned int v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unsigned int v965;
  int v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  int *v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  unsigned int v975;
  _QWORD *v976;
  uint64_t v977;
  unint64_t v978;
  uint64_t v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  int v985;
  ldiv_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  ldiv_t v993;
  uint64_t v994;
  unsigned int v995;
  int v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int *v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  char v1005;
  unsigned int v1006;
  _QWORD *v1007;
  uint64_t v1008;
  unint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  ldiv_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  int v1023;
  ldiv_t v1024;
  uint64_t v1025;
  char v1026;
  unsigned int v1027;
  int v1028;
  unint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int *v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  char v1037;
  unsigned int v1038;
  _QWORD *v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  int v1048;
  ldiv_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  ldiv_t v1056;
  uint64_t v1057;
  char v1058;
  unsigned int v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unsigned int v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t i;
  ldiv_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  ldiv_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  int v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t *v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t *v1105;
  uint64_t v1106;
  uint64_t v1107;
  int v1108;
  int v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unsigned int v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  int v1120;
  ldiv_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  int v1125;
  ldiv_t v1126;
  uint64_t v1127;
  unsigned int v1128;
  int v1129;
  unint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  int *v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  unsigned int v1138;
  _QWORD *v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  int v1148;
  ldiv_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  ldiv_t v1156;
  uint64_t v1157;
  unsigned int v1158;
  int v1159;
  unint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t *v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  int v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  unsigned int v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  int v1184;
  ldiv_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  int v1189;
  ldiv_t v1190;
  uint64_t v1191;
  unsigned int v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  unint64_t v1200;
  uint64_t *v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unsigned int v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  ldiv_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  int v1224;
  ldiv_t v1225;
  uint64_t v1226;
  unsigned int v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t *v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  char v1248;
  unsigned int v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  ldiv_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  int quot;
  ldiv_t v1259;
  uint64_t v1260;
  char v1261;
  unsigned int v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  uint64_t *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  char v1283;
  unsigned int v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  ldiv_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  ldiv_t v1294;
  uint64_t v1295;
  char v1296;
  unsigned int v1297;
  int v1298;
  unint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t v1310;
  int v1311;
  int v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  unsigned int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  int v1323;
  ldiv_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  int v1328;
  ldiv_t v1329;
  uint64_t v1330;
  int v1331;
  unsigned int v1332;
  int v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t *v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  int v1347;
  unint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int v1351;
  unsigned int v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  int v1358;
  ldiv_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  int v1363;
  ldiv_t v1364;
  uint64_t v1365;
  int v1366;
  unsigned int v1367;
  int v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int *v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  char v1377;
  unsigned int v1378;
  _QWORD *v1379;
  uint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  int v1388;
  ldiv_t v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  ldiv_t v1396;
  uint64_t v1397;
  char v1398;
  unsigned int v1399;
  int v1400;
  unint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  int *v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  char v1409;
  unsigned int v1410;
  _QWORD *v1411;
  uint64_t v1412;
  unint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  ldiv_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  ldiv_t v1428;
  uint64_t v1429;
  char v1430;
  unsigned int v1431;
  int v1432;
  unint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t *v1442;
  uint64_t v1443;
  uint64_t v1444;
  int v1445;
  int v1446;
  unint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  unsigned int v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  int v1457;
  ldiv_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  int v1462;
  ldiv_t v1463;
  uint64_t v1464;
  int v1465;
  unsigned int v1466;
  int v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t *v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t *v1477;
  uint64_t v1478;
  uint64_t v1479;
  int v1480;
  int v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  int v1485;
  unsigned int v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  int v1492;
  ldiv_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  int v1497;
  ldiv_t v1498;
  uint64_t v1499;
  int v1500;
  unsigned int v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t *v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t *v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  unsigned int v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  int v1528;
  ldiv_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  int v1533;
  ldiv_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unsigned int v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  unint64_t v1545;
  uint64_t *v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  unsigned int v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  int v1564;
  ldiv_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  int v1569;
  ldiv_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  unsigned int v1573;
  void *exception;
  unsigned int v1575;
  unsigned int v1576;
  unsigned int v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  unsigned int v1611;
  unint64_t v1612;
  unint64_t v1613;
  unsigned int v1614;
  unsigned int v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  int *v1622;
  int *v1623;
  int *v1624;
  uint64_t v1625;
  int *v1626;
  uint64_t v1627;
  uint64_t v1628;
  int *v1629;
  int *v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unint64_t v1641;
  unint64_t v1642;
  unint64_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  unint64_t v1647;
  unint64_t v1648;
  unint64_t v1649;
  unint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  unint64_t v1658;
  uint64_t v1659;
  unint64_t v1660;
  unint64_t v1661;
  unint64_t v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  unint64_t v1666;
  unint64_t v1667;
  unint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  int v1675;
  int *v1676;
  int v1677;
  unint64_t v1678;
  unint64_t v1679;
  unint64_t v1680;
  unint64_t v1681;
  unint64_t v1682;
  unint64_t v1683;
  mlx::core::array *v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;

  v1 = *(mlx::core::array **)(a1 + 16);
  v2 = a1;
  switch(*(_DWORD *)(*(_QWORD *)v1 + 56))
  {
    case 0:
      v4 = *(uint64_t **)a1;
      v3 = *(uint64_t **)(a1 + 8);
      switch(binary_op_type)
      {
        case 0:
          **(_BYTE **)(*(_QWORD *)v1 + 152) = **(_BYTE **)(*v3 + 152) | **(_BYTE **)(*v4 + 152);
          goto LABEL_33;
        case 1:
          v33 = *(_DWORD *)(*v3 + 160);
          if (v33 >= 1)
          {
            v34 = **(_BYTE **)(*v4 + 152);
            v35 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v36 = *(char **)(*v3 + 152);
            v37 = v33 + 1;
            do
            {
              v38 = *v36++;
              *v35++ = v38 | v34;
              --v37;
            }
            while (v37 > 1);
          }
          goto LABEL_33;
        case 2:
          v39 = *(_DWORD *)(*v4 + 160);
          if (v39 >= 1)
          {
            v40 = **(_BYTE **)(*v3 + 152);
            v41 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v42 = *(char **)(*v4 + 152);
            v43 = v39 + 1;
            do
            {
              v44 = *v42++;
              *v41++ = v44 | v40;
              --v43;
            }
            while (v43 > 1);
          }
          goto LABEL_33;
        case 3:
          v45 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v45 >= 1)
          {
            v46 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v47 = *(char **)(*v3 + 152);
            v48 = *(char **)(*v4 + 152);
            v49 = v45 + 1;
            do
            {
              v51 = *v48++;
              v50 = v51;
              v52 = *v47++;
              *v46++ = v52 | v50;
              --v49;
            }
            while (v49 > 1);
          }
          goto LABEL_33;
        default:
          v24 = *(_QWORD **)v1;
          v25 = (_QWORD *)*v4;
          v26 = *(int **)*v4;
          v27 = (v25[1] - (_QWORD)v26) >> 2;
          v28 = (v27 - 1);
          if ((int)v28 >= -1)
            v29 = -1;
          else
            v29 = v27 - 1;
          v30 = v29 + 1;
          v31 = v27 + 1;
          break;
      }
      while (1)
      {
        v32 = v31 - 2;
        if (v31 - 2 < 0)
          break;
        --v31;
        if (*(_QWORD *)(v25[3] + 8 * v32) != *(_QWORD *)(v24[3] + 8 * v32))
          goto LABEL_179;
      }
      v31 = v30;
LABEL_179:
      v225 = (_QWORD *)*v3;
      v226 = *(int **)*v3;
      v227 = (v225[1] - (_QWORD)v226) >> 2;
      v228 = (v227 - 1);
      if ((int)v228 >= -1)
        v229 = -1;
      else
        v229 = v227 - 1;
      v230 = v229 + 1;
      v231 = v227 + 1;
      while (1)
      {
        v232 = v231 - 2;
        if (v231 - 2 < 0)
          break;
        --v231;
        if (*(_QWORD *)(v225[3] + 8 * v232) != *(_QWORD *)(v24[3] + 8 * v232))
          goto LABEL_218;
      }
      v231 = v230;
LABEL_218:
      v264 = v27 + 1;
      while (1)
      {
        v265 = v264 - 2;
        if (v264 - 2 < 0)
          break;
        --v264;
        if (*(_QWORD *)(v25[3] + 8 * v265))
          goto LABEL_243;
      }
      v264 = v30;
LABEL_243:
      v274 = v227 + 1;
      while (1)
      {
        v275 = v274 - 2;
        if (v274 - 2 < 0)
          break;
        --v274;
        if (*(_QWORD *)(v225[3] + 8 * v275))
          goto LABEL_268;
      }
      v274 = v230;
LABEL_268:
      v284 = (uint64_t)(v24[1] - *v24) >> 2;
      if (v31 <= v231)
        v285 = v231;
      else
        v285 = v31;
      if (v31 <= v274)
        v31 = v274;
      if (v264 > v231)
        v231 = v264;
      if (v284 > v231)
      {
        v286 = 1;
      }
      else
      {
        v231 = (uint64_t)(v24[1] - *v24) >> 2;
        v286 = 4;
      }
      if (v284 > v31)
      {
        v287 = 2;
      }
      else
      {
        v31 = v231;
        v287 = v286;
      }
      if (v284 > v285)
      {
        v31 = v285;
        v287 = 3;
      }
      v1670 = v228;
      v1685 = v28;
      if (!v31)
        goto LABEL_285;
      v288 = *(_QWORD *)(v24[3] + 8 * (v31 - 1));
      if (v288 < 0x10)
        goto LABEL_285;
      v1651 = *(_QWORD *)(v24[3] + 8 * (v31 - 1));
      switch(v287)
      {
        case 1:
          if (v31 == 2)
          {
            v1228 = *v26;
            if ((_DWORD)v1228)
            {
              v1229 = 0;
              v1230 = 0;
              v1231 = 0;
              v1232 = v25[19];
              v1233 = v225[19];
              v1234 = v24[19];
              v1235 = v26[1];
              v1236 = (uint64_t *)v25[3];
              v1237 = *v1236;
              v1238 = v1236[1];
              v1239 = (uint64_t *)v225[3];
              v1241 = *v1239;
              v1240 = v1239[1];
              if (v1235 <= 1)
                v1242 = 1;
              else
                v1242 = v26[1];
              v1243 = v1237 - v1238 * v1235;
              v1244 = v1241 - v1240 * v226[1];
              do
              {
                if ((_DWORD)v1235)
                {
                  v1245 = 0;
                  v1246 = v1233 + v1230;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1247 = 0;
                      v1248 = *(_BYTE *)(v1232 + v1231);
                      v1249 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1234 + v1247) = *(_BYTE *)(v1246 + v1247) | v1248;
                        --v1249;
                        ++v1247;
                      }
                      while (v1249 > 1);
                    }
                    v1231 += v1238;
                    v1230 += v1240;
                    v1234 += (int)v288;
                    ++v1245;
                    v1246 += v1240;
                  }
                  while (v1245 != v1242);
                }
                v1231 += v1243;
                v1230 += v1244;
                ++v1229;
              }
              while (v1229 != v1228);
            }
          }
          else if (v31 == 1)
          {
            v858 = *v26;
            if ((_DWORD)v858)
            {
              v859 = 0;
              v860 = 0;
              v861 = v25[19];
              v862 = v225[19];
              v863 = v24[19];
              v864 = *(_QWORD *)v25[3];
              v865 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v866 = 0;
                  v867 = *(_BYTE *)(v861 + v860);
                  v868 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v863 + v866) = *(_BYTE *)(v862 + v866) | v867;
                    --v868;
                    ++v866;
                  }
                  while (v868 > 1);
                }
                v860 += v864;
                v863 += (int)v288;
                ++v859;
                v862 += v865;
              }
              while (v859 != v858);
            }
          }
          else
          {
            v1612 = v24[6];
            if (v1612)
            {
              v1250 = 0;
              v1579 = v225[19];
              v1585 = v25[19];
              v1599 = (int)v288;
              v1576 = v288 + 1;
              v1251 = v24[19];
              do
              {
                v1627 = v1250;
                v1252 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1253 = v25[3];
                  do
                  {
                    v1254 = ldiv((int)v1250, v26[v28]);
                    LODWORD(v1250) = v1254.quot;
                    v1252 += *(_QWORD *)(v1253 + 8 * v28--) * v1254.rem;
                  }
                  while (v28 != -1);
                }
                v1255 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1256) = 0;
                }
                else
                {
                  v1256 = 0;
                  v1257 = v225[3];
                  quot = v1627;
                  do
                  {
                    v1259 = ldiv(quot, v226[v1255]);
                    quot = v1259.quot;
                    v1256 += *(_QWORD *)(v1257 + 8 * v1255--) * v1259.rem;
                  }
                  while (v1255 != -1);
                }
                if ((int)v1651 >= 1)
                {
                  v1260 = 0;
                  v1261 = *(_BYTE *)(v1585 + (int)v1252);
                  v1262 = v1576;
                  do
                  {
                    *(_BYTE *)(v1251 + v1260) = *(_BYTE *)(v1579 + (int)v1256 + v1260) | v1261;
                    --v1262;
                    ++v1260;
                  }
                  while (v1262 > 1);
                }
                v1251 += v1599;
                v1250 = v1627 + v1599;
                v28 = v1685;
              }
              while (v1627 + v1599 < v1612);
            }
          }
          break;
        case 2:
          if (v31 == 2)
          {
            v1263 = *v26;
            if ((_DWORD)v1263)
            {
              v1264 = 0;
              v1265 = 0;
              v1266 = 0;
              v1267 = v25[19];
              v1268 = v225[19];
              v1269 = v24[19];
              v1270 = v26[1];
              v1271 = (uint64_t *)v25[3];
              v1272 = *v1271;
              v1273 = v1271[1];
              v1274 = (uint64_t *)v225[3];
              v1276 = *v1274;
              v1275 = v1274[1];
              if (v1270 <= 1)
                v1277 = 1;
              else
                v1277 = v26[1];
              v1278 = v1272 - v1273 * v1270;
              v1279 = v1276 - v1275 * v226[1];
              do
              {
                if ((_DWORD)v1270)
                {
                  v1280 = 0;
                  v1281 = v1267 + v1266;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1282 = 0;
                      v1283 = *(_BYTE *)(v1268 + v1265);
                      v1284 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1269 + v1282) = *(_BYTE *)(v1281 + v1282) | v1283;
                        --v1284;
                        ++v1282;
                      }
                      while (v1284 > 1);
                    }
                    v1266 += v1273;
                    v1265 += v1275;
                    v1269 += (int)v288;
                    ++v1280;
                    v1281 += v1273;
                  }
                  while (v1280 != v1277);
                }
                v1266 += v1278;
                v1265 += v1279;
                ++v1264;
              }
              while (v1264 != v1263);
            }
          }
          else if (v31 == 1)
          {
            v869 = *v26;
            if ((_DWORD)v869)
            {
              v870 = 0;
              v871 = 0;
              v872 = v25[19];
              v873 = v225[19];
              v874 = v24[19];
              v875 = *(_QWORD *)v25[3];
              v876 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v877 = 0;
                  v878 = *(_BYTE *)(v873 + v871);
                  v879 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v874 + v877) = *(_BYTE *)(v872 + v877) | v878;
                    --v879;
                    ++v877;
                  }
                  while (v879 > 1);
                }
                v871 += v876;
                v874 += (int)v288;
                ++v870;
                v872 += v875;
              }
              while (v870 != v869);
            }
          }
          else
          {
            v1613 = v24[6];
            if (v1613)
            {
              v1285 = 0;
              v1580 = v225[19];
              v1586 = v25[19];
              v1600 = (int)v288;
              v1577 = v288 + 1;
              v1286 = v24[19];
              do
              {
                v1628 = v1285;
                v1287 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1288 = v25[3];
                  do
                  {
                    v1289 = ldiv((int)v1285, v26[v28]);
                    LODWORD(v1285) = v1289.quot;
                    v1287 += *(_QWORD *)(v1288 + 8 * v28--) * v1289.rem;
                  }
                  while (v28 != -1);
                }
                v1290 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1291) = 0;
                }
                else
                {
                  v1291 = 0;
                  v1292 = v225[3];
                  v1293 = v1628;
                  do
                  {
                    v1294 = ldiv(v1293, v226[v1290]);
                    v1293 = v1294.quot;
                    v1291 += *(_QWORD *)(v1292 + 8 * v1290--) * v1294.rem;
                  }
                  while (v1290 != -1);
                }
                if ((int)v1651 >= 1)
                {
                  v1295 = 0;
                  v1296 = *(_BYTE *)(v1580 + (int)v1291);
                  v1297 = v1577;
                  do
                  {
                    *(_BYTE *)(v1286 + v1295) = *(_BYTE *)(v1586 + (int)v1287 + v1295) | v1296;
                    --v1297;
                    ++v1295;
                  }
                  while (v1297 > 1);
                }
                v1286 += v1600;
                v1285 = v1628 + v1600;
                v28 = v1685;
              }
              while (v1628 + v1600 < v1613);
            }
          }
          break;
        case 3:
          if (v31 == 2)
          {
            v1060 = *v26;
            if ((_DWORD)v1060)
            {
              v1061 = 0;
              v1062 = 0;
              v1063 = 0;
              v1064 = v25[19];
              v1065 = v225[19];
              v1066 = v24[19];
              v1067 = v26[1];
              v1068 = (uint64_t *)v25[3];
              v1069 = *v1068;
              v1070 = v1068[1];
              v1071 = (uint64_t *)v225[3];
              v1073 = *v1071;
              v1072 = v1071[1];
              if (v1067 <= 1)
                v1074 = 1;
              else
                v1074 = v26[1];
              v1075 = v1069 - v1070 * v1067;
              v1076 = v1073 - v1072 * v226[1];
              do
              {
                if ((_DWORD)v1067)
                {
                  v1077 = 0;
                  v1078 = v1065 + v1062;
                  v1079 = v1064 + v1063;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1080 = 0;
                      v1081 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1066 + v1080) = *(_BYTE *)(v1078 + v1080) | *(_BYTE *)(v1079 + v1080);
                        --v1081;
                        ++v1080;
                      }
                      while (v1081 > 1);
                    }
                    v1063 += v1070;
                    v1062 += v1072;
                    v1066 += (int)v288;
                    ++v1077;
                    v1078 += v1072;
                    v1079 += v1070;
                  }
                  while (v1077 != v1074);
                }
                v1063 += v1075;
                v1062 += v1076;
                ++v1061;
              }
              while (v1061 != v1060);
            }
          }
          else if (v31 == 1)
          {
            v339 = *v26;
            if ((_DWORD)v339)
            {
              v340 = 0;
              v341 = v25[19];
              v342 = v225[19];
              v343 = v24[19];
              v344 = *(_QWORD *)v25[3];
              v345 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v346 = 0;
                  v347 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v343 + v346) = *(_BYTE *)(v342 + v346) | *(_BYTE *)(v341 + v346);
                    --v347;
                    ++v346;
                  }
                  while (v347 > 1);
                }
                v343 += (int)v288;
                ++v340;
                v342 += v345;
                v341 += v344;
              }
              while (v340 != v339);
            }
          }
          else
          {
            v1610 = v24[6];
            if (v1610)
            {
              v1082 = 0;
              v1578 = v225[19];
              v1581 = v25[19];
              v1595 = (int)v288;
              v1575 = v288 + 1;
              v1083 = v24[19];
              do
              {
                v1625 = v1082;
                v1084 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1085 = v25[3];
                  for (i = v28; i != -1; --i)
                  {
                    v1087 = ldiv((int)v1082, v26[i]);
                    LODWORD(v1082) = v1087.quot;
                    v1084 += *(_QWORD *)(v1085 + 8 * i) * v1087.rem;
                  }
                }
                v1088 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1089) = 0;
                }
                else
                {
                  v1089 = 0;
                  v1090 = v225[3];
                  v1091 = v1625;
                  do
                  {
                    v1092 = ldiv(v1091, v226[v1088]);
                    v1091 = v1092.quot;
                    v1089 += *(_QWORD *)(v1090 + 8 * v1088--) * v1092.rem;
                  }
                  while (v1088 != -1);
                }
                v28 = v1685;
                if ((int)v1651 >= 1)
                {
                  v1093 = 0;
                  v1094 = v1575;
                  do
                  {
                    *(_BYTE *)(v1083 + v1093) = *(_BYTE *)(v1578 + (int)v1089 + v1093) | *(_BYTE *)(v1581
                                                                                                  + (int)v1084
                                                                                                  + v1093);
                    --v1094;
                    ++v1093;
                  }
                  while (v1094 > 1);
                }
                v1083 += v1595;
                v1082 = v1625 + v1595;
              }
              while (v1625 + v1595 < v1610);
            }
          }
          break;
        default:
LABEL_285:
          switch(v284)
          {
            case 1uLL:
              v289 = v24[6];
              if (v289)
              {
                v290 = (_BYTE *)v25[19];
                v291 = (_BYTE *)v225[19];
                v292 = (_BYTE *)v24[19];
                v293 = *(_QWORD *)v25[3];
                v294 = *(_QWORD *)v225[3];
                do
                {
                  *v292++ = *v291 | *v290;
                  v291 += v294;
                  v290 += v293;
                  --v289;
                }
                while (v289);
              }
              break;
            case 2uLL:
              v482 = *v26;
              if ((_DWORD)v482)
              {
                v483 = 0;
                v484 = 0;
                v485 = 0;
                v486 = 0;
                v487 = v25[19];
                v488 = v225[19];
                v489 = v24[19];
                v490 = v26[1];
                v491 = (uint64_t *)v25[3];
                v492 = *v491;
                v493 = v491[1];
                v494 = (uint64_t *)v225[3];
                v495 = *v494;
                v496 = v494[1];
                v497 = v495 - v496 * v226[1];
                if (v490 <= 1)
                  v498 = 1;
                else
                  v498 = v26[1];
                v499 = v492 - v493 * v490;
                do
                {
                  if ((_DWORD)v490)
                  {
                    v500 = v484 + v498;
                    v501 = (_BYTE *)(v489 + v484);
                    v502 = v498;
                    do
                    {
                      *v501++ = *(_BYTE *)(v488 + v485) | *(_BYTE *)(v487 + v486);
                      v486 += v493;
                      v485 += v496;
                      --v502;
                    }
                    while (v502);
                    v484 = v500;
                  }
                  v486 += v499;
                  v485 += v497;
                  ++v483;
                }
                while (v483 != v482);
              }
              break;
            case 3uLL:
              v503 = *v26;
              if ((_DWORD)v503)
              {
                v504 = 0;
                v505 = 0;
                v506 = 0;
                v507 = 0;
                v508 = v25[19];
                v509 = v225[19];
                v510 = v24[19];
                v511 = v26[1];
                v512 = (_QWORD *)v25[3];
                v513 = v512[1];
                v514 = (_QWORD *)v225[3];
                v515 = v514[1];
                v516 = *v514 - v515 * v226[1];
                if (v511 <= 1)
                  v517 = 1;
                else
                  v517 = v26[1];
                v518 = *v512 - v513 * v511;
                do
                {
                  if ((_DWORD)v511)
                  {
                    v519 = 0;
                    v520 = v26[2];
                    v521 = v512[2];
                    v522 = v514[2];
                    if (v520 <= 1)
                      v523 = 1;
                    else
                      v523 = v26[2];
                    v524 = v515 - v522 * v226[2];
                    do
                    {
                      v525 = v523;
                      if ((_DWORD)v520)
                      {
                        do
                        {
                          *(_BYTE *)(v510 + v505++) = *(_BYTE *)(v509 + v506) | *(_BYTE *)(v508 + v507);
                          v507 += v521;
                          v506 += v522;
                          --v525;
                        }
                        while (v525);
                      }
                      v507 += v513 - v521 * v520;
                      v506 += v524;
                      ++v519;
                    }
                    while (v519 != v517);
                  }
                  v507 += v518;
                  v506 += v516;
                  ++v504;
                }
                while (v504 != v503);
              }
              break;
            case 4uLL:
              v1690 = *v26;
              if ((_DWORD)v1690)
              {
                v526 = 0;
                v527 = 0;
                v528 = 0;
                v529 = 0;
                v530 = v25[19];
                v531 = v225[19];
                v532 = v24[19];
                v533 = v26[1];
                v534 = (_QWORD *)v25[3];
                v535 = (_QWORD *)v225[3];
                v1594 = v535[1];
                v1608 = v534[1];
                v1653 = *v535 - v1594 * v226[1];
                v1675 = v26[1];
                if (v533 <= 1)
                  v536 = 1;
                else
                  v536 = v26[1];
                v1617 = *v534 - v534[1] * v533;
                v1631 = v2;
                do
                {
                  if (v1675)
                  {
                    v537 = 0;
                    v538 = v26[2];
                    v539 = v534[2];
                    v540 = v535[2];
                    if (v538 <= 1)
                      v541 = 1;
                    else
                      v541 = v26[2];
                    v542 = v1594 - v540 * v226[2];
                    do
                    {
                      if ((_DWORD)v538)
                      {
                        v543 = 0;
                        v544 = v26[3];
                        v545 = v534[3];
                        v546 = v535[3];
                        if (v544 <= 1)
                          v547 = 1;
                        else
                          v547 = v26[3];
                        v548 = v540 - v546 * v226[3];
                        do
                        {
                          v549 = v547;
                          if ((_DWORD)v544)
                          {
                            do
                            {
                              *(_BYTE *)(v532 + v527++) = *(_BYTE *)(v531 + v528) | *(_BYTE *)(v530 + v529);
                              v529 += v545;
                              v528 += v546;
                              --v549;
                            }
                            while (v549);
                          }
                          v529 += v539 - v545 * v544;
                          v528 += v548;
                          ++v543;
                        }
                        while (v543 != v541);
                      }
                      v529 += v1608 - v539 * v538;
                      v528 += v542;
                      ++v537;
                    }
                    while (v537 != v536);
                  }
                  v2 = v1631;
                  v529 += v1617;
                  v528 += v1653;
                  ++v526;
                }
                while (v526 != v1690);
              }
              break;
            default:
              v1652 = v24[6];
              if (v1652)
              {
                v471 = 0;
                v1607 = v225[19];
                v1616 = v25[19];
                v1593 = v24[19];
                do
                {
                  v472 = 0;
                  if ((v28 & 0x80000000) == 0)
                  {
                    v473 = v25[3];
                    v474 = v28;
                    v475 = v471;
                    do
                    {
                      v476 = ldiv(v475, v26[v474]);
                      v475 = v476.quot;
                      v472 += *(_QWORD *)(v473 + 8 * v474--) * v476.rem;
                    }
                    while (v474 != -1);
                  }
                  v477 = v1670;
                  if ((v1670 & 0x80000000) != 0)
                  {
                    LODWORD(v478) = 0;
                  }
                  else
                  {
                    v478 = 0;
                    v479 = v225[3];
                    v480 = v471;
                    do
                    {
                      v481 = ldiv(v480, v226[v477]);
                      v480 = v481.quot;
                      v478 += *(_QWORD *)(v479 + 8 * v477--) * v481.rem;
                    }
                    while (v477 != -1);
                  }
                  *(_BYTE *)(v1593 + v471++) = *(_BYTE *)(v1607 + (int)v478) | *(_BYTE *)(v1616 + (int)v472);
                  v28 = v1685;
                }
                while (v471 != v1652);
              }
              break;
          }
          break;
      }
LABEL_33:
      v53 = *(uint64_t **)v2;
      v54 = *(uint64_t **)(v2 + 8);
      v55 = *(mlx::core::array **)(v2 + 16);
      switch(v56)
      {
        case 0:
          v18 = **(_BYTE **)(*v54 + 152) | **(_BYTE **)(*v53 + 152);
          v19 = *(_QWORD *)v55;
          goto LABEL_35;
        case 1:
          v65 = *(_DWORD *)(*v54 + 160);
          if (v65 >= 1)
          {
            v66 = **(_BYTE **)(*v53 + 152);
            v67 = *(_BYTE **)(*(_QWORD *)v55 + 152);
            v68 = *(char **)(*v54 + 152);
            v69 = v65 + 1;
            do
            {
              v70 = *v68++;
              *v67++ = v70 | v66;
              --v69;
            }
            while (v69 > 1);
          }
          return;
        case 2:
          v71 = *(_DWORD *)(*v53 + 160);
          if (v71 >= 1)
          {
            v72 = **(_BYTE **)(*v54 + 152);
            v73 = *(_BYTE **)(*(_QWORD *)v55 + 152);
            v74 = *(char **)(*v53 + 152);
            v75 = v71 + 1;
            do
            {
              v76 = *v74++;
              *v73++ = v76 | v72;
              --v75;
            }
            while (v75 > 1);
          }
          return;
        case 3:
          v77 = *(_DWORD *)(*(_QWORD *)v55 + 48);
          if (v77 >= 1)
          {
            v78 = *(_BYTE **)(*(_QWORD *)v55 + 152);
            v79 = *(char **)(*v54 + 152);
            v80 = *(char **)(*v53 + 152);
            v81 = v77 + 1;
            do
            {
              v83 = *v80++;
              v82 = v83;
              v84 = *v79++;
              *v78++ = v84 | v82;
              --v81;
            }
            while (v81 > 1);
          }
          return;
        default:
          v57 = *(_QWORD **)v55;
          v58 = *v53;
          v59 = *(int **)*v53;
          v60 = (*(_QWORD *)(*v53 + 8) - (_QWORD)v59) >> 2;
          v61 = v60 - 1;
          if ((int)v60 - 1 >= -1)
            v61 = -1;
          v62 = v61 + 1;
          v63 = v60 + 1;
          break;
      }
      while (1)
      {
        v64 = v63 - 2;
        if (v63 - 2 < 0)
          break;
        --v63;
        if (*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v64) != *(_QWORD *)(v57[3] + 8 * v64))
          goto LABEL_55;
      }
      v63 = v62;
LABEL_55:
      v85 = (int **)*v54;
      v86 = *(int **)*v54;
      v87 = (*(_QWORD *)(*v54 + 8) - (_QWORD)v86) >> 2;
      v88 = v87 - 1;
      if ((int)v87 - 1 >= -1)
        v88 = -1;
      v89 = v88 + 1;
      v90 = v87 + 1;
      while (1)
      {
        v91 = v90 - 2;
        if (v90 - 2 < 0)
          break;
        --v90;
        if (*(_QWORD *)&v85[3][2 * v91] != *(_QWORD *)(v57[3] + 8 * v91))
          goto LABEL_62;
      }
      v90 = v89;
LABEL_62:
      v92 = v60 + 1;
      while (1)
      {
        v93 = v92 - 2;
        if (v92 - 2 < 0)
          break;
        --v92;
        if (*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v93))
          goto LABEL_67;
      }
      v92 = v62;
LABEL_67:
      v94 = v87 + 1;
      while (1)
      {
        v95 = v94 - 2;
        if (v94 - 2 < 0)
          break;
        --v94;
        if (*(_QWORD *)&v85[3][2 * v95])
          goto LABEL_72;
      }
      v94 = v89;
LABEL_72:
      v96 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v63 <= v90)
        v97 = v90;
      else
        v97 = v63;
      if (v63 <= v94)
        v63 = v94;
      if (v92 > v90)
        v90 = v92;
      if (v96 > v90)
      {
        v98 = 1;
      }
      else
      {
        v90 = (uint64_t)(v57[1] - *v57) >> 2;
        v98 = 4;
      }
      if (v96 > v63)
      {
        v99 = 2;
      }
      else
      {
        v63 = v90;
        v99 = v98;
      }
      if (v96 > v97)
      {
        v63 = v97;
        v99 = 3;
      }
      v1684 = v55;
      if (!v63)
        goto LABEL_89;
      v100 = *(_QWORD *)(v57[3] + 8 * (v63 - 1));
      if (v100 < 0x10)
        goto LABEL_89;
      switch(v99)
      {
        case 1:
          if (v63 == 2)
          {
            v996 = *v59;
            if (*v59)
            {
              v997 = 0;
              v998 = 0;
              v999 = 0;
              v1000 = *(_QWORD *)(v58 + 152);
              v1001 = v85[19];
              v1002 = v57[19];
              do
              {
                if (v59[1])
                {
                  v1003 = 0;
                  do
                  {
                    if ((int)v100 >= 1)
                    {
                      v1004 = 0;
                      v1005 = *(_BYTE *)(v1000 + v999);
                      v1006 = v100 + 1;
                      do
                      {
                        *(_BYTE *)(v1002 + v1004) = *((_BYTE *)v1001 + v998 + v1004) | v1005;
                        --v1006;
                        ++v1004;
                      }
                      while (v1006 > 1);
                      v58 = *v53;
                      v85 = (int **)*v54;
                      v59 = *(int **)*v53;
                    }
                    v1007 = *(_QWORD **)(v58 + 24);
                    v1008 = v1007[1];
                    v999 += v1008;
                    v998 += *((_QWORD *)v85[3] + 1);
                    v1002 += (int)v100;
                    ++v1003;
                    v1009 = v59[1];
                  }
                  while (v1003 < v1009);
                  v996 = *v59;
                  v86 = *v85;
                }
                else
                {
                  v1009 = 0;
                  v1007 = *(_QWORD **)(v58 + 24);
                  v1008 = v1007[1];
                }
                v999 = *v1007 + v999 - v1009 * v1008;
                v998 = *(_QWORD *)v85[3] + v998 - *((_QWORD *)v85[3] + 1) * v86[1];
                ++v997;
              }
              while (v997 < v996);
            }
          }
          else if (v63 == 1)
          {
            v451 = *v59;
            if (*v59)
            {
              v452 = 0;
              v453 = 0;
              v454 = 0;
              v455 = *(_QWORD *)(v58 + 152);
              v456 = v85[19];
              v457 = v57[19];
              do
              {
                if ((int)v100 >= 1)
                {
                  v458 = 0;
                  v459 = *(_BYTE *)(v455 + v454);
                  v460 = v100 + 1;
                  do
                  {
                    *(_BYTE *)(v457 + v458) = *((_BYTE *)v456 + v453 + v458) | v459;
                    --v460;
                    ++v458;
                  }
                  while (v460 > 1);
                  v58 = *v53;
                  v85 = (int **)*v54;
                  v451 = **(_DWORD **)*v53;
                }
                v454 += **(_QWORD **)(v58 + 24);
                v453 += *(_QWORD *)v85[3];
                v457 += (int)v100;
                ++v452;
              }
              while (v452 < v451);
            }
          }
          else if (v57[6])
          {
            v1623 = v85[19];
            v1637 = *(_QWORD *)(v58 + 152);
            v1679 = 0;
            v1010 = v57[19];
            do
            {
              v1011 = *(_QWORD *)*v53;
              v1012 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v1011) >> 2;
              v1013 = 0;
              v1014 = (v1012 - 1);
              if ((int)v1012 - 1 >= 0)
              {
                v1015 = *(_QWORD *)(*v53 + 24);
                v1016 = v1679;
                do
                {
                  v1017 = ldiv(v1016, *(int *)(v1011 + 4 * v1014));
                  v1016 = v1017.quot;
                  v1013 += *(_QWORD *)(v1015 + 8 * v1014--) * v1017.rem;
                }
                while (v1014 != -1);
              }
              v1018 = *(_QWORD *)*v54;
              v1019 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v1018) >> 2;
              v1020 = 0;
              v1021 = (v1019 - 1);
              if ((int)v1019 - 1 >= 0)
              {
                v1022 = *(_QWORD *)(*v54 + 24);
                v1023 = v1679;
                do
                {
                  v1024 = ldiv(v1023, *(int *)(v1018 + 4 * v1021));
                  v1023 = v1024.quot;
                  v1020 += *(_QWORD *)(v1022 + 8 * v1021--) * v1024.rem;
                }
                while (v1021 != -1);
              }
              if ((int)v100 >= 1)
              {
                v1025 = 0;
                v1026 = *(_BYTE *)(v1637 + (int)v1013);
                v1027 = v100 + 1;
                do
                {
                  *(_BYTE *)(v1010 + v1025) = *((_BYTE *)v1623 + (int)v1020 + v1025) | v1026;
                  --v1027;
                  ++v1025;
                }
                while (v1027 > 1);
                v57 = *(_QWORD **)v1684;
              }
              v1010 += (int)v100;
              v1679 += (int)v100;
            }
            while (v1679 < v57[6]);
          }
          break;
        case 2:
          if (v63 == 2)
          {
            v1028 = *v59;
            if (*v59)
            {
              v1029 = 0;
              v1030 = 0;
              v1031 = 0;
              v1032 = *(_QWORD *)(v58 + 152);
              v1033 = v85[19];
              v1034 = v57[19];
              do
              {
                if (v59[1])
                {
                  v1035 = 0;
                  do
                  {
                    if ((int)v100 >= 1)
                    {
                      v1036 = 0;
                      v1037 = *((_BYTE *)v1033 + v1030);
                      v1038 = v100 + 1;
                      do
                      {
                        *(_BYTE *)(v1034 + v1036) = *(_BYTE *)(v1032 + v1031 + v1036) | v1037;
                        --v1038;
                        ++v1036;
                      }
                      while (v1038 > 1);
                      v58 = *v53;
                      v85 = (int **)*v54;
                      v59 = *(int **)*v53;
                    }
                    v1039 = *(_QWORD **)(v58 + 24);
                    v1040 = v1039[1];
                    v1031 += v1040;
                    v1030 += *((_QWORD *)v85[3] + 1);
                    v1034 += (int)v100;
                    ++v1035;
                    v1041 = v59[1];
                  }
                  while (v1035 < v1041);
                  v1028 = *v59;
                  v86 = *v85;
                }
                else
                {
                  v1041 = 0;
                  v1039 = *(_QWORD **)(v58 + 24);
                  v1040 = v1039[1];
                }
                v1031 = *v1039 + v1031 - v1041 * v1040;
                v1030 = *(_QWORD *)v85[3] + v1030 - *((_QWORD *)v85[3] + 1) * v86[1];
                ++v1029;
              }
              while (v1029 < v1028);
            }
          }
          else if (v63 == 1)
          {
            v461 = *v59;
            if (*v59)
            {
              v462 = 0;
              v463 = 0;
              v464 = 0;
              v465 = *(_QWORD *)(v58 + 152);
              v466 = v85[19];
              v467 = v57[19];
              do
              {
                if ((int)v100 >= 1)
                {
                  v468 = 0;
                  v469 = *((_BYTE *)v466 + v463);
                  v470 = v100 + 1;
                  do
                  {
                    *(_BYTE *)(v467 + v468) = *(_BYTE *)(v465 + v464 + v468) | v469;
                    --v470;
                    ++v468;
                  }
                  while (v470 > 1);
                  v58 = *v53;
                  v85 = (int **)*v54;
                  v461 = **(_DWORD **)*v53;
                }
                v464 += **(_QWORD **)(v58 + 24);
                v463 += *(_QWORD *)v85[3];
                v467 += (int)v100;
                ++v462;
              }
              while (v462 < v461);
            }
          }
          else if (v57[6])
          {
            v1624 = v85[19];
            v1638 = *(_QWORD *)(v58 + 152);
            v1680 = 0;
            v1042 = v57[19];
            do
            {
              v1043 = *(_QWORD *)*v53;
              v1044 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v1043) >> 2;
              v1045 = 0;
              v1046 = (v1044 - 1);
              if ((int)v1044 - 1 >= 0)
              {
                v1047 = *(_QWORD *)(*v53 + 24);
                v1048 = v1680;
                do
                {
                  v1049 = ldiv(v1048, *(int *)(v1043 + 4 * v1046));
                  v1048 = v1049.quot;
                  v1045 += *(_QWORD *)(v1047 + 8 * v1046--) * v1049.rem;
                }
                while (v1046 != -1);
              }
              v1050 = *(_QWORD *)*v54;
              v1051 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v1050) >> 2;
              v1052 = 0;
              v1053 = (v1051 - 1);
              if ((int)v1051 - 1 >= 0)
              {
                v1054 = *(_QWORD *)(*v54 + 24);
                v1055 = v1680;
                do
                {
                  v1056 = ldiv(v1055, *(int *)(v1050 + 4 * v1053));
                  v1055 = v1056.quot;
                  v1052 += *(_QWORD *)(v1054 + 8 * v1053--) * v1056.rem;
                }
                while (v1053 != -1);
              }
              if ((int)v100 >= 1)
              {
                v1057 = 0;
                v1058 = *((_BYTE *)v1624 + (int)v1052);
                v1059 = v100 + 1;
                do
                {
                  *(_BYTE *)(v1042 + v1057) = *(_BYTE *)(v1638 + (int)v1045 + v1057) | v1058;
                  --v1059;
                  ++v1057;
                }
                while (v1059 > 1);
                v57 = *(_QWORD **)v1684;
              }
              v1042 += (int)v100;
              v1680 += (int)v100;
            }
            while (v1680 < v57[6]);
          }
          break;
        case 3:
          if (v63 == 2)
          {
            v966 = *v59;
            if (*v59)
            {
              v967 = 0;
              v968 = 0;
              v969 = 0;
              v970 = *(_QWORD *)(v58 + 152);
              v971 = v85[19];
              v972 = v57[19];
              do
              {
                if (v59[1])
                {
                  v973 = 0;
                  do
                  {
                    if ((int)v100 >= 1)
                    {
                      v974 = 0;
                      v975 = v100 + 1;
                      do
                      {
                        *(_BYTE *)(v972 + v974) = *((_BYTE *)v971 + v968 + v974) | *(_BYTE *)(v970 + v969 + v974);
                        --v975;
                        ++v974;
                      }
                      while (v975 > 1);
                      v58 = *v53;
                      v85 = (int **)*v54;
                      v59 = *(int **)*v53;
                    }
                    v976 = *(_QWORD **)(v58 + 24);
                    v977 = v976[1];
                    v969 += v977;
                    v968 += *((_QWORD *)v85[3] + 1);
                    v972 += (int)v100;
                    ++v973;
                    v978 = v59[1];
                  }
                  while (v973 < v978);
                  v966 = *v59;
                  v86 = *v85;
                }
                else
                {
                  v978 = 0;
                  v976 = *(_QWORD **)(v58 + 24);
                  v977 = v976[1];
                }
                v969 = *v976 + v969 - v978 * v977;
                v968 = *(_QWORD *)v85[3] + v968 - *((_QWORD *)v85[3] + 1) * v86[1];
                ++v967;
              }
              while (v967 < v966);
            }
          }
          else if (v63 == 1)
          {
            v216 = *v59;
            if (*v59)
            {
              v217 = 0;
              v218 = 0;
              v219 = 0;
              v220 = *(_QWORD *)(v58 + 152);
              v221 = v85[19];
              v222 = v57[19];
              do
              {
                if ((int)v100 >= 1)
                {
                  v223 = 0;
                  v224 = v100 + 1;
                  do
                  {
                    *(_BYTE *)(v222 + v223) = *((_BYTE *)v221 + v218 + v223) | *(_BYTE *)(v220 + v219 + v223);
                    --v224;
                    ++v223;
                  }
                  while (v224 > 1);
                  v58 = *v53;
                  v85 = (int **)*v54;
                  v216 = **(_DWORD **)*v53;
                }
                v219 += **(_QWORD **)(v58 + 24);
                v218 += *(_QWORD *)v85[3];
                v222 += (int)v100;
                ++v217;
              }
              while (v217 < v216);
            }
          }
          else if (v57[6])
          {
            v1622 = v85[19];
            v1636 = *(_QWORD *)(v58 + 152);
            v1678 = 0;
            v979 = v57[19];
            do
            {
              v980 = *(_QWORD *)*v53;
              v981 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v980) >> 2;
              v982 = 0;
              v983 = (v981 - 1);
              if ((int)v981 - 1 >= 0)
              {
                v984 = *(_QWORD *)(*v53 + 24);
                v985 = v1678;
                do
                {
                  v986 = ldiv(v985, *(int *)(v980 + 4 * v983));
                  v985 = v986.quot;
                  v982 += *(_QWORD *)(v984 + 8 * v983--) * v986.rem;
                }
                while (v983 != -1);
              }
              v987 = *(_QWORD *)*v54;
              v988 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v987) >> 2;
              v989 = 0;
              v990 = (v988 - 1);
              if ((int)v988 - 1 >= 0)
              {
                v991 = *(_QWORD *)(*v54 + 24);
                v992 = v1678;
                do
                {
                  v993 = ldiv(v992, *(int *)(v987 + 4 * v990));
                  v992 = v993.quot;
                  v989 += *(_QWORD *)(v991 + 8 * v990--) * v993.rem;
                }
                while (v990 != -1);
              }
              if ((int)v100 >= 1)
              {
                v994 = 0;
                v995 = v100 + 1;
                do
                {
                  *(_BYTE *)(v979 + v994) = *((_BYTE *)v1622 + (int)v989 + v994) | *(_BYTE *)(v1636 + (int)v982 + v994);
                  --v995;
                  ++v994;
                }
                while (v995 > 1);
                v57 = *(_QWORD **)v1684;
              }
              v979 += (int)v100;
              v1678 += (int)v100;
            }
            while (v1678 < v57[6]);
          }
          break;
        default:
LABEL_89:
          switch(v96)
          {
            case 1uLL:
              if (v57[6])
              {
                v101 = 0;
                v102 = 0;
                v103 = 0;
                v104 = *(_QWORD *)(v58 + 152);
                v105 = v85[19];
                v106 = v57[19];
                do
                {
                  *(_BYTE *)(v106 + v101) = *((_BYTE *)v105 + v102) | *(_BYTE *)(v104 + v103);
                  v103 += **(_QWORD **)(*v53 + 24);
                  v102 += **(_QWORD **)(*v54 + 24);
                  ++v101;
                }
                while (v101 < *(_QWORD *)(*(_QWORD *)v55 + 48));
              }
              break;
            case 2uLL:
              v401 = *v59;
              if (*v59)
              {
                v402 = 0;
                v403 = 0;
                v404 = 0;
                v405 = 0;
                v406 = *(_QWORD *)(v58 + 152);
                v407 = v85[19];
                v408 = v57[19];
                do
                {
                  if (v59[1])
                  {
                    v409 = 0;
                    do
                    {
                      *(_BYTE *)(v408 + v403 + v409) = *((_BYTE *)v407 + v404) | *(_BYTE *)(v406 + v405);
                      v58 = *v53;
                      v410 = *(_QWORD **)(*v53 + 24);
                      v411 = v410[1];
                      v405 += v411;
                      v85 = (int **)*v54;
                      v412 = *(int **)(*v54 + 24);
                      v413 = *((_QWORD *)v412 + 1);
                      v404 += v413;
                      ++v409;
                      v59 = *(int **)*v53;
                      v414 = v59[1];
                    }
                    while (v409 < v414);
                    v401 = *v59;
                    v86 = *v85;
                    v403 += v409;
                  }
                  else
                  {
                    v414 = 0;
                    v410 = *(_QWORD **)(v58 + 24);
                    v411 = v410[1];
                    v412 = v85[3];
                    v413 = *((_QWORD *)v412 + 1);
                  }
                  v405 = *v410 + v405 - v414 * v411;
                  v404 = *(_QWORD *)v412 + v404 - v413 * v86[1];
                  ++v402;
                }
                while (v402 < v401);
              }
              break;
            case 3uLL:
              v415 = *v59;
              if (*v59)
              {
                v416 = 0;
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = *(_QWORD *)(v58 + 152);
                v421 = v85[19];
                v422 = v57[19];
                do
                {
                  if (v59[1])
                  {
                    v423 = 0;
                    do
                    {
                      if (v59[2])
                      {
                        v424 = 0;
                        do
                        {
                          *(_BYTE *)(v422 + v417 + v424) = *((_BYTE *)v421 + v418) | *(_BYTE *)(v420 + v419);
                          v58 = *v53;
                          v425 = *(_QWORD **)(*v53 + 24);
                          v426 = v425[2];
                          v419 += v426;
                          v85 = (int **)*v54;
                          v427 = *(int **)(*v54 + 24);
                          v428 = *((_QWORD *)v427 + 2);
                          v418 += v428;
                          ++v424;
                          v59 = *(int **)*v53;
                          v429 = v59[2];
                        }
                        while (v424 < v429);
                        v86 = *v85;
                        v417 += v424;
                      }
                      else
                      {
                        v429 = 0;
                        v425 = *(_QWORD **)(v58 + 24);
                        v426 = v425[2];
                        v427 = v85[3];
                        v428 = *((_QWORD *)v427 + 2);
                      }
                      v430 = v425[1];
                      v419 = v430 + v419 - v429 * v426;
                      v418 = *((_QWORD *)v427 + 1) + v418 - v428 * v86[2];
                      ++v423;
                      v431 = v59[1];
                    }
                    while (v423 < v431);
                    v415 = *v59;
                  }
                  else
                  {
                    v431 = 0;
                    v425 = *(_QWORD **)(v58 + 24);
                    v430 = v425[1];
                  }
                  v419 = *v425 + v419 - v431 * v430;
                  v418 = *(_QWORD *)v85[3] + v418 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            case 4uLL:
              v432 = *v59;
              if (*v59)
              {
                v433 = 0;
                v434 = 0;
                v435 = 0;
                v436 = 0;
                v437 = *(_QWORD *)(v58 + 152);
                v438 = v85[19];
                v439 = v57[19];
                do
                {
                  if (v59[1])
                  {
                    v440 = 0;
                    do
                    {
                      if (v59[2])
                      {
                        v441 = 0;
                        do
                        {
                          if (v59[3])
                          {
                            v442 = 0;
                            do
                            {
                              *(_BYTE *)(v439 + v434 + v442) = *((_BYTE *)v438 + v435) | *(_BYTE *)(v437 + v436);
                              v58 = *v53;
                              v443 = *(_QWORD **)(*v53 + 24);
                              v444 = v443[3];
                              v436 += v444;
                              v85 = (int **)*v54;
                              v445 = *(int **)(*v54 + 24);
                              v446 = *((_QWORD *)v445 + 3);
                              v435 += v446;
                              ++v442;
                              v59 = *(int **)*v53;
                              v447 = v59[3];
                            }
                            while (v442 < v447);
                            v86 = *v85;
                            v434 += v442;
                          }
                          else
                          {
                            v447 = 0;
                            v443 = *(_QWORD **)(v58 + 24);
                            v444 = v443[3];
                            v445 = v85[3];
                            v446 = *((_QWORD *)v445 + 3);
                          }
                          v448 = v443[2];
                          v436 = v448 + v436 - v447 * v444;
                          v435 = *((_QWORD *)v445 + 2) + v435 - v446 * v86[3];
                          ++v441;
                          v449 = v59[2];
                        }
                        while (v441 < v449);
                      }
                      else
                      {
                        v449 = 0;
                        v443 = *(_QWORD **)(v58 + 24);
                        v448 = v443[2];
                      }
                      v436 = v443[1] + v436 - v449 * v448;
                      v435 = *((_QWORD *)v85[3] + 1) + v435 - *((_QWORD *)v85[3] + 2) * v86[2];
                      ++v440;
                      v450 = v59[1];
                    }
                    while (v440 < v450);
                    v432 = *v59;
                  }
                  else
                  {
                    v450 = 0;
                  }
                  v436 = **(_QWORD **)(v58 + 24) + v436 - *(_QWORD *)(*(_QWORD *)(v58 + 24) + 8) * v450;
                  v435 = *(_QWORD *)v85[3] + v435 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v433;
                }
                while (v433 < v432);
              }
              break;
            default:
              if (v57[6])
              {
                v384 = 0;
                v1674 = *(_QWORD *)(v58 + 152);
                v385 = v85[19];
                v386 = v57[19];
                do
                {
                  v387 = *(_QWORD *)*v53;
                  v388 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v387) >> 2;
                  v389 = 0;
                  v390 = (v388 - 1);
                  if ((int)v388 - 1 >= 0)
                  {
                    v391 = *(_QWORD *)(*v53 + 24);
                    v392 = v384;
                    do
                    {
                      v393 = ldiv(v392, *(int *)(v387 + 4 * v390));
                      v392 = v393.quot;
                      v389 += *(_QWORD *)(v391 + 8 * v390--) * v393.rem;
                    }
                    while (v390 != -1);
                  }
                  v394 = *(_QWORD *)*v54;
                  v395 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v394) >> 2;
                  v396 = 0;
                  v397 = (v395 - 1);
                  if ((int)v395 - 1 >= 0)
                  {
                    v398 = *(_QWORD *)(*v54 + 24);
                    v399 = v384;
                    do
                    {
                      v400 = ldiv(v399, *(int *)(v394 + 4 * v397));
                      v399 = v400.quot;
                      v396 += *(_QWORD *)(v398 + 8 * v397--) * v400.rem;
                    }
                    while (v397 != -1);
                  }
                  *(_BYTE *)(v386 + v384++) = *((_BYTE *)v385 + (int)v396) | *(_BYTE *)(v1674 + (int)v389);
                }
                while (v384 < *(_QWORD *)(*(_QWORD *)v1684 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 1:
      goto LABEL_33;
    case 2:
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      switch(v8)
      {
        case 0:
          goto LABEL_12;
        case 1:
          v9 = *(_DWORD *)(*v6 + 160);
          if (v9 >= 1)
          {
            v10 = **(_DWORD **)(*v7 + 152);
            v11 = *(int **)(*(_QWORD *)v1 + 152);
            v12 = *(int **)(*v6 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = v14 | v10;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v116 = *(_DWORD *)(*v7 + 160);
          if (v116 >= 1)
          {
            v117 = **(_DWORD **)(*v6 + 152);
            v118 = *(int **)(*(_QWORD *)v1 + 152);
            v119 = *(int **)(*v7 + 152);
            v120 = v116 + 1;
            do
            {
              v121 = *v119++;
              *v118++ = v121 | v117;
              --v120;
            }
            while (v120 > 1);
          }
          return;
        case 3:
          v122 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v122 >= 1)
          {
            v123 = *(int **)(*(_QWORD *)v1 + 152);
            v124 = *(int **)(*v6 + 152);
            v125 = *(int **)(*v7 + 152);
            v126 = v122 + 1;
            do
            {
              v128 = *v125++;
              v127 = v128;
              v129 = *v124++;
              *v123++ = v129 | v127;
              --v126;
            }
            while (v126 > 1);
          }
          return;
        default:
          v107 = *(_QWORD **)v1;
          v108 = (_QWORD *)*v7;
          v109 = *(int **)*v7;
          v110 = (v108[1] - (_QWORD)v109) >> 2;
          v111 = (v110 - 1);
          if ((int)v111 >= -1)
            v112 = -1;
          else
            v112 = v110 - 1;
          v113 = v112 + 1;
          v114 = v110 + 1;
          break;
      }
      while (1)
      {
        v115 = v114 - 2;
        if (v114 - 2 < 0)
          break;
        --v114;
        if (*(_QWORD *)(v108[3] + 8 * v115) != *(_QWORD *)(v107[3] + 8 * v115))
          goto LABEL_187;
      }
      v114 = v113;
LABEL_187:
      v233 = (_QWORD *)*v6;
      v234 = *(int **)*v6;
      v235 = (v233[1] - (_QWORD)v234) >> 2;
      v236 = (v235 - 1);
      if ((int)v236 >= -1)
        v237 = -1;
      else
        v237 = v235 - 1;
      v238 = v237 + 1;
      v239 = v235 + 1;
      while (1)
      {
        v240 = v239 - 2;
        if (v239 - 2 < 0)
          break;
        --v239;
        if (*(_QWORD *)(v233[3] + 8 * v240) != *(_QWORD *)(v107[3] + 8 * v240))
          goto LABEL_223;
      }
      v239 = v238;
LABEL_223:
      v266 = v110 + 1;
      while (1)
      {
        v267 = v266 - 2;
        if (v266 - 2 < 0)
          break;
        --v266;
        if (*(_QWORD *)(v108[3] + 8 * v267))
          goto LABEL_248;
      }
      v266 = v113;
LABEL_248:
      v276 = v235 + 1;
      while (1)
      {
        v277 = v276 - 2;
        if (v276 - 2 < 0)
          break;
        --v276;
        if (*(_QWORD *)(v233[3] + 8 * v277))
          goto LABEL_291;
      }
      v276 = v238;
LABEL_291:
      v295 = (uint64_t)(v107[1] - *v107) >> 2;
      if (v114 <= v239)
        v296 = v239;
      else
        v296 = v114;
      if (v114 <= v276)
        v114 = v276;
      if (v266 > v239)
        v239 = v266;
      if (v295 > v239)
      {
        v297 = 1;
      }
      else
      {
        v239 = (uint64_t)(v107[1] - *v107) >> 2;
        v297 = 4;
      }
      if (v295 > v114)
      {
        v298 = 2;
      }
      else
      {
        v114 = v239;
        v298 = v297;
      }
      if (v295 > v296)
      {
        v114 = v296;
        v298 = 3;
      }
      v1671 = v236;
      v1686 = v111;
      if (!v114)
        goto LABEL_308;
      v299 = *(_QWORD *)(v107[3] + 8 * (v114 - 1));
      if (v299 < 0x10)
        goto LABEL_308;
      switch(v298)
      {
        case 1:
          if (v114 == 2)
          {
            v1298 = *v109;
            if (*v109)
            {
              v1299 = 0;
              v1300 = 0;
              v1301 = 0;
              v1302 = v108[19];
              v1303 = v233[19];
              v1304 = v107[19];
              v1305 = (uint64_t *)v108[3];
              v1306 = *v1305;
              v1307 = v1305[1];
              v1308 = (uint64_t *)v233[3];
              v1309 = *v1308;
              v1310 = v1308[1];
              v1311 = v109[1];
              v1312 = v1311;
              do
              {
                if (v1312)
                {
                  v1313 = 0;
                  v1314 = v1303 + 4 * v1300;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1315 = 0;
                      v1316 = *(_DWORD *)(v1302 + 4 * v1301);
                      v1317 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1304 + v1315) = *(_DWORD *)(v1314 + v1315) | v1316;
                        --v1317;
                        v1315 += 4;
                      }
                      while (v1317 > 1);
                      v1311 = v109[1];
                    }
                    v1301 += v1307;
                    v1300 += v1310;
                    v1304 += 4 * (int)v299;
                    ++v1313;
                    v1314 += 4 * v1310;
                  }
                  while (v1313 < v1311);
                  v1318 = v1311;
                  v1298 = *v109;
                  v1312 = v1311;
                }
                else
                {
                  v1318 = 0;
                }
                v1301 = v1301 + v1306 - v1318 * v1307;
                v1300 = v1300 + v1309 - v1310 * v234[1];
                ++v1299;
              }
              while (v1299 < v1298);
            }
          }
          else if (v114 == 1)
          {
            v880 = *v109;
            if (*v109)
            {
              v881 = 0;
              v882 = 0;
              v883 = v108[19];
              v884 = v233[19];
              v885 = v107[19];
              v886 = *(_QWORD *)v108[3];
              v887 = 4 * *(_QWORD *)v233[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v888 = 0;
                  v889 = *(_DWORD *)(v883 + 4 * v882);
                  v890 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v885 + v888) = *(_DWORD *)(v884 + v888) | v889;
                    --v890;
                    v888 += 4;
                  }
                  while (v890 > 1);
                  v880 = *v109;
                }
                v882 += v886;
                ++v881;
                v885 += 4 * (int)v299;
                v884 += v887;
              }
              while (v881 < v880);
            }
          }
          else
          {
            v1643 = v107[6];
            if (v1643)
            {
              v1662 = 0;
              v1587 = v233[19];
              v1601 = v108[19];
              v1319 = v107[19];
              do
              {
                v1320 = 0;
                if ((v111 & 0x80000000) == 0)
                {
                  v1321 = v108[3];
                  v1322 = v111;
                  v1323 = v1662;
                  do
                  {
                    v1324 = ldiv(v1323, v109[v1322]);
                    v1323 = v1324.quot;
                    v1320 += *(_QWORD *)(v1321 + 8 * v1322--) * v1324.rem;
                  }
                  while (v1322 != -1);
                }
                v1325 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1326) = 0;
                }
                else
                {
                  v1326 = 0;
                  v1327 = v233[3];
                  v1328 = v1662;
                  do
                  {
                    v1329 = ldiv(v1328, v234[v1325]);
                    v1328 = v1329.quot;
                    v1326 += *(_QWORD *)(v1327 + 8 * v1325--) * v1329.rem;
                  }
                  while (v1325 != -1);
                }
                v111 = v1686;
                if ((int)v299 >= 1)
                {
                  v1330 = 0;
                  v1331 = *(_DWORD *)(v1601 + 4 * (int)v1320);
                  v1332 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1319 + v1330) = *(_DWORD *)(v1587 + 4 * (int)v1326 + v1330) | v1331;
                    --v1332;
                    v1330 += 4;
                  }
                  while (v1332 > 1);
                }
                v1319 += 4 * (int)v299;
                v1662 += (int)v299;
              }
              while (v1662 < v1643);
            }
          }
          break;
        case 2:
          if (v114 == 2)
          {
            v1333 = *v109;
            if (*v109)
            {
              v1334 = 0;
              v1335 = 0;
              v1336 = 0;
              v1337 = v108[19];
              v1338 = v233[19];
              v1339 = v107[19];
              v1340 = (uint64_t *)v108[3];
              v1341 = *v1340;
              v1342 = v1340[1];
              v1343 = (uint64_t *)v233[3];
              v1344 = *v1343;
              v1345 = v1343[1];
              v1346 = v109[1];
              v1347 = v1346;
              do
              {
                if (v1347)
                {
                  v1348 = 0;
                  v1349 = v1337 + 4 * v1336;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1350 = 0;
                      v1351 = *(_DWORD *)(v1338 + 4 * v1335);
                      v1352 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1339 + v1350) = *(_DWORD *)(v1349 + v1350) | v1351;
                        --v1352;
                        v1350 += 4;
                      }
                      while (v1352 > 1);
                      v1346 = v109[1];
                    }
                    v1336 += v1342;
                    v1335 += v1345;
                    v1339 += 4 * (int)v299;
                    ++v1348;
                    v1349 += 4 * v1342;
                  }
                  while (v1348 < v1346);
                  v1353 = v1346;
                  v1333 = *v109;
                  v1347 = v1346;
                }
                else
                {
                  v1353 = 0;
                }
                v1336 = v1336 + v1341 - v1353 * v1342;
                v1335 = v1335 + v1344 - v1345 * v234[1];
                ++v1334;
              }
              while (v1334 < v1333);
            }
          }
          else if (v114 == 1)
          {
            v891 = *v109;
            if (*v109)
            {
              v892 = 0;
              v893 = 0;
              v894 = v108[19];
              v895 = v233[19];
              v896 = v107[19];
              v897 = *(_QWORD *)v233[3];
              v898 = 4 * *(_QWORD *)v108[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v899 = 0;
                  v900 = *(_DWORD *)(v895 + 4 * v893);
                  v901 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v896 + v899) = *(_DWORD *)(v894 + v899) | v900;
                    --v901;
                    v899 += 4;
                  }
                  while (v901 > 1);
                  v891 = *v109;
                }
                v893 += v897;
                ++v892;
                v896 += 4 * (int)v299;
                v894 += v898;
              }
              while (v892 < v891);
            }
          }
          else
          {
            v1644 = v107[6];
            if (v1644)
            {
              v1663 = 0;
              v1588 = v233[19];
              v1602 = v108[19];
              v1354 = v107[19];
              do
              {
                v1355 = 0;
                if ((v111 & 0x80000000) == 0)
                {
                  v1356 = v108[3];
                  v1357 = v111;
                  v1358 = v1663;
                  do
                  {
                    v1359 = ldiv(v1358, v109[v1357]);
                    v1358 = v1359.quot;
                    v1355 += *(_QWORD *)(v1356 + 8 * v1357--) * v1359.rem;
                  }
                  while (v1357 != -1);
                }
                v1360 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1361) = 0;
                }
                else
                {
                  v1361 = 0;
                  v1362 = v233[3];
                  v1363 = v1663;
                  do
                  {
                    v1364 = ldiv(v1363, v234[v1360]);
                    v1363 = v1364.quot;
                    v1361 += *(_QWORD *)(v1362 + 8 * v1360--) * v1364.rem;
                  }
                  while (v1360 != -1);
                }
                v111 = v1686;
                if ((int)v299 >= 1)
                {
                  v1365 = 0;
                  v1366 = *(_DWORD *)(v1588 + 4 * (int)v1361);
                  v1367 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1354 + v1365) = *(_DWORD *)(v1602 + 4 * (int)v1355 + v1365) | v1366;
                    --v1367;
                    v1365 += 4;
                  }
                  while (v1367 > 1);
                }
                v1354 += 4 * (int)v299;
                v1663 += (int)v299;
              }
              while (v1663 < v1644);
            }
          }
          break;
        case 3:
          if (v114 == 2)
          {
            v1095 = *v109;
            if (*v109)
            {
              v1096 = 0;
              v1097 = 0;
              v1098 = 0;
              v1099 = v108[19];
              v1100 = v233[19];
              v1101 = v107[19];
              v1102 = (uint64_t *)v108[3];
              v1103 = *v1102;
              v1104 = v1102[1];
              v1105 = (uint64_t *)v233[3];
              v1106 = *v1105;
              v1107 = v1105[1];
              v1108 = v109[1];
              v1109 = v1108;
              do
              {
                if (v1109)
                {
                  v1110 = 0;
                  v1111 = v1100 + 4 * v1097;
                  v1112 = v1099 + 4 * v1098;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1113 = 0;
                      v1114 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1101 + v1113) = *(_DWORD *)(v1111 + v1113) | *(_DWORD *)(v1112 + v1113);
                        --v1114;
                        v1113 += 4;
                      }
                      while (v1114 > 1);
                      v1108 = v109[1];
                    }
                    v1098 += v1104;
                    v1097 += v1107;
                    v1101 += 4 * (int)v299;
                    ++v1110;
                    v1111 += 4 * v1107;
                    v1112 += 4 * v1104;
                  }
                  while (v1110 < v1108);
                  v1115 = v1108;
                  v1095 = *v109;
                  v1109 = v1108;
                }
                else
                {
                  v1115 = 0;
                }
                v1098 = v1098 + v1103 - v1115 * v1104;
                v1097 = v1097 + v1106 - v1107 * v234[1];
                ++v1096;
              }
              while (v1096 < v1095);
            }
          }
          else if (v114 == 1)
          {
            v348 = *v109;
            if (*v109)
            {
              v349 = 0;
              v350 = v108[19];
              v351 = v233[19];
              v352 = v107[19];
              v353 = 4 * *(_QWORD *)v233[3];
              v354 = 4 * *(_QWORD *)v108[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v355 = 0;
                  v356 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v352 + v355) = *(_DWORD *)(v351 + v355) | *(_DWORD *)(v350 + v355);
                    --v356;
                    v355 += 4;
                  }
                  while (v356 > 1);
                  v348 = *v109;
                }
                ++v349;
                v352 += 4 * (int)v299;
                v351 += v353;
                v350 += v354;
              }
              while (v349 < v348);
            }
          }
          else
          {
            v1639 = v107[6];
            if (v1639)
            {
              v1658 = 0;
              v1582 = v233[19];
              v1596 = v108[19];
              v1116 = v107[19];
              do
              {
                v1117 = 0;
                if ((v111 & 0x80000000) == 0)
                {
                  v1118 = v108[3];
                  v1119 = v111;
                  v1120 = v1658;
                  do
                  {
                    v1121 = ldiv(v1120, v109[v1119]);
                    v1120 = v1121.quot;
                    v1117 += *(_QWORD *)(v1118 + 8 * v1119--) * v1121.rem;
                  }
                  while (v1119 != -1);
                }
                v1122 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1123) = 0;
                }
                else
                {
                  v1123 = 0;
                  v1124 = v233[3];
                  v1125 = v1658;
                  do
                  {
                    v1126 = ldiv(v1125, v234[v1122]);
                    v1125 = v1126.quot;
                    v1123 += *(_QWORD *)(v1124 + 8 * v1122--) * v1126.rem;
                  }
                  while (v1122 != -1);
                }
                v111 = v1686;
                if ((int)v299 >= 1)
                {
                  v1127 = 0;
                  v1128 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1116 + v1127) = *(_DWORD *)(v1582 + 4 * (int)v1123 + v1127) | *(_DWORD *)(v1596 + 4 * (int)v1117 + v1127);
                    --v1128;
                    v1127 += 4;
                  }
                  while (v1128 > 1);
                }
                v1116 += 4 * (int)v299;
                v1658 += (int)v299;
              }
              while (v1658 < v1639);
            }
          }
          break;
        default:
LABEL_308:
          switch(v295)
          {
            case 1uLL:
              v300 = v107[6];
              if (v300)
              {
                v301 = (_DWORD *)v108[19];
                v302 = (_DWORD *)v233[19];
                v303 = (int *)v107[19];
                v304 = 4 * *(_QWORD *)v233[3];
                v305 = 4 * *(_QWORD *)v108[3];
                do
                {
                  *v303++ = *v302 | *v301;
                  v302 = (_DWORD *)((char *)v302 + v304);
                  v301 = (_DWORD *)((char *)v301 + v305);
                  --v300;
                }
                while (v300);
              }
              break;
            case 2uLL:
              v562 = *v109;
              if (*v109)
              {
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v566 = 0;
                v567 = v108[19];
                v568 = v233[19];
                v569 = v107[19];
                v570 = (uint64_t *)v108[3];
                v571 = *v570;
                v572 = v570[1];
                v573 = (uint64_t *)v233[3];
                v575 = *v573;
                v574 = v573[1];
                v576 = v109[1];
                do
                {
                  if (v576)
                  {
                    for (j = 0; j < v576; ++j)
                    {
                      *(_DWORD *)(v569 + 4 * v564 + 4 * j) = *(_DWORD *)(v568 + 4 * v565) | *(_DWORD *)(v567 + 4 * v566);
                      v566 += v572;
                      v565 += v574;
                      v576 = v109[1];
                    }
                    v578 = v576;
                    v562 = *v109;
                    v564 += j;
                  }
                  else
                  {
                    v578 = 0;
                  }
                  v566 = v566 + v571 - v578 * v572;
                  v565 = v565 + v575 - v574 * v234[1];
                  ++v563;
                }
                while (v563 < v562);
              }
              break;
            case 3uLL:
              v579 = *v109;
              if (*v109)
              {
                v580 = 0;
                v581 = 0;
                v582 = 0;
                v583 = 0;
                v584 = v108[19];
                v585 = v233[19];
                v586 = v107[19];
                v587 = (uint64_t *)v108[3];
                v588 = *v587;
                v589 = v587[1];
                v590 = (uint64_t *)v233[3];
                v591 = *v590;
                v592 = v590[1];
                v593 = v109[1];
                v594 = v593;
                do
                {
                  if (v594)
                  {
                    v595 = 0;
                    v596 = v587[2];
                    v597 = v590[2];
                    v598 = v109[2];
                    do
                    {
                      if (v598)
                      {
                        for (k = 0; k < v598; ++k)
                        {
                          *(_DWORD *)(v586 + 4 * v581 + 4 * k) = *(_DWORD *)(v585 + 4 * v582) | *(_DWORD *)(v584 + 4 * v583);
                          v583 += v596;
                          v582 += v597;
                          v598 = v109[2];
                        }
                        v600 = v598;
                        v593 = v109[1];
                        v581 += k;
                      }
                      else
                      {
                        v600 = 0;
                      }
                      v583 = v583 + v589 - v600 * v596;
                      v582 = v582 + v592 - v597 * v234[2];
                      ++v595;
                    }
                    while (v595 < v593);
                    v601 = v593;
                    v579 = *v109;
                    v594 = v593;
                  }
                  else
                  {
                    v601 = 0;
                  }
                  v583 = v583 + v588 - v601 * v589;
                  v582 = v582 + v591 - v592 * v234[1];
                  ++v580;
                }
                while (v580 < v579);
              }
              break;
            case 4uLL:
              v602 = *v109;
              if (*v109)
              {
                v603 = 0;
                v604 = 0;
                v605 = 0;
                v606 = 0;
                v607 = v108[19];
                v608 = v233[19];
                v609 = v107[19];
                v610 = (uint64_t *)v108[3];
                v611 = *v610;
                v612 = v610[1];
                v613 = (uint64_t *)v233[3];
                v614 = *v613;
                v615 = v613[1];
                v616 = v109[1];
                v617 = v616;
                do
                {
                  if (v617)
                  {
                    v618 = 0;
                    v619 = v610[2];
                    v620 = v613[2];
                    v621 = v109[2];
                    v622 = v621;
                    do
                    {
                      if (v622)
                      {
                        v623 = 0;
                        v624 = v610[3];
                        v625 = v613[3];
                        v626 = v109[3];
                        do
                        {
                          if (v626)
                          {
                            for (m = 0; m < v626; ++m)
                            {
                              *(_DWORD *)(v609 + 4 * v604 + 4 * m) = *(_DWORD *)(v608 + 4 * v605) | *(_DWORD *)(v607 + 4 * v606);
                              v606 += v624;
                              v605 += v625;
                              v626 = v109[3];
                            }
                            v628 = v626;
                            v621 = v109[2];
                            v604 += m;
                          }
                          else
                          {
                            v628 = 0;
                          }
                          v606 = v606 + v619 - v628 * v624;
                          v605 = v605 + v620 - v625 * v234[3];
                          ++v623;
                        }
                        while (v623 < v621);
                        v629 = v621;
                        v616 = v109[1];
                        v622 = v621;
                      }
                      else
                      {
                        v629 = 0;
                      }
                      v606 = v606 + v612 - v629 * v619;
                      v605 = v605 + v615 - v620 * v234[2];
                      ++v618;
                    }
                    while (v618 < v616);
                    v630 = v616;
                    v602 = *v109;
                    v617 = v616;
                  }
                  else
                  {
                    v630 = 0;
                  }
                  v606 = v606 + v611 - v630 * v612;
                  v605 = v605 + v614 - v615 * v234[1];
                  ++v603;
                }
                while (v603 < v602);
              }
              break;
            default:
              v550 = v107[6];
              if (v550)
              {
                v551 = 0;
                v1632 = v233[19];
                v1654 = v108[19];
                v1618 = v107[19];
                do
                {
                  v552 = 0;
                  if ((v111 & 0x80000000) == 0)
                  {
                    v553 = v108[3];
                    v554 = v111;
                    v555 = v551;
                    do
                    {
                      v556 = ldiv(v555, v109[v554]);
                      v555 = v556.quot;
                      v552 += *(_QWORD *)(v553 + 8 * v554--) * v556.rem;
                    }
                    while (v554 != -1);
                  }
                  v557 = v1671;
                  if ((v1671 & 0x80000000) != 0)
                  {
                    LODWORD(v558) = 0;
                  }
                  else
                  {
                    v558 = 0;
                    v559 = v233[3];
                    v560 = v551;
                    do
                    {
                      v561 = ldiv(v560, v234[v557]);
                      v560 = v561.quot;
                      v558 += *(_QWORD *)(v559 + 8 * v557--) * v561.rem;
                    }
                    while (v557 != -1);
                  }
                  *(_DWORD *)(v1618 + 4 * v551++) = *(_DWORD *)(v1632 + 4 * (int)v558) | *(_DWORD *)(v1654 + 4 * (int)v552);
                  v111 = v1686;
                }
                while (v551 != v550);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      v15 = *(uint64_t **)a1;
      v16 = *(uint64_t **)(a1 + 8);
      switch(v17)
      {
        case 0:
          v18 = **(_BYTE **)(*v16 + 152) | **(_BYTE **)(*v15 + 152);
          v19 = *(_QWORD *)v1;
LABEL_35:
          **(_BYTE **)(v19 + 152) = v18;
          return;
        case 1:
          v138 = *(_DWORD *)(*v16 + 160);
          if (v138 >= 1)
          {
            v139 = **(_BYTE **)(*v15 + 152);
            v140 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v141 = *(char **)(*v16 + 152);
            v142 = v138 + 1;
            do
            {
              v143 = *v141++;
              *v140++ = v143 | v139;
              --v142;
            }
            while (v142 > 1);
          }
          return;
        case 2:
          v144 = *(_DWORD *)(*v15 + 160);
          if (v144 >= 1)
          {
            v145 = **(_BYTE **)(*v16 + 152);
            v146 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v147 = *(char **)(*v15 + 152);
            v148 = v144 + 1;
            do
            {
              v149 = *v147++;
              *v146++ = v149 | v145;
              --v148;
            }
            while (v148 > 1);
          }
          return;
        case 3:
          v150 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v150 >= 1)
          {
            v151 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v152 = *(char **)(*v16 + 152);
            v153 = *(char **)(*v15 + 152);
            v154 = v150 + 1;
            do
            {
              v156 = *v153++;
              v155 = v156;
              v157 = *v152++;
              *v151++ = v157 | v155;
              --v154;
            }
            while (v154 > 1);
          }
          return;
        default:
          v130 = *(_QWORD **)v1;
          v131 = *v15;
          v132 = *(int **)*v15;
          v133 = (*(_QWORD *)(*v15 + 8) - (_QWORD)v132) >> 2;
          v134 = v133 - 1;
          if ((int)v133 - 1 >= -1)
            v134 = -1;
          v135 = v134 + 1;
          v136 = v133 + 1;
          break;
      }
      while (1)
      {
        v137 = v136 - 2;
        if (v136 - 2 < 0)
          break;
        --v136;
        if (*(_QWORD *)(*(_QWORD *)(v131 + 24) + 8 * v137) != *(_QWORD *)(v130[3] + 8 * v137))
          goto LABEL_195;
      }
      v136 = v135;
LABEL_195:
      v241 = (int **)*v16;
      v242 = *(int **)*v16;
      v243 = (*(_QWORD *)(*v16 + 8) - (_QWORD)v242) >> 2;
      v244 = v243 - 1;
      if ((int)v243 - 1 >= -1)
        v244 = -1;
      v245 = v244 + 1;
      v246 = v243 + 1;
      while (1)
      {
        v247 = v246 - 2;
        if (v246 - 2 < 0)
          break;
        --v246;
        if (*(_QWORD *)&v241[3][2 * v247] != *(_QWORD *)(v130[3] + 8 * v247))
          goto LABEL_228;
      }
      v246 = v245;
LABEL_228:
      v268 = v133 + 1;
      while (1)
      {
        v269 = v268 - 2;
        if (v268 - 2 < 0)
          break;
        --v268;
        if (*(_QWORD *)(*(_QWORD *)(v131 + 24) + 8 * v269))
          goto LABEL_253;
      }
      v268 = v135;
LABEL_253:
      v278 = v243 + 1;
      while (1)
      {
        v279 = v278 - 2;
        if (v278 - 2 < 0)
          break;
        --v278;
        if (*(_QWORD *)&v241[3][2 * v279])
          goto LABEL_314;
      }
      v278 = v245;
LABEL_314:
      v306 = (uint64_t)(v130[1] - *v130) >> 2;
      if (v136 <= v246)
        v307 = v246;
      else
        v307 = v136;
      if (v136 <= v278)
        v136 = v278;
      if (v268 > v246)
        v246 = v268;
      if (v306 > v246)
      {
        v308 = 1;
      }
      else
      {
        v246 = (uint64_t)(v130[1] - *v130) >> 2;
        v308 = 4;
      }
      if (v306 > v136)
      {
        v309 = 2;
      }
      else
      {
        v136 = v246;
        v309 = v308;
      }
      if (v306 > v307)
      {
        v136 = v307;
        v309 = 3;
      }
      if (!v136)
        goto LABEL_331;
      v310 = *(_QWORD *)(v130[3] + 8 * (v136 - 1));
      if (v310 < 0x10)
        goto LABEL_331;
      v1689 = *(_QWORD *)(v130[3] + 8 * (v136 - 1));
      switch(v309)
      {
        case 1:
          if (v136 == 2)
          {
            v1368 = *v132;
            if (*v132)
            {
              v1369 = 0;
              v1370 = 0;
              v1371 = 0;
              v1372 = *(_QWORD *)(v131 + 152);
              v1373 = v241[19];
              v1374 = v130[19];
              do
              {
                if (v132[1])
                {
                  v1375 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1376 = 0;
                      v1377 = *(_BYTE *)(v1372 + v1371);
                      v1378 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1374 + v1376) = *((_BYTE *)v1373 + v1370 + v1376) | v1377;
                        --v1378;
                        ++v1376;
                      }
                      while (v1378 > 1);
                      v131 = *v15;
                      v241 = (int **)*v16;
                      v132 = *(int **)*v15;
                    }
                    v1379 = *(_QWORD **)(v131 + 24);
                    v1380 = v1379[1];
                    v1371 += v1380;
                    v1370 += *((_QWORD *)v241[3] + 1);
                    v1374 += (int)v310;
                    ++v1375;
                    v1381 = v132[1];
                  }
                  while (v1375 < v1381);
                  v1368 = *v132;
                  v242 = *v241;
                }
                else
                {
                  v1381 = 0;
                  v1379 = *(_QWORD **)(v131 + 24);
                  v1380 = v1379[1];
                }
                v1371 = *v1379 + v1371 - v1381 * v1380;
                v1370 = *(_QWORD *)v241[3] + v1370 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1369;
              }
              while (v1369 < v1368);
            }
          }
          else if (v136 == 1)
          {
            v902 = *v132;
            if (*v132)
            {
              v903 = 0;
              v904 = 0;
              v905 = 0;
              v906 = *(_QWORD *)(v131 + 152);
              v907 = v241[19];
              v908 = v130[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v909 = 0;
                  v910 = *(_BYTE *)(v906 + v905);
                  v911 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v908 + v909) = *((_BYTE *)v907 + v904 + v909) | v910;
                    --v911;
                    ++v909;
                  }
                  while (v911 > 1);
                  v131 = *v15;
                  v241 = (int **)*v16;
                  v902 = **(_DWORD **)*v15;
                }
                v905 += **(_QWORD **)(v131 + 24);
                v904 += *(_QWORD *)v241[3];
                v908 += (int)v310;
                ++v903;
              }
              while (v903 < v902);
            }
          }
          else if (v130[6])
          {
            v1629 = v241[19];
            v1645 = *(_QWORD *)(v131 + 152);
            v1664 = (int)v310;
            v1682 = 0;
            v1614 = v310 + 1;
            v1382 = v130[19];
            do
            {
              v1383 = *(_QWORD *)*v15;
              v1384 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1383) >> 2;
              v1385 = 0;
              v1386 = (v1384 - 1);
              if ((int)v1384 - 1 >= 0)
              {
                v1387 = *(_QWORD *)(*v15 + 24);
                v1388 = v1682;
                do
                {
                  v1389 = ldiv(v1388, *(int *)(v1383 + 4 * v1386));
                  v1388 = v1389.quot;
                  v1385 += *(_QWORD *)(v1387 + 8 * v1386--) * v1389.rem;
                }
                while (v1386 != -1);
              }
              v1390 = *(_QWORD *)*v16;
              v1391 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1390) >> 2;
              v1392 = 0;
              v1393 = (v1391 - 1);
              if ((int)v1391 - 1 >= 0)
              {
                v1394 = *(_QWORD *)(*v16 + 24);
                v1395 = v1682;
                do
                {
                  v1396 = ldiv(v1395, *(int *)(v1390 + 4 * v1393));
                  v1395 = v1396.quot;
                  v1392 += *(_QWORD *)(v1394 + 8 * v1393--) * v1396.rem;
                }
                while (v1393 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1397 = 0;
                v1398 = *(_BYTE *)(v1645 + (int)v1385);
                v1399 = v1614;
                do
                {
                  *(_BYTE *)(v1382 + v1397) = *((_BYTE *)v1629 + (int)v1392 + v1397) | v1398;
                  --v1399;
                  ++v1397;
                }
                while (v1399 > 1);
                v130 = *(_QWORD **)v1;
              }
              v1382 += v1664;
              v1682 += v1664;
            }
            while (v1682 < v130[6]);
          }
          break;
        case 2:
          if (v136 == 2)
          {
            v1400 = *v132;
            if (*v132)
            {
              v1401 = 0;
              v1402 = 0;
              v1403 = 0;
              v1404 = *(_QWORD *)(v131 + 152);
              v1405 = v241[19];
              v1406 = v130[19];
              do
              {
                if (v132[1])
                {
                  v1407 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1408 = 0;
                      v1409 = *((_BYTE *)v1405 + v1402);
                      v1410 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1406 + v1408) = *(_BYTE *)(v1404 + v1403 + v1408) | v1409;
                        --v1410;
                        ++v1408;
                      }
                      while (v1410 > 1);
                      v131 = *v15;
                      v241 = (int **)*v16;
                      v132 = *(int **)*v15;
                    }
                    v1411 = *(_QWORD **)(v131 + 24);
                    v1412 = v1411[1];
                    v1403 += v1412;
                    v1402 += *((_QWORD *)v241[3] + 1);
                    v1406 += (int)v310;
                    ++v1407;
                    v1413 = v132[1];
                  }
                  while (v1407 < v1413);
                  v1400 = *v132;
                  v242 = *v241;
                }
                else
                {
                  v1413 = 0;
                  v1411 = *(_QWORD **)(v131 + 24);
                  v1412 = v1411[1];
                }
                v1403 = *v1411 + v1403 - v1413 * v1412;
                v1402 = *(_QWORD *)v241[3] + v1402 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1401;
              }
              while (v1401 < v1400);
            }
          }
          else if (v136 == 1)
          {
            v912 = *v132;
            if (*v132)
            {
              v913 = 0;
              v914 = 0;
              v915 = 0;
              v916 = *(_QWORD *)(v131 + 152);
              v917 = v241[19];
              v918 = v130[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v919 = 0;
                  v920 = *((_BYTE *)v917 + v914);
                  v921 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v918 + v919) = *(_BYTE *)(v916 + v915 + v919) | v920;
                    --v921;
                    ++v919;
                  }
                  while (v921 > 1);
                  v131 = *v15;
                  v241 = (int **)*v16;
                  v912 = **(_DWORD **)*v15;
                }
                v915 += **(_QWORD **)(v131 + 24);
                v914 += *(_QWORD *)v241[3];
                v918 += (int)v310;
                ++v913;
              }
              while (v913 < v912);
            }
          }
          else if (v130[6])
          {
            v1630 = v241[19];
            v1646 = *(_QWORD *)(v131 + 152);
            v1665 = (int)v310;
            v1683 = 0;
            v1615 = v310 + 1;
            v1414 = v130[19];
            do
            {
              v1415 = *(_QWORD *)*v15;
              v1416 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1415) >> 2;
              v1417 = 0;
              v1418 = (v1416 - 1);
              if ((int)v1416 - 1 >= 0)
              {
                v1419 = *(_QWORD *)(*v15 + 24);
                v1420 = v1683;
                do
                {
                  v1421 = ldiv(v1420, *(int *)(v1415 + 4 * v1418));
                  v1420 = v1421.quot;
                  v1417 += *(_QWORD *)(v1419 + 8 * v1418--) * v1421.rem;
                }
                while (v1418 != -1);
              }
              v1422 = *(_QWORD *)*v16;
              v1423 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1422) >> 2;
              v1424 = 0;
              v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                v1426 = *(_QWORD *)(*v16 + 24);
                v1427 = v1683;
                do
                {
                  v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  v1427 = v1428.quot;
                  v1424 += *(_QWORD *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1429 = 0;
                v1430 = *((_BYTE *)v1630 + (int)v1424);
                v1431 = v1615;
                do
                {
                  *(_BYTE *)(v1414 + v1429) = *(_BYTE *)(v1646 + (int)v1417 + v1429) | v1430;
                  --v1431;
                  ++v1429;
                }
                while (v1431 > 1);
                v130 = *(_QWORD **)v1;
              }
              v1414 += v1665;
              v1683 += v1665;
            }
            while (v1683 < v130[6]);
          }
          break;
        case 3:
          if (v136 == 2)
          {
            v1129 = *v132;
            if (*v132)
            {
              v1130 = 0;
              v1131 = 0;
              v1132 = 0;
              v1133 = *(_QWORD *)(v131 + 152);
              v1134 = v241[19];
              v1135 = v130[19];
              do
              {
                if (v132[1])
                {
                  v1136 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1137 = 0;
                      v1138 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1135 + v1137) = *((_BYTE *)v1134 + v1131 + v1137) | *(_BYTE *)(v1133 + v1132 + v1137);
                        --v1138;
                        ++v1137;
                      }
                      while (v1138 > 1);
                      v131 = *v15;
                      v241 = (int **)*v16;
                      v132 = *(int **)*v15;
                    }
                    v1139 = *(_QWORD **)(v131 + 24);
                    v1140 = v1139[1];
                    v1132 += v1140;
                    v1131 += *((_QWORD *)v241[3] + 1);
                    v1135 += (int)v310;
                    ++v1136;
                    v1141 = v132[1];
                  }
                  while (v1136 < v1141);
                  v1129 = *v132;
                  v242 = *v241;
                }
                else
                {
                  v1141 = 0;
                  v1139 = *(_QWORD **)(v131 + 24);
                  v1140 = v1139[1];
                }
                v1132 = *v1139 + v1132 - v1141 * v1140;
                v1131 = *(_QWORD *)v241[3] + v1131 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1130;
              }
              while (v1130 < v1129);
            }
          }
          else if (v136 == 1)
          {
            v357 = *v132;
            if (*v132)
            {
              v358 = 0;
              v359 = 0;
              v360 = 0;
              v361 = *(_QWORD *)(v131 + 152);
              v362 = v241[19];
              v363 = v130[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v364 = 0;
                  v365 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v363 + v364) = *((_BYTE *)v362 + v359 + v364) | *(_BYTE *)(v361 + v360 + v364);
                    --v365;
                    ++v364;
                  }
                  while (v365 > 1);
                  v131 = *v15;
                  v241 = (int **)*v16;
                  v357 = **(_DWORD **)*v15;
                }
                v360 += **(_QWORD **)(v131 + 24);
                v359 += *(_QWORD *)v241[3];
                v363 += (int)v310;
                ++v358;
              }
              while (v358 < v357);
            }
          }
          else if (v130[6])
          {
            v1626 = v241[19];
            v1640 = *(_QWORD *)(v131 + 152);
            v1659 = (int)v310;
            v1681 = 0;
            v1611 = v310 + 1;
            v1142 = v130[19];
            do
            {
              v1143 = *(_QWORD *)*v15;
              v1144 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1143) >> 2;
              v1145 = 0;
              v1146 = (v1144 - 1);
              if ((int)v1144 - 1 >= 0)
              {
                v1147 = *(_QWORD *)(*v15 + 24);
                v1148 = v1681;
                do
                {
                  v1149 = ldiv(v1148, *(int *)(v1143 + 4 * v1146));
                  v1148 = v1149.quot;
                  v1145 += *(_QWORD *)(v1147 + 8 * v1146--) * v1149.rem;
                }
                while (v1146 != -1);
              }
              v1150 = *(_QWORD *)*v16;
              v1151 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1150) >> 2;
              v1152 = 0;
              v1153 = (v1151 - 1);
              if ((int)v1151 - 1 >= 0)
              {
                v1154 = *(_QWORD *)(*v16 + 24);
                v1155 = v1681;
                do
                {
                  v1156 = ldiv(v1155, *(int *)(v1150 + 4 * v1153));
                  v1155 = v1156.quot;
                  v1152 += *(_QWORD *)(v1154 + 8 * v1153--) * v1156.rem;
                }
                while (v1153 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1157 = 0;
                v1158 = v1611;
                do
                {
                  *(_BYTE *)(v1142 + v1157) = *((_BYTE *)v1626 + (int)v1152 + v1157) | *(_BYTE *)(v1640
                                                                                                + (int)v1145
                                                                                                + v1157);
                  --v1158;
                  ++v1157;
                }
                while (v1158 > 1);
                v130 = *(_QWORD **)v1;
              }
              v1142 += v1659;
              v1681 += v1659;
            }
            while (v1681 < v130[6]);
          }
          break;
        default:
LABEL_331:
          switch(v306)
          {
            case 1uLL:
              if (v130[6])
              {
                v311 = 0;
                v312 = 0;
                v313 = 0;
                v314 = *(_QWORD *)(v131 + 152);
                v315 = v241[19];
                v316 = v130[19];
                do
                {
                  *(_BYTE *)(v316 + v311) = *((_BYTE *)v315 + v312) | *(_BYTE *)(v314 + v313);
                  v313 += **(_QWORD **)(*v15 + 24);
                  v312 += **(_QWORD **)(*v16 + 24);
                  ++v311;
                }
                while (v311 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
            case 2uLL:
              v647 = *v132;
              if (*v132)
              {
                v648 = 0;
                v649 = 0;
                v650 = 0;
                v651 = 0;
                v652 = *(_QWORD *)(v131 + 152);
                v653 = v241[19];
                v654 = v130[19];
                do
                {
                  if (v132[1])
                  {
                    v655 = 0;
                    do
                    {
                      *(_BYTE *)(v654 + v649 + v655) = *((_BYTE *)v653 + v650) | *(_BYTE *)(v652 + v651);
                      v131 = *v15;
                      v656 = *(_QWORD **)(*v15 + 24);
                      v657 = v656[1];
                      v651 += v657;
                      v241 = (int **)*v16;
                      v658 = *(int **)(*v16 + 24);
                      v659 = *((_QWORD *)v658 + 1);
                      v650 += v659;
                      ++v655;
                      v132 = *(int **)*v15;
                      v660 = v132[1];
                    }
                    while (v655 < v660);
                    v647 = *v132;
                    v242 = *v241;
                    v649 += v655;
                  }
                  else
                  {
                    v660 = 0;
                    v656 = *(_QWORD **)(v131 + 24);
                    v657 = v656[1];
                    v658 = v241[3];
                    v659 = *((_QWORD *)v658 + 1);
                  }
                  v651 = *v656 + v651 - v660 * v657;
                  v650 = *(_QWORD *)v658 + v650 - v659 * v242[1];
                  ++v648;
                }
                while (v648 < v647);
              }
              break;
            case 3uLL:
              v661 = *v132;
              if (*v132)
              {
                v662 = 0;
                v663 = 0;
                v664 = 0;
                v665 = 0;
                v666 = *(_QWORD *)(v131 + 152);
                v667 = v241[19];
                v668 = v130[19];
                do
                {
                  if (v132[1])
                  {
                    v669 = 0;
                    do
                    {
                      if (v132[2])
                      {
                        v670 = 0;
                        do
                        {
                          *(_BYTE *)(v668 + v663 + v670) = *((_BYTE *)v667 + v664) | *(_BYTE *)(v666 + v665);
                          v131 = *v15;
                          v671 = *(_QWORD **)(*v15 + 24);
                          v672 = v671[2];
                          v665 += v672;
                          v241 = (int **)*v16;
                          v673 = *(int **)(*v16 + 24);
                          v674 = *((_QWORD *)v673 + 2);
                          v664 += v674;
                          ++v670;
                          v132 = *(int **)*v15;
                          v675 = v132[2];
                        }
                        while (v670 < v675);
                        v242 = *v241;
                        v663 += v670;
                      }
                      else
                      {
                        v675 = 0;
                        v671 = *(_QWORD **)(v131 + 24);
                        v672 = v671[2];
                        v673 = v241[3];
                        v674 = *((_QWORD *)v673 + 2);
                      }
                      v676 = v671[1];
                      v665 = v676 + v665 - v675 * v672;
                      v664 = *((_QWORD *)v673 + 1) + v664 - v674 * v242[2];
                      ++v669;
                      v677 = v132[1];
                    }
                    while (v669 < v677);
                    v661 = *v132;
                  }
                  else
                  {
                    v677 = 0;
                    v671 = *(_QWORD **)(v131 + 24);
                    v676 = v671[1];
                  }
                  v665 = *v671 + v665 - v677 * v676;
                  v664 = *(_QWORD *)v241[3] + v664 - *((_QWORD *)v241[3] + 1) * v242[1];
                  ++v662;
                }
                while (v662 < v661);
              }
              break;
            case 4uLL:
              v678 = *v132;
              if (*v132)
              {
                v679 = 0;
                v680 = 0;
                v681 = 0;
                v682 = 0;
                v683 = *(_QWORD *)(v131 + 152);
                v684 = v241[19];
                v685 = v130[19];
                do
                {
                  if (v132[1])
                  {
                    v686 = 0;
                    do
                    {
                      if (v132[2])
                      {
                        v687 = 0;
                        do
                        {
                          if (v132[3])
                          {
                            v688 = 0;
                            do
                            {
                              *(_BYTE *)(v685 + v680 + v688) = *((_BYTE *)v684 + v681) | *(_BYTE *)(v683 + v682);
                              v131 = *v15;
                              v689 = *(_QWORD **)(*v15 + 24);
                              v690 = v689[3];
                              v682 += v690;
                              v241 = (int **)*v16;
                              v691 = *(int **)(*v16 + 24);
                              v692 = *((_QWORD *)v691 + 3);
                              v681 += v692;
                              ++v688;
                              v132 = *(int **)*v15;
                              v693 = v132[3];
                            }
                            while (v688 < v693);
                            v242 = *v241;
                            v680 += v688;
                          }
                          else
                          {
                            v693 = 0;
                            v689 = *(_QWORD **)(v131 + 24);
                            v690 = v689[3];
                            v691 = v241[3];
                            v692 = *((_QWORD *)v691 + 3);
                          }
                          v694 = v689[2];
                          v682 = v694 + v682 - v693 * v690;
                          v681 = *((_QWORD *)v691 + 2) + v681 - v692 * v242[3];
                          ++v687;
                          v695 = v132[2];
                        }
                        while (v687 < v695);
                      }
                      else
                      {
                        v695 = 0;
                        v689 = *(_QWORD **)(v131 + 24);
                        v694 = v689[2];
                      }
                      v682 = v689[1] + v682 - v695 * v694;
                      v681 = *((_QWORD *)v241[3] + 1) + v681 - *((_QWORD *)v241[3] + 2) * v242[2];
                      ++v686;
                      v696 = v132[1];
                    }
                    while (v686 < v696);
                    v678 = *v132;
                  }
                  else
                  {
                    v696 = 0;
                  }
                  v682 = **(_QWORD **)(v131 + 24) + v682 - *(_QWORD *)(*(_QWORD *)(v131 + 24) + 8) * v696;
                  v681 = *(_QWORD *)v241[3] + v681 - *((_QWORD *)v241[3] + 1) * v242[1];
                  ++v679;
                }
                while (v679 < v678);
              }
              break;
            default:
              if (v130[6])
              {
                v631 = 0;
                v1676 = v241[19];
                v1691 = *(_QWORD *)(v131 + 152);
                v632 = v130[19];
                do
                {
                  v633 = *(_QWORD *)*v15;
                  v634 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v633) >> 2;
                  v635 = 0;
                  v636 = (v634 - 1);
                  if ((int)v634 - 1 >= 0)
                  {
                    v637 = *(_QWORD *)(*v15 + 24);
                    v638 = v631;
                    do
                    {
                      v639 = ldiv(v638, *(int *)(v633 + 4 * v636));
                      v638 = v639.quot;
                      v635 += *(_QWORD *)(v637 + 8 * v636--) * v639.rem;
                    }
                    while (v636 != -1);
                  }
                  v640 = *(_QWORD *)*v16;
                  v641 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v640) >> 2;
                  v642 = 0;
                  v643 = (v641 - 1);
                  if ((int)v641 - 1 >= 0)
                  {
                    v644 = *(_QWORD *)(*v16 + 24);
                    v645 = v631;
                    do
                    {
                      v646 = ldiv(v645, *(int *)(v640 + 4 * v643));
                      v645 = v646.quot;
                      v642 += *(_QWORD *)(v644 + 8 * v643--) * v646.rem;
                    }
                    while (v643 != -1);
                  }
                  *(_BYTE *)(v632 + v631++) = *((_BYTE *)v1676 + (int)v642) | *(_BYTE *)(v1691 + (int)v635);
                }
                while (v631 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 4:
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      switch(v20)
      {
        case 0:
LABEL_12:
          **(_DWORD **)(*(_QWORD *)v1 + 152) = **(_DWORD **)(*v6 + 152) | **(_DWORD **)(*v7 + 152);
          return;
        case 1:
          v167 = *(_DWORD *)(*v6 + 160);
          if (v167 >= 1)
          {
            v168 = **(_DWORD **)(*v7 + 152);
            v169 = *(int **)(*(_QWORD *)v1 + 152);
            v170 = *(int **)(*v6 + 152);
            v171 = v167 + 1;
            do
            {
              v172 = *v170++;
              *v169++ = v172 | v168;
              --v171;
            }
            while (v171 > 1);
          }
          return;
        case 2:
          v173 = *(_DWORD *)(*v7 + 160);
          if (v173 >= 1)
          {
            v174 = **(_DWORD **)(*v6 + 152);
            v175 = *(int **)(*(_QWORD *)v1 + 152);
            v176 = *(int **)(*v7 + 152);
            v177 = v173 + 1;
            do
            {
              v178 = *v176++;
              *v175++ = v178 | v174;
              --v177;
            }
            while (v177 > 1);
          }
          return;
        case 3:
          v179 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v179 >= 1)
          {
            v180 = *(int **)(*(_QWORD *)v1 + 152);
            v181 = *(int **)(*v6 + 152);
            v182 = *(int **)(*v7 + 152);
            v183 = v179 + 1;
            do
            {
              v185 = *v182++;
              v184 = v185;
              v186 = *v181++;
              *v180++ = v186 | v184;
              --v183;
            }
            while (v183 > 1);
          }
          return;
        default:
          v158 = *(_QWORD **)v1;
          v159 = (_QWORD *)*v7;
          v160 = *(int **)*v7;
          v161 = (v159[1] - (_QWORD)v160) >> 2;
          v162 = (v161 - 1);
          if ((int)v162 >= -1)
            v163 = -1;
          else
            v163 = v161 - 1;
          v164 = v163 + 1;
          v165 = v161 + 1;
          break;
      }
      while (1)
      {
        v166 = v165 - 2;
        if (v165 - 2 < 0)
          break;
        --v165;
        if (*(_QWORD *)(v159[3] + 8 * v166) != *(_QWORD *)(v158[3] + 8 * v166))
          goto LABEL_202;
      }
      v165 = v164;
LABEL_202:
      v248 = (_QWORD *)*v6;
      v249 = *(int **)*v6;
      v250 = (v248[1] - (_QWORD)v249) >> 2;
      v251 = (v250 - 1);
      if ((int)v251 >= -1)
        v252 = -1;
      else
        v252 = v250 - 1;
      v253 = v252 + 1;
      v254 = v250 + 1;
      while (1)
      {
        v255 = v254 - 2;
        if (v254 - 2 < 0)
          break;
        --v254;
        if (*(_QWORD *)(v248[3] + 8 * v255) != *(_QWORD *)(v158[3] + 8 * v255))
          goto LABEL_233;
      }
      v254 = v253;
LABEL_233:
      v270 = v161 + 1;
      while (1)
      {
        v271 = v270 - 2;
        if (v270 - 2 < 0)
          break;
        --v270;
        if (*(_QWORD *)(v159[3] + 8 * v271))
          goto LABEL_258;
      }
      v270 = v164;
LABEL_258:
      v280 = v250 + 1;
      while (1)
      {
        v281 = v280 - 2;
        if (v280 - 2 < 0)
          break;
        --v280;
        if (*(_QWORD *)(v248[3] + 8 * v281))
          goto LABEL_337;
      }
      v280 = v253;
LABEL_337:
      v317 = (uint64_t)(v158[1] - *v158) >> 2;
      if (v165 <= v254)
        v318 = v254;
      else
        v318 = v165;
      if (v165 <= v280)
        v165 = v280;
      if (v270 > v254)
        v254 = v270;
      if (v317 > v254)
      {
        v319 = 1;
      }
      else
      {
        v254 = (uint64_t)(v158[1] - *v158) >> 2;
        v319 = 4;
      }
      if (v317 > v165)
      {
        v320 = 2;
      }
      else
      {
        v165 = v254;
        v320 = v319;
      }
      if (v317 > v318)
      {
        v165 = v318;
        v320 = 3;
      }
      v1672 = v251;
      v1687 = v162;
      if (!v165)
        goto LABEL_354;
      v321 = *(_QWORD *)(v158[3] + 8 * (v165 - 1));
      if (v321 < 0x10)
        goto LABEL_354;
      switch(v320)
      {
        case 1:
          if (v165 == 2)
          {
            v1432 = *v160;
            if (*v160)
            {
              v1433 = 0;
              v1434 = 0;
              v1435 = 0;
              v1436 = v159[19];
              v1437 = v248[19];
              v1438 = v158[19];
              v1439 = (uint64_t *)v159[3];
              v1440 = *v1439;
              v1441 = v1439[1];
              v1442 = (uint64_t *)v248[3];
              v1443 = *v1442;
              v1444 = v1442[1];
              v1445 = v160[1];
              v1446 = v1445;
              do
              {
                if (v1446)
                {
                  v1447 = 0;
                  v1448 = v1437 + 4 * v1434;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1449 = 0;
                      v1450 = *(_DWORD *)(v1436 + 4 * v1435);
                      v1451 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1438 + v1449) = *(_DWORD *)(v1448 + v1449) | v1450;
                        --v1451;
                        v1449 += 4;
                      }
                      while (v1451 > 1);
                      v1445 = v160[1];
                    }
                    v1435 += v1441;
                    v1434 += v1444;
                    v1438 += 4 * (int)v321;
                    ++v1447;
                    v1448 += 4 * v1444;
                  }
                  while (v1447 < v1445);
                  v1452 = v1445;
                  v1432 = *v160;
                  v1446 = v1445;
                }
                else
                {
                  v1452 = 0;
                }
                v1435 = v1435 + v1440 - v1452 * v1441;
                v1434 = v1434 + v1443 - v1444 * v249[1];
                ++v1433;
              }
              while (v1433 < v1432);
            }
          }
          else if (v165 == 1)
          {
            v922 = *v160;
            if (*v160)
            {
              v923 = 0;
              v924 = 0;
              v925 = v159[19];
              v926 = v248[19];
              v927 = v158[19];
              v928 = *(_QWORD *)v159[3];
              v929 = 4 * *(_QWORD *)v248[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v930 = 0;
                  v931 = *(_DWORD *)(v925 + 4 * v924);
                  v932 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v927 + v930) = *(_DWORD *)(v926 + v930) | v931;
                    --v932;
                    v930 += 4;
                  }
                  while (v932 > 1);
                  v922 = *v160;
                }
                v924 += v928;
                ++v923;
                v927 += 4 * (int)v321;
                v926 += v929;
              }
              while (v923 < v922);
            }
          }
          else
          {
            v1647 = v158[6];
            if (v1647)
            {
              v1666 = 0;
              v1589 = v248[19];
              v1603 = v159[19];
              v1453 = v158[19];
              do
              {
                v1454 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1455 = v159[3];
                  v1456 = v162;
                  v1457 = v1666;
                  do
                  {
                    v1458 = ldiv(v1457, v160[v1456]);
                    v1457 = v1458.quot;
                    v1454 += *(_QWORD *)(v1455 + 8 * v1456--) * v1458.rem;
                  }
                  while (v1456 != -1);
                }
                v1459 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1460) = 0;
                }
                else
                {
                  v1460 = 0;
                  v1461 = v248[3];
                  v1462 = v1666;
                  do
                  {
                    v1463 = ldiv(v1462, v249[v1459]);
                    v1462 = v1463.quot;
                    v1460 += *(_QWORD *)(v1461 + 8 * v1459--) * v1463.rem;
                  }
                  while (v1459 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1464 = 0;
                  v1465 = *(_DWORD *)(v1603 + 4 * (int)v1454);
                  v1466 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1453 + v1464) = *(_DWORD *)(v1589 + 4 * (int)v1460 + v1464) | v1465;
                    --v1466;
                    v1464 += 4;
                  }
                  while (v1466 > 1);
                }
                v1453 += 4 * (int)v321;
                v1666 += (int)v321;
              }
              while (v1666 < v1647);
            }
          }
          break;
        case 2:
          if (v165 == 2)
          {
            v1467 = *v160;
            if (*v160)
            {
              v1468 = 0;
              v1469 = 0;
              v1470 = 0;
              v1471 = v159[19];
              v1472 = v248[19];
              v1473 = v158[19];
              v1474 = (uint64_t *)v159[3];
              v1475 = *v1474;
              v1476 = v1474[1];
              v1477 = (uint64_t *)v248[3];
              v1478 = *v1477;
              v1479 = v1477[1];
              v1480 = v160[1];
              v1481 = v1480;
              do
              {
                if (v1481)
                {
                  v1482 = 0;
                  v1483 = v1471 + 4 * v1470;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1484 = 0;
                      v1485 = *(_DWORD *)(v1472 + 4 * v1469);
                      v1486 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1473 + v1484) = *(_DWORD *)(v1483 + v1484) | v1485;
                        --v1486;
                        v1484 += 4;
                      }
                      while (v1486 > 1);
                      v1480 = v160[1];
                    }
                    v1470 += v1476;
                    v1469 += v1479;
                    v1473 += 4 * (int)v321;
                    ++v1482;
                    v1483 += 4 * v1476;
                  }
                  while (v1482 < v1480);
                  v1487 = v1480;
                  v1467 = *v160;
                  v1481 = v1480;
                }
                else
                {
                  v1487 = 0;
                }
                v1470 = v1470 + v1475 - v1487 * v1476;
                v1469 = v1469 + v1478 - v1479 * v249[1];
                ++v1468;
              }
              while (v1468 < v1467);
            }
          }
          else if (v165 == 1)
          {
            v933 = *v160;
            if (*v160)
            {
              v934 = 0;
              v935 = 0;
              v936 = v159[19];
              v937 = v248[19];
              v938 = v158[19];
              v939 = *(_QWORD *)v248[3];
              v940 = 4 * *(_QWORD *)v159[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v941 = 0;
                  v942 = *(_DWORD *)(v937 + 4 * v935);
                  v943 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v938 + v941) = *(_DWORD *)(v936 + v941) | v942;
                    --v943;
                    v941 += 4;
                  }
                  while (v943 > 1);
                  v933 = *v160;
                }
                v935 += v939;
                ++v934;
                v938 += 4 * (int)v321;
                v936 += v940;
              }
              while (v934 < v933);
            }
          }
          else
          {
            v1648 = v158[6];
            if (v1648)
            {
              v1667 = 0;
              v1590 = v248[19];
              v1604 = v159[19];
              v1488 = v158[19];
              do
              {
                v1489 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1490 = v159[3];
                  v1491 = v162;
                  v1492 = v1667;
                  do
                  {
                    v1493 = ldiv(v1492, v160[v1491]);
                    v1492 = v1493.quot;
                    v1489 += *(_QWORD *)(v1490 + 8 * v1491--) * v1493.rem;
                  }
                  while (v1491 != -1);
                }
                v1494 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1495) = 0;
                }
                else
                {
                  v1495 = 0;
                  v1496 = v248[3];
                  v1497 = v1667;
                  do
                  {
                    v1498 = ldiv(v1497, v249[v1494]);
                    v1497 = v1498.quot;
                    v1495 += *(_QWORD *)(v1496 + 8 * v1494--) * v1498.rem;
                  }
                  while (v1494 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1499 = 0;
                  v1500 = *(_DWORD *)(v1590 + 4 * (int)v1495);
                  v1501 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1488 + v1499) = *(_DWORD *)(v1604 + 4 * (int)v1489 + v1499) | v1500;
                    --v1501;
                    v1499 += 4;
                  }
                  while (v1501 > 1);
                }
                v1488 += 4 * (int)v321;
                v1667 += (int)v321;
              }
              while (v1667 < v1648);
            }
          }
          break;
        case 3:
          if (v165 == 2)
          {
            v1159 = *v160;
            if (*v160)
            {
              v1160 = 0;
              v1161 = 0;
              v1162 = 0;
              v1163 = v159[19];
              v1164 = v248[19];
              v1165 = v158[19];
              v1166 = (uint64_t *)v159[3];
              v1167 = *v1166;
              v1168 = v1166[1];
              v1169 = (uint64_t *)v248[3];
              v1170 = *v1169;
              v1171 = v1169[1];
              v1172 = v160[1];
              v1173 = v1172;
              do
              {
                if (v1173)
                {
                  v1174 = 0;
                  v1175 = v1164 + 4 * v1161;
                  v1176 = v1163 + 4 * v1162;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1177 = 0;
                      v1178 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1165 + v1177) = *(_DWORD *)(v1175 + v1177) | *(_DWORD *)(v1176 + v1177);
                        --v1178;
                        v1177 += 4;
                      }
                      while (v1178 > 1);
                      v1172 = v160[1];
                    }
                    v1162 += v1168;
                    v1161 += v1171;
                    v1165 += 4 * (int)v321;
                    ++v1174;
                    v1175 += 4 * v1171;
                    v1176 += 4 * v1168;
                  }
                  while (v1174 < v1172);
                  v1179 = v1172;
                  v1159 = *v160;
                  v1173 = v1172;
                }
                else
                {
                  v1179 = 0;
                }
                v1162 = v1162 + v1167 - v1179 * v1168;
                v1161 = v1161 + v1170 - v1171 * v249[1];
                ++v1160;
              }
              while (v1160 < v1159);
            }
          }
          else if (v165 == 1)
          {
            v366 = *v160;
            if (*v160)
            {
              v367 = 0;
              v368 = v159[19];
              v369 = v248[19];
              v370 = v158[19];
              v371 = 4 * *(_QWORD *)v248[3];
              v372 = 4 * *(_QWORD *)v159[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v373 = 0;
                  v374 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v370 + v373) = *(_DWORD *)(v369 + v373) | *(_DWORD *)(v368 + v373);
                    --v374;
                    v373 += 4;
                  }
                  while (v374 > 1);
                  v366 = *v160;
                }
                ++v367;
                v370 += 4 * (int)v321;
                v369 += v371;
                v368 += v372;
              }
              while (v367 < v366);
            }
          }
          else
          {
            v1641 = v158[6];
            if (v1641)
            {
              v1660 = 0;
              v1583 = v248[19];
              v1597 = v159[19];
              v1180 = v158[19];
              do
              {
                v1181 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1182 = v159[3];
                  v1183 = v162;
                  v1184 = v1660;
                  do
                  {
                    v1185 = ldiv(v1184, v160[v1183]);
                    v1184 = v1185.quot;
                    v1181 += *(_QWORD *)(v1182 + 8 * v1183--) * v1185.rem;
                  }
                  while (v1183 != -1);
                }
                v1186 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1187) = 0;
                }
                else
                {
                  v1187 = 0;
                  v1188 = v248[3];
                  v1189 = v1660;
                  do
                  {
                    v1190 = ldiv(v1189, v249[v1186]);
                    v1189 = v1190.quot;
                    v1187 += *(_QWORD *)(v1188 + 8 * v1186--) * v1190.rem;
                  }
                  while (v1186 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1191 = 0;
                  v1192 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1180 + v1191) = *(_DWORD *)(v1583 + 4 * (int)v1187 + v1191) | *(_DWORD *)(v1597 + 4 * (int)v1181 + v1191);
                    --v1192;
                    v1191 += 4;
                  }
                  while (v1192 > 1);
                }
                v1180 += 4 * (int)v321;
                v1660 += (int)v321;
              }
              while (v1660 < v1641);
            }
          }
          break;
        default:
LABEL_354:
          switch(v317)
          {
            case 1uLL:
              v322 = v158[6];
              if (v322)
              {
                v323 = (_DWORD *)v159[19];
                v324 = (_DWORD *)v248[19];
                v325 = (int *)v158[19];
                v326 = 4 * *(_QWORD *)v248[3];
                v327 = 4 * *(_QWORD *)v159[3];
                do
                {
                  *v325++ = *v324 | *v323;
                  v324 = (_DWORD *)((char *)v324 + v326);
                  v323 = (_DWORD *)((char *)v323 + v327);
                  --v322;
                }
                while (v322);
              }
              break;
            case 2uLL:
              v709 = *v160;
              if (*v160)
              {
                v710 = 0;
                v711 = 0;
                v712 = 0;
                v713 = 0;
                v714 = v159[19];
                v715 = v248[19];
                v716 = v158[19];
                v717 = (uint64_t *)v159[3];
                v718 = *v717;
                v719 = v717[1];
                v720 = (uint64_t *)v248[3];
                v722 = *v720;
                v721 = v720[1];
                v723 = v160[1];
                do
                {
                  if (v723)
                  {
                    for (n = 0; n < v723; ++n)
                    {
                      *(_DWORD *)(v716 + 4 * v711 + 4 * n) = *(_DWORD *)(v715 + 4 * v712) | *(_DWORD *)(v714 + 4 * v713);
                      v713 += v719;
                      v712 += v721;
                      v723 = v160[1];
                    }
                    v725 = v723;
                    v709 = *v160;
                    v711 += n;
                  }
                  else
                  {
                    v725 = 0;
                  }
                  v713 = v713 + v718 - v725 * v719;
                  v712 = v712 + v722 - v721 * v249[1];
                  ++v710;
                }
                while (v710 < v709);
              }
              break;
            case 3uLL:
              v726 = *v160;
              if (*v160)
              {
                v727 = 0;
                v728 = 0;
                v729 = 0;
                v730 = 0;
                v731 = v159[19];
                v732 = v248[19];
                v733 = v158[19];
                v734 = (uint64_t *)v159[3];
                v735 = *v734;
                v736 = v734[1];
                v737 = (uint64_t *)v248[3];
                v738 = *v737;
                v739 = v737[1];
                v740 = v160[1];
                v741 = v740;
                do
                {
                  if (v741)
                  {
                    v742 = 0;
                    v743 = v734[2];
                    v744 = v737[2];
                    v745 = v160[2];
                    do
                    {
                      if (v745)
                      {
                        for (ii = 0; ii < v745; ++ii)
                        {
                          *(_DWORD *)(v733 + 4 * v728 + 4 * ii) = *(_DWORD *)(v732 + 4 * v729) | *(_DWORD *)(v731 + 4 * v730);
                          v730 += v743;
                          v729 += v744;
                          v745 = v160[2];
                        }
                        v747 = v745;
                        v740 = v160[1];
                        v728 += ii;
                      }
                      else
                      {
                        v747 = 0;
                      }
                      v730 = v730 + v736 - v747 * v743;
                      v729 = v729 + v739 - v744 * v249[2];
                      ++v742;
                    }
                    while (v742 < v740);
                    v748 = v740;
                    v726 = *v160;
                    v741 = v740;
                  }
                  else
                  {
                    v748 = 0;
                  }
                  v730 = v730 + v735 - v748 * v736;
                  v729 = v729 + v738 - v739 * v249[1];
                  ++v727;
                }
                while (v727 < v726);
              }
              break;
            case 4uLL:
              v749 = *v160;
              if (*v160)
              {
                v750 = 0;
                v751 = 0;
                v752 = 0;
                v753 = 0;
                v754 = v159[19];
                v755 = v248[19];
                v756 = v158[19];
                v757 = (uint64_t *)v159[3];
                v758 = *v757;
                v759 = v757[1];
                v760 = (uint64_t *)v248[3];
                v761 = *v760;
                v762 = v760[1];
                v763 = v160[1];
                v764 = v763;
                do
                {
                  if (v764)
                  {
                    v765 = 0;
                    v766 = v757[2];
                    v767 = v760[2];
                    v768 = v160[2];
                    v769 = v768;
                    do
                    {
                      if (v769)
                      {
                        v770 = 0;
                        v771 = v757[3];
                        v772 = v760[3];
                        v773 = v160[3];
                        do
                        {
                          if (v773)
                          {
                            for (jj = 0; jj < v773; ++jj)
                            {
                              *(_DWORD *)(v756 + 4 * v751 + 4 * jj) = *(_DWORD *)(v755 + 4 * v752) | *(_DWORD *)(v754 + 4 * v753);
                              v753 += v771;
                              v752 += v772;
                              v773 = v160[3];
                            }
                            v775 = v773;
                            v768 = v160[2];
                            v751 += jj;
                          }
                          else
                          {
                            v775 = 0;
                          }
                          v753 = v753 + v766 - v775 * v771;
                          v752 = v752 + v767 - v772 * v249[3];
                          ++v770;
                        }
                        while (v770 < v768);
                        v776 = v768;
                        v763 = v160[1];
                        v769 = v768;
                      }
                      else
                      {
                        v776 = 0;
                      }
                      v753 = v753 + v759 - v776 * v766;
                      v752 = v752 + v762 - v767 * v249[2];
                      ++v765;
                    }
                    while (v765 < v763);
                    v777 = v763;
                    v749 = *v160;
                    v764 = v763;
                  }
                  else
                  {
                    v777 = 0;
                  }
                  v753 = v753 + v758 - v777 * v759;
                  v752 = v752 + v761 - v762 * v249[1];
                  ++v750;
                }
                while (v750 < v749);
              }
              break;
            default:
              v697 = v158[6];
              if (v697)
              {
                v698 = 0;
                v1633 = v248[19];
                v1655 = v159[19];
                v1619 = v158[19];
                do
                {
                  v699 = 0;
                  if ((v162 & 0x80000000) == 0)
                  {
                    v700 = v159[3];
                    v701 = v162;
                    v702 = v698;
                    do
                    {
                      v703 = ldiv(v702, v160[v701]);
                      v702 = v703.quot;
                      v699 += *(_QWORD *)(v700 + 8 * v701--) * v703.rem;
                    }
                    while (v701 != -1);
                  }
                  v704 = v1672;
                  if ((v1672 & 0x80000000) != 0)
                  {
                    LODWORD(v705) = 0;
                  }
                  else
                  {
                    v705 = 0;
                    v706 = v248[3];
                    v707 = v698;
                    do
                    {
                      v708 = ldiv(v707, v249[v704]);
                      v707 = v708.quot;
                      v705 += *(_QWORD *)(v706 + 8 * v704--) * v708.rem;
                    }
                    while (v704 != -1);
                  }
                  *(_DWORD *)(v1619 + 4 * v698++) = *(_DWORD *)(v1633 + 4 * (int)v705) | *(_DWORD *)(v1655 + 4 * (int)v699);
                  v162 = v1687;
                }
                while (v698 != v697);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      v22 = *(uint64_t **)a1;
      v21 = *(uint64_t **)(a1 + 8);
      switch(v23)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)v1 + 152) = **(_QWORD **)(*v21 + 152) | **(_QWORD **)(*v22 + 152);
          return;
        case 1:
          v196 = *(_DWORD *)(*v21 + 160);
          if (v196 >= 1)
          {
            v197 = **(_QWORD **)(*v22 + 152);
            v198 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v199 = *(uint64_t **)(*v21 + 152);
            v200 = v196 + 1;
            do
            {
              v201 = *v199++;
              *v198++ = v201 | v197;
              --v200;
            }
            while (v200 > 1);
          }
          return;
        case 2:
          v202 = *(_DWORD *)(*v22 + 160);
          if (v202 >= 1)
          {
            v203 = **(_QWORD **)(*v21 + 152);
            v204 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v205 = *(uint64_t **)(*v22 + 152);
            v206 = v202 + 1;
            do
            {
              v207 = *v205++;
              *v204++ = v207 | v203;
              --v206;
            }
            while (v206 > 1);
          }
          return;
        case 3:
          v208 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v208 >= 1)
          {
            v209 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v210 = *(uint64_t **)(*v21 + 152);
            v211 = *(uint64_t **)(*v22 + 152);
            v212 = v208 + 1;
            do
            {
              v214 = *v211++;
              v213 = v214;
              v215 = *v210++;
              *v209++ = v215 | v213;
              --v212;
            }
            while (v212 > 1);
          }
          return;
        default:
          v187 = *(_QWORD **)v1;
          v188 = (_QWORD *)*v22;
          v189 = *(int **)*v22;
          v190 = (v188[1] - (_QWORD)v189) >> 2;
          v191 = (v190 - 1);
          if ((int)v191 >= -1)
            v192 = -1;
          else
            v192 = v190 - 1;
          v193 = v192 + 1;
          v194 = v190 + 1;
          break;
      }
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](exception, "[BitwiseBinary::eval_cpu] Type not supported");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  while (1)
  {
    v195 = v194 - 2;
    if (v194 - 2 < 0)
      break;
    --v194;
    if (*(_QWORD *)(v188[3] + 8 * v195) != *(_QWORD *)(v187[3] + 8 * v195))
      goto LABEL_210;
  }
  v194 = v193;
LABEL_210:
  v256 = (_QWORD *)*v21;
  v257 = *(int **)*v21;
  v258 = (v256[1] - (_QWORD)v257) >> 2;
  v259 = (v258 - 1);
  if ((int)v259 >= -1)
    v260 = -1;
  else
    v260 = v258 - 1;
  v261 = v260 + 1;
  v262 = v258 + 1;
  while (1)
  {
    v263 = v262 - 2;
    if (v262 - 2 < 0)
      break;
    --v262;
    if (*(_QWORD *)(v256[3] + 8 * v263) != *(_QWORD *)(v187[3] + 8 * v263))
      goto LABEL_238;
  }
  v262 = v261;
LABEL_238:
  v272 = v190 + 1;
  while (1)
  {
    v273 = v272 - 2;
    if (v272 - 2 < 0)
      break;
    --v272;
    if (*(_QWORD *)(v188[3] + 8 * v273))
      goto LABEL_263;
  }
  v272 = v193;
LABEL_263:
  v282 = v258 + 1;
  while (1)
  {
    v283 = v282 - 2;
    if (v282 - 2 < 0)
      break;
    --v282;
    if (*(_QWORD *)(v256[3] + 8 * v283))
      goto LABEL_360;
  }
  v282 = v261;
LABEL_360:
  v328 = (uint64_t)(v187[1] - *v187) >> 2;
  if (v194 <= v262)
    v329 = v262;
  else
    v329 = v194;
  if (v194 <= v282)
    v194 = v282;
  if (v272 > v262)
    v262 = v272;
  if (v328 > v262)
  {
    v330 = 1;
  }
  else
  {
    v262 = (uint64_t)(v187[1] - *v187) >> 2;
    v330 = 4;
  }
  if (v328 > v194)
  {
    v331 = 2;
  }
  else
  {
    v194 = v262;
    v331 = v330;
  }
  if (v328 > v329)
  {
    v194 = v329;
    v331 = 3;
  }
  v1673 = v259;
  v1688 = v191;
  if (!v194)
    goto LABEL_377;
  v332 = *(_QWORD *)(v187[3] + 8 * (v194 - 1));
  if (v332 < 0x10)
    goto LABEL_377;
  switch(v331)
  {
    case 1:
      if (v194 == 2)
      {
        v1502 = *v189;
        if ((_DWORD)v1502)
        {
          v1503 = 0;
          v1504 = 0;
          v1505 = 0;
          v1506 = v188[19];
          v1507 = v256[19];
          v1508 = v187[19];
          v1509 = v189[1];
          v1510 = (uint64_t *)v188[3];
          v1511 = *v1510;
          v1512 = v1510[1];
          v1513 = (uint64_t *)v256[3];
          v1514 = *v1513;
          v1515 = v1513[1];
          if (v1509 <= 1)
            v1516 = 1;
          else
            v1516 = v189[1];
          v1517 = v1511 - v1512 * v1509;
          v1518 = v1514 - v1515 * v257[1];
          do
          {
            if ((_DWORD)v1509)
            {
              v1519 = 0;
              v1520 = v1507 + 8 * v1504;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1521 = 0;
                  v1522 = *(_QWORD *)(v1506 + 8 * v1505);
                  v1523 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1508 + v1521) = *(_QWORD *)(v1520 + v1521) | v1522;
                    --v1523;
                    v1521 += 8;
                  }
                  while (v1523 > 1);
                }
                v1505 += v1512;
                v1504 += v1515;
                v1508 += 8 * (int)v332;
                ++v1519;
                v1520 += 8 * v1515;
              }
              while (v1519 != v1516);
            }
            v1505 += v1517;
            v1504 += v1518;
            ++v1503;
          }
          while (v1503 != v1502);
        }
      }
      else if (v194 == 1)
      {
        v944 = *v189;
        if ((_DWORD)v944)
        {
          v945 = 0;
          v946 = 0;
          v947 = v188[19];
          v948 = v256[19];
          v949 = v187[19];
          v950 = *(_QWORD *)v188[3];
          v951 = 8 * *(_QWORD *)v256[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v952 = 0;
              v953 = *(_QWORD *)(v947 + 8 * v946);
              v954 = v332 + 1;
              do
              {
                *(_QWORD *)(v949 + v952) = *(_QWORD *)(v948 + v952) | v953;
                --v954;
                v952 += 8;
              }
              while (v954 > 1);
            }
            v946 += v950;
            ++v945;
            v949 += 8 * (int)v332;
            v948 += v951;
          }
          while (v945 != v944);
        }
      }
      else
      {
        v1649 = v187[6];
        if (v1649)
        {
          v1668 = 0;
          v1591 = v256[19];
          v1605 = v188[19];
          v1524 = v187[19];
          do
          {
            v1525 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1526 = v188[3];
              v1527 = v191;
              v1528 = v1668;
              do
              {
                v1529 = ldiv(v1528, v189[v1527]);
                v1528 = v1529.quot;
                v1525 += *(_QWORD *)(v1526 + 8 * v1527--) * v1529.rem;
              }
              while (v1527 != -1);
            }
            v1530 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1531) = 0;
            }
            else
            {
              v1531 = 0;
              v1532 = v256[3];
              v1533 = v1668;
              do
              {
                v1534 = ldiv(v1533, v257[v1530]);
                v1533 = v1534.quot;
                v1531 += *(_QWORD *)(v1532 + 8 * v1530--) * v1534.rem;
              }
              while (v1530 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1535 = 0;
              v1536 = *(_QWORD *)(v1605 + 8 * (int)v1525);
              v1537 = v332 + 1;
              do
              {
                *(_QWORD *)(v1524 + v1535) = *(_QWORD *)(v1591 + 8 * (int)v1531 + v1535) | v1536;
                --v1537;
                v1535 += 8;
              }
              while (v1537 > 1);
            }
            v1524 += 8 * (int)v332;
            v1668 += (int)v332;
          }
          while (v1668 < v1649);
        }
      }
      break;
    case 2:
      if (v194 == 2)
      {
        v1538 = *v189;
        if ((_DWORD)v1538)
        {
          v1539 = 0;
          v1540 = 0;
          v1541 = 0;
          v1542 = v188[19];
          v1543 = v256[19];
          v1544 = v187[19];
          v1545 = v189[1];
          v1546 = (uint64_t *)v188[3];
          v1547 = *v1546;
          v1548 = v1546[1];
          v1549 = (uint64_t *)v256[3];
          v1550 = *v1549;
          v1551 = v1549[1];
          if (v1545 <= 1)
            v1552 = 1;
          else
            v1552 = v189[1];
          v1553 = v1547 - v1548 * v1545;
          v1554 = v1550 - v1551 * v257[1];
          do
          {
            if ((_DWORD)v1545)
            {
              v1555 = 0;
              v1556 = v1542 + 8 * v1541;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1557 = 0;
                  v1558 = *(_QWORD *)(v1543 + 8 * v1540);
                  v1559 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1544 + v1557) = *(_QWORD *)(v1556 + v1557) | v1558;
                    --v1559;
                    v1557 += 8;
                  }
                  while (v1559 > 1);
                }
                v1541 += v1548;
                v1540 += v1551;
                v1544 += 8 * (int)v332;
                ++v1555;
                v1556 += 8 * v1548;
              }
              while (v1555 != v1552);
            }
            v1541 += v1553;
            v1540 += v1554;
            ++v1539;
          }
          while (v1539 != v1538);
        }
      }
      else if (v194 == 1)
      {
        v955 = *v189;
        if ((_DWORD)v955)
        {
          v956 = 0;
          v957 = 0;
          v958 = v188[19];
          v959 = v256[19];
          v960 = v187[19];
          v961 = *(_QWORD *)v256[3];
          v962 = 8 * *(_QWORD *)v188[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v963 = 0;
              v964 = *(_QWORD *)(v959 + 8 * v957);
              v965 = v332 + 1;
              do
              {
                *(_QWORD *)(v960 + v963) = *(_QWORD *)(v958 + v963) | v964;
                --v965;
                v963 += 8;
              }
              while (v965 > 1);
            }
            v957 += v961;
            ++v956;
            v960 += 8 * (int)v332;
            v958 += v962;
          }
          while (v956 != v955);
        }
      }
      else
      {
        v1650 = v187[6];
        if (v1650)
        {
          v1669 = 0;
          v1592 = v256[19];
          v1606 = v188[19];
          v1560 = v187[19];
          do
          {
            v1561 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1562 = v188[3];
              v1563 = v191;
              v1564 = v1669;
              do
              {
                v1565 = ldiv(v1564, v189[v1563]);
                v1564 = v1565.quot;
                v1561 += *(_QWORD *)(v1562 + 8 * v1563--) * v1565.rem;
              }
              while (v1563 != -1);
            }
            v1566 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1567) = 0;
            }
            else
            {
              v1567 = 0;
              v1568 = v256[3];
              v1569 = v1669;
              do
              {
                v1570 = ldiv(v1569, v257[v1566]);
                v1569 = v1570.quot;
                v1567 += *(_QWORD *)(v1568 + 8 * v1566--) * v1570.rem;
              }
              while (v1566 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1571 = 0;
              v1572 = *(_QWORD *)(v1592 + 8 * (int)v1567);
              v1573 = v332 + 1;
              do
              {
                *(_QWORD *)(v1560 + v1571) = *(_QWORD *)(v1606 + 8 * (int)v1561 + v1571) | v1572;
                --v1573;
                v1571 += 8;
              }
              while (v1573 > 1);
            }
            v1560 += 8 * (int)v332;
            v1669 += (int)v332;
          }
          while (v1669 < v1650);
        }
      }
      break;
    case 3:
      if (v194 == 2)
      {
        v1193 = *v189;
        if ((_DWORD)v1193)
        {
          v1194 = 0;
          v1195 = 0;
          v1196 = 0;
          v1197 = v188[19];
          v1198 = v256[19];
          v1199 = v187[19];
          v1200 = v189[1];
          v1201 = (uint64_t *)v188[3];
          v1202 = *v1201;
          v1203 = v1201[1];
          v1204 = (uint64_t *)v256[3];
          v1205 = *v1204;
          v1206 = v1204[1];
          if (v1200 <= 1)
            v1207 = 1;
          else
            v1207 = v189[1];
          v1208 = v1202 - v1203 * v1200;
          v1209 = v1205 - v1206 * v257[1];
          do
          {
            if ((_DWORD)v1200)
            {
              v1210 = 0;
              v1211 = v1198 + 8 * v1195;
              v1212 = v1197 + 8 * v1196;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1213 = 0;
                  v1214 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1199 + v1213) = *(_QWORD *)(v1211 + v1213) | *(_QWORD *)(v1212 + v1213);
                    --v1214;
                    v1213 += 8;
                  }
                  while (v1214 > 1);
                }
                v1196 += v1203;
                v1195 += v1206;
                v1199 += 8 * (int)v332;
                ++v1210;
                v1211 += 8 * v1206;
                v1212 += 8 * v1203;
              }
              while (v1210 != v1207);
            }
            v1196 += v1208;
            v1195 += v1209;
            ++v1194;
          }
          while (v1194 != v1193);
        }
      }
      else if (v194 == 1)
      {
        v375 = *v189;
        if ((_DWORD)v375)
        {
          v376 = 0;
          v377 = v188[19];
          v378 = v256[19];
          v379 = v187[19];
          v380 = 8 * *(_QWORD *)v256[3];
          v381 = 8 * *(_QWORD *)v188[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v382 = 0;
              v383 = v332 + 1;
              do
              {
                *(_QWORD *)(v379 + v382) = *(_QWORD *)(v378 + v382) | *(_QWORD *)(v377 + v382);
                --v383;
                v382 += 8;
              }
              while (v383 > 1);
            }
            ++v376;
            v379 += 8 * (int)v332;
            v378 += v380;
            v377 += v381;
          }
          while (v376 != v375);
        }
      }
      else
      {
        v1642 = v187[6];
        if (v1642)
        {
          v1661 = 0;
          v1584 = v256[19];
          v1598 = v188[19];
          v1215 = v187[19];
          do
          {
            v1216 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1217 = v188[3];
              v1218 = v191;
              v1219 = v1661;
              do
              {
                v1220 = ldiv(v1219, v189[v1218]);
                v1219 = v1220.quot;
                v1216 += *(_QWORD *)(v1217 + 8 * v1218--) * v1220.rem;
              }
              while (v1218 != -1);
            }
            v1221 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1222) = 0;
            }
            else
            {
              v1222 = 0;
              v1223 = v256[3];
              v1224 = v1661;
              do
              {
                v1225 = ldiv(v1224, v257[v1221]);
                v1224 = v1225.quot;
                v1222 += *(_QWORD *)(v1223 + 8 * v1221--) * v1225.rem;
              }
              while (v1221 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1226 = 0;
              v1227 = v332 + 1;
              do
              {
                *(_QWORD *)(v1215 + v1226) = *(_QWORD *)(v1584 + 8 * (int)v1222 + v1226) | *(_QWORD *)(v1598 + 8 * (int)v1216 + v1226);
                --v1227;
                v1226 += 8;
              }
              while (v1227 > 1);
            }
            v1215 += 8 * (int)v332;
            v1661 += (int)v332;
          }
          while (v1661 < v1642);
        }
      }
      break;
    default:
LABEL_377:
      switch(v328)
      {
        case 1uLL:
          v333 = v187[6];
          if (v333)
          {
            v334 = (_QWORD *)v188[19];
            v335 = (_QWORD *)v256[19];
            v336 = (_QWORD *)v187[19];
            v337 = 8 * *(_QWORD *)v256[3];
            v338 = 8 * *(_QWORD *)v188[3];
            do
            {
              *v336++ = *v335 | *v334;
              v335 = (_QWORD *)((char *)v335 + v337);
              v334 = (_QWORD *)((char *)v334 + v338);
              --v333;
            }
            while (v333);
          }
          break;
        case 2uLL:
          v790 = *v189;
          if ((_DWORD)v790)
          {
            v791 = 0;
            v792 = 0;
            v793 = 0;
            v794 = 0;
            v795 = v188[19];
            v796 = v256[19];
            v797 = v187[19];
            v798 = v189[1];
            v799 = (uint64_t *)v188[3];
            v800 = *v799;
            v801 = v799[1];
            v802 = (uint64_t *)v256[3];
            v803 = *v802;
            v804 = v802[1];
            v805 = v803 - v804 * v257[1];
            if (v798 <= 1)
              v806 = 1;
            else
              v806 = v189[1];
            v807 = v800 - v801 * v798;
            do
            {
              if ((_DWORD)v798)
              {
                v808 = v792 + v806;
                v809 = (_QWORD *)(v797 + 8 * v792);
                v810 = v806;
                do
                {
                  *v809++ = *(_QWORD *)(v796 + 8 * v793) | *(_QWORD *)(v795 + 8 * v794);
                  v794 += v801;
                  v793 += v804;
                  --v810;
                }
                while (v810);
                v792 = v808;
              }
              v794 += v807;
              v793 += v805;
              ++v791;
            }
            while (v791 != v790);
          }
          break;
        case 3uLL:
          v811 = *v189;
          if ((_DWORD)v811)
          {
            v812 = 0;
            v813 = 0;
            v814 = 0;
            v815 = 0;
            v816 = v188[19];
            v817 = v256[19];
            v818 = v187[19];
            v819 = v189[1];
            v820 = (_QWORD *)v188[3];
            v821 = v820[1];
            v822 = (_QWORD *)v256[3];
            v823 = v822[1];
            v824 = *v822 - v823 * v257[1];
            if (v819 <= 1)
              v825 = 1;
            else
              v825 = v189[1];
            v826 = *v820 - v821 * v819;
            do
            {
              if ((_DWORD)v819)
              {
                v827 = 0;
                v828 = v189[2];
                v829 = v820[2];
                v830 = v822[2];
                if (v828 <= 1)
                  v831 = 1;
                else
                  v831 = v189[2];
                v832 = v823 - v830 * v257[2];
                do
                {
                  v833 = v831;
                  if ((_DWORD)v828)
                  {
                    do
                    {
                      *(_QWORD *)(v818 + 8 * v813++) = *(_QWORD *)(v817 + 8 * v814) | *(_QWORD *)(v816 + 8 * v815);
                      v815 += v829;
                      v814 += v830;
                      --v833;
                    }
                    while (v833);
                  }
                  v815 += v821 - v829 * v828;
                  v814 += v832;
                  ++v827;
                }
                while (v827 != v825);
              }
              v815 += v826;
              v814 += v824;
              ++v812;
            }
            while (v812 != v811);
          }
          break;
        case 4uLL:
          v1692 = *v189;
          if ((_DWORD)v1692)
          {
            v834 = 0;
            v835 = 0;
            v836 = 0;
            v837 = 0;
            v838 = v188[19];
            v839 = v256[19];
            v840 = v187[19];
            v841 = v189[1];
            v842 = (_QWORD *)v188[3];
            v843 = (_QWORD *)v256[3];
            v1609 = v843[1];
            v1621 = v842[1];
            v1657 = *v843 - v1609 * v257[1];
            v1677 = v189[1];
            if (v841 <= 1)
              v844 = 1;
            else
              v844 = v189[1];
            v1635 = *v842 - v842[1] * v841;
            do
            {
              if (v1677)
              {
                v845 = 0;
                v846 = v189[2];
                v847 = v842[2];
                v848 = v843[2];
                if (v846 <= 1)
                  v849 = 1;
                else
                  v849 = v189[2];
                v850 = v1609 - v848 * v257[2];
                do
                {
                  if ((_DWORD)v846)
                  {
                    v851 = 0;
                    v852 = v189[3];
                    v853 = v842[3];
                    v854 = v843[3];
                    if (v852 <= 1)
                      v855 = 1;
                    else
                      v855 = v189[3];
                    v856 = v848 - v854 * v257[3];
                    do
                    {
                      v857 = v855;
                      if ((_DWORD)v852)
                      {
                        do
                        {
                          *(_QWORD *)(v840 + 8 * v835++) = *(_QWORD *)(v839 + 8 * v836) | *(_QWORD *)(v838 + 8 * v837);
                          v837 += v853;
                          v836 += v854;
                          --v857;
                        }
                        while (v857);
                      }
                      v837 += v847 - v853 * v852;
                      v836 += v856;
                      ++v851;
                    }
                    while (v851 != v849);
                  }
                  v837 += v1621 - v847 * v846;
                  v836 += v850;
                  ++v845;
                }
                while (v845 != v844);
              }
              v837 += v1635;
              v836 += v1657;
              ++v834;
            }
            while (v834 != v1692);
          }
          break;
        default:
          v778 = v187[6];
          if (v778)
          {
            v779 = 0;
            v1634 = v256[19];
            v1656 = v188[19];
            v1620 = v187[19];
            do
            {
              v780 = 0;
              if ((v191 & 0x80000000) == 0)
              {
                v781 = v188[3];
                v782 = v191;
                v783 = v779;
                do
                {
                  v784 = ldiv(v783, v189[v782]);
                  v783 = v784.quot;
                  v780 += *(_QWORD *)(v781 + 8 * v782--) * v784.rem;
                }
                while (v782 != -1);
              }
              v785 = v1673;
              if ((v1673 & 0x80000000) != 0)
              {
                LODWORD(v786) = 0;
              }
              else
              {
                v786 = 0;
                v787 = v256[3];
                v788 = v779;
                do
                {
                  v789 = ldiv(v788, v257[v785]);
                  v788 = v789.quot;
                  v786 += *(_QWORD *)(v787 + 8 * v785--) * v789.rem;
                }
                while (v785 != -1);
              }
              *(_QWORD *)(v1620 + 8 * v779++) = *(_QWORD *)(v1634 + 8 * (int)v786) | *(_QWORD *)(v1656
                                                                                                 + 8 * (int)v780);
              v191 = v1688;
            }
            while (v779 != v778);
          }
          break;
      }
      return;
  }
}

void sub_2423D8570(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::BitwiseXor>(uint64_t a1)
{
  mlx::core::array *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int binary_op_type;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int *v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  _BYTE *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  int v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t *v53;
  uint64_t *v54;
  mlx::core::array *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  char v66;
  _BYTE *v67;
  char *v68;
  unsigned int v69;
  char v70;
  int v71;
  char v72;
  _BYTE *v73;
  char *v74;
  unsigned int v75;
  char v76;
  int v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  unsigned int v81;
  char v82;
  char v83;
  char v84;
  int **v85;
  int *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  int *v118;
  int *v119;
  unsigned int v120;
  int v121;
  int v122;
  int *v123;
  int *v124;
  int *v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  _QWORD *v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  char v139;
  _BYTE *v140;
  char *v141;
  unsigned int v142;
  char v143;
  int v144;
  char v145;
  _BYTE *v146;
  char *v147;
  unsigned int v148;
  char v149;
  int v150;
  _BYTE *v151;
  char *v152;
  char *v153;
  unsigned int v154;
  char v155;
  char v156;
  char v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  int *v169;
  int *v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int *v175;
  int *v176;
  unsigned int v177;
  int v178;
  int v179;
  int *v180;
  int *v181;
  int *v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  _QWORD *v187;
  _QWORD *v188;
  int *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD *v225;
  int *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  unsigned int v232;
  _QWORD *v233;
  int *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  int **v241;
  int *v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  unsigned int v247;
  _QWORD *v248;
  int *v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  _QWORD *v256;
  int *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unint64_t v284;
  int v285;
  int v286;
  int v287;
  unint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  _BYTE *v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  int v296;
  int v297;
  int v298;
  unint64_t v299;
  uint64_t v300;
  _DWORD *v301;
  _DWORD *v302;
  int *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  int v307;
  int v308;
  int v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int *v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  int v320;
  unint64_t v321;
  uint64_t v322;
  _DWORD *v323;
  _DWORD *v324;
  int *v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  int v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  int v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  int v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  unint64_t v384;
  int *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  ldiv_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  ldiv_t v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int *v407;
  uint64_t v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  int *v412;
  uint64_t v413;
  unint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  int *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  int v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  int *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  int v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int *v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  unsigned int v460;
  int v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int *v466;
  uint64_t v467;
  uint64_t v468;
  char v469;
  unsigned int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  ldiv_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  ldiv_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _BYTE *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  _QWORD *v534;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  ldiv_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  ldiv_t v561;
  int v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  unint64_t j;
  uint64_t v578;
  int v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  unint64_t k;
  uint64_t v600;
  uint64_t v601;
  int v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  int v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  int v622;
  unint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  unint64_t m;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  ldiv_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  ldiv_t v646;
  int v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int *v653;
  uint64_t v654;
  unint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  int *v658;
  uint64_t v659;
  unint64_t v660;
  int v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int *v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  _QWORD *v671;
  uint64_t v672;
  int *v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  int v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int *v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  int *v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  ldiv_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  int v707;
  ldiv_t v708;
  int v709;
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t *v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  unint64_t n;
  uint64_t v725;
  int v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t *v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  int v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  unint64_t ii;
  uint64_t v747;
  uint64_t v748;
  int v749;
  unint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t *v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  int v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  int v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  unint64_t jj;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  ldiv_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  ldiv_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  _QWORD *v820;
  uint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  _QWORD *v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  int v867;
  unsigned int v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  int v878;
  unsigned int v879;
  int v880;
  unint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  unsigned int v890;
  int v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  unsigned int v901;
  int v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int *v907;
  uint64_t v908;
  uint64_t v909;
  char v910;
  unsigned int v911;
  int v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int *v917;
  uint64_t v918;
  uint64_t v919;
  char v920;
  unsigned int v921;
  int v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  int v931;
  unsigned int v932;
  int v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  int v942;
  unsigned int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  unsigned int v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unsigned int v965;
  int v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  int *v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  unsigned int v975;
  _QWORD *v976;
  uint64_t v977;
  unint64_t v978;
  uint64_t v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  int v985;
  ldiv_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  ldiv_t v993;
  uint64_t v994;
  unsigned int v995;
  int v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int *v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  char v1005;
  unsigned int v1006;
  _QWORD *v1007;
  uint64_t v1008;
  unint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  ldiv_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  int v1023;
  ldiv_t v1024;
  uint64_t v1025;
  char v1026;
  unsigned int v1027;
  int v1028;
  unint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int *v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  char v1037;
  unsigned int v1038;
  _QWORD *v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  int v1048;
  ldiv_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  ldiv_t v1056;
  uint64_t v1057;
  char v1058;
  unsigned int v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unsigned int v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t i;
  ldiv_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  ldiv_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  int v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t *v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t *v1105;
  uint64_t v1106;
  uint64_t v1107;
  int v1108;
  int v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unsigned int v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  int v1120;
  ldiv_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  int v1125;
  ldiv_t v1126;
  uint64_t v1127;
  unsigned int v1128;
  int v1129;
  unint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  int *v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  unsigned int v1138;
  _QWORD *v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  int v1148;
  ldiv_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  ldiv_t v1156;
  uint64_t v1157;
  unsigned int v1158;
  int v1159;
  unint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t *v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  int v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  unsigned int v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  int v1184;
  ldiv_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  int v1189;
  ldiv_t v1190;
  uint64_t v1191;
  unsigned int v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  unint64_t v1200;
  uint64_t *v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unsigned int v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  ldiv_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  int v1224;
  ldiv_t v1225;
  uint64_t v1226;
  unsigned int v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t *v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  int v1248;
  unsigned int v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  ldiv_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  int quot;
  ldiv_t v1259;
  uint64_t v1260;
  int v1261;
  unsigned int v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  uint64_t *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  int v1283;
  unsigned int v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  ldiv_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  ldiv_t v1294;
  uint64_t v1295;
  int v1296;
  unsigned int v1297;
  int v1298;
  unint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t v1310;
  int v1311;
  int v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  unsigned int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  int v1323;
  ldiv_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  int v1328;
  ldiv_t v1329;
  uint64_t v1330;
  int v1331;
  unsigned int v1332;
  int v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t *v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  int v1347;
  unint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int v1351;
  unsigned int v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  int v1358;
  ldiv_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  int v1363;
  ldiv_t v1364;
  uint64_t v1365;
  int v1366;
  unsigned int v1367;
  int v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int *v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  char v1377;
  unsigned int v1378;
  _QWORD *v1379;
  uint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  int v1388;
  ldiv_t v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  ldiv_t v1396;
  uint64_t v1397;
  char v1398;
  unsigned int v1399;
  int v1400;
  unint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  int *v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  char v1409;
  unsigned int v1410;
  _QWORD *v1411;
  uint64_t v1412;
  unint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  ldiv_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  ldiv_t v1428;
  uint64_t v1429;
  char v1430;
  unsigned int v1431;
  int v1432;
  unint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t *v1442;
  uint64_t v1443;
  uint64_t v1444;
  int v1445;
  int v1446;
  unint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  unsigned int v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  int v1457;
  ldiv_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  int v1462;
  ldiv_t v1463;
  uint64_t v1464;
  int v1465;
  unsigned int v1466;
  int v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t *v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t *v1477;
  uint64_t v1478;
  uint64_t v1479;
  int v1480;
  int v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  int v1485;
  unsigned int v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  int v1492;
  ldiv_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  int v1497;
  ldiv_t v1498;
  uint64_t v1499;
  int v1500;
  unsigned int v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t *v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t *v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  unsigned int v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  int v1528;
  ldiv_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  int v1533;
  ldiv_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unsigned int v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  unint64_t v1545;
  uint64_t *v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  unsigned int v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  int v1564;
  ldiv_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  int v1569;
  ldiv_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  unsigned int v1573;
  void *exception;
  unsigned int v1575;
  unsigned int v1576;
  unsigned int v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  unsigned int v1611;
  unint64_t v1612;
  unint64_t v1613;
  unsigned int v1614;
  unsigned int v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  int *v1622;
  int *v1623;
  int *v1624;
  uint64_t v1625;
  int *v1626;
  uint64_t v1627;
  uint64_t v1628;
  int *v1629;
  int *v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unint64_t v1641;
  unint64_t v1642;
  unint64_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  unint64_t v1647;
  unint64_t v1648;
  unint64_t v1649;
  unint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  unint64_t v1658;
  uint64_t v1659;
  unint64_t v1660;
  unint64_t v1661;
  unint64_t v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  unint64_t v1666;
  unint64_t v1667;
  unint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  int v1675;
  int *v1676;
  int v1677;
  unint64_t v1678;
  unint64_t v1679;
  unint64_t v1680;
  unint64_t v1681;
  unint64_t v1682;
  unint64_t v1683;
  mlx::core::array *v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;

  v1 = *(mlx::core::array **)(a1 + 16);
  v2 = a1;
  switch(*(_DWORD *)(*(_QWORD *)v1 + 56))
  {
    case 0:
      v4 = *(uint64_t **)a1;
      v3 = *(uint64_t **)(a1 + 8);
      switch(binary_op_type)
      {
        case 0:
          **(_BYTE **)(*(_QWORD *)v1 + 152) = (**(_BYTE **)(*v4 + 152) != 0) ^ (**(_BYTE **)(*v3 + 152) != 0);
          goto LABEL_33;
        case 1:
          v33 = *(_DWORD *)(*v3 + 160);
          if (v33 >= 1)
          {
            v34 = **(unsigned __int8 **)(*v4 + 152);
            v35 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v36 = *(unsigned __int8 **)(*v3 + 152);
            v37 = v33 + 1;
            do
            {
              v38 = *v36++;
              *v35++ = (v34 != 0) ^ (v38 != 0);
              --v37;
            }
            while (v37 > 1);
          }
          goto LABEL_33;
        case 2:
          v39 = *(_DWORD *)(*v4 + 160);
          if (v39 >= 1)
          {
            v40 = **(unsigned __int8 **)(*v3 + 152);
            v41 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v42 = *(unsigned __int8 **)(*v4 + 152);
            v43 = v39 + 1;
            do
            {
              v44 = *v42++;
              *v41++ = (v40 != 0) ^ (v44 != 0);
              --v43;
            }
            while (v43 > 1);
          }
          goto LABEL_33;
        case 3:
          v45 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v45 >= 1)
          {
            v46 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v47 = *(unsigned __int8 **)(*v3 + 152);
            v48 = *(unsigned __int8 **)(*v4 + 152);
            v49 = v45 + 1;
            do
            {
              v50 = *v48++;
              v51 = v50 != 0;
              v52 = *v47++;
              *v46++ = v51 ^ (v52 != 0);
              --v49;
            }
            while (v49 > 1);
          }
          goto LABEL_33;
        default:
          v24 = *(_QWORD **)v1;
          v25 = (_QWORD *)*v4;
          v26 = *(int **)*v4;
          v27 = (v25[1] - (_QWORD)v26) >> 2;
          v28 = (v27 - 1);
          if ((int)v28 >= -1)
            v29 = -1;
          else
            v29 = v27 - 1;
          v30 = v29 + 1;
          v31 = v27 + 1;
          break;
      }
      while (1)
      {
        v32 = v31 - 2;
        if (v31 - 2 < 0)
          break;
        --v31;
        if (*(_QWORD *)(v25[3] + 8 * v32) != *(_QWORD *)(v24[3] + 8 * v32))
          goto LABEL_179;
      }
      v31 = v30;
LABEL_179:
      v225 = (_QWORD *)*v3;
      v226 = *(int **)*v3;
      v227 = (v225[1] - (_QWORD)v226) >> 2;
      v228 = (v227 - 1);
      if ((int)v228 >= -1)
        v229 = -1;
      else
        v229 = v227 - 1;
      v230 = v229 + 1;
      v231 = v227 + 1;
      while (1)
      {
        v232 = v231 - 2;
        if (v231 - 2 < 0)
          break;
        --v231;
        if (*(_QWORD *)(v225[3] + 8 * v232) != *(_QWORD *)(v24[3] + 8 * v232))
          goto LABEL_218;
      }
      v231 = v230;
LABEL_218:
      v264 = v27 + 1;
      while (1)
      {
        v265 = v264 - 2;
        if (v264 - 2 < 0)
          break;
        --v264;
        if (*(_QWORD *)(v25[3] + 8 * v265))
          goto LABEL_243;
      }
      v264 = v30;
LABEL_243:
      v274 = v227 + 1;
      while (1)
      {
        v275 = v274 - 2;
        if (v274 - 2 < 0)
          break;
        --v274;
        if (*(_QWORD *)(v225[3] + 8 * v275))
          goto LABEL_268;
      }
      v274 = v230;
LABEL_268:
      v284 = (uint64_t)(v24[1] - *v24) >> 2;
      if (v31 <= v231)
        v285 = v231;
      else
        v285 = v31;
      if (v31 <= v274)
        v31 = v274;
      if (v264 > v231)
        v231 = v264;
      if (v284 > v231)
      {
        v286 = 1;
      }
      else
      {
        v231 = (uint64_t)(v24[1] - *v24) >> 2;
        v286 = 4;
      }
      if (v284 > v31)
      {
        v287 = 2;
      }
      else
      {
        v31 = v231;
        v287 = v286;
      }
      if (v284 > v285)
      {
        v31 = v285;
        v287 = 3;
      }
      v1670 = v228;
      v1685 = v28;
      if (!v31)
        goto LABEL_285;
      v288 = *(_QWORD *)(v24[3] + 8 * (v31 - 1));
      if (v288 < 0x10)
        goto LABEL_285;
      v1651 = *(_QWORD *)(v24[3] + 8 * (v31 - 1));
      switch(v287)
      {
        case 1:
          if (v31 == 2)
          {
            v1228 = *v26;
            if ((_DWORD)v1228)
            {
              v1229 = 0;
              v1230 = 0;
              v1231 = 0;
              v1232 = v25[19];
              v1233 = v225[19];
              v1234 = v24[19];
              v1235 = v26[1];
              v1236 = (uint64_t *)v25[3];
              v1237 = *v1236;
              v1238 = v1236[1];
              v1239 = (uint64_t *)v225[3];
              v1241 = *v1239;
              v1240 = v1239[1];
              if (v1235 <= 1)
                v1242 = 1;
              else
                v1242 = v26[1];
              v1243 = v1237 - v1238 * v1235;
              v1244 = v1241 - v1240 * v226[1];
              do
              {
                if ((_DWORD)v1235)
                {
                  v1245 = 0;
                  v1246 = v1233 + v1230;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1247 = 0;
                      v1248 = *(unsigned __int8 *)(v1232 + v1231);
                      v1249 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1234 + v1247) = (v1248 != 0) ^ (*(_BYTE *)(v1246 + v1247) != 0);
                        --v1249;
                        ++v1247;
                      }
                      while (v1249 > 1);
                    }
                    v1231 += v1238;
                    v1230 += v1240;
                    v1234 += (int)v288;
                    ++v1245;
                    v1246 += v1240;
                  }
                  while (v1245 != v1242);
                }
                v1231 += v1243;
                v1230 += v1244;
                ++v1229;
              }
              while (v1229 != v1228);
            }
          }
          else if (v31 == 1)
          {
            v858 = *v26;
            if ((_DWORD)v858)
            {
              v859 = 0;
              v860 = 0;
              v861 = v25[19];
              v862 = v225[19];
              v863 = v24[19];
              v864 = *(_QWORD *)v25[3];
              v865 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v866 = 0;
                  v867 = *(unsigned __int8 *)(v861 + v860);
                  v868 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v863 + v866) = (v867 != 0) ^ (*(_BYTE *)(v862 + v866) != 0);
                    --v868;
                    ++v866;
                  }
                  while (v868 > 1);
                }
                v860 += v864;
                v863 += (int)v288;
                ++v859;
                v862 += v865;
              }
              while (v859 != v858);
            }
          }
          else
          {
            v1612 = v24[6];
            if (v1612)
            {
              v1250 = 0;
              v1579 = v225[19];
              v1585 = v25[19];
              v1599 = (int)v288;
              v1576 = v288 + 1;
              v1251 = v24[19];
              do
              {
                v1627 = v1250;
                v1252 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1253 = v25[3];
                  do
                  {
                    v1254 = ldiv((int)v1250, v26[v28]);
                    LODWORD(v1250) = v1254.quot;
                    v1252 += *(_QWORD *)(v1253 + 8 * v28--) * v1254.rem;
                  }
                  while (v28 != -1);
                }
                v1255 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1256) = 0;
                }
                else
                {
                  v1256 = 0;
                  v1257 = v225[3];
                  quot = v1627;
                  do
                  {
                    v1259 = ldiv(quot, v226[v1255]);
                    quot = v1259.quot;
                    v1256 += *(_QWORD *)(v1257 + 8 * v1255--) * v1259.rem;
                  }
                  while (v1255 != -1);
                }
                if ((int)v1651 >= 1)
                {
                  v1260 = 0;
                  v1261 = *(unsigned __int8 *)(v1585 + (int)v1252);
                  v1262 = v1576;
                  do
                  {
                    *(_BYTE *)(v1251 + v1260) = (v1261 != 0) ^ (*(_BYTE *)(v1579 + (int)v1256 + v1260) != 0);
                    --v1262;
                    ++v1260;
                  }
                  while (v1262 > 1);
                }
                v1251 += v1599;
                v1250 = v1627 + v1599;
                v28 = v1685;
              }
              while (v1627 + v1599 < v1612);
            }
          }
          break;
        case 2:
          if (v31 == 2)
          {
            v1263 = *v26;
            if ((_DWORD)v1263)
            {
              v1264 = 0;
              v1265 = 0;
              v1266 = 0;
              v1267 = v25[19];
              v1268 = v225[19];
              v1269 = v24[19];
              v1270 = v26[1];
              v1271 = (uint64_t *)v25[3];
              v1272 = *v1271;
              v1273 = v1271[1];
              v1274 = (uint64_t *)v225[3];
              v1276 = *v1274;
              v1275 = v1274[1];
              if (v1270 <= 1)
                v1277 = 1;
              else
                v1277 = v26[1];
              v1278 = v1272 - v1273 * v1270;
              v1279 = v1276 - v1275 * v226[1];
              do
              {
                if ((_DWORD)v1270)
                {
                  v1280 = 0;
                  v1281 = v1267 + v1266;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1282 = 0;
                      v1283 = *(unsigned __int8 *)(v1268 + v1265);
                      v1284 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1269 + v1282) = (v1283 != 0) ^ (*(_BYTE *)(v1281 + v1282) != 0);
                        --v1284;
                        ++v1282;
                      }
                      while (v1284 > 1);
                    }
                    v1266 += v1273;
                    v1265 += v1275;
                    v1269 += (int)v288;
                    ++v1280;
                    v1281 += v1273;
                  }
                  while (v1280 != v1277);
                }
                v1266 += v1278;
                v1265 += v1279;
                ++v1264;
              }
              while (v1264 != v1263);
            }
          }
          else if (v31 == 1)
          {
            v869 = *v26;
            if ((_DWORD)v869)
            {
              v870 = 0;
              v871 = 0;
              v872 = v25[19];
              v873 = v225[19];
              v874 = v24[19];
              v875 = *(_QWORD *)v25[3];
              v876 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v877 = 0;
                  v878 = *(unsigned __int8 *)(v873 + v871);
                  v879 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v874 + v877) = (v878 != 0) ^ (*(_BYTE *)(v872 + v877) != 0);
                    --v879;
                    ++v877;
                  }
                  while (v879 > 1);
                }
                v871 += v876;
                v874 += (int)v288;
                ++v870;
                v872 += v875;
              }
              while (v870 != v869);
            }
          }
          else
          {
            v1613 = v24[6];
            if (v1613)
            {
              v1285 = 0;
              v1580 = v225[19];
              v1586 = v25[19];
              v1600 = (int)v288;
              v1577 = v288 + 1;
              v1286 = v24[19];
              do
              {
                v1628 = v1285;
                v1287 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1288 = v25[3];
                  do
                  {
                    v1289 = ldiv((int)v1285, v26[v28]);
                    LODWORD(v1285) = v1289.quot;
                    v1287 += *(_QWORD *)(v1288 + 8 * v28--) * v1289.rem;
                  }
                  while (v28 != -1);
                }
                v1290 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1291) = 0;
                }
                else
                {
                  v1291 = 0;
                  v1292 = v225[3];
                  v1293 = v1628;
                  do
                  {
                    v1294 = ldiv(v1293, v226[v1290]);
                    v1293 = v1294.quot;
                    v1291 += *(_QWORD *)(v1292 + 8 * v1290--) * v1294.rem;
                  }
                  while (v1290 != -1);
                }
                if ((int)v1651 >= 1)
                {
                  v1295 = 0;
                  v1296 = *(unsigned __int8 *)(v1580 + (int)v1291);
                  v1297 = v1577;
                  do
                  {
                    *(_BYTE *)(v1286 + v1295) = (v1296 != 0) ^ (*(_BYTE *)(v1586 + (int)v1287 + v1295) != 0);
                    --v1297;
                    ++v1295;
                  }
                  while (v1297 > 1);
                }
                v1286 += v1600;
                v1285 = v1628 + v1600;
                v28 = v1685;
              }
              while (v1628 + v1600 < v1613);
            }
          }
          break;
        case 3:
          if (v31 == 2)
          {
            v1060 = *v26;
            if ((_DWORD)v1060)
            {
              v1061 = 0;
              v1062 = 0;
              v1063 = 0;
              v1064 = v25[19];
              v1065 = v225[19];
              v1066 = v24[19];
              v1067 = v26[1];
              v1068 = (uint64_t *)v25[3];
              v1069 = *v1068;
              v1070 = v1068[1];
              v1071 = (uint64_t *)v225[3];
              v1073 = *v1071;
              v1072 = v1071[1];
              if (v1067 <= 1)
                v1074 = 1;
              else
                v1074 = v26[1];
              v1075 = v1069 - v1070 * v1067;
              v1076 = v1073 - v1072 * v226[1];
              do
              {
                if ((_DWORD)v1067)
                {
                  v1077 = 0;
                  v1078 = v1065 + v1062;
                  v1079 = v1064 + v1063;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1080 = 0;
                      v1081 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1066 + v1080) = (*(_BYTE *)(v1079 + v1080) != 0) ^ (*(_BYTE *)(v1078 + v1080) != 0);
                        --v1081;
                        ++v1080;
                      }
                      while (v1081 > 1);
                    }
                    v1063 += v1070;
                    v1062 += v1072;
                    v1066 += (int)v288;
                    ++v1077;
                    v1078 += v1072;
                    v1079 += v1070;
                  }
                  while (v1077 != v1074);
                }
                v1063 += v1075;
                v1062 += v1076;
                ++v1061;
              }
              while (v1061 != v1060);
            }
          }
          else if (v31 == 1)
          {
            v339 = *v26;
            if ((_DWORD)v339)
            {
              v340 = 0;
              v341 = v25[19];
              v342 = v225[19];
              v343 = v24[19];
              v344 = *(_QWORD *)v25[3];
              v345 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v346 = 0;
                  v347 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v343 + v346) = (*(_BYTE *)(v341 + v346) != 0) ^ (*(_BYTE *)(v342 + v346) != 0);
                    --v347;
                    ++v346;
                  }
                  while (v347 > 1);
                }
                v343 += (int)v288;
                ++v340;
                v342 += v345;
                v341 += v344;
              }
              while (v340 != v339);
            }
          }
          else
          {
            v1610 = v24[6];
            if (v1610)
            {
              v1082 = 0;
              v1578 = v225[19];
              v1581 = v25[19];
              v1595 = (int)v288;
              v1575 = v288 + 1;
              v1083 = v24[19];
              do
              {
                v1625 = v1082;
                v1084 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1085 = v25[3];
                  for (i = v28; i != -1; --i)
                  {
                    v1087 = ldiv((int)v1082, v26[i]);
                    LODWORD(v1082) = v1087.quot;
                    v1084 += *(_QWORD *)(v1085 + 8 * i) * v1087.rem;
                  }
                }
                v1088 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1089) = 0;
                }
                else
                {
                  v1089 = 0;
                  v1090 = v225[3];
                  v1091 = v1625;
                  do
                  {
                    v1092 = ldiv(v1091, v226[v1088]);
                    v1091 = v1092.quot;
                    v1089 += *(_QWORD *)(v1090 + 8 * v1088--) * v1092.rem;
                  }
                  while (v1088 != -1);
                }
                v28 = v1685;
                if ((int)v1651 >= 1)
                {
                  v1093 = 0;
                  v1094 = v1575;
                  do
                  {
                    *(_BYTE *)(v1083 + v1093) = (*(_BYTE *)(v1581 + (int)v1084 + v1093) != 0) ^ (*(_BYTE *)(v1578 + (int)v1089 + v1093) != 0);
                    --v1094;
                    ++v1093;
                  }
                  while (v1094 > 1);
                }
                v1083 += v1595;
                v1082 = v1625 + v1595;
              }
              while (v1625 + v1595 < v1610);
            }
          }
          break;
        default:
LABEL_285:
          switch(v284)
          {
            case 1uLL:
              v289 = v24[6];
              if (v289)
              {
                v290 = (_BYTE *)v25[19];
                v291 = (_BYTE *)v225[19];
                v292 = (_BYTE *)v24[19];
                v293 = *(_QWORD *)v25[3];
                v294 = *(_QWORD *)v225[3];
                do
                {
                  *v292++ = (*v290 != 0) ^ (*v291 != 0);
                  v291 += v294;
                  v290 += v293;
                  --v289;
                }
                while (v289);
              }
              break;
            case 2uLL:
              v482 = *v26;
              if ((_DWORD)v482)
              {
                v483 = 0;
                v484 = 0;
                v485 = 0;
                v486 = 0;
                v487 = v25[19];
                v488 = v225[19];
                v489 = v24[19];
                v490 = v26[1];
                v491 = (uint64_t *)v25[3];
                v492 = *v491;
                v493 = v491[1];
                v494 = (uint64_t *)v225[3];
                v495 = *v494;
                v496 = v494[1];
                v497 = v495 - v496 * v226[1];
                if (v490 <= 1)
                  v498 = 1;
                else
                  v498 = v26[1];
                v499 = v492 - v493 * v490;
                do
                {
                  if ((_DWORD)v490)
                  {
                    v500 = v484 + v498;
                    v501 = (_BYTE *)(v489 + v484);
                    v502 = v498;
                    do
                    {
                      *v501++ = (*(_BYTE *)(v487 + v486) != 0) ^ (*(_BYTE *)(v488 + v485) != 0);
                      v486 += v493;
                      v485 += v496;
                      --v502;
                    }
                    while (v502);
                    v484 = v500;
                  }
                  v486 += v499;
                  v485 += v497;
                  ++v483;
                }
                while (v483 != v482);
              }
              break;
            case 3uLL:
              v503 = *v26;
              if ((_DWORD)v503)
              {
                v504 = 0;
                v505 = 0;
                v506 = 0;
                v507 = 0;
                v508 = v25[19];
                v509 = v225[19];
                v510 = v24[19];
                v511 = v26[1];
                v512 = (_QWORD *)v25[3];
                v513 = v512[1];
                v514 = (_QWORD *)v225[3];
                v515 = v514[1];
                v516 = *v514 - v515 * v226[1];
                if (v511 <= 1)
                  v517 = 1;
                else
                  v517 = v26[1];
                v518 = *v512 - v513 * v511;
                do
                {
                  if ((_DWORD)v511)
                  {
                    v519 = 0;
                    v520 = v26[2];
                    v521 = v512[2];
                    v522 = v514[2];
                    if (v520 <= 1)
                      v523 = 1;
                    else
                      v523 = v26[2];
                    v524 = v515 - v522 * v226[2];
                    do
                    {
                      v525 = v523;
                      if ((_DWORD)v520)
                      {
                        do
                        {
                          *(_BYTE *)(v510 + v505++) = (*(_BYTE *)(v508 + v507) != 0) ^ (*(_BYTE *)(v509 + v506) != 0);
                          v507 += v521;
                          v506 += v522;
                          --v525;
                        }
                        while (v525);
                      }
                      v507 += v513 - v521 * v520;
                      v506 += v524;
                      ++v519;
                    }
                    while (v519 != v517);
                  }
                  v507 += v518;
                  v506 += v516;
                  ++v504;
                }
                while (v504 != v503);
              }
              break;
            case 4uLL:
              v1690 = *v26;
              if ((_DWORD)v1690)
              {
                v526 = 0;
                v527 = 0;
                v528 = 0;
                v529 = 0;
                v530 = v25[19];
                v531 = v225[19];
                v532 = v24[19];
                v533 = v26[1];
                v534 = (_QWORD *)v25[3];
                v535 = (_QWORD *)v225[3];
                v1594 = v535[1];
                v1608 = v534[1];
                v1653 = *v535 - v1594 * v226[1];
                v1675 = v26[1];
                if (v533 <= 1)
                  v536 = 1;
                else
                  v536 = v26[1];
                v1617 = *v534 - v534[1] * v533;
                v1631 = v2;
                do
                {
                  if (v1675)
                  {
                    v537 = 0;
                    v538 = v26[2];
                    v539 = v534[2];
                    v540 = v535[2];
                    if (v538 <= 1)
                      v541 = 1;
                    else
                      v541 = v26[2];
                    v542 = v1594 - v540 * v226[2];
                    do
                    {
                      if ((_DWORD)v538)
                      {
                        v543 = 0;
                        v544 = v26[3];
                        v545 = v534[3];
                        v546 = v535[3];
                        if (v544 <= 1)
                          v547 = 1;
                        else
                          v547 = v26[3];
                        v548 = v540 - v546 * v226[3];
                        do
                        {
                          v549 = v547;
                          if ((_DWORD)v544)
                          {
                            do
                            {
                              *(_BYTE *)(v532 + v527++) = (*(_BYTE *)(v530 + v529) != 0) ^ (*(_BYTE *)(v531 + v528) != 0);
                              v529 += v545;
                              v528 += v546;
                              --v549;
                            }
                            while (v549);
                          }
                          v529 += v539 - v545 * v544;
                          v528 += v548;
                          ++v543;
                        }
                        while (v543 != v541);
                      }
                      v529 += v1608 - v539 * v538;
                      v528 += v542;
                      ++v537;
                    }
                    while (v537 != v536);
                  }
                  v2 = v1631;
                  v529 += v1617;
                  v528 += v1653;
                  ++v526;
                }
                while (v526 != v1690);
              }
              break;
            default:
              v1652 = v24[6];
              if (v1652)
              {
                v471 = 0;
                v1607 = v225[19];
                v1616 = v25[19];
                v1593 = v24[19];
                do
                {
                  v472 = 0;
                  if ((v28 & 0x80000000) == 0)
                  {
                    v473 = v25[3];
                    v474 = v28;
                    v475 = v471;
                    do
                    {
                      v476 = ldiv(v475, v26[v474]);
                      v475 = v476.quot;
                      v472 += *(_QWORD *)(v473 + 8 * v474--) * v476.rem;
                    }
                    while (v474 != -1);
                  }
                  v477 = v1670;
                  if ((v1670 & 0x80000000) != 0)
                  {
                    LODWORD(v478) = 0;
                  }
                  else
                  {
                    v478 = 0;
                    v479 = v225[3];
                    v480 = v471;
                    do
                    {
                      v481 = ldiv(v480, v226[v477]);
                      v480 = v481.quot;
                      v478 += *(_QWORD *)(v479 + 8 * v477--) * v481.rem;
                    }
                    while (v477 != -1);
                  }
                  *(_BYTE *)(v1593 + v471++) = (*(_BYTE *)(v1616 + (int)v472) != 0) ^ (*(_BYTE *)(v1607 + (int)v478) != 0);
                  v28 = v1685;
                }
                while (v471 != v1652);
              }
              break;
          }
          break;
      }
LABEL_33:
      v53 = *(uint64_t **)v2;
      v54 = *(uint64_t **)(v2 + 8);
      v55 = *(mlx::core::array **)(v2 + 16);
      switch(v56)
      {
        case 0:
          v18 = **(_BYTE **)(*v54 + 152) ^ **(_BYTE **)(*v53 + 152);
          v19 = *(_QWORD *)v55;
          goto LABEL_35;
        case 1:
          v65 = *(_DWORD *)(*v54 + 160);
          if (v65 >= 1)
          {
            v66 = **(_BYTE **)(*v53 + 152);
            v67 = *(_BYTE **)(*(_QWORD *)v55 + 152);
            v68 = *(char **)(*v54 + 152);
            v69 = v65 + 1;
            do
            {
              v70 = *v68++;
              *v67++ = v70 ^ v66;
              --v69;
            }
            while (v69 > 1);
          }
          return;
        case 2:
          v71 = *(_DWORD *)(*v53 + 160);
          if (v71 >= 1)
          {
            v72 = **(_BYTE **)(*v54 + 152);
            v73 = *(_BYTE **)(*(_QWORD *)v55 + 152);
            v74 = *(char **)(*v53 + 152);
            v75 = v71 + 1;
            do
            {
              v76 = *v74++;
              *v73++ = v76 ^ v72;
              --v75;
            }
            while (v75 > 1);
          }
          return;
        case 3:
          v77 = *(_DWORD *)(*(_QWORD *)v55 + 48);
          if (v77 >= 1)
          {
            v78 = *(_BYTE **)(*(_QWORD *)v55 + 152);
            v79 = *(char **)(*v54 + 152);
            v80 = *(char **)(*v53 + 152);
            v81 = v77 + 1;
            do
            {
              v83 = *v80++;
              v82 = v83;
              v84 = *v79++;
              *v78++ = v84 ^ v82;
              --v81;
            }
            while (v81 > 1);
          }
          return;
        default:
          v57 = *(_QWORD **)v55;
          v58 = *v53;
          v59 = *(int **)*v53;
          v60 = (*(_QWORD *)(*v53 + 8) - (_QWORD)v59) >> 2;
          v61 = v60 - 1;
          if ((int)v60 - 1 >= -1)
            v61 = -1;
          v62 = v61 + 1;
          v63 = v60 + 1;
          break;
      }
      while (1)
      {
        v64 = v63 - 2;
        if (v63 - 2 < 0)
          break;
        --v63;
        if (*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v64) != *(_QWORD *)(v57[3] + 8 * v64))
          goto LABEL_55;
      }
      v63 = v62;
LABEL_55:
      v85 = (int **)*v54;
      v86 = *(int **)*v54;
      v87 = (*(_QWORD *)(*v54 + 8) - (_QWORD)v86) >> 2;
      v88 = v87 - 1;
      if ((int)v87 - 1 >= -1)
        v88 = -1;
      v89 = v88 + 1;
      v90 = v87 + 1;
      while (1)
      {
        v91 = v90 - 2;
        if (v90 - 2 < 0)
          break;
        --v90;
        if (*(_QWORD *)&v85[3][2 * v91] != *(_QWORD *)(v57[3] + 8 * v91))
          goto LABEL_62;
      }
      v90 = v89;
LABEL_62:
      v92 = v60 + 1;
      while (1)
      {
        v93 = v92 - 2;
        if (v92 - 2 < 0)
          break;
        --v92;
        if (*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v93))
          goto LABEL_67;
      }
      v92 = v62;
LABEL_67:
      v94 = v87 + 1;
      while (1)
      {
        v95 = v94 - 2;
        if (v94 - 2 < 0)
          break;
        --v94;
        if (*(_QWORD *)&v85[3][2 * v95])
          goto LABEL_72;
      }
      v94 = v89;
LABEL_72:
      v96 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v63 <= v90)
        v97 = v90;
      else
        v97 = v63;
      if (v63 <= v94)
        v63 = v94;
      if (v92 > v90)
        v90 = v92;
      if (v96 > v90)
      {
        v98 = 1;
      }
      else
      {
        v90 = (uint64_t)(v57[1] - *v57) >> 2;
        v98 = 4;
      }
      if (v96 > v63)
      {
        v99 = 2;
      }
      else
      {
        v63 = v90;
        v99 = v98;
      }
      if (v96 > v97)
      {
        v63 = v97;
        v99 = 3;
      }
      v1684 = v55;
      if (!v63)
        goto LABEL_89;
      v100 = *(_QWORD *)(v57[3] + 8 * (v63 - 1));
      if (v100 < 0x10)
        goto LABEL_89;
      switch(v99)
      {
        case 1:
          if (v63 == 2)
          {
            v996 = *v59;
            if (*v59)
            {
              v997 = 0;
              v998 = 0;
              v999 = 0;
              v1000 = *(_QWORD *)(v58 + 152);
              v1001 = v85[19];
              v1002 = v57[19];
              do
              {
                if (v59[1])
                {
                  v1003 = 0;
                  do
                  {
                    if ((int)v100 >= 1)
                    {
                      v1004 = 0;
                      v1005 = *(_BYTE *)(v1000 + v999);
                      v1006 = v100 + 1;
                      do
                      {
                        *(_BYTE *)(v1002 + v1004) = *((_BYTE *)v1001 + v998 + v1004) ^ v1005;
                        --v1006;
                        ++v1004;
                      }
                      while (v1006 > 1);
                      v58 = *v53;
                      v85 = (int **)*v54;
                      v59 = *(int **)*v53;
                    }
                    v1007 = *(_QWORD **)(v58 + 24);
                    v1008 = v1007[1];
                    v999 += v1008;
                    v998 += *((_QWORD *)v85[3] + 1);
                    v1002 += (int)v100;
                    ++v1003;
                    v1009 = v59[1];
                  }
                  while (v1003 < v1009);
                  v996 = *v59;
                  v86 = *v85;
                }
                else
                {
                  v1009 = 0;
                  v1007 = *(_QWORD **)(v58 + 24);
                  v1008 = v1007[1];
                }
                v999 = *v1007 + v999 - v1009 * v1008;
                v998 = *(_QWORD *)v85[3] + v998 - *((_QWORD *)v85[3] + 1) * v86[1];
                ++v997;
              }
              while (v997 < v996);
            }
          }
          else if (v63 == 1)
          {
            v451 = *v59;
            if (*v59)
            {
              v452 = 0;
              v453 = 0;
              v454 = 0;
              v455 = *(_QWORD *)(v58 + 152);
              v456 = v85[19];
              v457 = v57[19];
              do
              {
                if ((int)v100 >= 1)
                {
                  v458 = 0;
                  v459 = *(_BYTE *)(v455 + v454);
                  v460 = v100 + 1;
                  do
                  {
                    *(_BYTE *)(v457 + v458) = *((_BYTE *)v456 + v453 + v458) ^ v459;
                    --v460;
                    ++v458;
                  }
                  while (v460 > 1);
                  v58 = *v53;
                  v85 = (int **)*v54;
                  v451 = **(_DWORD **)*v53;
                }
                v454 += **(_QWORD **)(v58 + 24);
                v453 += *(_QWORD *)v85[3];
                v457 += (int)v100;
                ++v452;
              }
              while (v452 < v451);
            }
          }
          else if (v57[6])
          {
            v1623 = v85[19];
            v1637 = *(_QWORD *)(v58 + 152);
            v1679 = 0;
            v1010 = v57[19];
            do
            {
              v1011 = *(_QWORD *)*v53;
              v1012 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v1011) >> 2;
              v1013 = 0;
              v1014 = (v1012 - 1);
              if ((int)v1012 - 1 >= 0)
              {
                v1015 = *(_QWORD *)(*v53 + 24);
                v1016 = v1679;
                do
                {
                  v1017 = ldiv(v1016, *(int *)(v1011 + 4 * v1014));
                  v1016 = v1017.quot;
                  v1013 += *(_QWORD *)(v1015 + 8 * v1014--) * v1017.rem;
                }
                while (v1014 != -1);
              }
              v1018 = *(_QWORD *)*v54;
              v1019 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v1018) >> 2;
              v1020 = 0;
              v1021 = (v1019 - 1);
              if ((int)v1019 - 1 >= 0)
              {
                v1022 = *(_QWORD *)(*v54 + 24);
                v1023 = v1679;
                do
                {
                  v1024 = ldiv(v1023, *(int *)(v1018 + 4 * v1021));
                  v1023 = v1024.quot;
                  v1020 += *(_QWORD *)(v1022 + 8 * v1021--) * v1024.rem;
                }
                while (v1021 != -1);
              }
              if ((int)v100 >= 1)
              {
                v1025 = 0;
                v1026 = *(_BYTE *)(v1637 + (int)v1013);
                v1027 = v100 + 1;
                do
                {
                  *(_BYTE *)(v1010 + v1025) = *((_BYTE *)v1623 + (int)v1020 + v1025) ^ v1026;
                  --v1027;
                  ++v1025;
                }
                while (v1027 > 1);
                v57 = *(_QWORD **)v1684;
              }
              v1010 += (int)v100;
              v1679 += (int)v100;
            }
            while (v1679 < v57[6]);
          }
          break;
        case 2:
          if (v63 == 2)
          {
            v1028 = *v59;
            if (*v59)
            {
              v1029 = 0;
              v1030 = 0;
              v1031 = 0;
              v1032 = *(_QWORD *)(v58 + 152);
              v1033 = v85[19];
              v1034 = v57[19];
              do
              {
                if (v59[1])
                {
                  v1035 = 0;
                  do
                  {
                    if ((int)v100 >= 1)
                    {
                      v1036 = 0;
                      v1037 = *((_BYTE *)v1033 + v1030);
                      v1038 = v100 + 1;
                      do
                      {
                        *(_BYTE *)(v1034 + v1036) = *(_BYTE *)(v1032 + v1031 + v1036) ^ v1037;
                        --v1038;
                        ++v1036;
                      }
                      while (v1038 > 1);
                      v58 = *v53;
                      v85 = (int **)*v54;
                      v59 = *(int **)*v53;
                    }
                    v1039 = *(_QWORD **)(v58 + 24);
                    v1040 = v1039[1];
                    v1031 += v1040;
                    v1030 += *((_QWORD *)v85[3] + 1);
                    v1034 += (int)v100;
                    ++v1035;
                    v1041 = v59[1];
                  }
                  while (v1035 < v1041);
                  v1028 = *v59;
                  v86 = *v85;
                }
                else
                {
                  v1041 = 0;
                  v1039 = *(_QWORD **)(v58 + 24);
                  v1040 = v1039[1];
                }
                v1031 = *v1039 + v1031 - v1041 * v1040;
                v1030 = *(_QWORD *)v85[3] + v1030 - *((_QWORD *)v85[3] + 1) * v86[1];
                ++v1029;
              }
              while (v1029 < v1028);
            }
          }
          else if (v63 == 1)
          {
            v461 = *v59;
            if (*v59)
            {
              v462 = 0;
              v463 = 0;
              v464 = 0;
              v465 = *(_QWORD *)(v58 + 152);
              v466 = v85[19];
              v467 = v57[19];
              do
              {
                if ((int)v100 >= 1)
                {
                  v468 = 0;
                  v469 = *((_BYTE *)v466 + v463);
                  v470 = v100 + 1;
                  do
                  {
                    *(_BYTE *)(v467 + v468) = *(_BYTE *)(v465 + v464 + v468) ^ v469;
                    --v470;
                    ++v468;
                  }
                  while (v470 > 1);
                  v58 = *v53;
                  v85 = (int **)*v54;
                  v461 = **(_DWORD **)*v53;
                }
                v464 += **(_QWORD **)(v58 + 24);
                v463 += *(_QWORD *)v85[3];
                v467 += (int)v100;
                ++v462;
              }
              while (v462 < v461);
            }
          }
          else if (v57[6])
          {
            v1624 = v85[19];
            v1638 = *(_QWORD *)(v58 + 152);
            v1680 = 0;
            v1042 = v57[19];
            do
            {
              v1043 = *(_QWORD *)*v53;
              v1044 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v1043) >> 2;
              v1045 = 0;
              v1046 = (v1044 - 1);
              if ((int)v1044 - 1 >= 0)
              {
                v1047 = *(_QWORD *)(*v53 + 24);
                v1048 = v1680;
                do
                {
                  v1049 = ldiv(v1048, *(int *)(v1043 + 4 * v1046));
                  v1048 = v1049.quot;
                  v1045 += *(_QWORD *)(v1047 + 8 * v1046--) * v1049.rem;
                }
                while (v1046 != -1);
              }
              v1050 = *(_QWORD *)*v54;
              v1051 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v1050) >> 2;
              v1052 = 0;
              v1053 = (v1051 - 1);
              if ((int)v1051 - 1 >= 0)
              {
                v1054 = *(_QWORD *)(*v54 + 24);
                v1055 = v1680;
                do
                {
                  v1056 = ldiv(v1055, *(int *)(v1050 + 4 * v1053));
                  v1055 = v1056.quot;
                  v1052 += *(_QWORD *)(v1054 + 8 * v1053--) * v1056.rem;
                }
                while (v1053 != -1);
              }
              if ((int)v100 >= 1)
              {
                v1057 = 0;
                v1058 = *((_BYTE *)v1624 + (int)v1052);
                v1059 = v100 + 1;
                do
                {
                  *(_BYTE *)(v1042 + v1057) = *(_BYTE *)(v1638 + (int)v1045 + v1057) ^ v1058;
                  --v1059;
                  ++v1057;
                }
                while (v1059 > 1);
                v57 = *(_QWORD **)v1684;
              }
              v1042 += (int)v100;
              v1680 += (int)v100;
            }
            while (v1680 < v57[6]);
          }
          break;
        case 3:
          if (v63 == 2)
          {
            v966 = *v59;
            if (*v59)
            {
              v967 = 0;
              v968 = 0;
              v969 = 0;
              v970 = *(_QWORD *)(v58 + 152);
              v971 = v85[19];
              v972 = v57[19];
              do
              {
                if (v59[1])
                {
                  v973 = 0;
                  do
                  {
                    if ((int)v100 >= 1)
                    {
                      v974 = 0;
                      v975 = v100 + 1;
                      do
                      {
                        *(_BYTE *)(v972 + v974) = *((_BYTE *)v971 + v968 + v974) ^ *(_BYTE *)(v970 + v969 + v974);
                        --v975;
                        ++v974;
                      }
                      while (v975 > 1);
                      v58 = *v53;
                      v85 = (int **)*v54;
                      v59 = *(int **)*v53;
                    }
                    v976 = *(_QWORD **)(v58 + 24);
                    v977 = v976[1];
                    v969 += v977;
                    v968 += *((_QWORD *)v85[3] + 1);
                    v972 += (int)v100;
                    ++v973;
                    v978 = v59[1];
                  }
                  while (v973 < v978);
                  v966 = *v59;
                  v86 = *v85;
                }
                else
                {
                  v978 = 0;
                  v976 = *(_QWORD **)(v58 + 24);
                  v977 = v976[1];
                }
                v969 = *v976 + v969 - v978 * v977;
                v968 = *(_QWORD *)v85[3] + v968 - *((_QWORD *)v85[3] + 1) * v86[1];
                ++v967;
              }
              while (v967 < v966);
            }
          }
          else if (v63 == 1)
          {
            v216 = *v59;
            if (*v59)
            {
              v217 = 0;
              v218 = 0;
              v219 = 0;
              v220 = *(_QWORD *)(v58 + 152);
              v221 = v85[19];
              v222 = v57[19];
              do
              {
                if ((int)v100 >= 1)
                {
                  v223 = 0;
                  v224 = v100 + 1;
                  do
                  {
                    *(_BYTE *)(v222 + v223) = *((_BYTE *)v221 + v218 + v223) ^ *(_BYTE *)(v220 + v219 + v223);
                    --v224;
                    ++v223;
                  }
                  while (v224 > 1);
                  v58 = *v53;
                  v85 = (int **)*v54;
                  v216 = **(_DWORD **)*v53;
                }
                v219 += **(_QWORD **)(v58 + 24);
                v218 += *(_QWORD *)v85[3];
                v222 += (int)v100;
                ++v217;
              }
              while (v217 < v216);
            }
          }
          else if (v57[6])
          {
            v1622 = v85[19];
            v1636 = *(_QWORD *)(v58 + 152);
            v1678 = 0;
            v979 = v57[19];
            do
            {
              v980 = *(_QWORD *)*v53;
              v981 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v980) >> 2;
              v982 = 0;
              v983 = (v981 - 1);
              if ((int)v981 - 1 >= 0)
              {
                v984 = *(_QWORD *)(*v53 + 24);
                v985 = v1678;
                do
                {
                  v986 = ldiv(v985, *(int *)(v980 + 4 * v983));
                  v985 = v986.quot;
                  v982 += *(_QWORD *)(v984 + 8 * v983--) * v986.rem;
                }
                while (v983 != -1);
              }
              v987 = *(_QWORD *)*v54;
              v988 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v987) >> 2;
              v989 = 0;
              v990 = (v988 - 1);
              if ((int)v988 - 1 >= 0)
              {
                v991 = *(_QWORD *)(*v54 + 24);
                v992 = v1678;
                do
                {
                  v993 = ldiv(v992, *(int *)(v987 + 4 * v990));
                  v992 = v993.quot;
                  v989 += *(_QWORD *)(v991 + 8 * v990--) * v993.rem;
                }
                while (v990 != -1);
              }
              if ((int)v100 >= 1)
              {
                v994 = 0;
                v995 = v100 + 1;
                do
                {
                  *(_BYTE *)(v979 + v994) = *((_BYTE *)v1622 + (int)v989 + v994) ^ *(_BYTE *)(v1636 + (int)v982 + v994);
                  --v995;
                  ++v994;
                }
                while (v995 > 1);
                v57 = *(_QWORD **)v1684;
              }
              v979 += (int)v100;
              v1678 += (int)v100;
            }
            while (v1678 < v57[6]);
          }
          break;
        default:
LABEL_89:
          switch(v96)
          {
            case 1uLL:
              if (v57[6])
              {
                v101 = 0;
                v102 = 0;
                v103 = 0;
                v104 = *(_QWORD *)(v58 + 152);
                v105 = v85[19];
                v106 = v57[19];
                do
                {
                  *(_BYTE *)(v106 + v101) = *((_BYTE *)v105 + v102) ^ *(_BYTE *)(v104 + v103);
                  v103 += **(_QWORD **)(*v53 + 24);
                  v102 += **(_QWORD **)(*v54 + 24);
                  ++v101;
                }
                while (v101 < *(_QWORD *)(*(_QWORD *)v55 + 48));
              }
              break;
            case 2uLL:
              v401 = *v59;
              if (*v59)
              {
                v402 = 0;
                v403 = 0;
                v404 = 0;
                v405 = 0;
                v406 = *(_QWORD *)(v58 + 152);
                v407 = v85[19];
                v408 = v57[19];
                do
                {
                  if (v59[1])
                  {
                    v409 = 0;
                    do
                    {
                      *(_BYTE *)(v408 + v403 + v409) = *((_BYTE *)v407 + v404) ^ *(_BYTE *)(v406 + v405);
                      v58 = *v53;
                      v410 = *(_QWORD **)(*v53 + 24);
                      v411 = v410[1];
                      v405 += v411;
                      v85 = (int **)*v54;
                      v412 = *(int **)(*v54 + 24);
                      v413 = *((_QWORD *)v412 + 1);
                      v404 += v413;
                      ++v409;
                      v59 = *(int **)*v53;
                      v414 = v59[1];
                    }
                    while (v409 < v414);
                    v401 = *v59;
                    v86 = *v85;
                    v403 += v409;
                  }
                  else
                  {
                    v414 = 0;
                    v410 = *(_QWORD **)(v58 + 24);
                    v411 = v410[1];
                    v412 = v85[3];
                    v413 = *((_QWORD *)v412 + 1);
                  }
                  v405 = *v410 + v405 - v414 * v411;
                  v404 = *(_QWORD *)v412 + v404 - v413 * v86[1];
                  ++v402;
                }
                while (v402 < v401);
              }
              break;
            case 3uLL:
              v415 = *v59;
              if (*v59)
              {
                v416 = 0;
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = *(_QWORD *)(v58 + 152);
                v421 = v85[19];
                v422 = v57[19];
                do
                {
                  if (v59[1])
                  {
                    v423 = 0;
                    do
                    {
                      if (v59[2])
                      {
                        v424 = 0;
                        do
                        {
                          *(_BYTE *)(v422 + v417 + v424) = *((_BYTE *)v421 + v418) ^ *(_BYTE *)(v420 + v419);
                          v58 = *v53;
                          v425 = *(_QWORD **)(*v53 + 24);
                          v426 = v425[2];
                          v419 += v426;
                          v85 = (int **)*v54;
                          v427 = *(int **)(*v54 + 24);
                          v428 = *((_QWORD *)v427 + 2);
                          v418 += v428;
                          ++v424;
                          v59 = *(int **)*v53;
                          v429 = v59[2];
                        }
                        while (v424 < v429);
                        v86 = *v85;
                        v417 += v424;
                      }
                      else
                      {
                        v429 = 0;
                        v425 = *(_QWORD **)(v58 + 24);
                        v426 = v425[2];
                        v427 = v85[3];
                        v428 = *((_QWORD *)v427 + 2);
                      }
                      v430 = v425[1];
                      v419 = v430 + v419 - v429 * v426;
                      v418 = *((_QWORD *)v427 + 1) + v418 - v428 * v86[2];
                      ++v423;
                      v431 = v59[1];
                    }
                    while (v423 < v431);
                    v415 = *v59;
                  }
                  else
                  {
                    v431 = 0;
                    v425 = *(_QWORD **)(v58 + 24);
                    v430 = v425[1];
                  }
                  v419 = *v425 + v419 - v431 * v430;
                  v418 = *(_QWORD *)v85[3] + v418 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            case 4uLL:
              v432 = *v59;
              if (*v59)
              {
                v433 = 0;
                v434 = 0;
                v435 = 0;
                v436 = 0;
                v437 = *(_QWORD *)(v58 + 152);
                v438 = v85[19];
                v439 = v57[19];
                do
                {
                  if (v59[1])
                  {
                    v440 = 0;
                    do
                    {
                      if (v59[2])
                      {
                        v441 = 0;
                        do
                        {
                          if (v59[3])
                          {
                            v442 = 0;
                            do
                            {
                              *(_BYTE *)(v439 + v434 + v442) = *((_BYTE *)v438 + v435) ^ *(_BYTE *)(v437 + v436);
                              v58 = *v53;
                              v443 = *(_QWORD **)(*v53 + 24);
                              v444 = v443[3];
                              v436 += v444;
                              v85 = (int **)*v54;
                              v445 = *(int **)(*v54 + 24);
                              v446 = *((_QWORD *)v445 + 3);
                              v435 += v446;
                              ++v442;
                              v59 = *(int **)*v53;
                              v447 = v59[3];
                            }
                            while (v442 < v447);
                            v86 = *v85;
                            v434 += v442;
                          }
                          else
                          {
                            v447 = 0;
                            v443 = *(_QWORD **)(v58 + 24);
                            v444 = v443[3];
                            v445 = v85[3];
                            v446 = *((_QWORD *)v445 + 3);
                          }
                          v448 = v443[2];
                          v436 = v448 + v436 - v447 * v444;
                          v435 = *((_QWORD *)v445 + 2) + v435 - v446 * v86[3];
                          ++v441;
                          v449 = v59[2];
                        }
                        while (v441 < v449);
                      }
                      else
                      {
                        v449 = 0;
                        v443 = *(_QWORD **)(v58 + 24);
                        v448 = v443[2];
                      }
                      v436 = v443[1] + v436 - v449 * v448;
                      v435 = *((_QWORD *)v85[3] + 1) + v435 - *((_QWORD *)v85[3] + 2) * v86[2];
                      ++v440;
                      v450 = v59[1];
                    }
                    while (v440 < v450);
                    v432 = *v59;
                  }
                  else
                  {
                    v450 = 0;
                  }
                  v436 = **(_QWORD **)(v58 + 24) + v436 - *(_QWORD *)(*(_QWORD *)(v58 + 24) + 8) * v450;
                  v435 = *(_QWORD *)v85[3] + v435 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v433;
                }
                while (v433 < v432);
              }
              break;
            default:
              if (v57[6])
              {
                v384 = 0;
                v1674 = *(_QWORD *)(v58 + 152);
                v385 = v85[19];
                v386 = v57[19];
                do
                {
                  v387 = *(_QWORD *)*v53;
                  v388 = (unint64_t)(*(_QWORD *)(*v53 + 8) - v387) >> 2;
                  v389 = 0;
                  v390 = (v388 - 1);
                  if ((int)v388 - 1 >= 0)
                  {
                    v391 = *(_QWORD *)(*v53 + 24);
                    v392 = v384;
                    do
                    {
                      v393 = ldiv(v392, *(int *)(v387 + 4 * v390));
                      v392 = v393.quot;
                      v389 += *(_QWORD *)(v391 + 8 * v390--) * v393.rem;
                    }
                    while (v390 != -1);
                  }
                  v394 = *(_QWORD *)*v54;
                  v395 = (unint64_t)(*(_QWORD *)(*v54 + 8) - v394) >> 2;
                  v396 = 0;
                  v397 = (v395 - 1);
                  if ((int)v395 - 1 >= 0)
                  {
                    v398 = *(_QWORD *)(*v54 + 24);
                    v399 = v384;
                    do
                    {
                      v400 = ldiv(v399, *(int *)(v394 + 4 * v397));
                      v399 = v400.quot;
                      v396 += *(_QWORD *)(v398 + 8 * v397--) * v400.rem;
                    }
                    while (v397 != -1);
                  }
                  *(_BYTE *)(v386 + v384++) = *((_BYTE *)v385 + (int)v396) ^ *(_BYTE *)(v1674 + (int)v389);
                }
                while (v384 < *(_QWORD *)(*(_QWORD *)v1684 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 1:
      goto LABEL_33;
    case 2:
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      switch(v8)
      {
        case 0:
          goto LABEL_12;
        case 1:
          v9 = *(_DWORD *)(*v6 + 160);
          if (v9 >= 1)
          {
            v10 = **(_DWORD **)(*v7 + 152);
            v11 = *(int **)(*(_QWORD *)v1 + 152);
            v12 = *(int **)(*v6 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = v14 ^ v10;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v116 = *(_DWORD *)(*v7 + 160);
          if (v116 >= 1)
          {
            v117 = **(_DWORD **)(*v6 + 152);
            v118 = *(int **)(*(_QWORD *)v1 + 152);
            v119 = *(int **)(*v7 + 152);
            v120 = v116 + 1;
            do
            {
              v121 = *v119++;
              *v118++ = v121 ^ v117;
              --v120;
            }
            while (v120 > 1);
          }
          return;
        case 3:
          v122 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v122 >= 1)
          {
            v123 = *(int **)(*(_QWORD *)v1 + 152);
            v124 = *(int **)(*v6 + 152);
            v125 = *(int **)(*v7 + 152);
            v126 = v122 + 1;
            do
            {
              v128 = *v125++;
              v127 = v128;
              v129 = *v124++;
              *v123++ = v129 ^ v127;
              --v126;
            }
            while (v126 > 1);
          }
          return;
        default:
          v107 = *(_QWORD **)v1;
          v108 = (_QWORD *)*v7;
          v109 = *(int **)*v7;
          v110 = (v108[1] - (_QWORD)v109) >> 2;
          v111 = (v110 - 1);
          if ((int)v111 >= -1)
            v112 = -1;
          else
            v112 = v110 - 1;
          v113 = v112 + 1;
          v114 = v110 + 1;
          break;
      }
      while (1)
      {
        v115 = v114 - 2;
        if (v114 - 2 < 0)
          break;
        --v114;
        if (*(_QWORD *)(v108[3] + 8 * v115) != *(_QWORD *)(v107[3] + 8 * v115))
          goto LABEL_187;
      }
      v114 = v113;
LABEL_187:
      v233 = (_QWORD *)*v6;
      v234 = *(int **)*v6;
      v235 = (v233[1] - (_QWORD)v234) >> 2;
      v236 = (v235 - 1);
      if ((int)v236 >= -1)
        v237 = -1;
      else
        v237 = v235 - 1;
      v238 = v237 + 1;
      v239 = v235 + 1;
      while (1)
      {
        v240 = v239 - 2;
        if (v239 - 2 < 0)
          break;
        --v239;
        if (*(_QWORD *)(v233[3] + 8 * v240) != *(_QWORD *)(v107[3] + 8 * v240))
          goto LABEL_223;
      }
      v239 = v238;
LABEL_223:
      v266 = v110 + 1;
      while (1)
      {
        v267 = v266 - 2;
        if (v266 - 2 < 0)
          break;
        --v266;
        if (*(_QWORD *)(v108[3] + 8 * v267))
          goto LABEL_248;
      }
      v266 = v113;
LABEL_248:
      v276 = v235 + 1;
      while (1)
      {
        v277 = v276 - 2;
        if (v276 - 2 < 0)
          break;
        --v276;
        if (*(_QWORD *)(v233[3] + 8 * v277))
          goto LABEL_291;
      }
      v276 = v238;
LABEL_291:
      v295 = (uint64_t)(v107[1] - *v107) >> 2;
      if (v114 <= v239)
        v296 = v239;
      else
        v296 = v114;
      if (v114 <= v276)
        v114 = v276;
      if (v266 > v239)
        v239 = v266;
      if (v295 > v239)
      {
        v297 = 1;
      }
      else
      {
        v239 = (uint64_t)(v107[1] - *v107) >> 2;
        v297 = 4;
      }
      if (v295 > v114)
      {
        v298 = 2;
      }
      else
      {
        v114 = v239;
        v298 = v297;
      }
      if (v295 > v296)
      {
        v114 = v296;
        v298 = 3;
      }
      v1671 = v236;
      v1686 = v111;
      if (!v114)
        goto LABEL_308;
      v299 = *(_QWORD *)(v107[3] + 8 * (v114 - 1));
      if (v299 < 0x10)
        goto LABEL_308;
      switch(v298)
      {
        case 1:
          if (v114 == 2)
          {
            v1298 = *v109;
            if (*v109)
            {
              v1299 = 0;
              v1300 = 0;
              v1301 = 0;
              v1302 = v108[19];
              v1303 = v233[19];
              v1304 = v107[19];
              v1305 = (uint64_t *)v108[3];
              v1306 = *v1305;
              v1307 = v1305[1];
              v1308 = (uint64_t *)v233[3];
              v1309 = *v1308;
              v1310 = v1308[1];
              v1311 = v109[1];
              v1312 = v1311;
              do
              {
                if (v1312)
                {
                  v1313 = 0;
                  v1314 = v1303 + 4 * v1300;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1315 = 0;
                      v1316 = *(_DWORD *)(v1302 + 4 * v1301);
                      v1317 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1304 + v1315) = *(_DWORD *)(v1314 + v1315) ^ v1316;
                        --v1317;
                        v1315 += 4;
                      }
                      while (v1317 > 1);
                      v1311 = v109[1];
                    }
                    v1301 += v1307;
                    v1300 += v1310;
                    v1304 += 4 * (int)v299;
                    ++v1313;
                    v1314 += 4 * v1310;
                  }
                  while (v1313 < v1311);
                  v1318 = v1311;
                  v1298 = *v109;
                  v1312 = v1311;
                }
                else
                {
                  v1318 = 0;
                }
                v1301 = v1301 + v1306 - v1318 * v1307;
                v1300 = v1300 + v1309 - v1310 * v234[1];
                ++v1299;
              }
              while (v1299 < v1298);
            }
          }
          else if (v114 == 1)
          {
            v880 = *v109;
            if (*v109)
            {
              v881 = 0;
              v882 = 0;
              v883 = v108[19];
              v884 = v233[19];
              v885 = v107[19];
              v886 = *(_QWORD *)v108[3];
              v887 = 4 * *(_QWORD *)v233[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v888 = 0;
                  v889 = *(_DWORD *)(v883 + 4 * v882);
                  v890 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v885 + v888) = *(_DWORD *)(v884 + v888) ^ v889;
                    --v890;
                    v888 += 4;
                  }
                  while (v890 > 1);
                  v880 = *v109;
                }
                v882 += v886;
                ++v881;
                v885 += 4 * (int)v299;
                v884 += v887;
              }
              while (v881 < v880);
            }
          }
          else
          {
            v1643 = v107[6];
            if (v1643)
            {
              v1662 = 0;
              v1587 = v233[19];
              v1601 = v108[19];
              v1319 = v107[19];
              do
              {
                v1320 = 0;
                if ((v111 & 0x80000000) == 0)
                {
                  v1321 = v108[3];
                  v1322 = v111;
                  v1323 = v1662;
                  do
                  {
                    v1324 = ldiv(v1323, v109[v1322]);
                    v1323 = v1324.quot;
                    v1320 += *(_QWORD *)(v1321 + 8 * v1322--) * v1324.rem;
                  }
                  while (v1322 != -1);
                }
                v1325 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1326) = 0;
                }
                else
                {
                  v1326 = 0;
                  v1327 = v233[3];
                  v1328 = v1662;
                  do
                  {
                    v1329 = ldiv(v1328, v234[v1325]);
                    v1328 = v1329.quot;
                    v1326 += *(_QWORD *)(v1327 + 8 * v1325--) * v1329.rem;
                  }
                  while (v1325 != -1);
                }
                v111 = v1686;
                if ((int)v299 >= 1)
                {
                  v1330 = 0;
                  v1331 = *(_DWORD *)(v1601 + 4 * (int)v1320);
                  v1332 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1319 + v1330) = *(_DWORD *)(v1587 + 4 * (int)v1326 + v1330) ^ v1331;
                    --v1332;
                    v1330 += 4;
                  }
                  while (v1332 > 1);
                }
                v1319 += 4 * (int)v299;
                v1662 += (int)v299;
              }
              while (v1662 < v1643);
            }
          }
          break;
        case 2:
          if (v114 == 2)
          {
            v1333 = *v109;
            if (*v109)
            {
              v1334 = 0;
              v1335 = 0;
              v1336 = 0;
              v1337 = v108[19];
              v1338 = v233[19];
              v1339 = v107[19];
              v1340 = (uint64_t *)v108[3];
              v1341 = *v1340;
              v1342 = v1340[1];
              v1343 = (uint64_t *)v233[3];
              v1344 = *v1343;
              v1345 = v1343[1];
              v1346 = v109[1];
              v1347 = v1346;
              do
              {
                if (v1347)
                {
                  v1348 = 0;
                  v1349 = v1337 + 4 * v1336;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1350 = 0;
                      v1351 = *(_DWORD *)(v1338 + 4 * v1335);
                      v1352 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1339 + v1350) = *(_DWORD *)(v1349 + v1350) ^ v1351;
                        --v1352;
                        v1350 += 4;
                      }
                      while (v1352 > 1);
                      v1346 = v109[1];
                    }
                    v1336 += v1342;
                    v1335 += v1345;
                    v1339 += 4 * (int)v299;
                    ++v1348;
                    v1349 += 4 * v1342;
                  }
                  while (v1348 < v1346);
                  v1353 = v1346;
                  v1333 = *v109;
                  v1347 = v1346;
                }
                else
                {
                  v1353 = 0;
                }
                v1336 = v1336 + v1341 - v1353 * v1342;
                v1335 = v1335 + v1344 - v1345 * v234[1];
                ++v1334;
              }
              while (v1334 < v1333);
            }
          }
          else if (v114 == 1)
          {
            v891 = *v109;
            if (*v109)
            {
              v892 = 0;
              v893 = 0;
              v894 = v108[19];
              v895 = v233[19];
              v896 = v107[19];
              v897 = *(_QWORD *)v233[3];
              v898 = 4 * *(_QWORD *)v108[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v899 = 0;
                  v900 = *(_DWORD *)(v895 + 4 * v893);
                  v901 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v896 + v899) = *(_DWORD *)(v894 + v899) ^ v900;
                    --v901;
                    v899 += 4;
                  }
                  while (v901 > 1);
                  v891 = *v109;
                }
                v893 += v897;
                ++v892;
                v896 += 4 * (int)v299;
                v894 += v898;
              }
              while (v892 < v891);
            }
          }
          else
          {
            v1644 = v107[6];
            if (v1644)
            {
              v1663 = 0;
              v1588 = v233[19];
              v1602 = v108[19];
              v1354 = v107[19];
              do
              {
                v1355 = 0;
                if ((v111 & 0x80000000) == 0)
                {
                  v1356 = v108[3];
                  v1357 = v111;
                  v1358 = v1663;
                  do
                  {
                    v1359 = ldiv(v1358, v109[v1357]);
                    v1358 = v1359.quot;
                    v1355 += *(_QWORD *)(v1356 + 8 * v1357--) * v1359.rem;
                  }
                  while (v1357 != -1);
                }
                v1360 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1361) = 0;
                }
                else
                {
                  v1361 = 0;
                  v1362 = v233[3];
                  v1363 = v1663;
                  do
                  {
                    v1364 = ldiv(v1363, v234[v1360]);
                    v1363 = v1364.quot;
                    v1361 += *(_QWORD *)(v1362 + 8 * v1360--) * v1364.rem;
                  }
                  while (v1360 != -1);
                }
                v111 = v1686;
                if ((int)v299 >= 1)
                {
                  v1365 = 0;
                  v1366 = *(_DWORD *)(v1588 + 4 * (int)v1361);
                  v1367 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1354 + v1365) = *(_DWORD *)(v1602 + 4 * (int)v1355 + v1365) ^ v1366;
                    --v1367;
                    v1365 += 4;
                  }
                  while (v1367 > 1);
                }
                v1354 += 4 * (int)v299;
                v1663 += (int)v299;
              }
              while (v1663 < v1644);
            }
          }
          break;
        case 3:
          if (v114 == 2)
          {
            v1095 = *v109;
            if (*v109)
            {
              v1096 = 0;
              v1097 = 0;
              v1098 = 0;
              v1099 = v108[19];
              v1100 = v233[19];
              v1101 = v107[19];
              v1102 = (uint64_t *)v108[3];
              v1103 = *v1102;
              v1104 = v1102[1];
              v1105 = (uint64_t *)v233[3];
              v1106 = *v1105;
              v1107 = v1105[1];
              v1108 = v109[1];
              v1109 = v1108;
              do
              {
                if (v1109)
                {
                  v1110 = 0;
                  v1111 = v1100 + 4 * v1097;
                  v1112 = v1099 + 4 * v1098;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1113 = 0;
                      v1114 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1101 + v1113) = *(_DWORD *)(v1111 + v1113) ^ *(_DWORD *)(v1112 + v1113);
                        --v1114;
                        v1113 += 4;
                      }
                      while (v1114 > 1);
                      v1108 = v109[1];
                    }
                    v1098 += v1104;
                    v1097 += v1107;
                    v1101 += 4 * (int)v299;
                    ++v1110;
                    v1111 += 4 * v1107;
                    v1112 += 4 * v1104;
                  }
                  while (v1110 < v1108);
                  v1115 = v1108;
                  v1095 = *v109;
                  v1109 = v1108;
                }
                else
                {
                  v1115 = 0;
                }
                v1098 = v1098 + v1103 - v1115 * v1104;
                v1097 = v1097 + v1106 - v1107 * v234[1];
                ++v1096;
              }
              while (v1096 < v1095);
            }
          }
          else if (v114 == 1)
          {
            v348 = *v109;
            if (*v109)
            {
              v349 = 0;
              v350 = v108[19];
              v351 = v233[19];
              v352 = v107[19];
              v353 = 4 * *(_QWORD *)v233[3];
              v354 = 4 * *(_QWORD *)v108[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v355 = 0;
                  v356 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v352 + v355) = *(_DWORD *)(v351 + v355) ^ *(_DWORD *)(v350 + v355);
                    --v356;
                    v355 += 4;
                  }
                  while (v356 > 1);
                  v348 = *v109;
                }
                ++v349;
                v352 += 4 * (int)v299;
                v351 += v353;
                v350 += v354;
              }
              while (v349 < v348);
            }
          }
          else
          {
            v1639 = v107[6];
            if (v1639)
            {
              v1658 = 0;
              v1582 = v233[19];
              v1596 = v108[19];
              v1116 = v107[19];
              do
              {
                v1117 = 0;
                if ((v111 & 0x80000000) == 0)
                {
                  v1118 = v108[3];
                  v1119 = v111;
                  v1120 = v1658;
                  do
                  {
                    v1121 = ldiv(v1120, v109[v1119]);
                    v1120 = v1121.quot;
                    v1117 += *(_QWORD *)(v1118 + 8 * v1119--) * v1121.rem;
                  }
                  while (v1119 != -1);
                }
                v1122 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1123) = 0;
                }
                else
                {
                  v1123 = 0;
                  v1124 = v233[3];
                  v1125 = v1658;
                  do
                  {
                    v1126 = ldiv(v1125, v234[v1122]);
                    v1125 = v1126.quot;
                    v1123 += *(_QWORD *)(v1124 + 8 * v1122--) * v1126.rem;
                  }
                  while (v1122 != -1);
                }
                v111 = v1686;
                if ((int)v299 >= 1)
                {
                  v1127 = 0;
                  v1128 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1116 + v1127) = *(_DWORD *)(v1582 + 4 * (int)v1123 + v1127) ^ *(_DWORD *)(v1596 + 4 * (int)v1117 + v1127);
                    --v1128;
                    v1127 += 4;
                  }
                  while (v1128 > 1);
                }
                v1116 += 4 * (int)v299;
                v1658 += (int)v299;
              }
              while (v1658 < v1639);
            }
          }
          break;
        default:
LABEL_308:
          switch(v295)
          {
            case 1uLL:
              v300 = v107[6];
              if (v300)
              {
                v301 = (_DWORD *)v108[19];
                v302 = (_DWORD *)v233[19];
                v303 = (int *)v107[19];
                v304 = 4 * *(_QWORD *)v233[3];
                v305 = 4 * *(_QWORD *)v108[3];
                do
                {
                  *v303++ = *v302 ^ *v301;
                  v302 = (_DWORD *)((char *)v302 + v304);
                  v301 = (_DWORD *)((char *)v301 + v305);
                  --v300;
                }
                while (v300);
              }
              break;
            case 2uLL:
              v562 = *v109;
              if (*v109)
              {
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v566 = 0;
                v567 = v108[19];
                v568 = v233[19];
                v569 = v107[19];
                v570 = (uint64_t *)v108[3];
                v571 = *v570;
                v572 = v570[1];
                v573 = (uint64_t *)v233[3];
                v575 = *v573;
                v574 = v573[1];
                v576 = v109[1];
                do
                {
                  if (v576)
                  {
                    for (j = 0; j < v576; ++j)
                    {
                      *(_DWORD *)(v569 + 4 * v564 + 4 * j) = *(_DWORD *)(v568 + 4 * v565) ^ *(_DWORD *)(v567 + 4 * v566);
                      v566 += v572;
                      v565 += v574;
                      v576 = v109[1];
                    }
                    v578 = v576;
                    v562 = *v109;
                    v564 += j;
                  }
                  else
                  {
                    v578 = 0;
                  }
                  v566 = v566 + v571 - v578 * v572;
                  v565 = v565 + v575 - v574 * v234[1];
                  ++v563;
                }
                while (v563 < v562);
              }
              break;
            case 3uLL:
              v579 = *v109;
              if (*v109)
              {
                v580 = 0;
                v581 = 0;
                v582 = 0;
                v583 = 0;
                v584 = v108[19];
                v585 = v233[19];
                v586 = v107[19];
                v587 = (uint64_t *)v108[3];
                v588 = *v587;
                v589 = v587[1];
                v590 = (uint64_t *)v233[3];
                v591 = *v590;
                v592 = v590[1];
                v593 = v109[1];
                v594 = v593;
                do
                {
                  if (v594)
                  {
                    v595 = 0;
                    v596 = v587[2];
                    v597 = v590[2];
                    v598 = v109[2];
                    do
                    {
                      if (v598)
                      {
                        for (k = 0; k < v598; ++k)
                        {
                          *(_DWORD *)(v586 + 4 * v581 + 4 * k) = *(_DWORD *)(v585 + 4 * v582) ^ *(_DWORD *)(v584 + 4 * v583);
                          v583 += v596;
                          v582 += v597;
                          v598 = v109[2];
                        }
                        v600 = v598;
                        v593 = v109[1];
                        v581 += k;
                      }
                      else
                      {
                        v600 = 0;
                      }
                      v583 = v583 + v589 - v600 * v596;
                      v582 = v582 + v592 - v597 * v234[2];
                      ++v595;
                    }
                    while (v595 < v593);
                    v601 = v593;
                    v579 = *v109;
                    v594 = v593;
                  }
                  else
                  {
                    v601 = 0;
                  }
                  v583 = v583 + v588 - v601 * v589;
                  v582 = v582 + v591 - v592 * v234[1];
                  ++v580;
                }
                while (v580 < v579);
              }
              break;
            case 4uLL:
              v602 = *v109;
              if (*v109)
              {
                v603 = 0;
                v604 = 0;
                v605 = 0;
                v606 = 0;
                v607 = v108[19];
                v608 = v233[19];
                v609 = v107[19];
                v610 = (uint64_t *)v108[3];
                v611 = *v610;
                v612 = v610[1];
                v613 = (uint64_t *)v233[3];
                v614 = *v613;
                v615 = v613[1];
                v616 = v109[1];
                v617 = v616;
                do
                {
                  if (v617)
                  {
                    v618 = 0;
                    v619 = v610[2];
                    v620 = v613[2];
                    v621 = v109[2];
                    v622 = v621;
                    do
                    {
                      if (v622)
                      {
                        v623 = 0;
                        v624 = v610[3];
                        v625 = v613[3];
                        v626 = v109[3];
                        do
                        {
                          if (v626)
                          {
                            for (m = 0; m < v626; ++m)
                            {
                              *(_DWORD *)(v609 + 4 * v604 + 4 * m) = *(_DWORD *)(v608 + 4 * v605) ^ *(_DWORD *)(v607 + 4 * v606);
                              v606 += v624;
                              v605 += v625;
                              v626 = v109[3];
                            }
                            v628 = v626;
                            v621 = v109[2];
                            v604 += m;
                          }
                          else
                          {
                            v628 = 0;
                          }
                          v606 = v606 + v619 - v628 * v624;
                          v605 = v605 + v620 - v625 * v234[3];
                          ++v623;
                        }
                        while (v623 < v621);
                        v629 = v621;
                        v616 = v109[1];
                        v622 = v621;
                      }
                      else
                      {
                        v629 = 0;
                      }
                      v606 = v606 + v612 - v629 * v619;
                      v605 = v605 + v615 - v620 * v234[2];
                      ++v618;
                    }
                    while (v618 < v616);
                    v630 = v616;
                    v602 = *v109;
                    v617 = v616;
                  }
                  else
                  {
                    v630 = 0;
                  }
                  v606 = v606 + v611 - v630 * v612;
                  v605 = v605 + v614 - v615 * v234[1];
                  ++v603;
                }
                while (v603 < v602);
              }
              break;
            default:
              v550 = v107[6];
              if (v550)
              {
                v551 = 0;
                v1632 = v233[19];
                v1654 = v108[19];
                v1618 = v107[19];
                do
                {
                  v552 = 0;
                  if ((v111 & 0x80000000) == 0)
                  {
                    v553 = v108[3];
                    v554 = v111;
                    v555 = v551;
                    do
                    {
                      v556 = ldiv(v555, v109[v554]);
                      v555 = v556.quot;
                      v552 += *(_QWORD *)(v553 + 8 * v554--) * v556.rem;
                    }
                    while (v554 != -1);
                  }
                  v557 = v1671;
                  if ((v1671 & 0x80000000) != 0)
                  {
                    LODWORD(v558) = 0;
                  }
                  else
                  {
                    v558 = 0;
                    v559 = v233[3];
                    v560 = v551;
                    do
                    {
                      v561 = ldiv(v560, v234[v557]);
                      v560 = v561.quot;
                      v558 += *(_QWORD *)(v559 + 8 * v557--) * v561.rem;
                    }
                    while (v557 != -1);
                  }
                  *(_DWORD *)(v1618 + 4 * v551++) = *(_DWORD *)(v1632 + 4 * (int)v558) ^ *(_DWORD *)(v1654 + 4 * (int)v552);
                  v111 = v1686;
                }
                while (v551 != v550);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      v15 = *(uint64_t **)a1;
      v16 = *(uint64_t **)(a1 + 8);
      switch(v17)
      {
        case 0:
          v18 = **(_BYTE **)(*v16 + 152) ^ **(_BYTE **)(*v15 + 152);
          v19 = *(_QWORD *)v1;
LABEL_35:
          **(_BYTE **)(v19 + 152) = v18;
          return;
        case 1:
          v138 = *(_DWORD *)(*v16 + 160);
          if (v138 >= 1)
          {
            v139 = **(_BYTE **)(*v15 + 152);
            v140 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v141 = *(char **)(*v16 + 152);
            v142 = v138 + 1;
            do
            {
              v143 = *v141++;
              *v140++ = v143 ^ v139;
              --v142;
            }
            while (v142 > 1);
          }
          return;
        case 2:
          v144 = *(_DWORD *)(*v15 + 160);
          if (v144 >= 1)
          {
            v145 = **(_BYTE **)(*v16 + 152);
            v146 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v147 = *(char **)(*v15 + 152);
            v148 = v144 + 1;
            do
            {
              v149 = *v147++;
              *v146++ = v149 ^ v145;
              --v148;
            }
            while (v148 > 1);
          }
          return;
        case 3:
          v150 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v150 >= 1)
          {
            v151 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v152 = *(char **)(*v16 + 152);
            v153 = *(char **)(*v15 + 152);
            v154 = v150 + 1;
            do
            {
              v156 = *v153++;
              v155 = v156;
              v157 = *v152++;
              *v151++ = v157 ^ v155;
              --v154;
            }
            while (v154 > 1);
          }
          return;
        default:
          v130 = *(_QWORD **)v1;
          v131 = *v15;
          v132 = *(int **)*v15;
          v133 = (*(_QWORD *)(*v15 + 8) - (_QWORD)v132) >> 2;
          v134 = v133 - 1;
          if ((int)v133 - 1 >= -1)
            v134 = -1;
          v135 = v134 + 1;
          v136 = v133 + 1;
          break;
      }
      while (1)
      {
        v137 = v136 - 2;
        if (v136 - 2 < 0)
          break;
        --v136;
        if (*(_QWORD *)(*(_QWORD *)(v131 + 24) + 8 * v137) != *(_QWORD *)(v130[3] + 8 * v137))
          goto LABEL_195;
      }
      v136 = v135;
LABEL_195:
      v241 = (int **)*v16;
      v242 = *(int **)*v16;
      v243 = (*(_QWORD *)(*v16 + 8) - (_QWORD)v242) >> 2;
      v244 = v243 - 1;
      if ((int)v243 - 1 >= -1)
        v244 = -1;
      v245 = v244 + 1;
      v246 = v243 + 1;
      while (1)
      {
        v247 = v246 - 2;
        if (v246 - 2 < 0)
          break;
        --v246;
        if (*(_QWORD *)&v241[3][2 * v247] != *(_QWORD *)(v130[3] + 8 * v247))
          goto LABEL_228;
      }
      v246 = v245;
LABEL_228:
      v268 = v133 + 1;
      while (1)
      {
        v269 = v268 - 2;
        if (v268 - 2 < 0)
          break;
        --v268;
        if (*(_QWORD *)(*(_QWORD *)(v131 + 24) + 8 * v269))
          goto LABEL_253;
      }
      v268 = v135;
LABEL_253:
      v278 = v243 + 1;
      while (1)
      {
        v279 = v278 - 2;
        if (v278 - 2 < 0)
          break;
        --v278;
        if (*(_QWORD *)&v241[3][2 * v279])
          goto LABEL_314;
      }
      v278 = v245;
LABEL_314:
      v306 = (uint64_t)(v130[1] - *v130) >> 2;
      if (v136 <= v246)
        v307 = v246;
      else
        v307 = v136;
      if (v136 <= v278)
        v136 = v278;
      if (v268 > v246)
        v246 = v268;
      if (v306 > v246)
      {
        v308 = 1;
      }
      else
      {
        v246 = (uint64_t)(v130[1] - *v130) >> 2;
        v308 = 4;
      }
      if (v306 > v136)
      {
        v309 = 2;
      }
      else
      {
        v136 = v246;
        v309 = v308;
      }
      if (v306 > v307)
      {
        v136 = v307;
        v309 = 3;
      }
      if (!v136)
        goto LABEL_331;
      v310 = *(_QWORD *)(v130[3] + 8 * (v136 - 1));
      if (v310 < 0x10)
        goto LABEL_331;
      v1689 = *(_QWORD *)(v130[3] + 8 * (v136 - 1));
      switch(v309)
      {
        case 1:
          if (v136 == 2)
          {
            v1368 = *v132;
            if (*v132)
            {
              v1369 = 0;
              v1370 = 0;
              v1371 = 0;
              v1372 = *(_QWORD *)(v131 + 152);
              v1373 = v241[19];
              v1374 = v130[19];
              do
              {
                if (v132[1])
                {
                  v1375 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1376 = 0;
                      v1377 = *(_BYTE *)(v1372 + v1371);
                      v1378 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1374 + v1376) = *((_BYTE *)v1373 + v1370 + v1376) ^ v1377;
                        --v1378;
                        ++v1376;
                      }
                      while (v1378 > 1);
                      v131 = *v15;
                      v241 = (int **)*v16;
                      v132 = *(int **)*v15;
                    }
                    v1379 = *(_QWORD **)(v131 + 24);
                    v1380 = v1379[1];
                    v1371 += v1380;
                    v1370 += *((_QWORD *)v241[3] + 1);
                    v1374 += (int)v310;
                    ++v1375;
                    v1381 = v132[1];
                  }
                  while (v1375 < v1381);
                  v1368 = *v132;
                  v242 = *v241;
                }
                else
                {
                  v1381 = 0;
                  v1379 = *(_QWORD **)(v131 + 24);
                  v1380 = v1379[1];
                }
                v1371 = *v1379 + v1371 - v1381 * v1380;
                v1370 = *(_QWORD *)v241[3] + v1370 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1369;
              }
              while (v1369 < v1368);
            }
          }
          else if (v136 == 1)
          {
            v902 = *v132;
            if (*v132)
            {
              v903 = 0;
              v904 = 0;
              v905 = 0;
              v906 = *(_QWORD *)(v131 + 152);
              v907 = v241[19];
              v908 = v130[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v909 = 0;
                  v910 = *(_BYTE *)(v906 + v905);
                  v911 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v908 + v909) = *((_BYTE *)v907 + v904 + v909) ^ v910;
                    --v911;
                    ++v909;
                  }
                  while (v911 > 1);
                  v131 = *v15;
                  v241 = (int **)*v16;
                  v902 = **(_DWORD **)*v15;
                }
                v905 += **(_QWORD **)(v131 + 24);
                v904 += *(_QWORD *)v241[3];
                v908 += (int)v310;
                ++v903;
              }
              while (v903 < v902);
            }
          }
          else if (v130[6])
          {
            v1629 = v241[19];
            v1645 = *(_QWORD *)(v131 + 152);
            v1664 = (int)v310;
            v1682 = 0;
            v1614 = v310 + 1;
            v1382 = v130[19];
            do
            {
              v1383 = *(_QWORD *)*v15;
              v1384 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1383) >> 2;
              v1385 = 0;
              v1386 = (v1384 - 1);
              if ((int)v1384 - 1 >= 0)
              {
                v1387 = *(_QWORD *)(*v15 + 24);
                v1388 = v1682;
                do
                {
                  v1389 = ldiv(v1388, *(int *)(v1383 + 4 * v1386));
                  v1388 = v1389.quot;
                  v1385 += *(_QWORD *)(v1387 + 8 * v1386--) * v1389.rem;
                }
                while (v1386 != -1);
              }
              v1390 = *(_QWORD *)*v16;
              v1391 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1390) >> 2;
              v1392 = 0;
              v1393 = (v1391 - 1);
              if ((int)v1391 - 1 >= 0)
              {
                v1394 = *(_QWORD *)(*v16 + 24);
                v1395 = v1682;
                do
                {
                  v1396 = ldiv(v1395, *(int *)(v1390 + 4 * v1393));
                  v1395 = v1396.quot;
                  v1392 += *(_QWORD *)(v1394 + 8 * v1393--) * v1396.rem;
                }
                while (v1393 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1397 = 0;
                v1398 = *(_BYTE *)(v1645 + (int)v1385);
                v1399 = v1614;
                do
                {
                  *(_BYTE *)(v1382 + v1397) = *((_BYTE *)v1629 + (int)v1392 + v1397) ^ v1398;
                  --v1399;
                  ++v1397;
                }
                while (v1399 > 1);
                v130 = *(_QWORD **)v1;
              }
              v1382 += v1664;
              v1682 += v1664;
            }
            while (v1682 < v130[6]);
          }
          break;
        case 2:
          if (v136 == 2)
          {
            v1400 = *v132;
            if (*v132)
            {
              v1401 = 0;
              v1402 = 0;
              v1403 = 0;
              v1404 = *(_QWORD *)(v131 + 152);
              v1405 = v241[19];
              v1406 = v130[19];
              do
              {
                if (v132[1])
                {
                  v1407 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1408 = 0;
                      v1409 = *((_BYTE *)v1405 + v1402);
                      v1410 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1406 + v1408) = *(_BYTE *)(v1404 + v1403 + v1408) ^ v1409;
                        --v1410;
                        ++v1408;
                      }
                      while (v1410 > 1);
                      v131 = *v15;
                      v241 = (int **)*v16;
                      v132 = *(int **)*v15;
                    }
                    v1411 = *(_QWORD **)(v131 + 24);
                    v1412 = v1411[1];
                    v1403 += v1412;
                    v1402 += *((_QWORD *)v241[3] + 1);
                    v1406 += (int)v310;
                    ++v1407;
                    v1413 = v132[1];
                  }
                  while (v1407 < v1413);
                  v1400 = *v132;
                  v242 = *v241;
                }
                else
                {
                  v1413 = 0;
                  v1411 = *(_QWORD **)(v131 + 24);
                  v1412 = v1411[1];
                }
                v1403 = *v1411 + v1403 - v1413 * v1412;
                v1402 = *(_QWORD *)v241[3] + v1402 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1401;
              }
              while (v1401 < v1400);
            }
          }
          else if (v136 == 1)
          {
            v912 = *v132;
            if (*v132)
            {
              v913 = 0;
              v914 = 0;
              v915 = 0;
              v916 = *(_QWORD *)(v131 + 152);
              v917 = v241[19];
              v918 = v130[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v919 = 0;
                  v920 = *((_BYTE *)v917 + v914);
                  v921 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v918 + v919) = *(_BYTE *)(v916 + v915 + v919) ^ v920;
                    --v921;
                    ++v919;
                  }
                  while (v921 > 1);
                  v131 = *v15;
                  v241 = (int **)*v16;
                  v912 = **(_DWORD **)*v15;
                }
                v915 += **(_QWORD **)(v131 + 24);
                v914 += *(_QWORD *)v241[3];
                v918 += (int)v310;
                ++v913;
              }
              while (v913 < v912);
            }
          }
          else if (v130[6])
          {
            v1630 = v241[19];
            v1646 = *(_QWORD *)(v131 + 152);
            v1665 = (int)v310;
            v1683 = 0;
            v1615 = v310 + 1;
            v1414 = v130[19];
            do
            {
              v1415 = *(_QWORD *)*v15;
              v1416 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1415) >> 2;
              v1417 = 0;
              v1418 = (v1416 - 1);
              if ((int)v1416 - 1 >= 0)
              {
                v1419 = *(_QWORD *)(*v15 + 24);
                v1420 = v1683;
                do
                {
                  v1421 = ldiv(v1420, *(int *)(v1415 + 4 * v1418));
                  v1420 = v1421.quot;
                  v1417 += *(_QWORD *)(v1419 + 8 * v1418--) * v1421.rem;
                }
                while (v1418 != -1);
              }
              v1422 = *(_QWORD *)*v16;
              v1423 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1422) >> 2;
              v1424 = 0;
              v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                v1426 = *(_QWORD *)(*v16 + 24);
                v1427 = v1683;
                do
                {
                  v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  v1427 = v1428.quot;
                  v1424 += *(_QWORD *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1429 = 0;
                v1430 = *((_BYTE *)v1630 + (int)v1424);
                v1431 = v1615;
                do
                {
                  *(_BYTE *)(v1414 + v1429) = *(_BYTE *)(v1646 + (int)v1417 + v1429) ^ v1430;
                  --v1431;
                  ++v1429;
                }
                while (v1431 > 1);
                v130 = *(_QWORD **)v1;
              }
              v1414 += v1665;
              v1683 += v1665;
            }
            while (v1683 < v130[6]);
          }
          break;
        case 3:
          if (v136 == 2)
          {
            v1129 = *v132;
            if (*v132)
            {
              v1130 = 0;
              v1131 = 0;
              v1132 = 0;
              v1133 = *(_QWORD *)(v131 + 152);
              v1134 = v241[19];
              v1135 = v130[19];
              do
              {
                if (v132[1])
                {
                  v1136 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1137 = 0;
                      v1138 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1135 + v1137) = *((_BYTE *)v1134 + v1131 + v1137) ^ *(_BYTE *)(v1133 + v1132 + v1137);
                        --v1138;
                        ++v1137;
                      }
                      while (v1138 > 1);
                      v131 = *v15;
                      v241 = (int **)*v16;
                      v132 = *(int **)*v15;
                    }
                    v1139 = *(_QWORD **)(v131 + 24);
                    v1140 = v1139[1];
                    v1132 += v1140;
                    v1131 += *((_QWORD *)v241[3] + 1);
                    v1135 += (int)v310;
                    ++v1136;
                    v1141 = v132[1];
                  }
                  while (v1136 < v1141);
                  v1129 = *v132;
                  v242 = *v241;
                }
                else
                {
                  v1141 = 0;
                  v1139 = *(_QWORD **)(v131 + 24);
                  v1140 = v1139[1];
                }
                v1132 = *v1139 + v1132 - v1141 * v1140;
                v1131 = *(_QWORD *)v241[3] + v1131 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1130;
              }
              while (v1130 < v1129);
            }
          }
          else if (v136 == 1)
          {
            v357 = *v132;
            if (*v132)
            {
              v358 = 0;
              v359 = 0;
              v360 = 0;
              v361 = *(_QWORD *)(v131 + 152);
              v362 = v241[19];
              v363 = v130[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v364 = 0;
                  v365 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v363 + v364) = *((_BYTE *)v362 + v359 + v364) ^ *(_BYTE *)(v361 + v360 + v364);
                    --v365;
                    ++v364;
                  }
                  while (v365 > 1);
                  v131 = *v15;
                  v241 = (int **)*v16;
                  v357 = **(_DWORD **)*v15;
                }
                v360 += **(_QWORD **)(v131 + 24);
                v359 += *(_QWORD *)v241[3];
                v363 += (int)v310;
                ++v358;
              }
              while (v358 < v357);
            }
          }
          else if (v130[6])
          {
            v1626 = v241[19];
            v1640 = *(_QWORD *)(v131 + 152);
            v1659 = (int)v310;
            v1681 = 0;
            v1611 = v310 + 1;
            v1142 = v130[19];
            do
            {
              v1143 = *(_QWORD *)*v15;
              v1144 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1143) >> 2;
              v1145 = 0;
              v1146 = (v1144 - 1);
              if ((int)v1144 - 1 >= 0)
              {
                v1147 = *(_QWORD *)(*v15 + 24);
                v1148 = v1681;
                do
                {
                  v1149 = ldiv(v1148, *(int *)(v1143 + 4 * v1146));
                  v1148 = v1149.quot;
                  v1145 += *(_QWORD *)(v1147 + 8 * v1146--) * v1149.rem;
                }
                while (v1146 != -1);
              }
              v1150 = *(_QWORD *)*v16;
              v1151 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1150) >> 2;
              v1152 = 0;
              v1153 = (v1151 - 1);
              if ((int)v1151 - 1 >= 0)
              {
                v1154 = *(_QWORD *)(*v16 + 24);
                v1155 = v1681;
                do
                {
                  v1156 = ldiv(v1155, *(int *)(v1150 + 4 * v1153));
                  v1155 = v1156.quot;
                  v1152 += *(_QWORD *)(v1154 + 8 * v1153--) * v1156.rem;
                }
                while (v1153 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1157 = 0;
                v1158 = v1611;
                do
                {
                  *(_BYTE *)(v1142 + v1157) = *((_BYTE *)v1626 + (int)v1152 + v1157) ^ *(_BYTE *)(v1640
                                                                                                + (int)v1145
                                                                                                + v1157);
                  --v1158;
                  ++v1157;
                }
                while (v1158 > 1);
                v130 = *(_QWORD **)v1;
              }
              v1142 += v1659;
              v1681 += v1659;
            }
            while (v1681 < v130[6]);
          }
          break;
        default:
LABEL_331:
          switch(v306)
          {
            case 1uLL:
              if (v130[6])
              {
                v311 = 0;
                v312 = 0;
                v313 = 0;
                v314 = *(_QWORD *)(v131 + 152);
                v315 = v241[19];
                v316 = v130[19];
                do
                {
                  *(_BYTE *)(v316 + v311) = *((_BYTE *)v315 + v312) ^ *(_BYTE *)(v314 + v313);
                  v313 += **(_QWORD **)(*v15 + 24);
                  v312 += **(_QWORD **)(*v16 + 24);
                  ++v311;
                }
                while (v311 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
            case 2uLL:
              v647 = *v132;
              if (*v132)
              {
                v648 = 0;
                v649 = 0;
                v650 = 0;
                v651 = 0;
                v652 = *(_QWORD *)(v131 + 152);
                v653 = v241[19];
                v654 = v130[19];
                do
                {
                  if (v132[1])
                  {
                    v655 = 0;
                    do
                    {
                      *(_BYTE *)(v654 + v649 + v655) = *((_BYTE *)v653 + v650) ^ *(_BYTE *)(v652 + v651);
                      v131 = *v15;
                      v656 = *(_QWORD **)(*v15 + 24);
                      v657 = v656[1];
                      v651 += v657;
                      v241 = (int **)*v16;
                      v658 = *(int **)(*v16 + 24);
                      v659 = *((_QWORD *)v658 + 1);
                      v650 += v659;
                      ++v655;
                      v132 = *(int **)*v15;
                      v660 = v132[1];
                    }
                    while (v655 < v660);
                    v647 = *v132;
                    v242 = *v241;
                    v649 += v655;
                  }
                  else
                  {
                    v660 = 0;
                    v656 = *(_QWORD **)(v131 + 24);
                    v657 = v656[1];
                    v658 = v241[3];
                    v659 = *((_QWORD *)v658 + 1);
                  }
                  v651 = *v656 + v651 - v660 * v657;
                  v650 = *(_QWORD *)v658 + v650 - v659 * v242[1];
                  ++v648;
                }
                while (v648 < v647);
              }
              break;
            case 3uLL:
              v661 = *v132;
              if (*v132)
              {
                v662 = 0;
                v663 = 0;
                v664 = 0;
                v665 = 0;
                v666 = *(_QWORD *)(v131 + 152);
                v667 = v241[19];
                v668 = v130[19];
                do
                {
                  if (v132[1])
                  {
                    v669 = 0;
                    do
                    {
                      if (v132[2])
                      {
                        v670 = 0;
                        do
                        {
                          *(_BYTE *)(v668 + v663 + v670) = *((_BYTE *)v667 + v664) ^ *(_BYTE *)(v666 + v665);
                          v131 = *v15;
                          v671 = *(_QWORD **)(*v15 + 24);
                          v672 = v671[2];
                          v665 += v672;
                          v241 = (int **)*v16;
                          v673 = *(int **)(*v16 + 24);
                          v674 = *((_QWORD *)v673 + 2);
                          v664 += v674;
                          ++v670;
                          v132 = *(int **)*v15;
                          v675 = v132[2];
                        }
                        while (v670 < v675);
                        v242 = *v241;
                        v663 += v670;
                      }
                      else
                      {
                        v675 = 0;
                        v671 = *(_QWORD **)(v131 + 24);
                        v672 = v671[2];
                        v673 = v241[3];
                        v674 = *((_QWORD *)v673 + 2);
                      }
                      v676 = v671[1];
                      v665 = v676 + v665 - v675 * v672;
                      v664 = *((_QWORD *)v673 + 1) + v664 - v674 * v242[2];
                      ++v669;
                      v677 = v132[1];
                    }
                    while (v669 < v677);
                    v661 = *v132;
                  }
                  else
                  {
                    v677 = 0;
                    v671 = *(_QWORD **)(v131 + 24);
                    v676 = v671[1];
                  }
                  v665 = *v671 + v665 - v677 * v676;
                  v664 = *(_QWORD *)v241[3] + v664 - *((_QWORD *)v241[3] + 1) * v242[1];
                  ++v662;
                }
                while (v662 < v661);
              }
              break;
            case 4uLL:
              v678 = *v132;
              if (*v132)
              {
                v679 = 0;
                v680 = 0;
                v681 = 0;
                v682 = 0;
                v683 = *(_QWORD *)(v131 + 152);
                v684 = v241[19];
                v685 = v130[19];
                do
                {
                  if (v132[1])
                  {
                    v686 = 0;
                    do
                    {
                      if (v132[2])
                      {
                        v687 = 0;
                        do
                        {
                          if (v132[3])
                          {
                            v688 = 0;
                            do
                            {
                              *(_BYTE *)(v685 + v680 + v688) = *((_BYTE *)v684 + v681) ^ *(_BYTE *)(v683 + v682);
                              v131 = *v15;
                              v689 = *(_QWORD **)(*v15 + 24);
                              v690 = v689[3];
                              v682 += v690;
                              v241 = (int **)*v16;
                              v691 = *(int **)(*v16 + 24);
                              v692 = *((_QWORD *)v691 + 3);
                              v681 += v692;
                              ++v688;
                              v132 = *(int **)*v15;
                              v693 = v132[3];
                            }
                            while (v688 < v693);
                            v242 = *v241;
                            v680 += v688;
                          }
                          else
                          {
                            v693 = 0;
                            v689 = *(_QWORD **)(v131 + 24);
                            v690 = v689[3];
                            v691 = v241[3];
                            v692 = *((_QWORD *)v691 + 3);
                          }
                          v694 = v689[2];
                          v682 = v694 + v682 - v693 * v690;
                          v681 = *((_QWORD *)v691 + 2) + v681 - v692 * v242[3];
                          ++v687;
                          v695 = v132[2];
                        }
                        while (v687 < v695);
                      }
                      else
                      {
                        v695 = 0;
                        v689 = *(_QWORD **)(v131 + 24);
                        v694 = v689[2];
                      }
                      v682 = v689[1] + v682 - v695 * v694;
                      v681 = *((_QWORD *)v241[3] + 1) + v681 - *((_QWORD *)v241[3] + 2) * v242[2];
                      ++v686;
                      v696 = v132[1];
                    }
                    while (v686 < v696);
                    v678 = *v132;
                  }
                  else
                  {
                    v696 = 0;
                  }
                  v682 = **(_QWORD **)(v131 + 24) + v682 - *(_QWORD *)(*(_QWORD *)(v131 + 24) + 8) * v696;
                  v681 = *(_QWORD *)v241[3] + v681 - *((_QWORD *)v241[3] + 1) * v242[1];
                  ++v679;
                }
                while (v679 < v678);
              }
              break;
            default:
              if (v130[6])
              {
                v631 = 0;
                v1676 = v241[19];
                v1691 = *(_QWORD *)(v131 + 152);
                v632 = v130[19];
                do
                {
                  v633 = *(_QWORD *)*v15;
                  v634 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v633) >> 2;
                  v635 = 0;
                  v636 = (v634 - 1);
                  if ((int)v634 - 1 >= 0)
                  {
                    v637 = *(_QWORD *)(*v15 + 24);
                    v638 = v631;
                    do
                    {
                      v639 = ldiv(v638, *(int *)(v633 + 4 * v636));
                      v638 = v639.quot;
                      v635 += *(_QWORD *)(v637 + 8 * v636--) * v639.rem;
                    }
                    while (v636 != -1);
                  }
                  v640 = *(_QWORD *)*v16;
                  v641 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v640) >> 2;
                  v642 = 0;
                  v643 = (v641 - 1);
                  if ((int)v641 - 1 >= 0)
                  {
                    v644 = *(_QWORD *)(*v16 + 24);
                    v645 = v631;
                    do
                    {
                      v646 = ldiv(v645, *(int *)(v640 + 4 * v643));
                      v645 = v646.quot;
                      v642 += *(_QWORD *)(v644 + 8 * v643--) * v646.rem;
                    }
                    while (v643 != -1);
                  }
                  *(_BYTE *)(v632 + v631++) = *((_BYTE *)v1676 + (int)v642) ^ *(_BYTE *)(v1691 + (int)v635);
                }
                while (v631 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 4:
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      switch(v20)
      {
        case 0:
LABEL_12:
          **(_DWORD **)(*(_QWORD *)v1 + 152) = **(_DWORD **)(*v6 + 152) ^ **(_DWORD **)(*v7 + 152);
          return;
        case 1:
          v167 = *(_DWORD *)(*v6 + 160);
          if (v167 >= 1)
          {
            v168 = **(_DWORD **)(*v7 + 152);
            v169 = *(int **)(*(_QWORD *)v1 + 152);
            v170 = *(int **)(*v6 + 152);
            v171 = v167 + 1;
            do
            {
              v172 = *v170++;
              *v169++ = v172 ^ v168;
              --v171;
            }
            while (v171 > 1);
          }
          return;
        case 2:
          v173 = *(_DWORD *)(*v7 + 160);
          if (v173 >= 1)
          {
            v174 = **(_DWORD **)(*v6 + 152);
            v175 = *(int **)(*(_QWORD *)v1 + 152);
            v176 = *(int **)(*v7 + 152);
            v177 = v173 + 1;
            do
            {
              v178 = *v176++;
              *v175++ = v178 ^ v174;
              --v177;
            }
            while (v177 > 1);
          }
          return;
        case 3:
          v179 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v179 >= 1)
          {
            v180 = *(int **)(*(_QWORD *)v1 + 152);
            v181 = *(int **)(*v6 + 152);
            v182 = *(int **)(*v7 + 152);
            v183 = v179 + 1;
            do
            {
              v185 = *v182++;
              v184 = v185;
              v186 = *v181++;
              *v180++ = v186 ^ v184;
              --v183;
            }
            while (v183 > 1);
          }
          return;
        default:
          v158 = *(_QWORD **)v1;
          v159 = (_QWORD *)*v7;
          v160 = *(int **)*v7;
          v161 = (v159[1] - (_QWORD)v160) >> 2;
          v162 = (v161 - 1);
          if ((int)v162 >= -1)
            v163 = -1;
          else
            v163 = v161 - 1;
          v164 = v163 + 1;
          v165 = v161 + 1;
          break;
      }
      while (1)
      {
        v166 = v165 - 2;
        if (v165 - 2 < 0)
          break;
        --v165;
        if (*(_QWORD *)(v159[3] + 8 * v166) != *(_QWORD *)(v158[3] + 8 * v166))
          goto LABEL_202;
      }
      v165 = v164;
LABEL_202:
      v248 = (_QWORD *)*v6;
      v249 = *(int **)*v6;
      v250 = (v248[1] - (_QWORD)v249) >> 2;
      v251 = (v250 - 1);
      if ((int)v251 >= -1)
        v252 = -1;
      else
        v252 = v250 - 1;
      v253 = v252 + 1;
      v254 = v250 + 1;
      while (1)
      {
        v255 = v254 - 2;
        if (v254 - 2 < 0)
          break;
        --v254;
        if (*(_QWORD *)(v248[3] + 8 * v255) != *(_QWORD *)(v158[3] + 8 * v255))
          goto LABEL_233;
      }
      v254 = v253;
LABEL_233:
      v270 = v161 + 1;
      while (1)
      {
        v271 = v270 - 2;
        if (v270 - 2 < 0)
          break;
        --v270;
        if (*(_QWORD *)(v159[3] + 8 * v271))
          goto LABEL_258;
      }
      v270 = v164;
LABEL_258:
      v280 = v250 + 1;
      while (1)
      {
        v281 = v280 - 2;
        if (v280 - 2 < 0)
          break;
        --v280;
        if (*(_QWORD *)(v248[3] + 8 * v281))
          goto LABEL_337;
      }
      v280 = v253;
LABEL_337:
      v317 = (uint64_t)(v158[1] - *v158) >> 2;
      if (v165 <= v254)
        v318 = v254;
      else
        v318 = v165;
      if (v165 <= v280)
        v165 = v280;
      if (v270 > v254)
        v254 = v270;
      if (v317 > v254)
      {
        v319 = 1;
      }
      else
      {
        v254 = (uint64_t)(v158[1] - *v158) >> 2;
        v319 = 4;
      }
      if (v317 > v165)
      {
        v320 = 2;
      }
      else
      {
        v165 = v254;
        v320 = v319;
      }
      if (v317 > v318)
      {
        v165 = v318;
        v320 = 3;
      }
      v1672 = v251;
      v1687 = v162;
      if (!v165)
        goto LABEL_354;
      v321 = *(_QWORD *)(v158[3] + 8 * (v165 - 1));
      if (v321 < 0x10)
        goto LABEL_354;
      switch(v320)
      {
        case 1:
          if (v165 == 2)
          {
            v1432 = *v160;
            if (*v160)
            {
              v1433 = 0;
              v1434 = 0;
              v1435 = 0;
              v1436 = v159[19];
              v1437 = v248[19];
              v1438 = v158[19];
              v1439 = (uint64_t *)v159[3];
              v1440 = *v1439;
              v1441 = v1439[1];
              v1442 = (uint64_t *)v248[3];
              v1443 = *v1442;
              v1444 = v1442[1];
              v1445 = v160[1];
              v1446 = v1445;
              do
              {
                if (v1446)
                {
                  v1447 = 0;
                  v1448 = v1437 + 4 * v1434;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1449 = 0;
                      v1450 = *(_DWORD *)(v1436 + 4 * v1435);
                      v1451 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1438 + v1449) = *(_DWORD *)(v1448 + v1449) ^ v1450;
                        --v1451;
                        v1449 += 4;
                      }
                      while (v1451 > 1);
                      v1445 = v160[1];
                    }
                    v1435 += v1441;
                    v1434 += v1444;
                    v1438 += 4 * (int)v321;
                    ++v1447;
                    v1448 += 4 * v1444;
                  }
                  while (v1447 < v1445);
                  v1452 = v1445;
                  v1432 = *v160;
                  v1446 = v1445;
                }
                else
                {
                  v1452 = 0;
                }
                v1435 = v1435 + v1440 - v1452 * v1441;
                v1434 = v1434 + v1443 - v1444 * v249[1];
                ++v1433;
              }
              while (v1433 < v1432);
            }
          }
          else if (v165 == 1)
          {
            v922 = *v160;
            if (*v160)
            {
              v923 = 0;
              v924 = 0;
              v925 = v159[19];
              v926 = v248[19];
              v927 = v158[19];
              v928 = *(_QWORD *)v159[3];
              v929 = 4 * *(_QWORD *)v248[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v930 = 0;
                  v931 = *(_DWORD *)(v925 + 4 * v924);
                  v932 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v927 + v930) = *(_DWORD *)(v926 + v930) ^ v931;
                    --v932;
                    v930 += 4;
                  }
                  while (v932 > 1);
                  v922 = *v160;
                }
                v924 += v928;
                ++v923;
                v927 += 4 * (int)v321;
                v926 += v929;
              }
              while (v923 < v922);
            }
          }
          else
          {
            v1647 = v158[6];
            if (v1647)
            {
              v1666 = 0;
              v1589 = v248[19];
              v1603 = v159[19];
              v1453 = v158[19];
              do
              {
                v1454 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1455 = v159[3];
                  v1456 = v162;
                  v1457 = v1666;
                  do
                  {
                    v1458 = ldiv(v1457, v160[v1456]);
                    v1457 = v1458.quot;
                    v1454 += *(_QWORD *)(v1455 + 8 * v1456--) * v1458.rem;
                  }
                  while (v1456 != -1);
                }
                v1459 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1460) = 0;
                }
                else
                {
                  v1460 = 0;
                  v1461 = v248[3];
                  v1462 = v1666;
                  do
                  {
                    v1463 = ldiv(v1462, v249[v1459]);
                    v1462 = v1463.quot;
                    v1460 += *(_QWORD *)(v1461 + 8 * v1459--) * v1463.rem;
                  }
                  while (v1459 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1464 = 0;
                  v1465 = *(_DWORD *)(v1603 + 4 * (int)v1454);
                  v1466 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1453 + v1464) = *(_DWORD *)(v1589 + 4 * (int)v1460 + v1464) ^ v1465;
                    --v1466;
                    v1464 += 4;
                  }
                  while (v1466 > 1);
                }
                v1453 += 4 * (int)v321;
                v1666 += (int)v321;
              }
              while (v1666 < v1647);
            }
          }
          break;
        case 2:
          if (v165 == 2)
          {
            v1467 = *v160;
            if (*v160)
            {
              v1468 = 0;
              v1469 = 0;
              v1470 = 0;
              v1471 = v159[19];
              v1472 = v248[19];
              v1473 = v158[19];
              v1474 = (uint64_t *)v159[3];
              v1475 = *v1474;
              v1476 = v1474[1];
              v1477 = (uint64_t *)v248[3];
              v1478 = *v1477;
              v1479 = v1477[1];
              v1480 = v160[1];
              v1481 = v1480;
              do
              {
                if (v1481)
                {
                  v1482 = 0;
                  v1483 = v1471 + 4 * v1470;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1484 = 0;
                      v1485 = *(_DWORD *)(v1472 + 4 * v1469);
                      v1486 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1473 + v1484) = *(_DWORD *)(v1483 + v1484) ^ v1485;
                        --v1486;
                        v1484 += 4;
                      }
                      while (v1486 > 1);
                      v1480 = v160[1];
                    }
                    v1470 += v1476;
                    v1469 += v1479;
                    v1473 += 4 * (int)v321;
                    ++v1482;
                    v1483 += 4 * v1476;
                  }
                  while (v1482 < v1480);
                  v1487 = v1480;
                  v1467 = *v160;
                  v1481 = v1480;
                }
                else
                {
                  v1487 = 0;
                }
                v1470 = v1470 + v1475 - v1487 * v1476;
                v1469 = v1469 + v1478 - v1479 * v249[1];
                ++v1468;
              }
              while (v1468 < v1467);
            }
          }
          else if (v165 == 1)
          {
            v933 = *v160;
            if (*v160)
            {
              v934 = 0;
              v935 = 0;
              v936 = v159[19];
              v937 = v248[19];
              v938 = v158[19];
              v939 = *(_QWORD *)v248[3];
              v940 = 4 * *(_QWORD *)v159[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v941 = 0;
                  v942 = *(_DWORD *)(v937 + 4 * v935);
                  v943 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v938 + v941) = *(_DWORD *)(v936 + v941) ^ v942;
                    --v943;
                    v941 += 4;
                  }
                  while (v943 > 1);
                  v933 = *v160;
                }
                v935 += v939;
                ++v934;
                v938 += 4 * (int)v321;
                v936 += v940;
              }
              while (v934 < v933);
            }
          }
          else
          {
            v1648 = v158[6];
            if (v1648)
            {
              v1667 = 0;
              v1590 = v248[19];
              v1604 = v159[19];
              v1488 = v158[19];
              do
              {
                v1489 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1490 = v159[3];
                  v1491 = v162;
                  v1492 = v1667;
                  do
                  {
                    v1493 = ldiv(v1492, v160[v1491]);
                    v1492 = v1493.quot;
                    v1489 += *(_QWORD *)(v1490 + 8 * v1491--) * v1493.rem;
                  }
                  while (v1491 != -1);
                }
                v1494 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1495) = 0;
                }
                else
                {
                  v1495 = 0;
                  v1496 = v248[3];
                  v1497 = v1667;
                  do
                  {
                    v1498 = ldiv(v1497, v249[v1494]);
                    v1497 = v1498.quot;
                    v1495 += *(_QWORD *)(v1496 + 8 * v1494--) * v1498.rem;
                  }
                  while (v1494 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1499 = 0;
                  v1500 = *(_DWORD *)(v1590 + 4 * (int)v1495);
                  v1501 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1488 + v1499) = *(_DWORD *)(v1604 + 4 * (int)v1489 + v1499) ^ v1500;
                    --v1501;
                    v1499 += 4;
                  }
                  while (v1501 > 1);
                }
                v1488 += 4 * (int)v321;
                v1667 += (int)v321;
              }
              while (v1667 < v1648);
            }
          }
          break;
        case 3:
          if (v165 == 2)
          {
            v1159 = *v160;
            if (*v160)
            {
              v1160 = 0;
              v1161 = 0;
              v1162 = 0;
              v1163 = v159[19];
              v1164 = v248[19];
              v1165 = v158[19];
              v1166 = (uint64_t *)v159[3];
              v1167 = *v1166;
              v1168 = v1166[1];
              v1169 = (uint64_t *)v248[3];
              v1170 = *v1169;
              v1171 = v1169[1];
              v1172 = v160[1];
              v1173 = v1172;
              do
              {
                if (v1173)
                {
                  v1174 = 0;
                  v1175 = v1164 + 4 * v1161;
                  v1176 = v1163 + 4 * v1162;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1177 = 0;
                      v1178 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1165 + v1177) = *(_DWORD *)(v1175 + v1177) ^ *(_DWORD *)(v1176 + v1177);
                        --v1178;
                        v1177 += 4;
                      }
                      while (v1178 > 1);
                      v1172 = v160[1];
                    }
                    v1162 += v1168;
                    v1161 += v1171;
                    v1165 += 4 * (int)v321;
                    ++v1174;
                    v1175 += 4 * v1171;
                    v1176 += 4 * v1168;
                  }
                  while (v1174 < v1172);
                  v1179 = v1172;
                  v1159 = *v160;
                  v1173 = v1172;
                }
                else
                {
                  v1179 = 0;
                }
                v1162 = v1162 + v1167 - v1179 * v1168;
                v1161 = v1161 + v1170 - v1171 * v249[1];
                ++v1160;
              }
              while (v1160 < v1159);
            }
          }
          else if (v165 == 1)
          {
            v366 = *v160;
            if (*v160)
            {
              v367 = 0;
              v368 = v159[19];
              v369 = v248[19];
              v370 = v158[19];
              v371 = 4 * *(_QWORD *)v248[3];
              v372 = 4 * *(_QWORD *)v159[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v373 = 0;
                  v374 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v370 + v373) = *(_DWORD *)(v369 + v373) ^ *(_DWORD *)(v368 + v373);
                    --v374;
                    v373 += 4;
                  }
                  while (v374 > 1);
                  v366 = *v160;
                }
                ++v367;
                v370 += 4 * (int)v321;
                v369 += v371;
                v368 += v372;
              }
              while (v367 < v366);
            }
          }
          else
          {
            v1641 = v158[6];
            if (v1641)
            {
              v1660 = 0;
              v1583 = v248[19];
              v1597 = v159[19];
              v1180 = v158[19];
              do
              {
                v1181 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1182 = v159[3];
                  v1183 = v162;
                  v1184 = v1660;
                  do
                  {
                    v1185 = ldiv(v1184, v160[v1183]);
                    v1184 = v1185.quot;
                    v1181 += *(_QWORD *)(v1182 + 8 * v1183--) * v1185.rem;
                  }
                  while (v1183 != -1);
                }
                v1186 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1187) = 0;
                }
                else
                {
                  v1187 = 0;
                  v1188 = v248[3];
                  v1189 = v1660;
                  do
                  {
                    v1190 = ldiv(v1189, v249[v1186]);
                    v1189 = v1190.quot;
                    v1187 += *(_QWORD *)(v1188 + 8 * v1186--) * v1190.rem;
                  }
                  while (v1186 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1191 = 0;
                  v1192 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1180 + v1191) = *(_DWORD *)(v1583 + 4 * (int)v1187 + v1191) ^ *(_DWORD *)(v1597 + 4 * (int)v1181 + v1191);
                    --v1192;
                    v1191 += 4;
                  }
                  while (v1192 > 1);
                }
                v1180 += 4 * (int)v321;
                v1660 += (int)v321;
              }
              while (v1660 < v1641);
            }
          }
          break;
        default:
LABEL_354:
          switch(v317)
          {
            case 1uLL:
              v322 = v158[6];
              if (v322)
              {
                v323 = (_DWORD *)v159[19];
                v324 = (_DWORD *)v248[19];
                v325 = (int *)v158[19];
                v326 = 4 * *(_QWORD *)v248[3];
                v327 = 4 * *(_QWORD *)v159[3];
                do
                {
                  *v325++ = *v324 ^ *v323;
                  v324 = (_DWORD *)((char *)v324 + v326);
                  v323 = (_DWORD *)((char *)v323 + v327);
                  --v322;
                }
                while (v322);
              }
              break;
            case 2uLL:
              v709 = *v160;
              if (*v160)
              {
                v710 = 0;
                v711 = 0;
                v712 = 0;
                v713 = 0;
                v714 = v159[19];
                v715 = v248[19];
                v716 = v158[19];
                v717 = (uint64_t *)v159[3];
                v718 = *v717;
                v719 = v717[1];
                v720 = (uint64_t *)v248[3];
                v722 = *v720;
                v721 = v720[1];
                v723 = v160[1];
                do
                {
                  if (v723)
                  {
                    for (n = 0; n < v723; ++n)
                    {
                      *(_DWORD *)(v716 + 4 * v711 + 4 * n) = *(_DWORD *)(v715 + 4 * v712) ^ *(_DWORD *)(v714 + 4 * v713);
                      v713 += v719;
                      v712 += v721;
                      v723 = v160[1];
                    }
                    v725 = v723;
                    v709 = *v160;
                    v711 += n;
                  }
                  else
                  {
                    v725 = 0;
                  }
                  v713 = v713 + v718 - v725 * v719;
                  v712 = v712 + v722 - v721 * v249[1];
                  ++v710;
                }
                while (v710 < v709);
              }
              break;
            case 3uLL:
              v726 = *v160;
              if (*v160)
              {
                v727 = 0;
                v728 = 0;
                v729 = 0;
                v730 = 0;
                v731 = v159[19];
                v732 = v248[19];
                v733 = v158[19];
                v734 = (uint64_t *)v159[3];
                v735 = *v734;
                v736 = v734[1];
                v737 = (uint64_t *)v248[3];
                v738 = *v737;
                v739 = v737[1];
                v740 = v160[1];
                v741 = v740;
                do
                {
                  if (v741)
                  {
                    v742 = 0;
                    v743 = v734[2];
                    v744 = v737[2];
                    v745 = v160[2];
                    do
                    {
                      if (v745)
                      {
                        for (ii = 0; ii < v745; ++ii)
                        {
                          *(_DWORD *)(v733 + 4 * v728 + 4 * ii) = *(_DWORD *)(v732 + 4 * v729) ^ *(_DWORD *)(v731 + 4 * v730);
                          v730 += v743;
                          v729 += v744;
                          v745 = v160[2];
                        }
                        v747 = v745;
                        v740 = v160[1];
                        v728 += ii;
                      }
                      else
                      {
                        v747 = 0;
                      }
                      v730 = v730 + v736 - v747 * v743;
                      v729 = v729 + v739 - v744 * v249[2];
                      ++v742;
                    }
                    while (v742 < v740);
                    v748 = v740;
                    v726 = *v160;
                    v741 = v740;
                  }
                  else
                  {
                    v748 = 0;
                  }
                  v730 = v730 + v735 - v748 * v736;
                  v729 = v729 + v738 - v739 * v249[1];
                  ++v727;
                }
                while (v727 < v726);
              }
              break;
            case 4uLL:
              v749 = *v160;
              if (*v160)
              {
                v750 = 0;
                v751 = 0;
                v752 = 0;
                v753 = 0;
                v754 = v159[19];
                v755 = v248[19];
                v756 = v158[19];
                v757 = (uint64_t *)v159[3];
                v758 = *v757;
                v759 = v757[1];
                v760 = (uint64_t *)v248[3];
                v761 = *v760;
                v762 = v760[1];
                v763 = v160[1];
                v764 = v763;
                do
                {
                  if (v764)
                  {
                    v765 = 0;
                    v766 = v757[2];
                    v767 = v760[2];
                    v768 = v160[2];
                    v769 = v768;
                    do
                    {
                      if (v769)
                      {
                        v770 = 0;
                        v771 = v757[3];
                        v772 = v760[3];
                        v773 = v160[3];
                        do
                        {
                          if (v773)
                          {
                            for (jj = 0; jj < v773; ++jj)
                            {
                              *(_DWORD *)(v756 + 4 * v751 + 4 * jj) = *(_DWORD *)(v755 + 4 * v752) ^ *(_DWORD *)(v754 + 4 * v753);
                              v753 += v771;
                              v752 += v772;
                              v773 = v160[3];
                            }
                            v775 = v773;
                            v768 = v160[2];
                            v751 += jj;
                          }
                          else
                          {
                            v775 = 0;
                          }
                          v753 = v753 + v766 - v775 * v771;
                          v752 = v752 + v767 - v772 * v249[3];
                          ++v770;
                        }
                        while (v770 < v768);
                        v776 = v768;
                        v763 = v160[1];
                        v769 = v768;
                      }
                      else
                      {
                        v776 = 0;
                      }
                      v753 = v753 + v759 - v776 * v766;
                      v752 = v752 + v762 - v767 * v249[2];
                      ++v765;
                    }
                    while (v765 < v763);
                    v777 = v763;
                    v749 = *v160;
                    v764 = v763;
                  }
                  else
                  {
                    v777 = 0;
                  }
                  v753 = v753 + v758 - v777 * v759;
                  v752 = v752 + v761 - v762 * v249[1];
                  ++v750;
                }
                while (v750 < v749);
              }
              break;
            default:
              v697 = v158[6];
              if (v697)
              {
                v698 = 0;
                v1633 = v248[19];
                v1655 = v159[19];
                v1619 = v158[19];
                do
                {
                  v699 = 0;
                  if ((v162 & 0x80000000) == 0)
                  {
                    v700 = v159[3];
                    v701 = v162;
                    v702 = v698;
                    do
                    {
                      v703 = ldiv(v702, v160[v701]);
                      v702 = v703.quot;
                      v699 += *(_QWORD *)(v700 + 8 * v701--) * v703.rem;
                    }
                    while (v701 != -1);
                  }
                  v704 = v1672;
                  if ((v1672 & 0x80000000) != 0)
                  {
                    LODWORD(v705) = 0;
                  }
                  else
                  {
                    v705 = 0;
                    v706 = v248[3];
                    v707 = v698;
                    do
                    {
                      v708 = ldiv(v707, v249[v704]);
                      v707 = v708.quot;
                      v705 += *(_QWORD *)(v706 + 8 * v704--) * v708.rem;
                    }
                    while (v704 != -1);
                  }
                  *(_DWORD *)(v1619 + 4 * v698++) = *(_DWORD *)(v1633 + 4 * (int)v705) ^ *(_DWORD *)(v1655 + 4 * (int)v699);
                  v162 = v1687;
                }
                while (v698 != v697);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      v22 = *(uint64_t **)a1;
      v21 = *(uint64_t **)(a1 + 8);
      switch(v23)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)v1 + 152) = **(_QWORD **)(*v21 + 152) ^ **(_QWORD **)(*v22 + 152);
          return;
        case 1:
          v196 = *(_DWORD *)(*v21 + 160);
          if (v196 >= 1)
          {
            v197 = **(_QWORD **)(*v22 + 152);
            v198 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v199 = *(uint64_t **)(*v21 + 152);
            v200 = v196 + 1;
            do
            {
              v201 = *v199++;
              *v198++ = v201 ^ v197;
              --v200;
            }
            while (v200 > 1);
          }
          return;
        case 2:
          v202 = *(_DWORD *)(*v22 + 160);
          if (v202 >= 1)
          {
            v203 = **(_QWORD **)(*v21 + 152);
            v204 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v205 = *(uint64_t **)(*v22 + 152);
            v206 = v202 + 1;
            do
            {
              v207 = *v205++;
              *v204++ = v207 ^ v203;
              --v206;
            }
            while (v206 > 1);
          }
          return;
        case 3:
          v208 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v208 >= 1)
          {
            v209 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v210 = *(uint64_t **)(*v21 + 152);
            v211 = *(uint64_t **)(*v22 + 152);
            v212 = v208 + 1;
            do
            {
              v214 = *v211++;
              v213 = v214;
              v215 = *v210++;
              *v209++ = v215 ^ v213;
              --v212;
            }
            while (v212 > 1);
          }
          return;
        default:
          v187 = *(_QWORD **)v1;
          v188 = (_QWORD *)*v22;
          v189 = *(int **)*v22;
          v190 = (v188[1] - (_QWORD)v189) >> 2;
          v191 = (v190 - 1);
          if ((int)v191 >= -1)
            v192 = -1;
          else
            v192 = v190 - 1;
          v193 = v192 + 1;
          v194 = v190 + 1;
          break;
      }
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](exception, "[BitwiseBinary::eval_cpu] Type not supported");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  while (1)
  {
    v195 = v194 - 2;
    if (v194 - 2 < 0)
      break;
    --v194;
    if (*(_QWORD *)(v188[3] + 8 * v195) != *(_QWORD *)(v187[3] + 8 * v195))
      goto LABEL_210;
  }
  v194 = v193;
LABEL_210:
  v256 = (_QWORD *)*v21;
  v257 = *(int **)*v21;
  v258 = (v256[1] - (_QWORD)v257) >> 2;
  v259 = (v258 - 1);
  if ((int)v259 >= -1)
    v260 = -1;
  else
    v260 = v258 - 1;
  v261 = v260 + 1;
  v262 = v258 + 1;
  while (1)
  {
    v263 = v262 - 2;
    if (v262 - 2 < 0)
      break;
    --v262;
    if (*(_QWORD *)(v256[3] + 8 * v263) != *(_QWORD *)(v187[3] + 8 * v263))
      goto LABEL_238;
  }
  v262 = v261;
LABEL_238:
  v272 = v190 + 1;
  while (1)
  {
    v273 = v272 - 2;
    if (v272 - 2 < 0)
      break;
    --v272;
    if (*(_QWORD *)(v188[3] + 8 * v273))
      goto LABEL_263;
  }
  v272 = v193;
LABEL_263:
  v282 = v258 + 1;
  while (1)
  {
    v283 = v282 - 2;
    if (v282 - 2 < 0)
      break;
    --v282;
    if (*(_QWORD *)(v256[3] + 8 * v283))
      goto LABEL_360;
  }
  v282 = v261;
LABEL_360:
  v328 = (uint64_t)(v187[1] - *v187) >> 2;
  if (v194 <= v262)
    v329 = v262;
  else
    v329 = v194;
  if (v194 <= v282)
    v194 = v282;
  if (v272 > v262)
    v262 = v272;
  if (v328 > v262)
  {
    v330 = 1;
  }
  else
  {
    v262 = (uint64_t)(v187[1] - *v187) >> 2;
    v330 = 4;
  }
  if (v328 > v194)
  {
    v331 = 2;
  }
  else
  {
    v194 = v262;
    v331 = v330;
  }
  if (v328 > v329)
  {
    v194 = v329;
    v331 = 3;
  }
  v1673 = v259;
  v1688 = v191;
  if (!v194)
    goto LABEL_377;
  v332 = *(_QWORD *)(v187[3] + 8 * (v194 - 1));
  if (v332 < 0x10)
    goto LABEL_377;
  switch(v331)
  {
    case 1:
      if (v194 == 2)
      {
        v1502 = *v189;
        if ((_DWORD)v1502)
        {
          v1503 = 0;
          v1504 = 0;
          v1505 = 0;
          v1506 = v188[19];
          v1507 = v256[19];
          v1508 = v187[19];
          v1509 = v189[1];
          v1510 = (uint64_t *)v188[3];
          v1511 = *v1510;
          v1512 = v1510[1];
          v1513 = (uint64_t *)v256[3];
          v1514 = *v1513;
          v1515 = v1513[1];
          if (v1509 <= 1)
            v1516 = 1;
          else
            v1516 = v189[1];
          v1517 = v1511 - v1512 * v1509;
          v1518 = v1514 - v1515 * v257[1];
          do
          {
            if ((_DWORD)v1509)
            {
              v1519 = 0;
              v1520 = v1507 + 8 * v1504;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1521 = 0;
                  v1522 = *(_QWORD *)(v1506 + 8 * v1505);
                  v1523 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1508 + v1521) = *(_QWORD *)(v1520 + v1521) ^ v1522;
                    --v1523;
                    v1521 += 8;
                  }
                  while (v1523 > 1);
                }
                v1505 += v1512;
                v1504 += v1515;
                v1508 += 8 * (int)v332;
                ++v1519;
                v1520 += 8 * v1515;
              }
              while (v1519 != v1516);
            }
            v1505 += v1517;
            v1504 += v1518;
            ++v1503;
          }
          while (v1503 != v1502);
        }
      }
      else if (v194 == 1)
      {
        v944 = *v189;
        if ((_DWORD)v944)
        {
          v945 = 0;
          v946 = 0;
          v947 = v188[19];
          v948 = v256[19];
          v949 = v187[19];
          v950 = *(_QWORD *)v188[3];
          v951 = 8 * *(_QWORD *)v256[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v952 = 0;
              v953 = *(_QWORD *)(v947 + 8 * v946);
              v954 = v332 + 1;
              do
              {
                *(_QWORD *)(v949 + v952) = *(_QWORD *)(v948 + v952) ^ v953;
                --v954;
                v952 += 8;
              }
              while (v954 > 1);
            }
            v946 += v950;
            ++v945;
            v949 += 8 * (int)v332;
            v948 += v951;
          }
          while (v945 != v944);
        }
      }
      else
      {
        v1649 = v187[6];
        if (v1649)
        {
          v1668 = 0;
          v1591 = v256[19];
          v1605 = v188[19];
          v1524 = v187[19];
          do
          {
            v1525 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1526 = v188[3];
              v1527 = v191;
              v1528 = v1668;
              do
              {
                v1529 = ldiv(v1528, v189[v1527]);
                v1528 = v1529.quot;
                v1525 += *(_QWORD *)(v1526 + 8 * v1527--) * v1529.rem;
              }
              while (v1527 != -1);
            }
            v1530 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1531) = 0;
            }
            else
            {
              v1531 = 0;
              v1532 = v256[3];
              v1533 = v1668;
              do
              {
                v1534 = ldiv(v1533, v257[v1530]);
                v1533 = v1534.quot;
                v1531 += *(_QWORD *)(v1532 + 8 * v1530--) * v1534.rem;
              }
              while (v1530 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1535 = 0;
              v1536 = *(_QWORD *)(v1605 + 8 * (int)v1525);
              v1537 = v332 + 1;
              do
              {
                *(_QWORD *)(v1524 + v1535) = *(_QWORD *)(v1591 + 8 * (int)v1531 + v1535) ^ v1536;
                --v1537;
                v1535 += 8;
              }
              while (v1537 > 1);
            }
            v1524 += 8 * (int)v332;
            v1668 += (int)v332;
          }
          while (v1668 < v1649);
        }
      }
      break;
    case 2:
      if (v194 == 2)
      {
        v1538 = *v189;
        if ((_DWORD)v1538)
        {
          v1539 = 0;
          v1540 = 0;
          v1541 = 0;
          v1542 = v188[19];
          v1543 = v256[19];
          v1544 = v187[19];
          v1545 = v189[1];
          v1546 = (uint64_t *)v188[3];
          v1547 = *v1546;
          v1548 = v1546[1];
          v1549 = (uint64_t *)v256[3];
          v1550 = *v1549;
          v1551 = v1549[1];
          if (v1545 <= 1)
            v1552 = 1;
          else
            v1552 = v189[1];
          v1553 = v1547 - v1548 * v1545;
          v1554 = v1550 - v1551 * v257[1];
          do
          {
            if ((_DWORD)v1545)
            {
              v1555 = 0;
              v1556 = v1542 + 8 * v1541;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1557 = 0;
                  v1558 = *(_QWORD *)(v1543 + 8 * v1540);
                  v1559 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1544 + v1557) = *(_QWORD *)(v1556 + v1557) ^ v1558;
                    --v1559;
                    v1557 += 8;
                  }
                  while (v1559 > 1);
                }
                v1541 += v1548;
                v1540 += v1551;
                v1544 += 8 * (int)v332;
                ++v1555;
                v1556 += 8 * v1548;
              }
              while (v1555 != v1552);
            }
            v1541 += v1553;
            v1540 += v1554;
            ++v1539;
          }
          while (v1539 != v1538);
        }
      }
      else if (v194 == 1)
      {
        v955 = *v189;
        if ((_DWORD)v955)
        {
          v956 = 0;
          v957 = 0;
          v958 = v188[19];
          v959 = v256[19];
          v960 = v187[19];
          v961 = *(_QWORD *)v256[3];
          v962 = 8 * *(_QWORD *)v188[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v963 = 0;
              v964 = *(_QWORD *)(v959 + 8 * v957);
              v965 = v332 + 1;
              do
              {
                *(_QWORD *)(v960 + v963) = *(_QWORD *)(v958 + v963) ^ v964;
                --v965;
                v963 += 8;
              }
              while (v965 > 1);
            }
            v957 += v961;
            ++v956;
            v960 += 8 * (int)v332;
            v958 += v962;
          }
          while (v956 != v955);
        }
      }
      else
      {
        v1650 = v187[6];
        if (v1650)
        {
          v1669 = 0;
          v1592 = v256[19];
          v1606 = v188[19];
          v1560 = v187[19];
          do
          {
            v1561 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1562 = v188[3];
              v1563 = v191;
              v1564 = v1669;
              do
              {
                v1565 = ldiv(v1564, v189[v1563]);
                v1564 = v1565.quot;
                v1561 += *(_QWORD *)(v1562 + 8 * v1563--) * v1565.rem;
              }
              while (v1563 != -1);
            }
            v1566 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1567) = 0;
            }
            else
            {
              v1567 = 0;
              v1568 = v256[3];
              v1569 = v1669;
              do
              {
                v1570 = ldiv(v1569, v257[v1566]);
                v1569 = v1570.quot;
                v1567 += *(_QWORD *)(v1568 + 8 * v1566--) * v1570.rem;
              }
              while (v1566 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1571 = 0;
              v1572 = *(_QWORD *)(v1592 + 8 * (int)v1567);
              v1573 = v332 + 1;
              do
              {
                *(_QWORD *)(v1560 + v1571) = *(_QWORD *)(v1606 + 8 * (int)v1561 + v1571) ^ v1572;
                --v1573;
                v1571 += 8;
              }
              while (v1573 > 1);
            }
            v1560 += 8 * (int)v332;
            v1669 += (int)v332;
          }
          while (v1669 < v1650);
        }
      }
      break;
    case 3:
      if (v194 == 2)
      {
        v1193 = *v189;
        if ((_DWORD)v1193)
        {
          v1194 = 0;
          v1195 = 0;
          v1196 = 0;
          v1197 = v188[19];
          v1198 = v256[19];
          v1199 = v187[19];
          v1200 = v189[1];
          v1201 = (uint64_t *)v188[3];
          v1202 = *v1201;
          v1203 = v1201[1];
          v1204 = (uint64_t *)v256[3];
          v1205 = *v1204;
          v1206 = v1204[1];
          if (v1200 <= 1)
            v1207 = 1;
          else
            v1207 = v189[1];
          v1208 = v1202 - v1203 * v1200;
          v1209 = v1205 - v1206 * v257[1];
          do
          {
            if ((_DWORD)v1200)
            {
              v1210 = 0;
              v1211 = v1198 + 8 * v1195;
              v1212 = v1197 + 8 * v1196;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1213 = 0;
                  v1214 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1199 + v1213) = *(_QWORD *)(v1211 + v1213) ^ *(_QWORD *)(v1212 + v1213);
                    --v1214;
                    v1213 += 8;
                  }
                  while (v1214 > 1);
                }
                v1196 += v1203;
                v1195 += v1206;
                v1199 += 8 * (int)v332;
                ++v1210;
                v1211 += 8 * v1206;
                v1212 += 8 * v1203;
              }
              while (v1210 != v1207);
            }
            v1196 += v1208;
            v1195 += v1209;
            ++v1194;
          }
          while (v1194 != v1193);
        }
      }
      else if (v194 == 1)
      {
        v375 = *v189;
        if ((_DWORD)v375)
        {
          v376 = 0;
          v377 = v188[19];
          v378 = v256[19];
          v379 = v187[19];
          v380 = 8 * *(_QWORD *)v256[3];
          v381 = 8 * *(_QWORD *)v188[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v382 = 0;
              v383 = v332 + 1;
              do
              {
                *(_QWORD *)(v379 + v382) = *(_QWORD *)(v378 + v382) ^ *(_QWORD *)(v377 + v382);
                --v383;
                v382 += 8;
              }
              while (v383 > 1);
            }
            ++v376;
            v379 += 8 * (int)v332;
            v378 += v380;
            v377 += v381;
          }
          while (v376 != v375);
        }
      }
      else
      {
        v1642 = v187[6];
        if (v1642)
        {
          v1661 = 0;
          v1584 = v256[19];
          v1598 = v188[19];
          v1215 = v187[19];
          do
          {
            v1216 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1217 = v188[3];
              v1218 = v191;
              v1219 = v1661;
              do
              {
                v1220 = ldiv(v1219, v189[v1218]);
                v1219 = v1220.quot;
                v1216 += *(_QWORD *)(v1217 + 8 * v1218--) * v1220.rem;
              }
              while (v1218 != -1);
            }
            v1221 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1222) = 0;
            }
            else
            {
              v1222 = 0;
              v1223 = v256[3];
              v1224 = v1661;
              do
              {
                v1225 = ldiv(v1224, v257[v1221]);
                v1224 = v1225.quot;
                v1222 += *(_QWORD *)(v1223 + 8 * v1221--) * v1225.rem;
              }
              while (v1221 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1226 = 0;
              v1227 = v332 + 1;
              do
              {
                *(_QWORD *)(v1215 + v1226) = *(_QWORD *)(v1584 + 8 * (int)v1222 + v1226) ^ *(_QWORD *)(v1598 + 8 * (int)v1216 + v1226);
                --v1227;
                v1226 += 8;
              }
              while (v1227 > 1);
            }
            v1215 += 8 * (int)v332;
            v1661 += (int)v332;
          }
          while (v1661 < v1642);
        }
      }
      break;
    default:
LABEL_377:
      switch(v328)
      {
        case 1uLL:
          v333 = v187[6];
          if (v333)
          {
            v334 = (_QWORD *)v188[19];
            v335 = (_QWORD *)v256[19];
            v336 = (_QWORD *)v187[19];
            v337 = 8 * *(_QWORD *)v256[3];
            v338 = 8 * *(_QWORD *)v188[3];
            do
            {
              *v336++ = *v335 ^ *v334;
              v335 = (_QWORD *)((char *)v335 + v337);
              v334 = (_QWORD *)((char *)v334 + v338);
              --v333;
            }
            while (v333);
          }
          break;
        case 2uLL:
          v790 = *v189;
          if ((_DWORD)v790)
          {
            v791 = 0;
            v792 = 0;
            v793 = 0;
            v794 = 0;
            v795 = v188[19];
            v796 = v256[19];
            v797 = v187[19];
            v798 = v189[1];
            v799 = (uint64_t *)v188[3];
            v800 = *v799;
            v801 = v799[1];
            v802 = (uint64_t *)v256[3];
            v803 = *v802;
            v804 = v802[1];
            v805 = v803 - v804 * v257[1];
            if (v798 <= 1)
              v806 = 1;
            else
              v806 = v189[1];
            v807 = v800 - v801 * v798;
            do
            {
              if ((_DWORD)v798)
              {
                v808 = v792 + v806;
                v809 = (_QWORD *)(v797 + 8 * v792);
                v810 = v806;
                do
                {
                  *v809++ = *(_QWORD *)(v796 + 8 * v793) ^ *(_QWORD *)(v795 + 8 * v794);
                  v794 += v801;
                  v793 += v804;
                  --v810;
                }
                while (v810);
                v792 = v808;
              }
              v794 += v807;
              v793 += v805;
              ++v791;
            }
            while (v791 != v790);
          }
          break;
        case 3uLL:
          v811 = *v189;
          if ((_DWORD)v811)
          {
            v812 = 0;
            v813 = 0;
            v814 = 0;
            v815 = 0;
            v816 = v188[19];
            v817 = v256[19];
            v818 = v187[19];
            v819 = v189[1];
            v820 = (_QWORD *)v188[3];
            v821 = v820[1];
            v822 = (_QWORD *)v256[3];
            v823 = v822[1];
            v824 = *v822 - v823 * v257[1];
            if (v819 <= 1)
              v825 = 1;
            else
              v825 = v189[1];
            v826 = *v820 - v821 * v819;
            do
            {
              if ((_DWORD)v819)
              {
                v827 = 0;
                v828 = v189[2];
                v829 = v820[2];
                v830 = v822[2];
                if (v828 <= 1)
                  v831 = 1;
                else
                  v831 = v189[2];
                v832 = v823 - v830 * v257[2];
                do
                {
                  v833 = v831;
                  if ((_DWORD)v828)
                  {
                    do
                    {
                      *(_QWORD *)(v818 + 8 * v813++) = *(_QWORD *)(v817 + 8 * v814) ^ *(_QWORD *)(v816 + 8 * v815);
                      v815 += v829;
                      v814 += v830;
                      --v833;
                    }
                    while (v833);
                  }
                  v815 += v821 - v829 * v828;
                  v814 += v832;
                  ++v827;
                }
                while (v827 != v825);
              }
              v815 += v826;
              v814 += v824;
              ++v812;
            }
            while (v812 != v811);
          }
          break;
        case 4uLL:
          v1692 = *v189;
          if ((_DWORD)v1692)
          {
            v834 = 0;
            v835 = 0;
            v836 = 0;
            v837 = 0;
            v838 = v188[19];
            v839 = v256[19];
            v840 = v187[19];
            v841 = v189[1];
            v842 = (_QWORD *)v188[3];
            v843 = (_QWORD *)v256[3];
            v1609 = v843[1];
            v1621 = v842[1];
            v1657 = *v843 - v1609 * v257[1];
            v1677 = v189[1];
            if (v841 <= 1)
              v844 = 1;
            else
              v844 = v189[1];
            v1635 = *v842 - v842[1] * v841;
            do
            {
              if (v1677)
              {
                v845 = 0;
                v846 = v189[2];
                v847 = v842[2];
                v848 = v843[2];
                if (v846 <= 1)
                  v849 = 1;
                else
                  v849 = v189[2];
                v850 = v1609 - v848 * v257[2];
                do
                {
                  if ((_DWORD)v846)
                  {
                    v851 = 0;
                    v852 = v189[3];
                    v853 = v842[3];
                    v854 = v843[3];
                    if (v852 <= 1)
                      v855 = 1;
                    else
                      v855 = v189[3];
                    v856 = v848 - v854 * v257[3];
                    do
                    {
                      v857 = v855;
                      if ((_DWORD)v852)
                      {
                        do
                        {
                          *(_QWORD *)(v840 + 8 * v835++) = *(_QWORD *)(v839 + 8 * v836) ^ *(_QWORD *)(v838 + 8 * v837);
                          v837 += v853;
                          v836 += v854;
                          --v857;
                        }
                        while (v857);
                      }
                      v837 += v847 - v853 * v852;
                      v836 += v856;
                      ++v851;
                    }
                    while (v851 != v849);
                  }
                  v837 += v1621 - v847 * v846;
                  v836 += v850;
                  ++v845;
                }
                while (v845 != v844);
              }
              v837 += v1635;
              v836 += v1657;
              ++v834;
            }
            while (v834 != v1692);
          }
          break;
        default:
          v778 = v187[6];
          if (v778)
          {
            v779 = 0;
            v1634 = v256[19];
            v1656 = v188[19];
            v1620 = v187[19];
            do
            {
              v780 = 0;
              if ((v191 & 0x80000000) == 0)
              {
                v781 = v188[3];
                v782 = v191;
                v783 = v779;
                do
                {
                  v784 = ldiv(v783, v189[v782]);
                  v783 = v784.quot;
                  v780 += *(_QWORD *)(v781 + 8 * v782--) * v784.rem;
                }
                while (v782 != -1);
              }
              v785 = v1673;
              if ((v1673 & 0x80000000) != 0)
              {
                LODWORD(v786) = 0;
              }
              else
              {
                v786 = 0;
                v787 = v256[3];
                v788 = v779;
                do
                {
                  v789 = ldiv(v788, v257[v785]);
                  v788 = v789.quot;
                  v786 += *(_QWORD *)(v787 + 8 * v785--) * v789.rem;
                }
                while (v785 != -1);
              }
              *(_QWORD *)(v1620 + 8 * v779++) = *(_QWORD *)(v1634 + 8 * (int)v786) ^ *(_QWORD *)(v1656
                                                                                                 + 8 * (int)v780);
              v191 = v1688;
            }
            while (v779 != v778);
          }
          break;
      }
      return;
  }
}

void sub_2423DDE10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::LeftShift>(uint64_t a1)
{
  mlx::core::array *v1;
  uint64_t *v3;
  uint64_t *v4;
  int binary_op_type;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;
  int *v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  _BYTE *v34;
  char *v35;
  unsigned int v36;
  char v37;
  int v38;
  _BYTE *v39;
  char *v40;
  unsigned int v41;
  char v42;
  uint64_t *v43;
  uint64_t *v44;
  mlx::core::array *v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  _BYTE *v56;
  char *v57;
  int v58;
  unsigned int v59;
  char v60;
  int v61;
  _BYTE *v62;
  unsigned __int8 *v63;
  char v64;
  unsigned int v65;
  int v66;
  int v67;
  _BYTE *v68;
  char *v69;
  unsigned __int8 *v70;
  unsigned int v71;
  char v72;
  char v73;
  int v74;
  int **v75;
  int *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unint64_t v86;
  int v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  _DWORD *v108;
  int *v109;
  unsigned int v110;
  int v111;
  int v112;
  _DWORD *v113;
  int *v114;
  int *v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  _QWORD *v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  _BYTE *v129;
  char *v130;
  int v131;
  unsigned int v132;
  char v133;
  int v134;
  _BYTE *v135;
  unsigned __int8 *v136;
  char v137;
  unsigned int v138;
  int v139;
  int v140;
  _BYTE *v141;
  char *v142;
  unsigned __int8 *v143;
  unsigned int v144;
  char v145;
  char v146;
  int v147;
  _QWORD *v148;
  _QWORD *v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  _DWORD *v159;
  int *v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  _DWORD *v165;
  int *v166;
  unsigned int v167;
  int v168;
  int v169;
  _DWORD *v170;
  int *v171;
  int *v172;
  unsigned int v173;
  int v174;
  int v175;
  int v176;
  _QWORD *v177;
  _QWORD *v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t *v195;
  unsigned int v196;
  uint64_t v197;
  int v198;
  _QWORD *v199;
  uint64_t *v200;
  uint64_t *v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  unsigned int v220;
  _QWORD *v221;
  int *v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  unsigned int v228;
  int **v229;
  int *v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  unsigned int v235;
  _QWORD *v236;
  int *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  int v242;
  unsigned int v243;
  _QWORD *v244;
  int *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  unint64_t v272;
  int v273;
  int v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  _BYTE *v278;
  _BYTE *v279;
  uint64_t v280;
  unint64_t v281;
  int v282;
  int v283;
  int v284;
  unint64_t v285;
  uint64_t v286;
  _DWORD *v287;
  _DWORD *v288;
  _DWORD *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  int v293;
  int v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int *v301;
  uint64_t v302;
  unint64_t v303;
  int v304;
  int v305;
  int v306;
  unint64_t v307;
  uint64_t v308;
  _DWORD *v309;
  _DWORD *v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  int v315;
  int v316;
  int v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  int v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  int v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int *v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  int v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  unint64_t v368;
  int *v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  ldiv_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  ldiv_t v384;
  int v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int *v391;
  uint64_t v392;
  unint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  int *v396;
  uint64_t v397;
  unint64_t v398;
  int v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int *v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  int *v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  int v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int *v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  int *v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  int v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int *v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  unsigned int v444;
  int v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int *v450;
  uint64_t v451;
  uint64_t v452;
  char v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  ldiv_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _BYTE *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  ldiv_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  ldiv_t v525;
  int v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  unint64_t i;
  uint64_t v542;
  int v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  int v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  unint64_t j;
  uint64_t v564;
  uint64_t v565;
  int v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t *v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  int v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  int v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  unint64_t k;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  ldiv_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  ldiv_t v610;
  int v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  int *v617;
  uint64_t v618;
  unint64_t v619;
  _QWORD *v620;
  uint64_t v621;
  int *v622;
  uint64_t v623;
  unint64_t v624;
  int v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int *v631;
  uint64_t v632;
  unint64_t v633;
  unint64_t v634;
  _QWORD *v635;
  uint64_t v636;
  int *v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  unint64_t v641;
  int v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int *v648;
  uint64_t v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  _QWORD *v653;
  uint64_t v654;
  int *v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  ldiv_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  ldiv_t v672;
  int v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t *v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  unint64_t m;
  uint64_t v689;
  int v690;
  unint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t *v701;
  uint64_t v702;
  uint64_t v703;
  int v704;
  int v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  int v709;
  unint64_t n;
  uint64_t v711;
  uint64_t v712;
  int v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t *v724;
  uint64_t v725;
  uint64_t v726;
  int v727;
  int v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  int v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  unint64_t ii;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  int v747;
  ldiv_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  int v752;
  ldiv_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  _QWORD *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unint64_t v783;
  _QWORD *v784;
  uint64_t v785;
  _QWORD *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  unint64_t v805;
  _QWORD *v806;
  _QWORD *v807;
  uint64_t v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  unsigned __int8 *v823;
  char *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unsigned int v832;
  int v833;
  unint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  int v842;
  unsigned int v843;
  int v844;
  unint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  int v853;
  unsigned int v854;
  int v855;
  unint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  int *v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  unsigned int v864;
  int v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  int *v870;
  uint64_t v871;
  uint64_t v872;
  char v873;
  unsigned int v874;
  int v875;
  unint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int v884;
  unsigned int v885;
  int v886;
  unint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  unsigned int v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unsigned int v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  int v919;
  unint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  int *v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  unsigned int v928;
  _QWORD *v929;
  uint64_t v930;
  unint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  int v938;
  ldiv_t v939;
  uint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  int v945;
  ldiv_t v946;
  uint64_t v947;
  unsigned int v948;
  int v949;
  unint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  int *v954;
  uint64_t v955;
  unint64_t v956;
  uint64_t v957;
  int v958;
  unsigned int v959;
  _QWORD *v960;
  uint64_t v961;
  unint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  int v969;
  ldiv_t v970;
  uint64_t v971;
  unint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  int v976;
  ldiv_t v977;
  uint64_t v978;
  int v979;
  unsigned int v980;
  int v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  int *v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  char v990;
  unsigned int v991;
  _QWORD *v992;
  uint64_t v993;
  unint64_t v994;
  uint64_t v995;
  uint64_t v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  ldiv_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int v1008;
  ldiv_t v1009;
  uint64_t v1010;
  char v1011;
  unsigned int v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  unint64_t v1018;
  uint64_t *v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  unsigned int v1027;
  unint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  int v1032;
  ldiv_t v1033;
  uint64_t v1034;
  unsigned int v1035;
  int v1036;
  unint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t *v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t *v1046;
  uint64_t v1047;
  uint64_t v1048;
  int v1049;
  int v1050;
  unint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unsigned int v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  int v1061;
  ldiv_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  int v1066;
  ldiv_t v1067;
  uint64_t v1068;
  unsigned int v1069;
  int v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int *v1075;
  uint64_t v1076;
  unint64_t v1077;
  uint64_t v1078;
  unsigned int v1079;
  _QWORD *v1080;
  uint64_t v1081;
  unint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  int v1089;
  ldiv_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  int v1096;
  ldiv_t v1097;
  uint64_t v1098;
  unsigned int v1099;
  int v1100;
  unint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t *v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t *v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  int v1114;
  unint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  unsigned int v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  int v1125;
  ldiv_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  ldiv_t v1131;
  uint64_t v1132;
  unsigned int v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t *v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t *v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  unsigned int v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  int v1160;
  ldiv_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  ldiv_t v1166;
  uint64_t v1167;
  unsigned int v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  char *v1172;
  unint64_t v1173;
  uint64_t *v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  char *v1180;
  uint64_t v1181;
  uint64_t v1182;
  int quot;
  ldiv_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t *v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  unsigned int v1199;
  unint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  int v1204;
  ldiv_t v1205;
  uint64_t v1206;
  unsigned int v1207;
  int v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t *v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t *v1218;
  uint64_t v1219;
  uint64_t v1220;
  int v1221;
  int v1222;
  unint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  unsigned int v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  int v1233;
  ldiv_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  ldiv_t v1239;
  uint64_t v1240;
  int v1241;
  unsigned int v1242;
  int v1243;
  unint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t *v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t *v1253;
  uint64_t v1254;
  uint64_t v1255;
  int v1256;
  int v1257;
  unint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  int v1261;
  unsigned int v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  int v1268;
  ldiv_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  int v1273;
  ldiv_t v1274;
  uint64_t v1275;
  int v1276;
  unsigned int v1277;
  int v1278;
  unint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  int *v1283;
  uint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  int v1287;
  unsigned int v1288;
  _QWORD *v1289;
  uint64_t v1290;
  unint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  int v1298;
  ldiv_t v1299;
  uint64_t v1300;
  unint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  ldiv_t v1306;
  uint64_t v1307;
  int v1308;
  unsigned int v1309;
  int v1310;
  unint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  int *v1315;
  uint64_t v1316;
  unint64_t v1317;
  uint64_t v1318;
  char v1319;
  unsigned int v1320;
  _QWORD *v1321;
  uint64_t v1322;
  unint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  int v1330;
  ldiv_t v1331;
  uint64_t v1332;
  unint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  int v1337;
  ldiv_t v1338;
  uint64_t v1339;
  char v1340;
  unsigned int v1341;
  int v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t *v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t *v1352;
  uint64_t v1353;
  uint64_t v1354;
  int v1355;
  int v1356;
  unint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  int v1360;
  unsigned int v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  int v1367;
  ldiv_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  int v1372;
  ldiv_t v1373;
  uint64_t v1374;
  int v1375;
  unsigned int v1376;
  int v1377;
  unint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t *v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t *v1387;
  uint64_t v1388;
  uint64_t v1389;
  int v1390;
  int v1391;
  unint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  unsigned int v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  int v1402;
  ldiv_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  int v1407;
  ldiv_t v1408;
  uint64_t v1409;
  int v1410;
  unsigned int v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t *v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t *v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  unsigned int v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  int v1438;
  ldiv_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  int v1443;
  ldiv_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  unsigned int v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  unint64_t v1455;
  uint64_t *v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  unsigned int v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  int v1474;
  ldiv_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  int v1479;
  ldiv_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  unsigned int v1483;
  void *exception;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  unsigned int v1504;
  unsigned int v1505;
  unsigned int v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  int *v1511;
  int *v1512;
  int *v1513;
  int *v1514;
  int *v1515;
  int *v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  unint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  unint64_t v1524;
  uint64_t v1525;
  unint64_t v1526;
  unint64_t v1527;
  uint64_t v1528;
  unint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  unint64_t v1533;
  unint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  unint64_t v1542;
  uint64_t v1543;
  unint64_t v1544;
  unint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  unint64_t v1549;
  unint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  unint64_t v1553;
  unint64_t v1554;
  unint64_t v1555;
  unint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  int *v1561;
  int v1562;
  unint64_t v1563;
  unint64_t v1564;
  unint64_t v1565;
  unint64_t v1566;
  unint64_t v1567;
  int v1568;
  unint64_t v1569;
  unint64_t v1570;
  unint64_t v1571;
  unint64_t v1572;
  mlx::core::array *v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;

  v1 = *(mlx::core::array **)(a1 + 16);
  switch(*(_DWORD *)(*(_QWORD *)v1 + 56))
  {
    case 0:
      v4 = *(uint64_t **)a1;
      v3 = *(uint64_t **)(a1 + 8);
      switch(binary_op_type)
      {
        case 0:
          **(_BYTE **)(*(_QWORD *)v1 + 152) = **(_BYTE **)(*v4 + 152);
          goto LABEL_31;
        case 1:
          if ((int)*(_QWORD *)(*v3 + 160) >= 1)
            memset(*(void **)(*(_QWORD *)v1 + 152), **(unsigned __int8 **)(*v4 + 152), *(_QWORD *)(*v3 + 160));
          goto LABEL_31;
        case 2:
          v33 = *(_DWORD *)(*v4 + 160);
          if (v33 >= 1)
          {
            v34 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v35 = *(char **)(*v4 + 152);
            v36 = v33 + 1;
            do
            {
              v37 = *v35++;
              *v34++ = v37;
              --v36;
            }
            while (v36 > 1);
          }
          goto LABEL_31;
        case 3:
          v38 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v38 >= 1)
          {
            v39 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v40 = *(char **)(*v4 + 152);
            v41 = v38 + 1;
            do
            {
              v42 = *v40++;
              *v39++ = v42;
              --v41;
            }
            while (v41 > 1);
          }
          goto LABEL_31;
        default:
          v24 = *(_QWORD **)v1;
          v25 = *v4;
          v26 = *(int **)*v4;
          v27 = (*(_QWORD *)(*v4 + 8) - (_QWORD)v26) >> 2;
          v28 = (v27 - 1);
          if ((int)v28 >= -1)
            v29 = -1;
          else
            v29 = v27 - 1;
          v30 = v29 + 1;
          v31 = v27 + 1;
          break;
      }
      while (1)
      {
        v32 = v31 - 2;
        if (v31 - 2 < 0)
          break;
        --v31;
        if (*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v32) != *(_QWORD *)(v24[3] + 8 * v32))
          goto LABEL_177;
      }
      v31 = v30;
LABEL_177:
      v215 = *v3;
      v216 = (*(_QWORD *)(*v3 + 8) - *(_QWORD *)*v3) >> 2;
      v217 = v216 - 1;
      if ((int)v216 - 1 >= -1)
        v217 = -1;
      v218 = v217 + 1;
      v219 = v216 + 1;
      while (1)
      {
        v220 = v219 - 2;
        if (v219 - 2 < 0)
          break;
        --v219;
        if (*(_QWORD *)(*(_QWORD *)(v215 + 24) + 8 * v220) != *(_QWORD *)(v24[3] + 8 * v220))
          goto LABEL_215;
      }
      v219 = v218;
LABEL_215:
      v252 = v27 + 1;
      while (1)
      {
        v253 = v252 - 2;
        if (v252 - 2 < 0)
          break;
        --v252;
        if (*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v253))
          goto LABEL_240;
      }
      v252 = v30;
LABEL_240:
      v262 = v216 + 1;
      while (1)
      {
        v263 = v262 - 2;
        if (v262 - 2 < 0)
          break;
        --v262;
        if (*(_QWORD *)(*(_QWORD *)(v215 + 24) + 8 * v263))
          goto LABEL_265;
      }
      v262 = v218;
LABEL_265:
      v272 = (uint64_t)(v24[1] - *v24) >> 2;
      if (v31 <= v219)
        v273 = v219;
      else
        v273 = v31;
      if (v31 <= v262)
        v31 = v262;
      if (v252 > v219)
        v219 = v252;
      if (v272 > v219)
      {
        v274 = 1;
      }
      else
      {
        v219 = (uint64_t)(v24[1] - *v24) >> 2;
        v274 = 4;
      }
      if (v272 > v31)
      {
        v275 = 2;
      }
      else
      {
        v31 = v219;
        v275 = v274;
      }
      if (v272 > v273)
      {
        v31 = v273;
        v275 = 3;
      }
      v1574 = v28;
      if (!v31)
        goto LABEL_282;
      v276 = *(_QWORD *)(v24[3] + 8 * (v31 - 1));
      if (v276 < 0x10)
        goto LABEL_282;
      switch(v275)
      {
        case 1:
          if (v31 == 2)
          {
            v1581 = *v26;
            if ((_DWORD)v1581)
            {
              v1169 = 0;
              v1170 = 0;
              v1171 = *(_QWORD *)(v25 + 152);
              v1172 = (char *)v24[19];
              v1173 = v26[1];
              v1174 = *(uint64_t **)(v25 + 24);
              v1175 = *v1174;
              v1176 = v1174[1];
              if (v1173 <= 1)
                v1177 = 1;
              else
                v1177 = v26[1];
              v1546 = v1177;
              v1568 = v26[1];
              v1528 = v1175 - v1176 * v1173;
              do
              {
                v1178 = v1546;
                if (v1568)
                {
                  do
                  {
                    if ((int)v276 >= 1)
                      memset(v1172, *(unsigned __int8 *)(v1171 + v1170), v276);
                    v1170 += v1176;
                    v1172 += (int)v276;
                    --v1178;
                  }
                  while (v1178);
                }
                v1170 += v1528;
                ++v1169;
              }
              while (v1169 != v1581);
            }
          }
          else if (v31 == 1)
          {
            v822 = *v26;
            if ((_DWORD)v822)
            {
              v823 = *(unsigned __int8 **)(v25 + 152);
              v824 = (char *)v24[19];
              v825 = **(_QWORD **)(v25 + 24);
              do
              {
                if ((int)v276 >= 1)
                  memset(v824, *v823, v276);
                v824 += (int)v276;
                v823 += v825;
                --v822;
              }
              while (v822);
            }
          }
          else
          {
            v1569 = v24[6];
            if (v1569)
            {
              v1179 = 0;
              v1180 = (char *)v24[19];
              v1547 = *(_QWORD *)(v25 + 152);
              do
              {
                v1181 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1182 = *(_QWORD *)(v25 + 24);
                  quot = v1179;
                  do
                  {
                    v1184 = ldiv(quot, v26[v28]);
                    quot = v1184.quot;
                    v1181 += *(_QWORD *)(v1182 + 8 * v28--) * v1184.rem;
                  }
                  while (v28 != -1);
                }
                if ((int)v276 >= 1)
                  memset(v1180, *(unsigned __int8 *)(v1547 + (int)v1181), v276);
                v1180 += (int)v276;
                v1179 += (int)v276;
                v28 = v1574;
              }
              while (v1179 < v1569);
            }
          }
          break;
        case 2:
          if (v31 == 2)
          {
            v1185 = *v26;
            if ((_DWORD)v1185)
            {
              v1186 = 0;
              v1187 = 0;
              v1188 = *(_QWORD *)(v25 + 152);
              v1189 = v24[19];
              v1190 = v26[1];
              v1191 = *(uint64_t **)(v25 + 24);
              v1193 = *v1191;
              v1192 = v1191[1];
              if (v1190 <= 1)
                v1194 = 1;
              else
                v1194 = v26[1];
              v1195 = v1193 - v1192 * v1190;
              do
              {
                if ((_DWORD)v1190)
                {
                  v1196 = 0;
                  v1197 = v1188 + v1187;
                  do
                  {
                    if ((int)v276 >= 1)
                    {
                      v1198 = 0;
                      v1199 = v276 + 1;
                      do
                      {
                        *(_BYTE *)(v1189 + v1198) = *(_BYTE *)(v1197 + v1198);
                        --v1199;
                        ++v1198;
                      }
                      while (v1199 > 1);
                    }
                    v1187 += v1192;
                    v1189 += (int)v276;
                    ++v1196;
                    v1197 += v1192;
                  }
                  while (v1196 != v1194);
                }
                v1187 += v1195;
                ++v1186;
              }
              while (v1186 != v1185);
            }
          }
          else if (v31 == 1)
          {
            v826 = *v26;
            if ((_DWORD)v826)
            {
              v827 = 0;
              v828 = *(_QWORD *)(v25 + 152);
              v829 = v24[19];
              v830 = **(_QWORD **)(v25 + 24);
              do
              {
                if ((int)v276 >= 1)
                {
                  v831 = 0;
                  v832 = v276 + 1;
                  do
                  {
                    *(_BYTE *)(v829 + v831) = *(_BYTE *)(v828 + v831);
                    --v832;
                    ++v831;
                  }
                  while (v832 > 1);
                }
                v829 += (int)v276;
                ++v827;
                v828 += v830;
              }
              while (v827 != v826);
            }
          }
          else
          {
            v1570 = v24[6];
            if (v1570)
            {
              v1200 = 0;
              v1548 = *(_QWORD *)(v25 + 152);
              v1201 = v24[19];
              do
              {
                v1202 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1203 = *(_QWORD *)(v25 + 24);
                  v1204 = v1200;
                  do
                  {
                    v1205 = ldiv(v1204, v26[v28]);
                    v1204 = v1205.quot;
                    v1202 += *(_QWORD *)(v1203 + 8 * v28--) * v1205.rem;
                  }
                  while (v28 != -1);
                }
                if ((int)v276 >= 1)
                {
                  v1206 = 0;
                  v1207 = v276 + 1;
                  do
                  {
                    *(_BYTE *)(v1201 + v1206) = *(_BYTE *)(v1548 + (int)v1202 + v1206);
                    --v1207;
                    ++v1206;
                  }
                  while (v1207 > 1);
                }
                v1201 += (int)v276;
                v1200 += (int)v276;
                v28 = v1574;
              }
              while (v1200 < v1570);
            }
          }
          break;
        case 3:
          if (v31 == 2)
          {
            v1013 = *v26;
            if ((_DWORD)v1013)
            {
              v1014 = 0;
              v1015 = 0;
              v1016 = *(_QWORD *)(v25 + 152);
              v1017 = v24[19];
              v1018 = v26[1];
              v1019 = *(uint64_t **)(v25 + 24);
              v1021 = *v1019;
              v1020 = v1019[1];
              if (v1018 <= 1)
                v1022 = 1;
              else
                v1022 = v26[1];
              v1023 = v1021 - v1020 * v1018;
              do
              {
                if ((_DWORD)v1018)
                {
                  v1024 = 0;
                  v1025 = v1016 + v1015;
                  do
                  {
                    if ((int)v276 >= 1)
                    {
                      v1026 = 0;
                      v1027 = v276 + 1;
                      do
                      {
                        *(_BYTE *)(v1017 + v1026) = *(_BYTE *)(v1025 + v1026);
                        --v1027;
                        ++v1026;
                      }
                      while (v1027 > 1);
                    }
                    v1015 += v1020;
                    v1017 += (int)v276;
                    ++v1024;
                    v1025 += v1020;
                  }
                  while (v1024 != v1022);
                }
                v1015 += v1023;
                ++v1014;
              }
              while (v1014 != v1013);
            }
          }
          else if (v31 == 1)
          {
            v325 = *v26;
            if ((_DWORD)v325)
            {
              v326 = 0;
              v327 = *(_QWORD *)(v25 + 152);
              v328 = v24[19];
              v329 = **(_QWORD **)(v25 + 24);
              do
              {
                if ((int)v276 >= 1)
                {
                  v330 = 0;
                  v331 = v276 + 1;
                  do
                  {
                    *(_BYTE *)(v328 + v330) = *(_BYTE *)(v327 + v330);
                    --v331;
                    ++v330;
                  }
                  while (v331 > 1);
                }
                v328 += (int)v276;
                ++v326;
                v327 += v329;
              }
              while (v326 != v325);
            }
          }
          else
          {
            v1566 = v24[6];
            if (v1566)
            {
              v1028 = 0;
              v1541 = *(_QWORD *)(v25 + 152);
              v1029 = v24[19];
              do
              {
                v1030 = 0;
                if ((v28 & 0x80000000) == 0)
                {
                  v1031 = *(_QWORD *)(v25 + 24);
                  v1032 = v1028;
                  do
                  {
                    v1033 = ldiv(v1032, v26[v28]);
                    v1032 = v1033.quot;
                    v1030 += *(_QWORD *)(v1031 + 8 * v28--) * v1033.rem;
                  }
                  while (v28 != -1);
                }
                if ((int)v276 >= 1)
                {
                  v1034 = 0;
                  v1035 = v276 + 1;
                  do
                  {
                    *(_BYTE *)(v1029 + v1034) = *(_BYTE *)(v1541 + (int)v1030 + v1034);
                    --v1035;
                    ++v1034;
                  }
                  while (v1035 > 1);
                }
                v1029 += (int)v276;
                v1028 += (int)v276;
                v28 = v1574;
              }
              while (v1028 < v1566);
            }
          }
          break;
        default:
LABEL_282:
          switch(v272)
          {
            case 1uLL:
              v277 = v24[6];
              if (v277)
              {
                v278 = *(_BYTE **)(v25 + 152);
                v279 = (_BYTE *)v24[19];
                v280 = **(_QWORD **)(v25 + 24);
                do
                {
                  *v279++ = *v278;
                  v278 += v280;
                  --v277;
                }
                while (v277);
              }
              break;
            case 2uLL:
              v463 = *v26;
              if ((_DWORD)v463)
              {
                v464 = 0;
                v465 = 0;
                v466 = 0;
                v467 = *(_QWORD *)(v25 + 152);
                v468 = v24[19];
                v469 = v26[1];
                v470 = *(uint64_t **)(v25 + 24);
                v472 = *v470;
                v471 = v470[1];
                if (v469 <= 1)
                  v473 = 1;
                else
                  v473 = v26[1];
                v474 = v472 - v471 * v469;
                do
                {
                  if ((_DWORD)v469)
                  {
                    v475 = v465 + v473;
                    v476 = (_BYTE *)(v468 + v465);
                    v477 = v473;
                    do
                    {
                      *v476++ = *(_BYTE *)(v467 + v466);
                      v466 += v471;
                      --v477;
                    }
                    while (v477);
                    v465 = v475;
                  }
                  v466 += v474;
                  ++v464;
                }
                while (v464 != v463);
              }
              break;
            case 3uLL:
              v478 = *v26;
              if ((_DWORD)v478)
              {
                v479 = 0;
                v480 = 0;
                v481 = 0;
                v482 = *(_QWORD *)(v25 + 152);
                v483 = v24[19];
                v484 = v26[1];
                v485 = *(_QWORD **)(v25 + 24);
                v486 = v485[1];
                if (v484 <= 1)
                  v487 = 1;
                else
                  v487 = v26[1];
                v488 = *v485 - v486 * v484;
                do
                {
                  if ((_DWORD)v484)
                  {
                    v489 = 0;
                    v490 = v26[2];
                    v491 = v485[2];
                    if (v490 <= 1)
                      v492 = 1;
                    else
                      v492 = v26[2];
                    do
                    {
                      v493 = v492;
                      if ((_DWORD)v490)
                      {
                        do
                        {
                          *(_BYTE *)(v483 + v480++) = *(_BYTE *)(v482 + v481);
                          v481 += v491;
                          --v493;
                        }
                        while (v493);
                      }
                      v481 += v486 - v491 * v490;
                      ++v489;
                    }
                    while (v489 != v487);
                  }
                  v481 += v488;
                  ++v479;
                }
                while (v479 != v478);
              }
              break;
            case 4uLL:
              v494 = *v26;
              if ((_DWORD)v494)
              {
                v495 = 0;
                v496 = 0;
                v497 = 0;
                v498 = *(_QWORD *)(v25 + 152);
                v499 = v24[19];
                v500 = v26[1];
                v501 = *(_QWORD **)(v25 + 24);
                v502 = v501[1];
                if (v500 <= 1)
                  v503 = 1;
                else
                  v503 = v26[1];
                v504 = *v501 - v502 * v500;
                do
                {
                  if ((_DWORD)v500)
                  {
                    v505 = 0;
                    v506 = v26[2];
                    v507 = v501[2];
                    if (v506 <= 1)
                      v508 = 1;
                    else
                      v508 = v26[2];
                    do
                    {
                      if ((_DWORD)v506)
                      {
                        v509 = 0;
                        v510 = v26[3];
                        v511 = v501[3];
                        if (v510 <= 1)
                          v512 = 1;
                        else
                          v512 = v26[3];
                        do
                        {
                          v513 = v512;
                          if ((_DWORD)v510)
                          {
                            do
                            {
                              *(_BYTE *)(v499 + v496++) = *(_BYTE *)(v498 + v497);
                              v497 += v511;
                              --v513;
                            }
                            while (v513);
                          }
                          v497 += v507 - v511 * v510;
                          ++v509;
                        }
                        while (v509 != v508);
                      }
                      v497 += v502 - v507 * v506;
                      ++v505;
                    }
                    while (v505 != v503);
                  }
                  v497 += v504;
                  ++v495;
                }
                while (v495 != v494);
              }
              break;
            default:
              v455 = v24[6];
              if (v455)
              {
                v456 = 0;
                v457 = *(_QWORD *)(v25 + 152);
                v458 = v24[19];
                do
                {
                  v459 = 0;
                  if ((v28 & 0x80000000) == 0)
                  {
                    v460 = *(_QWORD *)(v25 + 24);
                    v461 = v456;
                    do
                    {
                      v462 = ldiv(v461, v26[v28]);
                      v461 = v462.quot;
                      v459 += *(_QWORD *)(v460 + 8 * v28--) * v462.rem;
                    }
                    while (v28 != -1);
                  }
                  *(_BYTE *)(v458 + v456++) = *(_BYTE *)(v457 + (int)v459);
                  v28 = v1574;
                }
                while (v456 != v455);
              }
              break;
          }
          break;
      }
LABEL_31:
      v43 = *(uint64_t **)a1;
      v44 = *(uint64_t **)(a1 + 8);
      v45 = *(mlx::core::array **)(a1 + 16);
      switch(v46)
      {
        case 0:
          v18 = **(unsigned __int8 **)(*v43 + 152) << **(_BYTE **)(*v44 + 152);
          v19 = *(_QWORD *)v45;
          goto LABEL_33;
        case 1:
          v55 = *(_DWORD *)(*v44 + 160);
          if (v55 >= 1)
          {
            v56 = *(_BYTE **)(*(_QWORD *)v45 + 152);
            v57 = *(char **)(*v44 + 152);
            v58 = **(unsigned __int8 **)(*v43 + 152);
            v59 = v55 + 1;
            do
            {
              v60 = *v57++;
              *v56++ = v58 << v60;
              --v59;
            }
            while (v59 > 1);
          }
          return;
        case 2:
          v61 = *(_DWORD *)(*v43 + 160);
          if (v61 >= 1)
          {
            v62 = *(_BYTE **)(*(_QWORD *)v45 + 152);
            v63 = *(unsigned __int8 **)(*v43 + 152);
            v64 = **(_BYTE **)(*v44 + 152);
            v65 = v61 + 1;
            do
            {
              v66 = *v63++;
              *v62++ = v66 << v64;
              --v65;
            }
            while (v65 > 1);
          }
          return;
        case 3:
          v67 = *(_DWORD *)(*(_QWORD *)v45 + 48);
          if (v67 >= 1)
          {
            v68 = *(_BYTE **)(*(_QWORD *)v45 + 152);
            v69 = *(char **)(*v44 + 152);
            v70 = *(unsigned __int8 **)(*v43 + 152);
            v71 = v67 + 1;
            do
            {
              v73 = *v69++;
              v72 = v73;
              v74 = *v70++;
              *v68++ = v74 << v72;
              --v71;
            }
            while (v71 > 1);
          }
          return;
        default:
          v47 = *(_QWORD **)v45;
          v48 = *v43;
          v49 = *(int **)*v43;
          v50 = (*(_QWORD *)(*v43 + 8) - (_QWORD)v49) >> 2;
          v51 = v50 - 1;
          if ((int)v50 - 1 >= -1)
            v51 = -1;
          v52 = v51 + 1;
          v53 = v50 + 1;
          break;
      }
      while (1)
      {
        v54 = v53 - 2;
        if (v53 - 2 < 0)
          break;
        --v53;
        if (*(_QWORD *)(*(_QWORD *)(v48 + 24) + 8 * v54) != *(_QWORD *)(v47[3] + 8 * v54))
          goto LABEL_53;
      }
      v53 = v52;
LABEL_53:
      v75 = (int **)*v44;
      v76 = *(int **)*v44;
      v77 = (*(_QWORD *)(*v44 + 8) - (_QWORD)v76) >> 2;
      v78 = v77 - 1;
      if ((int)v77 - 1 >= -1)
        v78 = -1;
      v79 = v78 + 1;
      v80 = v77 + 1;
      while (1)
      {
        v81 = v80 - 2;
        if (v80 - 2 < 0)
          break;
        --v80;
        if (*(_QWORD *)&v75[3][2 * v81] != *(_QWORD *)(v47[3] + 8 * v81))
          goto LABEL_60;
      }
      v80 = v79;
LABEL_60:
      v82 = v50 + 1;
      while (1)
      {
        v83 = v82 - 2;
        if (v82 - 2 < 0)
          break;
        --v82;
        if (*(_QWORD *)(*(_QWORD *)(v48 + 24) + 8 * v83))
          goto LABEL_65;
      }
      v82 = v52;
LABEL_65:
      v84 = v77 + 1;
      while (1)
      {
        v85 = v84 - 2;
        if (v84 - 2 < 0)
          break;
        --v84;
        if (*(_QWORD *)&v75[3][2 * v85])
          goto LABEL_70;
      }
      v84 = v79;
LABEL_70:
      v86 = (uint64_t)(v47[1] - *v47) >> 2;
      if (v53 <= v80)
        v87 = v80;
      else
        v87 = v53;
      if (v53 <= v84)
        v53 = v84;
      if (v82 > v80)
        v80 = v82;
      if (v86 > v80)
      {
        v88 = 1;
      }
      else
      {
        v80 = (uint64_t)(v47[1] - *v47) >> 2;
        v88 = 4;
      }
      if (v86 > v53)
      {
        v89 = 2;
      }
      else
      {
        v53 = v80;
        v89 = v88;
      }
      if (v86 > v87)
      {
        v53 = v87;
        v89 = 3;
      }
      v1573 = v45;
      if (!v53)
        goto LABEL_87;
      v90 = *(_QWORD *)(v47[3] + 8 * (v53 - 1));
      if (v90 < 0x10)
        goto LABEL_87;
      switch(v89)
      {
        case 1:
          if (v53 == 2)
          {
            v949 = *v49;
            if (*v49)
            {
              v950 = 0;
              v951 = 0;
              v952 = 0;
              v953 = *(_QWORD *)(v48 + 152);
              v954 = v75[19];
              v955 = v47[19];
              do
              {
                if (v49[1])
                {
                  v956 = 0;
                  do
                  {
                    if ((int)v90 >= 1)
                    {
                      v957 = 0;
                      v958 = *(unsigned __int8 *)(v953 + v952);
                      v959 = v90 + 1;
                      do
                      {
                        *(_BYTE *)(v955 + v957) = v958 << *((_BYTE *)v954 + v951 + v957);
                        --v959;
                        ++v957;
                      }
                      while (v959 > 1);
                      v48 = *v43;
                      v75 = (int **)*v44;
                      v49 = *(int **)*v43;
                    }
                    v960 = *(_QWORD **)(v48 + 24);
                    v961 = v960[1];
                    v952 += v961;
                    v951 += *((_QWORD *)v75[3] + 1);
                    v955 += (int)v90;
                    ++v956;
                    v962 = v49[1];
                  }
                  while (v956 < v962);
                  v949 = *v49;
                  v76 = *v75;
                }
                else
                {
                  v962 = 0;
                  v960 = *(_QWORD **)(v48 + 24);
                  v961 = v960[1];
                }
                v952 = *v960 + v952 - v962 * v961;
                v951 = *(_QWORD *)v75[3] + v951 - *((_QWORD *)v75[3] + 1) * v76[1];
                ++v950;
              }
              while (v950 < v949);
            }
          }
          else if (v53 == 1)
          {
            v435 = *v49;
            if (*v49)
            {
              v436 = 0;
              v437 = 0;
              v438 = 0;
              v439 = *(_QWORD *)(v48 + 152);
              v440 = v75[19];
              v441 = v47[19];
              do
              {
                if ((int)v90 >= 1)
                {
                  v442 = 0;
                  v443 = *(unsigned __int8 *)(v439 + v438);
                  v444 = v90 + 1;
                  do
                  {
                    *(_BYTE *)(v441 + v442) = v443 << *((_BYTE *)v440 + v437 + v442);
                    --v444;
                    ++v442;
                  }
                  while (v444 > 1);
                  v48 = *v43;
                  v75 = (int **)*v44;
                  v435 = **(_DWORD **)*v43;
                }
                v438 += **(_QWORD **)(v48 + 24);
                v437 += *(_QWORD *)v75[3];
                v441 += (int)v90;
                ++v436;
              }
              while (v436 < v435);
            }
          }
          else if (v47[6])
          {
            v1512 = v75[19];
            v1522 = *(_QWORD *)(v48 + 152);
            v1564 = 0;
            v963 = v47[19];
            do
            {
              v964 = *(_QWORD *)*v43;
              v965 = (unint64_t)(*(_QWORD *)(*v43 + 8) - v964) >> 2;
              v966 = 0;
              v967 = (v965 - 1);
              if ((int)v965 - 1 >= 0)
              {
                v968 = *(_QWORD *)(*v43 + 24);
                v969 = v1564;
                do
                {
                  v970 = ldiv(v969, *(int *)(v964 + 4 * v967));
                  v969 = v970.quot;
                  v966 += *(_QWORD *)(v968 + 8 * v967--) * v970.rem;
                }
                while (v967 != -1);
              }
              v971 = *(_QWORD *)*v44;
              v972 = (unint64_t)(*(_QWORD *)(*v44 + 8) - v971) >> 2;
              v973 = 0;
              v974 = (v972 - 1);
              if ((int)v972 - 1 >= 0)
              {
                v975 = *(_QWORD *)(*v44 + 24);
                v976 = v1564;
                do
                {
                  v977 = ldiv(v976, *(int *)(v971 + 4 * v974));
                  v976 = v977.quot;
                  v973 += *(_QWORD *)(v975 + 8 * v974--) * v977.rem;
                }
                while (v974 != -1);
              }
              if ((int)v90 >= 1)
              {
                v978 = 0;
                v979 = *(unsigned __int8 *)(v1522 + (int)v966);
                v980 = v90 + 1;
                do
                {
                  *(_BYTE *)(v963 + v978) = v979 << *((_BYTE *)v1512 + (int)v973 + v978);
                  --v980;
                  ++v978;
                }
                while (v980 > 1);
                v47 = *(_QWORD **)v1573;
              }
              v963 += (int)v90;
              v1564 += (int)v90;
            }
            while (v1564 < v47[6]);
          }
          break;
        case 2:
          if (v53 == 2)
          {
            v981 = *v49;
            if (*v49)
            {
              v982 = 0;
              v983 = 0;
              v984 = 0;
              v985 = *(_QWORD *)(v48 + 152);
              v986 = v75[19];
              v987 = v47[19];
              do
              {
                if (v49[1])
                {
                  v988 = 0;
                  do
                  {
                    if ((int)v90 >= 1)
                    {
                      v989 = 0;
                      v990 = *((_BYTE *)v986 + v983);
                      v991 = v90 + 1;
                      do
                      {
                        *(_BYTE *)(v987 + v989) = *(unsigned __int8 *)(v985 + v984 + v989) << v990;
                        --v991;
                        ++v989;
                      }
                      while (v991 > 1);
                      v48 = *v43;
                      v75 = (int **)*v44;
                      v49 = *(int **)*v43;
                    }
                    v992 = *(_QWORD **)(v48 + 24);
                    v993 = v992[1];
                    v984 += v993;
                    v983 += *((_QWORD *)v75[3] + 1);
                    v987 += (int)v90;
                    ++v988;
                    v994 = v49[1];
                  }
                  while (v988 < v994);
                  v981 = *v49;
                  v76 = *v75;
                }
                else
                {
                  v994 = 0;
                  v992 = *(_QWORD **)(v48 + 24);
                  v993 = v992[1];
                }
                v984 = *v992 + v984 - v994 * v993;
                v983 = *(_QWORD *)v75[3] + v983 - *((_QWORD *)v75[3] + 1) * v76[1];
                ++v982;
              }
              while (v982 < v981);
            }
          }
          else if (v53 == 1)
          {
            v445 = *v49;
            if (*v49)
            {
              v446 = 0;
              v447 = 0;
              v448 = 0;
              v449 = *(_QWORD *)(v48 + 152);
              v450 = v75[19];
              v451 = v47[19];
              do
              {
                if ((int)v90 >= 1)
                {
                  v452 = 0;
                  v453 = *((_BYTE *)v450 + v447);
                  v454 = v90 + 1;
                  do
                  {
                    *(_BYTE *)(v451 + v452) = *(unsigned __int8 *)(v449 + v448 + v452) << v453;
                    --v454;
                    ++v452;
                  }
                  while (v454 > 1);
                  v48 = *v43;
                  v75 = (int **)*v44;
                  v445 = **(_DWORD **)*v43;
                }
                v448 += **(_QWORD **)(v48 + 24);
                v447 += *(_QWORD *)v75[3];
                v451 += (int)v90;
                ++v446;
              }
              while (v446 < v445);
            }
          }
          else if (v47[6])
          {
            v1513 = v75[19];
            v1523 = *(_QWORD *)(v48 + 152);
            v1565 = 0;
            v995 = v47[19];
            do
            {
              v996 = *(_QWORD *)*v43;
              v997 = (unint64_t)(*(_QWORD *)(*v43 + 8) - v996) >> 2;
              v998 = 0;
              v999 = (v997 - 1);
              if ((int)v997 - 1 >= 0)
              {
                v1000 = *(_QWORD *)(*v43 + 24);
                v1001 = v1565;
                do
                {
                  v1002 = ldiv(v1001, *(int *)(v996 + 4 * v999));
                  v1001 = v1002.quot;
                  v998 += *(_QWORD *)(v1000 + 8 * v999--) * v1002.rem;
                }
                while (v999 != -1);
              }
              v1003 = *(_QWORD *)*v44;
              v1004 = (unint64_t)(*(_QWORD *)(*v44 + 8) - v1003) >> 2;
              v1005 = 0;
              v1006 = (v1004 - 1);
              if ((int)v1004 - 1 >= 0)
              {
                v1007 = *(_QWORD *)(*v44 + 24);
                v1008 = v1565;
                do
                {
                  v1009 = ldiv(v1008, *(int *)(v1003 + 4 * v1006));
                  v1008 = v1009.quot;
                  v1005 += *(_QWORD *)(v1007 + 8 * v1006--) * v1009.rem;
                }
                while (v1006 != -1);
              }
              if ((int)v90 >= 1)
              {
                v1010 = 0;
                v1011 = *((_BYTE *)v1513 + (int)v1005);
                v1012 = v90 + 1;
                do
                {
                  *(_BYTE *)(v995 + v1010) = *(unsigned __int8 *)(v1523 + (int)v998 + v1010) << v1011;
                  --v1012;
                  ++v1010;
                }
                while (v1012 > 1);
                v47 = *(_QWORD **)v1573;
              }
              v995 += (int)v90;
              v1565 += (int)v90;
            }
            while (v1565 < v47[6]);
          }
          break;
        case 3:
          if (v53 == 2)
          {
            v919 = *v49;
            if (*v49)
            {
              v920 = 0;
              v921 = 0;
              v922 = 0;
              v923 = *(_QWORD *)(v48 + 152);
              v924 = v75[19];
              v925 = v47[19];
              do
              {
                if (v49[1])
                {
                  v926 = 0;
                  do
                  {
                    if ((int)v90 >= 1)
                    {
                      v927 = 0;
                      v928 = v90 + 1;
                      do
                      {
                        *(_BYTE *)(v925 + v927) = *(unsigned __int8 *)(v923 + v922 + v927) << *((_BYTE *)v924
                                                                                              + v921
                                                                                              + v927);
                        --v928;
                        ++v927;
                      }
                      while (v928 > 1);
                      v48 = *v43;
                      v75 = (int **)*v44;
                      v49 = *(int **)*v43;
                    }
                    v929 = *(_QWORD **)(v48 + 24);
                    v930 = v929[1];
                    v922 += v930;
                    v921 += *((_QWORD *)v75[3] + 1);
                    v925 += (int)v90;
                    ++v926;
                    v931 = v49[1];
                  }
                  while (v926 < v931);
                  v919 = *v49;
                  v76 = *v75;
                }
                else
                {
                  v931 = 0;
                  v929 = *(_QWORD **)(v48 + 24);
                  v930 = v929[1];
                }
                v922 = *v929 + v922 - v931 * v930;
                v921 = *(_QWORD *)v75[3] + v921 - *((_QWORD *)v75[3] + 1) * v76[1];
                ++v920;
              }
              while (v920 < v919);
            }
          }
          else if (v53 == 1)
          {
            v206 = *v49;
            if (*v49)
            {
              v207 = 0;
              v208 = 0;
              v209 = 0;
              v210 = *(_QWORD *)(v48 + 152);
              v211 = v75[19];
              v212 = v47[19];
              do
              {
                if ((int)v90 >= 1)
                {
                  v213 = 0;
                  v214 = v90 + 1;
                  do
                  {
                    *(_BYTE *)(v212 + v213) = *(unsigned __int8 *)(v210 + v209 + v213) << *((_BYTE *)v211 + v208 + v213);
                    --v214;
                    ++v213;
                  }
                  while (v214 > 1);
                  v48 = *v43;
                  v75 = (int **)*v44;
                  v206 = **(_DWORD **)*v43;
                }
                v209 += **(_QWORD **)(v48 + 24);
                v208 += *(_QWORD *)v75[3];
                v212 += (int)v90;
                ++v207;
              }
              while (v207 < v206);
            }
          }
          else if (v47[6])
          {
            v1511 = v75[19];
            v1521 = *(_QWORD *)(v48 + 152);
            v1563 = 0;
            v932 = v47[19];
            do
            {
              v933 = *(_QWORD *)*v43;
              v934 = (unint64_t)(*(_QWORD *)(*v43 + 8) - v933) >> 2;
              v935 = 0;
              v936 = (v934 - 1);
              if ((int)v934 - 1 >= 0)
              {
                v937 = *(_QWORD *)(*v43 + 24);
                v938 = v1563;
                do
                {
                  v939 = ldiv(v938, *(int *)(v933 + 4 * v936));
                  v938 = v939.quot;
                  v935 += *(_QWORD *)(v937 + 8 * v936--) * v939.rem;
                }
                while (v936 != -1);
              }
              v940 = *(_QWORD *)*v44;
              v941 = (unint64_t)(*(_QWORD *)(*v44 + 8) - v940) >> 2;
              v942 = 0;
              v943 = (v941 - 1);
              if ((int)v941 - 1 >= 0)
              {
                v944 = *(_QWORD *)(*v44 + 24);
                v945 = v1563;
                do
                {
                  v946 = ldiv(v945, *(int *)(v940 + 4 * v943));
                  v945 = v946.quot;
                  v942 += *(_QWORD *)(v944 + 8 * v943--) * v946.rem;
                }
                while (v943 != -1);
              }
              if ((int)v90 >= 1)
              {
                v947 = 0;
                v948 = v90 + 1;
                do
                {
                  *(_BYTE *)(v932 + v947) = *(unsigned __int8 *)(v1521 + (int)v935 + v947) << *((_BYTE *)v1511
                                                                                              + (int)v942
                                                                                              + v947);
                  --v948;
                  ++v947;
                }
                while (v948 > 1);
                v47 = *(_QWORD **)v1573;
              }
              v932 += (int)v90;
              v1563 += (int)v90;
            }
            while (v1563 < v47[6]);
          }
          break;
        default:
LABEL_87:
          switch(v86)
          {
            case 1uLL:
              if (v47[6])
              {
                v91 = 0;
                v92 = 0;
                v93 = 0;
                v94 = *(_QWORD *)(v48 + 152);
                v95 = v75[19];
                v96 = v47[19];
                do
                {
                  *(_BYTE *)(v96 + v91) = *(unsigned __int8 *)(v94 + v93) << *((_BYTE *)v95 + v92);
                  v93 += **(_QWORD **)(*v43 + 24);
                  v92 += **(_QWORD **)(*v44 + 24);
                  ++v91;
                }
                while (v91 < *(_QWORD *)(*(_QWORD *)v45 + 48));
              }
              break;
            case 2uLL:
              v385 = *v49;
              if (*v49)
              {
                v386 = 0;
                v387 = 0;
                v388 = 0;
                v389 = 0;
                v390 = *(_QWORD *)(v48 + 152);
                v391 = v75[19];
                v392 = v47[19];
                do
                {
                  if (v49[1])
                  {
                    v393 = 0;
                    do
                    {
                      *(_BYTE *)(v392 + v387 + v393) = *(unsigned __int8 *)(v390 + v389) << *((_BYTE *)v391 + v388);
                      v48 = *v43;
                      v394 = *(_QWORD **)(*v43 + 24);
                      v395 = v394[1];
                      v389 += v395;
                      v75 = (int **)*v44;
                      v396 = *(int **)(*v44 + 24);
                      v397 = *((_QWORD *)v396 + 1);
                      v388 += v397;
                      ++v393;
                      v49 = *(int **)*v43;
                      v398 = v49[1];
                    }
                    while (v393 < v398);
                    v385 = *v49;
                    v76 = *v75;
                    v387 += v393;
                  }
                  else
                  {
                    v398 = 0;
                    v394 = *(_QWORD **)(v48 + 24);
                    v395 = v394[1];
                    v396 = v75[3];
                    v397 = *((_QWORD *)v396 + 1);
                  }
                  v389 = *v394 + v389 - v398 * v395;
                  v388 = *(_QWORD *)v396 + v388 - v397 * v76[1];
                  ++v386;
                }
                while (v386 < v385);
              }
              break;
            case 3uLL:
              v399 = *v49;
              if (*v49)
              {
                v400 = 0;
                v401 = 0;
                v402 = 0;
                v403 = 0;
                v404 = *(_QWORD *)(v48 + 152);
                v405 = v75[19];
                v406 = v47[19];
                do
                {
                  if (v49[1])
                  {
                    v407 = 0;
                    do
                    {
                      if (v49[2])
                      {
                        v408 = 0;
                        do
                        {
                          *(_BYTE *)(v406 + v401 + v408) = *(unsigned __int8 *)(v404 + v403) << *((_BYTE *)v405 + v402);
                          v48 = *v43;
                          v409 = *(_QWORD **)(*v43 + 24);
                          v410 = v409[2];
                          v403 += v410;
                          v75 = (int **)*v44;
                          v411 = *(int **)(*v44 + 24);
                          v412 = *((_QWORD *)v411 + 2);
                          v402 += v412;
                          ++v408;
                          v49 = *(int **)*v43;
                          v413 = v49[2];
                        }
                        while (v408 < v413);
                        v76 = *v75;
                        v401 += v408;
                      }
                      else
                      {
                        v413 = 0;
                        v409 = *(_QWORD **)(v48 + 24);
                        v410 = v409[2];
                        v411 = v75[3];
                        v412 = *((_QWORD *)v411 + 2);
                      }
                      v414 = v409[1];
                      v403 = v414 + v403 - v413 * v410;
                      v402 = *((_QWORD *)v411 + 1) + v402 - v412 * v76[2];
                      ++v407;
                      v415 = v49[1];
                    }
                    while (v407 < v415);
                    v399 = *v49;
                  }
                  else
                  {
                    v415 = 0;
                    v409 = *(_QWORD **)(v48 + 24);
                    v414 = v409[1];
                  }
                  v403 = *v409 + v403 - v415 * v414;
                  v402 = *(_QWORD *)v75[3] + v402 - *((_QWORD *)v75[3] + 1) * v76[1];
                  ++v400;
                }
                while (v400 < v399);
              }
              break;
            case 4uLL:
              v416 = *v49;
              if (*v49)
              {
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = 0;
                v421 = *(_QWORD *)(v48 + 152);
                v422 = v75[19];
                v423 = v47[19];
                do
                {
                  if (v49[1])
                  {
                    v424 = 0;
                    do
                    {
                      if (v49[2])
                      {
                        v425 = 0;
                        do
                        {
                          if (v49[3])
                          {
                            v426 = 0;
                            do
                            {
                              *(_BYTE *)(v423 + v418 + v426) = *(unsigned __int8 *)(v421 + v420) << *((_BYTE *)v422 + v419);
                              v48 = *v43;
                              v427 = *(_QWORD **)(*v43 + 24);
                              v428 = v427[3];
                              v420 += v428;
                              v75 = (int **)*v44;
                              v429 = *(int **)(*v44 + 24);
                              v430 = *((_QWORD *)v429 + 3);
                              v419 += v430;
                              ++v426;
                              v49 = *(int **)*v43;
                              v431 = v49[3];
                            }
                            while (v426 < v431);
                            v76 = *v75;
                            v418 += v426;
                          }
                          else
                          {
                            v431 = 0;
                            v427 = *(_QWORD **)(v48 + 24);
                            v428 = v427[3];
                            v429 = v75[3];
                            v430 = *((_QWORD *)v429 + 3);
                          }
                          v432 = v427[2];
                          v420 = v432 + v420 - v431 * v428;
                          v419 = *((_QWORD *)v429 + 2) + v419 - v430 * v76[3];
                          ++v425;
                          v433 = v49[2];
                        }
                        while (v425 < v433);
                      }
                      else
                      {
                        v433 = 0;
                        v427 = *(_QWORD **)(v48 + 24);
                        v432 = v427[2];
                      }
                      v420 = v427[1] + v420 - v433 * v432;
                      v419 = *((_QWORD *)v75[3] + 1) + v419 - *((_QWORD *)v75[3] + 2) * v76[2];
                      ++v424;
                      v434 = v49[1];
                    }
                    while (v424 < v434);
                    v416 = *v49;
                  }
                  else
                  {
                    v434 = 0;
                  }
                  v420 = **(_QWORD **)(v48 + 24) + v420 - *(_QWORD *)(*(_QWORD *)(v48 + 24) + 8) * v434;
                  v419 = *(_QWORD *)v75[3] + v419 - *((_QWORD *)v75[3] + 1) * v76[1];
                  ++v417;
                }
                while (v417 < v416);
              }
              break;
            default:
              if (v47[6])
              {
                v368 = 0;
                v1560 = *(_QWORD *)(v48 + 152);
                v369 = v75[19];
                v370 = v47[19];
                do
                {
                  v371 = *(_QWORD *)*v43;
                  v372 = (unint64_t)(*(_QWORD *)(*v43 + 8) - v371) >> 2;
                  v373 = 0;
                  v374 = (v372 - 1);
                  if ((int)v372 - 1 >= 0)
                  {
                    v375 = *(_QWORD *)(*v43 + 24);
                    v376 = v368;
                    do
                    {
                      v377 = ldiv(v376, *(int *)(v371 + 4 * v374));
                      v376 = v377.quot;
                      v373 += *(_QWORD *)(v375 + 8 * v374--) * v377.rem;
                    }
                    while (v374 != -1);
                  }
                  v378 = *(_QWORD *)*v44;
                  v379 = (unint64_t)(*(_QWORD *)(*v44 + 8) - v378) >> 2;
                  v380 = 0;
                  v381 = (v379 - 1);
                  if ((int)v379 - 1 >= 0)
                  {
                    v382 = *(_QWORD *)(*v44 + 24);
                    v383 = v368;
                    do
                    {
                      v384 = ldiv(v383, *(int *)(v378 + 4 * v381));
                      v383 = v384.quot;
                      v380 += *(_QWORD *)(v382 + 8 * v381--) * v384.rem;
                    }
                    while (v381 != -1);
                  }
                  *(_BYTE *)(v370 + v368++) = *(unsigned __int8 *)(v1560 + (int)v373) << *((_BYTE *)v369 + (int)v380);
                }
                while (v368 < *(_QWORD *)(*(_QWORD *)v1573 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 1:
      goto LABEL_31;
    case 2:
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      switch(v8)
      {
        case 0:
          goto LABEL_12;
        case 1:
          v9 = *(_DWORD *)(*v6 + 160);
          if (v9 >= 1)
          {
            v10 = **(_DWORD **)(*v7 + 152);
            v11 = *(_DWORD **)(*(_QWORD *)v1 + 152);
            v12 = *(int **)(*v6 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = v10 << v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v106 = *(_DWORD *)(*v7 + 160);
          if (v106 >= 1)
          {
            v107 = **(_DWORD **)(*v6 + 152);
            v108 = *(_DWORD **)(*(_QWORD *)v1 + 152);
            v109 = *(int **)(*v7 + 152);
            v110 = v106 + 1;
            do
            {
              v111 = *v109++;
              *v108++ = v111 << v107;
              --v110;
            }
            while (v110 > 1);
          }
          return;
        case 3:
          v112 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v112 >= 1)
          {
            v113 = *(_DWORD **)(*(_QWORD *)v1 + 152);
            v114 = *(int **)(*v6 + 152);
            v115 = *(int **)(*v7 + 152);
            v116 = v112 + 1;
            do
            {
              v118 = *v115++;
              v117 = v118;
              v119 = *v114++;
              *v113++ = v117 << v119;
              --v116;
            }
            while (v116 > 1);
          }
          return;
        default:
          v97 = *(_QWORD **)v1;
          v98 = (_QWORD *)*v7;
          v99 = *(int **)*v7;
          v100 = (v98[1] - (_QWORD)v99) >> 2;
          v101 = (v100 - 1);
          if ((int)v101 >= -1)
            v102 = -1;
          else
            v102 = v100 - 1;
          v103 = v102 + 1;
          v104 = v100 + 1;
          break;
      }
      while (1)
      {
        v105 = v104 - 2;
        if (v104 - 2 < 0)
          break;
        --v104;
        if (*(_QWORD *)(v98[3] + 8 * v105) != *(_QWORD *)(v97[3] + 8 * v105))
          goto LABEL_184;
      }
      v104 = v103;
LABEL_184:
      v221 = (_QWORD *)*v6;
      v222 = *(int **)*v6;
      v223 = (v221[1] - (_QWORD)v222) >> 2;
      v224 = (v223 - 1);
      if ((int)v224 >= -1)
        v225 = -1;
      else
        v225 = v223 - 1;
      v226 = v225 + 1;
      v227 = v223 + 1;
      while (1)
      {
        v228 = v227 - 2;
        if (v227 - 2 < 0)
          break;
        --v227;
        if (*(_QWORD *)(v221[3] + 8 * v228) != *(_QWORD *)(v97[3] + 8 * v228))
          goto LABEL_220;
      }
      v227 = v226;
LABEL_220:
      v254 = v100 + 1;
      while (1)
      {
        v255 = v254 - 2;
        if (v254 - 2 < 0)
          break;
        --v254;
        if (*(_QWORD *)(v98[3] + 8 * v255))
          goto LABEL_245;
      }
      v254 = v103;
LABEL_245:
      v264 = v223 + 1;
      while (1)
      {
        v265 = v264 - 2;
        if (v264 - 2 < 0)
          break;
        --v264;
        if (*(_QWORD *)(v221[3] + 8 * v265))
          goto LABEL_288;
      }
      v264 = v226;
LABEL_288:
      v281 = (uint64_t)(v97[1] - *v97) >> 2;
      if (v104 <= v227)
        v282 = v227;
      else
        v282 = v104;
      if (v104 <= v264)
        v104 = v264;
      if (v254 > v227)
        v227 = v254;
      if (v281 > v227)
      {
        v283 = 1;
      }
      else
      {
        v227 = (uint64_t)(v97[1] - *v97) >> 2;
        v283 = 4;
      }
      if (v281 > v104)
      {
        v284 = 2;
      }
      else
      {
        v104 = v227;
        v284 = v283;
      }
      if (v281 > v282)
      {
        v104 = v282;
        v284 = 3;
      }
      v1557 = v224;
      v1575 = v101;
      if (!v104)
        goto LABEL_305;
      v285 = *(_QWORD *)(v97[3] + 8 * (v104 - 1));
      if (v285 < 0x10)
        goto LABEL_305;
      switch(v284)
      {
        case 1:
          if (v104 == 2)
          {
            v1208 = *v99;
            if (*v99)
            {
              v1209 = 0;
              v1210 = 0;
              v1211 = 0;
              v1212 = v98[19];
              v1213 = v221[19];
              v1214 = v97[19];
              v1215 = (uint64_t *)v98[3];
              v1216 = *v1215;
              v1217 = v1215[1];
              v1218 = (uint64_t *)v221[3];
              v1219 = *v1218;
              v1220 = v1218[1];
              v1221 = v99[1];
              v1222 = v1221;
              do
              {
                if (v1222)
                {
                  v1223 = 0;
                  v1224 = v1213 + 4 * v1210;
                  do
                  {
                    if ((int)v285 >= 1)
                    {
                      v1225 = 0;
                      v1226 = *(_DWORD *)(v1212 + 4 * v1211);
                      v1227 = v285 + 1;
                      do
                      {
                        *(_DWORD *)(v1214 + v1225) = v1226 << *(_DWORD *)(v1224 + v1225);
                        --v1227;
                        v1225 += 4;
                      }
                      while (v1227 > 1);
                      v1221 = v99[1];
                    }
                    v1211 += v1217;
                    v1210 += v1220;
                    v1214 += 4 * (int)v285;
                    ++v1223;
                    v1224 += 4 * v1220;
                  }
                  while (v1223 < v1221);
                  v1228 = v1221;
                  v1208 = *v99;
                  v1222 = v1221;
                }
                else
                {
                  v1228 = 0;
                }
                v1211 = v1211 + v1216 - v1228 * v1217;
                v1210 = v1210 + v1219 - v1220 * v222[1];
                ++v1209;
              }
              while (v1209 < v1208);
            }
          }
          else if (v104 == 1)
          {
            v833 = *v99;
            if (*v99)
            {
              v834 = 0;
              v835 = 0;
              v836 = v98[19];
              v837 = v221[19];
              v838 = v97[19];
              v839 = *(_QWORD *)v98[3];
              v840 = 4 * *(_QWORD *)v221[3];
              do
              {
                if ((int)v285 >= 1)
                {
                  v841 = 0;
                  v842 = *(_DWORD *)(v836 + 4 * v835);
                  v843 = v285 + 1;
                  do
                  {
                    *(_DWORD *)(v838 + v841) = v842 << *(_DWORD *)(v837 + v841);
                    --v843;
                    v841 += 4;
                  }
                  while (v843 > 1);
                  v833 = *v99;
                }
                v835 += v839;
                ++v834;
                v838 += 4 * (int)v285;
                v837 += v840;
              }
              while (v834 < v833);
            }
          }
          else
          {
            v1529 = v97[6];
            if (v1529)
            {
              v1549 = 0;
              v1488 = v221[19];
              v1497 = v98[19];
              v1229 = v97[19];
              do
              {
                v1230 = 0;
                if ((v101 & 0x80000000) == 0)
                {
                  v1231 = v98[3];
                  v1232 = v101;
                  v1233 = v1549;
                  do
                  {
                    v1234 = ldiv(v1233, v99[v1232]);
                    v1233 = v1234.quot;
                    v1230 += *(_QWORD *)(v1231 + 8 * v1232--) * v1234.rem;
                  }
                  while (v1232 != -1);
                }
                v1235 = v1557;
                if ((v1557 & 0x80000000) != 0)
                {
                  LODWORD(v1236) = 0;
                }
                else
                {
                  v1236 = 0;
                  v1237 = v221[3];
                  v1238 = v1549;
                  do
                  {
                    v1239 = ldiv(v1238, v222[v1235]);
                    v1238 = v1239.quot;
                    v1236 += *(_QWORD *)(v1237 + 8 * v1235--) * v1239.rem;
                  }
                  while (v1235 != -1);
                }
                v101 = v1575;
                if ((int)v285 >= 1)
                {
                  v1240 = 0;
                  v1241 = *(_DWORD *)(v1497 + 4 * (int)v1230);
                  v1242 = v285 + 1;
                  do
                  {
                    *(_DWORD *)(v1229 + v1240) = v1241 << *(_DWORD *)(v1488 + 4 * (int)v1236 + v1240);
                    --v1242;
                    v1240 += 4;
                  }
                  while (v1242 > 1);
                }
                v1229 += 4 * (int)v285;
                v1549 += (int)v285;
              }
              while (v1549 < v1529);
            }
          }
          break;
        case 2:
          if (v104 == 2)
          {
            v1243 = *v99;
            if (*v99)
            {
              v1244 = 0;
              v1245 = 0;
              v1246 = 0;
              v1247 = v98[19];
              v1248 = v221[19];
              v1249 = v97[19];
              v1250 = (uint64_t *)v98[3];
              v1251 = *v1250;
              v1252 = v1250[1];
              v1253 = (uint64_t *)v221[3];
              v1254 = *v1253;
              v1255 = v1253[1];
              v1256 = v99[1];
              v1257 = v1256;
              do
              {
                if (v1257)
                {
                  v1258 = 0;
                  v1259 = v1247 + 4 * v1246;
                  do
                  {
                    if ((int)v285 >= 1)
                    {
                      v1260 = 0;
                      v1261 = *(_DWORD *)(v1248 + 4 * v1245);
                      v1262 = v285 + 1;
                      do
                      {
                        *(_DWORD *)(v1249 + v1260) = *(_DWORD *)(v1259 + v1260) << v1261;
                        --v1262;
                        v1260 += 4;
                      }
                      while (v1262 > 1);
                      v1256 = v99[1];
                    }
                    v1246 += v1252;
                    v1245 += v1255;
                    v1249 += 4 * (int)v285;
                    ++v1258;
                    v1259 += 4 * v1252;
                  }
                  while (v1258 < v1256);
                  v1263 = v1256;
                  v1243 = *v99;
                  v1257 = v1256;
                }
                else
                {
                  v1263 = 0;
                }
                v1246 = v1246 + v1251 - v1263 * v1252;
                v1245 = v1245 + v1254 - v1255 * v222[1];
                ++v1244;
              }
              while (v1244 < v1243);
            }
          }
          else if (v104 == 1)
          {
            v844 = *v99;
            if (*v99)
            {
              v845 = 0;
              v846 = 0;
              v847 = v98[19];
              v848 = v221[19];
              v849 = v97[19];
              v850 = *(_QWORD *)v221[3];
              v851 = 4 * *(_QWORD *)v98[3];
              do
              {
                if ((int)v285 >= 1)
                {
                  v852 = 0;
                  v853 = *(_DWORD *)(v848 + 4 * v846);
                  v854 = v285 + 1;
                  do
                  {
                    *(_DWORD *)(v849 + v852) = *(_DWORD *)(v847 + v852) << v853;
                    --v854;
                    v852 += 4;
                  }
                  while (v854 > 1);
                  v844 = *v99;
                }
                v846 += v850;
                ++v845;
                v849 += 4 * (int)v285;
                v847 += v851;
              }
              while (v845 < v844);
            }
          }
          else
          {
            v1530 = v97[6];
            if (v1530)
            {
              v1550 = 0;
              v1489 = v221[19];
              v1498 = v98[19];
              v1264 = v97[19];
              do
              {
                v1265 = 0;
                if ((v101 & 0x80000000) == 0)
                {
                  v1266 = v98[3];
                  v1267 = v101;
                  v1268 = v1550;
                  do
                  {
                    v1269 = ldiv(v1268, v99[v1267]);
                    v1268 = v1269.quot;
                    v1265 += *(_QWORD *)(v1266 + 8 * v1267--) * v1269.rem;
                  }
                  while (v1267 != -1);
                }
                v1270 = v1557;
                if ((v1557 & 0x80000000) != 0)
                {
                  LODWORD(v1271) = 0;
                }
                else
                {
                  v1271 = 0;
                  v1272 = v221[3];
                  v1273 = v1550;
                  do
                  {
                    v1274 = ldiv(v1273, v222[v1270]);
                    v1273 = v1274.quot;
                    v1271 += *(_QWORD *)(v1272 + 8 * v1270--) * v1274.rem;
                  }
                  while (v1270 != -1);
                }
                v101 = v1575;
                if ((int)v285 >= 1)
                {
                  v1275 = 0;
                  v1276 = *(_DWORD *)(v1489 + 4 * (int)v1271);
                  v1277 = v285 + 1;
                  do
                  {
                    *(_DWORD *)(v1264 + v1275) = *(_DWORD *)(v1498 + 4 * (int)v1265 + v1275) << v1276;
                    --v1277;
                    v1275 += 4;
                  }
                  while (v1277 > 1);
                }
                v1264 += 4 * (int)v285;
                v1550 += (int)v285;
              }
              while (v1550 < v1530);
            }
          }
          break;
        case 3:
          if (v104 == 2)
          {
            v1036 = *v99;
            if (*v99)
            {
              v1037 = 0;
              v1038 = 0;
              v1039 = 0;
              v1040 = v98[19];
              v1041 = v221[19];
              v1042 = v97[19];
              v1043 = (uint64_t *)v98[3];
              v1044 = *v1043;
              v1045 = v1043[1];
              v1046 = (uint64_t *)v221[3];
              v1047 = *v1046;
              v1048 = v1046[1];
              v1049 = v99[1];
              v1050 = v1049;
              do
              {
                if (v1050)
                {
                  v1051 = 0;
                  v1052 = v1041 + 4 * v1038;
                  v1053 = v1040 + 4 * v1039;
                  do
                  {
                    if ((int)v285 >= 1)
                    {
                      v1054 = 0;
                      v1055 = v285 + 1;
                      do
                      {
                        *(_DWORD *)(v1042 + v1054) = *(_DWORD *)(v1053 + v1054) << *(_DWORD *)(v1052 + v1054);
                        --v1055;
                        v1054 += 4;
                      }
                      while (v1055 > 1);
                      v1049 = v99[1];
                    }
                    v1039 += v1045;
                    v1038 += v1048;
                    v1042 += 4 * (int)v285;
                    ++v1051;
                    v1052 += 4 * v1048;
                    v1053 += 4 * v1045;
                  }
                  while (v1051 < v1049);
                  v1056 = v1049;
                  v1036 = *v99;
                  v1050 = v1049;
                }
                else
                {
                  v1056 = 0;
                }
                v1039 = v1039 + v1044 - v1056 * v1045;
                v1038 = v1038 + v1047 - v1048 * v222[1];
                ++v1037;
              }
              while (v1037 < v1036);
            }
          }
          else if (v104 == 1)
          {
            v332 = *v99;
            if (*v99)
            {
              v333 = 0;
              v334 = v98[19];
              v335 = v221[19];
              v336 = v97[19];
              v337 = 4 * *(_QWORD *)v221[3];
              v338 = 4 * *(_QWORD *)v98[3];
              do
              {
                if ((int)v285 >= 1)
                {
                  v339 = 0;
                  v340 = v285 + 1;
                  do
                  {
                    *(_DWORD *)(v336 + v339) = *(_DWORD *)(v334 + v339) << *(_DWORD *)(v335 + v339);
                    --v340;
                    v339 += 4;
                  }
                  while (v340 > 1);
                  v332 = *v99;
                }
                ++v333;
                v336 += 4 * (int)v285;
                v335 += v337;
                v334 += v338;
              }
              while (v333 < v332);
            }
          }
          else
          {
            v1524 = v97[6];
            if (v1524)
            {
              v1542 = 0;
              v1485 = v221[19];
              v1494 = v98[19];
              v1057 = v97[19];
              do
              {
                v1058 = 0;
                if ((v101 & 0x80000000) == 0)
                {
                  v1059 = v98[3];
                  v1060 = v101;
                  v1061 = v1542;
                  do
                  {
                    v1062 = ldiv(v1061, v99[v1060]);
                    v1061 = v1062.quot;
                    v1058 += *(_QWORD *)(v1059 + 8 * v1060--) * v1062.rem;
                  }
                  while (v1060 != -1);
                }
                v1063 = v1557;
                if ((v1557 & 0x80000000) != 0)
                {
                  LODWORD(v1064) = 0;
                }
                else
                {
                  v1064 = 0;
                  v1065 = v221[3];
                  v1066 = v1542;
                  do
                  {
                    v1067 = ldiv(v1066, v222[v1063]);
                    v1066 = v1067.quot;
                    v1064 += *(_QWORD *)(v1065 + 8 * v1063--) * v1067.rem;
                  }
                  while (v1063 != -1);
                }
                v101 = v1575;
                if ((int)v285 >= 1)
                {
                  v1068 = 0;
                  v1069 = v285 + 1;
                  do
                  {
                    *(_DWORD *)(v1057 + v1068) = *(_DWORD *)(v1494 + 4 * (int)v1058 + v1068) << *(_DWORD *)(v1485 + 4 * (int)v1064 + v1068);
                    --v1069;
                    v1068 += 4;
                  }
                  while (v1069 > 1);
                }
                v1057 += 4 * (int)v285;
                v1542 += (int)v285;
              }
              while (v1542 < v1524);
            }
          }
          break;
        default:
LABEL_305:
          switch(v281)
          {
            case 1uLL:
              v286 = v97[6];
              if (v286)
              {
                v287 = (_DWORD *)v98[19];
                v288 = (_DWORD *)v221[19];
                v289 = (_DWORD *)v97[19];
                v290 = 4 * *(_QWORD *)v221[3];
                v291 = 4 * *(_QWORD *)v98[3];
                do
                {
                  *v289++ = *v287 << *v288;
                  v288 = (_DWORD *)((char *)v288 + v290);
                  v287 = (_DWORD *)((char *)v287 + v291);
                  --v286;
                }
                while (v286);
              }
              break;
            case 2uLL:
              v526 = *v99;
              if (*v99)
              {
                v527 = 0;
                v528 = 0;
                v529 = 0;
                v530 = 0;
                v531 = v98[19];
                v532 = v221[19];
                v533 = v97[19];
                v534 = (uint64_t *)v98[3];
                v535 = *v534;
                v536 = v534[1];
                v537 = (uint64_t *)v221[3];
                v539 = *v537;
                v538 = v537[1];
                v540 = v99[1];
                do
                {
                  if (v540)
                  {
                    for (i = 0; i < v540; ++i)
                    {
                      *(_DWORD *)(v533 + 4 * v528 + 4 * i) = *(_DWORD *)(v531 + 4 * v530) << *(_DWORD *)(v532 + 4 * v529);
                      v530 += v536;
                      v529 += v538;
                      v540 = v99[1];
                    }
                    v542 = v540;
                    v526 = *v99;
                    v528 += i;
                  }
                  else
                  {
                    v542 = 0;
                  }
                  v530 = v530 + v535 - v542 * v536;
                  v529 = v529 + v539 - v538 * v222[1];
                  ++v527;
                }
                while (v527 < v526);
              }
              break;
            case 3uLL:
              v543 = *v99;
              if (*v99)
              {
                v544 = 0;
                v545 = 0;
                v546 = 0;
                v547 = 0;
                v548 = v98[19];
                v549 = v221[19];
                v550 = v97[19];
                v551 = (uint64_t *)v98[3];
                v552 = *v551;
                v553 = v551[1];
                v554 = (uint64_t *)v221[3];
                v555 = *v554;
                v556 = v554[1];
                v557 = v99[1];
                v558 = v557;
                do
                {
                  if (v558)
                  {
                    v559 = 0;
                    v560 = v551[2];
                    v561 = v554[2];
                    v562 = v99[2];
                    do
                    {
                      if (v562)
                      {
                        for (j = 0; j < v562; ++j)
                        {
                          *(_DWORD *)(v550 + 4 * v545 + 4 * j) = *(_DWORD *)(v548 + 4 * v547) << *(_DWORD *)(v549 + 4 * v546);
                          v547 += v560;
                          v546 += v561;
                          v562 = v99[2];
                        }
                        v564 = v562;
                        v557 = v99[1];
                        v545 += j;
                      }
                      else
                      {
                        v564 = 0;
                      }
                      v547 = v547 + v553 - v564 * v560;
                      v546 = v546 + v556 - v561 * v222[2];
                      ++v559;
                    }
                    while (v559 < v557);
                    v565 = v557;
                    v543 = *v99;
                    v558 = v557;
                  }
                  else
                  {
                    v565 = 0;
                  }
                  v547 = v547 + v552 - v565 * v553;
                  v546 = v546 + v555 - v556 * v222[1];
                  ++v544;
                }
                while (v544 < v543);
              }
              break;
            case 4uLL:
              v566 = *v99;
              if (*v99)
              {
                v567 = 0;
                v568 = 0;
                v569 = 0;
                v570 = 0;
                v571 = v98[19];
                v572 = v221[19];
                v573 = v97[19];
                v574 = (uint64_t *)v98[3];
                v575 = *v574;
                v576 = v574[1];
                v577 = (uint64_t *)v221[3];
                v578 = *v577;
                v579 = v577[1];
                v580 = v99[1];
                v581 = v580;
                do
                {
                  if (v581)
                  {
                    v582 = 0;
                    v583 = v574[2];
                    v584 = v577[2];
                    v585 = v99[2];
                    v586 = v585;
                    do
                    {
                      if (v586)
                      {
                        v587 = 0;
                        v588 = v574[3];
                        v589 = v577[3];
                        v590 = v99[3];
                        do
                        {
                          if (v590)
                          {
                            for (k = 0; k < v590; ++k)
                            {
                              *(_DWORD *)(v573 + 4 * v568 + 4 * k) = *(_DWORD *)(v571 + 4 * v570) << *(_DWORD *)(v572 + 4 * v569);
                              v570 += v588;
                              v569 += v589;
                              v590 = v99[3];
                            }
                            v592 = v590;
                            v585 = v99[2];
                            v568 += k;
                          }
                          else
                          {
                            v592 = 0;
                          }
                          v570 = v570 + v583 - v592 * v588;
                          v569 = v569 + v584 - v589 * v222[3];
                          ++v587;
                        }
                        while (v587 < v585);
                        v593 = v585;
                        v580 = v99[1];
                        v586 = v585;
                      }
                      else
                      {
                        v593 = 0;
                      }
                      v570 = v570 + v576 - v593 * v583;
                      v569 = v569 + v579 - v584 * v222[2];
                      ++v582;
                    }
                    while (v582 < v580);
                    v594 = v580;
                    v566 = *v99;
                    v581 = v580;
                  }
                  else
                  {
                    v594 = 0;
                  }
                  v570 = v570 + v575 - v594 * v576;
                  v569 = v569 + v578 - v579 * v222[1];
                  ++v567;
                }
                while (v567 < v566);
              }
              break;
            default:
              v514 = v97[6];
              if (v514)
              {
                v515 = 0;
                v1517 = v221[19];
                v1537 = v98[19];
                v1507 = v97[19];
                do
                {
                  v516 = 0;
                  if ((v101 & 0x80000000) == 0)
                  {
                    v517 = v98[3];
                    v518 = v101;
                    v519 = v515;
                    do
                    {
                      v520 = ldiv(v519, v99[v518]);
                      v519 = v520.quot;
                      v516 += *(_QWORD *)(v517 + 8 * v518--) * v520.rem;
                    }
                    while (v518 != -1);
                  }
                  v521 = v1557;
                  if ((v1557 & 0x80000000) != 0)
                  {
                    LODWORD(v522) = 0;
                  }
                  else
                  {
                    v522 = 0;
                    v523 = v221[3];
                    v524 = v515;
                    do
                    {
                      v525 = ldiv(v524, v222[v521]);
                      v524 = v525.quot;
                      v522 += *(_QWORD *)(v523 + 8 * v521--) * v525.rem;
                    }
                    while (v521 != -1);
                  }
                  *(_DWORD *)(v1507 + 4 * v515++) = *(_DWORD *)(v1537 + 4 * (int)v516) << *(_DWORD *)(v1517 + 4 * (int)v522);
                  v101 = v1575;
                }
                while (v515 != v514);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      v15 = *(uint64_t **)a1;
      v16 = *(uint64_t **)(a1 + 8);
      switch(v17)
      {
        case 0:
          v18 = **(unsigned __int8 **)(*v15 + 152) << **(_BYTE **)(*v16 + 152);
          v19 = *(_QWORD *)v1;
LABEL_33:
          **(_BYTE **)(v19 + 152) = v18;
          return;
        case 1:
          v128 = *(_DWORD *)(*v16 + 160);
          if (v128 >= 1)
          {
            v129 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v130 = *(char **)(*v16 + 152);
            v131 = **(unsigned __int8 **)(*v15 + 152);
            v132 = v128 + 1;
            do
            {
              v133 = *v130++;
              *v129++ = v131 << v133;
              --v132;
            }
            while (v132 > 1);
          }
          return;
        case 2:
          v134 = *(_DWORD *)(*v15 + 160);
          if (v134 >= 1)
          {
            v135 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v136 = *(unsigned __int8 **)(*v15 + 152);
            v137 = **(_BYTE **)(*v16 + 152);
            v138 = v134 + 1;
            do
            {
              v139 = *v136++;
              *v135++ = v139 << v137;
              --v138;
            }
            while (v138 > 1);
          }
          return;
        case 3:
          v140 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v140 >= 1)
          {
            v141 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v142 = *(char **)(*v16 + 152);
            v143 = *(unsigned __int8 **)(*v15 + 152);
            v144 = v140 + 1;
            do
            {
              v146 = *v142++;
              v145 = v146;
              v147 = *v143++;
              *v141++ = v147 << v145;
              --v144;
            }
            while (v144 > 1);
          }
          return;
        default:
          v120 = *(_QWORD **)v1;
          v121 = *v15;
          v122 = *(int **)*v15;
          v123 = (*(_QWORD *)(*v15 + 8) - (_QWORD)v122) >> 2;
          v124 = v123 - 1;
          if ((int)v123 - 1 >= -1)
            v124 = -1;
          v125 = v124 + 1;
          v126 = v123 + 1;
          break;
      }
      while (1)
      {
        v127 = v126 - 2;
        if (v126 - 2 < 0)
          break;
        --v126;
        if (*(_QWORD *)(*(_QWORD *)(v121 + 24) + 8 * v127) != *(_QWORD *)(v120[3] + 8 * v127))
          goto LABEL_192;
      }
      v126 = v125;
LABEL_192:
      v229 = (int **)*v16;
      v230 = *(int **)*v16;
      v231 = (*(_QWORD *)(*v16 + 8) - (_QWORD)v230) >> 2;
      v232 = v231 - 1;
      if ((int)v231 - 1 >= -1)
        v232 = -1;
      v233 = v232 + 1;
      v234 = v231 + 1;
      while (1)
      {
        v235 = v234 - 2;
        if (v234 - 2 < 0)
          break;
        --v234;
        if (*(_QWORD *)&v229[3][2 * v235] != *(_QWORD *)(v120[3] + 8 * v235))
          goto LABEL_225;
      }
      v234 = v233;
LABEL_225:
      v256 = v123 + 1;
      while (1)
      {
        v257 = v256 - 2;
        if (v256 - 2 < 0)
          break;
        --v256;
        if (*(_QWORD *)(*(_QWORD *)(v121 + 24) + 8 * v257))
          goto LABEL_250;
      }
      v256 = v125;
LABEL_250:
      v266 = v231 + 1;
      while (1)
      {
        v267 = v266 - 2;
        if (v266 - 2 < 0)
          break;
        --v266;
        if (*(_QWORD *)&v229[3][2 * v267])
          goto LABEL_311;
      }
      v266 = v233;
LABEL_311:
      v292 = (uint64_t)(v120[1] - *v120) >> 2;
      if (v126 <= v234)
        v293 = v234;
      else
        v293 = v126;
      if (v126 <= v266)
        v126 = v266;
      if (v256 > v234)
        v234 = v256;
      if (v292 > v234)
      {
        v294 = 1;
      }
      else
      {
        v234 = (uint64_t)(v120[1] - *v120) >> 2;
        v294 = 4;
      }
      if (v292 > v126)
      {
        v295 = 2;
      }
      else
      {
        v126 = v234;
        v295 = v294;
      }
      if (v292 > v293)
      {
        v126 = v293;
        v295 = 3;
      }
      if (!v126)
        goto LABEL_328;
      v296 = *(_QWORD *)(v120[3] + 8 * (v126 - 1));
      if (v296 < 0x10)
        goto LABEL_328;
      v1578 = *(_QWORD *)(v120[3] + 8 * (v126 - 1));
      switch(v295)
      {
        case 1:
          if (v126 == 2)
          {
            v1278 = *v122;
            if (*v122)
            {
              v1279 = 0;
              v1280 = 0;
              v1281 = 0;
              v1282 = *(_QWORD *)(v121 + 152);
              v1283 = v229[19];
              v1284 = v120[19];
              do
              {
                if (v122[1])
                {
                  v1285 = 0;
                  do
                  {
                    if ((int)v296 >= 1)
                    {
                      v1286 = 0;
                      v1287 = *(unsigned __int8 *)(v1282 + v1281);
                      v1288 = v296 + 1;
                      do
                      {
                        *(_BYTE *)(v1284 + v1286) = v1287 << *((_BYTE *)v1283 + v1280 + v1286);
                        --v1288;
                        ++v1286;
                      }
                      while (v1288 > 1);
                      v121 = *v15;
                      v229 = (int **)*v16;
                      v122 = *(int **)*v15;
                    }
                    v1289 = *(_QWORD **)(v121 + 24);
                    v1290 = v1289[1];
                    v1281 += v1290;
                    v1280 += *((_QWORD *)v229[3] + 1);
                    v1284 += (int)v296;
                    ++v1285;
                    v1291 = v122[1];
                  }
                  while (v1285 < v1291);
                  v1278 = *v122;
                  v230 = *v229;
                }
                else
                {
                  v1291 = 0;
                  v1289 = *(_QWORD **)(v121 + 24);
                  v1290 = v1289[1];
                }
                v1281 = *v1289 + v1281 - v1291 * v1290;
                v1280 = *(_QWORD *)v229[3] + v1280 - *((_QWORD *)v229[3] + 1) * v230[1];
                ++v1279;
              }
              while (v1279 < v1278);
            }
          }
          else if (v126 == 1)
          {
            v855 = *v122;
            if (*v122)
            {
              v856 = 0;
              v857 = 0;
              v858 = 0;
              v859 = *(_QWORD *)(v121 + 152);
              v860 = v229[19];
              v861 = v120[19];
              do
              {
                if ((int)v296 >= 1)
                {
                  v862 = 0;
                  v863 = *(unsigned __int8 *)(v859 + v858);
                  v864 = v296 + 1;
                  do
                  {
                    *(_BYTE *)(v861 + v862) = v863 << *((_BYTE *)v860 + v857 + v862);
                    --v864;
                    ++v862;
                  }
                  while (v864 > 1);
                  v121 = *v15;
                  v229 = (int **)*v16;
                  v855 = **(_DWORD **)*v15;
                }
                v858 += **(_QWORD **)(v121 + 24);
                v857 += *(_QWORD *)v229[3];
                v861 += (int)v296;
                ++v856;
              }
              while (v856 < v855);
            }
          }
          else if (v120[6])
          {
            v1515 = v229[19];
            v1531 = *(_QWORD *)(v121 + 152);
            v1551 = (int)v296;
            v1571 = 0;
            v1505 = v296 + 1;
            v1292 = v120[19];
            do
            {
              v1293 = *(_QWORD *)*v15;
              v1294 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1293) >> 2;
              v1295 = 0;
              v1296 = (v1294 - 1);
              if ((int)v1294 - 1 >= 0)
              {
                v1297 = *(_QWORD *)(*v15 + 24);
                v1298 = v1571;
                do
                {
                  v1299 = ldiv(v1298, *(int *)(v1293 + 4 * v1296));
                  v1298 = v1299.quot;
                  v1295 += *(_QWORD *)(v1297 + 8 * v1296--) * v1299.rem;
                }
                while (v1296 != -1);
              }
              v1300 = *(_QWORD *)*v16;
              v1301 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1300) >> 2;
              v1302 = 0;
              v1303 = (v1301 - 1);
              if ((int)v1301 - 1 >= 0)
              {
                v1304 = *(_QWORD *)(*v16 + 24);
                v1305 = v1571;
                do
                {
                  v1306 = ldiv(v1305, *(int *)(v1300 + 4 * v1303));
                  v1305 = v1306.quot;
                  v1302 += *(_QWORD *)(v1304 + 8 * v1303--) * v1306.rem;
                }
                while (v1303 != -1);
              }
              if ((int)v1578 >= 1)
              {
                v1307 = 0;
                v1308 = *(unsigned __int8 *)(v1531 + (int)v1295);
                v1309 = v1505;
                do
                {
                  *(_BYTE *)(v1292 + v1307) = v1308 << *((_BYTE *)v1515 + (int)v1302 + v1307);
                  --v1309;
                  ++v1307;
                }
                while (v1309 > 1);
                v120 = *(_QWORD **)v1;
              }
              v1292 += v1551;
              v1571 += v1551;
            }
            while (v1571 < v120[6]);
          }
          break;
        case 2:
          if (v126 == 2)
          {
            v1310 = *v122;
            if (*v122)
            {
              v1311 = 0;
              v1312 = 0;
              v1313 = 0;
              v1314 = *(_QWORD *)(v121 + 152);
              v1315 = v229[19];
              v1316 = v120[19];
              do
              {
                if (v122[1])
                {
                  v1317 = 0;
                  do
                  {
                    if ((int)v296 >= 1)
                    {
                      v1318 = 0;
                      v1319 = *((_BYTE *)v1315 + v1312);
                      v1320 = v296 + 1;
                      do
                      {
                        *(_BYTE *)(v1316 + v1318) = *(unsigned __int8 *)(v1314 + v1313 + v1318) << v1319;
                        --v1320;
                        ++v1318;
                      }
                      while (v1320 > 1);
                      v121 = *v15;
                      v229 = (int **)*v16;
                      v122 = *(int **)*v15;
                    }
                    v1321 = *(_QWORD **)(v121 + 24);
                    v1322 = v1321[1];
                    v1313 += v1322;
                    v1312 += *((_QWORD *)v229[3] + 1);
                    v1316 += (int)v296;
                    ++v1317;
                    v1323 = v122[1];
                  }
                  while (v1317 < v1323);
                  v1310 = *v122;
                  v230 = *v229;
                }
                else
                {
                  v1323 = 0;
                  v1321 = *(_QWORD **)(v121 + 24);
                  v1322 = v1321[1];
                }
                v1313 = *v1321 + v1313 - v1323 * v1322;
                v1312 = *(_QWORD *)v229[3] + v1312 - *((_QWORD *)v229[3] + 1) * v230[1];
                ++v1311;
              }
              while (v1311 < v1310);
            }
          }
          else if (v126 == 1)
          {
            v865 = *v122;
            if (*v122)
            {
              v866 = 0;
              v867 = 0;
              v868 = 0;
              v869 = *(_QWORD *)(v121 + 152);
              v870 = v229[19];
              v871 = v120[19];
              do
              {
                if ((int)v296 >= 1)
                {
                  v872 = 0;
                  v873 = *((_BYTE *)v870 + v867);
                  v874 = v296 + 1;
                  do
                  {
                    *(_BYTE *)(v871 + v872) = *(unsigned __int8 *)(v869 + v868 + v872) << v873;
                    --v874;
                    ++v872;
                  }
                  while (v874 > 1);
                  v121 = *v15;
                  v229 = (int **)*v16;
                  v865 = **(_DWORD **)*v15;
                }
                v868 += **(_QWORD **)(v121 + 24);
                v867 += *(_QWORD *)v229[3];
                v871 += (int)v296;
                ++v866;
              }
              while (v866 < v865);
            }
          }
          else if (v120[6])
          {
            v1516 = v229[19];
            v1532 = *(_QWORD *)(v121 + 152);
            v1552 = (int)v296;
            v1572 = 0;
            v1506 = v296 + 1;
            v1324 = v120[19];
            do
            {
              v1325 = *(_QWORD *)*v15;
              v1326 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1325) >> 2;
              v1327 = 0;
              v1328 = (v1326 - 1);
              if ((int)v1326 - 1 >= 0)
              {
                v1329 = *(_QWORD *)(*v15 + 24);
                v1330 = v1572;
                do
                {
                  v1331 = ldiv(v1330, *(int *)(v1325 + 4 * v1328));
                  v1330 = v1331.quot;
                  v1327 += *(_QWORD *)(v1329 + 8 * v1328--) * v1331.rem;
                }
                while (v1328 != -1);
              }
              v1332 = *(_QWORD *)*v16;
              v1333 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1332) >> 2;
              v1334 = 0;
              v1335 = (v1333 - 1);
              if ((int)v1333 - 1 >= 0)
              {
                v1336 = *(_QWORD *)(*v16 + 24);
                v1337 = v1572;
                do
                {
                  v1338 = ldiv(v1337, *(int *)(v1332 + 4 * v1335));
                  v1337 = v1338.quot;
                  v1334 += *(_QWORD *)(v1336 + 8 * v1335--) * v1338.rem;
                }
                while (v1335 != -1);
              }
              if ((int)v1578 >= 1)
              {
                v1339 = 0;
                v1340 = *((_BYTE *)v1516 + (int)v1334);
                v1341 = v1506;
                do
                {
                  *(_BYTE *)(v1324 + v1339) = *(unsigned __int8 *)(v1532 + (int)v1327 + v1339) << v1340;
                  --v1341;
                  ++v1339;
                }
                while (v1341 > 1);
                v120 = *(_QWORD **)v1;
              }
              v1324 += v1552;
              v1572 += v1552;
            }
            while (v1572 < v120[6]);
          }
          break;
        case 3:
          if (v126 == 2)
          {
            v1070 = *v122;
            if (*v122)
            {
              v1071 = 0;
              v1072 = 0;
              v1073 = 0;
              v1074 = *(_QWORD *)(v121 + 152);
              v1075 = v229[19];
              v1076 = v120[19];
              do
              {
                if (v122[1])
                {
                  v1077 = 0;
                  do
                  {
                    if ((int)v296 >= 1)
                    {
                      v1078 = 0;
                      v1079 = v296 + 1;
                      do
                      {
                        *(_BYTE *)(v1076 + v1078) = *(unsigned __int8 *)(v1074 + v1073 + v1078) << *((_BYTE *)v1075 + v1072 + v1078);
                        --v1079;
                        ++v1078;
                      }
                      while (v1079 > 1);
                      v121 = *v15;
                      v229 = (int **)*v16;
                      v122 = *(int **)*v15;
                    }
                    v1080 = *(_QWORD **)(v121 + 24);
                    v1081 = v1080[1];
                    v1073 += v1081;
                    v1072 += *((_QWORD *)v229[3] + 1);
                    v1076 += (int)v296;
                    ++v1077;
                    v1082 = v122[1];
                  }
                  while (v1077 < v1082);
                  v1070 = *v122;
                  v230 = *v229;
                }
                else
                {
                  v1082 = 0;
                  v1080 = *(_QWORD **)(v121 + 24);
                  v1081 = v1080[1];
                }
                v1073 = *v1080 + v1073 - v1082 * v1081;
                v1072 = *(_QWORD *)v229[3] + v1072 - *((_QWORD *)v229[3] + 1) * v230[1];
                ++v1071;
              }
              while (v1071 < v1070);
            }
          }
          else if (v126 == 1)
          {
            v341 = *v122;
            if (*v122)
            {
              v342 = 0;
              v343 = 0;
              v344 = 0;
              v345 = *(_QWORD *)(v121 + 152);
              v346 = v229[19];
              v347 = v120[19];
              do
              {
                if ((int)v296 >= 1)
                {
                  v348 = 0;
                  v349 = v296 + 1;
                  do
                  {
                    *(_BYTE *)(v347 + v348) = *(unsigned __int8 *)(v345 + v344 + v348) << *((_BYTE *)v346 + v343 + v348);
                    --v349;
                    ++v348;
                  }
                  while (v349 > 1);
                  v121 = *v15;
                  v229 = (int **)*v16;
                  v341 = **(_DWORD **)*v15;
                }
                v344 += **(_QWORD **)(v121 + 24);
                v343 += *(_QWORD *)v229[3];
                v347 += (int)v296;
                ++v342;
              }
              while (v342 < v341);
            }
          }
          else if (v120[6])
          {
            v1514 = v229[19];
            v1525 = *(_QWORD *)(v121 + 152);
            v1543 = (int)v296;
            v1567 = 0;
            v1504 = v296 + 1;
            v1083 = v120[19];
            do
            {
              v1084 = *(_QWORD *)*v15;
              v1085 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v1084) >> 2;
              v1086 = 0;
              v1087 = (v1085 - 1);
              if ((int)v1085 - 1 >= 0)
              {
                v1088 = *(_QWORD *)(*v15 + 24);
                v1089 = v1567;
                do
                {
                  v1090 = ldiv(v1089, *(int *)(v1084 + 4 * v1087));
                  v1089 = v1090.quot;
                  v1086 += *(_QWORD *)(v1088 + 8 * v1087--) * v1090.rem;
                }
                while (v1087 != -1);
              }
              v1091 = *(_QWORD *)*v16;
              v1092 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v1091) >> 2;
              v1093 = 0;
              v1094 = (v1092 - 1);
              if ((int)v1092 - 1 >= 0)
              {
                v1095 = *(_QWORD *)(*v16 + 24);
                v1096 = v1567;
                do
                {
                  v1097 = ldiv(v1096, *(int *)(v1091 + 4 * v1094));
                  v1096 = v1097.quot;
                  v1093 += *(_QWORD *)(v1095 + 8 * v1094--) * v1097.rem;
                }
                while (v1094 != -1);
              }
              if ((int)v1578 >= 1)
              {
                v1098 = 0;
                v1099 = v1504;
                do
                {
                  *(_BYTE *)(v1083 + v1098) = *(unsigned __int8 *)(v1525 + (int)v1086 + v1098) << *((_BYTE *)v1514
                                                                                                  + (int)v1093
                                                                                                  + v1098);
                  --v1099;
                  ++v1098;
                }
                while (v1099 > 1);
                v120 = *(_QWORD **)v1;
              }
              v1083 += v1543;
              v1567 += v1543;
            }
            while (v1567 < v120[6]);
          }
          break;
        default:
LABEL_328:
          switch(v292)
          {
            case 1uLL:
              if (v120[6])
              {
                v297 = 0;
                v298 = 0;
                v299 = 0;
                v300 = *(_QWORD *)(v121 + 152);
                v301 = v229[19];
                v302 = v120[19];
                do
                {
                  *(_BYTE *)(v302 + v297) = *(unsigned __int8 *)(v300 + v299) << *((_BYTE *)v301 + v298);
                  v299 += **(_QWORD **)(*v15 + 24);
                  v298 += **(_QWORD **)(*v16 + 24);
                  ++v297;
                }
                while (v297 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
            case 2uLL:
              v611 = *v122;
              if (*v122)
              {
                v612 = 0;
                v613 = 0;
                v614 = 0;
                v615 = 0;
                v616 = *(_QWORD *)(v121 + 152);
                v617 = v229[19];
                v618 = v120[19];
                do
                {
                  if (v122[1])
                  {
                    v619 = 0;
                    do
                    {
                      *(_BYTE *)(v618 + v613 + v619) = *(unsigned __int8 *)(v616 + v615) << *((_BYTE *)v617 + v614);
                      v121 = *v15;
                      v620 = *(_QWORD **)(*v15 + 24);
                      v621 = v620[1];
                      v615 += v621;
                      v229 = (int **)*v16;
                      v622 = *(int **)(*v16 + 24);
                      v623 = *((_QWORD *)v622 + 1);
                      v614 += v623;
                      ++v619;
                      v122 = *(int **)*v15;
                      v624 = v122[1];
                    }
                    while (v619 < v624);
                    v611 = *v122;
                    v230 = *v229;
                    v613 += v619;
                  }
                  else
                  {
                    v624 = 0;
                    v620 = *(_QWORD **)(v121 + 24);
                    v621 = v620[1];
                    v622 = v229[3];
                    v623 = *((_QWORD *)v622 + 1);
                  }
                  v615 = *v620 + v615 - v624 * v621;
                  v614 = *(_QWORD *)v622 + v614 - v623 * v230[1];
                  ++v612;
                }
                while (v612 < v611);
              }
              break;
            case 3uLL:
              v625 = *v122;
              if (*v122)
              {
                v626 = 0;
                v627 = 0;
                v628 = 0;
                v629 = 0;
                v630 = *(_QWORD *)(v121 + 152);
                v631 = v229[19];
                v632 = v120[19];
                do
                {
                  if (v122[1])
                  {
                    v633 = 0;
                    do
                    {
                      if (v122[2])
                      {
                        v634 = 0;
                        do
                        {
                          *(_BYTE *)(v632 + v627 + v634) = *(unsigned __int8 *)(v630 + v629) << *((_BYTE *)v631 + v628);
                          v121 = *v15;
                          v635 = *(_QWORD **)(*v15 + 24);
                          v636 = v635[2];
                          v629 += v636;
                          v229 = (int **)*v16;
                          v637 = *(int **)(*v16 + 24);
                          v638 = *((_QWORD *)v637 + 2);
                          v628 += v638;
                          ++v634;
                          v122 = *(int **)*v15;
                          v639 = v122[2];
                        }
                        while (v634 < v639);
                        v230 = *v229;
                        v627 += v634;
                      }
                      else
                      {
                        v639 = 0;
                        v635 = *(_QWORD **)(v121 + 24);
                        v636 = v635[2];
                        v637 = v229[3];
                        v638 = *((_QWORD *)v637 + 2);
                      }
                      v640 = v635[1];
                      v629 = v640 + v629 - v639 * v636;
                      v628 = *((_QWORD *)v637 + 1) + v628 - v638 * v230[2];
                      ++v633;
                      v641 = v122[1];
                    }
                    while (v633 < v641);
                    v625 = *v122;
                  }
                  else
                  {
                    v641 = 0;
                    v635 = *(_QWORD **)(v121 + 24);
                    v640 = v635[1];
                  }
                  v629 = *v635 + v629 - v641 * v640;
                  v628 = *(_QWORD *)v229[3] + v628 - *((_QWORD *)v229[3] + 1) * v230[1];
                  ++v626;
                }
                while (v626 < v625);
              }
              break;
            case 4uLL:
              v642 = *v122;
              if (*v122)
              {
                v643 = 0;
                v644 = 0;
                v645 = 0;
                v646 = 0;
                v647 = *(_QWORD *)(v121 + 152);
                v648 = v229[19];
                v649 = v120[19];
                do
                {
                  if (v122[1])
                  {
                    v650 = 0;
                    do
                    {
                      if (v122[2])
                      {
                        v651 = 0;
                        do
                        {
                          if (v122[3])
                          {
                            v652 = 0;
                            do
                            {
                              *(_BYTE *)(v649 + v644 + v652) = *(unsigned __int8 *)(v647 + v646) << *((_BYTE *)v648 + v645);
                              v121 = *v15;
                              v653 = *(_QWORD **)(*v15 + 24);
                              v654 = v653[3];
                              v646 += v654;
                              v229 = (int **)*v16;
                              v655 = *(int **)(*v16 + 24);
                              v656 = *((_QWORD *)v655 + 3);
                              v645 += v656;
                              ++v652;
                              v122 = *(int **)*v15;
                              v657 = v122[3];
                            }
                            while (v652 < v657);
                            v230 = *v229;
                            v644 += v652;
                          }
                          else
                          {
                            v657 = 0;
                            v653 = *(_QWORD **)(v121 + 24);
                            v654 = v653[3];
                            v655 = v229[3];
                            v656 = *((_QWORD *)v655 + 3);
                          }
                          v658 = v653[2];
                          v646 = v658 + v646 - v657 * v654;
                          v645 = *((_QWORD *)v655 + 2) + v645 - v656 * v230[3];
                          ++v651;
                          v659 = v122[2];
                        }
                        while (v651 < v659);
                      }
                      else
                      {
                        v659 = 0;
                        v653 = *(_QWORD **)(v121 + 24);
                        v658 = v653[2];
                      }
                      v646 = v653[1] + v646 - v659 * v658;
                      v645 = *((_QWORD *)v229[3] + 1) + v645 - *((_QWORD *)v229[3] + 2) * v230[2];
                      ++v650;
                      v660 = v122[1];
                    }
                    while (v650 < v660);
                    v642 = *v122;
                  }
                  else
                  {
                    v660 = 0;
                  }
                  v646 = **(_QWORD **)(v121 + 24) + v646 - *(_QWORD *)(*(_QWORD *)(v121 + 24) + 8) * v660;
                  v645 = *(_QWORD *)v229[3] + v645 - *((_QWORD *)v229[3] + 1) * v230[1];
                  ++v643;
                }
                while (v643 < v642);
              }
              break;
            default:
              if (v120[6])
              {
                v595 = 0;
                v1561 = v229[19];
                v1579 = *(_QWORD *)(v121 + 152);
                v596 = v120[19];
                do
                {
                  v597 = *(_QWORD *)*v15;
                  v598 = (unint64_t)(*(_QWORD *)(*v15 + 8) - v597) >> 2;
                  v599 = 0;
                  v600 = (v598 - 1);
                  if ((int)v598 - 1 >= 0)
                  {
                    v601 = *(_QWORD *)(*v15 + 24);
                    v602 = v595;
                    do
                    {
                      v603 = ldiv(v602, *(int *)(v597 + 4 * v600));
                      v602 = v603.quot;
                      v599 += *(_QWORD *)(v601 + 8 * v600--) * v603.rem;
                    }
                    while (v600 != -1);
                  }
                  v604 = *(_QWORD *)*v16;
                  v605 = (unint64_t)(*(_QWORD *)(*v16 + 8) - v604) >> 2;
                  v606 = 0;
                  v607 = (v605 - 1);
                  if ((int)v605 - 1 >= 0)
                  {
                    v608 = *(_QWORD *)(*v16 + 24);
                    v609 = v595;
                    do
                    {
                      v610 = ldiv(v609, *(int *)(v604 + 4 * v607));
                      v609 = v610.quot;
                      v606 += *(_QWORD *)(v608 + 8 * v607--) * v610.rem;
                    }
                    while (v607 != -1);
                  }
                  *(_BYTE *)(v596 + v595++) = *(unsigned __int8 *)(v1579 + (int)v599) << *((_BYTE *)v1561 + (int)v606);
                }
                while (v595 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 4:
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      switch(v20)
      {
        case 0:
LABEL_12:
          **(_DWORD **)(*(_QWORD *)v1 + 152) = **(_DWORD **)(*v7 + 152) << **(_DWORD **)(*v6 + 152);
          return;
        case 1:
          v157 = *(_DWORD *)(*v6 + 160);
          if (v157 >= 1)
          {
            v158 = **(_DWORD **)(*v7 + 152);
            v159 = *(_DWORD **)(*(_QWORD *)v1 + 152);
            v160 = *(int **)(*v6 + 152);
            v161 = v157 + 1;
            do
            {
              v162 = *v160++;
              *v159++ = v158 << v162;
              --v161;
            }
            while (v161 > 1);
          }
          return;
        case 2:
          v163 = *(_DWORD *)(*v7 + 160);
          if (v163 >= 1)
          {
            v164 = **(_DWORD **)(*v6 + 152);
            v165 = *(_DWORD **)(*(_QWORD *)v1 + 152);
            v166 = *(int **)(*v7 + 152);
            v167 = v163 + 1;
            do
            {
              v168 = *v166++;
              *v165++ = v168 << v164;
              --v167;
            }
            while (v167 > 1);
          }
          return;
        case 3:
          v169 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v169 >= 1)
          {
            v170 = *(_DWORD **)(*(_QWORD *)v1 + 152);
            v171 = *(int **)(*v6 + 152);
            v172 = *(int **)(*v7 + 152);
            v173 = v169 + 1;
            do
            {
              v175 = *v172++;
              v174 = v175;
              v176 = *v171++;
              *v170++ = v174 << v176;
              --v173;
            }
            while (v173 > 1);
          }
          return;
        default:
          v148 = *(_QWORD **)v1;
          v149 = (_QWORD *)*v7;
          v150 = *(int **)*v7;
          v151 = (v149[1] - (_QWORD)v150) >> 2;
          v152 = (v151 - 1);
          if ((int)v152 >= -1)
            v153 = -1;
          else
            v153 = v151 - 1;
          v154 = v153 + 1;
          v155 = v151 + 1;
          break;
      }
      while (1)
      {
        v156 = v155 - 2;
        if (v155 - 2 < 0)
          break;
        --v155;
        if (*(_QWORD *)(v149[3] + 8 * v156) != *(_QWORD *)(v148[3] + 8 * v156))
          goto LABEL_199;
      }
      v155 = v154;
LABEL_199:
      v236 = (_QWORD *)*v6;
      v237 = *(int **)*v6;
      v238 = (v236[1] - (_QWORD)v237) >> 2;
      v239 = (v238 - 1);
      if ((int)v239 >= -1)
        v240 = -1;
      else
        v240 = v238 - 1;
      v241 = v240 + 1;
      v242 = v238 + 1;
      while (1)
      {
        v243 = v242 - 2;
        if (v242 - 2 < 0)
          break;
        --v242;
        if (*(_QWORD *)(v236[3] + 8 * v243) != *(_QWORD *)(v148[3] + 8 * v243))
          goto LABEL_230;
      }
      v242 = v241;
LABEL_230:
      v258 = v151 + 1;
      while (1)
      {
        v259 = v258 - 2;
        if (v258 - 2 < 0)
          break;
        --v258;
        if (*(_QWORD *)(v149[3] + 8 * v259))
          goto LABEL_255;
      }
      v258 = v154;
LABEL_255:
      v268 = v238 + 1;
      while (1)
      {
        v269 = v268 - 2;
        if (v268 - 2 < 0)
          break;
        --v268;
        if (*(_QWORD *)(v236[3] + 8 * v269))
          goto LABEL_334;
      }
      v268 = v241;
LABEL_334:
      v303 = (uint64_t)(v148[1] - *v148) >> 2;
      if (v155 <= v242)
        v304 = v242;
      else
        v304 = v155;
      if (v155 <= v268)
        v155 = v268;
      if (v258 > v242)
        v242 = v258;
      if (v303 > v242)
      {
        v305 = 1;
      }
      else
      {
        v242 = (uint64_t)(v148[1] - *v148) >> 2;
        v305 = 4;
      }
      if (v303 > v155)
      {
        v306 = 2;
      }
      else
      {
        v155 = v242;
        v306 = v305;
      }
      if (v303 > v304)
      {
        v155 = v304;
        v306 = 3;
      }
      v1558 = v239;
      v1576 = v152;
      if (!v155)
        goto LABEL_351;
      v307 = *(_QWORD *)(v148[3] + 8 * (v155 - 1));
      if (v307 < 0x10)
        goto LABEL_351;
      switch(v306)
      {
        case 1:
          if (v155 == 2)
          {
            v1342 = *v150;
            if (*v150)
            {
              v1343 = 0;
              v1344 = 0;
              v1345 = 0;
              v1346 = v149[19];
              v1347 = v236[19];
              v1348 = v148[19];
              v1349 = (uint64_t *)v149[3];
              v1350 = *v1349;
              v1351 = v1349[1];
              v1352 = (uint64_t *)v236[3];
              v1353 = *v1352;
              v1354 = v1352[1];
              v1355 = v150[1];
              v1356 = v1355;
              do
              {
                if (v1356)
                {
                  v1357 = 0;
                  v1358 = v1347 + 4 * v1344;
                  do
                  {
                    if ((int)v307 >= 1)
                    {
                      v1359 = 0;
                      v1360 = *(_DWORD *)(v1346 + 4 * v1345);
                      v1361 = v307 + 1;
                      do
                      {
                        *(_DWORD *)(v1348 + v1359) = v1360 << *(_DWORD *)(v1358 + v1359);
                        --v1361;
                        v1359 += 4;
                      }
                      while (v1361 > 1);
                      v1355 = v150[1];
                    }
                    v1345 += v1351;
                    v1344 += v1354;
                    v1348 += 4 * (int)v307;
                    ++v1357;
                    v1358 += 4 * v1354;
                  }
                  while (v1357 < v1355);
                  v1362 = v1355;
                  v1342 = *v150;
                  v1356 = v1355;
                }
                else
                {
                  v1362 = 0;
                }
                v1345 = v1345 + v1350 - v1362 * v1351;
                v1344 = v1344 + v1353 - v1354 * v237[1];
                ++v1343;
              }
              while (v1343 < v1342);
            }
          }
          else if (v155 == 1)
          {
            v875 = *v150;
            if (*v150)
            {
              v876 = 0;
              v877 = 0;
              v878 = v149[19];
              v879 = v236[19];
              v880 = v148[19];
              v881 = *(_QWORD *)v149[3];
              v882 = 4 * *(_QWORD *)v236[3];
              do
              {
                if ((int)v307 >= 1)
                {
                  v883 = 0;
                  v884 = *(_DWORD *)(v878 + 4 * v877);
                  v885 = v307 + 1;
                  do
                  {
                    *(_DWORD *)(v880 + v883) = v884 << *(_DWORD *)(v879 + v883);
                    --v885;
                    v883 += 4;
                  }
                  while (v885 > 1);
                  v875 = *v150;
                }
                v877 += v881;
                ++v876;
                v880 += 4 * (int)v307;
                v879 += v882;
              }
              while (v876 < v875);
            }
          }
          else
          {
            v1533 = v148[6];
            if (v1533)
            {
              v1553 = 0;
              v1490 = v236[19];
              v1499 = v149[19];
              v1363 = v148[19];
              do
              {
                v1364 = 0;
                if ((v152 & 0x80000000) == 0)
                {
                  v1365 = v149[3];
                  v1366 = v152;
                  v1367 = v1553;
                  do
                  {
                    v1368 = ldiv(v1367, v150[v1366]);
                    v1367 = v1368.quot;
                    v1364 += *(_QWORD *)(v1365 + 8 * v1366--) * v1368.rem;
                  }
                  while (v1366 != -1);
                }
                v1369 = v1558;
                if ((v1558 & 0x80000000) != 0)
                {
                  LODWORD(v1370) = 0;
                }
                else
                {
                  v1370 = 0;
                  v1371 = v236[3];
                  v1372 = v1553;
                  do
                  {
                    v1373 = ldiv(v1372, v237[v1369]);
                    v1372 = v1373.quot;
                    v1370 += *(_QWORD *)(v1371 + 8 * v1369--) * v1373.rem;
                  }
                  while (v1369 != -1);
                }
                v152 = v1576;
                if ((int)v307 >= 1)
                {
                  v1374 = 0;
                  v1375 = *(_DWORD *)(v1499 + 4 * (int)v1364);
                  v1376 = v307 + 1;
                  do
                  {
                    *(_DWORD *)(v1363 + v1374) = v1375 << *(_DWORD *)(v1490 + 4 * (int)v1370 + v1374);
                    --v1376;
                    v1374 += 4;
                  }
                  while (v1376 > 1);
                }
                v1363 += 4 * (int)v307;
                v1553 += (int)v307;
              }
              while (v1553 < v1533);
            }
          }
          break;
        case 2:
          if (v155 == 2)
          {
            v1377 = *v150;
            if (*v150)
            {
              v1378 = 0;
              v1379 = 0;
              v1380 = 0;
              v1381 = v149[19];
              v1382 = v236[19];
              v1383 = v148[19];
              v1384 = (uint64_t *)v149[3];
              v1385 = *v1384;
              v1386 = v1384[1];
              v1387 = (uint64_t *)v236[3];
              v1388 = *v1387;
              v1389 = v1387[1];
              v1390 = v150[1];
              v1391 = v1390;
              do
              {
                if (v1391)
                {
                  v1392 = 0;
                  v1393 = v1381 + 4 * v1380;
                  do
                  {
                    if ((int)v307 >= 1)
                    {
                      v1394 = 0;
                      v1395 = *(_DWORD *)(v1382 + 4 * v1379);
                      v1396 = v307 + 1;
                      do
                      {
                        *(_DWORD *)(v1383 + v1394) = *(_DWORD *)(v1393 + v1394) << v1395;
                        --v1396;
                        v1394 += 4;
                      }
                      while (v1396 > 1);
                      v1390 = v150[1];
                    }
                    v1380 += v1386;
                    v1379 += v1389;
                    v1383 += 4 * (int)v307;
                    ++v1392;
                    v1393 += 4 * v1386;
                  }
                  while (v1392 < v1390);
                  v1397 = v1390;
                  v1377 = *v150;
                  v1391 = v1390;
                }
                else
                {
                  v1397 = 0;
                }
                v1380 = v1380 + v1385 - v1397 * v1386;
                v1379 = v1379 + v1388 - v1389 * v237[1];
                ++v1378;
              }
              while (v1378 < v1377);
            }
          }
          else if (v155 == 1)
          {
            v886 = *v150;
            if (*v150)
            {
              v887 = 0;
              v888 = 0;
              v889 = v149[19];
              v890 = v236[19];
              v891 = v148[19];
              v892 = *(_QWORD *)v236[3];
              v893 = 4 * *(_QWORD *)v149[3];
              do
              {
                if ((int)v307 >= 1)
                {
                  v894 = 0;
                  v895 = *(_DWORD *)(v890 + 4 * v888);
                  v896 = v307 + 1;
                  do
                  {
                    *(_DWORD *)(v891 + v894) = *(_DWORD *)(v889 + v894) << v895;
                    --v896;
                    v894 += 4;
                  }
                  while (v896 > 1);
                  v886 = *v150;
                }
                v888 += v892;
                ++v887;
                v891 += 4 * (int)v307;
                v889 += v893;
              }
              while (v887 < v886);
            }
          }
          else
          {
            v1534 = v148[6];
            if (v1534)
            {
              v1554 = 0;
              v1491 = v236[19];
              v1500 = v149[19];
              v1398 = v148[19];
              do
              {
                v1399 = 0;
                if ((v152 & 0x80000000) == 0)
                {
                  v1400 = v149[3];
                  v1401 = v152;
                  v1402 = v1554;
                  do
                  {
                    v1403 = ldiv(v1402, v150[v1401]);
                    v1402 = v1403.quot;
                    v1399 += *(_QWORD *)(v1400 + 8 * v1401--) * v1403.rem;
                  }
                  while (v1401 != -1);
                }
                v1404 = v1558;
                if ((v1558 & 0x80000000) != 0)
                {
                  LODWORD(v1405) = 0;
                }
                else
                {
                  v1405 = 0;
                  v1406 = v236[3];
                  v1407 = v1554;
                  do
                  {
                    v1408 = ldiv(v1407, v237[v1404]);
                    v1407 = v1408.quot;
                    v1405 += *(_QWORD *)(v1406 + 8 * v1404--) * v1408.rem;
                  }
                  while (v1404 != -1);
                }
                v152 = v1576;
                if ((int)v307 >= 1)
                {
                  v1409 = 0;
                  v1410 = *(_DWORD *)(v1491 + 4 * (int)v1405);
                  v1411 = v307 + 1;
                  do
                  {
                    *(_DWORD *)(v1398 + v1409) = *(_DWORD *)(v1500 + 4 * (int)v1399 + v1409) << v1410;
                    --v1411;
                    v1409 += 4;
                  }
                  while (v1411 > 1);
                }
                v1398 += 4 * (int)v307;
                v1554 += (int)v307;
              }
              while (v1554 < v1534);
            }
          }
          break;
        case 3:
          if (v155 == 2)
          {
            v1100 = *v150;
            if (*v150)
            {
              v1101 = 0;
              v1102 = 0;
              v1103 = 0;
              v1104 = v149[19];
              v1105 = v236[19];
              v1106 = v148[19];
              v1107 = (uint64_t *)v149[3];
              v1108 = *v1107;
              v1109 = v1107[1];
              v1110 = (uint64_t *)v236[3];
              v1111 = *v1110;
              v1112 = v1110[1];
              v1113 = v150[1];
              v1114 = v1113;
              do
              {
                if (v1114)
                {
                  v1115 = 0;
                  v1116 = v1105 + 4 * v1102;
                  v1117 = v1104 + 4 * v1103;
                  do
                  {
                    if ((int)v307 >= 1)
                    {
                      v1118 = 0;
                      v1119 = v307 + 1;
                      do
                      {
                        *(_DWORD *)(v1106 + v1118) = *(_DWORD *)(v1117 + v1118) << *(_DWORD *)(v1116 + v1118);
                        --v1119;
                        v1118 += 4;
                      }
                      while (v1119 > 1);
                      v1113 = v150[1];
                    }
                    v1103 += v1109;
                    v1102 += v1112;
                    v1106 += 4 * (int)v307;
                    ++v1115;
                    v1116 += 4 * v1112;
                    v1117 += 4 * v1109;
                  }
                  while (v1115 < v1113);
                  v1120 = v1113;
                  v1100 = *v150;
                  v1114 = v1113;
                }
                else
                {
                  v1120 = 0;
                }
                v1103 = v1103 + v1108 - v1120 * v1109;
                v1102 = v1102 + v1111 - v1112 * v237[1];
                ++v1101;
              }
              while (v1101 < v1100);
            }
          }
          else if (v155 == 1)
          {
            v350 = *v150;
            if (*v150)
            {
              v351 = 0;
              v352 = v149[19];
              v353 = v236[19];
              v354 = v148[19];
              v355 = 4 * *(_QWORD *)v236[3];
              v356 = 4 * *(_QWORD *)v149[3];
              do
              {
                if ((int)v307 >= 1)
                {
                  v357 = 0;
                  v358 = v307 + 1;
                  do
                  {
                    *(_DWORD *)(v354 + v357) = *(_DWORD *)(v352 + v357) << *(_DWORD *)(v353 + v357);
                    --v358;
                    v357 += 4;
                  }
                  while (v358 > 1);
                  v350 = *v150;
                }
                ++v351;
                v354 += 4 * (int)v307;
                v353 += v355;
                v352 += v356;
              }
              while (v351 < v350);
            }
          }
          else
          {
            v1526 = v148[6];
            if (v1526)
            {
              v1544 = 0;
              v1486 = v236[19];
              v1495 = v149[19];
              v1121 = v148[19];
              do
              {
                v1122 = 0;
                if ((v152 & 0x80000000) == 0)
                {
                  v1123 = v149[3];
                  v1124 = v152;
                  v1125 = v1544;
                  do
                  {
                    v1126 = ldiv(v1125, v150[v1124]);
                    v1125 = v1126.quot;
                    v1122 += *(_QWORD *)(v1123 + 8 * v1124--) * v1126.rem;
                  }
                  while (v1124 != -1);
                }
                v1127 = v1558;
                if ((v1558 & 0x80000000) != 0)
                {
                  LODWORD(v1128) = 0;
                }
                else
                {
                  v1128 = 0;
                  v1129 = v236[3];
                  v1130 = v1544;
                  do
                  {
                    v1131 = ldiv(v1130, v237[v1127]);
                    v1130 = v1131.quot;
                    v1128 += *(_QWORD *)(v1129 + 8 * v1127--) * v1131.rem;
                  }
                  while (v1127 != -1);
                }
                v152 = v1576;
                if ((int)v307 >= 1)
                {
                  v1132 = 0;
                  v1133 = v307 + 1;
                  do
                  {
                    *(_DWORD *)(v1121 + v1132) = *(_DWORD *)(v1495 + 4 * (int)v1122 + v1132) << *(_DWORD *)(v1486 + 4 * (int)v1128 + v1132);
                    --v1133;
                    v1132 += 4;
                  }
                  while (v1133 > 1);
                }
                v1121 += 4 * (int)v307;
                v1544 += (int)v307;
              }
              while (v1544 < v1526);
            }
          }
          break;
        default:
LABEL_351:
          switch(v303)
          {
            case 1uLL:
              v308 = v148[6];
              if (v308)
              {
                v309 = (_DWORD *)v149[19];
                v310 = (_DWORD *)v236[19];
                v311 = (_DWORD *)v148[19];
                v312 = 4 * *(_QWORD *)v236[3];
                v313 = 4 * *(_QWORD *)v149[3];
                do
                {
                  *v311++ = *v309 << *v310;
                  v310 = (_DWORD *)((char *)v310 + v312);
                  v309 = (_DWORD *)((char *)v309 + v313);
                  --v308;
                }
                while (v308);
              }
              break;
            case 2uLL:
              v673 = *v150;
              if (*v150)
              {
                v674 = 0;
                v675 = 0;
                v676 = 0;
                v677 = 0;
                v678 = v149[19];
                v679 = v236[19];
                v680 = v148[19];
                v681 = (uint64_t *)v149[3];
                v682 = *v681;
                v683 = v681[1];
                v684 = (uint64_t *)v236[3];
                v686 = *v684;
                v685 = v684[1];
                v687 = v150[1];
                do
                {
                  if (v687)
                  {
                    for (m = 0; m < v687; ++m)
                    {
                      *(_DWORD *)(v680 + 4 * v675 + 4 * m) = *(_DWORD *)(v678 + 4 * v677) << *(_DWORD *)(v679 + 4 * v676);
                      v677 += v683;
                      v676 += v685;
                      v687 = v150[1];
                    }
                    v689 = v687;
                    v673 = *v150;
                    v675 += m;
                  }
                  else
                  {
                    v689 = 0;
                  }
                  v677 = v677 + v682 - v689 * v683;
                  v676 = v676 + v686 - v685 * v237[1];
                  ++v674;
                }
                while (v674 < v673);
              }
              break;
            case 3uLL:
              v690 = *v150;
              if (*v150)
              {
                v691 = 0;
                v692 = 0;
                v693 = 0;
                v694 = 0;
                v695 = v149[19];
                v696 = v236[19];
                v697 = v148[19];
                v698 = (uint64_t *)v149[3];
                v699 = *v698;
                v700 = v698[1];
                v701 = (uint64_t *)v236[3];
                v702 = *v701;
                v703 = v701[1];
                v704 = v150[1];
                v705 = v704;
                do
                {
                  if (v705)
                  {
                    v706 = 0;
                    v707 = v698[2];
                    v708 = v701[2];
                    v709 = v150[2];
                    do
                    {
                      if (v709)
                      {
                        for (n = 0; n < v709; ++n)
                        {
                          *(_DWORD *)(v697 + 4 * v692 + 4 * n) = *(_DWORD *)(v695 + 4 * v694) << *(_DWORD *)(v696 + 4 * v693);
                          v694 += v707;
                          v693 += v708;
                          v709 = v150[2];
                        }
                        v711 = v709;
                        v704 = v150[1];
                        v692 += n;
                      }
                      else
                      {
                        v711 = 0;
                      }
                      v694 = v694 + v700 - v711 * v707;
                      v693 = v693 + v703 - v708 * v237[2];
                      ++v706;
                    }
                    while (v706 < v704);
                    v712 = v704;
                    v690 = *v150;
                    v705 = v704;
                  }
                  else
                  {
                    v712 = 0;
                  }
                  v694 = v694 + v699 - v712 * v700;
                  v693 = v693 + v702 - v703 * v237[1];
                  ++v691;
                }
                while (v691 < v690);
              }
              break;
            case 4uLL:
              v713 = *v150;
              if (*v150)
              {
                v714 = 0;
                v715 = 0;
                v716 = 0;
                v717 = 0;
                v718 = v149[19];
                v719 = v236[19];
                v720 = v148[19];
                v721 = (uint64_t *)v149[3];
                v722 = *v721;
                v723 = v721[1];
                v724 = (uint64_t *)v236[3];
                v725 = *v724;
                v726 = v724[1];
                v727 = v150[1];
                v728 = v727;
                do
                {
                  if (v728)
                  {
                    v729 = 0;
                    v730 = v721[2];
                    v731 = v724[2];
                    v732 = v150[2];
                    v733 = v732;
                    do
                    {
                      if (v733)
                      {
                        v734 = 0;
                        v735 = v721[3];
                        v736 = v724[3];
                        v737 = v150[3];
                        do
                        {
                          if (v737)
                          {
                            for (ii = 0; ii < v737; ++ii)
                            {
                              *(_DWORD *)(v720 + 4 * v715 + 4 * ii) = *(_DWORD *)(v718 + 4 * v717) << *(_DWORD *)(v719 + 4 * v716);
                              v717 += v735;
                              v716 += v736;
                              v737 = v150[3];
                            }
                            v739 = v737;
                            v732 = v150[2];
                            v715 += ii;
                          }
                          else
                          {
                            v739 = 0;
                          }
                          v717 = v717 + v730 - v739 * v735;
                          v716 = v716 + v731 - v736 * v237[3];
                          ++v734;
                        }
                        while (v734 < v732);
                        v740 = v732;
                        v727 = v150[1];
                        v733 = v732;
                      }
                      else
                      {
                        v740 = 0;
                      }
                      v717 = v717 + v723 - v740 * v730;
                      v716 = v716 + v726 - v731 * v237[2];
                      ++v729;
                    }
                    while (v729 < v727);
                    v741 = v727;
                    v713 = *v150;
                    v728 = v727;
                  }
                  else
                  {
                    v741 = 0;
                  }
                  v717 = v717 + v722 - v741 * v723;
                  v716 = v716 + v725 - v726 * v237[1];
                  ++v714;
                }
                while (v714 < v713);
              }
              break;
            default:
              v661 = v148[6];
              if (v661)
              {
                v662 = 0;
                v1518 = v236[19];
                v1538 = v149[19];
                v1508 = v148[19];
                do
                {
                  v663 = 0;
                  if ((v152 & 0x80000000) == 0)
                  {
                    v664 = v149[3];
                    v665 = v152;
                    v666 = v662;
                    do
                    {
                      v667 = ldiv(v666, v150[v665]);
                      v666 = v667.quot;
                      v663 += *(_QWORD *)(v664 + 8 * v665--) * v667.rem;
                    }
                    while (v665 != -1);
                  }
                  v668 = v1558;
                  if ((v1558 & 0x80000000) != 0)
                  {
                    LODWORD(v669) = 0;
                  }
                  else
                  {
                    v669 = 0;
                    v670 = v236[3];
                    v671 = v662;
                    do
                    {
                      v672 = ldiv(v671, v237[v668]);
                      v671 = v672.quot;
                      v669 += *(_QWORD *)(v670 + 8 * v668--) * v672.rem;
                    }
                    while (v668 != -1);
                  }
                  *(_DWORD *)(v1508 + 4 * v662++) = *(_DWORD *)(v1538 + 4 * (int)v663) << *(_DWORD *)(v1518 + 4 * (int)v669);
                  v152 = v1576;
                }
                while (v662 != v661);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      v22 = *(uint64_t **)a1;
      v21 = *(uint64_t **)(a1 + 8);
      switch(v23)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)v1 + 152) = **(_QWORD **)(*v22 + 152) << **(_QWORD **)(*v21 + 152);
          return;
        case 1:
          v186 = *(_DWORD *)(*v21 + 160);
          if (v186 >= 1)
          {
            v187 = **(_QWORD **)(*v22 + 152);
            v188 = *(_QWORD **)(*(_QWORD *)v1 + 152);
            v189 = *(uint64_t **)(*v21 + 152);
            v190 = v186 + 1;
            do
            {
              v191 = *v189++;
              *v188++ = v187 << v191;
              --v190;
            }
            while (v190 > 1);
          }
          return;
        case 2:
          v192 = *(_DWORD *)(*v22 + 160);
          if (v192 >= 1)
          {
            v193 = **(_QWORD **)(*v21 + 152);
            v194 = *(_QWORD **)(*(_QWORD *)v1 + 152);
            v195 = *(uint64_t **)(*v22 + 152);
            v196 = v192 + 1;
            do
            {
              v197 = *v195++;
              *v194++ = v197 << v193;
              --v196;
            }
            while (v196 > 1);
          }
          return;
        case 3:
          v198 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v198 >= 1)
          {
            v199 = *(_QWORD **)(*(_QWORD *)v1 + 152);
            v200 = *(uint64_t **)(*v21 + 152);
            v201 = *(uint64_t **)(*v22 + 152);
            v202 = v198 + 1;
            do
            {
              v204 = *v201++;
              v203 = v204;
              v205 = *v200++;
              *v199++ = v203 << v205;
              --v202;
            }
            while (v202 > 1);
          }
          return;
        default:
          v177 = *(_QWORD **)v1;
          v178 = (_QWORD *)*v22;
          v179 = *(int **)*v22;
          v180 = (v178[1] - (_QWORD)v179) >> 2;
          v181 = (v180 - 1);
          if ((int)v181 >= -1)
            v182 = -1;
          else
            v182 = v180 - 1;
          v183 = v182 + 1;
          v184 = v180 + 1;
          break;
      }
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](exception, "[BitwiseBinary::eval_cpu] Type not supported");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  while (1)
  {
    v185 = v184 - 2;
    if (v184 - 2 < 0)
      break;
    --v184;
    if (*(_QWORD *)(v178[3] + 8 * v185) != *(_QWORD *)(v177[3] + 8 * v185))
      goto LABEL_207;
  }
  v184 = v183;
LABEL_207:
  v244 = (_QWORD *)*v21;
  v245 = *(int **)*v21;
  v246 = (v244[1] - (_QWORD)v245) >> 2;
  v247 = (v246 - 1);
  if ((int)v247 >= -1)
    v248 = -1;
  else
    v248 = v246 - 1;
  v249 = v248 + 1;
  v250 = v246 + 1;
  while (1)
  {
    v251 = v250 - 2;
    if (v250 - 2 < 0)
      break;
    --v250;
    if (*(_QWORD *)(v244[3] + 8 * v251) != *(_QWORD *)(v177[3] + 8 * v251))
      goto LABEL_235;
  }
  v250 = v249;
LABEL_235:
  v260 = v180 + 1;
  while (1)
  {
    v261 = v260 - 2;
    if (v260 - 2 < 0)
      break;
    --v260;
    if (*(_QWORD *)(v178[3] + 8 * v261))
      goto LABEL_260;
  }
  v260 = v183;
LABEL_260:
  v270 = v246 + 1;
  while (1)
  {
    v271 = v270 - 2;
    if (v270 - 2 < 0)
      break;
    --v270;
    if (*(_QWORD *)(v244[3] + 8 * v271))
      goto LABEL_357;
  }
  v270 = v249;
LABEL_357:
  v314 = (uint64_t)(v177[1] - *v177) >> 2;
  if (v184 <= v250)
    v315 = v250;
  else
    v315 = v184;
  if (v184 <= v270)
    v184 = v270;
  if (v260 > v250)
    v250 = v260;
  if (v314 > v250)
  {
    v316 = 1;
  }
  else
  {
    v250 = (uint64_t)(v177[1] - *v177) >> 2;
    v316 = 4;
  }
  if (v314 > v184)
  {
    v317 = 2;
  }
  else
  {
    v184 = v250;
    v317 = v316;
  }
  if (v314 > v315)
  {
    v184 = v315;
    v317 = 3;
  }
  v1559 = v247;
  v1577 = v181;
  if (!v184)
    goto LABEL_374;
  v318 = *(_QWORD *)(v177[3] + 8 * (v184 - 1));
  if (v318 < 0x10)
    goto LABEL_374;
  switch(v317)
  {
    case 1:
      if (v184 == 2)
      {
        v1412 = *v179;
        if ((_DWORD)v1412)
        {
          v1413 = 0;
          v1414 = 0;
          v1415 = 0;
          v1416 = v178[19];
          v1417 = v244[19];
          v1418 = v177[19];
          v1419 = v179[1];
          v1420 = (uint64_t *)v178[3];
          v1421 = *v1420;
          v1422 = v1420[1];
          v1423 = (uint64_t *)v244[3];
          v1424 = *v1423;
          v1425 = v1423[1];
          if (v1419 <= 1)
            v1426 = 1;
          else
            v1426 = v179[1];
          v1427 = v1421 - v1422 * v1419;
          v1428 = v1424 - v1425 * v245[1];
          do
          {
            if ((_DWORD)v1419)
            {
              v1429 = 0;
              v1430 = v1417 + 8 * v1414;
              do
              {
                if ((int)v318 >= 1)
                {
                  v1431 = 0;
                  v1432 = *(_QWORD *)(v1416 + 8 * v1415);
                  v1433 = v318 + 1;
                  do
                  {
                    *(_QWORD *)(v1418 + v1431) = v1432 << *(_QWORD *)(v1430 + v1431);
                    --v1433;
                    v1431 += 8;
                  }
                  while (v1433 > 1);
                }
                v1415 += v1422;
                v1414 += v1425;
                v1418 += 8 * (int)v318;
                ++v1429;
                v1430 += 8 * v1425;
              }
              while (v1429 != v1426);
            }
            v1415 += v1427;
            v1414 += v1428;
            ++v1413;
          }
          while (v1413 != v1412);
        }
      }
      else if (v184 == 1)
      {
        v897 = *v179;
        if ((_DWORD)v897)
        {
          v898 = 0;
          v899 = 0;
          v900 = v178[19];
          v901 = v244[19];
          v902 = v177[19];
          v903 = *(_QWORD *)v178[3];
          v904 = 8 * *(_QWORD *)v244[3];
          do
          {
            if ((int)v318 >= 1)
            {
              v905 = 0;
              v906 = *(_QWORD *)(v900 + 8 * v899);
              v907 = v318 + 1;
              do
              {
                *(_QWORD *)(v902 + v905) = v906 << *(_QWORD *)(v901 + v905);
                --v907;
                v905 += 8;
              }
              while (v907 > 1);
            }
            v899 += v903;
            ++v898;
            v902 += 8 * (int)v318;
            v901 += v904;
          }
          while (v898 != v897);
        }
      }
      else
      {
        v1535 = v177[6];
        if (v1535)
        {
          v1555 = 0;
          v1492 = v244[19];
          v1501 = v178[19];
          v1434 = v177[19];
          do
          {
            v1435 = 0;
            if ((v181 & 0x80000000) == 0)
            {
              v1436 = v178[3];
              v1437 = v181;
              v1438 = v1555;
              do
              {
                v1439 = ldiv(v1438, v179[v1437]);
                v1438 = v1439.quot;
                v1435 += *(_QWORD *)(v1436 + 8 * v1437--) * v1439.rem;
              }
              while (v1437 != -1);
            }
            v1440 = v1559;
            if ((v1559 & 0x80000000) != 0)
            {
              LODWORD(v1441) = 0;
            }
            else
            {
              v1441 = 0;
              v1442 = v244[3];
              v1443 = v1555;
              do
              {
                v1444 = ldiv(v1443, v245[v1440]);
                v1443 = v1444.quot;
                v1441 += *(_QWORD *)(v1442 + 8 * v1440--) * v1444.rem;
              }
              while (v1440 != -1);
            }
            v181 = v1577;
            if ((int)v318 >= 1)
            {
              v1445 = 0;
              v1446 = *(_QWORD *)(v1501 + 8 * (int)v1435);
              v1447 = v318 + 1;
              do
              {
                *(_QWORD *)(v1434 + v1445) = v1446 << *(_QWORD *)(v1492 + 8 * (int)v1441 + v1445);
                --v1447;
                v1445 += 8;
              }
              while (v1447 > 1);
            }
            v1434 += 8 * (int)v318;
            v1555 += (int)v318;
          }
          while (v1555 < v1535);
        }
      }
      break;
    case 2:
      if (v184 == 2)
      {
        v1448 = *v179;
        if ((_DWORD)v1448)
        {
          v1449 = 0;
          v1450 = 0;
          v1451 = 0;
          v1452 = v178[19];
          v1453 = v244[19];
          v1454 = v177[19];
          v1455 = v179[1];
          v1456 = (uint64_t *)v178[3];
          v1457 = *v1456;
          v1458 = v1456[1];
          v1459 = (uint64_t *)v244[3];
          v1460 = *v1459;
          v1461 = v1459[1];
          if (v1455 <= 1)
            v1462 = 1;
          else
            v1462 = v179[1];
          v1463 = v1457 - v1458 * v1455;
          v1464 = v1460 - v1461 * v245[1];
          do
          {
            if ((_DWORD)v1455)
            {
              v1465 = 0;
              v1466 = v1452 + 8 * v1451;
              do
              {
                if ((int)v318 >= 1)
                {
                  v1467 = 0;
                  v1468 = *(_QWORD *)(v1453 + 8 * v1450);
                  v1469 = v318 + 1;
                  do
                  {
                    *(_QWORD *)(v1454 + v1467) = *(_QWORD *)(v1466 + v1467) << v1468;
                    --v1469;
                    v1467 += 8;
                  }
                  while (v1469 > 1);
                }
                v1451 += v1458;
                v1450 += v1461;
                v1454 += 8 * (int)v318;
                ++v1465;
                v1466 += 8 * v1458;
              }
              while (v1465 != v1462);
            }
            v1451 += v1463;
            v1450 += v1464;
            ++v1449;
          }
          while (v1449 != v1448);
        }
      }
      else if (v184 == 1)
      {
        v908 = *v179;
        if ((_DWORD)v908)
        {
          v909 = 0;
          v910 = 0;
          v911 = v178[19];
          v912 = v244[19];
          v913 = v177[19];
          v914 = *(_QWORD *)v244[3];
          v915 = 8 * *(_QWORD *)v178[3];
          do
          {
            if ((int)v318 >= 1)
            {
              v916 = 0;
              v917 = *(_QWORD *)(v912 + 8 * v910);
              v918 = v318 + 1;
              do
              {
                *(_QWORD *)(v913 + v916) = *(_QWORD *)(v911 + v916) << v917;
                --v918;
                v916 += 8;
              }
              while (v918 > 1);
            }
            v910 += v914;
            ++v909;
            v913 += 8 * (int)v318;
            v911 += v915;
          }
          while (v909 != v908);
        }
      }
      else
      {
        v1536 = v177[6];
        if (v1536)
        {
          v1556 = 0;
          v1493 = v244[19];
          v1502 = v178[19];
          v1470 = v177[19];
          do
          {
            v1471 = 0;
            if ((v181 & 0x80000000) == 0)
            {
              v1472 = v178[3];
              v1473 = v181;
              v1474 = v1556;
              do
              {
                v1475 = ldiv(v1474, v179[v1473]);
                v1474 = v1475.quot;
                v1471 += *(_QWORD *)(v1472 + 8 * v1473--) * v1475.rem;
              }
              while (v1473 != -1);
            }
            v1476 = v1559;
            if ((v1559 & 0x80000000) != 0)
            {
              LODWORD(v1477) = 0;
            }
            else
            {
              v1477 = 0;
              v1478 = v244[3];
              v1479 = v1556;
              do
              {
                v1480 = ldiv(v1479, v245[v1476]);
                v1479 = v1480.quot;
                v1477 += *(_QWORD *)(v1478 + 8 * v1476--) * v1480.rem;
              }
              while (v1476 != -1);
            }
            v181 = v1577;
            if ((int)v318 >= 1)
            {
              v1481 = 0;
              v1482 = *(_QWORD *)(v1493 + 8 * (int)v1477);
              v1483 = v318 + 1;
              do
              {
                *(_QWORD *)(v1470 + v1481) = *(_QWORD *)(v1502 + 8 * (int)v1471 + v1481) << v1482;
                --v1483;
                v1481 += 8;
              }
              while (v1483 > 1);
            }
            v1470 += 8 * (int)v318;
            v1556 += (int)v318;
          }
          while (v1556 < v1536);
        }
      }
      break;
    case 3:
      if (v184 == 2)
      {
        v1134 = *v179;
        if ((_DWORD)v1134)
        {
          v1135 = 0;
          v1136 = 0;
          v1137 = 0;
          v1138 = v178[19];
          v1139 = v244[19];
          v1140 = v177[19];
          v1141 = v179[1];
          v1142 = (uint64_t *)v178[3];
          v1143 = *v1142;
          v1144 = v1142[1];
          v1145 = (uint64_t *)v244[3];
          v1146 = *v1145;
          v1147 = v1145[1];
          if (v1141 <= 1)
            v1148 = 1;
          else
            v1148 = v179[1];
          v1149 = v1143 - v1144 * v1141;
          v1150 = v1146 - v1147 * v245[1];
          do
          {
            if ((_DWORD)v1141)
            {
              v1151 = 0;
              v1152 = v1139 + 8 * v1136;
              v1153 = v1138 + 8 * v1137;
              do
              {
                if ((int)v318 >= 1)
                {
                  v1154 = 0;
                  v1155 = v318 + 1;
                  do
                  {
                    *(_QWORD *)(v1140 + v1154) = *(_QWORD *)(v1153 + v1154) << *(_QWORD *)(v1152 + v1154);
                    --v1155;
                    v1154 += 8;
                  }
                  while (v1155 > 1);
                }
                v1137 += v1144;
                v1136 += v1147;
                v1140 += 8 * (int)v318;
                ++v1151;
                v1152 += 8 * v1147;
                v1153 += 8 * v1144;
              }
              while (v1151 != v1148);
            }
            v1137 += v1149;
            v1136 += v1150;
            ++v1135;
          }
          while (v1135 != v1134);
        }
      }
      else if (v184 == 1)
      {
        v359 = *v179;
        if ((_DWORD)v359)
        {
          v360 = 0;
          v361 = v178[19];
          v362 = v244[19];
          v363 = v177[19];
          v364 = 8 * *(_QWORD *)v244[3];
          v365 = 8 * *(_QWORD *)v178[3];
          do
          {
            if ((int)v318 >= 1)
            {
              v366 = 0;
              v367 = v318 + 1;
              do
              {
                *(_QWORD *)(v363 + v366) = *(_QWORD *)(v361 + v366) << *(_QWORD *)(v362 + v366);
                --v367;
                v366 += 8;
              }
              while (v367 > 1);
            }
            ++v360;
            v363 += 8 * (int)v318;
            v362 += v364;
            v361 += v365;
          }
          while (v360 != v359);
        }
      }
      else
      {
        v1527 = v177[6];
        if (v1527)
        {
          v1545 = 0;
          v1487 = v244[19];
          v1496 = v178[19];
          v1156 = v177[19];
          do
          {
            v1157 = 0;
            if ((v181 & 0x80000000) == 0)
            {
              v1158 = v178[3];
              v1159 = v181;
              v1160 = v1545;
              do
              {
                v1161 = ldiv(v1160, v179[v1159]);
                v1160 = v1161.quot;
                v1157 += *(_QWORD *)(v1158 + 8 * v1159--) * v1161.rem;
              }
              while (v1159 != -1);
            }
            v1162 = v1559;
            if ((v1559 & 0x80000000) != 0)
            {
              LODWORD(v1163) = 0;
            }
            else
            {
              v1163 = 0;
              v1164 = v244[3];
              v1165 = v1545;
              do
              {
                v1166 = ldiv(v1165, v245[v1162]);
                v1165 = v1166.quot;
                v1163 += *(_QWORD *)(v1164 + 8 * v1162--) * v1166.rem;
              }
              while (v1162 != -1);
            }
            v181 = v1577;
            if ((int)v318 >= 1)
            {
              v1167 = 0;
              v1168 = v318 + 1;
              do
              {
                *(_QWORD *)(v1156 + v1167) = *(_QWORD *)(v1496 + 8 * (int)v1157 + v1167) << *(_QWORD *)(v1487 + 8 * (int)v1163 + v1167);
                --v1168;
                v1167 += 8;
              }
              while (v1168 > 1);
            }
            v1156 += 8 * (int)v318;
            v1545 += (int)v318;
          }
          while (v1545 < v1527);
        }
      }
      break;
    default:
LABEL_374:
      switch(v314)
      {
        case 1uLL:
          v319 = v177[6];
          if (v319)
          {
            v320 = (_QWORD *)v178[19];
            v321 = (_QWORD *)v244[19];
            v322 = (_QWORD *)v177[19];
            v323 = 8 * *(_QWORD *)v244[3];
            v324 = 8 * *(_QWORD *)v178[3];
            do
            {
              *v322++ = *v320 << *v321;
              v321 = (_QWORD *)((char *)v321 + v323);
              v320 = (_QWORD *)((char *)v320 + v324);
              --v319;
            }
            while (v319);
          }
          break;
        case 2uLL:
          v754 = *v179;
          if ((_DWORD)v754)
          {
            v755 = 0;
            v756 = 0;
            v757 = 0;
            v758 = 0;
            v759 = v178[19];
            v760 = v244[19];
            v761 = v177[19];
            v762 = v179[1];
            v763 = (uint64_t *)v178[3];
            v764 = *v763;
            v765 = v763[1];
            v766 = (uint64_t *)v244[3];
            v767 = *v766;
            v768 = v766[1];
            v769 = v767 - v768 * v245[1];
            if (v762 <= 1)
              v770 = 1;
            else
              v770 = v179[1];
            v771 = v764 - v765 * v762;
            do
            {
              if ((_DWORD)v762)
              {
                v772 = v756 + v770;
                v773 = (_QWORD *)(v761 + 8 * v756);
                v774 = v770;
                do
                {
                  *v773++ = *(_QWORD *)(v759 + 8 * v758) << *(_QWORD *)(v760 + 8 * v757);
                  v758 += v765;
                  v757 += v768;
                  --v774;
                }
                while (v774);
                v756 = v772;
              }
              v758 += v771;
              v757 += v769;
              ++v755;
            }
            while (v755 != v754);
          }
          break;
        case 3uLL:
          v775 = *v179;
          if ((_DWORD)v775)
          {
            v776 = 0;
            v777 = 0;
            v778 = 0;
            v779 = 0;
            v780 = v178[19];
            v781 = v244[19];
            v782 = v177[19];
            v783 = v179[1];
            v784 = (_QWORD *)v178[3];
            v785 = v784[1];
            v786 = (_QWORD *)v244[3];
            v787 = v786[1];
            v788 = *v786 - v787 * v245[1];
            if (v783 <= 1)
              v789 = 1;
            else
              v789 = v179[1];
            v790 = *v784 - v785 * v783;
            do
            {
              if ((_DWORD)v783)
              {
                v791 = 0;
                v792 = v179[2];
                v793 = v784[2];
                v794 = v786[2];
                if (v792 <= 1)
                  v795 = 1;
                else
                  v795 = v179[2];
                v796 = v787 - v794 * v245[2];
                do
                {
                  v797 = v795;
                  if ((_DWORD)v792)
                  {
                    do
                    {
                      *(_QWORD *)(v782 + 8 * v777++) = *(_QWORD *)(v780 + 8 * v779) << *(_QWORD *)(v781 + 8 * v778);
                      v779 += v793;
                      v778 += v794;
                      --v797;
                    }
                    while (v797);
                  }
                  v779 += v785 - v793 * v792;
                  v778 += v796;
                  ++v791;
                }
                while (v791 != v789);
              }
              v779 += v790;
              v778 += v788;
              ++v776;
            }
            while (v776 != v775);
          }
          break;
        case 4uLL:
          v1580 = *v179;
          if ((_DWORD)v1580)
          {
            v798 = 0;
            v799 = 0;
            v800 = 0;
            v801 = 0;
            v802 = v178[19];
            v803 = v244[19];
            v804 = v177[19];
            v805 = v179[1];
            v806 = (_QWORD *)v178[3];
            v807 = (_QWORD *)v244[3];
            v1503 = v807[1];
            v1510 = v806[1];
            v1540 = *v807 - v1503 * v245[1];
            v1562 = v179[1];
            if (v805 <= 1)
              v808 = 1;
            else
              v808 = v179[1];
            v1520 = *v806 - v806[1] * v805;
            do
            {
              if (v1562)
              {
                v809 = 0;
                v810 = v179[2];
                v811 = v806[2];
                v812 = v807[2];
                if (v810 <= 1)
                  v813 = 1;
                else
                  v813 = v179[2];
                v814 = v1503 - v812 * v245[2];
                do
                {
                  if ((_DWORD)v810)
                  {
                    v815 = 0;
                    v816 = v179[3];
                    v817 = v806[3];
                    v818 = v807[3];
                    if (v816 <= 1)
                      v819 = 1;
                    else
                      v819 = v179[3];
                    v820 = v812 - v818 * v245[3];
                    do
                    {
                      v821 = v819;
                      if ((_DWORD)v816)
                      {
                        do
                        {
                          *(_QWORD *)(v804 + 8 * v799++) = *(_QWORD *)(v802 + 8 * v801) << *(_QWORD *)(v803 + 8 * v800);
                          v801 += v817;
                          v800 += v818;
                          --v821;
                        }
                        while (v821);
                      }
                      v801 += v811 - v817 * v816;
                      v800 += v820;
                      ++v815;
                    }
                    while (v815 != v813);
                  }
                  v801 += v1510 - v811 * v810;
                  v800 += v814;
                  ++v809;
                }
                while (v809 != v808);
              }
              v801 += v1520;
              v800 += v1540;
              ++v798;
            }
            while (v798 != v1580);
          }
          break;
        default:
          v742 = v177[6];
          if (v742)
          {
            v743 = 0;
            v1519 = v244[19];
            v1539 = v178[19];
            v1509 = v177[19];
            do
            {
              v744 = 0;
              if ((v181 & 0x80000000) == 0)
              {
                v745 = v178[3];
                v746 = v181;
                v747 = v743;
                do
                {
                  v748 = ldiv(v747, v179[v746]);
                  v747 = v748.quot;
                  v744 += *(_QWORD *)(v745 + 8 * v746--) * v748.rem;
                }
                while (v746 != -1);
              }
              v749 = v1559;
              if ((v1559 & 0x80000000) != 0)
              {
                LODWORD(v750) = 0;
              }
              else
              {
                v750 = 0;
                v751 = v244[3];
                v752 = v743;
                do
                {
                  v753 = ldiv(v752, v245[v749]);
                  v752 = v753.quot;
                  v750 += *(_QWORD *)(v751 + 8 * v749--) * v753.rem;
                }
                while (v749 != -1);
              }
              *(_QWORD *)(v1509 + 8 * v743++) = *(_QWORD *)(v1539 + 8 * (int)v744) << *(_QWORD *)(v1519
                                                                                                  + 8 * (int)v750);
              v181 = v1577;
            }
            while (v743 != v742);
          }
          break;
      }
      return;
  }
}

void sub_2423E31D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BitwiseBinary::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()<mlx::core::detail::RightShift>(uint64_t a1)
{
  mlx::core::array *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int binary_op_type;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  _BYTE *v32;
  char *v33;
  unsigned int v34;
  char v35;
  int v36;
  char v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  mlx::core::array *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  _BYTE *v62;
  char *v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  int v67;
  _BYTE *v68;
  unsigned __int8 *v69;
  char v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  _BYTE *v74;
  _BYTE *v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int **v80;
  int *v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int *v113;
  int *v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int *v124;
  int *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  _QWORD *v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  _BYTE *v140;
  char *v141;
  int v142;
  unsigned int v143;
  char v144;
  int v145;
  _BYTE *v146;
  char *v147;
  char v148;
  unsigned int v149;
  int v150;
  int v151;
  _BYTE *v152;
  _BYTE *v153;
  char *v154;
  unsigned int v155;
  int v156;
  int v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  int *v169;
  int *v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int *v175;
  int *v176;
  unsigned int v177;
  int v178;
  int v179;
  int *v180;
  int *v181;
  int *v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  _QWORD *v187;
  _QWORD *v188;
  int *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD *v225;
  int *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  unsigned int v232;
  _QWORD *v233;
  int *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  int **v241;
  int *v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  unsigned int v247;
  _QWORD *v248;
  int *v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  _QWORD *v256;
  int *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unint64_t v284;
  int v285;
  int v286;
  int v287;
  unint64_t v288;
  uint64_t v289;
  unsigned __int8 *v290;
  _BYTE *v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  int v296;
  int v297;
  int v298;
  unint64_t v299;
  uint64_t v300;
  _DWORD *v301;
  _DWORD *v302;
  _DWORD *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  int v307;
  int v308;
  int v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int *v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  int v320;
  unint64_t v321;
  uint64_t v322;
  int *v323;
  _DWORD *v324;
  int *v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  int v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  _QWORD *v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  int v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  int v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  unint64_t v384;
  int *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  ldiv_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  ldiv_t v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int *v407;
  uint64_t v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  int *v412;
  uint64_t v413;
  unint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  int *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  int v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  int *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  int v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int *v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  unsigned int v460;
  int v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int *v466;
  uint64_t v467;
  uint64_t v468;
  char v469;
  unsigned int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  ldiv_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  ldiv_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _BYTE *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  _QWORD *v534;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  ldiv_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  ldiv_t v561;
  int v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  unint64_t j;
  uint64_t v578;
  int v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  unint64_t k;
  uint64_t v600;
  uint64_t v601;
  int v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  int v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  int v622;
  unint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  unint64_t m;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  ldiv_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  ldiv_t v646;
  int v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int *v653;
  uint64_t v654;
  unint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  int *v658;
  uint64_t v659;
  unint64_t v660;
  int v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int *v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  _QWORD *v671;
  uint64_t v672;
  int *v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  int v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int *v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  int *v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  ldiv_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  int v707;
  ldiv_t v708;
  int v709;
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t *v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  unint64_t n;
  uint64_t v725;
  int v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t *v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  int v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  unint64_t ii;
  uint64_t v747;
  uint64_t v748;
  int v749;
  unint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t *v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  int v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  int v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  unint64_t jj;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  ldiv_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  ldiv_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  _QWORD *v820;
  uint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  _QWORD *v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  unsigned int v867;
  unsigned int v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  char v878;
  unsigned int v879;
  int v880;
  unint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  unsigned int v889;
  unsigned int v890;
  int v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  unsigned int v901;
  int v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int *v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  unsigned int v911;
  int v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int *v917;
  uint64_t v918;
  uint64_t v919;
  char v920;
  unsigned int v921;
  int v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  int v931;
  unsigned int v932;
  int v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  int v942;
  unsigned int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  unsigned int v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unsigned int v965;
  int v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  int *v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  unsigned int v975;
  _QWORD *v976;
  uint64_t v977;
  unint64_t v978;
  uint64_t v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  int v985;
  ldiv_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  ldiv_t v993;
  uint64_t v994;
  unsigned int v995;
  int v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int *v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  unsigned int v1005;
  unsigned int v1006;
  _QWORD *v1007;
  uint64_t v1008;
  unint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  ldiv_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  int v1023;
  ldiv_t v1024;
  uint64_t v1025;
  unsigned int v1026;
  unsigned int v1027;
  int v1028;
  unint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int *v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  char v1037;
  unsigned int v1038;
  _QWORD *v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  int v1048;
  ldiv_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  ldiv_t v1056;
  uint64_t v1057;
  char v1058;
  unsigned int v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unsigned int v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t i;
  ldiv_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  ldiv_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  int v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t *v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t *v1105;
  uint64_t v1106;
  uint64_t v1107;
  int v1108;
  int v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unsigned int v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  int v1120;
  ldiv_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  int v1125;
  ldiv_t v1126;
  uint64_t v1127;
  unsigned int v1128;
  int v1129;
  unint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  int *v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  unsigned int v1138;
  _QWORD *v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  int v1148;
  ldiv_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  ldiv_t v1156;
  uint64_t v1157;
  unsigned int v1158;
  int v1159;
  unint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t *v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  int v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  unsigned int v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  int v1184;
  ldiv_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  int v1189;
  ldiv_t v1190;
  uint64_t v1191;
  unsigned int v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  unint64_t v1200;
  uint64_t *v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unsigned int v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  ldiv_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  int v1224;
  ldiv_t v1225;
  uint64_t v1226;
  unsigned int v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t *v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  unsigned int v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  ldiv_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  int quot;
  ldiv_t v1259;
  uint64_t v1260;
  unsigned int v1261;
  unsigned int v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  uint64_t *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  char v1283;
  unsigned int v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  ldiv_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  ldiv_t v1294;
  uint64_t v1295;
  char v1296;
  unsigned int v1297;
  int v1298;
  unint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t v1310;
  int v1311;
  int v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  unsigned int v1316;
  unsigned int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  int v1323;
  ldiv_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  int v1328;
  ldiv_t v1329;
  uint64_t v1330;
  unsigned int v1331;
  unsigned int v1332;
  int v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t *v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  int v1347;
  unint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int v1351;
  unsigned int v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  int v1358;
  ldiv_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  int v1363;
  ldiv_t v1364;
  uint64_t v1365;
  int v1366;
  unsigned int v1367;
  int v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int *v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  int v1377;
  unsigned int v1378;
  _QWORD *v1379;
  uint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  int v1388;
  ldiv_t v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  ldiv_t v1396;
  uint64_t v1397;
  int v1398;
  unsigned int v1399;
  int v1400;
  unint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  int *v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  char v1409;
  unsigned int v1410;
  _QWORD *v1411;
  uint64_t v1412;
  unint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  ldiv_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  ldiv_t v1428;
  uint64_t v1429;
  char v1430;
  unsigned int v1431;
  int v1432;
  unint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t *v1442;
  uint64_t v1443;
  uint64_t v1444;
  int v1445;
  int v1446;
  unint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  unsigned int v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  int v1457;
  ldiv_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  int v1462;
  ldiv_t v1463;
  uint64_t v1464;
  int v1465;
  unsigned int v1466;
  int v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t *v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t *v1477;
  uint64_t v1478;
  uint64_t v1479;
  int v1480;
  int v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  int v1485;
  unsigned int v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  int v1492;
  ldiv_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  int v1497;
  ldiv_t v1498;
  uint64_t v1499;
  int v1500;
  unsigned int v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t *v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t *v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  unsigned int v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  int v1528;
  ldiv_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  int v1533;
  ldiv_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unsigned int v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  unint64_t v1545;
  uint64_t *v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  unsigned int v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  int v1564;
  ldiv_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  int v1569;
  ldiv_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  unsigned int v1573;
  void *exception;
  unsigned int v1575;
  unsigned int v1576;
  unsigned int v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  unsigned int v1611;
  unint64_t v1612;
  unint64_t v1613;
  unsigned int v1614;
  unsigned int v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  int *v1622;
  int *v1623;
  int *v1624;
  uint64_t v1625;
  int *v1626;
  uint64_t v1627;
  uint64_t v1628;
  int *v1629;
  int *v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unint64_t v1641;
  unint64_t v1642;
  unint64_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  unint64_t v1647;
  unint64_t v1648;
  unint64_t v1649;
  unint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  unint64_t v1658;
  uint64_t v1659;
  unint64_t v1660;
  unint64_t v1661;
  unint64_t v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  unint64_t v1666;
  unint64_t v1667;
  unint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  int v1675;
  int *v1676;
  int v1677;
  unint64_t v1678;
  unint64_t v1679;
  unint64_t v1680;
  unint64_t v1681;
  unint64_t v1682;
  unint64_t v1683;
  mlx::core::array *v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;

  v1 = *(mlx::core::array **)(a1 + 16);
  v2 = a1;
  switch(*(_DWORD *)(*(_QWORD *)v1 + 56))
  {
    case 0:
      v4 = *(uint64_t **)a1;
      v3 = *(uint64_t **)(a1 + 8);
      switch(binary_op_type)
      {
        case 0:
          **(_BYTE **)(*(_QWORD *)v1 + 152) = **(unsigned __int8 **)(*v4 + 152) >> **(_BYTE **)(*v3 + 152);
          goto LABEL_31;
        case 1:
          v30 = *(_DWORD *)(*v3 + 160);
          if (v30 >= 1)
          {
            v31 = **(unsigned __int8 **)(*v4 + 152);
            v32 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v33 = *(char **)(*v3 + 152);
            v34 = v30 + 1;
            do
            {
              v35 = *v33++;
              *v32++ = v31 >> v35;
              --v34;
            }
            while (v34 > 1);
          }
          goto LABEL_31;
        case 2:
          v36 = *(_DWORD *)(*v4 + 160);
          if (v36 >= 1)
          {
            v37 = **(_BYTE **)(*v3 + 152);
            v38 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v39 = *(unsigned __int8 **)(*v4 + 152);
            v40 = v36 + 1;
            do
            {
              v41 = *v39++;
              *v38++ = v41 >> v37;
              --v40;
            }
            while (v40 > 1);
          }
          goto LABEL_31;
        case 3:
          v42 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v42 >= 1)
          {
            v43 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v44 = *(_BYTE **)(*v3 + 152);
            v45 = *(unsigned __int8 **)(*v4 + 152);
            v46 = v42 + 1;
            do
            {
              v48 = *v45++;
              v47 = v48;
              LOBYTE(v48) = *v44++;
              *v43++ = v47 >> v48;
              --v46;
            }
            while (v46 > 1);
          }
          goto LABEL_31;
        default:
          v21 = *(_QWORD **)v1;
          v22 = (_QWORD *)*v4;
          v23 = *(int **)*v4;
          v24 = (v22[1] - (_QWORD)v23) >> 2;
          v25 = (v24 - 1);
          if ((int)v25 >= -1)
            v26 = -1;
          else
            v26 = v24 - 1;
          v27 = v26 + 1;
          v28 = v24 + 1;
          break;
      }
      while (1)
      {
        v29 = v28 - 2;
        if (v28 - 2 < 0)
          break;
        --v28;
        if (*(_QWORD *)(v22[3] + 8 * v29) != *(_QWORD *)(v21[3] + 8 * v29))
          goto LABEL_181;
      }
      v28 = v27;
LABEL_181:
      v225 = (_QWORD *)*v3;
      v226 = *(int **)*v3;
      v227 = (v225[1] - (_QWORD)v226) >> 2;
      v228 = (v227 - 1);
      if ((int)v228 >= -1)
        v229 = -1;
      else
        v229 = v227 - 1;
      v230 = v229 + 1;
      v231 = v227 + 1;
      while (1)
      {
        v232 = v231 - 2;
        if (v231 - 2 < 0)
          break;
        --v231;
        if (*(_QWORD *)(v225[3] + 8 * v232) != *(_QWORD *)(v21[3] + 8 * v232))
          goto LABEL_220;
      }
      v231 = v230;
LABEL_220:
      v264 = v24 + 1;
      while (1)
      {
        v265 = v264 - 2;
        if (v264 - 2 < 0)
          break;
        --v264;
        if (*(_QWORD *)(v22[3] + 8 * v265))
          goto LABEL_245;
      }
      v264 = v27;
LABEL_245:
      v274 = v227 + 1;
      while (1)
      {
        v275 = v274 - 2;
        if (v274 - 2 < 0)
          break;
        --v274;
        if (*(_QWORD *)(v225[3] + 8 * v275))
          goto LABEL_270;
      }
      v274 = v230;
LABEL_270:
      v284 = (uint64_t)(v21[1] - *v21) >> 2;
      if (v28 <= v231)
        v285 = v231;
      else
        v285 = v28;
      if (v28 <= v274)
        v28 = v274;
      if (v264 > v231)
        v231 = v264;
      if (v284 > v231)
      {
        v286 = 1;
      }
      else
      {
        v231 = (uint64_t)(v21[1] - *v21) >> 2;
        v286 = 4;
      }
      if (v284 > v28)
      {
        v287 = 2;
      }
      else
      {
        v28 = v231;
        v287 = v286;
      }
      if (v284 > v285)
      {
        v28 = v285;
        v287 = 3;
      }
      v1670 = v228;
      v1685 = v25;
      if (!v28)
        goto LABEL_287;
      v288 = *(_QWORD *)(v21[3] + 8 * (v28 - 1));
      if (v288 < 0x10)
        goto LABEL_287;
      v1651 = *(_QWORD *)(v21[3] + 8 * (v28 - 1));
      switch(v287)
      {
        case 1:
          if (v28 == 2)
          {
            v1228 = *v23;
            if ((_DWORD)v1228)
            {
              v1229 = 0;
              v1230 = 0;
              v1231 = 0;
              v1232 = v22[19];
              v1233 = v225[19];
              v1234 = v21[19];
              v1235 = v23[1];
              v1236 = (uint64_t *)v22[3];
              v1237 = *v1236;
              v1238 = v1236[1];
              v1239 = (uint64_t *)v225[3];
              v1241 = *v1239;
              v1240 = v1239[1];
              if (v1235 <= 1)
                v1242 = 1;
              else
                v1242 = v23[1];
              v1243 = v1237 - v1238 * v1235;
              v1244 = v1241 - v1240 * v226[1];
              do
              {
                if ((_DWORD)v1235)
                {
                  v1245 = 0;
                  v1246 = v1233 + v1230;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1247 = 0;
                      v1248 = *(unsigned __int8 *)(v1232 + v1231);
                      v1249 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1234 + v1247) = v1248 >> *(_BYTE *)(v1246 + v1247);
                        --v1249;
                        ++v1247;
                      }
                      while (v1249 > 1);
                    }
                    v1231 += v1238;
                    v1230 += v1240;
                    v1234 += (int)v288;
                    ++v1245;
                    v1246 += v1240;
                  }
                  while (v1245 != v1242);
                }
                v1231 += v1243;
                v1230 += v1244;
                ++v1229;
              }
              while (v1229 != v1228);
            }
          }
          else if (v28 == 1)
          {
            v858 = *v23;
            if ((_DWORD)v858)
            {
              v859 = 0;
              v860 = 0;
              v861 = v22[19];
              v862 = v225[19];
              v863 = v21[19];
              v864 = *(_QWORD *)v22[3];
              v865 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v866 = 0;
                  v867 = *(unsigned __int8 *)(v861 + v860);
                  v868 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v863 + v866) = v867 >> *(_BYTE *)(v862 + v866);
                    --v868;
                    ++v866;
                  }
                  while (v868 > 1);
                }
                v860 += v864;
                v863 += (int)v288;
                ++v859;
                v862 += v865;
              }
              while (v859 != v858);
            }
          }
          else
          {
            v1612 = v21[6];
            if (v1612)
            {
              v1250 = 0;
              v1579 = v225[19];
              v1585 = v22[19];
              v1599 = (int)v288;
              v1576 = v288 + 1;
              v1251 = v21[19];
              do
              {
                v1627 = v1250;
                v1252 = 0;
                if ((v25 & 0x80000000) == 0)
                {
                  v1253 = v22[3];
                  do
                  {
                    v1254 = ldiv((int)v1250, v23[v25]);
                    LODWORD(v1250) = v1254.quot;
                    v1252 += *(_QWORD *)(v1253 + 8 * v25--) * v1254.rem;
                  }
                  while (v25 != -1);
                }
                v1255 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1256) = 0;
                }
                else
                {
                  v1256 = 0;
                  v1257 = v225[3];
                  quot = v1627;
                  do
                  {
                    v1259 = ldiv(quot, v226[v1255]);
                    quot = v1259.quot;
                    v1256 += *(_QWORD *)(v1257 + 8 * v1255--) * v1259.rem;
                  }
                  while (v1255 != -1);
                }
                if ((int)v1651 >= 1)
                {
                  v1260 = 0;
                  v1261 = *(unsigned __int8 *)(v1585 + (int)v1252);
                  v1262 = v1576;
                  do
                  {
                    *(_BYTE *)(v1251 + v1260) = v1261 >> *(_BYTE *)(v1579 + (int)v1256 + v1260);
                    --v1262;
                    ++v1260;
                  }
                  while (v1262 > 1);
                }
                v1251 += v1599;
                v1250 = v1627 + v1599;
                v25 = v1685;
              }
              while (v1627 + v1599 < v1612);
            }
          }
          break;
        case 2:
          if (v28 == 2)
          {
            v1263 = *v23;
            if ((_DWORD)v1263)
            {
              v1264 = 0;
              v1265 = 0;
              v1266 = 0;
              v1267 = v22[19];
              v1268 = v225[19];
              v1269 = v21[19];
              v1270 = v23[1];
              v1271 = (uint64_t *)v22[3];
              v1272 = *v1271;
              v1273 = v1271[1];
              v1274 = (uint64_t *)v225[3];
              v1276 = *v1274;
              v1275 = v1274[1];
              if (v1270 <= 1)
                v1277 = 1;
              else
                v1277 = v23[1];
              v1278 = v1272 - v1273 * v1270;
              v1279 = v1276 - v1275 * v226[1];
              do
              {
                if ((_DWORD)v1270)
                {
                  v1280 = 0;
                  v1281 = v1267 + v1266;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1282 = 0;
                      v1283 = *(_BYTE *)(v1268 + v1265);
                      v1284 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1269 + v1282) = *(unsigned __int8 *)(v1281 + v1282) >> v1283;
                        --v1284;
                        ++v1282;
                      }
                      while (v1284 > 1);
                    }
                    v1266 += v1273;
                    v1265 += v1275;
                    v1269 += (int)v288;
                    ++v1280;
                    v1281 += v1273;
                  }
                  while (v1280 != v1277);
                }
                v1266 += v1278;
                v1265 += v1279;
                ++v1264;
              }
              while (v1264 != v1263);
            }
          }
          else if (v28 == 1)
          {
            v869 = *v23;
            if ((_DWORD)v869)
            {
              v870 = 0;
              v871 = 0;
              v872 = v22[19];
              v873 = v225[19];
              v874 = v21[19];
              v875 = *(_QWORD *)v22[3];
              v876 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v877 = 0;
                  v878 = *(_BYTE *)(v873 + v871);
                  v879 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v874 + v877) = *(unsigned __int8 *)(v872 + v877) >> v878;
                    --v879;
                    ++v877;
                  }
                  while (v879 > 1);
                }
                v871 += v876;
                v874 += (int)v288;
                ++v870;
                v872 += v875;
              }
              while (v870 != v869);
            }
          }
          else
          {
            v1613 = v21[6];
            if (v1613)
            {
              v1285 = 0;
              v1580 = v225[19];
              v1586 = v22[19];
              v1600 = (int)v288;
              v1577 = v288 + 1;
              v1286 = v21[19];
              do
              {
                v1628 = v1285;
                v1287 = 0;
                if ((v25 & 0x80000000) == 0)
                {
                  v1288 = v22[3];
                  do
                  {
                    v1289 = ldiv((int)v1285, v23[v25]);
                    LODWORD(v1285) = v1289.quot;
                    v1287 += *(_QWORD *)(v1288 + 8 * v25--) * v1289.rem;
                  }
                  while (v25 != -1);
                }
                v1290 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1291) = 0;
                }
                else
                {
                  v1291 = 0;
                  v1292 = v225[3];
                  v1293 = v1628;
                  do
                  {
                    v1294 = ldiv(v1293, v226[v1290]);
                    v1293 = v1294.quot;
                    v1291 += *(_QWORD *)(v1292 + 8 * v1290--) * v1294.rem;
                  }
                  while (v1290 != -1);
                }
                if ((int)v1651 >= 1)
                {
                  v1295 = 0;
                  v1296 = *(_BYTE *)(v1580 + (int)v1291);
                  v1297 = v1577;
                  do
                  {
                    *(_BYTE *)(v1286 + v1295) = *(unsigned __int8 *)(v1586 + (int)v1287 + v1295) >> v1296;
                    --v1297;
                    ++v1295;
                  }
                  while (v1297 > 1);
                }
                v1286 += v1600;
                v1285 = v1628 + v1600;
                v25 = v1685;
              }
              while (v1628 + v1600 < v1613);
            }
          }
          break;
        case 3:
          if (v28 == 2)
          {
            v1060 = *v23;
            if ((_DWORD)v1060)
            {
              v1061 = 0;
              v1062 = 0;
              v1063 = 0;
              v1064 = v22[19];
              v1065 = v225[19];
              v1066 = v21[19];
              v1067 = v23[1];
              v1068 = (uint64_t *)v22[3];
              v1069 = *v1068;
              v1070 = v1068[1];
              v1071 = (uint64_t *)v225[3];
              v1073 = *v1071;
              v1072 = v1071[1];
              if (v1067 <= 1)
                v1074 = 1;
              else
                v1074 = v23[1];
              v1075 = v1069 - v1070 * v1067;
              v1076 = v1073 - v1072 * v226[1];
              do
              {
                if ((_DWORD)v1067)
                {
                  v1077 = 0;
                  v1078 = v1065 + v1062;
                  v1079 = v1064 + v1063;
                  do
                  {
                    if ((int)v288 >= 1)
                    {
                      v1080 = 0;
                      v1081 = v288 + 1;
                      do
                      {
                        *(_BYTE *)(v1066 + v1080) = *(unsigned __int8 *)(v1079 + v1080) >> *(_BYTE *)(v1078 + v1080);
                        --v1081;
                        ++v1080;
                      }
                      while (v1081 > 1);
                    }
                    v1063 += v1070;
                    v1062 += v1072;
                    v1066 += (int)v288;
                    ++v1077;
                    v1078 += v1072;
                    v1079 += v1070;
                  }
                  while (v1077 != v1074);
                }
                v1063 += v1075;
                v1062 += v1076;
                ++v1061;
              }
              while (v1061 != v1060);
            }
          }
          else if (v28 == 1)
          {
            v339 = *v23;
            if ((_DWORD)v339)
            {
              v340 = 0;
              v341 = v22[19];
              v342 = v225[19];
              v343 = v21[19];
              v344 = *(_QWORD *)v22[3];
              v345 = *(_QWORD *)v225[3];
              do
              {
                if ((int)v288 >= 1)
                {
                  v346 = 0;
                  v347 = v288 + 1;
                  do
                  {
                    *(_BYTE *)(v343 + v346) = *(unsigned __int8 *)(v341 + v346) >> *(_BYTE *)(v342 + v346);
                    --v347;
                    ++v346;
                  }
                  while (v347 > 1);
                }
                v343 += (int)v288;
                ++v340;
                v342 += v345;
                v341 += v344;
              }
              while (v340 != v339);
            }
          }
          else
          {
            v1610 = v21[6];
            if (v1610)
            {
              v1082 = 0;
              v1578 = v225[19];
              v1581 = v22[19];
              v1595 = (int)v288;
              v1575 = v288 + 1;
              v1083 = v21[19];
              do
              {
                v1625 = v1082;
                v1084 = 0;
                if ((v25 & 0x80000000) == 0)
                {
                  v1085 = v22[3];
                  for (i = v25; i != -1; --i)
                  {
                    v1087 = ldiv((int)v1082, v23[i]);
                    LODWORD(v1082) = v1087.quot;
                    v1084 += *(_QWORD *)(v1085 + 8 * i) * v1087.rem;
                  }
                }
                v1088 = v1670;
                if ((v1670 & 0x80000000) != 0)
                {
                  LODWORD(v1089) = 0;
                }
                else
                {
                  v1089 = 0;
                  v1090 = v225[3];
                  v1091 = v1625;
                  do
                  {
                    v1092 = ldiv(v1091, v226[v1088]);
                    v1091 = v1092.quot;
                    v1089 += *(_QWORD *)(v1090 + 8 * v1088--) * v1092.rem;
                  }
                  while (v1088 != -1);
                }
                v25 = v1685;
                if ((int)v1651 >= 1)
                {
                  v1093 = 0;
                  v1094 = v1575;
                  do
                  {
                    *(_BYTE *)(v1083 + v1093) = *(unsigned __int8 *)(v1581 + (int)v1084 + v1093) >> *(_BYTE *)(v1578 + (int)v1089 + v1093);
                    --v1094;
                    ++v1093;
                  }
                  while (v1094 > 1);
                }
                v1083 += v1595;
                v1082 = v1625 + v1595;
              }
              while (v1625 + v1595 < v1610);
            }
          }
          break;
        default:
LABEL_287:
          switch(v284)
          {
            case 1uLL:
              v289 = v21[6];
              if (v289)
              {
                v290 = (unsigned __int8 *)v22[19];
                v291 = (_BYTE *)v225[19];
                v292 = (_BYTE *)v21[19];
                v293 = *(_QWORD *)v22[3];
                v294 = *(_QWORD *)v225[3];
                do
                {
                  *v292++ = *v290 >> *v291;
                  v291 += v294;
                  v290 += v293;
                  --v289;
                }
                while (v289);
              }
              break;
            case 2uLL:
              v482 = *v23;
              if ((_DWORD)v482)
              {
                v483 = 0;
                v484 = 0;
                v485 = 0;
                v486 = 0;
                v487 = v22[19];
                v488 = v225[19];
                v489 = v21[19];
                v490 = v23[1];
                v491 = (uint64_t *)v22[3];
                v492 = *v491;
                v493 = v491[1];
                v494 = (uint64_t *)v225[3];
                v495 = *v494;
                v496 = v494[1];
                v497 = v495 - v496 * v226[1];
                if (v490 <= 1)
                  v498 = 1;
                else
                  v498 = v23[1];
                v499 = v492 - v493 * v490;
                do
                {
                  if ((_DWORD)v490)
                  {
                    v500 = v484 + v498;
                    v501 = (_BYTE *)(v489 + v484);
                    v502 = v498;
                    do
                    {
                      *v501++ = *(unsigned __int8 *)(v487 + v486) >> *(_BYTE *)(v488 + v485);
                      v486 += v493;
                      v485 += v496;
                      --v502;
                    }
                    while (v502);
                    v484 = v500;
                  }
                  v486 += v499;
                  v485 += v497;
                  ++v483;
                }
                while (v483 != v482);
              }
              break;
            case 3uLL:
              v503 = *v23;
              if ((_DWORD)v503)
              {
                v504 = 0;
                v505 = 0;
                v506 = 0;
                v507 = 0;
                v508 = v22[19];
                v509 = v225[19];
                v510 = v21[19];
                v511 = v23[1];
                v512 = (_QWORD *)v22[3];
                v513 = v512[1];
                v514 = (_QWORD *)v225[3];
                v515 = v514[1];
                v516 = *v514 - v515 * v226[1];
                if (v511 <= 1)
                  v517 = 1;
                else
                  v517 = v23[1];
                v518 = *v512 - v513 * v511;
                do
                {
                  if ((_DWORD)v511)
                  {
                    v519 = 0;
                    v520 = v23[2];
                    v521 = v512[2];
                    v522 = v514[2];
                    if (v520 <= 1)
                      v523 = 1;
                    else
                      v523 = v23[2];
                    v524 = v515 - v522 * v226[2];
                    do
                    {
                      v525 = v523;
                      if ((_DWORD)v520)
                      {
                        do
                        {
                          *(_BYTE *)(v510 + v505++) = *(unsigned __int8 *)(v508 + v507) >> *(_BYTE *)(v509 + v506);
                          v507 += v521;
                          v506 += v522;
                          --v525;
                        }
                        while (v525);
                      }
                      v507 += v513 - v521 * v520;
                      v506 += v524;
                      ++v519;
                    }
                    while (v519 != v517);
                  }
                  v507 += v518;
                  v506 += v516;
                  ++v504;
                }
                while (v504 != v503);
              }
              break;
            case 4uLL:
              v1690 = *v23;
              if ((_DWORD)v1690)
              {
                v526 = 0;
                v527 = 0;
                v528 = 0;
                v529 = 0;
                v530 = v22[19];
                v531 = v225[19];
                v532 = v21[19];
                v533 = v23[1];
                v534 = (_QWORD *)v22[3];
                v535 = (_QWORD *)v225[3];
                v1594 = v535[1];
                v1608 = v534[1];
                v1653 = *v535 - v1594 * v226[1];
                v1675 = v23[1];
                if (v533 <= 1)
                  v536 = 1;
                else
                  v536 = v23[1];
                v1617 = *v534 - v534[1] * v533;
                v1631 = v2;
                do
                {
                  if (v1675)
                  {
                    v537 = 0;
                    v538 = v23[2];
                    v539 = v534[2];
                    v540 = v535[2];
                    if (v538 <= 1)
                      v541 = 1;
                    else
                      v541 = v23[2];
                    v542 = v1594 - v540 * v226[2];
                    do
                    {
                      if ((_DWORD)v538)
                      {
                        v543 = 0;
                        v544 = v23[3];
                        v545 = v534[3];
                        v546 = v535[3];
                        if (v544 <= 1)
                          v547 = 1;
                        else
                          v547 = v23[3];
                        v548 = v540 - v546 * v226[3];
                        do
                        {
                          v549 = v547;
                          if ((_DWORD)v544)
                          {
                            do
                            {
                              *(_BYTE *)(v532 + v527++) = *(unsigned __int8 *)(v530 + v529) >> *(_BYTE *)(v531 + v528);
                              v529 += v545;
                              v528 += v546;
                              --v549;
                            }
                            while (v549);
                          }
                          v529 += v539 - v545 * v544;
                          v528 += v548;
                          ++v543;
                        }
                        while (v543 != v541);
                      }
                      v529 += v1608 - v539 * v538;
                      v528 += v542;
                      ++v537;
                    }
                    while (v537 != v536);
                  }
                  v2 = v1631;
                  v529 += v1617;
                  v528 += v1653;
                  ++v526;
                }
                while (v526 != v1690);
              }
              break;
            default:
              v1652 = v21[6];
              if (v1652)
              {
                v471 = 0;
                v1607 = v225[19];
                v1616 = v22[19];
                v1593 = v21[19];
                do
                {
                  v472 = 0;
                  if ((v25 & 0x80000000) == 0)
                  {
                    v473 = v22[3];
                    v474 = v25;
                    v475 = v471;
                    do
                    {
                      v476 = ldiv(v475, v23[v474]);
                      v475 = v476.quot;
                      v472 += *(_QWORD *)(v473 + 8 * v474--) * v476.rem;
                    }
                    while (v474 != -1);
                  }
                  v477 = v1670;
                  if ((v1670 & 0x80000000) != 0)
                  {
                    LODWORD(v478) = 0;
                  }
                  else
                  {
                    v478 = 0;
                    v479 = v225[3];
                    v480 = v471;
                    do
                    {
                      v481 = ldiv(v480, v226[v477]);
                      v480 = v481.quot;
                      v478 += *(_QWORD *)(v479 + 8 * v477--) * v481.rem;
                    }
                    while (v477 != -1);
                  }
                  *(_BYTE *)(v1593 + v471++) = *(unsigned __int8 *)(v1616 + (int)v472) >> *(_BYTE *)(v1607 + (int)v478);
                  v25 = v1685;
                }
                while (v471 != v1652);
              }
              break;
          }
          break;
      }
LABEL_31:
      v49 = *(uint64_t **)v2;
      v50 = *(uint64_t **)(v2 + 8);
      v51 = *(mlx::core::array **)(v2 + 16);
      switch(v52)
      {
        case 0:
          v13 = **(unsigned __int8 **)(*v49 + 152) >> **(_BYTE **)(*v50 + 152);
          v14 = *(_QWORD *)v51;
          goto LABEL_33;
        case 1:
          v61 = *(_DWORD *)(*v50 + 160);
          if (v61 >= 1)
          {
            v62 = *(_BYTE **)(*(_QWORD *)v51 + 152);
            v63 = *(char **)(*v50 + 152);
            v64 = **(unsigned __int8 **)(*v49 + 152);
            v65 = v61 + 1;
            do
            {
              v66 = *v63++;
              *v62++ = v64 >> v66;
              --v65;
            }
            while (v65 > 1);
          }
          return;
        case 2:
          v67 = *(_DWORD *)(*v49 + 160);
          if (v67 >= 1)
          {
            v68 = *(_BYTE **)(*(_QWORD *)v51 + 152);
            v69 = *(unsigned __int8 **)(*v49 + 152);
            v70 = **(_BYTE **)(*v50 + 152);
            v71 = v67 + 1;
            do
            {
              v72 = *v69++;
              *v68++ = v72 >> v70;
              --v71;
            }
            while (v71 > 1);
          }
          return;
        case 3:
          v73 = *(_DWORD *)(*(_QWORD *)v51 + 48);
          if (v73 >= 1)
          {
            v74 = *(_BYTE **)(*(_QWORD *)v51 + 152);
            v75 = *(_BYTE **)(*v50 + 152);
            v76 = *(unsigned __int8 **)(*v49 + 152);
            v77 = v73 + 1;
            do
            {
              v79 = *v76++;
              v78 = v79;
              LOBYTE(v79) = *v75++;
              *v74++ = v78 >> v79;
              --v77;
            }
            while (v77 > 1);
          }
          return;
        default:
          v53 = *(_QWORD **)v51;
          v54 = *v49;
          v55 = *(int **)*v49;
          v56 = (*(_QWORD *)(*v49 + 8) - (_QWORD)v55) >> 2;
          v57 = v56 - 1;
          if ((int)v56 - 1 >= -1)
            v57 = -1;
          v58 = v57 + 1;
          v59 = v56 + 1;
          break;
      }
      while (1)
      {
        v60 = v59 - 2;
        if (v59 - 2 < 0)
          break;
        --v59;
        if (*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8 * v60) != *(_QWORD *)(v53[3] + 8 * v60))
          goto LABEL_53;
      }
      v59 = v58;
LABEL_53:
      v80 = (int **)*v50;
      v81 = *(int **)*v50;
      v82 = (*(_QWORD *)(*v50 + 8) - (_QWORD)v81) >> 2;
      v83 = v82 - 1;
      if ((int)v82 - 1 >= -1)
        v83 = -1;
      v84 = v83 + 1;
      v85 = v82 + 1;
      while (1)
      {
        v86 = v85 - 2;
        if (v85 - 2 < 0)
          break;
        --v85;
        if (*(_QWORD *)&v80[3][2 * v86] != *(_QWORD *)(v53[3] + 8 * v86))
          goto LABEL_60;
      }
      v85 = v84;
LABEL_60:
      v87 = v56 + 1;
      while (1)
      {
        v88 = v87 - 2;
        if (v87 - 2 < 0)
          break;
        --v87;
        if (*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8 * v88))
          goto LABEL_65;
      }
      v87 = v58;
LABEL_65:
      v89 = v82 + 1;
      while (1)
      {
        v90 = v89 - 2;
        if (v89 - 2 < 0)
          break;
        --v89;
        if (*(_QWORD *)&v80[3][2 * v90])
          goto LABEL_70;
      }
      v89 = v84;
LABEL_70:
      v91 = (uint64_t)(v53[1] - *v53) >> 2;
      if (v59 <= v85)
        v92 = v85;
      else
        v92 = v59;
      if (v59 <= v89)
        v59 = v89;
      if (v87 > v85)
        v85 = v87;
      if (v91 > v85)
      {
        v93 = 1;
      }
      else
      {
        v85 = (uint64_t)(v53[1] - *v53) >> 2;
        v93 = 4;
      }
      if (v91 > v59)
      {
        v94 = 2;
      }
      else
      {
        v59 = v85;
        v94 = v93;
      }
      if (v91 > v92)
      {
        v59 = v92;
        v94 = 3;
      }
      v1684 = v51;
      if (!v59)
        goto LABEL_87;
      v95 = *(_QWORD *)(v53[3] + 8 * (v59 - 1));
      if (v95 < 0x10)
        goto LABEL_87;
      switch(v94)
      {
        case 1:
          if (v59 == 2)
          {
            v996 = *v55;
            if (*v55)
            {
              v997 = 0;
              v998 = 0;
              v999 = 0;
              v1000 = *(_QWORD *)(v54 + 152);
              v1001 = v80[19];
              v1002 = v53[19];
              do
              {
                if (v55[1])
                {
                  v1003 = 0;
                  do
                  {
                    if ((int)v95 >= 1)
                    {
                      v1004 = 0;
                      v1005 = *(unsigned __int8 *)(v1000 + v999);
                      v1006 = v95 + 1;
                      do
                      {
                        *(_BYTE *)(v1002 + v1004) = v1005 >> *((_BYTE *)v1001 + v998 + v1004);
                        --v1006;
                        ++v1004;
                      }
                      while (v1006 > 1);
                      v54 = *v49;
                      v80 = (int **)*v50;
                      v55 = *(int **)*v49;
                    }
                    v1007 = *(_QWORD **)(v54 + 24);
                    v1008 = v1007[1];
                    v999 += v1008;
                    v998 += *((_QWORD *)v80[3] + 1);
                    v1002 += (int)v95;
                    ++v1003;
                    v1009 = v55[1];
                  }
                  while (v1003 < v1009);
                  v996 = *v55;
                  v81 = *v80;
                }
                else
                {
                  v1009 = 0;
                  v1007 = *(_QWORD **)(v54 + 24);
                  v1008 = v1007[1];
                }
                v999 = *v1007 + v999 - v1009 * v1008;
                v998 = *(_QWORD *)v80[3] + v998 - *((_QWORD *)v80[3] + 1) * v81[1];
                ++v997;
              }
              while (v997 < v996);
            }
          }
          else if (v59 == 1)
          {
            v451 = *v55;
            if (*v55)
            {
              v452 = 0;
              v453 = 0;
              v454 = 0;
              v455 = *(_QWORD *)(v54 + 152);
              v456 = v80[19];
              v457 = v53[19];
              do
              {
                if ((int)v95 >= 1)
                {
                  v458 = 0;
                  v459 = *(unsigned __int8 *)(v455 + v454);
                  v460 = v95 + 1;
                  do
                  {
                    *(_BYTE *)(v457 + v458) = v459 >> *((_BYTE *)v456 + v453 + v458);
                    --v460;
                    ++v458;
                  }
                  while (v460 > 1);
                  v54 = *v49;
                  v80 = (int **)*v50;
                  v451 = **(_DWORD **)*v49;
                }
                v454 += **(_QWORD **)(v54 + 24);
                v453 += *(_QWORD *)v80[3];
                v457 += (int)v95;
                ++v452;
              }
              while (v452 < v451);
            }
          }
          else if (v53[6])
          {
            v1623 = v80[19];
            v1637 = *(_QWORD *)(v54 + 152);
            v1679 = 0;
            v1010 = v53[19];
            do
            {
              v1011 = *(_QWORD *)*v49;
              v1012 = (unint64_t)(*(_QWORD *)(*v49 + 8) - v1011) >> 2;
              v1013 = 0;
              v1014 = (v1012 - 1);
              if ((int)v1012 - 1 >= 0)
              {
                v1015 = *(_QWORD *)(*v49 + 24);
                v1016 = v1679;
                do
                {
                  v1017 = ldiv(v1016, *(int *)(v1011 + 4 * v1014));
                  v1016 = v1017.quot;
                  v1013 += *(_QWORD *)(v1015 + 8 * v1014--) * v1017.rem;
                }
                while (v1014 != -1);
              }
              v1018 = *(_QWORD *)*v50;
              v1019 = (unint64_t)(*(_QWORD *)(*v50 + 8) - v1018) >> 2;
              v1020 = 0;
              v1021 = (v1019 - 1);
              if ((int)v1019 - 1 >= 0)
              {
                v1022 = *(_QWORD *)(*v50 + 24);
                v1023 = v1679;
                do
                {
                  v1024 = ldiv(v1023, *(int *)(v1018 + 4 * v1021));
                  v1023 = v1024.quot;
                  v1020 += *(_QWORD *)(v1022 + 8 * v1021--) * v1024.rem;
                }
                while (v1021 != -1);
              }
              if ((int)v95 >= 1)
              {
                v1025 = 0;
                v1026 = *(unsigned __int8 *)(v1637 + (int)v1013);
                v1027 = v95 + 1;
                do
                {
                  *(_BYTE *)(v1010 + v1025) = v1026 >> *((_BYTE *)v1623 + (int)v1020 + v1025);
                  --v1027;
                  ++v1025;
                }
                while (v1027 > 1);
                v53 = *(_QWORD **)v1684;
              }
              v1010 += (int)v95;
              v1679 += (int)v95;
            }
            while (v1679 < v53[6]);
          }
          break;
        case 2:
          if (v59 == 2)
          {
            v1028 = *v55;
            if (*v55)
            {
              v1029 = 0;
              v1030 = 0;
              v1031 = 0;
              v1032 = *(_QWORD *)(v54 + 152);
              v1033 = v80[19];
              v1034 = v53[19];
              do
              {
                if (v55[1])
                {
                  v1035 = 0;
                  do
                  {
                    if ((int)v95 >= 1)
                    {
                      v1036 = 0;
                      v1037 = *((_BYTE *)v1033 + v1030);
                      v1038 = v95 + 1;
                      do
                      {
                        *(_BYTE *)(v1034 + v1036) = *(unsigned __int8 *)(v1032 + v1031 + v1036) >> v1037;
                        --v1038;
                        ++v1036;
                      }
                      while (v1038 > 1);
                      v54 = *v49;
                      v80 = (int **)*v50;
                      v55 = *(int **)*v49;
                    }
                    v1039 = *(_QWORD **)(v54 + 24);
                    v1040 = v1039[1];
                    v1031 += v1040;
                    v1030 += *((_QWORD *)v80[3] + 1);
                    v1034 += (int)v95;
                    ++v1035;
                    v1041 = v55[1];
                  }
                  while (v1035 < v1041);
                  v1028 = *v55;
                  v81 = *v80;
                }
                else
                {
                  v1041 = 0;
                  v1039 = *(_QWORD **)(v54 + 24);
                  v1040 = v1039[1];
                }
                v1031 = *v1039 + v1031 - v1041 * v1040;
                v1030 = *(_QWORD *)v80[3] + v1030 - *((_QWORD *)v80[3] + 1) * v81[1];
                ++v1029;
              }
              while (v1029 < v1028);
            }
          }
          else if (v59 == 1)
          {
            v461 = *v55;
            if (*v55)
            {
              v462 = 0;
              v463 = 0;
              v464 = 0;
              v465 = *(_QWORD *)(v54 + 152);
              v466 = v80[19];
              v467 = v53[19];
              do
              {
                if ((int)v95 >= 1)
                {
                  v468 = 0;
                  v469 = *((_BYTE *)v466 + v463);
                  v470 = v95 + 1;
                  do
                  {
                    *(_BYTE *)(v467 + v468) = *(unsigned __int8 *)(v465 + v464 + v468) >> v469;
                    --v470;
                    ++v468;
                  }
                  while (v470 > 1);
                  v54 = *v49;
                  v80 = (int **)*v50;
                  v461 = **(_DWORD **)*v49;
                }
                v464 += **(_QWORD **)(v54 + 24);
                v463 += *(_QWORD *)v80[3];
                v467 += (int)v95;
                ++v462;
              }
              while (v462 < v461);
            }
          }
          else if (v53[6])
          {
            v1624 = v80[19];
            v1638 = *(_QWORD *)(v54 + 152);
            v1680 = 0;
            v1042 = v53[19];
            do
            {
              v1043 = *(_QWORD *)*v49;
              v1044 = (unint64_t)(*(_QWORD *)(*v49 + 8) - v1043) >> 2;
              v1045 = 0;
              v1046 = (v1044 - 1);
              if ((int)v1044 - 1 >= 0)
              {
                v1047 = *(_QWORD *)(*v49 + 24);
                v1048 = v1680;
                do
                {
                  v1049 = ldiv(v1048, *(int *)(v1043 + 4 * v1046));
                  v1048 = v1049.quot;
                  v1045 += *(_QWORD *)(v1047 + 8 * v1046--) * v1049.rem;
                }
                while (v1046 != -1);
              }
              v1050 = *(_QWORD *)*v50;
              v1051 = (unint64_t)(*(_QWORD *)(*v50 + 8) - v1050) >> 2;
              v1052 = 0;
              v1053 = (v1051 - 1);
              if ((int)v1051 - 1 >= 0)
              {
                v1054 = *(_QWORD *)(*v50 + 24);
                v1055 = v1680;
                do
                {
                  v1056 = ldiv(v1055, *(int *)(v1050 + 4 * v1053));
                  v1055 = v1056.quot;
                  v1052 += *(_QWORD *)(v1054 + 8 * v1053--) * v1056.rem;
                }
                while (v1053 != -1);
              }
              if ((int)v95 >= 1)
              {
                v1057 = 0;
                v1058 = *((_BYTE *)v1624 + (int)v1052);
                v1059 = v95 + 1;
                do
                {
                  *(_BYTE *)(v1042 + v1057) = *(unsigned __int8 *)(v1638 + (int)v1045 + v1057) >> v1058;
                  --v1059;
                  ++v1057;
                }
                while (v1059 > 1);
                v53 = *(_QWORD **)v1684;
              }
              v1042 += (int)v95;
              v1680 += (int)v95;
            }
            while (v1680 < v53[6]);
          }
          break;
        case 3:
          if (v59 == 2)
          {
            v966 = *v55;
            if (*v55)
            {
              v967 = 0;
              v968 = 0;
              v969 = 0;
              v970 = *(_QWORD *)(v54 + 152);
              v971 = v80[19];
              v972 = v53[19];
              do
              {
                if (v55[1])
                {
                  v973 = 0;
                  do
                  {
                    if ((int)v95 >= 1)
                    {
                      v974 = 0;
                      v975 = v95 + 1;
                      do
                      {
                        *(_BYTE *)(v972 + v974) = *(unsigned __int8 *)(v970 + v969 + v974) >> *((_BYTE *)v971
                                                                                              + v968
                                                                                              + v974);
                        --v975;
                        ++v974;
                      }
                      while (v975 > 1);
                      v54 = *v49;
                      v80 = (int **)*v50;
                      v55 = *(int **)*v49;
                    }
                    v976 = *(_QWORD **)(v54 + 24);
                    v977 = v976[1];
                    v969 += v977;
                    v968 += *((_QWORD *)v80[3] + 1);
                    v972 += (int)v95;
                    ++v973;
                    v978 = v55[1];
                  }
                  while (v973 < v978);
                  v966 = *v55;
                  v81 = *v80;
                }
                else
                {
                  v978 = 0;
                  v976 = *(_QWORD **)(v54 + 24);
                  v977 = v976[1];
                }
                v969 = *v976 + v969 - v978 * v977;
                v968 = *(_QWORD *)v80[3] + v968 - *((_QWORD *)v80[3] + 1) * v81[1];
                ++v967;
              }
              while (v967 < v966);
            }
          }
          else if (v59 == 1)
          {
            v216 = *v55;
            if (*v55)
            {
              v217 = 0;
              v218 = 0;
              v219 = 0;
              v220 = *(_QWORD *)(v54 + 152);
              v221 = v80[19];
              v222 = v53[19];
              do
              {
                if ((int)v95 >= 1)
                {
                  v223 = 0;
                  v224 = v95 + 1;
                  do
                  {
                    *(_BYTE *)(v222 + v223) = *(unsigned __int8 *)(v220 + v219 + v223) >> *((_BYTE *)v221 + v218 + v223);
                    --v224;
                    ++v223;
                  }
                  while (v224 > 1);
                  v54 = *v49;
                  v80 = (int **)*v50;
                  v216 = **(_DWORD **)*v49;
                }
                v219 += **(_QWORD **)(v54 + 24);
                v218 += *(_QWORD *)v80[3];
                v222 += (int)v95;
                ++v217;
              }
              while (v217 < v216);
            }
          }
          else if (v53[6])
          {
            v1622 = v80[19];
            v1636 = *(_QWORD *)(v54 + 152);
            v1678 = 0;
            v979 = v53[19];
            do
            {
              v980 = *(_QWORD *)*v49;
              v981 = (unint64_t)(*(_QWORD *)(*v49 + 8) - v980) >> 2;
              v982 = 0;
              v983 = (v981 - 1);
              if ((int)v981 - 1 >= 0)
              {
                v984 = *(_QWORD *)(*v49 + 24);
                v985 = v1678;
                do
                {
                  v986 = ldiv(v985, *(int *)(v980 + 4 * v983));
                  v985 = v986.quot;
                  v982 += *(_QWORD *)(v984 + 8 * v983--) * v986.rem;
                }
                while (v983 != -1);
              }
              v987 = *(_QWORD *)*v50;
              v988 = (unint64_t)(*(_QWORD *)(*v50 + 8) - v987) >> 2;
              v989 = 0;
              v990 = (v988 - 1);
              if ((int)v988 - 1 >= 0)
              {
                v991 = *(_QWORD *)(*v50 + 24);
                v992 = v1678;
                do
                {
                  v993 = ldiv(v992, *(int *)(v987 + 4 * v990));
                  v992 = v993.quot;
                  v989 += *(_QWORD *)(v991 + 8 * v990--) * v993.rem;
                }
                while (v990 != -1);
              }
              if ((int)v95 >= 1)
              {
                v994 = 0;
                v995 = v95 + 1;
                do
                {
                  *(_BYTE *)(v979 + v994) = *(unsigned __int8 *)(v1636 + (int)v982 + v994) >> *((_BYTE *)v1622
                                                                                              + (int)v989
                                                                                              + v994);
                  --v995;
                  ++v994;
                }
                while (v995 > 1);
                v53 = *(_QWORD **)v1684;
              }
              v979 += (int)v95;
              v1678 += (int)v95;
            }
            while (v1678 < v53[6]);
          }
          break;
        default:
LABEL_87:
          switch(v91)
          {
            case 1uLL:
              if (v53[6])
              {
                v96 = 0;
                v97 = 0;
                v98 = 0;
                v99 = *(_QWORD *)(v54 + 152);
                v100 = v80[19];
                v101 = v53[19];
                do
                {
                  *(_BYTE *)(v101 + v96) = *(unsigned __int8 *)(v99 + v98) >> *((_BYTE *)v100 + v97);
                  v98 += **(_QWORD **)(*v49 + 24);
                  v97 += **(_QWORD **)(*v50 + 24);
                  ++v96;
                }
                while (v96 < *(_QWORD *)(*(_QWORD *)v51 + 48));
              }
              break;
            case 2uLL:
              v401 = *v55;
              if (*v55)
              {
                v402 = 0;
                v403 = 0;
                v404 = 0;
                v405 = 0;
                v406 = *(_QWORD *)(v54 + 152);
                v407 = v80[19];
                v408 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v409 = 0;
                    do
                    {
                      *(_BYTE *)(v408 + v403 + v409) = *(unsigned __int8 *)(v406 + v405) >> *((_BYTE *)v407 + v404);
                      v54 = *v49;
                      v410 = *(_QWORD **)(*v49 + 24);
                      v411 = v410[1];
                      v405 += v411;
                      v80 = (int **)*v50;
                      v412 = *(int **)(*v50 + 24);
                      v413 = *((_QWORD *)v412 + 1);
                      v404 += v413;
                      ++v409;
                      v55 = *(int **)*v49;
                      v414 = v55[1];
                    }
                    while (v409 < v414);
                    v401 = *v55;
                    v81 = *v80;
                    v403 += v409;
                  }
                  else
                  {
                    v414 = 0;
                    v410 = *(_QWORD **)(v54 + 24);
                    v411 = v410[1];
                    v412 = v80[3];
                    v413 = *((_QWORD *)v412 + 1);
                  }
                  v405 = *v410 + v405 - v414 * v411;
                  v404 = *(_QWORD *)v412 + v404 - v413 * v81[1];
                  ++v402;
                }
                while (v402 < v401);
              }
              break;
            case 3uLL:
              v415 = *v55;
              if (*v55)
              {
                v416 = 0;
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = *(_QWORD *)(v54 + 152);
                v421 = v80[19];
                v422 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v423 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v424 = 0;
                        do
                        {
                          *(_BYTE *)(v422 + v417 + v424) = *(unsigned __int8 *)(v420 + v419) >> *((_BYTE *)v421 + v418);
                          v54 = *v49;
                          v425 = *(_QWORD **)(*v49 + 24);
                          v426 = v425[2];
                          v419 += v426;
                          v80 = (int **)*v50;
                          v427 = *(int **)(*v50 + 24);
                          v428 = *((_QWORD *)v427 + 2);
                          v418 += v428;
                          ++v424;
                          v55 = *(int **)*v49;
                          v429 = v55[2];
                        }
                        while (v424 < v429);
                        v81 = *v80;
                        v417 += v424;
                      }
                      else
                      {
                        v429 = 0;
                        v425 = *(_QWORD **)(v54 + 24);
                        v426 = v425[2];
                        v427 = v80[3];
                        v428 = *((_QWORD *)v427 + 2);
                      }
                      v430 = v425[1];
                      v419 = v430 + v419 - v429 * v426;
                      v418 = *((_QWORD *)v427 + 1) + v418 - v428 * v81[2];
                      ++v423;
                      v431 = v55[1];
                    }
                    while (v423 < v431);
                    v415 = *v55;
                  }
                  else
                  {
                    v431 = 0;
                    v425 = *(_QWORD **)(v54 + 24);
                    v430 = v425[1];
                  }
                  v419 = *v425 + v419 - v431 * v430;
                  v418 = *(_QWORD *)v80[3] + v418 - *((_QWORD *)v80[3] + 1) * v81[1];
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            case 4uLL:
              v432 = *v55;
              if (*v55)
              {
                v433 = 0;
                v434 = 0;
                v435 = 0;
                v436 = 0;
                v437 = *(_QWORD *)(v54 + 152);
                v438 = v80[19];
                v439 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v440 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v441 = 0;
                        do
                        {
                          if (v55[3])
                          {
                            v442 = 0;
                            do
                            {
                              *(_BYTE *)(v439 + v434 + v442) = *(unsigned __int8 *)(v437 + v436) >> *((_BYTE *)v438 + v435);
                              v54 = *v49;
                              v443 = *(_QWORD **)(*v49 + 24);
                              v444 = v443[3];
                              v436 += v444;
                              v80 = (int **)*v50;
                              v445 = *(int **)(*v50 + 24);
                              v446 = *((_QWORD *)v445 + 3);
                              v435 += v446;
                              ++v442;
                              v55 = *(int **)*v49;
                              v447 = v55[3];
                            }
                            while (v442 < v447);
                            v81 = *v80;
                            v434 += v442;
                          }
                          else
                          {
                            v447 = 0;
                            v443 = *(_QWORD **)(v54 + 24);
                            v444 = v443[3];
                            v445 = v80[3];
                            v446 = *((_QWORD *)v445 + 3);
                          }
                          v448 = v443[2];
                          v436 = v448 + v436 - v447 * v444;
                          v435 = *((_QWORD *)v445 + 2) + v435 - v446 * v81[3];
                          ++v441;
                          v449 = v55[2];
                        }
                        while (v441 < v449);
                      }
                      else
                      {
                        v449 = 0;
                        v443 = *(_QWORD **)(v54 + 24);
                        v448 = v443[2];
                      }
                      v436 = v443[1] + v436 - v449 * v448;
                      v435 = *((_QWORD *)v80[3] + 1) + v435 - *((_QWORD *)v80[3] + 2) * v81[2];
                      ++v440;
                      v450 = v55[1];
                    }
                    while (v440 < v450);
                    v432 = *v55;
                  }
                  else
                  {
                    v450 = 0;
                  }
                  v436 = **(_QWORD **)(v54 + 24) + v436 - *(_QWORD *)(*(_QWORD *)(v54 + 24) + 8) * v450;
                  v435 = *(_QWORD *)v80[3] + v435 - *((_QWORD *)v80[3] + 1) * v81[1];
                  ++v433;
                }
                while (v433 < v432);
              }
              break;
            default:
              if (v53[6])
              {
                v384 = 0;
                v1674 = *(_QWORD *)(v54 + 152);
                v385 = v80[19];
                v386 = v53[19];
                do
                {
                  v387 = *(_QWORD *)*v49;
                  v388 = (unint64_t)(*(_QWORD *)(*v49 + 8) - v387) >> 2;
                  v389 = 0;
                  v390 = (v388 - 1);
                  if ((int)v388 - 1 >= 0)
                  {
                    v391 = *(_QWORD *)(*v49 + 24);
                    v392 = v384;
                    do
                    {
                      v393 = ldiv(v392, *(int *)(v387 + 4 * v390));
                      v392 = v393.quot;
                      v389 += *(_QWORD *)(v391 + 8 * v390--) * v393.rem;
                    }
                    while (v390 != -1);
                  }
                  v394 = *(_QWORD *)*v50;
                  v395 = (unint64_t)(*(_QWORD *)(*v50 + 8) - v394) >> 2;
                  v396 = 0;
                  v397 = (v395 - 1);
                  if ((int)v395 - 1 >= 0)
                  {
                    v398 = *(_QWORD *)(*v50 + 24);
                    v399 = v384;
                    do
                    {
                      v400 = ldiv(v399, *(int *)(v394 + 4 * v397));
                      v399 = v400.quot;
                      v396 += *(_QWORD *)(v398 + 8 * v397--) * v400.rem;
                    }
                    while (v397 != -1);
                  }
                  *(_BYTE *)(v386 + v384++) = *(unsigned __int8 *)(v1674 + (int)v389) >> *((_BYTE *)v385 + (int)v396);
                }
                while (v384 < *(_QWORD *)(*(_QWORD *)v1684 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 1:
      goto LABEL_31;
    case 2:
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      switch(v8)
      {
        case 0:
          v9 = **(_DWORD **)(*v7 + 152) >> **(_DWORD **)(*v6 + 152);
          goto LABEL_10;
        case 1:
          v111 = *(_DWORD *)(*v6 + 160);
          if (v111 >= 1)
          {
            v112 = **(_DWORD **)(*v7 + 152);
            v113 = *(unsigned int **)(*(_QWORD *)v1 + 152);
            v114 = *(int **)(*v6 + 152);
            v115 = v111 + 1;
            do
            {
              v116 = *v114++;
              *v113++ = v112 >> v116;
              --v115;
            }
            while (v115 > 1);
          }
          return;
        case 2:
          v117 = *(_DWORD *)(*v7 + 160);
          if (v117 >= 1)
          {
            v118 = **(_DWORD **)(*v6 + 152);
            v119 = *(unsigned int **)(*(_QWORD *)v1 + 152);
            v120 = *(unsigned int **)(*v7 + 152);
            v121 = v117 + 1;
            do
            {
              v122 = *v120++;
              *v119++ = v122 >> v118;
              --v121;
            }
            while (v121 > 1);
          }
          return;
        case 3:
          v123 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v123 >= 1)
          {
            v124 = *(unsigned int **)(*(_QWORD *)v1 + 152);
            v125 = *(int **)(*v6 + 152);
            v126 = *(unsigned int **)(*v7 + 152);
            v127 = v123 + 1;
            do
            {
              v129 = *v126++;
              v128 = v129;
              v130 = *v125++;
              *v124++ = v128 >> v130;
              --v127;
            }
            while (v127 > 1);
          }
          return;
        default:
          v102 = *(_QWORD **)v1;
          v103 = (_QWORD *)*v7;
          v104 = *(int **)*v7;
          v105 = (v103[1] - (_QWORD)v104) >> 2;
          v106 = (v105 - 1);
          if ((int)v106 >= -1)
            v107 = -1;
          else
            v107 = v105 - 1;
          v108 = v107 + 1;
          v109 = v105 + 1;
          break;
      }
      while (1)
      {
        v110 = v109 - 2;
        if (v109 - 2 < 0)
          break;
        --v109;
        if (*(_QWORD *)(v103[3] + 8 * v110) != *(_QWORD *)(v102[3] + 8 * v110))
          goto LABEL_189;
      }
      v109 = v108;
LABEL_189:
      v233 = (_QWORD *)*v6;
      v234 = *(int **)*v6;
      v235 = (v233[1] - (_QWORD)v234) >> 2;
      v236 = (v235 - 1);
      if ((int)v236 >= -1)
        v237 = -1;
      else
        v237 = v235 - 1;
      v238 = v237 + 1;
      v239 = v235 + 1;
      while (1)
      {
        v240 = v239 - 2;
        if (v239 - 2 < 0)
          break;
        --v239;
        if (*(_QWORD *)(v233[3] + 8 * v240) != *(_QWORD *)(v102[3] + 8 * v240))
          goto LABEL_225;
      }
      v239 = v238;
LABEL_225:
      v266 = v105 + 1;
      while (1)
      {
        v267 = v266 - 2;
        if (v266 - 2 < 0)
          break;
        --v266;
        if (*(_QWORD *)(v103[3] + 8 * v267))
          goto LABEL_250;
      }
      v266 = v108;
LABEL_250:
      v276 = v235 + 1;
      while (1)
      {
        v277 = v276 - 2;
        if (v276 - 2 < 0)
          break;
        --v276;
        if (*(_QWORD *)(v233[3] + 8 * v277))
          goto LABEL_293;
      }
      v276 = v238;
LABEL_293:
      v295 = (uint64_t)(v102[1] - *v102) >> 2;
      if (v109 <= v239)
        v296 = v239;
      else
        v296 = v109;
      if (v109 <= v276)
        v109 = v276;
      if (v266 > v239)
        v239 = v266;
      if (v295 > v239)
      {
        v297 = 1;
      }
      else
      {
        v239 = (uint64_t)(v102[1] - *v102) >> 2;
        v297 = 4;
      }
      if (v295 > v109)
      {
        v298 = 2;
      }
      else
      {
        v109 = v239;
        v298 = v297;
      }
      if (v295 > v296)
      {
        v109 = v296;
        v298 = 3;
      }
      v1671 = v236;
      v1686 = v106;
      if (!v109)
        goto LABEL_310;
      v299 = *(_QWORD *)(v102[3] + 8 * (v109 - 1));
      if (v299 < 0x10)
        goto LABEL_310;
      switch(v298)
      {
        case 1:
          if (v109 == 2)
          {
            v1298 = *v104;
            if (*v104)
            {
              v1299 = 0;
              v1300 = 0;
              v1301 = 0;
              v1302 = v103[19];
              v1303 = v233[19];
              v1304 = v102[19];
              v1305 = (uint64_t *)v103[3];
              v1306 = *v1305;
              v1307 = v1305[1];
              v1308 = (uint64_t *)v233[3];
              v1309 = *v1308;
              v1310 = v1308[1];
              v1311 = v104[1];
              v1312 = v1311;
              do
              {
                if (v1312)
                {
                  v1313 = 0;
                  v1314 = v1303 + 4 * v1300;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1315 = 0;
                      v1316 = *(_DWORD *)(v1302 + 4 * v1301);
                      v1317 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1304 + v1315) = v1316 >> *(_DWORD *)(v1314 + v1315);
                        --v1317;
                        v1315 += 4;
                      }
                      while (v1317 > 1);
                      v1311 = v104[1];
                    }
                    v1301 += v1307;
                    v1300 += v1310;
                    v1304 += 4 * (int)v299;
                    ++v1313;
                    v1314 += 4 * v1310;
                  }
                  while (v1313 < v1311);
                  v1318 = v1311;
                  v1298 = *v104;
                  v1312 = v1311;
                }
                else
                {
                  v1318 = 0;
                }
                v1301 = v1301 + v1306 - v1318 * v1307;
                v1300 = v1300 + v1309 - v1310 * v234[1];
                ++v1299;
              }
              while (v1299 < v1298);
            }
          }
          else if (v109 == 1)
          {
            v880 = *v104;
            if (*v104)
            {
              v881 = 0;
              v882 = 0;
              v883 = v103[19];
              v884 = v233[19];
              v885 = v102[19];
              v886 = *(_QWORD *)v103[3];
              v887 = 4 * *(_QWORD *)v233[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v888 = 0;
                  v889 = *(_DWORD *)(v883 + 4 * v882);
                  v890 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v885 + v888) = v889 >> *(_DWORD *)(v884 + v888);
                    --v890;
                    v888 += 4;
                  }
                  while (v890 > 1);
                  v880 = *v104;
                }
                v882 += v886;
                ++v881;
                v885 += 4 * (int)v299;
                v884 += v887;
              }
              while (v881 < v880);
            }
          }
          else
          {
            v1643 = v102[6];
            if (v1643)
            {
              v1662 = 0;
              v1587 = v233[19];
              v1601 = v103[19];
              v1319 = v102[19];
              do
              {
                v1320 = 0;
                if ((v106 & 0x80000000) == 0)
                {
                  v1321 = v103[3];
                  v1322 = v106;
                  v1323 = v1662;
                  do
                  {
                    v1324 = ldiv(v1323, v104[v1322]);
                    v1323 = v1324.quot;
                    v1320 += *(_QWORD *)(v1321 + 8 * v1322--) * v1324.rem;
                  }
                  while (v1322 != -1);
                }
                v1325 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1326) = 0;
                }
                else
                {
                  v1326 = 0;
                  v1327 = v233[3];
                  v1328 = v1662;
                  do
                  {
                    v1329 = ldiv(v1328, v234[v1325]);
                    v1328 = v1329.quot;
                    v1326 += *(_QWORD *)(v1327 + 8 * v1325--) * v1329.rem;
                  }
                  while (v1325 != -1);
                }
                v106 = v1686;
                if ((int)v299 >= 1)
                {
                  v1330 = 0;
                  v1331 = *(_DWORD *)(v1601 + 4 * (int)v1320);
                  v1332 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1319 + v1330) = v1331 >> *(_DWORD *)(v1587 + 4 * (int)v1326 + v1330);
                    --v1332;
                    v1330 += 4;
                  }
                  while (v1332 > 1);
                }
                v1319 += 4 * (int)v299;
                v1662 += (int)v299;
              }
              while (v1662 < v1643);
            }
          }
          break;
        case 2:
          if (v109 == 2)
          {
            v1333 = *v104;
            if (*v104)
            {
              v1334 = 0;
              v1335 = 0;
              v1336 = 0;
              v1337 = v103[19];
              v1338 = v233[19];
              v1339 = v102[19];
              v1340 = (uint64_t *)v103[3];
              v1341 = *v1340;
              v1342 = v1340[1];
              v1343 = (uint64_t *)v233[3];
              v1344 = *v1343;
              v1345 = v1343[1];
              v1346 = v104[1];
              v1347 = v1346;
              do
              {
                if (v1347)
                {
                  v1348 = 0;
                  v1349 = v1337 + 4 * v1336;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1350 = 0;
                      v1351 = *(_DWORD *)(v1338 + 4 * v1335);
                      v1352 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1339 + v1350) = *(_DWORD *)(v1349 + v1350) >> v1351;
                        --v1352;
                        v1350 += 4;
                      }
                      while (v1352 > 1);
                      v1346 = v104[1];
                    }
                    v1336 += v1342;
                    v1335 += v1345;
                    v1339 += 4 * (int)v299;
                    ++v1348;
                    v1349 += 4 * v1342;
                  }
                  while (v1348 < v1346);
                  v1353 = v1346;
                  v1333 = *v104;
                  v1347 = v1346;
                }
                else
                {
                  v1353 = 0;
                }
                v1336 = v1336 + v1341 - v1353 * v1342;
                v1335 = v1335 + v1344 - v1345 * v234[1];
                ++v1334;
              }
              while (v1334 < v1333);
            }
          }
          else if (v109 == 1)
          {
            v891 = *v104;
            if (*v104)
            {
              v892 = 0;
              v893 = 0;
              v894 = v103[19];
              v895 = v233[19];
              v896 = v102[19];
              v897 = *(_QWORD *)v233[3];
              v898 = 4 * *(_QWORD *)v103[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v899 = 0;
                  v900 = *(_DWORD *)(v895 + 4 * v893);
                  v901 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v896 + v899) = *(_DWORD *)(v894 + v899) >> v900;
                    --v901;
                    v899 += 4;
                  }
                  while (v901 > 1);
                  v891 = *v104;
                }
                v893 += v897;
                ++v892;
                v896 += 4 * (int)v299;
                v894 += v898;
              }
              while (v892 < v891);
            }
          }
          else
          {
            v1644 = v102[6];
            if (v1644)
            {
              v1663 = 0;
              v1588 = v233[19];
              v1602 = v103[19];
              v1354 = v102[19];
              do
              {
                v1355 = 0;
                if ((v106 & 0x80000000) == 0)
                {
                  v1356 = v103[3];
                  v1357 = v106;
                  v1358 = v1663;
                  do
                  {
                    v1359 = ldiv(v1358, v104[v1357]);
                    v1358 = v1359.quot;
                    v1355 += *(_QWORD *)(v1356 + 8 * v1357--) * v1359.rem;
                  }
                  while (v1357 != -1);
                }
                v1360 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1361) = 0;
                }
                else
                {
                  v1361 = 0;
                  v1362 = v233[3];
                  v1363 = v1663;
                  do
                  {
                    v1364 = ldiv(v1363, v234[v1360]);
                    v1363 = v1364.quot;
                    v1361 += *(_QWORD *)(v1362 + 8 * v1360--) * v1364.rem;
                  }
                  while (v1360 != -1);
                }
                v106 = v1686;
                if ((int)v299 >= 1)
                {
                  v1365 = 0;
                  v1366 = *(_DWORD *)(v1588 + 4 * (int)v1361);
                  v1367 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1354 + v1365) = *(_DWORD *)(v1602 + 4 * (int)v1355 + v1365) >> v1366;
                    --v1367;
                    v1365 += 4;
                  }
                  while (v1367 > 1);
                }
                v1354 += 4 * (int)v299;
                v1663 += (int)v299;
              }
              while (v1663 < v1644);
            }
          }
          break;
        case 3:
          if (v109 == 2)
          {
            v1095 = *v104;
            if (*v104)
            {
              v1096 = 0;
              v1097 = 0;
              v1098 = 0;
              v1099 = v103[19];
              v1100 = v233[19];
              v1101 = v102[19];
              v1102 = (uint64_t *)v103[3];
              v1103 = *v1102;
              v1104 = v1102[1];
              v1105 = (uint64_t *)v233[3];
              v1106 = *v1105;
              v1107 = v1105[1];
              v1108 = v104[1];
              v1109 = v1108;
              do
              {
                if (v1109)
                {
                  v1110 = 0;
                  v1111 = v1100 + 4 * v1097;
                  v1112 = v1099 + 4 * v1098;
                  do
                  {
                    if ((int)v299 >= 1)
                    {
                      v1113 = 0;
                      v1114 = v299 + 1;
                      do
                      {
                        *(_DWORD *)(v1101 + v1113) = *(_DWORD *)(v1112 + v1113) >> *(_DWORD *)(v1111 + v1113);
                        --v1114;
                        v1113 += 4;
                      }
                      while (v1114 > 1);
                      v1108 = v104[1];
                    }
                    v1098 += v1104;
                    v1097 += v1107;
                    v1101 += 4 * (int)v299;
                    ++v1110;
                    v1111 += 4 * v1107;
                    v1112 += 4 * v1104;
                  }
                  while (v1110 < v1108);
                  v1115 = v1108;
                  v1095 = *v104;
                  v1109 = v1108;
                }
                else
                {
                  v1115 = 0;
                }
                v1098 = v1098 + v1103 - v1115 * v1104;
                v1097 = v1097 + v1106 - v1107 * v234[1];
                ++v1096;
              }
              while (v1096 < v1095);
            }
          }
          else if (v109 == 1)
          {
            v348 = *v104;
            if (*v104)
            {
              v349 = 0;
              v350 = v103[19];
              v351 = v233[19];
              v352 = v102[19];
              v353 = 4 * *(_QWORD *)v233[3];
              v354 = 4 * *(_QWORD *)v103[3];
              do
              {
                if ((int)v299 >= 1)
                {
                  v355 = 0;
                  v356 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v352 + v355) = *(_DWORD *)(v350 + v355) >> *(_DWORD *)(v351 + v355);
                    --v356;
                    v355 += 4;
                  }
                  while (v356 > 1);
                  v348 = *v104;
                }
                ++v349;
                v352 += 4 * (int)v299;
                v351 += v353;
                v350 += v354;
              }
              while (v349 < v348);
            }
          }
          else
          {
            v1639 = v102[6];
            if (v1639)
            {
              v1658 = 0;
              v1582 = v233[19];
              v1596 = v103[19];
              v1116 = v102[19];
              do
              {
                v1117 = 0;
                if ((v106 & 0x80000000) == 0)
                {
                  v1118 = v103[3];
                  v1119 = v106;
                  v1120 = v1658;
                  do
                  {
                    v1121 = ldiv(v1120, v104[v1119]);
                    v1120 = v1121.quot;
                    v1117 += *(_QWORD *)(v1118 + 8 * v1119--) * v1121.rem;
                  }
                  while (v1119 != -1);
                }
                v1122 = v1671;
                if ((v1671 & 0x80000000) != 0)
                {
                  LODWORD(v1123) = 0;
                }
                else
                {
                  v1123 = 0;
                  v1124 = v233[3];
                  v1125 = v1658;
                  do
                  {
                    v1126 = ldiv(v1125, v234[v1122]);
                    v1125 = v1126.quot;
                    v1123 += *(_QWORD *)(v1124 + 8 * v1122--) * v1126.rem;
                  }
                  while (v1122 != -1);
                }
                v106 = v1686;
                if ((int)v299 >= 1)
                {
                  v1127 = 0;
                  v1128 = v299 + 1;
                  do
                  {
                    *(_DWORD *)(v1116 + v1127) = *(_DWORD *)(v1596 + 4 * (int)v1117 + v1127) >> *(_DWORD *)(v1582 + 4 * (int)v1123 + v1127);
                    --v1128;
                    v1127 += 4;
                  }
                  while (v1128 > 1);
                }
                v1116 += 4 * (int)v299;
                v1658 += (int)v299;
              }
              while (v1658 < v1639);
            }
          }
          break;
        default:
LABEL_310:
          switch(v295)
          {
            case 1uLL:
              v300 = v102[6];
              if (v300)
              {
                v301 = (_DWORD *)v103[19];
                v302 = (_DWORD *)v233[19];
                v303 = (_DWORD *)v102[19];
                v304 = 4 * *(_QWORD *)v233[3];
                v305 = 4 * *(_QWORD *)v103[3];
                do
                {
                  *v303++ = *v301 >> *v302;
                  v302 = (_DWORD *)((char *)v302 + v304);
                  v301 = (_DWORD *)((char *)v301 + v305);
                  --v300;
                }
                while (v300);
              }
              break;
            case 2uLL:
              v562 = *v104;
              if (*v104)
              {
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v566 = 0;
                v567 = v103[19];
                v568 = v233[19];
                v569 = v102[19];
                v570 = (uint64_t *)v103[3];
                v571 = *v570;
                v572 = v570[1];
                v573 = (uint64_t *)v233[3];
                v575 = *v573;
                v574 = v573[1];
                v576 = v104[1];
                do
                {
                  if (v576)
                  {
                    for (j = 0; j < v576; ++j)
                    {
                      *(_DWORD *)(v569 + 4 * v564 + 4 * j) = *(_DWORD *)(v567 + 4 * v566) >> *(_DWORD *)(v568 + 4 * v565);
                      v566 += v572;
                      v565 += v574;
                      v576 = v104[1];
                    }
                    v578 = v576;
                    v562 = *v104;
                    v564 += j;
                  }
                  else
                  {
                    v578 = 0;
                  }
                  v566 = v566 + v571 - v578 * v572;
                  v565 = v565 + v575 - v574 * v234[1];
                  ++v563;
                }
                while (v563 < v562);
              }
              break;
            case 3uLL:
              v579 = *v104;
              if (*v104)
              {
                v580 = 0;
                v581 = 0;
                v582 = 0;
                v583 = 0;
                v584 = v103[19];
                v585 = v233[19];
                v586 = v102[19];
                v587 = (uint64_t *)v103[3];
                v588 = *v587;
                v589 = v587[1];
                v590 = (uint64_t *)v233[3];
                v591 = *v590;
                v592 = v590[1];
                v593 = v104[1];
                v594 = v593;
                do
                {
                  if (v594)
                  {
                    v595 = 0;
                    v596 = v587[2];
                    v597 = v590[2];
                    v598 = v104[2];
                    do
                    {
                      if (v598)
                      {
                        for (k = 0; k < v598; ++k)
                        {
                          *(_DWORD *)(v586 + 4 * v581 + 4 * k) = *(_DWORD *)(v584 + 4 * v583) >> *(_DWORD *)(v585 + 4 * v582);
                          v583 += v596;
                          v582 += v597;
                          v598 = v104[2];
                        }
                        v600 = v598;
                        v593 = v104[1];
                        v581 += k;
                      }
                      else
                      {
                        v600 = 0;
                      }
                      v583 = v583 + v589 - v600 * v596;
                      v582 = v582 + v592 - v597 * v234[2];
                      ++v595;
                    }
                    while (v595 < v593);
                    v601 = v593;
                    v579 = *v104;
                    v594 = v593;
                  }
                  else
                  {
                    v601 = 0;
                  }
                  v583 = v583 + v588 - v601 * v589;
                  v582 = v582 + v591 - v592 * v234[1];
                  ++v580;
                }
                while (v580 < v579);
              }
              break;
            case 4uLL:
              v602 = *v104;
              if (*v104)
              {
                v603 = 0;
                v604 = 0;
                v605 = 0;
                v606 = 0;
                v607 = v103[19];
                v608 = v233[19];
                v609 = v102[19];
                v610 = (uint64_t *)v103[3];
                v611 = *v610;
                v612 = v610[1];
                v613 = (uint64_t *)v233[3];
                v614 = *v613;
                v615 = v613[1];
                v616 = v104[1];
                v617 = v616;
                do
                {
                  if (v617)
                  {
                    v618 = 0;
                    v619 = v610[2];
                    v620 = v613[2];
                    v621 = v104[2];
                    v622 = v621;
                    do
                    {
                      if (v622)
                      {
                        v623 = 0;
                        v624 = v610[3];
                        v625 = v613[3];
                        v626 = v104[3];
                        do
                        {
                          if (v626)
                          {
                            for (m = 0; m < v626; ++m)
                            {
                              *(_DWORD *)(v609 + 4 * v604 + 4 * m) = *(_DWORD *)(v607 + 4 * v606) >> *(_DWORD *)(v608 + 4 * v605);
                              v606 += v624;
                              v605 += v625;
                              v626 = v104[3];
                            }
                            v628 = v626;
                            v621 = v104[2];
                            v604 += m;
                          }
                          else
                          {
                            v628 = 0;
                          }
                          v606 = v606 + v619 - v628 * v624;
                          v605 = v605 + v620 - v625 * v234[3];
                          ++v623;
                        }
                        while (v623 < v621);
                        v629 = v621;
                        v616 = v104[1];
                        v622 = v621;
                      }
                      else
                      {
                        v629 = 0;
                      }
                      v606 = v606 + v612 - v629 * v619;
                      v605 = v605 + v615 - v620 * v234[2];
                      ++v618;
                    }
                    while (v618 < v616);
                    v630 = v616;
                    v602 = *v104;
                    v617 = v616;
                  }
                  else
                  {
                    v630 = 0;
                  }
                  v606 = v606 + v611 - v630 * v612;
                  v605 = v605 + v614 - v615 * v234[1];
                  ++v603;
                }
                while (v603 < v602);
              }
              break;
            default:
              v550 = v102[6];
              if (v550)
              {
                v551 = 0;
                v1632 = v233[19];
                v1654 = v103[19];
                v1618 = v102[19];
                do
                {
                  v552 = 0;
                  if ((v106 & 0x80000000) == 0)
                  {
                    v553 = v103[3];
                    v554 = v106;
                    v555 = v551;
                    do
                    {
                      v556 = ldiv(v555, v104[v554]);
                      v555 = v556.quot;
                      v552 += *(_QWORD *)(v553 + 8 * v554--) * v556.rem;
                    }
                    while (v554 != -1);
                  }
                  v557 = v1671;
                  if ((v1671 & 0x80000000) != 0)
                  {
                    LODWORD(v558) = 0;
                  }
                  else
                  {
                    v558 = 0;
                    v559 = v233[3];
                    v560 = v551;
                    do
                    {
                      v561 = ldiv(v560, v234[v557]);
                      v560 = v561.quot;
                      v558 += *(_QWORD *)(v559 + 8 * v557--) * v561.rem;
                    }
                    while (v557 != -1);
                  }
                  *(_DWORD *)(v1618 + 4 * v551++) = *(_DWORD *)(v1654 + 4 * (int)v552) >> *(_DWORD *)(v1632 + 4 * (int)v558);
                  v106 = v1686;
                }
                while (v551 != v550);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      v10 = *(uint64_t **)a1;
      v11 = *(uint64_t **)(a1 + 8);
      switch(v12)
      {
        case 0:
          v13 = **(char **)(*v10 + 152) >> **(_BYTE **)(*v11 + 152);
          v14 = *(_QWORD *)v1;
LABEL_33:
          **(_BYTE **)(v14 + 152) = v13;
          return;
        case 1:
          v139 = *(_DWORD *)(*v11 + 160);
          if (v139 >= 1)
          {
            v140 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v141 = *(char **)(*v11 + 152);
            v142 = **(char **)(*v10 + 152);
            v143 = v139 + 1;
            do
            {
              v144 = *v141++;
              *v140++ = v142 >> v144;
              --v143;
            }
            while (v143 > 1);
          }
          return;
        case 2:
          v145 = *(_DWORD *)(*v10 + 160);
          if (v145 >= 1)
          {
            v146 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v147 = *(char **)(*v10 + 152);
            v148 = **(_BYTE **)(*v11 + 152);
            v149 = v145 + 1;
            do
            {
              v150 = *v147++;
              *v146++ = v150 >> v148;
              --v149;
            }
            while (v149 > 1);
          }
          return;
        case 3:
          v151 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v151 >= 1)
          {
            v152 = *(_BYTE **)(*(_QWORD *)v1 + 152);
            v153 = *(_BYTE **)(*v11 + 152);
            v154 = *(char **)(*v10 + 152);
            v155 = v151 + 1;
            do
            {
              v157 = *v154++;
              v156 = v157;
              LOBYTE(v157) = *v153++;
              *v152++ = v156 >> v157;
              --v155;
            }
            while (v155 > 1);
          }
          return;
        default:
          v131 = *(_QWORD **)v1;
          v132 = *v10;
          v133 = *(int **)*v10;
          v134 = (*(_QWORD *)(*v10 + 8) - (_QWORD)v133) >> 2;
          v135 = v134 - 1;
          if ((int)v134 - 1 >= -1)
            v135 = -1;
          v136 = v135 + 1;
          v137 = v134 + 1;
          break;
      }
      while (1)
      {
        v138 = v137 - 2;
        if (v137 - 2 < 0)
          break;
        --v137;
        if (*(_QWORD *)(*(_QWORD *)(v132 + 24) + 8 * v138) != *(_QWORD *)(v131[3] + 8 * v138))
          goto LABEL_197;
      }
      v137 = v136;
LABEL_197:
      v241 = (int **)*v11;
      v242 = *(int **)*v11;
      v243 = (*(_QWORD *)(*v11 + 8) - (_QWORD)v242) >> 2;
      v244 = v243 - 1;
      if ((int)v243 - 1 >= -1)
        v244 = -1;
      v245 = v244 + 1;
      v246 = v243 + 1;
      while (1)
      {
        v247 = v246 - 2;
        if (v246 - 2 < 0)
          break;
        --v246;
        if (*(_QWORD *)&v241[3][2 * v247] != *(_QWORD *)(v131[3] + 8 * v247))
          goto LABEL_230;
      }
      v246 = v245;
LABEL_230:
      v268 = v134 + 1;
      while (1)
      {
        v269 = v268 - 2;
        if (v268 - 2 < 0)
          break;
        --v268;
        if (*(_QWORD *)(*(_QWORD *)(v132 + 24) + 8 * v269))
          goto LABEL_255;
      }
      v268 = v136;
LABEL_255:
      v278 = v243 + 1;
      while (1)
      {
        v279 = v278 - 2;
        if (v278 - 2 < 0)
          break;
        --v278;
        if (*(_QWORD *)&v241[3][2 * v279])
          goto LABEL_316;
      }
      v278 = v245;
LABEL_316:
      v306 = (uint64_t)(v131[1] - *v131) >> 2;
      if (v137 <= v246)
        v307 = v246;
      else
        v307 = v137;
      if (v137 <= v278)
        v137 = v278;
      if (v268 > v246)
        v246 = v268;
      if (v306 > v246)
      {
        v308 = 1;
      }
      else
      {
        v246 = (uint64_t)(v131[1] - *v131) >> 2;
        v308 = 4;
      }
      if (v306 > v137)
      {
        v309 = 2;
      }
      else
      {
        v137 = v246;
        v309 = v308;
      }
      if (v306 > v307)
      {
        v137 = v307;
        v309 = 3;
      }
      if (!v137)
        goto LABEL_333;
      v310 = *(_QWORD *)(v131[3] + 8 * (v137 - 1));
      if (v310 < 0x10)
        goto LABEL_333;
      v1689 = *(_QWORD *)(v131[3] + 8 * (v137 - 1));
      switch(v309)
      {
        case 1:
          if (v137 == 2)
          {
            v1368 = *v133;
            if (*v133)
            {
              v1369 = 0;
              v1370 = 0;
              v1371 = 0;
              v1372 = *(_QWORD *)(v132 + 152);
              v1373 = v241[19];
              v1374 = v131[19];
              do
              {
                if (v133[1])
                {
                  v1375 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1376 = 0;
                      v1377 = *(char *)(v1372 + v1371);
                      v1378 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1374 + v1376) = v1377 >> *((_BYTE *)v1373 + v1370 + v1376);
                        --v1378;
                        ++v1376;
                      }
                      while (v1378 > 1);
                      v132 = *v10;
                      v241 = (int **)*v11;
                      v133 = *(int **)*v10;
                    }
                    v1379 = *(_QWORD **)(v132 + 24);
                    v1380 = v1379[1];
                    v1371 += v1380;
                    v1370 += *((_QWORD *)v241[3] + 1);
                    v1374 += (int)v310;
                    ++v1375;
                    v1381 = v133[1];
                  }
                  while (v1375 < v1381);
                  v1368 = *v133;
                  v242 = *v241;
                }
                else
                {
                  v1381 = 0;
                  v1379 = *(_QWORD **)(v132 + 24);
                  v1380 = v1379[1];
                }
                v1371 = *v1379 + v1371 - v1381 * v1380;
                v1370 = *(_QWORD *)v241[3] + v1370 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1369;
              }
              while (v1369 < v1368);
            }
          }
          else if (v137 == 1)
          {
            v902 = *v133;
            if (*v133)
            {
              v903 = 0;
              v904 = 0;
              v905 = 0;
              v906 = *(_QWORD *)(v132 + 152);
              v907 = v241[19];
              v908 = v131[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v909 = 0;
                  v910 = *(char *)(v906 + v905);
                  v911 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v908 + v909) = v910 >> *((_BYTE *)v907 + v904 + v909);
                    --v911;
                    ++v909;
                  }
                  while (v911 > 1);
                  v132 = *v10;
                  v241 = (int **)*v11;
                  v902 = **(_DWORD **)*v10;
                }
                v905 += **(_QWORD **)(v132 + 24);
                v904 += *(_QWORD *)v241[3];
                v908 += (int)v310;
                ++v903;
              }
              while (v903 < v902);
            }
          }
          else if (v131[6])
          {
            v1629 = v241[19];
            v1645 = *(_QWORD *)(v132 + 152);
            v1664 = (int)v310;
            v1682 = 0;
            v1614 = v310 + 1;
            v1382 = v131[19];
            do
            {
              v1383 = *(_QWORD *)*v10;
              v1384 = (unint64_t)(*(_QWORD *)(*v10 + 8) - v1383) >> 2;
              v1385 = 0;
              v1386 = (v1384 - 1);
              if ((int)v1384 - 1 >= 0)
              {
                v1387 = *(_QWORD *)(*v10 + 24);
                v1388 = v1682;
                do
                {
                  v1389 = ldiv(v1388, *(int *)(v1383 + 4 * v1386));
                  v1388 = v1389.quot;
                  v1385 += *(_QWORD *)(v1387 + 8 * v1386--) * v1389.rem;
                }
                while (v1386 != -1);
              }
              v1390 = *(_QWORD *)*v11;
              v1391 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v1390) >> 2;
              v1392 = 0;
              v1393 = (v1391 - 1);
              if ((int)v1391 - 1 >= 0)
              {
                v1394 = *(_QWORD *)(*v11 + 24);
                v1395 = v1682;
                do
                {
                  v1396 = ldiv(v1395, *(int *)(v1390 + 4 * v1393));
                  v1395 = v1396.quot;
                  v1392 += *(_QWORD *)(v1394 + 8 * v1393--) * v1396.rem;
                }
                while (v1393 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1397 = 0;
                v1398 = *(char *)(v1645 + (int)v1385);
                v1399 = v1614;
                do
                {
                  *(_BYTE *)(v1382 + v1397) = v1398 >> *((_BYTE *)v1629 + (int)v1392 + v1397);
                  --v1399;
                  ++v1397;
                }
                while (v1399 > 1);
                v131 = *(_QWORD **)v1;
              }
              v1382 += v1664;
              v1682 += v1664;
            }
            while (v1682 < v131[6]);
          }
          break;
        case 2:
          if (v137 == 2)
          {
            v1400 = *v133;
            if (*v133)
            {
              v1401 = 0;
              v1402 = 0;
              v1403 = 0;
              v1404 = *(_QWORD *)(v132 + 152);
              v1405 = v241[19];
              v1406 = v131[19];
              do
              {
                if (v133[1])
                {
                  v1407 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1408 = 0;
                      v1409 = *((_BYTE *)v1405 + v1402);
                      v1410 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1406 + v1408) = *(char *)(v1404 + v1403 + v1408) >> v1409;
                        --v1410;
                        ++v1408;
                      }
                      while (v1410 > 1);
                      v132 = *v10;
                      v241 = (int **)*v11;
                      v133 = *(int **)*v10;
                    }
                    v1411 = *(_QWORD **)(v132 + 24);
                    v1412 = v1411[1];
                    v1403 += v1412;
                    v1402 += *((_QWORD *)v241[3] + 1);
                    v1406 += (int)v310;
                    ++v1407;
                    v1413 = v133[1];
                  }
                  while (v1407 < v1413);
                  v1400 = *v133;
                  v242 = *v241;
                }
                else
                {
                  v1413 = 0;
                  v1411 = *(_QWORD **)(v132 + 24);
                  v1412 = v1411[1];
                }
                v1403 = *v1411 + v1403 - v1413 * v1412;
                v1402 = *(_QWORD *)v241[3] + v1402 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1401;
              }
              while (v1401 < v1400);
            }
          }
          else if (v137 == 1)
          {
            v912 = *v133;
            if (*v133)
            {
              v913 = 0;
              v914 = 0;
              v915 = 0;
              v916 = *(_QWORD *)(v132 + 152);
              v917 = v241[19];
              v918 = v131[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v919 = 0;
                  v920 = *((_BYTE *)v917 + v914);
                  v921 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v918 + v919) = *(char *)(v916 + v915 + v919) >> v920;
                    --v921;
                    ++v919;
                  }
                  while (v921 > 1);
                  v132 = *v10;
                  v241 = (int **)*v11;
                  v912 = **(_DWORD **)*v10;
                }
                v915 += **(_QWORD **)(v132 + 24);
                v914 += *(_QWORD *)v241[3];
                v918 += (int)v310;
                ++v913;
              }
              while (v913 < v912);
            }
          }
          else if (v131[6])
          {
            v1630 = v241[19];
            v1646 = *(_QWORD *)(v132 + 152);
            v1665 = (int)v310;
            v1683 = 0;
            v1615 = v310 + 1;
            v1414 = v131[19];
            do
            {
              v1415 = *(_QWORD *)*v10;
              v1416 = (unint64_t)(*(_QWORD *)(*v10 + 8) - v1415) >> 2;
              v1417 = 0;
              v1418 = (v1416 - 1);
              if ((int)v1416 - 1 >= 0)
              {
                v1419 = *(_QWORD *)(*v10 + 24);
                v1420 = v1683;
                do
                {
                  v1421 = ldiv(v1420, *(int *)(v1415 + 4 * v1418));
                  v1420 = v1421.quot;
                  v1417 += *(_QWORD *)(v1419 + 8 * v1418--) * v1421.rem;
                }
                while (v1418 != -1);
              }
              v1422 = *(_QWORD *)*v11;
              v1423 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v1422) >> 2;
              v1424 = 0;
              v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                v1426 = *(_QWORD *)(*v11 + 24);
                v1427 = v1683;
                do
                {
                  v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  v1427 = v1428.quot;
                  v1424 += *(_QWORD *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1429 = 0;
                v1430 = *((_BYTE *)v1630 + (int)v1424);
                v1431 = v1615;
                do
                {
                  *(_BYTE *)(v1414 + v1429) = *(char *)(v1646 + (int)v1417 + v1429) >> v1430;
                  --v1431;
                  ++v1429;
                }
                while (v1431 > 1);
                v131 = *(_QWORD **)v1;
              }
              v1414 += v1665;
              v1683 += v1665;
            }
            while (v1683 < v131[6]);
          }
          break;
        case 3:
          if (v137 == 2)
          {
            v1129 = *v133;
            if (*v133)
            {
              v1130 = 0;
              v1131 = 0;
              v1132 = 0;
              v1133 = *(_QWORD *)(v132 + 152);
              v1134 = v241[19];
              v1135 = v131[19];
              do
              {
                if (v133[1])
                {
                  v1136 = 0;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1137 = 0;
                      v1138 = v310 + 1;
                      do
                      {
                        *(_BYTE *)(v1135 + v1137) = *(char *)(v1133 + v1132 + v1137) >> *((_BYTE *)v1134 + v1131 + v1137);
                        --v1138;
                        ++v1137;
                      }
                      while (v1138 > 1);
                      v132 = *v10;
                      v241 = (int **)*v11;
                      v133 = *(int **)*v10;
                    }
                    v1139 = *(_QWORD **)(v132 + 24);
                    v1140 = v1139[1];
                    v1132 += v1140;
                    v1131 += *((_QWORD *)v241[3] + 1);
                    v1135 += (int)v310;
                    ++v1136;
                    v1141 = v133[1];
                  }
                  while (v1136 < v1141);
                  v1129 = *v133;
                  v242 = *v241;
                }
                else
                {
                  v1141 = 0;
                  v1139 = *(_QWORD **)(v132 + 24);
                  v1140 = v1139[1];
                }
                v1132 = *v1139 + v1132 - v1141 * v1140;
                v1131 = *(_QWORD *)v241[3] + v1131 - *((_QWORD *)v241[3] + 1) * v242[1];
                ++v1130;
              }
              while (v1130 < v1129);
            }
          }
          else if (v137 == 1)
          {
            v357 = *v133;
            if (*v133)
            {
              v358 = 0;
              v359 = 0;
              v360 = 0;
              v361 = *(_QWORD *)(v132 + 152);
              v362 = v241[19];
              v363 = v131[19];
              do
              {
                if ((int)v310 >= 1)
                {
                  v364 = 0;
                  v365 = v310 + 1;
                  do
                  {
                    *(_BYTE *)(v363 + v364) = *(char *)(v361 + v360 + v364) >> *((_BYTE *)v362 + v359 + v364);
                    --v365;
                    ++v364;
                  }
                  while (v365 > 1);
                  v132 = *v10;
                  v241 = (int **)*v11;
                  v357 = **(_DWORD **)*v10;
                }
                v360 += **(_QWORD **)(v132 + 24);
                v359 += *(_QWORD *)v241[3];
                v363 += (int)v310;
                ++v358;
              }
              while (v358 < v357);
            }
          }
          else if (v131[6])
          {
            v1626 = v241[19];
            v1640 = *(_QWORD *)(v132 + 152);
            v1659 = (int)v310;
            v1681 = 0;
            v1611 = v310 + 1;
            v1142 = v131[19];
            do
            {
              v1143 = *(_QWORD *)*v10;
              v1144 = (unint64_t)(*(_QWORD *)(*v10 + 8) - v1143) >> 2;
              v1145 = 0;
              v1146 = (v1144 - 1);
              if ((int)v1144 - 1 >= 0)
              {
                v1147 = *(_QWORD *)(*v10 + 24);
                v1148 = v1681;
                do
                {
                  v1149 = ldiv(v1148, *(int *)(v1143 + 4 * v1146));
                  v1148 = v1149.quot;
                  v1145 += *(_QWORD *)(v1147 + 8 * v1146--) * v1149.rem;
                }
                while (v1146 != -1);
              }
              v1150 = *(_QWORD *)*v11;
              v1151 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v1150) >> 2;
              v1152 = 0;
              v1153 = (v1151 - 1);
              if ((int)v1151 - 1 >= 0)
              {
                v1154 = *(_QWORD *)(*v11 + 24);
                v1155 = v1681;
                do
                {
                  v1156 = ldiv(v1155, *(int *)(v1150 + 4 * v1153));
                  v1155 = v1156.quot;
                  v1152 += *(_QWORD *)(v1154 + 8 * v1153--) * v1156.rem;
                }
                while (v1153 != -1);
              }
              if ((int)v1689 >= 1)
              {
                v1157 = 0;
                v1158 = v1611;
                do
                {
                  *(_BYTE *)(v1142 + v1157) = *(char *)(v1640 + (int)v1145 + v1157) >> *((_BYTE *)v1626
                                                                                       + (int)v1152
                                                                                       + v1157);
                  --v1158;
                  ++v1157;
                }
                while (v1158 > 1);
                v131 = *(_QWORD **)v1;
              }
              v1142 += v1659;
              v1681 += v1659;
            }
            while (v1681 < v131[6]);
          }
          break;
        default:
LABEL_333:
          switch(v306)
          {
            case 1uLL:
              if (v131[6])
              {
                v311 = 0;
                v312 = 0;
                v313 = 0;
                v314 = *(_QWORD *)(v132 + 152);
                v315 = v241[19];
                v316 = v131[19];
                do
                {
                  *(_BYTE *)(v316 + v311) = *(char *)(v314 + v313) >> *((_BYTE *)v315 + v312);
                  v313 += **(_QWORD **)(*v10 + 24);
                  v312 += **(_QWORD **)(*v11 + 24);
                  ++v311;
                }
                while (v311 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
            case 2uLL:
              v647 = *v133;
              if (*v133)
              {
                v648 = 0;
                v649 = 0;
                v650 = 0;
                v651 = 0;
                v652 = *(_QWORD *)(v132 + 152);
                v653 = v241[19];
                v654 = v131[19];
                do
                {
                  if (v133[1])
                  {
                    v655 = 0;
                    do
                    {
                      *(_BYTE *)(v654 + v649 + v655) = *(char *)(v652 + v651) >> *((_BYTE *)v653 + v650);
                      v132 = *v10;
                      v656 = *(_QWORD **)(*v10 + 24);
                      v657 = v656[1];
                      v651 += v657;
                      v241 = (int **)*v11;
                      v658 = *(int **)(*v11 + 24);
                      v659 = *((_QWORD *)v658 + 1);
                      v650 += v659;
                      ++v655;
                      v133 = *(int **)*v10;
                      v660 = v133[1];
                    }
                    while (v655 < v660);
                    v647 = *v133;
                    v242 = *v241;
                    v649 += v655;
                  }
                  else
                  {
                    v660 = 0;
                    v656 = *(_QWORD **)(v132 + 24);
                    v657 = v656[1];
                    v658 = v241[3];
                    v659 = *((_QWORD *)v658 + 1);
                  }
                  v651 = *v656 + v651 - v660 * v657;
                  v650 = *(_QWORD *)v658 + v650 - v659 * v242[1];
                  ++v648;
                }
                while (v648 < v647);
              }
              break;
            case 3uLL:
              v661 = *v133;
              if (*v133)
              {
                v662 = 0;
                v663 = 0;
                v664 = 0;
                v665 = 0;
                v666 = *(_QWORD *)(v132 + 152);
                v667 = v241[19];
                v668 = v131[19];
                do
                {
                  if (v133[1])
                  {
                    v669 = 0;
                    do
                    {
                      if (v133[2])
                      {
                        v670 = 0;
                        do
                        {
                          *(_BYTE *)(v668 + v663 + v670) = *(char *)(v666 + v665) >> *((_BYTE *)v667 + v664);
                          v132 = *v10;
                          v671 = *(_QWORD **)(*v10 + 24);
                          v672 = v671[2];
                          v665 += v672;
                          v241 = (int **)*v11;
                          v673 = *(int **)(*v11 + 24);
                          v674 = *((_QWORD *)v673 + 2);
                          v664 += v674;
                          ++v670;
                          v133 = *(int **)*v10;
                          v675 = v133[2];
                        }
                        while (v670 < v675);
                        v242 = *v241;
                        v663 += v670;
                      }
                      else
                      {
                        v675 = 0;
                        v671 = *(_QWORD **)(v132 + 24);
                        v672 = v671[2];
                        v673 = v241[3];
                        v674 = *((_QWORD *)v673 + 2);
                      }
                      v676 = v671[1];
                      v665 = v676 + v665 - v675 * v672;
                      v664 = *((_QWORD *)v673 + 1) + v664 - v674 * v242[2];
                      ++v669;
                      v677 = v133[1];
                    }
                    while (v669 < v677);
                    v661 = *v133;
                  }
                  else
                  {
                    v677 = 0;
                    v671 = *(_QWORD **)(v132 + 24);
                    v676 = v671[1];
                  }
                  v665 = *v671 + v665 - v677 * v676;
                  v664 = *(_QWORD *)v241[3] + v664 - *((_QWORD *)v241[3] + 1) * v242[1];
                  ++v662;
                }
                while (v662 < v661);
              }
              break;
            case 4uLL:
              v678 = *v133;
              if (*v133)
              {
                v679 = 0;
                v680 = 0;
                v681 = 0;
                v682 = 0;
                v683 = *(_QWORD *)(v132 + 152);
                v684 = v241[19];
                v685 = v131[19];
                do
                {
                  if (v133[1])
                  {
                    v686 = 0;
                    do
                    {
                      if (v133[2])
                      {
                        v687 = 0;
                        do
                        {
                          if (v133[3])
                          {
                            v688 = 0;
                            do
                            {
                              *(_BYTE *)(v685 + v680 + v688) = *(char *)(v683 + v682) >> *((_BYTE *)v684 + v681);
                              v132 = *v10;
                              v689 = *(_QWORD **)(*v10 + 24);
                              v690 = v689[3];
                              v682 += v690;
                              v241 = (int **)*v11;
                              v691 = *(int **)(*v11 + 24);
                              v692 = *((_QWORD *)v691 + 3);
                              v681 += v692;
                              ++v688;
                              v133 = *(int **)*v10;
                              v693 = v133[3];
                            }
                            while (v688 < v693);
                            v242 = *v241;
                            v680 += v688;
                          }
                          else
                          {
                            v693 = 0;
                            v689 = *(_QWORD **)(v132 + 24);
                            v690 = v689[3];
                            v691 = v241[3];
                            v692 = *((_QWORD *)v691 + 3);
                          }
                          v694 = v689[2];
                          v682 = v694 + v682 - v693 * v690;
                          v681 = *((_QWORD *)v691 + 2) + v681 - v692 * v242[3];
                          ++v687;
                          v695 = v133[2];
                        }
                        while (v687 < v695);
                      }
                      else
                      {
                        v695 = 0;
                        v689 = *(_QWORD **)(v132 + 24);
                        v694 = v689[2];
                      }
                      v682 = v689[1] + v682 - v695 * v694;
                      v681 = *((_QWORD *)v241[3] + 1) + v681 - *((_QWORD *)v241[3] + 2) * v242[2];
                      ++v686;
                      v696 = v133[1];
                    }
                    while (v686 < v696);
                    v678 = *v133;
                  }
                  else
                  {
                    v696 = 0;
                  }
                  v682 = **(_QWORD **)(v132 + 24) + v682 - *(_QWORD *)(*(_QWORD *)(v132 + 24) + 8) * v696;
                  v681 = *(_QWORD *)v241[3] + v681 - *((_QWORD *)v241[3] + 1) * v242[1];
                  ++v679;
                }
                while (v679 < v678);
              }
              break;
            default:
              if (v131[6])
              {
                v631 = 0;
                v1676 = v241[19];
                v1691 = *(_QWORD *)(v132 + 152);
                v632 = v131[19];
                do
                {
                  v633 = *(_QWORD *)*v10;
                  v634 = (unint64_t)(*(_QWORD *)(*v10 + 8) - v633) >> 2;
                  v635 = 0;
                  v636 = (v634 - 1);
                  if ((int)v634 - 1 >= 0)
                  {
                    v637 = *(_QWORD *)(*v10 + 24);
                    v638 = v631;
                    do
                    {
                      v639 = ldiv(v638, *(int *)(v633 + 4 * v636));
                      v638 = v639.quot;
                      v635 += *(_QWORD *)(v637 + 8 * v636--) * v639.rem;
                    }
                    while (v636 != -1);
                  }
                  v640 = *(_QWORD *)*v11;
                  v641 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v640) >> 2;
                  v642 = 0;
                  v643 = (v641 - 1);
                  if ((int)v641 - 1 >= 0)
                  {
                    v644 = *(_QWORD *)(*v11 + 24);
                    v645 = v631;
                    do
                    {
                      v646 = ldiv(v645, *(int *)(v640 + 4 * v643));
                      v645 = v646.quot;
                      v642 += *(_QWORD *)(v644 + 8 * v643--) * v646.rem;
                    }
                    while (v643 != -1);
                  }
                  *(_BYTE *)(v632 + v631++) = *(char *)(v1691 + (int)v635) >> *((_BYTE *)v1676 + (int)v642);
                }
                while (v631 < *(_QWORD *)(*(_QWORD *)v1 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 4:
      v16 = *(uint64_t **)a1;
      v15 = *(uint64_t **)(a1 + 8);
      switch(v17)
      {
        case 0:
          v9 = **(int **)(*v16 + 152) >> **(_DWORD **)(*v15 + 152);
LABEL_10:
          **(_DWORD **)(*(_QWORD *)v1 + 152) = v9;
          return;
        case 1:
          v167 = *(_DWORD *)(*v15 + 160);
          if (v167 >= 1)
          {
            v168 = **(_DWORD **)(*v16 + 152);
            v169 = *(int **)(*(_QWORD *)v1 + 152);
            v170 = *(int **)(*v15 + 152);
            v171 = v167 + 1;
            do
            {
              v172 = *v170++;
              *v169++ = v168 >> v172;
              --v171;
            }
            while (v171 > 1);
          }
          return;
        case 2:
          v173 = *(_DWORD *)(*v16 + 160);
          if (v173 >= 1)
          {
            v174 = **(_DWORD **)(*v15 + 152);
            v175 = *(int **)(*(_QWORD *)v1 + 152);
            v176 = *(int **)(*v16 + 152);
            v177 = v173 + 1;
            do
            {
              v178 = *v176++;
              *v175++ = v178 >> v174;
              --v177;
            }
            while (v177 > 1);
          }
          return;
        case 3:
          v179 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v179 >= 1)
          {
            v180 = *(int **)(*(_QWORD *)v1 + 152);
            v181 = *(int **)(*v15 + 152);
            v182 = *(int **)(*v16 + 152);
            v183 = v179 + 1;
            do
            {
              v185 = *v182++;
              v184 = v185;
              v186 = *v181++;
              *v180++ = v184 >> v186;
              --v183;
            }
            while (v183 > 1);
          }
          return;
        default:
          v158 = *(_QWORD **)v1;
          v159 = (_QWORD *)*v16;
          v160 = *(int **)*v16;
          v161 = (v159[1] - (_QWORD)v160) >> 2;
          v162 = (v161 - 1);
          if ((int)v162 >= -1)
            v163 = -1;
          else
            v163 = v161 - 1;
          v164 = v163 + 1;
          v165 = v161 + 1;
          break;
      }
      while (1)
      {
        v166 = v165 - 2;
        if (v165 - 2 < 0)
          break;
        --v165;
        if (*(_QWORD *)(v159[3] + 8 * v166) != *(_QWORD *)(v158[3] + 8 * v166))
          goto LABEL_204;
      }
      v165 = v164;
LABEL_204:
      v248 = (_QWORD *)*v15;
      v249 = *(int **)*v15;
      v250 = (v248[1] - (_QWORD)v249) >> 2;
      v251 = (v250 - 1);
      if ((int)v251 >= -1)
        v252 = -1;
      else
        v252 = v250 - 1;
      v253 = v252 + 1;
      v254 = v250 + 1;
      while (1)
      {
        v255 = v254 - 2;
        if (v254 - 2 < 0)
          break;
        --v254;
        if (*(_QWORD *)(v248[3] + 8 * v255) != *(_QWORD *)(v158[3] + 8 * v255))
          goto LABEL_235;
      }
      v254 = v253;
LABEL_235:
      v270 = v161 + 1;
      while (1)
      {
        v271 = v270 - 2;
        if (v270 - 2 < 0)
          break;
        --v270;
        if (*(_QWORD *)(v159[3] + 8 * v271))
          goto LABEL_260;
      }
      v270 = v164;
LABEL_260:
      v280 = v250 + 1;
      while (1)
      {
        v281 = v280 - 2;
        if (v280 - 2 < 0)
          break;
        --v280;
        if (*(_QWORD *)(v248[3] + 8 * v281))
          goto LABEL_339;
      }
      v280 = v253;
LABEL_339:
      v317 = (uint64_t)(v158[1] - *v158) >> 2;
      if (v165 <= v254)
        v318 = v254;
      else
        v318 = v165;
      if (v165 <= v280)
        v165 = v280;
      if (v270 > v254)
        v254 = v270;
      if (v317 > v254)
      {
        v319 = 1;
      }
      else
      {
        v254 = (uint64_t)(v158[1] - *v158) >> 2;
        v319 = 4;
      }
      if (v317 > v165)
      {
        v320 = 2;
      }
      else
      {
        v165 = v254;
        v320 = v319;
      }
      if (v317 > v318)
      {
        v165 = v318;
        v320 = 3;
      }
      v1672 = v251;
      v1687 = v162;
      if (!v165)
        goto LABEL_356;
      v321 = *(_QWORD *)(v158[3] + 8 * (v165 - 1));
      if (v321 < 0x10)
        goto LABEL_356;
      switch(v320)
      {
        case 1:
          if (v165 == 2)
          {
            v1432 = *v160;
            if (*v160)
            {
              v1433 = 0;
              v1434 = 0;
              v1435 = 0;
              v1436 = v159[19];
              v1437 = v248[19];
              v1438 = v158[19];
              v1439 = (uint64_t *)v159[3];
              v1440 = *v1439;
              v1441 = v1439[1];
              v1442 = (uint64_t *)v248[3];
              v1443 = *v1442;
              v1444 = v1442[1];
              v1445 = v160[1];
              v1446 = v1445;
              do
              {
                if (v1446)
                {
                  v1447 = 0;
                  v1448 = v1437 + 4 * v1434;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1449 = 0;
                      v1450 = *(_DWORD *)(v1436 + 4 * v1435);
                      v1451 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1438 + v1449) = v1450 >> *(_DWORD *)(v1448 + v1449);
                        --v1451;
                        v1449 += 4;
                      }
                      while (v1451 > 1);
                      v1445 = v160[1];
                    }
                    v1435 += v1441;
                    v1434 += v1444;
                    v1438 += 4 * (int)v321;
                    ++v1447;
                    v1448 += 4 * v1444;
                  }
                  while (v1447 < v1445);
                  v1452 = v1445;
                  v1432 = *v160;
                  v1446 = v1445;
                }
                else
                {
                  v1452 = 0;
                }
                v1435 = v1435 + v1440 - v1452 * v1441;
                v1434 = v1434 + v1443 - v1444 * v249[1];
                ++v1433;
              }
              while (v1433 < v1432);
            }
          }
          else if (v165 == 1)
          {
            v922 = *v160;
            if (*v160)
            {
              v923 = 0;
              v924 = 0;
              v925 = v159[19];
              v926 = v248[19];
              v927 = v158[19];
              v928 = *(_QWORD *)v159[3];
              v929 = 4 * *(_QWORD *)v248[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v930 = 0;
                  v931 = *(_DWORD *)(v925 + 4 * v924);
                  v932 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v927 + v930) = v931 >> *(_DWORD *)(v926 + v930);
                    --v932;
                    v930 += 4;
                  }
                  while (v932 > 1);
                  v922 = *v160;
                }
                v924 += v928;
                ++v923;
                v927 += 4 * (int)v321;
                v926 += v929;
              }
              while (v923 < v922);
            }
          }
          else
          {
            v1647 = v158[6];
            if (v1647)
            {
              v1666 = 0;
              v1589 = v248[19];
              v1603 = v159[19];
              v1453 = v158[19];
              do
              {
                v1454 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1455 = v159[3];
                  v1456 = v162;
                  v1457 = v1666;
                  do
                  {
                    v1458 = ldiv(v1457, v160[v1456]);
                    v1457 = v1458.quot;
                    v1454 += *(_QWORD *)(v1455 + 8 * v1456--) * v1458.rem;
                  }
                  while (v1456 != -1);
                }
                v1459 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1460) = 0;
                }
                else
                {
                  v1460 = 0;
                  v1461 = v248[3];
                  v1462 = v1666;
                  do
                  {
                    v1463 = ldiv(v1462, v249[v1459]);
                    v1462 = v1463.quot;
                    v1460 += *(_QWORD *)(v1461 + 8 * v1459--) * v1463.rem;
                  }
                  while (v1459 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1464 = 0;
                  v1465 = *(_DWORD *)(v1603 + 4 * (int)v1454);
                  v1466 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1453 + v1464) = v1465 >> *(_DWORD *)(v1589 + 4 * (int)v1460 + v1464);
                    --v1466;
                    v1464 += 4;
                  }
                  while (v1466 > 1);
                }
                v1453 += 4 * (int)v321;
                v1666 += (int)v321;
              }
              while (v1666 < v1647);
            }
          }
          break;
        case 2:
          if (v165 == 2)
          {
            v1467 = *v160;
            if (*v160)
            {
              v1468 = 0;
              v1469 = 0;
              v1470 = 0;
              v1471 = v159[19];
              v1472 = v248[19];
              v1473 = v158[19];
              v1474 = (uint64_t *)v159[3];
              v1475 = *v1474;
              v1476 = v1474[1];
              v1477 = (uint64_t *)v248[3];
              v1478 = *v1477;
              v1479 = v1477[1];
              v1480 = v160[1];
              v1481 = v1480;
              do
              {
                if (v1481)
                {
                  v1482 = 0;
                  v1483 = v1471 + 4 * v1470;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1484 = 0;
                      v1485 = *(_DWORD *)(v1472 + 4 * v1469);
                      v1486 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1473 + v1484) = *(int *)(v1483 + v1484) >> v1485;
                        --v1486;
                        v1484 += 4;
                      }
                      while (v1486 > 1);
                      v1480 = v160[1];
                    }
                    v1470 += v1476;
                    v1469 += v1479;
                    v1473 += 4 * (int)v321;
                    ++v1482;
                    v1483 += 4 * v1476;
                  }
                  while (v1482 < v1480);
                  v1487 = v1480;
                  v1467 = *v160;
                  v1481 = v1480;
                }
                else
                {
                  v1487 = 0;
                }
                v1470 = v1470 + v1475 - v1487 * v1476;
                v1469 = v1469 + v1478 - v1479 * v249[1];
                ++v1468;
              }
              while (v1468 < v1467);
            }
          }
          else if (v165 == 1)
          {
            v933 = *v160;
            if (*v160)
            {
              v934 = 0;
              v935 = 0;
              v936 = v159[19];
              v937 = v248[19];
              v938 = v158[19];
              v939 = *(_QWORD *)v248[3];
              v940 = 4 * *(_QWORD *)v159[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v941 = 0;
                  v942 = *(_DWORD *)(v937 + 4 * v935);
                  v943 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v938 + v941) = *(int *)(v936 + v941) >> v942;
                    --v943;
                    v941 += 4;
                  }
                  while (v943 > 1);
                  v933 = *v160;
                }
                v935 += v939;
                ++v934;
                v938 += 4 * (int)v321;
                v936 += v940;
              }
              while (v934 < v933);
            }
          }
          else
          {
            v1648 = v158[6];
            if (v1648)
            {
              v1667 = 0;
              v1590 = v248[19];
              v1604 = v159[19];
              v1488 = v158[19];
              do
              {
                v1489 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1490 = v159[3];
                  v1491 = v162;
                  v1492 = v1667;
                  do
                  {
                    v1493 = ldiv(v1492, v160[v1491]);
                    v1492 = v1493.quot;
                    v1489 += *(_QWORD *)(v1490 + 8 * v1491--) * v1493.rem;
                  }
                  while (v1491 != -1);
                }
                v1494 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1495) = 0;
                }
                else
                {
                  v1495 = 0;
                  v1496 = v248[3];
                  v1497 = v1667;
                  do
                  {
                    v1498 = ldiv(v1497, v249[v1494]);
                    v1497 = v1498.quot;
                    v1495 += *(_QWORD *)(v1496 + 8 * v1494--) * v1498.rem;
                  }
                  while (v1494 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1499 = 0;
                  v1500 = *(_DWORD *)(v1590 + 4 * (int)v1495);
                  v1501 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1488 + v1499) = *(int *)(v1604 + 4 * (int)v1489 + v1499) >> v1500;
                    --v1501;
                    v1499 += 4;
                  }
                  while (v1501 > 1);
                }
                v1488 += 4 * (int)v321;
                v1667 += (int)v321;
              }
              while (v1667 < v1648);
            }
          }
          break;
        case 3:
          if (v165 == 2)
          {
            v1159 = *v160;
            if (*v160)
            {
              v1160 = 0;
              v1161 = 0;
              v1162 = 0;
              v1163 = v159[19];
              v1164 = v248[19];
              v1165 = v158[19];
              v1166 = (uint64_t *)v159[3];
              v1167 = *v1166;
              v1168 = v1166[1];
              v1169 = (uint64_t *)v248[3];
              v1170 = *v1169;
              v1171 = v1169[1];
              v1172 = v160[1];
              v1173 = v1172;
              do
              {
                if (v1173)
                {
                  v1174 = 0;
                  v1175 = v1164 + 4 * v1161;
                  v1176 = v1163 + 4 * v1162;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1177 = 0;
                      v1178 = v321 + 1;
                      do
                      {
                        *(_DWORD *)(v1165 + v1177) = *(int *)(v1176 + v1177) >> *(_DWORD *)(v1175 + v1177);
                        --v1178;
                        v1177 += 4;
                      }
                      while (v1178 > 1);
                      v1172 = v160[1];
                    }
                    v1162 += v1168;
                    v1161 += v1171;
                    v1165 += 4 * (int)v321;
                    ++v1174;
                    v1175 += 4 * v1171;
                    v1176 += 4 * v1168;
                  }
                  while (v1174 < v1172);
                  v1179 = v1172;
                  v1159 = *v160;
                  v1173 = v1172;
                }
                else
                {
                  v1179 = 0;
                }
                v1162 = v1162 + v1167 - v1179 * v1168;
                v1161 = v1161 + v1170 - v1171 * v249[1];
                ++v1160;
              }
              while (v1160 < v1159);
            }
          }
          else if (v165 == 1)
          {
            v366 = *v160;
            if (*v160)
            {
              v367 = 0;
              v368 = v159[19];
              v369 = v248[19];
              v370 = v158[19];
              v371 = 4 * *(_QWORD *)v248[3];
              v372 = 4 * *(_QWORD *)v159[3];
              do
              {
                if ((int)v321 >= 1)
                {
                  v373 = 0;
                  v374 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v370 + v373) = *(int *)(v368 + v373) >> *(_DWORD *)(v369 + v373);
                    --v374;
                    v373 += 4;
                  }
                  while (v374 > 1);
                  v366 = *v160;
                }
                ++v367;
                v370 += 4 * (int)v321;
                v369 += v371;
                v368 += v372;
              }
              while (v367 < v366);
            }
          }
          else
          {
            v1641 = v158[6];
            if (v1641)
            {
              v1660 = 0;
              v1583 = v248[19];
              v1597 = v159[19];
              v1180 = v158[19];
              do
              {
                v1181 = 0;
                if ((v162 & 0x80000000) == 0)
                {
                  v1182 = v159[3];
                  v1183 = v162;
                  v1184 = v1660;
                  do
                  {
                    v1185 = ldiv(v1184, v160[v1183]);
                    v1184 = v1185.quot;
                    v1181 += *(_QWORD *)(v1182 + 8 * v1183--) * v1185.rem;
                  }
                  while (v1183 != -1);
                }
                v1186 = v1672;
                if ((v1672 & 0x80000000) != 0)
                {
                  LODWORD(v1187) = 0;
                }
                else
                {
                  v1187 = 0;
                  v1188 = v248[3];
                  v1189 = v1660;
                  do
                  {
                    v1190 = ldiv(v1189, v249[v1186]);
                    v1189 = v1190.quot;
                    v1187 += *(_QWORD *)(v1188 + 8 * v1186--) * v1190.rem;
                  }
                  while (v1186 != -1);
                }
                v162 = v1687;
                if ((int)v321 >= 1)
                {
                  v1191 = 0;
                  v1192 = v321 + 1;
                  do
                  {
                    *(_DWORD *)(v1180 + v1191) = *(int *)(v1597 + 4 * (int)v1181 + v1191) >> *(_DWORD *)(v1583 + 4 * (int)v1187 + v1191);
                    --v1192;
                    v1191 += 4;
                  }
                  while (v1192 > 1);
                }
                v1180 += 4 * (int)v321;
                v1660 += (int)v321;
              }
              while (v1660 < v1641);
            }
          }
          break;
        default:
LABEL_356:
          switch(v317)
          {
            case 1uLL:
              v322 = v158[6];
              if (v322)
              {
                v323 = (int *)v159[19];
                v324 = (_DWORD *)v248[19];
                v325 = (int *)v158[19];
                v326 = 4 * *(_QWORD *)v248[3];
                v327 = 4 * *(_QWORD *)v159[3];
                do
                {
                  *v325++ = *v323 >> *v324;
                  v324 = (_DWORD *)((char *)v324 + v326);
                  v323 = (int *)((char *)v323 + v327);
                  --v322;
                }
                while (v322);
              }
              break;
            case 2uLL:
              v709 = *v160;
              if (*v160)
              {
                v710 = 0;
                v711 = 0;
                v712 = 0;
                v713 = 0;
                v714 = v159[19];
                v715 = v248[19];
                v716 = v158[19];
                v717 = (uint64_t *)v159[3];
                v718 = *v717;
                v719 = v717[1];
                v720 = (uint64_t *)v248[3];
                v722 = *v720;
                v721 = v720[1];
                v723 = v160[1];
                do
                {
                  if (v723)
                  {
                    for (n = 0; n < v723; ++n)
                    {
                      *(_DWORD *)(v716 + 4 * v711 + 4 * n) = *(int *)(v714 + 4 * v713) >> *(_DWORD *)(v715 + 4 * v712);
                      v713 += v719;
                      v712 += v721;
                      v723 = v160[1];
                    }
                    v725 = v723;
                    v709 = *v160;
                    v711 += n;
                  }
                  else
                  {
                    v725 = 0;
                  }
                  v713 = v713 + v718 - v725 * v719;
                  v712 = v712 + v722 - v721 * v249[1];
                  ++v710;
                }
                while (v710 < v709);
              }
              break;
            case 3uLL:
              v726 = *v160;
              if (*v160)
              {
                v727 = 0;
                v728 = 0;
                v729 = 0;
                v730 = 0;
                v731 = v159[19];
                v732 = v248[19];
                v733 = v158[19];
                v734 = (uint64_t *)v159[3];
                v735 = *v734;
                v736 = v734[1];
                v737 = (uint64_t *)v248[3];
                v738 = *v737;
                v739 = v737[1];
                v740 = v160[1];
                v741 = v740;
                do
                {
                  if (v741)
                  {
                    v742 = 0;
                    v743 = v734[2];
                    v744 = v737[2];
                    v745 = v160[2];
                    do
                    {
                      if (v745)
                      {
                        for (ii = 0; ii < v745; ++ii)
                        {
                          *(_DWORD *)(v733 + 4 * v728 + 4 * ii) = *(int *)(v731 + 4 * v730) >> *(_DWORD *)(v732 + 4 * v729);
                          v730 += v743;
                          v729 += v744;
                          v745 = v160[2];
                        }
                        v747 = v745;
                        v740 = v160[1];
                        v728 += ii;
                      }
                      else
                      {
                        v747 = 0;
                      }
                      v730 = v730 + v736 - v747 * v743;
                      v729 = v729 + v739 - v744 * v249[2];
                      ++v742;
                    }
                    while (v742 < v740);
                    v748 = v740;
                    v726 = *v160;
                    v741 = v740;
                  }
                  else
                  {
                    v748 = 0;
                  }
                  v730 = v730 + v735 - v748 * v736;
                  v729 = v729 + v738 - v739 * v249[1];
                  ++v727;
                }
                while (v727 < v726);
              }
              break;
            case 4uLL:
              v749 = *v160;
              if (*v160)
              {
                v750 = 0;
                v751 = 0;
                v752 = 0;
                v753 = 0;
                v754 = v159[19];
                v755 = v248[19];
                v756 = v158[19];
                v757 = (uint64_t *)v159[3];
                v758 = *v757;
                v759 = v757[1];
                v760 = (uint64_t *)v248[3];
                v761 = *v760;
                v762 = v760[1];
                v763 = v160[1];
                v764 = v763;
                do
                {
                  if (v764)
                  {
                    v765 = 0;
                    v766 = v757[2];
                    v767 = v760[2];
                    v768 = v160[2];
                    v769 = v768;
                    do
                    {
                      if (v769)
                      {
                        v770 = 0;
                        v771 = v757[3];
                        v772 = v760[3];
                        v773 = v160[3];
                        do
                        {
                          if (v773)
                          {
                            for (jj = 0; jj < v773; ++jj)
                            {
                              *(_DWORD *)(v756 + 4 * v751 + 4 * jj) = *(int *)(v754 + 4 * v753) >> *(_DWORD *)(v755 + 4 * v752);
                              v753 += v771;
                              v752 += v772;
                              v773 = v160[3];
                            }
                            v775 = v773;
                            v768 = v160[2];
                            v751 += jj;
                          }
                          else
                          {
                            v775 = 0;
                          }
                          v753 = v753 + v766 - v775 * v771;
                          v752 = v752 + v767 - v772 * v249[3];
                          ++v770;
                        }
                        while (v770 < v768);
                        v776 = v768;
                        v763 = v160[1];
                        v769 = v768;
                      }
                      else
                      {
                        v776 = 0;
                      }
                      v753 = v753 + v759 - v776 * v766;
                      v752 = v752 + v762 - v767 * v249[2];
                      ++v765;
                    }
                    while (v765 < v763);
                    v777 = v763;
                    v749 = *v160;
                    v764 = v763;
                  }
                  else
                  {
                    v777 = 0;
                  }
                  v753 = v753 + v758 - v777 * v759;
                  v752 = v752 + v761 - v762 * v249[1];
                  ++v750;
                }
                while (v750 < v749);
              }
              break;
            default:
              v697 = v158[6];
              if (v697)
              {
                v698 = 0;
                v1633 = v248[19];
                v1655 = v159[19];
                v1619 = v158[19];
                do
                {
                  v699 = 0;
                  if ((v162 & 0x80000000) == 0)
                  {
                    v700 = v159[3];
                    v701 = v162;
                    v702 = v698;
                    do
                    {
                      v703 = ldiv(v702, v160[v701]);
                      v702 = v703.quot;
                      v699 += *(_QWORD *)(v700 + 8 * v701--) * v703.rem;
                    }
                    while (v701 != -1);
                  }
                  v704 = v1672;
                  if ((v1672 & 0x80000000) != 0)
                  {
                    LODWORD(v705) = 0;
                  }
                  else
                  {
                    v705 = 0;
                    v706 = v248[3];
                    v707 = v698;
                    do
                    {
                      v708 = ldiv(v707, v249[v704]);
                      v707 = v708.quot;
                      v705 += *(_QWORD *)(v706 + 8 * v704--) * v708.rem;
                    }
                    while (v704 != -1);
                  }
                  *(_DWORD *)(v1619 + 4 * v698++) = *(int *)(v1655 + 4 * (int)v699) >> *(_DWORD *)(v1633 + 4 * (int)v705);
                  v162 = v1687;
                }
                while (v698 != v697);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      v19 = *(uint64_t **)a1;
      v18 = *(uint64_t **)(a1 + 8);
      switch(v20)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)v1 + 152) = **(uint64_t **)(*v19 + 152) >> **(_QWORD **)(*v18 + 152);
          return;
        case 1:
          v196 = *(_DWORD *)(*v18 + 160);
          if (v196 >= 1)
          {
            v197 = **(_QWORD **)(*v19 + 152);
            v198 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v199 = *(uint64_t **)(*v18 + 152);
            v200 = v196 + 1;
            do
            {
              v201 = *v199++;
              *v198++ = v197 >> v201;
              --v200;
            }
            while (v200 > 1);
          }
          return;
        case 2:
          v202 = *(_DWORD *)(*v19 + 160);
          if (v202 >= 1)
          {
            v203 = **(_QWORD **)(*v18 + 152);
            v204 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v205 = *(uint64_t **)(*v19 + 152);
            v206 = v202 + 1;
            do
            {
              v207 = *v205++;
              *v204++ = v207 >> v203;
              --v206;
            }
            while (v206 > 1);
          }
          return;
        case 3:
          v208 = *(_DWORD *)(*(_QWORD *)v1 + 48);
          if (v208 >= 1)
          {
            v209 = *(uint64_t **)(*(_QWORD *)v1 + 152);
            v210 = *(uint64_t **)(*v18 + 152);
            v211 = *(uint64_t **)(*v19 + 152);
            v212 = v208 + 1;
            do
            {
              v214 = *v211++;
              v213 = v214;
              v215 = *v210++;
              *v209++ = v213 >> v215;
              --v212;
            }
            while (v212 > 1);
          }
          return;
        default:
          v187 = *(_QWORD **)v1;
          v188 = (_QWORD *)*v19;
          v189 = *(int **)*v19;
          v190 = (v188[1] - (_QWORD)v189) >> 2;
          v191 = (v190 - 1);
          if ((int)v191 >= -1)
            v192 = -1;
          else
            v192 = v190 - 1;
          v193 = v192 + 1;
          v194 = v190 + 1;
          break;
      }
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](exception, "[BitwiseBinary::eval_cpu] Type not supported");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  while (1)
  {
    v195 = v194 - 2;
    if (v194 - 2 < 0)
      break;
    --v194;
    if (*(_QWORD *)(v188[3] + 8 * v195) != *(_QWORD *)(v187[3] + 8 * v195))
      goto LABEL_212;
  }
  v194 = v193;
LABEL_212:
  v256 = (_QWORD *)*v18;
  v257 = *(int **)*v18;
  v258 = (v256[1] - (_QWORD)v257) >> 2;
  v259 = (v258 - 1);
  if ((int)v259 >= -1)
    v260 = -1;
  else
    v260 = v258 - 1;
  v261 = v260 + 1;
  v262 = v258 + 1;
  while (1)
  {
    v263 = v262 - 2;
    if (v262 - 2 < 0)
      break;
    --v262;
    if (*(_QWORD *)(v256[3] + 8 * v263) != *(_QWORD *)(v187[3] + 8 * v263))
      goto LABEL_240;
  }
  v262 = v261;
LABEL_240:
  v272 = v190 + 1;
  while (1)
  {
    v273 = v272 - 2;
    if (v272 - 2 < 0)
      break;
    --v272;
    if (*(_QWORD *)(v188[3] + 8 * v273))
      goto LABEL_265;
  }
  v272 = v193;
LABEL_265:
  v282 = v258 + 1;
  while (1)
  {
    v283 = v282 - 2;
    if (v282 - 2 < 0)
      break;
    --v282;
    if (*(_QWORD *)(v256[3] + 8 * v283))
      goto LABEL_362;
  }
  v282 = v261;
LABEL_362:
  v328 = (uint64_t)(v187[1] - *v187) >> 2;
  if (v194 <= v262)
    v329 = v262;
  else
    v329 = v194;
  if (v194 <= v282)
    v194 = v282;
  if (v272 > v262)
    v262 = v272;
  if (v328 > v262)
  {
    v330 = 1;
  }
  else
  {
    v262 = (uint64_t)(v187[1] - *v187) >> 2;
    v330 = 4;
  }
  if (v328 > v194)
  {
    v331 = 2;
  }
  else
  {
    v194 = v262;
    v331 = v330;
  }
  if (v328 > v329)
  {
    v194 = v329;
    v331 = 3;
  }
  v1673 = v259;
  v1688 = v191;
  if (!v194)
    goto LABEL_379;
  v332 = *(_QWORD *)(v187[3] + 8 * (v194 - 1));
  if (v332 < 0x10)
    goto LABEL_379;
  switch(v331)
  {
    case 1:
      if (v194 == 2)
      {
        v1502 = *v189;
        if ((_DWORD)v1502)
        {
          v1503 = 0;
          v1504 = 0;
          v1505 = 0;
          v1506 = v188[19];
          v1507 = v256[19];
          v1508 = v187[19];
          v1509 = v189[1];
          v1510 = (uint64_t *)v188[3];
          v1511 = *v1510;
          v1512 = v1510[1];
          v1513 = (uint64_t *)v256[3];
          v1514 = *v1513;
          v1515 = v1513[1];
          if (v1509 <= 1)
            v1516 = 1;
          else
            v1516 = v189[1];
          v1517 = v1511 - v1512 * v1509;
          v1518 = v1514 - v1515 * v257[1];
          do
          {
            if ((_DWORD)v1509)
            {
              v1519 = 0;
              v1520 = v1507 + 8 * v1504;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1521 = 0;
                  v1522 = *(_QWORD *)(v1506 + 8 * v1505);
                  v1523 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1508 + v1521) = v1522 >> *(_QWORD *)(v1520 + v1521);
                    --v1523;
                    v1521 += 8;
                  }
                  while (v1523 > 1);
                }
                v1505 += v1512;
                v1504 += v1515;
                v1508 += 8 * (int)v332;
                ++v1519;
                v1520 += 8 * v1515;
              }
              while (v1519 != v1516);
            }
            v1505 += v1517;
            v1504 += v1518;
            ++v1503;
          }
          while (v1503 != v1502);
        }
      }
      else if (v194 == 1)
      {
        v944 = *v189;
        if ((_DWORD)v944)
        {
          v945 = 0;
          v946 = 0;
          v947 = v188[19];
          v948 = v256[19];
          v949 = v187[19];
          v950 = *(_QWORD *)v188[3];
          v951 = 8 * *(_QWORD *)v256[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v952 = 0;
              v953 = *(_QWORD *)(v947 + 8 * v946);
              v954 = v332 + 1;
              do
              {
                *(_QWORD *)(v949 + v952) = v953 >> *(_QWORD *)(v948 + v952);
                --v954;
                v952 += 8;
              }
              while (v954 > 1);
            }
            v946 += v950;
            ++v945;
            v949 += 8 * (int)v332;
            v948 += v951;
          }
          while (v945 != v944);
        }
      }
      else
      {
        v1649 = v187[6];
        if (v1649)
        {
          v1668 = 0;
          v1591 = v256[19];
          v1605 = v188[19];
          v1524 = v187[19];
          do
          {
            v1525 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1526 = v188[3];
              v1527 = v191;
              v1528 = v1668;
              do
              {
                v1529 = ldiv(v1528, v189[v1527]);
                v1528 = v1529.quot;
                v1525 += *(_QWORD *)(v1526 + 8 * v1527--) * v1529.rem;
              }
              while (v1527 != -1);
            }
            v1530 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1531) = 0;
            }
            else
            {
              v1531 = 0;
              v1532 = v256[3];
              v1533 = v1668;
              do
              {
                v1534 = ldiv(v1533, v257[v1530]);
                v1533 = v1534.quot;
                v1531 += *(_QWORD *)(v1532 + 8 * v1530--) * v1534.rem;
              }
              while (v1530 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1535 = 0;
              v1536 = *(_QWORD *)(v1605 + 8 * (int)v1525);
              v1537 = v332 + 1;
              do
              {
                *(_QWORD *)(v1524 + v1535) = v1536 >> *(_QWORD *)(v1591 + 8 * (int)v1531 + v1535);
                --v1537;
                v1535 += 8;
              }
              while (v1537 > 1);
            }
            v1524 += 8 * (int)v332;
            v1668 += (int)v332;
          }
          while (v1668 < v1649);
        }
      }
      break;
    case 2:
      if (v194 == 2)
      {
        v1538 = *v189;
        if ((_DWORD)v1538)
        {
          v1539 = 0;
          v1540 = 0;
          v1541 = 0;
          v1542 = v188[19];
          v1543 = v256[19];
          v1544 = v187[19];
          v1545 = v189[1];
          v1546 = (uint64_t *)v188[3];
          v1547 = *v1546;
          v1548 = v1546[1];
          v1549 = (uint64_t *)v256[3];
          v1550 = *v1549;
          v1551 = v1549[1];
          if (v1545 <= 1)
            v1552 = 1;
          else
            v1552 = v189[1];
          v1553 = v1547 - v1548 * v1545;
          v1554 = v1550 - v1551 * v257[1];
          do
          {
            if ((_DWORD)v1545)
            {
              v1555 = 0;
              v1556 = v1542 + 8 * v1541;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1557 = 0;
                  v1558 = *(_QWORD *)(v1543 + 8 * v1540);
                  v1559 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1544 + v1557) = *(uint64_t *)(v1556 + v1557) >> v1558;
                    --v1559;
                    v1557 += 8;
                  }
                  while (v1559 > 1);
                }
                v1541 += v1548;
                v1540 += v1551;
                v1544 += 8 * (int)v332;
                ++v1555;
                v1556 += 8 * v1548;
              }
              while (v1555 != v1552);
            }
            v1541 += v1553;
            v1540 += v1554;
            ++v1539;
          }
          while (v1539 != v1538);
        }
      }
      else if (v194 == 1)
      {
        v955 = *v189;
        if ((_DWORD)v955)
        {
          v956 = 0;
          v957 = 0;
          v958 = v188[19];
          v959 = v256[19];
          v960 = v187[19];
          v961 = *(_QWORD *)v256[3];
          v962 = 8 * *(_QWORD *)v188[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v963 = 0;
              v964 = *(_QWORD *)(v959 + 8 * v957);
              v965 = v332 + 1;
              do
              {
                *(_QWORD *)(v960 + v963) = *(uint64_t *)(v958 + v963) >> v964;
                --v965;
                v963 += 8;
              }
              while (v965 > 1);
            }
            v957 += v961;
            ++v956;
            v960 += 8 * (int)v332;
            v958 += v962;
          }
          while (v956 != v955);
        }
      }
      else
      {
        v1650 = v187[6];
        if (v1650)
        {
          v1669 = 0;
          v1592 = v256[19];
          v1606 = v188[19];
          v1560 = v187[19];
          do
          {
            v1561 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1562 = v188[3];
              v1563 = v191;
              v1564 = v1669;
              do
              {
                v1565 = ldiv(v1564, v189[v1563]);
                v1564 = v1565.quot;
                v1561 += *(_QWORD *)(v1562 + 8 * v1563--) * v1565.rem;
              }
              while (v1563 != -1);
            }
            v1566 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1567) = 0;
            }
            else
            {
              v1567 = 0;
              v1568 = v256[3];
              v1569 = v1669;
              do
              {
                v1570 = ldiv(v1569, v257[v1566]);
                v1569 = v1570.quot;
                v1567 += *(_QWORD *)(v1568 + 8 * v1566--) * v1570.rem;
              }
              while (v1566 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1571 = 0;
              v1572 = *(_QWORD *)(v1592 + 8 * (int)v1567);
              v1573 = v332 + 1;
              do
              {
                *(_QWORD *)(v1560 + v1571) = *(uint64_t *)(v1606 + 8 * (int)v1561 + v1571) >> v1572;
                --v1573;
                v1571 += 8;
              }
              while (v1573 > 1);
            }
            v1560 += 8 * (int)v332;
            v1669 += (int)v332;
          }
          while (v1669 < v1650);
        }
      }
      break;
    case 3:
      if (v194 == 2)
      {
        v1193 = *v189;
        if ((_DWORD)v1193)
        {
          v1194 = 0;
          v1195 = 0;
          v1196 = 0;
          v1197 = v188[19];
          v1198 = v256[19];
          v1199 = v187[19];
          v1200 = v189[1];
          v1201 = (uint64_t *)v188[3];
          v1202 = *v1201;
          v1203 = v1201[1];
          v1204 = (uint64_t *)v256[3];
          v1205 = *v1204;
          v1206 = v1204[1];
          if (v1200 <= 1)
            v1207 = 1;
          else
            v1207 = v189[1];
          v1208 = v1202 - v1203 * v1200;
          v1209 = v1205 - v1206 * v257[1];
          do
          {
            if ((_DWORD)v1200)
            {
              v1210 = 0;
              v1211 = v1198 + 8 * v1195;
              v1212 = v1197 + 8 * v1196;
              do
              {
                if ((int)v332 >= 1)
                {
                  v1213 = 0;
                  v1214 = v332 + 1;
                  do
                  {
                    *(_QWORD *)(v1199 + v1213) = *(uint64_t *)(v1212 + v1213) >> *(_QWORD *)(v1211 + v1213);
                    --v1214;
                    v1213 += 8;
                  }
                  while (v1214 > 1);
                }
                v1196 += v1203;
                v1195 += v1206;
                v1199 += 8 * (int)v332;
                ++v1210;
                v1211 += 8 * v1206;
                v1212 += 8 * v1203;
              }
              while (v1210 != v1207);
            }
            v1196 += v1208;
            v1195 += v1209;
            ++v1194;
          }
          while (v1194 != v1193);
        }
      }
      else if (v194 == 1)
      {
        v375 = *v189;
        if ((_DWORD)v375)
        {
          v376 = 0;
          v377 = v188[19];
          v378 = v256[19];
          v379 = v187[19];
          v380 = 8 * *(_QWORD *)v256[3];
          v381 = 8 * *(_QWORD *)v188[3];
          do
          {
            if ((int)v332 >= 1)
            {
              v382 = 0;
              v383 = v332 + 1;
              do
              {
                *(_QWORD *)(v379 + v382) = *(uint64_t *)(v377 + v382) >> *(_QWORD *)(v378 + v382);
                --v383;
                v382 += 8;
              }
              while (v383 > 1);
            }
            ++v376;
            v379 += 8 * (int)v332;
            v378 += v380;
            v377 += v381;
          }
          while (v376 != v375);
        }
      }
      else
      {
        v1642 = v187[6];
        if (v1642)
        {
          v1661 = 0;
          v1584 = v256[19];
          v1598 = v188[19];
          v1215 = v187[19];
          do
          {
            v1216 = 0;
            if ((v191 & 0x80000000) == 0)
            {
              v1217 = v188[3];
              v1218 = v191;
              v1219 = v1661;
              do
              {
                v1220 = ldiv(v1219, v189[v1218]);
                v1219 = v1220.quot;
                v1216 += *(_QWORD *)(v1217 + 8 * v1218--) * v1220.rem;
              }
              while (v1218 != -1);
            }
            v1221 = v1673;
            if ((v1673 & 0x80000000) != 0)
            {
              LODWORD(v1222) = 0;
            }
            else
            {
              v1222 = 0;
              v1223 = v256[3];
              v1224 = v1661;
              do
              {
                v1225 = ldiv(v1224, v257[v1221]);
                v1224 = v1225.quot;
                v1222 += *(_QWORD *)(v1223 + 8 * v1221--) * v1225.rem;
              }
              while (v1221 != -1);
            }
            v191 = v1688;
            if ((int)v332 >= 1)
            {
              v1226 = 0;
              v1227 = v332 + 1;
              do
              {
                *(_QWORD *)(v1215 + v1226) = *(uint64_t *)(v1598 + 8 * (int)v1216 + v1226) >> *(_QWORD *)(v1584 + 8 * (int)v1222 + v1226);
                --v1227;
                v1226 += 8;
              }
              while (v1227 > 1);
            }
            v1215 += 8 * (int)v332;
            v1661 += (int)v332;
          }
          while (v1661 < v1642);
        }
      }
      break;
    default:
LABEL_379:
      switch(v328)
      {
        case 1uLL:
          v333 = v187[6];
          if (v333)
          {
            v334 = (uint64_t *)v188[19];
            v335 = (_QWORD *)v256[19];
            v336 = (uint64_t *)v187[19];
            v337 = 8 * *(_QWORD *)v256[3];
            v338 = 8 * *(_QWORD *)v188[3];
            do
            {
              *v336++ = *v334 >> *v335;
              v335 = (_QWORD *)((char *)v335 + v337);
              v334 = (uint64_t *)((char *)v334 + v338);
              --v333;
            }
            while (v333);
          }
          break;
        case 2uLL:
          v790 = *v189;
          if ((_DWORD)v790)
          {
            v791 = 0;
            v792 = 0;
            v793 = 0;
            v794 = 0;
            v795 = v188[19];
            v796 = v256[19];
            v797 = v187[19];
            v798 = v189[1];
            v799 = (uint64_t *)v188[3];
            v800 = *v799;
            v801 = v799[1];
            v802 = (uint64_t *)v256[3];
            v803 = *v802;
            v804 = v802[1];
            v805 = v803 - v804 * v257[1];
            if (v798 <= 1)
              v806 = 1;
            else
              v806 = v189[1];
            v807 = v800 - v801 * v798;
            do
            {
              if ((_DWORD)v798)
              {
                v808 = v792 + v806;
                v809 = (uint64_t *)(v797 + 8 * v792);
                v810 = v806;
                do
                {
                  *v809++ = *(uint64_t *)(v795 + 8 * v794) >> *(_QWORD *)(v796 + 8 * v793);
                  v794 += v801;
                  v793 += v804;
                  --v810;
                }
                while (v810);
                v792 = v808;
              }
              v794 += v807;
              v793 += v805;
              ++v791;
            }
            while (v791 != v790);
          }
          break;
        case 3uLL:
          v811 = *v189;
          if ((_DWORD)v811)
          {
            v812 = 0;
            v813 = 0;
            v814 = 0;
            v815 = 0;
            v816 = v188[19];
            v817 = v256[19];
            v818 = v187[19];
            v819 = v189[1];
            v820 = (_QWORD *)v188[3];
            v821 = v820[1];
            v822 = (_QWORD *)v256[3];
            v823 = v822[1];
            v824 = *v822 - v823 * v257[1];
            if (v819 <= 1)
              v825 = 1;
            else
              v825 = v189[1];
            v826 = *v820 - v821 * v819;
            do
            {
              if ((_DWORD)v819)
              {
                v827 = 0;
                v828 = v189[2];
                v829 = v820[2];
                v830 = v822[2];
                if (v828 <= 1)
                  v831 = 1;
                else
                  v831 = v189[2];
                v832 = v823 - v830 * v257[2];
                do
                {
                  v833 = v831;
                  if ((_DWORD)v828)
                  {
                    do
                    {
                      *(_QWORD *)(v818 + 8 * v813++) = *(uint64_t *)(v816 + 8 * v815) >> *(_QWORD *)(v817 + 8 * v814);
                      v815 += v829;
                      v814 += v830;
                      --v833;
                    }
                    while (v833);
                  }
                  v815 += v821 - v829 * v828;
                  v814 += v832;
                  ++v827;
                }
                while (v827 != v825);
              }
              v815 += v826;
              v814 += v824;
              ++v812;
            }
            while (v812 != v811);
          }
          break;
        case 4uLL:
          v1692 = *v189;
          if ((_DWORD)v1692)
          {
            v834 = 0;
            v835 = 0;
            v836 = 0;
            v837 = 0;
            v838 = v188[19];
            v839 = v256[19];
            v840 = v187[19];
            v841 = v189[1];
            v842 = (_QWORD *)v188[3];
            v843 = (_QWORD *)v256[3];
            v1609 = v843[1];
            v1621 = v842[1];
            v1657 = *v843 - v1609 * v257[1];
            v1677 = v189[1];
            if (v841 <= 1)
              v844 = 1;
            else
              v844 = v189[1];
            v1635 = *v842 - v842[1] * v841;
            do
            {
              if (v1677)
              {
                v845 = 0;
                v846 = v189[2];
                v847 = v842[2];
                v848 = v843[2];
                if (v846 <= 1)
                  v849 = 1;
                else
                  v849 = v189[2];
                v850 = v1609 - v848 * v257[2];
                do
                {
                  if ((_DWORD)v846)
                  {
                    v851 = 0;
                    v852 = v189[3];
                    v853 = v842[3];
                    v854 = v843[3];
                    if (v852 <= 1)
                      v855 = 1;
                    else
                      v855 = v189[3];
                    v856 = v848 - v854 * v257[3];
                    do
                    {
                      v857 = v855;
                      if ((_DWORD)v852)
                      {
                        do
                        {
                          *(_QWORD *)(v840 + 8 * v835++) = *(uint64_t *)(v838 + 8 * v837) >> *(_QWORD *)(v839 + 8 * v836);
                          v837 += v853;
                          v836 += v854;
                          --v857;
                        }
                        while (v857);
                      }
                      v837 += v847 - v853 * v852;
                      v836 += v856;
                      ++v851;
                    }
                    while (v851 != v849);
                  }
                  v837 += v1621 - v847 * v846;
                  v836 += v850;
                  ++v845;
                }
                while (v845 != v844);
              }
              v837 += v1635;
              v836 += v1657;
              ++v834;
            }
            while (v834 != v1692);
          }
          break;
        default:
          v778 = v187[6];
          if (v778)
          {
            v779 = 0;
            v1634 = v256[19];
            v1656 = v188[19];
            v1620 = v187[19];
            do
            {
              v780 = 0;
              if ((v191 & 0x80000000) == 0)
              {
                v781 = v188[3];
                v782 = v191;
                v783 = v779;
                do
                {
                  v784 = ldiv(v783, v189[v782]);
                  v783 = v784.quot;
                  v780 += *(_QWORD *)(v781 + 8 * v782--) * v784.rem;
                }
                while (v782 != -1);
              }
              v785 = v1673;
              if ((v1673 & 0x80000000) != 0)
              {
                LODWORD(v786) = 0;
              }
              else
              {
                v786 = 0;
                v787 = v256[3];
                v788 = v779;
                do
                {
                  v789 = ldiv(v788, v257[v785]);
                  v788 = v789.quot;
                  v786 += *(_QWORD *)(v787 + 8 * v785--) * v789.rem;
                }
                while (v785 != -1);
              }
              *(_QWORD *)(v1620 + 8 * v779++) = *(uint64_t *)(v1656 + 8 * (int)v780) >> *(_QWORD *)(v1634 + 8 * (int)v786);
              v191 = v1688;
            }
            while (v779 != v778);
          }
          break;
      }
      return;
  }
}

void sub_2423E8970(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan2::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t *v3;
  uint64_t **v5;
  int binary_op_type;
  int v7;
  float v8;
  float *v9;
  float *v10;
  unsigned int v11;
  float v12;
  int v13;
  float *v14;
  float *v15;
  float *v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  int v22;
  float v23;
  float *v24;
  float *v25;
  unsigned int v26;
  float v27;
  _QWORD *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  float *v54;
  float *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  ldiv_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  ldiv_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  float v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  ldiv_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  ldiv_t v225;
  uint64_t v226;
  float v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int quot;
  uint64_t v237;
  ldiv_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  ldiv_t v243;
  uint64_t v244;
  float v245;
  unsigned int v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  ldiv_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  ldiv_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  _QWORD *v266;
  std::logic_error *exception;
  std::logic_error *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t *v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  int v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  std::string v359;
  uint64_t v360;
  uint64_t v361;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::ArcTan2::eval();
  if (*(_QWORD *)(*(_QWORD *)a3 + 56) != 6)
  {
    v360 = *(_QWORD *)(*(_QWORD *)a3 + 56);
    if (mlx::core::issubdtype((unsigned int *)&v360, &mlx::core::inexact))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v360);
      v266 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v360, (uint64_t)"[arctan2] Does not support ", 27);
      v359.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
      mlx::core::operator<<(v266, &v359);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v361, &v359);
      std::logic_error::logic_error(exception, &v359);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    v268 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v268, "[arctan2] Cannot compute inverse tangent for arrays with non floating point type.");
    __cxa_throw(v268, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v5 = (uint64_t **)(v3 + 2);
  switch(binary_op_type)
  {
    case 0:
      **(float **)(*(_QWORD *)a3 + 152) = atan2f(**(float **)(*v3 + 152), **(float **)(v3[2] + 152));
      return;
    case 1:
      v21 = v3[2];
      v22 = *(_DWORD *)(v21 + 160);
      if (v22 >= 1)
      {
        v23 = **(float **)(*v3 + 152);
        v24 = *(float **)(*(_QWORD *)a3 + 152);
        v25 = *(float **)(v21 + 152);
        v26 = v22 + 1;
        do
        {
          v27 = *v25++;
          *v24++ = atan2f(v23, v27);
          --v26;
        }
        while (v26 > 1);
      }
      return;
    case 2:
      v7 = *(_DWORD *)(*v3 + 160);
      if (v7 >= 1)
      {
        v8 = **(float **)(v3[2] + 152);
        v9 = *(float **)(*(_QWORD *)a3 + 152);
        v10 = *(float **)(*v3 + 152);
        v11 = v7 + 1;
        do
        {
          v12 = *v10++;
          *v9++ = atan2f(v12, v8);
          --v11;
        }
        while (v11 > 1);
      }
      return;
    case 3:
      v13 = *(_DWORD *)(*(_QWORD *)a3 + 48);
      if (v13 >= 1)
      {
        v14 = *(float **)(*(_QWORD *)a3 + 152);
        v15 = *(float **)(v3[2] + 152);
        v16 = *(float **)(*v3 + 152);
        v17 = v13 + 1;
        do
        {
          v18 = *v16++;
          v19 = v18;
          v20 = *v15++;
          *v14++ = atan2f(v19, v20);
          --v17;
        }
        while (v17 > 1);
      }
      return;
    default:
      v28 = *(_QWORD **)a3;
      v29 = *v3;
      v30 = *(int **)*v3;
      v31 = (*(_QWORD *)(*v3 + 8) - (_QWORD)v30) >> 2;
      v32 = (v31 - 1);
      if ((int)v32 >= -1)
        v33 = -1;
      else
        v33 = v31 - 1;
      v34 = v33 + 1;
      v35 = v31 + 1;
      while (1)
      {
        v36 = v35 - 2;
        if (v35 - 2 < 0)
          break;
        --v35;
        if (*(_QWORD *)(*(_QWORD *)(v29 + 24) + 8 * v36) != *(_QWORD *)(v28[3] + 8 * v36))
          goto LABEL_25;
      }
      v35 = v34;
LABEL_25:
      v37 = *v5;
      v38 = **v5;
      v39 = (unint64_t)((*v5)[1] - v38) >> 2;
      v40 = (v39 - 1);
      if ((int)v40 >= -1)
        v41 = -1;
      else
        v41 = v39 - 1;
      v42 = v41 + 1;
      v43 = v39 + 1;
      while (1)
      {
        v44 = v43 - 2;
        if (v43 - 2 < 0)
          break;
        --v43;
        if (*(_QWORD *)(v37[3] + 8 * v44) != *(_QWORD *)(v28[3] + 8 * v44))
          goto LABEL_33;
      }
      v43 = v42;
LABEL_33:
      v45 = v31 + 1;
      while (1)
      {
        v46 = v45 - 2;
        if (v45 - 2 < 0)
          break;
        --v45;
        if (*(_QWORD *)(*(_QWORD *)(v29 + 24) + 8 * v46))
          goto LABEL_38;
      }
      v45 = v34;
LABEL_38:
      v47 = v39 + 1;
      while (1)
      {
        v48 = v47 - 2;
        if (v47 - 2 < 0)
          break;
        --v47;
        if (*(_QWORD *)(v37[3] + 8 * v48))
          goto LABEL_43;
      }
      v47 = v42;
LABEL_43:
      v49 = (uint64_t)(v28[1] - *v28) >> 2;
      if (v35 <= v43)
        v50 = v43;
      else
        v50 = v35;
      if (v35 <= v47)
        v35 = v47;
      if (v45 > v43)
        v43 = v45;
      if (v49 > v43)
      {
        v51 = 1;
      }
      else
      {
        v43 = (uint64_t)(v28[1] - *v28) >> 2;
        v51 = 4;
      }
      if (v49 > v35)
      {
        v52 = 2;
      }
      else
      {
        v35 = v43;
        v52 = v51;
      }
      if (v49 > v50)
      {
        v35 = v50;
        v52 = 3;
      }
      v288 = *(int **)*v3;
      v289 = **v5;
      v339 = v40;
      v345 = v32;
      if (!v35)
        goto LABEL_60;
      v354 = *(_QWORD *)(v28[3] + 8 * (v35 - 1));
      if (v354 < 0x10)
        goto LABEL_60;
      switch(v52)
      {
        case 1:
          if (v35 == 2)
          {
            v309 = *v30;
            if ((_DWORD)v309)
            {
              v177 = 0;
              v178 = 0;
              v179 = 0;
              v337 = *(_QWORD *)(v29 + 152);
              v286 = v37[19];
              v180 = v28[19];
              v181 = v288[1];
              v182 = *(uint64_t **)(v29 + 24);
              v183 = *v182;
              v184 = v182[1];
              v185 = (_QWORD *)v37[3];
              v186 = v185[1];
              if (v181 <= 1)
                v187 = 1;
              else
                v187 = v288[1];
              v344 = v187;
              v352 = v184;
              v299 = v183 - v184 * v181;
              v304 = v288[1];
              v294 = *v185 - v186 * *(int *)(v38 + 4);
              v188 = v185[1];
              v189 = 4 * v186;
              do
              {
                v318 = v177;
                if (v304)
                {
                  v190 = 0;
                  v191 = v286 + 4 * v178;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      v192 = 0;
                      v193 = *(float *)(v337 + 4 * v179);
                      v194 = v354 + 1;
                      do
                      {
                        *(float *)(v180 + v192) = atan2f(v193, *(float *)(v191 + v192));
                        --v194;
                        v192 += 4;
                      }
                      while (v194 > 1);
                    }
                    v179 += v352;
                    v178 += v188;
                    v180 += 4 * (int)v354;
                    ++v190;
                    v191 += v189;
                  }
                  while (v190 != v344);
                }
                v179 += v299;
                v178 += v294;
                v177 = v318 + 1;
              }
              while (v318 + 1 != v309);
            }
          }
          else
          {
            v335 = *v5;
            if (v35 == 1)
            {
              v150 = *v30;
              if ((_DWORD)v150)
              {
                v151 = 0;
                v152 = 0;
                v350 = *(_QWORD *)(v29 + 152);
                v153 = v37[19];
                v154 = v28[19];
                v155 = **(_QWORD **)(v29 + 24);
                v156 = 4 * *(_QWORD *)v37[3];
                do
                {
                  if ((int)v354 >= 1)
                  {
                    v157 = 0;
                    v158 = *(float *)(v350 + 4 * v152);
                    v159 = v354 + 1;
                    do
                    {
                      *(float *)(v154 + v157) = atan2f(v158, *(float *)(v153 + v157));
                      --v159;
                      v157 += 4;
                    }
                    while (v159 > 1);
                  }
                  v152 += v155;
                  ++v151;
                  v154 += 4 * (int)v354;
                  v153 += v156;
                }
                while (v151 != v150);
              }
            }
            else
            {
              v327 = v28[6];
              if (v327)
              {
                v231 = 0;
                v312 = v37[19];
                v320 = *(_QWORD *)(v29 + 152);
                v232 = v28[19];
                do
                {
                  v233 = 0;
                  if ((v32 & 0x80000000) != 0)
                  {
                    v237 = v289;
                  }
                  else
                  {
                    v234 = *(_QWORD *)(v29 + 24);
                    v235 = v32;
                    quot = v231;
                    v237 = v289;
                    do
                    {
                      v238 = ldiv(quot, v288[v235]);
                      quot = v238.quot;
                      v233 += *(_QWORD *)(v234 + 8 * v235--) * v238.rem;
                    }
                    while (v235 != -1);
                  }
                  v239 = v339;
                  if ((v339 & 0x80000000) != 0)
                  {
                    LODWORD(v240) = 0;
                  }
                  else
                  {
                    v240 = 0;
                    v241 = v335[3];
                    v242 = v231;
                    do
                    {
                      v243 = ldiv(v242, *(int *)(v237 + 4 * v239));
                      v242 = v243.quot;
                      v240 += *(_QWORD *)(v241 + 8 * v239--) * v243.rem;
                    }
                    while (v239 != -1);
                  }
                  if ((int)v354 >= 1)
                  {
                    v244 = 0;
                    v245 = *(float *)(v320 + 4 * (int)v233);
                    v246 = v354 + 1;
                    v247 = v312 + 4 * (int)v240;
                    do
                    {
                      *(float *)(v232 + v244) = atan2f(v245, *(float *)(v247 + v244));
                      --v246;
                      v244 += 4;
                    }
                    while (v246 > 1);
                  }
                  v231 += (int)v354;
                  v232 += 4 * (int)v354;
                  v32 = v345;
                }
                while (v231 < v327);
              }
            }
          }
          break;
        case 2:
          if (v35 == 2)
          {
            v308 = *v30;
            if ((_DWORD)v308)
            {
              v160 = 0;
              v161 = 0;
              v162 = 0;
              v285 = *(_QWORD *)(v29 + 152);
              v336 = v37[19];
              v163 = v28[19];
              v164 = v288[1];
              v165 = *(uint64_t **)(v29 + 24);
              v166 = *v165;
              v167 = v165[1];
              v168 = (_QWORD *)v37[3];
              if (v164 <= 1)
                v169 = 1;
              else
                v169 = v288[1];
              v343 = v169;
              v351 = v168[1];
              v298 = v166 - v167 * v164;
              v303 = v288[1];
              v293 = *v168 - v351 * *(int *)(v38 + 4);
              v170 = v167;
              v171 = 4 * v167;
              do
              {
                v317 = v160;
                if (v303)
                {
                  v172 = 0;
                  v173 = v285 + 4 * v162;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      v174 = 0;
                      v175 = *(float *)(v336 + 4 * v161);
                      v176 = v354 + 1;
                      do
                      {
                        *(float *)(v163 + v174) = atan2f(*(float *)(v173 + v174), v175);
                        --v176;
                        v174 += 4;
                      }
                      while (v176 > 1);
                    }
                    v162 += v170;
                    v161 += v351;
                    v163 += 4 * (int)v354;
                    ++v172;
                    v173 += v171;
                  }
                  while (v172 != v343);
                }
                v162 += v298;
                v161 += v293;
                v160 = v317 + 1;
              }
              while (v317 + 1 != v308);
            }
          }
          else
          {
            v334 = *v5;
            if (v35 == 1)
            {
              v139 = *v30;
              if ((_DWORD)v139)
              {
                v140 = 0;
                v141 = 0;
                v142 = *(_QWORD *)(v29 + 152);
                v349 = v37[19];
                v143 = v28[19];
                v144 = **(_QWORD **)(v29 + 24);
                v145 = *(_QWORD *)v37[3];
                v146 = 4 * v144;
                do
                {
                  if ((int)v354 >= 1)
                  {
                    v147 = 0;
                    v148 = *(float *)(v349 + 4 * v141);
                    v149 = v354 + 1;
                    do
                    {
                      *(float *)(v143 + v147) = atan2f(*(float *)(v142 + v147), v148);
                      --v149;
                      v147 += 4;
                    }
                    while (v149 > 1);
                  }
                  v141 += v145;
                  ++v140;
                  v143 += 4 * (int)v354;
                  v142 += v146;
                }
                while (v140 != v139);
              }
            }
            else
            {
              v326 = v28[6];
              if (v326)
              {
                v213 = 0;
                v311 = v37[19];
                v319 = *(_QWORD *)(v29 + 152);
                v214 = v28[19];
                do
                {
                  v215 = 0;
                  if ((v32 & 0x80000000) != 0)
                  {
                    v219 = v289;
                  }
                  else
                  {
                    v216 = *(_QWORD *)(v29 + 24);
                    v217 = v32;
                    v218 = v213;
                    v219 = v289;
                    do
                    {
                      v220 = ldiv(v218, v288[v217]);
                      v218 = v220.quot;
                      v215 += *(_QWORD *)(v216 + 8 * v217--) * v220.rem;
                    }
                    while (v217 != -1);
                  }
                  v221 = v339;
                  if ((v339 & 0x80000000) != 0)
                  {
                    LODWORD(v222) = 0;
                  }
                  else
                  {
                    v222 = 0;
                    v223 = v334[3];
                    v224 = v213;
                    do
                    {
                      v225 = ldiv(v224, *(int *)(v219 + 4 * v221));
                      v224 = v225.quot;
                      v222 += *(_QWORD *)(v223 + 8 * v221--) * v225.rem;
                    }
                    while (v221 != -1);
                  }
                  if ((int)v354 >= 1)
                  {
                    v226 = 0;
                    v227 = *(float *)(v311 + 4 * (int)v222);
                    v228 = v215 << 32;
                    v229 = v354 + 1;
                    v230 = v319 + (v228 >> 30);
                    do
                    {
                      *(float *)(v214 + v226) = atan2f(*(float *)(v230 + v226), v227);
                      --v229;
                      v226 += 4;
                    }
                    while (v229 > 1);
                  }
                  v213 += (int)v354;
                  v214 += 4 * (int)v354;
                  v32 = v345;
                }
                while (v213 < v326);
              }
            }
          }
          break;
        case 3:
          if (v35 == 2)
          {
            v305 = *v30;
            if ((_DWORD)v305)
            {
              v195 = 0;
              v196 = 0;
              v197 = 0;
              v282 = v37[19];
              v287 = *(_QWORD *)(v29 + 152);
              v198 = v28[19];
              v199 = v288[1];
              v200 = *(uint64_t **)(v29 + 24);
              v201 = *v200;
              v202 = v200[1];
              v203 = (_QWORD *)v37[3];
              v204 = v203[1];
              if (v199 <= 1)
                v205 = 1;
              else
                v205 = v288[1];
              v295 = v201 - v202 * v199;
              v300 = v288[1];
              v353 = v205;
              v290 = *v203 - v204 * *(int *)(v38 + 4);
              v206 = v203[1];
              v207 = v202;
              v325 = 4 * v202;
              v338 = 4 * v204;
              do
              {
                v310 = v195;
                if (v300)
                {
                  v208 = 0;
                  v209 = v282 + 4 * v196;
                  v210 = v287 + 4 * v197;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      v211 = 0;
                      v212 = v354 + 1;
                      do
                      {
                        *(float *)(v198 + v211) = atan2f(*(float *)(v210 + v211), *(float *)(v209 + v211));
                        --v212;
                        v211 += 4;
                      }
                      while (v212 > 1);
                    }
                    v197 += v207;
                    v196 += v206;
                    v198 += 4 * (int)v354;
                    ++v208;
                    v209 += v338;
                    v210 += v325;
                  }
                  while (v208 != v353);
                }
                v197 += v295;
                v196 += v290;
                v195 = v310 + 1;
              }
              while (v310 + 1 != v305);
            }
          }
          else
          {
            v329 = *v5;
            if (v35 == 1)
            {
              v60 = *v30;
              if ((_DWORD)v60)
              {
                v61 = 0;
                v62 = *(_QWORD *)(v29 + 152);
                v63 = v37[19];
                v64 = v28[19];
                v65 = 4 * *(_QWORD *)v37[3];
                v66 = 4 * **(_QWORD **)(v29 + 24);
                do
                {
                  if ((int)v354 >= 1)
                  {
                    v67 = 0;
                    v68 = v354 + 1;
                    do
                    {
                      *(float *)(v64 + v67) = atan2f(*(float *)(v62 + v67), *(float *)(v63 + v67));
                      --v68;
                      v67 += 4;
                    }
                    while (v68 > 1);
                  }
                  ++v61;
                  v64 += 4 * (int)v354;
                  v63 += v65;
                  v62 += v66;
                }
                while (v61 != v60);
              }
            }
            else
            {
              v328 = v28[6];
              if (v328)
              {
                v248 = 0;
                v313 = v37[19];
                v321 = *(_QWORD *)(v29 + 152);
                v249 = v28[19];
                do
                {
                  v250 = 0;
                  if ((v32 & 0x80000000) != 0)
                  {
                    v254 = v289;
                  }
                  else
                  {
                    v251 = *(_QWORD *)(v29 + 24);
                    v252 = v32;
                    v253 = v248;
                    v254 = v289;
                    do
                    {
                      v255 = ldiv(v253, v288[v252]);
                      v253 = v255.quot;
                      v250 += *(_QWORD *)(v251 + 8 * v252--) * v255.rem;
                    }
                    while (v252 != -1);
                  }
                  v256 = v339;
                  if ((v339 & 0x80000000) != 0)
                  {
                    LODWORD(v257) = 0;
                  }
                  else
                  {
                    v257 = 0;
                    v258 = v329[3];
                    v259 = v248;
                    do
                    {
                      v260 = ldiv(v259, *(int *)(v254 + 4 * v256));
                      v259 = v260.quot;
                      v257 += *(_QWORD *)(v258 + 8 * v256--) * v260.rem;
                    }
                    while (v256 != -1);
                  }
                  if ((int)v354 >= 1)
                  {
                    v261 = 0;
                    v262 = v313 + 4 * (int)v257;
                    v263 = v250 << 32;
                    v264 = v354 + 1;
                    v265 = v321 + (v263 >> 30);
                    do
                    {
                      *(float *)(v249 + v261) = atan2f(*(float *)(v265 + v261), *(float *)(v262 + v261));
                      --v264;
                      v261 += 4;
                    }
                    while (v264 > 1);
                  }
                  v248 += (int)v354;
                  v249 += 4 * (int)v354;
                  v32 = v345;
                }
                while (v248 < v328);
              }
            }
          }
          break;
        default:
LABEL_60:
          switch(v49)
          {
            case 1uLL:
              v53 = v28[6];
              if (v53)
              {
                v54 = *(float **)(v29 + 152);
                v55 = (float *)v37[19];
                v56 = (float *)v28[19];
                v57 = **(_QWORD **)(v29 + 24);
                v58 = 4 * *(_QWORD *)v37[3];
                v59 = 4 * v57;
                do
                {
                  *v56++ = atan2f(*v54, *v55);
                  v55 = (float *)((char *)v55 + v58);
                  v54 = (float *)((char *)v54 + v59);
                  --v53;
                }
                while (v53);
              }
              break;
            case 2uLL:
              v357 = *v30;
              if ((_DWORD)v357)
              {
                v110 = 0;
                v111 = 0;
                v112 = 0;
                v113 = 0;
                v114 = *(_QWORD *)(v29 + 152);
                v115 = v37[19];
                v324 = v28[19];
                v116 = v288[1];
                v117 = *(uint64_t **)(v29 + 24);
                v118 = *v117;
                v119 = v117[1];
                v120 = (_QWORD *)v37[3];
                v121 = v120[1];
                v342 = *v120 - v121 * *(int *)(v38 + 4);
                v348 = v288[1];
                if (v116 <= 1)
                  v122 = 1;
                else
                  v122 = v288[1];
                v316 = v122;
                v332 = v118 - v119 * v116;
                do
                {
                  if (v348)
                  {
                    v123 = v316;
                    v124 = v111 + v316;
                    v125 = (float *)(v324 + 4 * v111);
                    do
                    {
                      *v125++ = atan2f(*(float *)(v114 + 4 * v113), *(float *)(v115 + 4 * v112));
                      v113 += v119;
                      v112 += v121;
                      --v123;
                    }
                    while (v123);
                    v111 = v124;
                  }
                  v113 += v332;
                  v112 += v342;
                  ++v110;
                }
                while (v110 != v357);
              }
              break;
            case 3uLL:
              v306 = *v30;
              if ((_DWORD)v306)
              {
                v69 = 0;
                v70 = 0;
                v71 = 0;
                v72 = 0;
                v73 = *(_QWORD *)(v29 + 152);
                v74 = v37[19];
                v75 = v28[19];
                v76 = v288[1];
                v77 = *(_QWORD **)(v29 + 24);
                v78 = *v77;
                v79 = v77[1];
                v280 = v79;
                v283 = v77;
                v80 = (_QWORD *)v37[3];
                v276 = v80[1];
                v278 = v80;
                v296 = *v80 - v276 * *(int *)(v38 + 4);
                v301 = v288[1];
                if (v76 <= 1)
                  v81 = 1;
                else
                  v81 = v288[1];
                v322 = v81;
                v291 = v78 - v79 * v76;
                do
                {
                  v314 = v69;
                  if (v301)
                  {
                    v82 = 0;
                    v83 = v288[2];
                    v84 = v283[2];
                    v85 = v278[2];
                    if (v83 <= 1)
                      v86 = 1;
                    else
                      v86 = v288[2];
                    v346 = v86;
                    v355 = v288[2];
                    v330 = v276 - v85 * *(int *)(v289 + 8);
                    v340 = v280 - v84 * v83;
                    do
                    {
                      v87 = v346;
                      if (v355)
                      {
                        do
                        {
                          *(float *)(v75 + 4 * v70++) = atan2f(*(float *)(v73 + 4 * v72), *(float *)(v74 + 4 * v71));
                          v72 += v84;
                          v71 += v85;
                          --v87;
                        }
                        while (v87);
                      }
                      v72 += v340;
                      v71 += v330;
                      ++v82;
                    }
                    while (v82 != v322);
                  }
                  v72 += v291;
                  v71 += v296;
                  v69 = v314 + 1;
                }
                while (v314 + 1 != v306);
              }
              break;
            case 4uLL:
              v274 = *v30;
              if ((_DWORD)v274)
              {
                v88 = 0;
                v89 = 0;
                v90 = 0;
                v91 = 0;
                v92 = *(_QWORD *)(v29 + 152);
                v93 = v37[19];
                v94 = v28[19];
                v95 = v288[1];
                v96 = *(_QWORD **)(v29 + 24);
                v97 = *v96;
                v98 = v96[1];
                v284 = v96;
                v99 = (_QWORD *)v37[3];
                v281 = v99;
                v269 = v99[1];
                v270 = v98;
                v272 = *v99 - v269 * *(int *)(v38 + 4);
                v273 = v288[1];
                if (v95 <= 1)
                  v100 = 1;
                else
                  v100 = v288[1];
                v292 = v100;
                v271 = v97 - v98 * v95;
                do
                {
                  v275 = v88;
                  if (v273)
                  {
                    v101 = 0;
                    v102 = v288[2];
                    if (v102 <= 1)
                      v103 = 1;
                    else
                      v103 = v288[2];
                    v323 = v103;
                    v277 = v281[2];
                    v279 = v284[2];
                    v302 = v270 - v279 * v102;
                    v307 = v288[2];
                    v297 = v269 - v277 * *(int *)(v289 + 8);
                    do
                    {
                      v315 = v101;
                      if (v307)
                      {
                        v104 = 0;
                        v105 = v288[3];
                        v106 = v284[3];
                        v107 = v281[3];
                        if (v105 <= 1)
                          v108 = 1;
                        else
                          v108 = v288[3];
                        v347 = v108;
                        v356 = v288[3];
                        v331 = v277 - v107 * *(int *)(v289 + 12);
                        v341 = v279 - v106 * v105;
                        do
                        {
                          v109 = v347;
                          if (v356)
                          {
                            do
                            {
                              *(float *)(v94 + 4 * v89++) = atan2f(*(float *)(v92 + 4 * v91), *(float *)(v93 + 4 * v90));
                              v91 += v106;
                              v90 += v107;
                              --v109;
                            }
                            while (v109);
                          }
                          v91 += v341;
                          v90 += v331;
                          ++v104;
                        }
                        while (v104 != v323);
                      }
                      v91 += v302;
                      v90 += v297;
                      v101 = v315 + 1;
                    }
                    while (v315 + 1 != v292);
                  }
                  v91 += v271;
                  v90 += v272;
                  v88 = v275 + 1;
                }
                while (v275 + 1 != v274);
              }
              break;
            default:
              v333 = *v5;
              v126 = v28[6];
              if (v126)
              {
                v127 = 0;
                v358 = *(_QWORD *)(v29 + 152);
                v128 = v37[19];
                v129 = v28[19];
                do
                {
                  v130 = 0;
                  if ((v32 & 0x80000000) == 0)
                  {
                    v131 = *(_QWORD *)(v29 + 24);
                    v132 = v127;
                    do
                    {
                      v133 = ldiv(v132, v288[v32]);
                      v132 = v133.quot;
                      v130 += *(_QWORD *)(v131 + 8 * v32--) * v133.rem;
                    }
                    while (v32 != -1);
                  }
                  v134 = v339;
                  if ((v339 & 0x80000000) != 0)
                  {
                    LODWORD(v135) = 0;
                  }
                  else
                  {
                    v135 = 0;
                    v136 = v333[3];
                    v137 = v127;
                    do
                    {
                      v138 = ldiv(v137, *(int *)(v289 + 4 * v134));
                      v137 = v138.quot;
                      v135 += *(_QWORD *)(v136 + 8 * v134--) * v138.rem;
                    }
                    while (v134 != -1);
                  }
                  *(float *)(v129 + 4 * v127++) = atan2f(*(float *)(v358 + 4 * (int)v130), *(float *)(v128 + 4 * (int)v135));
                  v32 = v345;
                }
                while (v127 != v126);
              }
              break;
          }
          break;
      }
      return;
  }
}

void sub_2423E9B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a38 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

void mlx::core::BitwiseBinary::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2423E9C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::BitwiseBinary::~BitwiseBinary(mlx::core::BitwiseBinary *this)
{
  JUMPOUT(0x2426A82C4);
}

void sub_2423EA2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  char *v29;
  char *v31;
  uint64_t v32;

  v31 = a29;
  if (a29 == v29)
  {
    v32 = 4;
    v31 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2423EA4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

float mlx::core::detail::LogAddExp::operator()<float>(float a1, float a2)
{
  float v2;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  if (a1 <= a2)
    v2 = a2;
  else
    v2 = a1;
  if (a1 >= a2)
    a1 = a2;
  if (a1 != -INFINITY && v2 != INFINITY)
  {
    v4 = a1 - v2;
    v5 = 0.0;
    if (v4 != -INFINITY)
    {
      v5 = v4;
      if (v4 != INFINITY)
      {
        v6 = v4 * 1.442695;
        if (v6 > 80.0)
          v6 = 80.0;
        v7 = fmaxf(v6, -80.0);
        v8 = floor(v7 + 0.5);
        v9 = v7 - v8;
        v5 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v9 * 0.00015353) + 0.0013399)
                                                                                           * v9)
                                                                                   + 0.0096184)
                                                                           * v9)
                                                                   + 0.055503)
                                                           * v9)
                                                   + 0.24023)
                                           * v9)
                                   + 0.69315)
                           * v9)
                   + 1.0)
           * COERCE_FLOAT(((int)v8 << 23) + 1065353216);
      }
    }
    return v2 + log1pf(v5);
  }
  return v2;
}

_QWORD *mlx_device_::tostring(mlx_device_ *this)
{
  _QWORD *v2;
  std::string *v3;
  void *__p[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  mlx::core::operator<<(&v7, (_DWORD *)this + 4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, __p);
  v2 = (_QWORD *)operator new();
  *v2 = &off_25134DAE8;
  v2[1] = 1;
  v3 = (std::string *)(v2 + 2);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v2[4] = v6;
  }
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2426A8294](&v10);
  return v2;
}

void sub_2423EA74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A82C4](v16, 0x1093C401FB1DE5ELL);
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *mlx_device_new(int a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_25134DA08;
  result[1] = 1;
  result[2] = v3 | (a2 << 32);
  return result;
}

uint64_t mlx_device_get_type(uint64_t a1)
{
         + *(int *)(a1 + 16));
}

BOOL mlx_device_equal(uint64_t a1, uint64_t a2)
{
  return mlx::core::operator==((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
}

mlx::core *mlx_default_device()
{
  mlx::core *v0;
  uint64_t v1;

  v0 = (mlx::core *)operator new();
  v1 = mlx::core::default_device(v0);
  *(_QWORD *)v0 = &off_25134DA08;
  *((_QWORD *)v0 + 1) = 1;
  *((_QWORD *)v0 + 2) = v1;
  return v0;
}

void sub_2423EA864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x1081C40468F112ELL);
  _Unwind_Resume(a1);
}

uint64_t mlx_set_default_device(uint64_t a1)
{
  mlx::core::set_default_device((mlx::core::metal *)(a1 + 16));
  return a1;
}

void mlx_device_::~mlx_device_(mlx_device_ *this)
{
  JUMPOUT(0x2426A82C4);
}

uint64_t mlx::core::default_device(mlx::core *this)
{
  return 0;
}

uint64_t mlx::core::set_default_device(mlx::core::metal *a1)
{
  uint64_t result;
  std::logic_error *exception;

  result = mlx::core::metal::is_available(a1);
  if ((result & 1) == 0 && *(_DWORD *)a1 == 1 && *((_DWORD *)a1 + 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[set_default_device] Cannot set gpu device without gpu backend.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_2423EA934(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL mlx::core::operator!=(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

int ***mlx::core::random::KeySequence::KeySequence(int ***this, mlx::core::random *a2)
{
  mlx::core::random::key(a2, this);
  return this;
}

{
  mlx::core::random::key(a2, this);
  return this;
}

int ***mlx::core::random::key@<X0>(mlx::core::random *this@<X0>, int ***a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v5[0] = __ROR8__(this, 32);
  v3 = mlx::core::TypeToDtype<unsigned int>::operator mlx::core::Dtype();
  return mlx::core::array::array<unsigned int>(a2, (unsigned int *)v5, 2, v3);
}

void mlx::core::random::KeySequence::seed(mlx::core::random::KeySequence *this, mlx::core::random *a2)
{
  __int128 v3;

  mlx::core::random::key(a2, (int ***)&v3);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)this, &v3);
  mlx::core::array::~array((mlx::core::array *)&v3);
}

void mlx::core::random::KeySequence::next(mlx::core::random::KeySequence *this@<X0>, mlx::core *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  _QWORD v9[2];

  mlx::core::random::split(this, a2, 0, &v8);
  if (*(_QWORD *)this != (_QWORD)v8)
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](this, (uint64_t *)&v8);
  v5 = v9[1];
  *a3 = v9[0];
  a3[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  mlx::core::array::~array((mlx::core::array *)&v8);
}

void mlx::core::random::split(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  mlx::core *v6;
  unsigned int v7;
  uint64_t v8;
  const void ***v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;
  __int128 v14;
  void *__p;
  void *v16;
  _DWORD *v17;
  __int128 v18;
  void *v19;
  void *v20;
  _DWORD *v21;
  __int128 v22;
  uint64_t v23[3];

  v6 = mlx::core::to_stream(a2, a3);
  v8 = v7 | 0x100000000;
  mlx::core::random::split(a1, 2u, (uint64_t)v6, v8);
  mlx::core::split((mlx::core::array *)&v22, 2, v6, v8, v23);
  mlx::core::array::~array((mlx::core::array *)&v22);
  v9 = (const void ***)v23[0];
  v10 = operator new(4uLL);
  v19 = v10;
  *v10 = 2;
  v20 = v10 + 1;
  v21 = v10 + 1;
  mlx::core::reshape(v9, (uint64_t)&v19, v6, v8, (const void ***)&v22);
  v11 = v23[0];
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = 2;
  v16 = v12 + 1;
  v17 = v12 + 1;
  mlx::core::reshape((const void ***)(v11 + 16), (uint64_t)&__p, v6, v8, (const void ***)&v18);
  v13 = v22;
  v22 = 0uLL;
  v14 = v18;
  *a4 = v13;
  a4[1] = v14;
  v18 = 0uLL;
  mlx::core::array::~array((mlx::core::array *)&v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&v22);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  *(_QWORD *)&v22 = v23;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void sub_2423EAC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a19);
  if (a16)
    operator delete(a16);
  a19 = v19 - 56;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void mlx::core::random::seed(mlx::core::random *this)
{
  mlx::core::random::KeySequence *v2;

  v2 = (mlx::core::random::KeySequence *)mlx::core::random::KeySequence::default_(this);
  mlx::core::random::KeySequence::seed(v2, this);
}

void *mlx::core::random::KeySequence::default_(mlx::core::random::KeySequence *this)
{
  unsigned __int8 v1;
  std::chrono::system_clock::time_point v3;

  {
    v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    mlx::core::random::key((mlx::core::random *)(v3.__d_.__rep_ / 1000), (int ***)&mlx::core::random::KeySequence::default_(void)::ks);
    __cxa_atexit((void (*)(void *))mlx::core::random::KeySequence::~KeySequence, &mlx::core::random::KeySequence::default_(void)::ks, &dword_2422E0000);
  }
  return &mlx::core::random::KeySequence::default_(void)::ks;
}

void sub_2423EAD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void mlx::core::random::bits(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  int **v12;
  unint64_t *v13;
  unint64_t v14;
  mlx::core::random::KeySequence *v15;
  mlx::core *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int **v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::logic_error *exception;
  _QWORD *v38;
  _QWORD *v39;
  std::logic_error *v40;
  _QWORD *v41;
  std::logic_error *v42;
  __int128 v43;
  _QWORD *v44;
  mlx::core *v45;
  int v46;
  __int128 v47;
  void *__p[3];
  int **v49;
  uint64_t v50;
  int v51;
  std::string v52;
  void **v53;
  _BYTE v54[256];
  _QWORD v55[3];

  v55[2] = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  if (*(_BYTE *)(a3 + 16))
  {
    v12 = *(int ***)a3;
    v11 = *(_QWORD *)(a3 + 8);
    v49 = *(int ***)a3;
    v50 = v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v15 = (mlx::core::random::KeySequence *)mlx::core::random::KeySequence::default_((mlx::core::random::KeySequence *)a1);
    mlx::core::random::KeySequence::next(v15, v16, &v49);
    v12 = v49;
  }
  if (*((_DWORD *)v12 + 14) != 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v53);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Expected key type uint32 but received ", 38);
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v49[7];
    v36 = mlx::core::operator<<(v35, &v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v54, &v52);
    std::logic_error::logic_error(exception, &v52);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v17 = (int *)operator new(4uLL);
  *v17 = 2;
  if ((char *)v12[1] - (char *)*v12 != 4)
  {
    operator delete(v17);
LABEL_35:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v53);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Expected key shape (2) but received ", 36);
    v39 = mlx::core::operator<<(v38, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
    v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v54, &v52);
    std::logic_error::logic_error(v40, &v52);
    v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v40, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v18 = **v12;
  v19 = *v17;
  operator delete(v17);
  if (v18 != v19)
    goto LABEL_35;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, (const void *)*a1, a1[1], (a1[1] - *a1) >> 2);
  if (a2 == 4)
  {
    v20 = 0x400000002;
  }
  else
  {
    if (a2 != 1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"[bits] Bit width must be in {1, 2, 4} but got ", 46);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
      v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v54, &v52);
      std::logic_error::logic_error(v42, &v52);
      v42->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v42, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    v20 = 0x100000001;
  }
  v45 = mlx::core::to_stream(a4, a5);
  v46 = v21;
  std::allocate_shared[abi:ne180100]<mlx::core::RandomBits,std::allocator<mlx::core::RandomBits>,mlx::core::Stream,std::vector<int> const&,int &,void>((uint64_t *)&v45, (uint64_t)a1, &v51, &v52);
  v47 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  v23 = v49;
  v22 = v50;
  v55[0] = v49;
  v55[1] = v50;
  if (v50)
  {
    v24 = (unint64_t *)(v50 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v43 = 0uLL;
  v44 = 0;
  v53 = (void **)&v43;
  v54[0] = 0;
  v26 = operator new(0x10uLL);
  *(_QWORD *)&v43 = v26;
  v44 = v26 + 2;
  *v26 = v23;
  v26[1] = v22;
  if (v22)
  {
    v27 = (unint64_t *)(v22 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *((_QWORD *)&v43 + 1) = v26 + 2;
  mlx::core::array::array(a6, (__int128 *)__p, v20, &v47, &v43);
  v53 = (void **)&v43;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v53);
  mlx::core::array::~array((mlx::core::array *)v55);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
  if (v52.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v49);
}

void sub_2423EB1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  int v31;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a30);
      if (a17)
        operator delete(a17);
      mlx::core::array::~array((mlx::core::array *)&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void mlx::core::random::split(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  char v13;
  void *__p;
  void *v15;
  _QWORD *v16;

  v8 = operator new(8uLL);
  __p = v8;
  *v8 = a2 | 0x200000000;
  v15 = v8 + 1;
  v16 = v8 + 1;
  v9 = a1[1];
  v12[0] = *a1;
  v12[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = 1;
  mlx::core::random::bits(&__p, 4, v12, a3, a4);
  if (v13)
    mlx::core::array::~array((mlx::core::array *)v12);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_2423EB3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13)
{
  if (a11)
    mlx::core::array::~array((mlx::core::array *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::random::uniform(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int v15;
  mlx::core *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float v24;
  int ***v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::logic_error *v39;
  std::logic_error *exception;
  void *v41;
  _QWORD v42[2];
  std::string v43;
  __int128 v44;
  _OWORD v45[16];
  std::vector<int> v46;
  _QWORD *v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  uint64_t v52;
  __int128 v53;

  v52 = a4;
  if ((mlx::core::issubdtype((unsigned int *)&v52, (unsigned int *)&mlx::core::floating) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Can only generate uniform numbers with real floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v16 = mlx::core::to_stream(a6, a7);
  v17 = a1[1];
  v50[0] = *a1;
  v50[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = v15 | 0x100000000;
  mlx::core::astype(v50, v52, v16, v20, v51);
  mlx::core::array::~array((mlx::core::array *)v50);
  v21 = a2[1];
  v48[0] = *a2;
  v48[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  mlx::core::astype(v48, v52, v16, v20, v49);
  mlx::core::array::~array((mlx::core::array *)v48);
  mlx::core::subtract(v49, v51, v16, v20, v47);
  mlx::core::broadcast_shapes(a3, v47[0], &v46);
  if ((char *)v46.__end_ - (char *)v46.__begin_ != a3[1] - *a3
    || memcmp(v46.__begin_, (const void *)*a3, (char *)v46.__end_ - (char *)v46.__begin_))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Cannot generate random values of shape ", 39);
    v36 = mlx::core::operator<<(v35, a3);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" from broadcasted shape ", 24);
    v38 = mlx::core::operator<<(v37, &v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)".", 1);
    v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v44 + 8, &v43);
    std::logic_error::logic_error(v39, &v43);
    v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v39, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if ((_DWORD)v52 != 6)
  {
    v41 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](v41, "[uniform] Unsupported type.");
    __cxa_throw(v41, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v24 = nextafterf(1.0, 0.0);
  mlx::core::array::array<float>((int ***)&v43, 0x400000006, v24);
  v25 = mlx::core::array::array<unsigned int>((int ***)&v53, 0xFFFFFFFF, 0x400000006);
  v26 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = 0uLL;
  v44 = v26;
  v45[0] = v53;
  v53 = 0uLL;
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)&v43);
  mlx::core::random::bits(a3, BYTE4(v52), a5, v16, v20, &v43);
  mlx::core::divide(&v43, v45, v16, v20, v42);
  mlx::core::astype(v42, v52, v16, v20, &v53);
  v27 = v53;
  v53 = 0uLL;
  size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v53);
  mlx::core::array::~array((mlx::core::array *)v42);
  mlx::core::minimum(&v43, &v44, v16, v20, &v53);
  v31 = v53;
  v53 = 0uLL;
  v32 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v53);
  mlx::core::multiply(v47, &v43, v16, v20, &v53);
  mlx::core::add(&v53, v51, v16, v20, a8);
  mlx::core::array::~array((mlx::core::array *)&v53);
  mlx::core::array::~array((mlx::core::array *)&v43);
  mlx::core::array::~array((mlx::core::array *)v45);
  mlx::core::array::~array((mlx::core::array *)&v44);
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)v47);
  mlx::core::array::~array((mlx::core::array *)v49);
  mlx::core::array::~array((mlx::core::array *)v51);
}

void sub_2423EB83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  int v19;
  uint64_t v20;
  void *v22;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a18);
      v22 = *(void **)(v20 - 192);
      if (v22)
      {
        *(_QWORD *)(v20 - 184) = v22;
        operator delete(v22);
      }
      mlx::core::array::~array((mlx::core::array *)(v20 - 168));
      mlx::core::array::~array((mlx::core::array *)(v20 - 136));
      mlx::core::array::~array((mlx::core::array *)(v20 - 104));
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void mlx::core::random::uniform(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  mlx::core *v12;
  unsigned int v13;
  int **v14[2];
  int **v15[2];

  mlx::core::array::array<double>(v15, a2, 0.0);
  mlx::core::array::array<double>(v14, a2, 1.0);
  v12 = mlx::core::to_stream(a4, a5);
  mlx::core::random::uniform(v15, v14, a1, a2, a3, v12, v13 | 0x100000000, a6);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2423EBA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::random::normal(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  mlx::core *v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  _QWORD v18[2];
  int **v19[2];
  __int128 v20;
  int **v21[2];
  int **v22[2];

  v14 = mlx::core::to_stream(a4, a5);
  v16 = v15;
  v17 = nextafterf(-1.0, 0.0);
  mlx::core::array::array<float>(v22, a2, v17);
  mlx::core::array::array<float>(v21, a2, 1.0);
  mlx::core::random::uniform(v22, v21, a1, a2, a3, v14, v16 | 0x100000000, a6);
  mlx::core::array::array<double>(v19, a2, 1.41421356);
  mlx::core::erfinv(a6, v14, v16 | 0x100000000, v18);
  mlx::core::multiply(v19, v18, v14, v16 | 0x100000000, &v20);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v20);
  mlx::core::array::~array((mlx::core::array *)&v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v19);
  if (a8 != 1.0)
  {
    mlx::core::array::array<float>(v19, a2, a8);
    mlx::core::multiply(v19, a6, v14, v16 | 0x100000000, &v20);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v20);
    mlx::core::array::~array((mlx::core::array *)&v20);
    mlx::core::array::~array((mlx::core::array *)v19);
  }
  if (a7 != 0.0)
  {
    mlx::core::array::array<float>(v19, a2, a7);
    mlx::core::add(v19, a6, v14, v16 | 0x100000000, &v20);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v20);
    mlx::core::array::~array((mlx::core::array *)&v20);
    mlx::core::array::~array((mlx::core::array *)v19);
  }
  mlx::core::array::~array((mlx::core::array *)v21);
  mlx::core::array::~array((mlx::core::array *)v22);
}

void sub_2423EBBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  mlx::core::array *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array(v3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void sub_2423EBC48()
{
  JUMPOUT(0x2423EBC30);
}

void sub_2423EBC50()
{
  JUMPOUT(0x2423EBC38);
}

void mlx::core::random::multivariate_normal(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  mlx::core *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  _BYTE *v18;
  int v19;
  int v20;
  mlx::core *v21;
  const void *v22;
  uint64_t v23;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int *v40;
  std::logic_error *exception;
  const void **v42[2];
  const void **v43[2];
  const void **v44[2];
  const void **v45[2];
  const void **v46[2];
  _QWORD v47[2];
  uint64_t v48[3];
  _QWORD v49[2];
  _QWORD v50[2];
  std::vector<int> __p;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  std::vector<int> v58;

  v14 = mlx::core::to_stream(a6, a7);
  if ((_DWORD)a4 != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[multivariate_normal] dtype must be float32.");
    goto LABEL_41;
  }
  v16 = v15;
  v17 = *(_DWORD **)*a1;
  v18 = *(_BYTE **)(*a1 + 8);
  if (v18 == (_BYTE *)v17)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[multivariate_normal] mean must have at least one dimension.");
    goto LABEL_41;
  }
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2 <= 7uLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[multivariate_normal] cov must have at least two dimensions.");
    goto LABEL_41;
  }
  v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) - 4);
  if (v19 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) - 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[multivariate_normal] last two dimensions of cov must be equal.");
    goto LABEL_41;
  }
  v20 = v17[((v18 - (_BYTE *)v17) >> 2) - 1];
  if (v20 != v19)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[multivariate_normal] mean and cov must have compatible shapes.");
LABEL_41:
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v21 = v14;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v55, v17, (uint64_t)(v18 - 4), (v18 - 4 - (_BYTE *)v17) >> 2);
  v22 = **(const void ***)a2;
  v23 = *(_QWORD *)(*(_QWORD *)a2 + 8) - 8;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v52, v22, v23, (v23 - (uint64_t)v22) >> 2);
  mlx::core::broadcast_shapes(&v52, &v55, &__p);
  mlx::core::broadcast_shapes(&__p, a3, &v58);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  begin = v58.__begin_;
  end = v58.__end_;
  __p = v58;
  if (v58.__end_ >= v58.__end_cap_.__value_)
  {
    v27 = v58.__end_ - v58.__begin_;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v29 = (char *)v58.__end_cap_.__value_ - (char *)v58.__begin_;
    if (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 1 > v28)
      v28 = v29 >> 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
      v30 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v30);
      begin = __p.__begin_;
      end = __p.__end_;
    }
    else
    {
      v31 = 0;
    }
    v32 = (int *)&v31[4 * v27];
    v33 = (int *)&v31[4 * v30];
    *v32 = v20;
    v26 = v32 + 1;
    while (end != begin)
    {
      v34 = *--end;
      *--v32 = v34;
    }
    __p.__begin_ = v32;
    __p.__end_ = v26;
    __p.__end_cap_.__value_ = v33;
    if (begin)
      operator delete(begin);
  }
  else
  {
    *v58.__end_ = v20;
    v26 = end + 1;
  }
  __p.__end_ = v26;
  v35 = *(_QWORD *)(a2 + 8);
  v49[0] = *(_QWORD *)a2;
  v49[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = v16 | 0x100000000;
  mlx::core::astype(v49, 0x400000006, v21, v38, v50);
  mlx::core::array::~array((mlx::core::array *)v49);
  mlx::core::linalg::svd(v50, v21, v38, v48);
  v39 = (_QWORD *)v48[0];
  mlx::core::sqrt((_QWORD *)(v48[0] + 16), v21, v38, v44);
  mlx::core::expand_dims(v44, -2, v21, v38, v45);
  mlx::core::multiply(v39, v45, v21, v38, &v58);
  mlx::core::matmul(&v58, (_QWORD *)(v48[0] + 32), v21, v38, v46);
  mlx::core::astype(v46, a4, v21, v38, v47);
  mlx::core::array::~array((mlx::core::array *)v46);
  mlx::core::array::~array((mlx::core::array *)&v58);
  mlx::core::array::~array((mlx::core::array *)v45);
  mlx::core::array::~array((mlx::core::array *)v44);
  mlx::core::random::normal((uint64_t *)&__p, a4, a5, v21, v38, v45, 0.0, 1.0);
  mlx::core::expand_dims(v45, -2, v21, v38, v42);
  mlx::core::matmul(v42, v47, v21, v38, v43);
  v40 = (int *)operator new(4uLL);
  v58.__begin_ = v40;
  *v40 = -2;
  v58.__end_ = v40 + 1;
  v58.__end_cap_.__value_ = v40 + 1;
  mlx::core::squeeze((mlx::core::array *)v43, (unsigned int **)&v58, v21, v38, v44);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)v43);
  mlx::core::array::~array((mlx::core::array *)v42);
  mlx::core::add(a1, v44, v21, v38, a8);
  mlx::core::array::~array((mlx::core::array *)v44);
  mlx::core::array::~array((mlx::core::array *)v45);
  mlx::core::array::~array((mlx::core::array *)v47);
  v58.__begin_ = (std::vector<int>::pointer)v48;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  mlx::core::array::~array((mlx::core::array *)v50);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
}

void sub_2423EC0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;

  __cxa_free_exception(v30);
  _Unwind_Resume(a1);
}

void sub_2423EC208()
{
  JUMPOUT(0x2423EC1B8);
}

void sub_2423EC210()
{
  JUMPOUT(0x2423EC1C8);
}

void sub_2423EC218()
{
  JUMPOUT(0x2423EC1CCLL);
}

void sub_2423EC22C()
{
  JUMPOUT(0x2423EC1E0);
}

void sub_2423EC234()
{
  JUMPOUT(0x2423EC1F0);
}

void sub_2423EC23C()
{
  JUMPOUT(0x2423EC200);
}

void mlx::core::random::randint(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  std::logic_error *exception;
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18;

  v18 = a4;
  if (mlx::core::issubdtype((unsigned int *)&v18, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[randint] randint only accepts integer dtypes and BOOL.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::random::uniform(a1, a2, a3, 0x400000006, a5, a6, a7, v17);
  mlx::core::maximum(v17, a1, a6, a7, v16);
  mlx::core::astype(v16, v18, a6, a7, a8);
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_2423EC348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::random::bernoulli@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  _BYTE *v12;
  size_t v13;
  uint64_t result;
  std::logic_error *v15;
  std::logic_error *exception;
  __int128 v17;

  *(_QWORD *)&v17 = *(_QWORD *)(*a1 + 56);
  if ((mlx::core::issubdtype((unsigned int *)&v17, (unsigned int *)&mlx::core::floating) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::random::uniform(a2, *(_QWORD *)(*a1 + 56), a3, a4, a5, a6);
  mlx::core::less(a6, a1, a4, a5, &v17);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v17);
  mlx::core::array::~array((mlx::core::array *)&v17);
  v12 = **a6;
  v13 = (_BYTE *)(*a6)[1] - v12;
  if (v13 != a2[1] - *a2 || (result = memcmp(v12, (const void *)*a2, v13), (_DWORD)result))
  {
    v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v15->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v15, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_2423EC4C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::random::bernoulli@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  return mlx::core::random::bernoulli(a1, *a1, a2, a3, a4, a5);
}

void mlx::core::random::bernoulli(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, const void ***a4@<X8>)
{
  uint64_t v8;
  int **v9[2];

  v8 = mlx::core::TypeToDtype<float>::operator mlx::core::Dtype();
  mlx::core::array::array<float>(v9, v8, 0.5);
  mlx::core::random::bernoulli(v9, (uint64_t *)v9[0], a1, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2423EC588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::random::truncated_normal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::logic_error *exception;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  int **v31[2];
  uint64_t v32;

  v32 = a4;
  if ((mlx::core::issubdtype((unsigned int *)&v32, (unsigned int *)&mlx::core::floating) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[trunc_normal] trunc_normal only accepts floating point dtypes.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::array::array<double>(v31, v32, 1.41421356);
  v15 = a1[1];
  v29[0] = *a1;
  v29[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  mlx::core::astype(v29, v32, a6, a7, v30);
  mlx::core::array::~array((mlx::core::array *)v29);
  v18 = a2[1];
  v27[0] = *a2;
  v27[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  mlx::core::astype(v27, v32, a6, a7, v28);
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::divide(v30, v31, a6, a7, v25);
  mlx::core::erf(v25, a6, a7, v26);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::divide(v28, v31, a6, a7, v24);
  mlx::core::erf(v24, a6, a7, v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::random::uniform(v26, v25, a3, v32, a5, a6, a7, v24);
  mlx::core::erfinv(v24, a6, a7, v22);
  mlx::core::multiply(v31, v22, a6, a7, v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::minimum(v28, v23, a6, a7, v22);
  mlx::core::maximum(v22, v30, a6, a7, a8);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::array::~array((mlx::core::array *)v28);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)v31);
}

void sub_2423EC7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_2423EC874()
{
  JUMPOUT(0x2423EC844);
}

void sub_2423EC87C()
{
  JUMPOUT(0x2423EC848);
}

void sub_2423EC888()
{
  JUMPOUT(0x2423EC84CLL);
}

void sub_2423EC890()
{
  JUMPOUT(0x2423EC850);
}

void sub_2423EC89C()
{
  JUMPOUT(0x2423EC854);
}

void sub_2423EC8A4()
{
  JUMPOUT(0x2423EC858);
}

void sub_2423EC8B0()
{
  JUMPOUT(0x2423EC860);
}

void mlx::core::random::truncated_normal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  std::vector<int> __p;

  mlx::core::broadcast_shapes((_QWORD *)*a1, (_QWORD *)*a2, &__p);
  mlx::core::random::truncated_normal(a1, a2, (uint64_t *)&__p, a3, a4, a5, a6, a7);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2423EC954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::random::gumbel(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  mlx::core::random::uniform(a1, a2, a3, a4, a5, v9);
  mlx::core::log(v9, a4, a5, v10);
  mlx::core::negative(v10, a4, a5, v11);
  mlx::core::log(v11, a4, a5, v12);
  mlx::core::negative(v12, a4, a5, a6);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v10);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2423ECA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  mlx::core::array::~array((mlx::core::array *)&a15);
  mlx::core::array::~array((mlx::core::array *)&a13);
  mlx::core::array::~array((mlx::core::array *)&a11);
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::random::get_valid_axis(mlx::core::random *this, int a2)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  std::logic_error *exception;
  std::string v6;
  uint64_t v7;
  uint64_t v8;

  result = (a2 & ((int)this >> 31)) + this;
  if ((int)result < 0 || (int)result >= a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"[categorical] Invalid axis ", 27);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" for logits with ", 17);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_2423ECB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::random::categorical_impl(mlx::core::array *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, mlx::core::array *a7@<X8>)
{
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<int>::pointer begin;
  std::vector<int>::value_type v18;
  uint64_t v19;
  std::vector<int>::const_iterator v20;
  uint64_t *v22[2];
  std::vector<int>::value_type __x[4];
  std::vector<int> v24;

  memset(&v24, 0, sizeof(v24));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v14 = *(const void **)a3;
  v13 = *(_QWORD *)(a3 + 8);
  v15 = **(_QWORD **)a1;
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  begin = v24.__begin_;
  v18 = mlx::core::array::shape(a1, a2);
  v19 = ((v13 - (uint64_t)v14) >> 2) + a2 - ((v16 - v15) >> 2) + 1;
  v20.__i_ = &begin[v19];
  __x[0] = v18;
  std::vector<int>::insert(&v24, v20, __x);
  mlx::core::random::gumbel((uint64_t *)&v24, 0x400000006, a4, a5, a6, __x);
  mlx::core::add(__x, a1, a5, a6, v22);
  mlx::core::argmax(v22, v19, 0, a5, a6, a7);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)__x);
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
}

void sub_2423ECCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15)
{
  mlx::core::array::~array((mlx::core::array *)&a10);
  mlx::core::array::~array((mlx::core::array *)&a12);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::value_type *__x)
{
  int *i;
  const int *end;
  std::__compressed_pair<int *> *p_end_cap;
  int *v8;
  int *value;
  std::__wrap_iter<const int *>::iterator_type v10;
  const int *v11;
  int *v12;
  int v13;
  std::vector<int>::pointer begin;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  std::__split_buffer<int> __v;

  i = (int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v15 = end - this->__begin_ + 1;
    if (v15 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = __position.__i_ - begin;
    v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18)
      v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v18);
    else
      v19 = 0;
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<int>::push_back(&__v, __x);
    i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v10 = __position.__i_ + 1;
    v11 = end - 1;
    v12 = (int *)end;
    while (v11 < end)
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10)
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    *i = *__x;
  }
  return (std::vector<int>::iterator)i;
}

void sub_2423ECE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::random::categorical(mlx::core::random *this@<X1>, mlx::core::array *a2@<X0>, const void **a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, mlx::core::array *a7@<X8>)
{
  unsigned int valid_axis;
  uint64_t v14;
  char *v15;
  int64_t v16;
  int *begin;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::logic_error *exception;
  std::string v24;
  std::vector<int> v25[11];
  char *v26;
  char *v27;
  uint64_t v28;

  valid_axis = mlx::core::random::get_valid_axis(this, (*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v14 = *(_QWORD *)a2;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
  v15 = &v26[4 * valid_axis];
  v16 = v27 - (v15 + 4);
  if (v27 != v15 + 4)
    memmove(&v26[4 * valid_axis], v15 + 4, v27 - (v15 + 4));
  v27 = &v15[v16];
  mlx::core::broadcast_shapes(a3, &v26, v25);
  begin = v25[0].__begin_;
  if ((char *)v25[0].__end_ - (char *)v25[0].__begin_ != (_BYTE *)a3[1] - (_BYTE *)*a3)
  {
    v18 = 0;
    if (!v25[0].__begin_)
      goto LABEL_8;
    goto LABEL_7;
  }
  v18 = memcmp(v25[0].__begin_, *a3, (char *)v25[0].__end_ - (char *)v25[0].__begin_) == 0;
  if (begin)
  {
LABEL_7:
    v25[0].__end_ = begin;
    operator delete(begin);
  }
LABEL_8:
  if (!v18)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"[categorical] Requested shape ", 30);
    v20 = mlx::core::operator<<(v19, a3);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" is not broadcast compatable with reduced logits shape", 54);
    v22 = mlx::core::operator<<(v21, &v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v25[0].__end_, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::random::categorical_impl(a2, valid_axis, (uint64_t)a3, a4, a5, a6, a7);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_2423ED0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;
  uint64_t v17;
  void *v19;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      v19 = *(void **)(v17 - 112);
      if (v19)
      {
        *(_QWORD *)(v17 - 104) = v19;
        operator delete(v19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void mlx::core::random::categorical(mlx::core::random *this@<X1>, const void ***a2@<X0>, int a3@<W2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, mlx::core::array *a7@<X8>)
{
  unsigned int valid_axis;
  mlx::core *v14;
  char *v15;
  int64_t v16;
  void *__p;
  char *v18;
  uint64_t v19;
  const void **v20[2];

  valid_axis = mlx::core::random::get_valid_axis(this, (unint64_t)((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2);
  mlx::core::expand_dims(a2, -1, v14, 0, v20);
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *v20[0], (uint64_t)v20[0][1], ((char *)v20[0][1] - (char *)*v20[0]) >> 2);
  v15 = (char *)__p + 4 * valid_axis;
  v16 = v18 - (v15 + 4);
  if (v18 != v15 + 4)
    memmove((char *)__p + 4 * valid_axis, v15 + 4, v18 - (v15 + 4));
  v18 = &v15[v16];
  *((_DWORD *)v18 - 1) = a3;
  mlx::core::random::categorical_impl((mlx::core::array *)v20, valid_axis, (uint64_t)&__p, a4, a5, a6, a7);
  if (__p)
  {
    v18 = (char *)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)v20);
}

void sub_2423ED210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a13);
  _Unwind_Resume(a1);
}

void mlx::core::random::categorical(mlx::core::random *this@<X1>, mlx::core::array *a2@<X0>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  unsigned int valid_axis;
  uint64_t v12;
  char *v13;
  int64_t v14;
  void *__p;
  char *v16;
  uint64_t v17;

  valid_axis = mlx::core::random::get_valid_axis(this, (*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v12 = *(_QWORD *)a2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = (char *)__p + 4 * valid_axis;
  v14 = v16 - (v13 + 4);
  if (v16 != v13 + 4)
    memmove((char *)__p + 4 * valid_axis, v13 + 4, v16 - (v13 + 4));
  v16 = &v13[v14];
  mlx::core::random::categorical_impl(a2, valid_axis, (uint64_t)&__p, a3, a4, a5, a6);
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2423ED320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

int ***mlx::core::array::array<unsigned int>(int ***a1, unsigned int a2, uint64_t a3)
{
  void *__p;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v9 = a3;
  v8 = a2;
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v9, a1);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<unsigned int *>(a1, &v8);
  return a1;
}

void sub_2423ED40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<unsigned int *>(int ***a1, unsigned int *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  int *v10;
  BOOL *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  float *v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v30[0] = &unk_2513463C8;
  v30[1] = mlx::core::allocator::free;
  v31 = v30;
  mlx::core::array::set_data(a1, v4, (uint64_t)v30);
  v6 = v31;
  if (v31 == v30)
  {
    v7 = 4;
    v6 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v10 = v8[6];
      if (v10)
      {
        v11 = (BOOL *)v8[19];
        v12 = 4 * (_QWORD)v10;
        do
        {
          v13 = *a2++;
          *v11++ = v13 != 0;
          v12 -= 4;
        }
        while (v12);
      }
      break;
    case 1:
      v14 = v8[6];
      if (v14)
      {
        v15 = v8[19];
        v16 = 4 * (_QWORD)v14;
        do
        {
          v17 = *a2++;
          *(_BYTE *)v15 = v17;
          v15 = (int *)((char *)v15 + 1);
          v16 -= 4;
        }
        while (v16);
      }
      break;
    case 2:
    case 4:
      v9 = v8[6];
      if (v9)
        memmove(v8[19], a2, 4 * (_QWORD)v9);
      break;
    case 3:
      v18 = v8[6];
      if (v18)
      {
        v19 = v8[19];
        v20 = 4 * (_QWORD)v18;
        do
        {
          v21 = *a2++;
          *(_BYTE *)v19 = v21;
          v19 = (int *)((char *)v19 + 1);
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 5:
      v22 = v8[6];
      if (v22)
      {
        v23 = v8[19];
        v24 = 4 * (_QWORD)v22;
        do
        {
          v25 = *a2++;
          *(_QWORD *)v23 = v25;
          v23 += 2;
          v24 -= 4;
        }
        while (v24);
      }
      break;
    case 6:
      v26 = v8[6];
      if (v26)
      {
        v27 = (float *)v8[19];
        v28 = 4 * (_QWORD)v26;
        do
        {
          v29 = *a2++;
          result = (float)v29;
          *v27++ = (float)v29;
          v28 -= 4;
        }
        while (v28);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2423ED604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x100uLL);
  result = std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype &,std::allocator<mlx::core::array::ArrayDesc>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2423ED688(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype &,std::allocator<mlx::core::array::ArrayDesc>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_25134DA48;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype &,mlx::core::array::ArrayDesc*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_2423ED6D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DA48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

void std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__on_zero_shared(uint64_t a1)
{
  mlx::core::array::ArrayDesc::~ArrayDesc((mlx::core::array::ArrayDesc *)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype &,mlx::core::array::ArrayDesc*>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *__p[2];
  uint64_t v6;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  mlx::core::array::ArrayDesc::ArrayDesc(a1, __p, *a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_2423ED798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2423ED810(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<int>::push_back(std::__split_buffer<int> *this, std::__split_buffer<int>::value_type *__x)
{
  std::__split_buffer<int>::pointer end;
  std::__split_buffer<int>::pointer begin;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int64_t v14;
  int *v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  std::__split_buffer<int>::pointer v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  std::__split_buffer<int>::pointer first;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begin = this->__begin_;
    v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_)
        v16 = 1;
      else
        v16 = ((char *)end - (char *)this->__first_) >> 1;
      v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this->__end_cap_.__value_, v16);
      v19 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      v20 = this->__begin_;
      end = v19;
      v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        end = (int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        v22 = 4 * (v21 >> 2);
        v23 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        end = this->__end_;
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &begin[-v12];
      v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        end = this->__begin_;
      }
      v15 = &end[v11];
      end = (int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  *end = *__x;
  this->__end_ = end + 1;
}

int ***mlx::core::array::array<unsigned int>(int ***a1, unsigned int *a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  void *__p;
  void *v10;
  _DWORD *v11;
  uint64_t v12;

  v12 = a4;
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a3;
  v10 = v7 + 1;
  v11 = v7 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v12, a1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<unsigned int const*>(a1, a2);
  return a1;
}

void sub_2423ED9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<unsigned int const*>(int ***a1, unsigned int *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  int *v10;
  BOOL *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  float *v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v30[0] = &unk_2513463C8;
  v30[1] = mlx::core::allocator::free;
  v31 = v30;
  mlx::core::array::set_data(a1, v4, (uint64_t)v30);
  v6 = v31;
  if (v31 == v30)
  {
    v7 = 4;
    v6 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v10 = v8[6];
      if (v10)
      {
        v11 = (BOOL *)v8[19];
        v12 = 4 * (_QWORD)v10;
        do
        {
          v13 = *a2++;
          *v11++ = v13 != 0;
          v12 -= 4;
        }
        while (v12);
      }
      break;
    case 1:
      v14 = v8[6];
      if (v14)
      {
        v15 = v8[19];
        v16 = 4 * (_QWORD)v14;
        do
        {
          v17 = *a2++;
          *(_BYTE *)v15 = v17;
          v15 = (int *)((char *)v15 + 1);
          v16 -= 4;
        }
        while (v16);
      }
      break;
    case 2:
    case 4:
      v9 = v8[6];
      if (v9)
        memmove(v8[19], a2, 4 * (_QWORD)v9);
      break;
    case 3:
      v18 = v8[6];
      if (v18)
      {
        v19 = v8[19];
        v20 = 4 * (_QWORD)v18;
        do
        {
          v21 = *a2++;
          *(_BYTE *)v19 = v21;
          v19 = (int *)((char *)v19 + 1);
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 5:
      v22 = v8[6];
      if (v22)
      {
        v23 = v8[19];
        v24 = 4 * (_QWORD)v22;
        do
        {
          v25 = *a2++;
          *(_QWORD *)v23 = v25;
          v23 += 2;
          v24 -= 4;
        }
        while (v24);
      }
      break;
    case 6:
      v26 = v8[6];
      if (v26)
      {
        v27 = (float *)v8[19];
        v28 = 4 * (_QWORD)v26;
        do
        {
          v29 = *a2++;
          result = (float)v29;
          *v27++ = (float)v29;
          v28 -= 4;
        }
        while (v28);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2423EDBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::RandomBits,std::allocator<mlx::core::RandomBits>,mlx::core::Stream,std::vector<int> const&,int &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x50uLL);
  result = std::__shared_ptr_emplace<mlx::core::RandomBits>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,int &,std::allocator<mlx::core::RandomBits>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_2423EDC44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::RandomBits>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,int &,std::allocator<mlx::core::RandomBits>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134DA98;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *a4;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = a1 + 48;
  *(_DWORD *)(v8 - 8) = v6;
  *(_QWORD *)(v8 - 24) = off_251352138;
  *(_QWORD *)(v8 - 16) = v5;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v8, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_DWORD *)(a1 + 72) = v7;
  return a1;
}

void sub_2423EDCCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::RandomBits>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::RandomBits>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::RandomBits>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

int ***mlx::core::array::array<float>(int ***a1, uint64_t a2, float a3)
{
  void *__p;
  void *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;

  v9 = a2;
  v8 = a3;
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v9, a1);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<float *>(a1, &v8);
  return a1;
}

void sub_2423EDDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::array::init<float *>(int ***a1, float *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int **v7;
  int *v8;
  BOOL *v9;
  uint64_t v10;
  float v11;
  int *v12;
  int *v13;
  uint64_t v14;
  float v15;
  int *v16;
  int *v17;
  uint64_t v18;
  float v19;
  int *v20;
  int *v21;
  uint64_t v22;
  float v23;
  int *v24;
  int *v25;
  uint64_t v26;
  float v27;
  int *v28;
  int *v29;
  uint64_t v30;
  float v31;
  int *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v33[0] = &unk_2513463C8;
  v33[1] = mlx::core::allocator::free;
  v34 = v33;
  mlx::core::array::set_data(a1, v4, (uint64_t)v33);
  result = v34;
  if (v34 == v33)
  {
    v6 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_6:
  v7 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v8 = v7[6];
      if (v8)
      {
        v9 = (BOOL *)v7[19];
        v10 = 4 * (_QWORD)v8;
        do
        {
          v11 = *a2++;
          *v9++ = v11 != 0.0;
          v10 -= 4;
        }
        while (v10);
      }
      break;
    case 1:
      v24 = v7[6];
      if (v24)
      {
        v25 = v7[19];
        v26 = 4 * (_QWORD)v24;
        do
        {
          v27 = *a2++;
          *(_BYTE *)v25 = (int)v27;
          v25 = (int *)((char *)v25 + 1);
          v26 -= 4;
        }
        while (v26);
      }
      break;
    case 2:
      v12 = v7[6];
      if (v12)
      {
        v13 = v7[19];
        v14 = 4 * (_QWORD)v12;
        do
        {
          v15 = *a2++;
          *v13++ = v15;
          v14 -= 4;
        }
        while (v14);
      }
      break;
    case 3:
      v16 = v7[6];
      if (v16)
      {
        v17 = v7[19];
        v18 = 4 * (_QWORD)v16;
        do
        {
          v19 = *a2++;
          *(_BYTE *)v17 = (int)v19;
          v17 = (int *)((char *)v17 + 1);
          v18 -= 4;
        }
        while (v18);
      }
      break;
    case 4:
      v20 = v7[6];
      if (v20)
      {
        v21 = v7[19];
        v22 = 4 * (_QWORD)v20;
        do
        {
          v23 = *a2++;
          *v21++ = (int)v23;
          v22 -= 4;
        }
        while (v22);
      }
      break;
    case 5:
      v28 = v7[6];
      if (v28)
      {
        v29 = v7[19];
        v30 = 4 * (_QWORD)v28;
        do
        {
          v31 = *a2++;
          *(_QWORD *)v29 = (uint64_t)v31;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
      }
      break;
    case 6:
      v32 = v7[6];
      if (v32)
        result = memmove(v7[19], a2, 4 * (_QWORD)v32);
      break;
    default:
      return result;
  }
  return result;
}

void sub_2423EDFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<double>(int ***a1, uint64_t a2, double a3)
{
  void *__p;
  void *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a3;
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v9, a1);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<double *>(a1, &v8);
  return a1;
}

void sub_2423EE06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<double *>(int ***a1, double *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  BOOL *v10;
  uint64_t v11;
  double v12;
  int *v13;
  int *v14;
  uint64_t v15;
  double v16;
  int *v17;
  int *v18;
  uint64_t v19;
  double v20;
  int *v21;
  int *v22;
  uint64_t v23;
  double v24;
  int *v25;
  int *v26;
  uint64_t v27;
  double v28;
  int *v29;
  int *v30;
  uint64_t v31;
  double v32;
  int *v33;
  float *v34;
  uint64_t v35;
  double v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v37[0] = &unk_2513463C8;
  v37[1] = mlx::core::allocator::free;
  v38 = v37;
  mlx::core::array::set_data(a1, v4, (uint64_t)v37);
  v6 = v38;
  if (v38 == v37)
  {
    v7 = 4;
    v6 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v9 = v8[6];
      if (v9)
      {
        v10 = (BOOL *)v8[19];
        v11 = 8 * (_QWORD)v9;
        do
        {
          v12 = *a2++;
          result = *(float *)&v12;
          *v10++ = v12 != 0.0;
          v11 -= 8;
        }
        while (v11);
      }
      break;
    case 1:
      v25 = v8[6];
      if (v25)
      {
        v26 = v8[19];
        v27 = 8 * (_QWORD)v25;
        do
        {
          v28 = *a2++;
          result = *(float *)&v28;
          *(_BYTE *)v26 = (int)v28;
          v26 = (int *)((char *)v26 + 1);
          v27 -= 8;
        }
        while (v27);
      }
      break;
    case 2:
      v13 = v8[6];
      if (v13)
      {
        v14 = v8[19];
        v15 = 8 * (_QWORD)v13;
        do
        {
          v16 = *a2++;
          result = *(float *)&v16;
          *v14++ = v16;
          v15 -= 8;
        }
        while (v15);
      }
      break;
    case 3:
      v17 = v8[6];
      if (v17)
      {
        v18 = v8[19];
        v19 = 8 * (_QWORD)v17;
        do
        {
          v20 = *a2++;
          result = *(float *)&v20;
          *(_BYTE *)v18 = (int)v20;
          v18 = (int *)((char *)v18 + 1);
          v19 -= 8;
        }
        while (v19);
      }
      break;
    case 4:
      v21 = v8[6];
      if (v21)
      {
        v22 = v8[19];
        v23 = 8 * (_QWORD)v21;
        do
        {
          v24 = *a2++;
          result = *(float *)&v24;
          *v22++ = (int)v24;
          v23 -= 8;
        }
        while (v23);
      }
      break;
    case 5:
      v29 = v8[6];
      if (v29)
      {
        v30 = v8[19];
        v31 = 8 * (_QWORD)v29;
        do
        {
          v32 = *a2++;
          result = *(float *)&v32;
          *(_QWORD *)v30 = (uint64_t)v32;
          v30 += 2;
          v31 -= 8;
        }
        while (v31);
      }
      break;
    case 6:
      v33 = v8[6];
      if (v33)
      {
        v34 = (float *)v8[19];
        v35 = 8 * (_QWORD)v33;
        do
        {
          v36 = *a2++;
          result = v36;
          *v34++ = result;
          v35 -= 8;
        }
        while (v35);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2423EE2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t mlx_tostring(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t mlx_retain(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t mlx_free(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (result)
  {
    if (v2 == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

BOOL mlx::core::detail::compile_available_for_device(_DWORD *a1)
{
  uint64_t v2;

  v2 = 1;
  return mlx::core::operator==(a1, &v2);
}

void mlx::core::load_gguf()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[load_gguf] Compile with MLX_BUILD_GGUF=ON to enable GGUF support.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2423EE398(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::save_gguf()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[save_gguf] Compile with MLX_BUILD_GGUF=ON to enable GGUF support.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2423EE3E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

mlx_string_ *mlx_string_::tostring(mlx_string_ *this)
{
  mlx_retain((uint64_t)this);
  return this;
}

_QWORD *mlx_string_new(char *__s)
{
  _QWORD *v1;
  std::string *v2;
  void *__p[2];
  uint64_t v5;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v1 = (_QWORD *)operator new();
  *v1 = &off_25134DAE8;
  v1[1] = 1;
  v2 = (std::string *)(v1 + 2);
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v1[4] = v5;
  }
  return v1;
}

void sub_2423EE4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x2426A82C4](v15, 0x1093C401FB1DE5ELL);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t mlx_string_data(uint64_t a1)
{
  uint64_t result;

  result = a1 + 16;
  if (*(char *)(a1 + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

void mlx_string_::~mlx_string_(void **this)
{
  *this = &off_25134DAE8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = &off_25134DAE8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x2426A82C4);
}

uint64_t mlx::core::allocator::malloc(mlx::core::allocator *this)
{
  _UNKNOWN **v2;
  uint64_t result;
  _QWORD *v4;
  void *exception;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = mlx::core::allocator::allocator(this);
  result = (*(uint64_t (**)(_UNKNOWN **, mlx::core::allocator *, uint64_t))*v2)(v2, this, 1);
  if (this)
  {
    if (!result)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"[malloc] Unable to allocate ", 28);
      v4 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" bytes.", 7);
      exception = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, v6);
      MEMORY[0x2426A8084](exception, v6);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  return result;
}

void sub_2423EE660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t mlx::core::allocator::free(mlx::core::allocator *a1)
{
  _UNKNOWN **v2;

  v2 = mlx::core::allocator::allocator(a1);
  return (*((uint64_t (**)(_UNKNOWN **, mlx::core::allocator *))*v2 + 1))(v2, a1);
}

void *mlx::core::allocator::CommonAllocator::malloc(mlx::core::allocator::CommonAllocator *this, size_t size)
{
  return malloc_type_malloc(size, 0x101B465DuLL);
}

void mlx::core::allocator::CommonAllocator::free(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  v3 = a2;
  v2 = (void *)mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v3);
  free(v2);
}

mlx::core::scheduler *mlx::core::allocator::malloc_or_wait(mlx::core::allocator *this)
{
  _UNKNOWN **v2;
  mlx::core::scheduler *result;
  mlx::core::scheduler *v4;
  mlx::core::scheduler::Scheduler *v5;
  mlx::core::allocator *v6;
  _UNKNOWN **v7;
  _UNKNOWN **v8;
  _QWORD *v9;
  void *exception;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = mlx::core::allocator::allocator(this);
  result = (mlx::core::scheduler *)(*(uint64_t (**)(_UNKNOWN **, mlx::core::allocator *, _QWORD))*v2)(v2, this, 0);
  if (this && !result)
  {
    while (1)
    {
      v4 = (mlx::core::scheduler *)mlx::core::scheduler::scheduler(result);
      if (*(int *)v4 < 1)
        break;
      v5 = (mlx::core::scheduler::Scheduler *)mlx::core::scheduler::scheduler(v4);
      mlx::core::scheduler::Scheduler::wait_for_one(v5);
      v7 = mlx::core::allocator::allocator(v6);
      result = (mlx::core::scheduler *)(*(uint64_t (**)(_UNKNOWN **, mlx::core::allocator *, _QWORD))*v7)(v7, this, 0);
      if (result)
        return result;
    }
    v8 = mlx::core::allocator::allocator(v4);
    result = (mlx::core::scheduler *)(*(uint64_t (**)(_UNKNOWN **, mlx::core::allocator *, uint64_t))*v8)(v8, this, 1);
    if (!result)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"[malloc_or_wait] Unable to allocate ", 36);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" bytes.", 7);
      exception = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, v11);
      MEMORY[0x2426A8084](exception, v11);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  return result;
}

void sub_2423EE830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::allocator::CommonAllocator::~CommonAllocator(mlx::core::allocator::CommonAllocator *this)
{
  JUMPOUT(0x2426A82C4);
}

void mlx::core::scheduler::Scheduler::wait_for_one(mlx::core::scheduler::Scheduler *this)
{
  int v2;
  std::unique_lock<std::mutex> v3;

  v3.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 120);
  v3.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 120));
  v2 = *(_DWORD *)this;
  if (*(int *)this < 2)
    goto LABEL_4;
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 72), &v3);
  while (*(_DWORD *)this == v2);
  if (v3.__owns_)
LABEL_4:
    std::mutex::unlock(v3.__m_);
}

void mlx_async_eval(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = 0uLL;
  v2 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v1, *(_QWORD **)(a1 + 16), *(_QWORD **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
  mlx::core::async_eval(&v1);
  v3 = (void **)&v1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_2423EE95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *mlx_checkpoint(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v8, a1 + 16);
  mlx::core::checkpoint((uint64_t)v8, (uint64_t)v10);
  *v2 = &off_251350058;
  v2[1] = 1;
  if (!v11)
  {
    v2[5] = 0;
    goto LABEL_11;
  }
  if (v11 == v10)
  {
    v2[5] = v2 + 2;
    (*(void (**)(_QWORD *))(v10[0] + 24))(v10);
  }
  else
  {
    v2[5] = (*(uint64_t (**)(void))(*v11 + 16))();
  }
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_15;
  }
  if (v9)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v2;
}

void sub_2423EEABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  MEMORY[0x2426A82C4](v17, 0x10A1C40E41A338ALL);
  _Unwind_Resume(a1);
}

void mlx_eval(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = 0uLL;
  v2 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v1, *(_QWORD **)(a1 + 16), *(_QWORD **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
  mlx::core::eval(&v1);
  v3 = (void **)&v1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_2423EEBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t mlx_jvp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v8[3];
  uint64_t v9;
  void **v10;

  v6 = operator new();
  mlx::core::jvp(a1 + 16, (const void ****)(a2 + 16), a3 + 16, (uint64_t)v8);
  mlx_vector_vector_array_::mlx_vector_vector_array_(v6, v8);
  v10 = (void **)&v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v6;
}

void sub_2423EEC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::~pair((void **)va);
  MEMORY[0x2426A82C4](v2, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_QWORD *mlx_value_and_grad(uint64_t a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p;
  void *v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)operator new();
  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::value_and_grad(a1 + 16, (uint64_t)&__p, (uint64_t)v13);
  *v6 = &off_251350098;
  v6[1] = 1;
  if (!v14)
  {
    v6[5] = 0;
    goto LABEL_11;
  }
  if (v14 == v13)
  {
    v6[5] = v6 + 2;
    (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
  }
  else
  {
    v6[5] = (*(uint64_t (**)(void))(*v14 + 16))();
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_2423EEE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == &a12)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v15, 0x10A1C40E41A338ALL);
  _Unwind_Resume(a1);
}

uint64_t mlx_vjp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v8[3];
  uint64_t v9;
  void **v10;

  v6 = operator new();
  mlx::core::vjp((mlx::core *)(a1 + 16), a2 + 16, (_QWORD *)(a3 + 16), (uint64_t)v8);
  mlx_vector_vector_array_::mlx_vector_vector_array_(v6, v8);
  v10 = (void **)&v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v6;
}

void sub_2423EEF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::~pair((void **)va);
  MEMORY[0x2426A82C4](v2, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

char *std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlx::core::array>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_2423EEFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<mlx::core::array>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t mlx_vector_vector_array_::mlx_vector_vector_array_(uint64_t a1, _QWORD **a2)
{
  char *v4;
  uint64_t i;
  void **v7;
  char v8;
  _QWORD *v9[3];
  _QWORD v10[3];
  _QWORD *v11;

  v11 = (_QWORD *)*MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_25134E768;
  *(_QWORD *)(a1 + 8) = 1;
  memset(v9, 0, sizeof(v9));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)v9, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  memset(v10, 0, sizeof(v10));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)v10, a2[3], a2[4], ((char *)a2[4] - (char *)a2[3]) >> 4);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = (void **)(a1 + 16);
  v8 = 0;
  v4 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a1 + 32) = v4 + 48;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 24) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<mlx::core::array>>,std::vector<mlx::core::array> const*,std::vector<mlx::core::array> const*,std::vector<mlx::core::array>*>(a1 + 32, v9, &v11, (uint64_t)v4);
  for (i = 3; i != -3; i -= 3)
  {
    v7 = (void **)&v9[i];
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  return a1;
}

void sub_2423EF14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;

  v14 = v13;
  *(_QWORD *)(v12 + 24) = v14;
  std::vector<std::vector<mlx::core::array>>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (i = 24; i != -24; i -= 24)
  {
    a10 = (void **)(&a12 + i);
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<mlx::core::array>>,std::vector<mlx::core::array> const*,std::vector<mlx::core::array> const*,std::vector<mlx::core::array>*>(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::vector<mlx::core::array>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2423EF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::vector<mlx::core::array>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::vector<mlx::core::array>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::vector<mlx::core::array>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::vector<mlx::core::array>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<std::vector<mlx::core::array>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t mlx::core::default_stream(mlx::core::metal *a1)
{
  mlx::core::scheduler *is_available;
  std::logic_error *exception;
  uint64_t v4;
  mlx::core::metal *v5;

  v5 = a1;
  is_available = (mlx::core::scheduler *)mlx::core::metal::is_available(a1);
  if ((is_available & 1) == 0)
  {
    v4 = 1;
    is_available = (mlx::core::scheduler *)mlx::core::operator==(&v5, &v4);
    if ((_DWORD)is_available)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[default_stream] Cannot get gpu stream without gpu backend.");
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
  }
  mlx::core::scheduler::scheduler(is_available);
  return mlx::core::scheduler::Scheduler::get_default_stream((uint64_t)&mlx::core::scheduler::scheduler(void)::scheduler, (int *)&v5);
}

void sub_2423EF444(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *mlx::core::scheduler::scheduler(mlx::core::scheduler *this)
{
  unsigned __int8 v1;

  {
    mlx::core::scheduler::Scheduler::Scheduler((mlx::core::scheduler::Scheduler *)&mlx::core::scheduler::scheduler(void)::scheduler);
    __cxa_atexit((void (*)(void *))mlx::core::scheduler::Scheduler::~Scheduler, &mlx::core::scheduler::scheduler(void)::scheduler, &dword_2422E0000);
  }
  return &mlx::core::scheduler::scheduler(void)::scheduler;
}

void sub_2423EF4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t mlx::core::scheduler::Scheduler::get_default_stream(uint64_t a1, int *a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::find<mlx::core::Device::DeviceType>((_QWORD *)(a1 + 32), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *(uint64_t *)((char *)v2 + 20);
}

uint64_t *mlx::core::set_default_stream(mlx::core::metal *a1, int a2)
{
  mlx::core::scheduler *is_available;
  std::logic_error *exception;
  uint64_t v5;
  mlx::core::metal *v6;
  int v7;

  v6 = a1;
  v7 = a2;
  is_available = (mlx::core::scheduler *)mlx::core::metal::is_available(a1);
  if ((is_available & 1) == 0)
  {
    v5 = 1;
    is_available = (mlx::core::scheduler *)mlx::core::operator==((_DWORD *)&v6 + 1, &v5);
    if ((_DWORD)is_available)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[set_default_stream] Cannot set gpu stream without gpu backend.");
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
  }
  mlx::core::scheduler::scheduler(is_available);
  return mlx::core::scheduler::Scheduler::set_default_stream((uint64_t)&mlx::core::scheduler::scheduler(void)::scheduler, (uint64_t)&v6);
}

void sub_2423EF5B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *mlx::core::scheduler::Scheduler::set_default_stream(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;

  result = std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::find<mlx::core::Device::DeviceType>((_QWORD *)(a1 + 32), (int *)(a2 + 4));
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v4 = *(_QWORD *)a2;
  *((_DWORD *)result + 7) = *(_DWORD *)(a2 + 8);
  *(uint64_t *)((char *)result + 20) = v4;
  return result;
}

uint64_t mlx::core::new_stream(mlx::core::metal *a1)
{
  mlx::core::scheduler *is_available;
  std::logic_error *exception;
  uint64_t v4;
  mlx::core::metal *v5;

  v5 = a1;
  is_available = (mlx::core::scheduler *)mlx::core::metal::is_available(a1);
  if ((is_available & 1) == 0)
  {
    v4 = 1;
    is_available = (mlx::core::scheduler *)mlx::core::operator==(&v5, &v4);
    if ((_DWORD)is_available)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[new_stream] Cannot make gpu stream without gpu backend.");
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
  }
  mlx::core::scheduler::scheduler(is_available);
  return mlx::core::scheduler::Scheduler::new_stream(&mlx::core::scheduler::scheduler(void)::scheduler, (uint64_t *)&v5);
}

void sub_2423EF69C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::scheduler::Scheduler::new_stream(_QWORD *a1, uint64_t *a2)
{
  char **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _BYTE v20[12];

  v3 = (char **)(a1 + 1);
  v4 = *a2;
  *(_DWORD *)v20 = (a1[2] - a1[1]) >> 3;
  *(_QWORD *)&v20[4] = *a2;
  v5 = operator new();
  mlx::core::scheduler::StreamThread::StreamThread(v5, *(uint64_t *)v20, HIDWORD(v4));
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v3) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v3;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v5;
    v8 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *v3;
    }
    a1[1] = v14;
    a1[2] = v8;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = v8;
  return *(_QWORD *)v20;
}

void sub_2423EF7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A0C40C3DAA8D3);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::new_stream(mlx::core *this)
{
  mlx::core *v1;
  uint64_t v3;

  v1 = (mlx::core *)mlx::core::scheduler::scheduler(this);
  v3 = mlx::core::default_device(v1);
  return mlx::core::scheduler::Scheduler::new_stream(&mlx::core::scheduler::scheduler(void)::scheduler, &v3);
}

void mlx::core::synchronize(uint64_t a1, int a2)
{
  _BOOL8 v2;
  std::promise<void> *v3;
  std::promise<void> *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *exception;
  std::future<void> v16;
  std::promise<void> *v17[2];
  uint64_t v18;
  int v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v18 = a1;
  v19 = a2;
  _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIvEENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v17);
  std::promise<void>::get_future(v17[0]);
  v20[0] = 0;
  v2 = mlx::core::operator==((_DWORD *)&v18 + 1, v20);
  if (!v2)
  {
    v17[0] = 0;
    v17[1] = 0;
    mlx::core::metal::make_synchronize_task();
  }
  v3 = v17[0];
  v4 = v17[1];
  v20[0] = v17[0];
  v20[1] = v17[1];
  v17[0] = 0;
  v17[1] = 0;
  mlx::core::scheduler::scheduler((mlx::core::scheduler *)v2);
  v5 = *(_QWORD *)(qword_2571FFB48 + 8 * (int)v18);
  std::mutex::lock((std::mutex *)v5);
  if (*(_BYTE *)(v5 + 160))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "Cannot enqueue work after stream is stopped.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 72);
  if (v6 == v7)
    v8 = 0;
  else
    v8 = 16 * (v6 - v7) - 1;
  v9 = *(_QWORD *)(v5 + 104);
  v10 = v9 + *(_QWORD *)(v5 + 96);
  if (v8 == v10)
  {
    std::deque<std::function<void ()(void)>>::__add_back_capacity((_QWORD *)(v5 + 64));
    v7 = *(_QWORD *)(v5 + 72);
    v9 = *(_QWORD *)(v5 + 104);
    v10 = v9 + *(_QWORD *)(v5 + 96);
  }
  v11 = (_QWORD *)(*(_QWORD *)(v7 + ((v10 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v10 & 0x7F));
  *v11 = &off_25134DBD0;
  v11[1] = v3;
  v11[2] = v4;
  v11[3] = v11;
  *(_QWORD *)(v5 + 104) = v9 + 1;
  std::mutex::unlock((std::mutex *)v5);
  std::condition_variable::notify_one((std::condition_variable *)(v5 + 112));
  std::__assoc_sub_state::wait(v16.__state_);
  std::future<void>::~future(&v16);
  v12 = (std::__shared_weak_count *)v17[1];
  if (v17[1])
  {
    v13 = (unint64_t *)&v17[1][1];
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2423EFA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::future<void> a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::mutex *v21;
  void *v22;

  __cxa_free_exception(v22);
  std::mutex::unlock(v21);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::future<void>::~future(&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2423EFB28()
{
  JUMPOUT(0x2423EFB18);
}

void sub_2423EFB30()
{
  JUMPOUT(0x2423EFB20);
}

void mlx::core::synchronize(mlx::core *this)
{
  mlx::core::metal *v1;
  uint64_t v2;
  int v3;

  v1 = (mlx::core::metal *)mlx::core::default_device(this);
  v2 = mlx::core::default_stream(v1);
  mlx::core::synchronize(v2, v3);
}

uint64_t *std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::find<mlx::core::Device::DeviceType>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t mlx::core::scheduler::StreamThread::StreamThread(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = 850045863;
  *(_QWORD *)(a1 + 112) = 1018212795;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  *(_QWORD *)(a1 + 164) = a2;
  *(_DWORD *)(a1 + 172) = a3;
  *(_QWORD *)&v8 = mlx::core::scheduler::StreamThread::thread_fn;
  *((_QWORD *)&v8 + 1) = 0;
  v7 = a1;
  std::thread::thread<void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*,void>((pthread_t *)(a1 + 176), &v8, &v7);
  mlx::core::metal::new_stream(a2, a3);
  return a1;
}

void sub_2423EFCCC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::condition_variable *v2;
  std::thread *v3;

  std::thread::~thread(v3);
  std::condition_variable::~condition_variable(v2);
  std::deque<std::function<void ()(void)>>::~deque[abi:ne180100](&v1[1].__m_.__sig);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::scheduler::StreamThread::thread_fn(std::mutex *this)
{
  std::condition_variable *v2;
  std::mutex *v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  std::unique_lock<std::mutex> __lk;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (std::condition_variable *)&this[1].__m_.__opaque[40];
  v3 = this + 1;
  do
  {
    v9 = 0;
    __lk.__m_ = this;
    __lk.__owns_ = 1;
    std::mutex::lock(this);
    while (1)
    {
      if (*(_QWORD *)&this[1].__m_.__opaque[32])
      {
        std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v8, *(_QWORD *)(*(_QWORD *)this[1].__m_.__opaque+ ((*(_QWORD *)&this[1].__m_.__opaque[24] >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*(_QWORD *)&this[1].__m_.__opaque[24] & 0x7FLL));
        std::deque<std::function<void ()(void)>>::pop_front(v3);
        v4 = 1;
        goto LABEL_7;
      }
      if (this[2].__m_.__opaque[24])
        break;
      std::condition_variable::wait(v2, &__lk);
    }
    v4 = 0;
LABEL_7:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v4)
    {
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *))(*v9 + 48))(v9);
    }
    result = v9;
    if (v9 == v8)
    {
      result = v8;
      v6 = 4;
    }
    else
    {
      if (!v9)
        continue;
      v6 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_2423EFE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, __int16 *a18)
{
  __int16 *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == &a13)
  {
    v20 = 4;
    v19 = &a13;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t std::deque<std::function<void ()(void)>>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v2 & 0x7F);
  v4 = *(_QWORD **)(v3 + 24);
  if (v4 == (_QWORD *)v3)
  {
    v5 = 4;
    v4 = (_QWORD *)v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
    v2 = a1[4];
  }
  v6 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v6;
  return std::deque<std::function<void ()(void)>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::function<void ()(void)>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x80)
    a2 = 1;
  if (v2 < 0x100)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 128;
  }
  return v4 ^ 1u;
}

void std::thread::thread<void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*,void>(pthread_t *a1, _OWORD *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9[2];

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = operator new();
  v9[0] = (uint64_t *)v7;
  v9[1] = 0;
  *(_QWORD *)v7 = v6;
  *(_OWORD *)(v7 + 8) = *a2;
  *(_QWORD *)(v7 + 24) = *a3;
  v8 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*>>, (void *)v7);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v9[0] = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*>>::reset[abi:ne180100](v9, 0);
  }
}

void sub_2423F00E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  const void **v7;

  v7 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (void (*)(_QWORD *))v7[1];
  v4 = (uint64_t)v7[2];
  v5 = (char *)v7[3] + (v4 >> 1);
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *))(*v5 + v3);
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*>>::reset[abi:ne180100]((uint64_t **)&v7, 0);
  return 0;
}

void sub_2423F019C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (mlx::core::scheduler::StreamThread::*)(void),mlx::core::scheduler::StreamThread*>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x2426A82C4);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x2426A8150]();
    JUMPOUT(0x2426A82C4);
  }
  return result;
}

uint64_t std::deque<std::function<void ()(void)>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 != v2)
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 == v9)
      goto LABEL_13;
    while (1)
    {
      v10 = *(_QWORD **)(v8 + 24);
      if (v10 == (_QWORD *)v8)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_7:
        (*(void (**)(void))(*v10 + 8 * v11))();
        v7 = (uint64_t)*v6;
      }
      v8 += 32;
      if (v8 - v7 == 4096)
      {
        v12 = (uint64_t)v6[1];
        ++v6;
        v7 = v12;
        v8 = v12;
      }
      if (v8 == v9)
      {
        v2 = (void **)a1[1];
        v3 = (void **)a1[2];
        goto LABEL_13;
      }
    }
    v10 = (_QWORD *)v8;
    v11 = 4;
    goto LABEL_7;
  }
  v4 = a1 + 5;
  v3 = (void **)a1[1];
LABEL_13:
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 64;
  }
  else
  {
    if (v14 != 2)
      goto LABEL_21;
    v15 = 128;
  }
  a1[4] = v15;
LABEL_21:
  while (v2 != v3)
  {
    v16 = *v2++;
    operator delete(v16);
  }
  return std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

mlx::core::scheduler::Scheduler *mlx::core::scheduler::Scheduler::Scheduler(mlx::core::scheduler::Scheduler *this)
{
  char *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int128 v9;

  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (char *)this + 32;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 1018212795;
  *((_DWORD *)this + 16) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 850045863;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  if (mlx::core::metal::is_available(this))
  {
    v8 = 1;
    v3 = mlx::core::scheduler::Scheduler::new_stream(this, &v8);
    LODWORD(v9) = 1;
    *(_QWORD *)((char *)&v9 + 4) = v3;
    HIDWORD(v9) = v4;
    std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::__emplace_unique_key_args<mlx::core::Device::DeviceType,std::pair<mlx::core::Device::DeviceType const,mlx::core::Stream>>((uint64_t)v2, (int *)&v9, &v9);
  }
  v8 = 0;
  v5 = mlx::core::scheduler::Scheduler::new_stream(this, &v8);
  LODWORD(v9) = 0;
  *(_QWORD *)((char *)&v9 + 4) = v5;
  HIDWORD(v9) = v6;
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::__emplace_unique_key_args<mlx::core::Device::DeviceType,std::pair<mlx::core::Device::DeviceType const,mlx::core::Stream>>((uint64_t)v2, (int *)&v9, &v9);
  return this;
}

void sub_2423F04D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::condition_variable *v3;
  std::mutex *v4;
  void **v5;
  void *v7;

  std::mutex::~mutex(v4);
  std::condition_variable::~condition_variable(v3);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table(v2);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::__emplace_unique_key_args<mlx::core::Device::DeviceType,std::pair<mlx::core::Device::DeviceType const,mlx::core::Stream>>(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,mlx::core::array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlx::core::array>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2423F0718(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void mlx::core::scheduler::Scheduler::~Scheduler(mlx::core::scheduler::Scheduler *this)
{
  mlx::core::scheduler::StreamThread **v2;
  mlx::core::scheduler::StreamThread **v3;
  void *v4;

  v2 = (mlx::core::scheduler::StreamThread **)*((_QWORD *)this + 1);
  v3 = (mlx::core::scheduler::StreamThread **)*((_QWORD *)this + 2);
  while (v2 != v3)
  {
    if (*v2)
    {
      mlx::core::scheduler::StreamThread::~StreamThread(*v2);
      MEMORY[0x2426A82C4]();
    }
    ++v2;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)this + 32);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

void mlx::core::scheduler::StreamThread::~StreamThread(mlx::core::scheduler::StreamThread *this)
{
  mlx::core::synchronize(*(_QWORD *)((char *)this + 164), *((_DWORD *)this + 43));
  std::mutex::lock((std::mutex *)this);
  *((_BYTE *)this + 160) = 1;
  std::mutex::unlock((std::mutex *)this);
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 112));
  std::thread::join((std::thread *)this + 22);
  std::thread::~thread((std::thread *)this + 22);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::deque<std::function<void ()(void)>>::~deque[abi:ne180100]((_QWORD *)this + 8);
  std::mutex::~mutex((std::mutex *)this);
}

std::promise<void> *_ZNSt3__115allocate_sharedB8ne180100INS_7promiseIvEENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  std::promise<void> *v2;
  std::promise<void> *result;

  v2 = (std::promise<void> *)operator new(0x20uLL);
  result = _ZNSt3__120__shared_ptr_emplaceINS_7promiseIvEENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_2423F08AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::promise<void> *_ZNSt3__120__shared_ptr_emplaceINS_7promiseIvEENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(std::promise<void> *a1)
{
  a1[2].__state_ = 0;
  a1->__state_ = (std::__assoc_sub_state *)&unk_25134DB80;
  a1[1].__state_ = 0;
  std::promise<void>::promise(a1 + 3);
  return a1;
}

void sub_2423F08F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::promise<void>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::promise<void>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

void std::__shared_ptr_emplace<std::promise<void>>::__on_zero_shared()
{
  JUMPOUT(0x2426A8264);
}

void std::deque<std::function<void ()(void)>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2423F0C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_25134DBD0;
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_25134DBD0;
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25134DBD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25134DBD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 8));
}

uint64_t std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::synchronize(mlx::core::Stream)::$_0,std::allocator<mlx::core::synchronize(mlx::core::Stream)::$_0>,void ()(void)>::target_type()
{
}

void mlx::core::scheduler::StreamThread::enqueue<std::function<void ()(void)>>(uint64_t a1, uint64_t a2)
{
  void *exception;

  std::mutex::lock((std::mutex *)a1);
  if (*(_BYTE *)(a1 + 160))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "Cannot enqueue work after stream is stopped.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::deque<std::function<void ()(void)>>::emplace_back<std::function<void ()(void)>>((_QWORD *)(a1 + 64), a2);
  std::mutex::unlock((std::mutex *)a1);
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 112));
}

void sub_2423F12C0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  __cxa_free_exception(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::function<void ()(void)>>::emplace_back<std::function<void ()(void)>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 16 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::function<void ()(void)>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v8, a2);
  v9 = a1[4];
  v10 = a1[5] + 1;
  a1[5] = v10;
  v11 = v9 + v10;
  v12 = a1[1];
  v13 = (_QWORD *)(v12 + 8 * (v11 >> 7));
  v14 = *v13 + 32 * (v11 & 0x7F);
  if (a1[2] == v12)
    v14 = 0;
  if (v14 == *v13)
    v14 = *(v13 - 1) + 4096;
  return v14 - 32;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void mlx::core::Gather::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::scheduler *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  mlx::core::array *v10;
  char *v11;
  void *exception;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
  v17[0] = &unk_2513463C8;
  v17[1] = mlx::core::allocator::free;
  v18 = v17;
  mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)v17);
  v7 = v18;
  if (v18 == v17)
  {
    v8 = 4;
    v7 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v10 = *(mlx::core::array **)a2;
  v9 = *(char **)(a2 + 8);
  v11 = (char *)(*(_QWORD *)a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)&v13, v11, v9, (v9 - v11) >> 4);
  if (v13 != v14)
  {
    switch(*(_DWORD *)(*(_QWORD *)v13 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_gather<unsigned char>(v10, &v13, (uint64_t)a3, (_QWORD *)(a1 + 24), (int **)(a1 + 48));
        goto LABEL_9;
      case 2:
        mlx::core::dispatch_gather<unsigned int>(v10, &v13, (uint64_t)a3, (_QWORD *)(a1 + 24), (int **)(a1 + 48));
        goto LABEL_9;
      case 3:
        mlx::core::dispatch_gather<signed char>(v10, &v13, (uint64_t)a3, (_QWORD *)(a1 + 24), (int **)(a1 + 48));
        goto LABEL_9;
      case 4:
        mlx::core::dispatch_gather<int>((uint64_t)v10, &v13, (uint64_t)a3, (_QWORD *)(a1 + 24), (int **)(a1 + 48));
        goto LABEL_9;
      case 5:
        mlx::core::dispatch_gather<long long>(v10, &v13, (uint64_t)a3, (_QWORD *)(a1 + 24), (int **)(a1 + 48));
        goto LABEL_9;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Gather::eval] Cannot gather with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        goto LABEL_9;
    }
  }
  mlx::core::dispatch_gather<BOOL>(v10, &v13, (uint64_t)a3, (_QWORD *)(a1 + 24), (int **)(a1 + 48));
LABEL_9:
  v16 = (void **)&v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_2423F1620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  a13 = &a10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

mlx::core::array *mlx::core::dispatch_gather<BOOL>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      this = mlx::core::gather<BOOL,BOOL>(this, a2, a3, a4, a5);
      break;
    case 1:
    case 3:
      this = mlx::core::gather<unsigned char,BOOL>(this, a2, a3, a4, a5);
      break;
    case 2:
    case 4:
      this = mlx::core::gather<unsigned int,BOOL>(this, a2, a3, a4, a5);
      break;
    case 5:
      this = mlx::core::gather<long long,BOOL>(this, a2, a3, a4, a5);
      break;
    case 6:
      this = mlx::core::gather<float,BOOL>(this, a2, a3, a4, a5);
      break;
    default:
      return this;
  }
  return this;
}

mlx::core::array *mlx::core::dispatch_gather<unsigned char>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      this = mlx::core::gather<BOOL,BOOL>(this, a2, a3, a4, a5);
      break;
    case 1:
    case 3:
      this = mlx::core::gather<unsigned char,BOOL>(this, a2, a3, a4, a5);
      break;
    case 2:
    case 4:
      this = mlx::core::gather<unsigned int,BOOL>(this, a2, a3, a4, a5);
      break;
    case 5:
      this = mlx::core::gather<long long,BOOL>(this, a2, a3, a4, a5);
      break;
    case 6:
      this = mlx::core::gather<float,BOOL>(this, a2, a3, a4, a5);
      break;
    default:
      return this;
  }
  return this;
}

mlx::core::array *mlx::core::dispatch_gather<unsigned int>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      this = mlx::core::gather<BOOL,unsigned int>(this, a2, a3, a4, a5);
      break;
    case 1:
    case 3:
      this = mlx::core::gather<unsigned char,unsigned int>(this, a2, a3, a4, a5);
      break;
    case 2:
    case 4:
      this = mlx::core::gather<unsigned int,unsigned int>(this, a2, a3, a4, a5);
      break;
    case 5:
      this = mlx::core::gather<long long,unsigned int>(this, a2, a3, a4, a5);
      break;
    case 6:
      this = mlx::core::gather<float,unsigned int>(this, a2, a3, a4, a5);
      break;
    default:
      return this;
  }
  return this;
}

mlx::core::array *mlx::core::dispatch_gather<signed char>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      this = mlx::core::gather<BOOL,signed char>(this, a2, a3, a4, a5);
      break;
    case 1:
    case 3:
      this = mlx::core::gather<unsigned char,signed char>(this, a2, a3, a4, a5);
      break;
    case 2:
    case 4:
      this = mlx::core::gather<unsigned int,signed char>(this, a2, a3, a4, a5);
      break;
    case 5:
      this = mlx::core::gather<long long,signed char>(this, a2, a3, a4, a5);
      break;
    case 6:
      this = mlx::core::gather<float,signed char>(this, a2, a3, a4, a5);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t mlx::core::dispatch_gather<int>(uint64_t this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      this = mlx::core::gather<BOOL,int>(this, a2, a3, a4, a5);
      break;
    case 1:
    case 3:
      this = mlx::core::gather<unsigned char,int>(this, a2, a3, a4, a5);
      break;
    case 2:
    case 4:
      this = mlx::core::gather<unsigned int,int>(this, a2, a3, a4, a5);
      break;
    case 5:
      this = mlx::core::gather<long long,int>(this, a2, a3, a4, a5);
      break;
    case 6:
      this = mlx::core::gather<float,int>(this, a2, a3, a4, a5);
      break;
    default:
      return this;
  }
  return this;
}

mlx::core::array *mlx::core::dispatch_gather<long long>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      this = mlx::core::gather<BOOL,long long>(this, a2, a3, a4, a5);
      break;
    case 1:
    case 3:
      this = mlx::core::gather<unsigned char,long long>(this, a2, a3, a4, a5);
      break;
    case 2:
    case 4:
      this = mlx::core::gather<unsigned int,long long>(this, a2, a3, a4, a5);
      break;
    case 5:
      this = mlx::core::gather<long long,long long>(this, a2, a3, a4, a5);
      break;
    case 6:
      this = mlx::core::gather<float,long long>(this, a2, a3, a4, a5);
      break;
    default:
      return this;
  }
  return this;
}

void mlx::core::Scatter::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3;
  mlx::core::array *v4;
  uint64_t v8;
  float v9;
  uint64_t **v10;
  uint64_t v11[3];
  void **v12;

  v4 = *(mlx::core::array **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)(v3 - *(_QWORD *)a2) <= 0x1F)
    mlx::core::Scatter::eval();
  memset(v11, 0, sizeof(v11));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v11, (_QWORD *)v4 + 2, (_QWORD *)(v3 - 16), (v3 - 16 - ((uint64_t)v4 + 16)) >> 4);
  v8 = *(_QWORD *)(a2 + 8);
  mlx::core::copy(v4, a3, 2, v9);
  v10 = (uint64_t **)(v8 - 16);
  switch(*(_DWORD *)(*(_QWORD *)v4 + 56))
  {
    case 0:
      mlx::core::dispatch_scatter<BOOL>(a3, v11, v10, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20));
      break;
    case 1:
      mlx::core::dispatch_scatter<unsigned char>(a3, v11, v10, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20));
      break;
    case 2:
      mlx::core::dispatch_scatter<unsigned int>(a3, v11, v10, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20));
      break;
    case 3:
      mlx::core::dispatch_scatter<signed char>(a3, v11, v10, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20));
      break;
    case 4:
      mlx::core::dispatch_scatter<int>(a3, v11, v10, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20));
      break;
    case 5:
      mlx::core::dispatch_scatter<long long>(a3, v11, v10, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20));
      break;
    case 6:
      mlx::core::dispatch_scatter<float>(a3, v11, v10, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20));
      break;
    default:
      break;
  }
  v12 = (void **)v11;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_2423F19A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::dispatch_scatter<BOOL>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  void *exception;

  if (*a2 != a2[1])
  {
    switch(*(_DWORD *)(*(_QWORD *)*a2 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_scatter_inds<BOOL,unsigned char>(a1, a2, a3, a4, a5);
        return;
      case 2:
        mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(a1, a2, a3, a4, a5);
        return;
      case 3:
        mlx::core::dispatch_scatter_inds<BOOL,signed char>(a1, a2, a3, a4, a5);
        return;
      case 4:
        mlx::core::dispatch_scatter_inds<BOOL,int>(a1, a2, a3, a4, a5);
        return;
      case 5:
        mlx::core::dispatch_scatter_inds<BOOL,long long>(a1, a2, a3, a4, a5);
        return;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Scatter::eval_cpu] Cannot scatter with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        return;
    }
  }
  mlx::core::dispatch_scatter_inds<BOOL,BOOL>(a1, a2, a3, a4, a5);
}

void sub_2423F1A7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::dispatch_scatter<unsigned char>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  void *exception;

  if (*a2 != a2[1])
  {
    switch(*(_DWORD *)(*(_QWORD *)*a2 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_scatter_inds<unsigned char,unsigned char>(a1, a2, a3, a4, a5);
        return;
      case 2:
        mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(a1, a2, a3, a4, a5);
        return;
      case 3:
        mlx::core::dispatch_scatter_inds<unsigned char,signed char>(a1, a2, a3, a4, a5);
        return;
      case 4:
        mlx::core::dispatch_scatter_inds<unsigned char,int>(a1, a2, a3, a4, a5);
        return;
      case 5:
        mlx::core::dispatch_scatter_inds<unsigned char,long long>(a1, a2, a3, a4, a5);
        return;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Scatter::eval_cpu] Cannot scatter with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        return;
    }
  }
  mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(a1, a2, a3, a4, a5);
}

void sub_2423F1B54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::dispatch_scatter<unsigned int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  void *exception;

  if (*a2 != a2[1])
  {
    switch(*(_DWORD *)(*(_QWORD *)*a2 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_scatter_inds<unsigned int,unsigned char>(a1, a2, a3, a4, a5);
        return;
      case 2:
        mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(a1, a2, a3, a4, a5);
        return;
      case 3:
        mlx::core::dispatch_scatter_inds<unsigned int,signed char>(a1, a2, a3, a4, a5);
        return;
      case 4:
        mlx::core::dispatch_scatter_inds<unsigned int,int>(a1, a2, a3, a4, a5);
        return;
      case 5:
        mlx::core::dispatch_scatter_inds<unsigned int,long long>(a1, a2, a3, a4, a5);
        return;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Scatter::eval_cpu] Cannot scatter with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        return;
    }
  }
  mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(a1, a2, a3, a4, a5);
}

void sub_2423F1C2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::dispatch_scatter<signed char>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  void *exception;

  if (*a2 != a2[1])
  {
    switch(*(_DWORD *)(*(_QWORD *)*a2 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_scatter_inds<signed char,unsigned char>(a1, a2, a3, a4, a5);
        return;
      case 2:
        mlx::core::dispatch_scatter_inds<signed char,unsigned int>(a1, a2, a3, a4, a5);
        return;
      case 3:
        mlx::core::dispatch_scatter_inds<signed char,signed char>(a1, a2, a3, a4, a5);
        return;
      case 4:
        mlx::core::dispatch_scatter_inds<signed char,int>(a1, a2, a3, a4, a5);
        return;
      case 5:
        mlx::core::dispatch_scatter_inds<signed char,long long>(a1, a2, a3, a4, a5);
        return;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Scatter::eval_cpu] Cannot scatter with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        return;
    }
  }
  mlx::core::dispatch_scatter_inds<signed char,BOOL>(a1, a2, a3, a4, a5);
}

void sub_2423F1D04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::dispatch_scatter<int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  void *exception;

  if (*a2 != a2[1])
  {
    switch(*(_DWORD *)(*(_QWORD *)*a2 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_scatter_inds<int,unsigned char>(a1, a2, a3, a4, a5);
        return;
      case 2:
        mlx::core::dispatch_scatter_inds<int,unsigned int>(a1, a2, a3, a4, a5);
        return;
      case 3:
        mlx::core::dispatch_scatter_inds<int,signed char>(a1, a2, a3, a4, a5);
        return;
      case 4:
        mlx::core::dispatch_scatter_inds<int,int>(a1, a2, a3, a4, a5);
        return;
      case 5:
        mlx::core::dispatch_scatter_inds<int,long long>(a1, a2, a3, a4, a5);
        return;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Scatter::eval_cpu] Cannot scatter with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        return;
    }
  }
  mlx::core::dispatch_scatter_inds<int,BOOL>(a1, a2, a3, a4, a5);
}

void sub_2423F1DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::dispatch_scatter<long long>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  void *exception;

  if (*a2 != a2[1])
  {
    switch(*(_DWORD *)(*(_QWORD *)*a2 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_scatter_inds<long long,unsigned char>(a1, a2, a3, a4, a5);
        return;
      case 2:
        mlx::core::dispatch_scatter_inds<long long,unsigned int>(a1, a2, a3, a4, a5);
        return;
      case 3:
        mlx::core::dispatch_scatter_inds<long long,signed char>(a1, a2, a3, a4, a5);
        return;
      case 4:
        mlx::core::dispatch_scatter_inds<long long,int>(a1, a2, a3, a4, a5);
        return;
      case 5:
        mlx::core::dispatch_scatter_inds<long long,long long>(a1, a2, a3, a4, a5);
        return;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Scatter::eval_cpu] Cannot scatter with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        return;
    }
  }
  mlx::core::dispatch_scatter_inds<long long,BOOL>(a1, a2, a3, a4, a5);
}

void sub_2423F1EB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::dispatch_scatter<float>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  void *exception;

  if (*a2 != a2[1])
  {
    switch(*(_DWORD *)(*(_QWORD *)*a2 + 56))
    {
      case 0:
        break;
      case 1:
        mlx::core::dispatch_scatter_inds<float,unsigned char>(a1, a2, a3, a4, a5);
        return;
      case 2:
        mlx::core::dispatch_scatter_inds<float,unsigned int>(a1, a2, a3, a4, a5);
        return;
      case 3:
        mlx::core::dispatch_scatter_inds<float,signed char>(a1, a2, a3, a4, a5);
        return;
      case 4:
        mlx::core::dispatch_scatter_inds<float,int>(a1, a2, a3, a4, a5);
        return;
      case 5:
        mlx::core::dispatch_scatter_inds<float,long long>(a1, a2, a3, a4, a5);
        return;
      case 6:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[Scatter::eval_cpu] Cannot scatter with floating point indices.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      default:
        return;
    }
  }
  mlx::core::dispatch_scatter_inds<float,BOOL>(a1, a2, a3, a4, a5);
}

void sub_2423F1F8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlx::core::array>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_2423F202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

mlx::core::array *mlx::core::gather<BOOL,BOOL>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  uint64_t v60;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v52 = a5;
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v60 = 0;
      v29 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      __len = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v60;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v60;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned __int8 *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v43 = v29 + 1;
          *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v32);
        }
        else if (v53)
        {
          this = (mlx::core::array *)memmove((void *)(v55 + v29), (const void *)(v56 + v32), __len);
          v43 = v29 + __len;
        }
        else
        {
          v44 = 0;
          v45 = *v52;
          v46 = ((unint64_t)((char *)v52[1] - (char *)*v52) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v48 + v32);
            ++v44;
            ++v29;
          }
          while (v44 != __len);
        }
        v29 = v43;
        ++v60;
      }
      while (v60 != v54);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned char,BOOL>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int quot;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  mlx::core::array *v59;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v29 = 0;
      v30 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      v52 = a5;
      v59 = v7;
      __len = v26;
      do
      {
        v31 = *a2;
        if (a2[1] == *a2)
        {
          v33 = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = *(int *)(*a4 + 4 * v32);
            v35 = *(uint64_t **)(v31 + 16 * v32);
            v36 = v29;
            if ((v35[21] & 2) == 0)
            {
              v37 = *v35;
              v38 = (unint64_t)(v35[1] - *v35) >> 2;
              v36 = 0;
              v39 = (v38 - 1);
              if ((int)v38 - 1 >= 0)
              {
                v40 = v35[3];
                quot = v29;
                do
                {
                  v42 = ldiv(quot, *(int *)(v37 + 4 * v39));
                  quot = v42.quot;
                  v36 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
                }
                while (v39 != -1);
              }
            }
            v43 = *(unsigned __int8 *)(v35[19] + v36);
            this = (mlx::core::array *)mlx::core::array::shape(v59, v34);
            v33 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v59 + 24) + 8 * v34) * v43;
            ++v32;
            v31 = *a2;
          }
          while (v32 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v44 = v30 + 1;
          *(_BYTE *)(v55 + v30) = *(_BYTE *)(v56 + v33);
        }
        else if (v53)
        {
          this = (mlx::core::array *)memmove((void *)(v55 + v30), (const void *)(v56 + v33), __len);
          v44 = v30 + __len;
        }
        else
        {
          for (i = 0; i != __len; ++i)
          {
            v46 = *v52;
            v47 = (unint64_t)((char *)v52[1] - (char *)*v52) >> 2;
            v48 = 0;
            v49 = (v47 - 1);
            if ((int)v47 - 1 >= 0)
            {
              v50 = *(_QWORD *)(*(_QWORD *)v59 + 24);
              LODWORD(this) = i;
              do
              {
                v51 = ldiv((int)this, v46[v49]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v50 + 8 * v49--) * v51.rem;
              }
              while (v49 != -1);
            }
            v44 = v30 + 1;
            *(_BYTE *)(v55 + v30++) = *(_BYTE *)(v56 + v48 + v33);
          }
        }
        ++v29;
        v30 = v44;
      }
      while (v29 != v54);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned int,BOOL>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned __int8 *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<long long,BOOL>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 8 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned __int8 *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 8 * v29), (const void *)(v57 + 8 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<float,BOOL>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned __int8 *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<BOOL,unsigned int>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  uint64_t v60;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v52 = a5;
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v60 = 0;
      v29 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      __len = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v60;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v60;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned int *)(v34[19] + 4 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v43 = v29 + 1;
          *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v32);
        }
        else if (v53)
        {
          this = (mlx::core::array *)memmove((void *)(v55 + v29), (const void *)(v56 + v32), __len);
          v43 = v29 + __len;
        }
        else
        {
          v44 = 0;
          v45 = *v52;
          v46 = ((unint64_t)((char *)v52[1] - (char *)*v52) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v48 + v32);
            ++v44;
            ++v29;
          }
          while (v44 != __len);
        }
        v29 = v43;
        ++v60;
      }
      while (v60 != v54);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned char,unsigned int>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int quot;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  mlx::core::array *v59;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v29 = 0;
      v30 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      v52 = a5;
      v59 = v7;
      __len = v26;
      do
      {
        v31 = *a2;
        if (a2[1] == *a2)
        {
          v33 = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = *(int *)(*a4 + 4 * v32);
            v35 = *(uint64_t **)(v31 + 16 * v32);
            v36 = v29;
            if ((v35[21] & 2) == 0)
            {
              v37 = *v35;
              v38 = (unint64_t)(v35[1] - *v35) >> 2;
              v36 = 0;
              v39 = (v38 - 1);
              if ((int)v38 - 1 >= 0)
              {
                v40 = v35[3];
                quot = v29;
                do
                {
                  v42 = ldiv(quot, *(int *)(v37 + 4 * v39));
                  quot = v42.quot;
                  v36 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
                }
                while (v39 != -1);
              }
            }
            v43 = *(unsigned int *)(v35[19] + 4 * v36);
            this = (mlx::core::array *)mlx::core::array::shape(v59, v34);
            v33 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v59 + 24) + 8 * v34) * v43;
            ++v32;
            v31 = *a2;
          }
          while (v32 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v44 = v30 + 1;
          *(_BYTE *)(v55 + v30) = *(_BYTE *)(v56 + v33);
        }
        else if (v53)
        {
          this = (mlx::core::array *)memmove((void *)(v55 + v30), (const void *)(v56 + v33), __len);
          v44 = v30 + __len;
        }
        else
        {
          for (i = 0; i != __len; ++i)
          {
            v46 = *v52;
            v47 = (unint64_t)((char *)v52[1] - (char *)*v52) >> 2;
            v48 = 0;
            v49 = (v47 - 1);
            if ((int)v47 - 1 >= 0)
            {
              v50 = *(_QWORD *)(*(_QWORD *)v59 + 24);
              LODWORD(this) = i;
              do
              {
                v51 = ldiv((int)this, v46[v49]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v50 + 8 * v49--) * v51.rem;
              }
              while (v49 != -1);
            }
            v44 = v30 + 1;
            *(_BYTE *)(v55 + v30++) = *(_BYTE *)(v56 + v48 + v33);
          }
        }
        ++v29;
        v30 = v44;
      }
      while (v29 != v54);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned int,unsigned int>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned int *)(v34[19] + 4 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<long long,unsigned int>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 8 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned int *)(v34[19] + 4 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 8 * v29), (const void *)(v57 + 8 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<float,unsigned int>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(unsigned int *)(v34[19] + 4 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33) * v42;
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<BOOL,signed char>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ldiv_t v52;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t __len;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_59;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_59:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v55 = v28 / v26;
      __len = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(char *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v43 = (int)this;
            if ((int)v42 >= 0)
              v43 = 0;
            v32 += (v43 + v42) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v44 = v29 + 1;
          *(_BYTE *)(v56 + v29) = *(_BYTE *)(v57 + v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + v29), (const void *)(v57 + v32), __len);
          v44 = v29 + __len;
        }
        else
        {
          v45 = 0;
          v46 = *v53;
          v47 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v48 = *(_QWORD *)v7;
          do
          {
            v49 = 0;
            if ((v47 & 0x80000000) == 0)
            {
              v50 = *(_QWORD *)(v48 + 24);
              v51 = v47;
              LODWORD(this) = v45;
              do
              {
                v52 = ldiv((int)this, v46[v51]);
                this = (mlx::core::array *)v52.quot;
                v49 += *(_QWORD *)(v50 + 8 * v51--) * v52.rem;
              }
              while (v51 != -1);
            }
            v44 = v29 + 1;
            *(_BYTE *)(v56 + v29) = *(_BYTE *)(v57 + v49 + v32);
            ++v45;
            ++v29;
          }
          while (v45 != __len);
        }
        v29 = v44;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned char,signed char>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int quot;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ldiv_t v52;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t __len;
  mlx::core::array *v60;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_59;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_59:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v29 = 0;
      v30 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v55 = v28 / v26;
      v53 = a5;
      v60 = v7;
      __len = v26;
      do
      {
        v31 = *a2;
        if (a2[1] == *a2)
        {
          v33 = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = *(int *)(*a4 + 4 * v32);
            v35 = *(uint64_t **)(v31 + 16 * v32);
            v36 = v29;
            if ((v35[21] & 2) == 0)
            {
              v37 = *v35;
              v38 = (unint64_t)(v35[1] - *v35) >> 2;
              v36 = 0;
              v39 = (v38 - 1);
              if ((int)v38 - 1 >= 0)
              {
                v40 = v35[3];
                quot = v29;
                do
                {
                  v42 = ldiv(quot, *(int *)(v37 + 4 * v39));
                  quot = v42.quot;
                  v36 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
                }
                while (v39 != -1);
              }
            }
            v43 = *(char *)(v35[19] + v36);
            this = (mlx::core::array *)mlx::core::array::shape(v60, v34);
            v44 = (int)this;
            if ((int)v43 >= 0)
              v44 = 0;
            v33 += (v44 + v43) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v60 + 24) + 8 * v34);
            ++v32;
            v31 = *a2;
          }
          while (v32 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v45 = v30 + 1;
          *(_BYTE *)(v56 + v30) = *(_BYTE *)(v57 + v33);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + v30), (const void *)(v57 + v33), __len);
          v45 = v30 + __len;
        }
        else
        {
          for (i = 0; i != __len; ++i)
          {
            v47 = *v53;
            v48 = (unint64_t)((char *)v53[1] - (char *)*v53) >> 2;
            v49 = 0;
            v50 = (v48 - 1);
            if ((int)v48 - 1 >= 0)
            {
              v51 = *(_QWORD *)(*(_QWORD *)v60 + 24);
              LODWORD(this) = i;
              do
              {
                v52 = ldiv((int)this, v47[v50]);
                this = (mlx::core::array *)v52.quot;
                v49 += *(_QWORD *)(v51 + 8 * v50--) * v52.rem;
              }
              while (v50 != -1);
            }
            v45 = v30 + 1;
            *(_BYTE *)(v56 + v30++) = *(_BYTE *)(v57 + v49 + v33);
          }
        }
        ++v29;
        v30 = v45;
      }
      while (v29 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned int,signed char>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ldiv_t v52;
  uint64_t __len;
  int **v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v62;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v54 = a5;
  v55 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_59;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_59:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v62 = 0;
      v29 = 0;
      v57 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v58 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v56 = v28 / v26;
      v59 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v62;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v62;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(char *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v43 = (int)this;
            if ((int)v42 >= 0)
              v43 = 0;
            v32 += (v43 + v42) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v59 == 1)
        {
          v44 = v29 + 1;
          *(_DWORD *)(v57 + 4 * v29) = *(_DWORD *)(v58 + 4 * v32);
        }
        else if (v55)
        {
          this = (mlx::core::array *)memmove((void *)(v57 + 4 * v29), (const void *)(v58 + 4 * v32), __len);
          v44 = v29 + v59;
        }
        else
        {
          v45 = 0;
          v46 = *v54;
          v47 = ((unint64_t)((char *)v54[1] - (char *)*v54) >> 2) - 1;
          v48 = *(_QWORD *)v7;
          do
          {
            v49 = 0;
            if ((v47 & 0x80000000) == 0)
            {
              v50 = *(_QWORD *)(v48 + 24);
              v51 = v47;
              LODWORD(this) = v45;
              do
              {
                v52 = ldiv((int)this, v46[v51]);
                this = (mlx::core::array *)v52.quot;
                v49 += *(_QWORD *)(v50 + 8 * v51--) * v52.rem;
              }
              while (v51 != -1);
            }
            v44 = v29 + 1;
            *(_DWORD *)(v57 + 4 * v29) = *(_DWORD *)(v58 + 4 * (v49 + v32));
            ++v45;
            ++v29;
          }
          while (v45 != v59);
        }
        v29 = v44;
        ++v62;
      }
      while (v62 != v56);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<long long,signed char>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ldiv_t v52;
  uint64_t __len;
  int **v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v62;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v54 = a5;
  v55 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_59;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_59:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v62 = 0;
      v29 = 0;
      v57 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v58 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 8 * v26;
      v56 = v28 / v26;
      v59 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v62;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v62;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(char *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v43 = (int)this;
            if ((int)v42 >= 0)
              v43 = 0;
            v32 += (v43 + v42) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v59 == 1)
        {
          v44 = v29 + 1;
          *(_QWORD *)(v57 + 8 * v29) = *(_QWORD *)(v58 + 8 * v32);
        }
        else if (v55)
        {
          this = (mlx::core::array *)memmove((void *)(v57 + 8 * v29), (const void *)(v58 + 8 * v32), __len);
          v44 = v29 + v59;
        }
        else
        {
          v45 = 0;
          v46 = *v54;
          v47 = ((unint64_t)((char *)v54[1] - (char *)*v54) >> 2) - 1;
          v48 = *(_QWORD *)v7;
          do
          {
            v49 = 0;
            if ((v47 & 0x80000000) == 0)
            {
              v50 = *(_QWORD *)(v48 + 24);
              v51 = v47;
              LODWORD(this) = v45;
              do
              {
                v52 = ldiv((int)this, v46[v51]);
                this = (mlx::core::array *)v52.quot;
                v49 += *(_QWORD *)(v50 + 8 * v51--) * v52.rem;
              }
              while (v51 != -1);
            }
            v44 = v29 + 1;
            *(_QWORD *)(v57 + 8 * v29) = *(_QWORD *)(v58 + 8 * (v49 + v32));
            ++v45;
            ++v29;
          }
          while (v45 != v59);
        }
        v29 = v44;
        ++v62;
      }
      while (v62 != v56);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<float,signed char>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ldiv_t v52;
  uint64_t __len;
  int **v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v62;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v54 = a5;
  v55 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_59;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_59:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v62 = 0;
      v29 = 0;
      v57 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v58 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v56 = v28 / v26;
      v59 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v62;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v62;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(char *)(v34[19] + v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v43 = (int)this;
            if ((int)v42 >= 0)
              v43 = 0;
            v32 += (v43 + v42) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v59 == 1)
        {
          v44 = v29 + 1;
          *(_DWORD *)(v57 + 4 * v29) = *(_DWORD *)(v58 + 4 * v32);
        }
        else if (v55)
        {
          this = (mlx::core::array *)memmove((void *)(v57 + 4 * v29), (const void *)(v58 + 4 * v32), __len);
          v44 = v29 + v59;
        }
        else
        {
          v45 = 0;
          v46 = *v54;
          v47 = ((unint64_t)((char *)v54[1] - (char *)*v54) >> 2) - 1;
          v48 = *(_QWORD *)v7;
          do
          {
            v49 = 0;
            if ((v47 & 0x80000000) == 0)
            {
              v50 = *(_QWORD *)(v48 + 24);
              v51 = v47;
              LODWORD(this) = v45;
              do
              {
                v52 = ldiv((int)this, v46[v51]);
                this = (mlx::core::array *)v52.quot;
                v49 += *(_QWORD *)(v50 + 8 * v51--) * v52.rem;
              }
              while (v51 != -1);
            }
            v44 = v29 + 1;
            *(_DWORD *)(v57 + 4 * v29) = *(_DWORD *)(v58 + 4 * (v49 + v32));
            ++v45;
            ++v29;
          }
          while (v45 != v59);
        }
        v29 = v44;
        ++v62;
      }
      while (v62 != v56);
    }
  }
  return this;
}

uint64_t mlx::core::gather<BOOL,int>(uint64_t this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  uint64_t v60;

  v7 = (mlx::core::array *)this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v52 = a5;
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v60 = 0;
      v29 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      __len = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v60;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v60;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(int *)(v34[19] + 4 * v35);
            this = mlx::core::array::shape(v7, v33);
            v32 += (v42 + (int)(this & ((int)v42 >> 31))) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v43 = v29 + 1;
          *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v32);
        }
        else if (v53)
        {
          this = (uint64_t)memmove((void *)(v55 + v29), (const void *)(v56 + v32), __len);
          v43 = v29 + __len;
        }
        else
        {
          v44 = 0;
          v45 = *v52;
          v46 = ((unint64_t)((char *)v52[1] - (char *)*v52) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v48 + v32);
            ++v44;
            ++v29;
          }
          while (v44 != __len);
        }
        v29 = v43;
        ++v60;
      }
      while (v60 != v54);
    }
  }
  return this;
}

uint64_t mlx::core::gather<unsigned char,int>(uint64_t this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int quot;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  mlx::core::array *v59;

  v7 = (mlx::core::array *)this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v29 = 0;
      v30 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      v52 = a5;
      v59 = v7;
      __len = v26;
      do
      {
        v31 = *a2;
        if (a2[1] == *a2)
        {
          v33 = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = *(int *)(*a4 + 4 * v32);
            v35 = *(uint64_t **)(v31 + 16 * v32);
            v36 = v29;
            if ((v35[21] & 2) == 0)
            {
              v37 = *v35;
              v38 = (unint64_t)(v35[1] - *v35) >> 2;
              v36 = 0;
              v39 = (v38 - 1);
              if ((int)v38 - 1 >= 0)
              {
                v40 = v35[3];
                quot = v29;
                do
                {
                  v42 = ldiv(quot, *(int *)(v37 + 4 * v39));
                  quot = v42.quot;
                  v36 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
                }
                while (v39 != -1);
              }
            }
            v43 = *(int *)(v35[19] + 4 * v36);
            this = mlx::core::array::shape(v59, v34);
            v33 += (v43 + (int)(this & ((int)v43 >> 31))) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v59 + 24) + 8 * v34);
            ++v32;
            v31 = *a2;
          }
          while (v32 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v44 = v30 + 1;
          *(_BYTE *)(v55 + v30) = *(_BYTE *)(v56 + v33);
        }
        else if (v53)
        {
          this = (uint64_t)memmove((void *)(v55 + v30), (const void *)(v56 + v33), __len);
          v44 = v30 + __len;
        }
        else
        {
          for (i = 0; i != __len; ++i)
          {
            v46 = *v52;
            v47 = (unint64_t)((char *)v52[1] - (char *)*v52) >> 2;
            v48 = 0;
            v49 = (v47 - 1);
            if ((int)v47 - 1 >= 0)
            {
              v50 = *(_QWORD *)(*(_QWORD *)v59 + 24);
              LODWORD(this) = i;
              do
              {
                v51 = ldiv((int)this, v46[v49]);
                this = v51.quot;
                v48 += *(_QWORD *)(v50 + 8 * v49--) * v51.rem;
              }
              while (v49 != -1);
            }
            v44 = v30 + 1;
            *(_BYTE *)(v55 + v30++) = *(_BYTE *)(v56 + v48 + v33);
          }
        }
        ++v29;
        v30 = v44;
      }
      while (v29 != v54);
    }
  }
  return this;
}

uint64_t mlx::core::gather<unsigned int,int>(uint64_t this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = (mlx::core::array *)this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(int *)(v34[19] + 4 * v35);
            this = mlx::core::array::shape(v7, v33);
            v32 += (v42 + (int)(this & ((int)v42 >> 31))) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (uint64_t)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

uint64_t mlx::core::gather<long long,int>(uint64_t this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = (mlx::core::array *)this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 8 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(int *)(v34[19] + 4 * v35);
            this = mlx::core::array::shape(v7, v33);
            v32 += (v42 + (int)(this & ((int)v42 >> 31))) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * v32);
        }
        else if (v54)
        {
          this = (uint64_t)memmove((void *)(v56 + 8 * v29), (const void *)(v57 + 8 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

uint64_t mlx::core::gather<float,int>(uint64_t this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = (mlx::core::array *)this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(int *)(v34[19] + 4 * v35);
            this = mlx::core::array::shape(v7, v33);
            v32 += (v42 + (int)(this & ((int)v42 >> 31))) * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (uint64_t)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<BOOL,long long>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  uint64_t v60;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v52 = a5;
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v60 = 0;
      v29 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      __len = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v60;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v60;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(_QWORD *)(v34[19] + 8 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += (((int)this & (unint64_t)(v42 >> 63)) + v42)
                 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v43 = v29 + 1;
          *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v32);
        }
        else if (v53)
        {
          this = (mlx::core::array *)memmove((void *)(v55 + v29), (const void *)(v56 + v32), __len);
          v43 = v29 + __len;
        }
        else
        {
          v44 = 0;
          v45 = *v52;
          v46 = ((unint64_t)((char *)v52[1] - (char *)*v52) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_BYTE *)(v55 + v29) = *(_BYTE *)(v56 + v48 + v32);
            ++v44;
            ++v29;
          }
          while (v44 != __len);
        }
        v29 = v43;
        ++v60;
      }
      while (v60 != v54);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned char,long long>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int quot;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  int **v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t __len;
  mlx::core::array *v59;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v29 = 0;
      v30 = 0;
      v55 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v56 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      v54 = v28 / v26;
      v52 = a5;
      v59 = v7;
      __len = v26;
      do
      {
        v31 = *a2;
        if (a2[1] == *a2)
        {
          v33 = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = *(int *)(*a4 + 4 * v32);
            v35 = *(uint64_t **)(v31 + 16 * v32);
            v36 = v29;
            if ((v35[21] & 2) == 0)
            {
              v37 = *v35;
              v38 = (unint64_t)(v35[1] - *v35) >> 2;
              v36 = 0;
              v39 = (v38 - 1);
              if ((int)v38 - 1 >= 0)
              {
                v40 = v35[3];
                quot = v29;
                do
                {
                  v42 = ldiv(quot, *(int *)(v37 + 4 * v39));
                  quot = v42.quot;
                  v36 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
                }
                while (v39 != -1);
              }
            }
            v43 = *(_QWORD *)(v35[19] + 8 * v36);
            this = (mlx::core::array *)mlx::core::array::shape(v59, v34);
            v33 += (((int)this & (unint64_t)(v43 >> 63)) + v43)
                 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v59 + 24) + 8 * v34);
            ++v32;
            v31 = *a2;
          }
          while (v32 < (a2[1] - *a2) >> 4);
        }
        if (__len == 1)
        {
          v44 = v30 + 1;
          *(_BYTE *)(v55 + v30) = *(_BYTE *)(v56 + v33);
        }
        else if (v53)
        {
          this = (mlx::core::array *)memmove((void *)(v55 + v30), (const void *)(v56 + v33), __len);
          v44 = v30 + __len;
        }
        else
        {
          for (i = 0; i != __len; ++i)
          {
            v46 = *v52;
            v47 = (unint64_t)((char *)v52[1] - (char *)*v52) >> 2;
            v48 = 0;
            v49 = (v47 - 1);
            if ((int)v47 - 1 >= 0)
            {
              v50 = *(_QWORD *)(*(_QWORD *)v59 + 24);
              LODWORD(this) = i;
              do
              {
                v51 = ldiv((int)this, v46[v49]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v50 + 8 * v49--) * v51.rem;
              }
              while (v49 != -1);
            }
            v44 = v30 + 1;
            *(_BYTE *)(v55 + v30++) = *(_BYTE *)(v56 + v48 + v33);
          }
        }
        ++v29;
        v30 = v44;
      }
      while (v29 != v54);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<unsigned int,long long>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(_QWORD *)(v34[19] + 8 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += (((int)this & (unint64_t)(v42 >> 63)) + v42)
                 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<long long,long long>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 8 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(_QWORD *)(v34[19] + 8 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += (((int)this & (unint64_t)(v42 >> 63)) + v42)
                 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 8 * v29), (const void *)(v57 + 8 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_QWORD *)(v56 + 8 * v29) = *(_QWORD *)(v57 + 8 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

mlx::core::array *mlx::core::gather<float,long long>(mlx::core::array *this, uint64_t *a2, uint64_t a3, _QWORD *a4, int **a5)
{
  mlx::core::array *v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  int v23;
  BOOL v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ldiv_t v51;
  uint64_t __len;
  int **v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v61;

  v7 = this;
  v8 = *a5;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 168) & 4) == 0)
    {
      v9 = 0;
      goto LABEL_31;
    }
    v15 = (unint64_t)((char *)a5[1] - (char *)v8) >> 2;
    v16 = v15 - 1;
    if ((int)v15 - 1 >= -1)
      v16 = -1;
    v17 = v16 + 1;
    v18 = v15 + 1;
    while (1)
    {
      v19 = v18 - 2;
      if (v18 - 2 < 0)
        break;
      --v18;
      if (v8[v19] != 1)
        goto LABEL_25;
    }
    v18 = v17;
LABEL_25:
    v22 = v18 - 2;
    if (v18 - 2 >= 0)
    {
      do
      {
        this = (mlx::core::array *)mlx::core::array::shape(v7, v22);
        v8 = *a5;
        v23 = (*a5)[v22];
        v9 = (_DWORD)this == v23;
        v24 = v22-- != 0;
      }
      while (v24 && (_DWORD)this == v23);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v10 = a5[1];
  v11 = (char *)v10 - (char *)v8;
  if (v10 == v8)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (v8[v12] == 1)
    {
      if (v13 == ++v12)
      {
        LODWORD(v12) = v13;
        break;
      }
    }
    v14 = (v12 + 1);
  }
  if (v14 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2)
  {
LABEL_30:
    v9 = 1;
    goto LABEL_31;
  }
  do
  {
    this = (mlx::core::array *)mlx::core::array::shape(v7, v14);
    v8 = *a5;
    v20 = (*a5)[v14];
    v9 = (_DWORD)this == v20;
  }
  while (++v14 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 2 && (_DWORD)this == v20);
LABEL_31:
  v25 = a5[1];
  v53 = a5;
  v54 = v9;
  v26 = 1;
  if (v8 == v25)
    goto LABEL_57;
  do
  {
    v27 = *v8++;
    v26 *= v27;
  }
  while (v8 != v25);
  if (v26)
  {
LABEL_57:
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v26 <= v28)
    {
      v61 = 0;
      v29 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)a3 + 152);
      v57 = *(_QWORD *)(*(_QWORD *)v7 + 152);
      __len = 4 * v26;
      v55 = v28 / v26;
      v58 = v26;
      do
      {
        v30 = *a2;
        if (a2[1] == *a2)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(int *)(*a4 + 4 * v31);
            v34 = *(uint64_t **)(v30 + 16 * v31);
            v35 = v61;
            if ((v34[21] & 2) == 0)
            {
              v36 = *v34;
              v37 = (unint64_t)(v34[1] - *v34) >> 2;
              v35 = 0;
              v38 = (v37 - 1);
              if ((int)v37 - 1 >= 0)
              {
                v39 = v34[3];
                quot = v61;
                do
                {
                  v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                  quot = v41.quot;
                  v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
                }
                while (v38 != -1);
              }
            }
            v42 = *(_QWORD *)(v34[19] + 8 * v35);
            this = (mlx::core::array *)mlx::core::array::shape(v7, v33);
            v32 += (((int)this & (unint64_t)(v42 >> 63)) + v42)
                 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v33);
            ++v31;
            v30 = *a2;
          }
          while (v31 < (a2[1] - *a2) >> 4);
        }
        if (v58 == 1)
        {
          v43 = v29 + 1;
          *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * v32);
        }
        else if (v54)
        {
          this = (mlx::core::array *)memmove((void *)(v56 + 4 * v29), (const void *)(v57 + 4 * v32), __len);
          v43 = v29 + v58;
        }
        else
        {
          v44 = 0;
          v45 = *v53;
          v46 = ((unint64_t)((char *)v53[1] - (char *)*v53) >> 2) - 1;
          v47 = *(_QWORD *)v7;
          do
          {
            v48 = 0;
            if ((v46 & 0x80000000) == 0)
            {
              v49 = *(_QWORD *)(v47 + 24);
              v50 = v46;
              LODWORD(this) = v44;
              do
              {
                v51 = ldiv((int)this, v45[v50]);
                this = (mlx::core::array *)v51.quot;
                v48 += *(_QWORD *)(v49 + 8 * v50--) * v51.rem;
              }
              while (v50 != -1);
            }
            v43 = v29 + 1;
            *(_DWORD *)(v56 + 4 * v29) = *(_DWORD *)(v57 + 4 * (v48 + v32));
            ++v44;
            ++v29;
          }
          while (v44 != v58);
        }
        v29 = v43;
        ++v61;
      }
      while (v61 != v55);
    }
  }
  return this;
}

void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
    case 3:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<BOOL,unsigned char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
    case 3:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
    case 3:
      mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#3}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#2}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
    case 3:
      mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#3}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#2}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
    case 3:
      mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#3}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#2}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
    case 3:
      mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#3}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#2}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423F7E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(unsigned __int8 *)(v34 + v42) != -*(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423F8160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  BOOL v47;
  char v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v57, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v29 = 0;
        v30 = (int *)__p;
        v56 = v59 * v58;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v34 = *(_QWORD *)(*(_QWORD *)v57 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v56 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v56 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v54 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          if (*(_BYTE *)(v33 + v37))
            v47 = *(_BYTE *)(v34 + v42) == 0;
          else
            v47 = 1;
          v48 = !v47;
          *(_BYTE *)(v34 + v42) = v48;
          ++v29;
        }
        while (v29 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_2423F8450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,BOOL,void mlx::core::dispatch_scatter_inds<BOOL,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,BOOL *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) |= *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423F8738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423F8A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(unsigned __int8 *)(v34 + v42) != -*(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423F8D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  BOOL v47;
  char v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v57, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v29 = 0;
        v30 = (int *)__p;
        v56 = v59 * v58;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v34 = *(_QWORD *)(*(_QWORD *)v57 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v56 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v56 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v54 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          if (*(_BYTE *)(v33 + v37))
            v47 = *(_BYTE *)(v34 + v42) == 0;
          else
            v47 = 1;
          v48 = !v47;
          *(_BYTE *)(v34 + v42) = v48;
          ++v29;
        }
        while (v29 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_2423F8FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,unsigned int,void mlx::core::dispatch_scatter_inds<BOOL,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,unsigned int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) |= *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423F92E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_BYTE *)(v35 + v43) = *(_BYTE *)(v34 + v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2423F95D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_BYTE *)(v35 + v43) = *(unsigned __int8 *)(v35 + v43) != -*(_BYTE *)(v34 + v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2423F98D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  BOOL v48;
  char v49;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  mlx::core::array *v58;
  uint64_t v59;
  uint64_t v60;
  void *__p;
  int *v62;
  uint64_t v63;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v53 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v54 = v12;
  __p = 0;
  v62 = 0;
  v63 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v62)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v62);
  }
  if (v54)
  {
    v59 = v14;
    v60 = 0;
    v56 = (v8 >> 4);
    v58 = a2;
    v51 = v5;
    v52 = a4;
    do
    {
      if ((int)v53 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v60;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v60;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v58, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v58 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v56);
      }
      if (v59)
      {
        v30 = 0;
        v31 = (int *)__p;
        v57 = v60 * v59;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v62 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v55 = *(_QWORD *)v58;
        v35 = *(_QWORD *)(*(_QWORD *)v58 + 152) + v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v57 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v57 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v55 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          if (*(_BYTE *)(v34 + v38))
            v48 = *(_BYTE *)(v35 + v43) == 0;
          else
            v48 = 1;
          v49 = !v48;
          *(_BYTE *)(v35 + v43) = v49;
          ++v30;
        }
        while (v30 != v59);
      }
      ++v60;
      v5 = v51;
      a4 = v52;
    }
    while (v60 != v54);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v62 = v13;
    operator delete(v13);
  }
}

void sub_2423F9BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,signed char,void mlx::core::dispatch_scatter_inds<BOOL,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,signed char *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_BYTE *)(v35 + v43) |= *(_BYTE *)(v34 + v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2423F9EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423FA1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(unsigned __int8 *)(v34 + v42) != -*(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423FA4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  BOOL v47;
  char v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v57, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v29 = 0;
        v30 = (int *)__p;
        v56 = v59 * v58;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v34 = *(_QWORD *)(*(_QWORD *)v57 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v56 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v56 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v54 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          if (*(_BYTE *)(v33 + v37))
            v47 = *(_BYTE *)(v34 + v42) == 0;
          else
            v47 = 1;
          v48 = !v47;
          *(_BYTE *)(v34 + v42) = v48;
          ++v29;
        }
        while (v29 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_2423FA7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,int,void mlx::core::dispatch_scatter_inds<BOOL,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) |= *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423FAA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423FAD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) = *(unsigned __int8 *)(v34 + v42) != -*(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423FB078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  BOOL v47;
  char v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v57, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v29 = 0;
        v30 = (int *)__p;
        v56 = v59 * v58;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v34 = *(_QWORD *)(*(_QWORD *)v57 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v56 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v56 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v54 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          if (*(_BYTE *)(v33 + v37))
            v47 = *(_BYTE *)(v34 + v42) == 0;
          else
            v47 = 1;
          v48 = !v47;
          *(_BYTE *)(v34 + v42) = v48;
          ++v29;
        }
        while (v29 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_2423FB374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<BOOL,long long,void mlx::core::dispatch_scatter_inds<BOOL,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(BOOL,long long *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_BYTE *)(v34 + v42) |= *(_BYTE *)(v33 + v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2423FB668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned char,unsigned char>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#1}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned __int8 *)(v18[19] + v19);
      v4 = v52;
      mlx::core::array::shape(v52, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) = *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FBD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#2}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned __int8 *)(v18[19] + v19);
      v4 = v52;
      mlx::core::array::shape(v52, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) += *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FBFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#3}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned __int8 *)(v18[19] + v19);
      v4 = v52;
      mlx::core::array::shape(v52, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) *= *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FC2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned __int8 *)(v18[19] + v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2423FC57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned __int8 *)(v18[19] + v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2423FC850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#1}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned int *)(v18[19] + 4 * v19);
      v4 = v52;
      mlx::core::array::shape(v52, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) = *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FCB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#2}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned int *)(v18[19] + 4 * v19);
      v4 = v52;
      mlx::core::array::shape(v52, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) += *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FCDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#3}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned int *)(v18[19] + 4 * v19);
      v4 = v52;
      mlx::core::array::shape(v52, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) *= *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FD0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned int *)(v18[19] + 4 * v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2423FD38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned int *)(v18[19] + 4 * v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2423FD660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#1}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  ldiv_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ldiv_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v51;
  uint64_t v52;
  mlx::core::array *v53;
  void *__p;
  int *v55;
  uint64_t v56;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v45 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v46 = v10;
  __p = 0;
  v55 = 0;
  v56 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v55)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v55);
  }
  if (v46)
  {
    v52 = 0;
    v53 = v4;
    v47 = (v6 >> 4);
    while ((int)v45 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_21;
LABEL_32:
      if (++v52 == v46)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v52;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v52;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(char *)(v18[19] + v19);
      v4 = v53;
      v27 = (int)mlx::core::array::shape(v53, v17);
      if ((int)v26 >= 0)
        v27 = 0;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 24) + 8 * v17) * (v27 + v26);
      ++v15;
    }
    while (v15 != v47);
    if (!v12)
      goto LABEL_32;
LABEL_21:
    v28 = 0;
    v51 = v52 * v12;
    do
    {
      v29 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v32 = v51 + (int)v28;
      }
      else
      {
        v30 = *v29;
        v31 = (unint64_t)(v29[1] - *v29) >> 2;
        v32 = 0;
        v33 = (v31 - 1);
        if ((int)v31 - 1 >= 0)
        {
          v34 = v29[3];
          v35 = v51 + v28;
          do
          {
            v36 = ldiv(v35, *(int *)(v30 + 4 * v33));
            v35 = v36.quot;
            v32 += *(_QWORD *)(v34 + 8 * v33--) * v36.rem;
          }
          while (v33 != -1);
        }
      }
      v37 = *(_QWORD *)v4;
      v38 = (int *)__p;
      v39 = (unint64_t)((char *)v55 - (_BYTE *)__p) >> 2;
      v40 = 0;
      v41 = (v39 - 1);
      if ((int)v39 - 1 >= 0)
      {
        v42 = *(_QWORD *)(v37 + 24);
        v43 = v28;
        do
        {
          v44 = ldiv(v43, v38[v41]);
          v43 = v44.quot;
          v40 += *(_QWORD *)(v42 + 8 * v41--) * v44.rem;
        }
        while (v41 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v37 + 152) + v16 + v40) = *(_BYTE *)(v29[19] + v32);
      ++v28;
      v4 = v53;
    }
    while (v28 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v55 = v11;
    operator delete(v11);
  }
}

void sub_2423FD938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#2}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  ldiv_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ldiv_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v51;
  uint64_t v52;
  mlx::core::array *v53;
  void *__p;
  int *v55;
  uint64_t v56;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v45 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v46 = v10;
  __p = 0;
  v55 = 0;
  v56 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v55)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v55);
  }
  if (v46)
  {
    v52 = 0;
    v53 = v4;
    v47 = (v6 >> 4);
    while ((int)v45 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_21;
LABEL_32:
      if (++v52 == v46)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v52;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v52;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(char *)(v18[19] + v19);
      v4 = v53;
      v27 = (int)mlx::core::array::shape(v53, v17);
      if ((int)v26 >= 0)
        v27 = 0;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 24) + 8 * v17) * (v27 + v26);
      ++v15;
    }
    while (v15 != v47);
    if (!v12)
      goto LABEL_32;
LABEL_21:
    v28 = 0;
    v51 = v52 * v12;
    do
    {
      v29 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v32 = v51 + (int)v28;
      }
      else
      {
        v30 = *v29;
        v31 = (unint64_t)(v29[1] - *v29) >> 2;
        v32 = 0;
        v33 = (v31 - 1);
        if ((int)v31 - 1 >= 0)
        {
          v34 = v29[3];
          v35 = v51 + v28;
          do
          {
            v36 = ldiv(v35, *(int *)(v30 + 4 * v33));
            v35 = v36.quot;
            v32 += *(_QWORD *)(v34 + 8 * v33--) * v36.rem;
          }
          while (v33 != -1);
        }
      }
      v37 = *(_QWORD *)v4;
      v38 = (int *)__p;
      v39 = (unint64_t)((char *)v55 - (_BYTE *)__p) >> 2;
      v40 = 0;
      v41 = (v39 - 1);
      if ((int)v39 - 1 >= 0)
      {
        v42 = *(_QWORD *)(v37 + 24);
        v43 = v28;
        do
        {
          v44 = ldiv(v43, v38[v41]);
          v43 = v44.quot;
          v40 += *(_QWORD *)(v42 + 8 * v41--) * v44.rem;
        }
        while (v41 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v37 + 152) + v16 + v40) += *(_BYTE *)(v29[19] + v32);
      ++v28;
      v4 = v53;
    }
    while (v28 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v55 = v11;
    operator delete(v11);
  }
}

void sub_2423FDC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#3}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  ldiv_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ldiv_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v51;
  uint64_t v52;
  mlx::core::array *v53;
  void *__p;
  int *v55;
  uint64_t v56;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v45 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v46 = v10;
  __p = 0;
  v55 = 0;
  v56 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v55)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v55);
  }
  if (v46)
  {
    v52 = 0;
    v53 = v4;
    v47 = (v6 >> 4);
    while ((int)v45 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_21;
LABEL_32:
      if (++v52 == v46)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v52;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v52;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(char *)(v18[19] + v19);
      v4 = v53;
      v27 = (int)mlx::core::array::shape(v53, v17);
      if ((int)v26 >= 0)
        v27 = 0;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 24) + 8 * v17) * (v27 + v26);
      ++v15;
    }
    while (v15 != v47);
    if (!v12)
      goto LABEL_32;
LABEL_21:
    v28 = 0;
    v51 = v52 * v12;
    do
    {
      v29 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v32 = v51 + (int)v28;
      }
      else
      {
        v30 = *v29;
        v31 = (unint64_t)(v29[1] - *v29) >> 2;
        v32 = 0;
        v33 = (v31 - 1);
        if ((int)v31 - 1 >= 0)
        {
          v34 = v29[3];
          v35 = v51 + v28;
          do
          {
            v36 = ldiv(v35, *(int *)(v30 + 4 * v33));
            v35 = v36.quot;
            v32 += *(_QWORD *)(v34 + 8 * v33--) * v36.rem;
          }
          while (v33 != -1);
        }
      }
      v37 = *(_QWORD *)v4;
      v38 = (int *)__p;
      v39 = (unint64_t)((char *)v55 - (_BYTE *)__p) >> 2;
      v40 = 0;
      v41 = (v39 - 1);
      if ((int)v39 - 1 >= 0)
      {
        v42 = *(_QWORD *)(v37 + 24);
        v43 = v28;
        do
        {
          v44 = ldiv(v43, v38[v41]);
          v43 = v44.quot;
          v40 += *(_QWORD *)(v42 + 8 * v41--) * v44.rem;
        }
        while (v41 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v37 + 152) + v16 + v40) *= *(_BYTE *)(v29[19] + v32);
      ++v28;
      v4 = v53;
    }
    while (v28 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v55 = v11;
    operator delete(v11);
  }
}

void sub_2423FDEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  ldiv_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ldiv_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v53;
  uint64_t v54;
  mlx::core::array *v55;
  void *__p;
  int *v57;
  uint64_t v58;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v47 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v48 = v10;
  __p = 0;
  v57 = 0;
  v58 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v57)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v57);
  }
  if (v48)
  {
    v54 = 0;
    v55 = v4;
    v49 = (v6 >> 4);
    while ((int)v47 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_21;
LABEL_34:
      if (++v54 == v48)
      {
        v11 = (int *)__p;
        goto LABEL_36;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v54;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v54;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(char *)(v18[19] + v19);
      v4 = v55;
      v27 = (int)mlx::core::array::shape(v55, v17);
      if ((int)v26 >= 0)
        v27 = 0;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v17) * (v27 + v26);
      ++v15;
    }
    while (v15 != v49);
    if (!v12)
      goto LABEL_34;
LABEL_21:
    v28 = 0;
    v53 = v54 * v12;
    do
    {
      v29 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v32 = v53 + (int)v28;
      }
      else
      {
        v30 = *v29;
        v31 = (unint64_t)(v29[1] - *v29) >> 2;
        v32 = 0;
        v33 = (v31 - 1);
        if ((int)v31 - 1 >= 0)
        {
          v34 = v29[3];
          v35 = v53 + v28;
          do
          {
            v36 = ldiv(v35, *(int *)(v30 + 4 * v33));
            v35 = v36.quot;
            v32 += *(_QWORD *)(v34 + 8 * v33--) * v36.rem;
          }
          while (v33 != -1);
        }
      }
      v37 = *(_QWORD *)v4;
      v38 = (int *)__p;
      v39 = (unint64_t)((char *)v57 - (_BYTE *)__p) >> 2;
      v40 = 0;
      v41 = (v39 - 1);
      if ((int)v39 - 1 >= 0)
      {
        v42 = *(_QWORD *)(v37 + 24);
        v43 = v28;
        do
        {
          v44 = ldiv(v43, v38[v41]);
          v43 = v44.quot;
          v40 += *(_QWORD *)(v42 + 8 * v41--) * v44.rem;
        }
        while (v41 != -1);
      }
      v45 = *(unsigned __int8 *)(v29[19] + v32);
      v46 = *(_QWORD *)(v37 + 152) + v16;
      if (*(unsigned __int8 *)(v46 + v40) > v45)
        LOBYTE(v45) = *(_BYTE *)(v46 + v40);
      *(_BYTE *)(v46 + v40) = v45;
      ++v28;
      v4 = v55;
    }
    while (v28 != v12);
    goto LABEL_34;
  }
LABEL_36:
  if (v11)
  {
    v57 = v11;
    operator delete(v11);
  }
}

void sub_2423FE1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  ldiv_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ldiv_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v53;
  uint64_t v54;
  mlx::core::array *v55;
  void *__p;
  int *v57;
  uint64_t v58;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v47 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v48 = v10;
  __p = 0;
  v57 = 0;
  v58 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v57)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v57);
  }
  if (v48)
  {
    v54 = 0;
    v55 = v4;
    v49 = (v6 >> 4);
    while ((int)v47 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_21;
LABEL_34:
      if (++v54 == v48)
      {
        v11 = (int *)__p;
        goto LABEL_36;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v54;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v54;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(char *)(v18[19] + v19);
      v4 = v55;
      v27 = (int)mlx::core::array::shape(v55, v17);
      if ((int)v26 >= 0)
        v27 = 0;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v17) * (v27 + v26);
      ++v15;
    }
    while (v15 != v49);
    if (!v12)
      goto LABEL_34;
LABEL_21:
    v28 = 0;
    v53 = v54 * v12;
    do
    {
      v29 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v32 = v53 + (int)v28;
      }
      else
      {
        v30 = *v29;
        v31 = (unint64_t)(v29[1] - *v29) >> 2;
        v32 = 0;
        v33 = (v31 - 1);
        if ((int)v31 - 1 >= 0)
        {
          v34 = v29[3];
          v35 = v53 + v28;
          do
          {
            v36 = ldiv(v35, *(int *)(v30 + 4 * v33));
            v35 = v36.quot;
            v32 += *(_QWORD *)(v34 + 8 * v33--) * v36.rem;
          }
          while (v33 != -1);
        }
      }
      v37 = *(_QWORD *)v4;
      v38 = (int *)__p;
      v39 = (unint64_t)((char *)v57 - (_BYTE *)__p) >> 2;
      v40 = 0;
      v41 = (v39 - 1);
      if ((int)v39 - 1 >= 0)
      {
        v42 = *(_QWORD *)(v37 + 24);
        v43 = v28;
        do
        {
          v44 = ldiv(v43, v38[v41]);
          v43 = v44.quot;
          v40 += *(_QWORD *)(v42 + 8 * v41--) * v44.rem;
        }
        while (v41 != -1);
      }
      v45 = *(unsigned __int8 *)(v29[19] + v32);
      v46 = *(_QWORD *)(v37 + 152) + v16;
      if (*(unsigned __int8 *)(v46 + v40) < v45)
        LOBYTE(v45) = *(_BYTE *)(v46 + v40);
      *(_BYTE *)(v46 + v40) = v45;
      ++v28;
      v4 = v55;
    }
    while (v28 != v12);
    goto LABEL_34;
  }
LABEL_36:
  if (v11)
  {
    v57 = v11;
    operator delete(v11);
  }
}

void sub_2423FE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#1}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(int *)(v18[19] + 4 * v19);
      v4 = v52;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17)
           * (v26 + (int)(mlx::core::array::shape(v52, v17) & ((int)v26 >> 31)));
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) = *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FE790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#2}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(int *)(v18[19] + 4 * v19);
      v4 = v52;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17)
           * (v26 + (int)(mlx::core::array::shape(v52, v17) & ((int)v26 >> 31)));
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) += *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FEA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#3}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(int *)(v18[19] + 4 * v19);
      v4 = v52;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17)
           * (v26 + (int)(mlx::core::array::shape(v52, v17) & ((int)v26 >> 31)));
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) *= *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FED40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(int *)(v18[19] + 4 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (v26 + (int)(mlx::core::array::shape(v54, v17) & ((int)v26 >> 31)));
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2423FF01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(int *)(v18[19] + 4 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (v26 + (int)(mlx::core::array::shape(v54, v17) & ((int)v26 >> 31)));
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2423FF2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#1}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(_QWORD *)(v18[19] + 8 * v19);
      v4 = v52;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17)
           * (((int)mlx::core::array::shape(v52, v17) & (unint64_t)(v26 >> 63)) + v26);
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) = *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FF5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#2}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(_QWORD *)(v18[19] + 8 * v19);
      v4 = v52;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17)
           * (((int)mlx::core::array::shape(v52, v17) & (unint64_t)(v26 >> 63)) + v26);
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) += *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FF8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#3}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v50;
  uint64_t v51;
  mlx::core::array *v52;
  void *__p;
  int *v54;
  uint64_t v55;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v44 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v45 = v10;
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v54)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v54);
  }
  if (v45)
  {
    v51 = 0;
    v52 = v4;
    v46 = (v6 >> 4);
    while ((int)v44 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_30:
      if (++v51 == v45)
      {
        v11 = (int *)__p;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v51;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v51;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(_QWORD *)(v18[19] + 8 * v19);
      v4 = v52;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 24) + 8 * v17)
           * (((int)mlx::core::array::shape(v52, v17) & (unint64_t)(v26 >> 63)) + v26);
      ++v15;
    }
    while (v15 != v46);
    if (!v12)
      goto LABEL_30;
LABEL_19:
    v27 = 0;
    v50 = v51 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v50 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v50 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v54 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      *(_BYTE *)(*(_QWORD *)(v36 + 152) + v16 + v39) *= *(_BYTE *)(v28[19] + v31);
      ++v27;
      v4 = v52;
    }
    while (v27 != v12);
    goto LABEL_30;
  }
LABEL_32:
  if (v11)
  {
    v54 = v11;
    operator delete(v11);
  }
}

void sub_2423FFB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(_QWORD *)(v18[19] + 8 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (((int)mlx::core::array::shape(v54, v17) & (unint64_t)(v26 >> 63)) + v26);
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2423FFE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(_QWORD *)(v18[19] + 8 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (((int)mlx::core::array::shape(v54, v17) & (unint64_t)(v26 >> 63)) + v26);
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(unsigned __int8 *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(unsigned __int8 *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242400144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned int,unsigned char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424007FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) += *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242400AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) *= *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242400DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2424010B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2424013A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242401684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) += *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240196C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) *= *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242401C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242401F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240222C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_DWORD *)(v35 + 4 * v43) = *(_DWORD *)(v34 + 4 * v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240251C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_DWORD *)(v35 + 4 * v43) += *(_DWORD *)(v34 + 4 * v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242402814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_DWORD *)(v35 + 4 * v43) *= *(_DWORD *)(v34 + 4 * v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242402B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  unsigned int v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(_DWORD *)(v34 + 4 * v38);
          if (*(_DWORD *)(v35 + 4 * v43) > v48)
            v48 = *(_DWORD *)(v35 + 4 * v43);
          *(_DWORD *)(v35 + 4 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_242402E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  unsigned int v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(_DWORD *)(v34 + 4 * v38);
          if (*(_DWORD *)(v35 + 4 * v43) < v48)
            v48 = *(_DWORD *)(v35 + 4 * v43);
          *(_DWORD *)(v35 + 4 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_242403104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424033EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) += *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424036DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) *= *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424039CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242403CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242403FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424042A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) += *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242404594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) *= *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242404888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242404B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  unsigned int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242404E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::dispatch_scatter_inds<signed char,BOOL>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<signed char,BOOL,void mlx::core::dispatch_scatter_inds<signed char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<signed char,BOOL,void mlx::core::dispatch_scatter_inds<signed char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<signed char,unsigned char>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<signed char,BOOL,void mlx::core::dispatch_scatter_inds<signed char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<signed char,BOOL,void mlx::core::dispatch_scatter_inds<signed char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,BOOL,void mlx::core::dispatch_scatter_inds<unsigned char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<signed char,unsigned int>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<signed char,unsigned int,void mlx::core::dispatch_scatter_inds<signed char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,unsigned int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<signed char,unsigned int,void mlx::core::dispatch_scatter_inds<signed char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,unsigned int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,unsigned int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<signed char,signed char>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<signed char,signed char,void mlx::core::dispatch_scatter_inds<signed char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,signed char *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<signed char,signed char,void mlx::core::dispatch_scatter_inds<signed char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,signed char *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,signed char,void mlx::core::dispatch_scatter_inds<unsigned char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,signed char *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<signed char,int>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<signed char,int,void mlx::core::dispatch_scatter_inds<signed char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<signed char,int,void mlx::core::dispatch_scatter_inds<signed char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,int,void mlx::core::dispatch_scatter_inds<unsigned char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<signed char,long long>(mlx::core::array *a1, uint64_t *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<signed char,long long,void mlx::core::dispatch_scatter_inds<signed char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,long long *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<signed char,long long,void mlx::core::dispatch_scatter_inds<signed char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,long long *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned char,long long,void mlx::core::dispatch_scatter_inds<unsigned char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned char,long long *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::scatter<signed char,BOOL,void mlx::core::dispatch_scatter_inds<signed char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,BOOL *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned __int8 *)(v18[19] + v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242405524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,BOOL,void mlx::core::dispatch_scatter_inds<signed char,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,BOOL *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned __int8 *)(v18[19] + v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_2424057F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,unsigned int,void mlx::core::dispatch_scatter_inds<signed char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,unsigned int *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned int *)(v18[19] + 4 * v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242405ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,unsigned int,void mlx::core::dispatch_scatter_inds<signed char,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,unsigned int *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(unsigned int *)(v18[19] + 4 * v19);
      v4 = v54;
      mlx::core::array::shape(v54, v17);
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17) * v26;
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242405DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,signed char,void mlx::core::dispatch_scatter_inds<signed char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,signed char *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  ldiv_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ldiv_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v53;
  uint64_t v54;
  mlx::core::array *v55;
  void *__p;
  int *v57;
  uint64_t v58;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v47 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v48 = v10;
  __p = 0;
  v57 = 0;
  v58 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v57)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v57);
  }
  if (v48)
  {
    v54 = 0;
    v55 = v4;
    v49 = (v6 >> 4);
    while ((int)v47 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_21;
LABEL_34:
      if (++v54 == v48)
      {
        v11 = (int *)__p;
        goto LABEL_36;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v54;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v54;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(char *)(v18[19] + v19);
      v4 = v55;
      v27 = (int)mlx::core::array::shape(v55, v17);
      if ((int)v26 >= 0)
        v27 = 0;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v17) * (v27 + v26);
      ++v15;
    }
    while (v15 != v49);
    if (!v12)
      goto LABEL_34;
LABEL_21:
    v28 = 0;
    v53 = v54 * v12;
    do
    {
      v29 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v32 = v53 + (int)v28;
      }
      else
      {
        v30 = *v29;
        v31 = (unint64_t)(v29[1] - *v29) >> 2;
        v32 = 0;
        v33 = (v31 - 1);
        if ((int)v31 - 1 >= 0)
        {
          v34 = v29[3];
          v35 = v53 + v28;
          do
          {
            v36 = ldiv(v35, *(int *)(v30 + 4 * v33));
            v35 = v36.quot;
            v32 += *(_QWORD *)(v34 + 8 * v33--) * v36.rem;
          }
          while (v33 != -1);
        }
      }
      v37 = *(_QWORD *)v4;
      v38 = (int *)__p;
      v39 = (unint64_t)((char *)v57 - (_BYTE *)__p) >> 2;
      v40 = 0;
      v41 = (v39 - 1);
      if ((int)v39 - 1 >= 0)
      {
        v42 = *(_QWORD *)(v37 + 24);
        v43 = v28;
        do
        {
          v44 = ldiv(v43, v38[v41]);
          v43 = v44.quot;
          v40 += *(_QWORD *)(v42 + 8 * v41--) * v44.rem;
        }
        while (v41 != -1);
      }
      v45 = *(char *)(v29[19] + v32);
      v46 = *(_QWORD *)(v37 + 152) + v16;
      if (*(char *)(v46 + v40) > v45)
        LOBYTE(v45) = *(_BYTE *)(v46 + v40);
      *(_BYTE *)(v46 + v40) = v45;
      ++v28;
      v4 = v55;
    }
    while (v28 != v12);
    goto LABEL_34;
  }
LABEL_36:
  if (v11)
  {
    v57 = v11;
    operator delete(v11);
  }
}

void sub_242406084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,signed char,void mlx::core::dispatch_scatter_inds<signed char,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,signed char *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  ldiv_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ldiv_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v53;
  uint64_t v54;
  mlx::core::array *v55;
  void *__p;
  int *v57;
  uint64_t v58;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v47 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v48 = v10;
  __p = 0;
  v57 = 0;
  v58 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v57)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v57);
  }
  if (v48)
  {
    v54 = 0;
    v55 = v4;
    v49 = (v6 >> 4);
    while ((int)v47 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_21;
LABEL_34:
      if (++v54 == v48)
      {
        v11 = (int *)__p;
        goto LABEL_36;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v54;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v54;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(char *)(v18[19] + v19);
      v4 = v55;
      v27 = (int)mlx::core::array::shape(v55, v17);
      if ((int)v26 >= 0)
        v27 = 0;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v17) * (v27 + v26);
      ++v15;
    }
    while (v15 != v49);
    if (!v12)
      goto LABEL_34;
LABEL_21:
    v28 = 0;
    v53 = v54 * v12;
    do
    {
      v29 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v32 = v53 + (int)v28;
      }
      else
      {
        v30 = *v29;
        v31 = (unint64_t)(v29[1] - *v29) >> 2;
        v32 = 0;
        v33 = (v31 - 1);
        if ((int)v31 - 1 >= 0)
        {
          v34 = v29[3];
          v35 = v53 + v28;
          do
          {
            v36 = ldiv(v35, *(int *)(v30 + 4 * v33));
            v35 = v36.quot;
            v32 += *(_QWORD *)(v34 + 8 * v33--) * v36.rem;
          }
          while (v33 != -1);
        }
      }
      v37 = *(_QWORD *)v4;
      v38 = (int *)__p;
      v39 = (unint64_t)((char *)v57 - (_BYTE *)__p) >> 2;
      v40 = 0;
      v41 = (v39 - 1);
      if ((int)v39 - 1 >= 0)
      {
        v42 = *(_QWORD *)(v37 + 24);
        v43 = v28;
        do
        {
          v44 = ldiv(v43, v38[v41]);
          v43 = v44.quot;
          v40 += *(_QWORD *)(v42 + 8 * v41--) * v44.rem;
        }
        while (v41 != -1);
      }
      v45 = *(char *)(v29[19] + v32);
      v46 = *(_QWORD *)(v37 + 152) + v16;
      if (*(char *)(v46 + v40) < v45)
        LOBYTE(v45) = *(_BYTE *)(v46 + v40);
      *(_BYTE *)(v46 + v40) = v45;
      ++v28;
      v4 = v55;
    }
    while (v28 != v12);
    goto LABEL_34;
  }
LABEL_36:
  if (v11)
  {
    v57 = v11;
    operator delete(v11);
  }
}

void sub_242406368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,int,void mlx::core::dispatch_scatter_inds<signed char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,int *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(int *)(v18[19] + 4 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (v26 + (int)(mlx::core::array::shape(v54, v17) & ((int)v26 >> 31)));
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242406644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,int,void mlx::core::dispatch_scatter_inds<signed char,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,int *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(int *)(v18[19] + 4 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (v26 + (int)(mlx::core::array::shape(v54, v17) & ((int)v26 >> 31)));
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242406920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,long long,void mlx::core::dispatch_scatter_inds<signed char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,long long *)#4}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(_QWORD *)(v18[19] + 8 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (((int)mlx::core::array::shape(v54, v17) & (unint64_t)(v26 >> 63)) + v26);
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) > v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242406C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<signed char,long long,void mlx::core::dispatch_scatter_inds<signed char,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(signed char,long long *)#5}>(uint64_t **a1, mlx::core::array *a2, uint64_t *a3, _QWORD *a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  ldiv_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  uint64_t v53;
  mlx::core::array *v54;
  void *__p;
  int *v56;
  uint64_t v57;

  v4 = a2;
  v5 = *a3;
  v6 = a3[1] - *a3;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = ((v7 - v8) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v46 = v6 >> 4;
  if ((v6 >> 4))
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  else
    v10 = 1;
  v47 = v10;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v8 + 4 * v9), v7, (v7 - (v8 + 4 * v9)) >> 2);
  v11 = (int *)__p;
  v12 = 1;
  if (__p != v56)
  {
    v13 = (int *)__p;
    do
    {
      v14 = *v13++;
      v12 *= v14;
    }
    while (v13 != v56);
  }
  if (v47)
  {
    v53 = 0;
    v54 = v4;
    v48 = (v6 >> 4);
    while ((int)v46 < 1)
    {
      v16 = 0;
      if (v12)
        goto LABEL_19;
LABEL_32:
      if (++v53 == v47)
      {
        v11 = (int *)__p;
        goto LABEL_34;
      }
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(*a4 + 4 * v15);
      v18 = *(uint64_t **)(*a3 + 16 * v15);
      v19 = v53;
      if ((v18[21] & 2) == 0)
      {
        v20 = *v18;
        v21 = (unint64_t)(v18[1] - *v18) >> 2;
        v19 = 0;
        v22 = (v21 - 1);
        if ((int)v21 - 1 >= 0)
        {
          v23 = v18[3];
          quot = v53;
          do
          {
            v25 = ldiv(quot, *(int *)(v20 + 4 * v22));
            quot = v25.quot;
            v19 += *(_QWORD *)(v23 + 8 * v22--) * v25.rem;
          }
          while (v22 != -1);
        }
      }
      v26 = *(_QWORD *)(v18[19] + 8 * v19);
      v4 = v54;
      v16 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24) + 8 * v17)
           * (((int)mlx::core::array::shape(v54, v17) & (unint64_t)(v26 >> 63)) + v26);
      ++v15;
    }
    while (v15 != v48);
    if (!v12)
      goto LABEL_32;
LABEL_19:
    v27 = 0;
    v52 = v53 * v12;
    do
    {
      v28 = *a1;
      if (((*a1)[21] & 2) != 0)
      {
        v31 = v52 + (int)v27;
      }
      else
      {
        v29 = *v28;
        v30 = (unint64_t)(v28[1] - *v28) >> 2;
        v31 = 0;
        v32 = (v30 - 1);
        if ((int)v30 - 1 >= 0)
        {
          v33 = v28[3];
          v34 = v52 + v27;
          do
          {
            v35 = ldiv(v34, *(int *)(v29 + 4 * v32));
            v34 = v35.quot;
            v31 += *(_QWORD *)(v33 + 8 * v32--) * v35.rem;
          }
          while (v32 != -1);
        }
      }
      v36 = *(_QWORD *)v4;
      v37 = (int *)__p;
      v38 = (unint64_t)((char *)v56 - (_BYTE *)__p) >> 2;
      v39 = 0;
      v40 = (v38 - 1);
      if ((int)v38 - 1 >= 0)
      {
        v41 = *(_QWORD *)(v36 + 24);
        v42 = v27;
        do
        {
          v43 = ldiv(v42, v37[v40]);
          v42 = v43.quot;
          v39 += *(_QWORD *)(v41 + 8 * v40--) * v43.rem;
        }
        while (v40 != -1);
      }
      v44 = *(char *)(v28[19] + v31);
      v45 = *(_QWORD *)(v36 + 152) + v16;
      if (*(char *)(v45 + v39) < v44)
        LOBYTE(v44) = *(_BYTE *)(v45 + v39);
      *(_BYTE *)(v45 + v39) = v44;
      ++v27;
      v4 = v54;
    }
    while (v27 != v12);
    goto LABEL_32;
  }
LABEL_34:
  if (v11)
  {
    v56 = v11;
    operator delete(v11);
  }
}

void sub_242406EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::dispatch_scatter_inds<int,BOOL>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<int,BOOL,void mlx::core::dispatch_scatter_inds<int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<int,BOOL,void mlx::core::dispatch_scatter_inds<int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<int,unsigned char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<int,BOOL,void mlx::core::dispatch_scatter_inds<int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<int,BOOL,void mlx::core::dispatch_scatter_inds<int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,BOOL,void mlx::core::dispatch_scatter_inds<unsigned int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<int,unsigned int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<int,unsigned int,void mlx::core::dispatch_scatter_inds<int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,unsigned int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<int,unsigned int,void mlx::core::dispatch_scatter_inds<int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,unsigned int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,unsigned int,void mlx::core::dispatch_scatter_inds<unsigned int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,unsigned int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<int,signed char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<int,signed char,void mlx::core::dispatch_scatter_inds<int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,signed char *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<int,signed char,void mlx::core::dispatch_scatter_inds<int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,signed char *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,signed char,void mlx::core::dispatch_scatter_inds<unsigned int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,signed char *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<int,int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<int,int,void mlx::core::dispatch_scatter_inds<int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<int,int,void mlx::core::dispatch_scatter_inds<int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,int,void mlx::core::dispatch_scatter_inds<unsigned int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<int,long long>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<int,long long,void mlx::core::dispatch_scatter_inds<int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,long long *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<int,long long,void mlx::core::dispatch_scatter_inds<int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,long long *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<unsigned int,long long,void mlx::core::dispatch_scatter_inds<unsigned int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(unsigned int,long long *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::scatter<int,BOOL,void mlx::core::dispatch_scatter_inds<int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,BOOL *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2424075A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,BOOL,void mlx::core::dispatch_scatter_inds<int,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,BOOL *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242407890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,unsigned int,void mlx::core::dispatch_scatter_inds<int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,unsigned int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242407B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,unsigned int,void mlx::core::dispatch_scatter_inds<int,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,unsigned int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242407E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,signed char,void mlx::core::dispatch_scatter_inds<int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,signed char *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  int v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(_DWORD *)(v34 + 4 * v38);
          if (*(_DWORD *)(v35 + 4 * v43) > v48)
            v48 = *(_DWORD *)(v35 + 4 * v43);
          *(_DWORD *)(v35 + 4 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_242408164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,signed char,void mlx::core::dispatch_scatter_inds<int,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,signed char *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  int v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(_DWORD *)(v34 + 4 * v38);
          if (*(_DWORD *)(v35 + 4 * v43) < v48)
            v48 = *(_DWORD *)(v35 + 4 * v43);
          *(_DWORD *)(v35 + 4 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_242408460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,int,void mlx::core::dispatch_scatter_inds<int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242408754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,int,void mlx::core::dispatch_scatter_inds<int,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242408A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,long long,void mlx::core::dispatch_scatter_inds<int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,long long *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) > v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242408D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<int,long long,void mlx::core::dispatch_scatter_inds<int,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(int,long long *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  int v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_DWORD *)(v33 + 4 * v37);
          if (*(_DWORD *)(v34 + 4 * v42) < v47)
            v47 = *(_DWORD *)(v34 + 4 * v42);
          *(_DWORD *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242409038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<long long,unsigned char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) = *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424096F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) += *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424099D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) *= *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242409CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) > v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242409FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,BOOL,void mlx::core::dispatch_scatter_inds<long long,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,BOOL *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) < v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240A298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) = *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240A578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) += *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240A860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) *= *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240AB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) > v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240AE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,unsigned int,void mlx::core::dispatch_scatter_inds<long long,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,unsigned int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) < v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240B120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_QWORD *)(v35 + 8 * v43) = *(_QWORD *)(v34 + 8 * v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240B410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_QWORD *)(v35 + 8 * v43) += *(_QWORD *)(v34 + 8 * v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240B708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_QWORD *)(v35 + 8 * v43) *= *(_QWORD *)(v34 + 8 * v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240BA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  uint64_t v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 8 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(_QWORD *)(v34 + 8 * v38);
          if (*(_QWORD *)(v35 + 8 * v43) > v48)
            v48 = *(_QWORD *)(v35 + 8 * v43);
          *(_QWORD *)(v35 + 8 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_24240BCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,signed char,void mlx::core::dispatch_scatter_inds<long long,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,signed char *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  uint64_t v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 8 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(_QWORD *)(v34 + 8 * v38);
          if (*(_QWORD *)(v35 + 8 * v43) < v48)
            v48 = *(_QWORD *)(v35 + 8 * v43);
          *(_QWORD *)(v35 + 8 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_24240BFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) = *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240C2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) += *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240C5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) *= *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240C8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) > v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240CBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,int,void mlx::core::dispatch_scatter_inds<long long,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) < v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240CEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) = *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240D194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) += *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240D488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_QWORD *)(v34 + 8 * v42) *= *(_QWORD *)(v33 + 8 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240D77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) > v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240DA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<long long,long long,void mlx::core::dispatch_scatter_inds<long long,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(long long,long long *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 8 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(_QWORD *)(v33 + 8 * v37);
          if (*(_QWORD *)(v34 + 8 * v42) < v47)
            v47 = *(_QWORD *)(v34 + 8 * v42);
          *(_QWORD *)(v34 + 8 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240DD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<float,unsigned char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array *a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, int a5)
{
  switch(a5)
  {
    case 0:
      mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#4}>(a3, a1, a2, a4);
      break;
    case 1:
      mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#5}>(a3, a1, a2, a4);
      break;
    case 2:
      mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#2}>(a3, a1, a2, a4);
      break;
    case 3:
      mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#3}>(a3, a1, a2, a4);
      break;
    case 4:
      mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#1}>(a3, a1, a2, a4);
      break;
    default:
      return;
  }
}

void mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240E424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) + *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240E70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) * *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240E9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) > v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240ECE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,BOOL,void mlx::core::dispatch_scatter_inds<float,BOOL>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,BOOL *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned __int8 *)(v20[19] + v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) < v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240EFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

