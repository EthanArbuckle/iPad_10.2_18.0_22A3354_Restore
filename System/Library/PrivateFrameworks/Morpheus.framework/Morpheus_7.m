uint64_t sub_242509AC8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_242509DD0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509AE4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A660(a1, a2, a3, *v3, &qword_2571FC840);
  *v3 = (char *)result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426A87C8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_242509B48@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;

  sub_24251CB28(a1, a2);
  v4 = sub_2425A0080();
  result = swift_release();
  *a3 = v4;
  return result;
}

uint64_t type metadata accessor for MLXArray()
{
  return objc_opt_self();
}

uint64_t method lookup function for MLXArray()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_242509BCC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_242509F30(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509BE8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A09C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509C04(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A504(a1, a2, a3, *v3, &qword_2571FC820);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509C28(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A218(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509C44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24250A378(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_242509C60(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A504(a1, a2, a3, *v3, &qword_2571FC800);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509C84(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A7BC(a1, a2, a3, *v3, &qword_2571FC7F8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509CA8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A660(a1, a2, a3, *v3, &qword_2571FC7F0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509CCC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A7BC(a1, a2, a3, *v3, &qword_2571FC7E8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509CF0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250A908(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509D0C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250AA68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509D28(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24250AD60(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_242509D44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24250AED4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_242509D60(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24250B078(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_242509D7C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24250B204(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_242509D98(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24250B3AC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_242509DB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24250B550(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_242509DD0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC828);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_242509F30(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7B8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250A09C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC838);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250A218(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC830);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250A378(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7A8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7B0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250A504(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250A660(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250A7BC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250A908(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC808);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250AA68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7E0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250ABB8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC810);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC818);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250AD60(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC770);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250AED4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC798);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7A0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250B078(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC788);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250B204(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7D0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7D8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250B3AC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250B550(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC778);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC780);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24250B6DC(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_24250B79C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    sub_24259F90C();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)sub_24259F8C4();
    if (!v4)
    {
LABEL_10:
      v5 = sub_24259F8D0();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = sub_24250B6DC(v4, v8);
      swift_release();
      return v3;
    }
    result = sub_24259F8DC();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t static MLXArray.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_add(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_add(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a2 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_add(*(_QWORD *)(v8 + 16), *(_QWORD *)(a2 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.+= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24250C514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2peoiyyAC_ACtFZ_0);
}

uint64_t static MLXArray.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.- infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a2 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(v8 + 16), *(_QWORD *)(a2 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.-= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24250C514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2seoiyyAC_ACtFZ_0);
}

uint64_t static MLXArray.- prefix(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = (uint64_t)mlx_default_device();
  v3 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v4 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v3);
  result = (uint64_t)mlx_negative(*(_QWORD *)(a1 + 16), v4);
  v5 = result;
  if (result)
  {
    mlx_free(v4);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.* infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_multiply(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_multiply(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a2 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_multiply(*(_QWORD *)(v8 + 16), *(_QWORD *)(a2 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.*= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24250C514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2meoiyyAC_ACtFZ_0);
}

uint64_t static MLXArray.** infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_power(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.** infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_power(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a2 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_power(*(_QWORD *)(v8 + 16), *(_QWORD *)(a2 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray./ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_divide(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray./ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_divide(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a2 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_divide(*(_QWORD *)(v8 + 16), *(_QWORD *)(a2 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray./= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24250C514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2deoiyyAC_ACtFZ_0);
}

uint64_t sub_24250C514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t dtype;
  uint64_t v10;
  char v12;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v12);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v12, a3, a4);
  a5(a1, v10);
  return swift_release();
}

uint64_t static MLXArray.% infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_remainder(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.% infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a2 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_remainder(*(_QWORD *)(v8 + 16), *(_QWORD *)(a2 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_remainder(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..! prefix(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = (uint64_t)mlx_default_device();
  v3 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v4 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v3);
  result = (uint64_t)mlx_logical_not(*(_QWORD *)(a1 + 16), v4);
  v5 = result;
  if (result)
  {
    mlx_free(v4);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_less_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_less_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_greater_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_greater_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_not_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..!= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_not_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_less(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..< infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_less(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_greater(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v13, a3, a4);
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v11 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v10);
  result = (uint64_t)mlx_greater(*(_QWORD *)(a1 + 16), *(_QWORD *)(v8 + 16), v11);
  v12 = result;
  if (result)
  {
    mlx_free(v11);
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..&& infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_logical_and(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray..|| infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_logical_or(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (result)
  {
    mlx_free(v6);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void static MLXArray.! prefix(_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.== infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.== infix<A>(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.<= infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.<= infix<A>(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.>= infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.>= infix<A>(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.!= infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.!= infix<A>(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.< infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.< infix<A>(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.> infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.> infix<A>(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.&& infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

void static MLXArray.|| infix(_:_:)()
{
  sub_2425A00E0();
  __break(1u);
}

{
  sub_2425A00E0();
  __break(1u);
}

uint64_t sub_24250DF4C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  v9 = *a4;
  result = (uint64_t)mlx_vector_array_new();
  v11 = result;
  if (!result)
    goto LABEL_21;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
    goto LABEL_17;
  v27 = MEMORY[0x24BEE4AF8];
  result = sub_242509AC8(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v25 = a2;
  v26 = v9;
  v13 = v27;
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v12; ++i)
    {
      v15 = *(_QWORD *)(MEMORY[0x2426A7C70](i, a1) + 16);
      swift_unknownObjectRelease();
      v17 = *(_QWORD *)(v27 + 16);
      v16 = *(_QWORD *)(v27 + 24);
      if (v17 >= v16 >> 1)
        sub_242509AC8(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v27 + 16) = v17 + 1;
      *(_QWORD *)(v27 + 8 * v17 + 32) = v15;
    }
  }
  else
  {
    v18 = a1 + 32;
    v19 = *(_QWORD *)(v27 + 16);
    v20 = v12;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)v18 + 16);
      v22 = *(_QWORD *)(v27 + 24);
      if (v19 >= v22 >> 1)
        sub_242509AC8(v22 > 1, v19 + 1, 1);
      *(_QWORD *)(v27 + 16) = v19 + 1;
      *(_QWORD *)(v27 + 8 * v19 + 32) = v21;
      v18 += 8;
      ++v19;
      --v20;
    }
    while (v20);
  }
  v9 = v26;
  a2 = v25;
LABEL_17:
  mlx_vector_array_add_arrays(v11, (uint64_t *)(v13 + 32), v12);
  swift_bridgeObjectRelease();
  result = (uint64_t)mlx_scatter(*(_QWORD *)(v5 + 16), v11, *(_QWORD *)(a2 + 16), (const void *)(a3 + 32), *(_QWORD *)(a3 + 16), *(_QWORD *)(v9 + 16));
  v23 = result;
  if (result)
  {
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v23;
    mlx_free(v11);
    return v24;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t MLXArray.abs(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_abs(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.all(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_all_axes(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.all(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_all_axis(*(_QWORD *)(v3 + 16), result, a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.all(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_all_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.allClose<A>(_:rtol:atol:equalNaN:stream:)(double a1, double a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t dtype;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;

  v13 = *a5;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v7 + 16));
  sub_242553C80(dtype, &v18);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a7 + 8))(&v18, a6, a7);
  result = (uint64_t)mlx_allclose(*(_QWORD *)(v7 + 16), *(_QWORD *)(v15 + 16), a4 & 1, *(_QWORD *)(v13 + 16), a1, a2);
  v17 = result;
  if (result)
  {
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.any(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_any(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.any(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 16);
  v7 = result;
  result = (uint64_t)mlx_any(v5, &v7, 1uLL, a2 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.any(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_any_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.argMax(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_argmax(*(_QWORD *)(v3 + 16), result, a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.argMax(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_argmax_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.argMin(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_argmin(*(_QWORD *)(v3 + 16), result, a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.argMin(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_argmin_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.arrayEqual<A>(_:equalNAN:stream:)(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t dtype;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;

  v9 = *a3;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v5 + 16));
  sub_242553C80(dtype, &v14);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 8))(&v14, a4, a5);
  result = (uint64_t)mlx_array_equal(*(_QWORD *)(v5 + 16), *(_QWORD *)(v11 + 16), a2 & 1, *(_QWORD *)(v9 + 16));
  v13 = result;
  if (result)
  {
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.cos(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_cos(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.cummax(axis:reverse:inclusive:stream:)(uint64_t result, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cummax(*(_QWORD *)(v4 + 16), result, a2 & 1, a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.cummax(reverse:inclusive:stream:)(char a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a3;
  result = mlx_reshape(*(_QWORD *)(v3 + 16), &unk_251353660, 1uLL, *(_QWORD *)(*a3 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cummax(result, 0, a1 & 1, a2 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.cummin(axis:reverse:inclusive:stream:)(uint64_t result, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cummin(*(_QWORD *)(v4 + 16), result, a2 & 1, a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.cummin(reverse:inclusive:stream:)(char a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a3;
  result = mlx_reshape(*(_QWORD *)(v3 + 16), &unk_251353688, 1uLL, *(_QWORD *)(*a3 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cummin(result, 0, a1 & 1, a2 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.cumprod(axis:reverse:inclusive:stream:)(uint64_t result, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cumprod(*(_QWORD *)(v4 + 16), result, a2 & 1, a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.cumprod(reverse:inclusive:stream:)(char a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a3;
  result = mlx_reshape(*(_QWORD *)(v3 + 16), &unk_2513536B0, 1uLL, *(_QWORD *)(*a3 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cumprod(result, 0, a1 & 1, a2 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.cumsum(axis:reverse:inclusive:stream:)(uint64_t result, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cumsum(*(_QWORD *)(v4 + 16), result, a2 & 1, a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.cumsum(reverse:inclusive:stream:)(char a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a3;
  result = mlx_reshape(*(_QWORD *)(v3 + 16), &unk_2513536D8, 1uLL, *(_QWORD *)(*a3 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cumsum(result, 0, a1 & 1, a2 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.diag(k:stream:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_diag(*(_QWORD *)(v2 + 16), result, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.diagonal(offset:axis1:axis2:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (result > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000
    || a2 < (uint64_t)0xFFFFFFFF80000000
    || a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    goto LABEL_11;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = (uint64_t)mlx_diagonal(*(_QWORD *)(v4 + 16), result, a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t MLXArray.exp(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_exp(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.expandedDimensions(axes:stream:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = Array<A>.asInt32.getter(a1);
  v7 = mlx_expand_dims(v5, (const void *)(v6 + 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.expandedDimensions(axis:stream:)(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = *a2;
  v4 = *(_QWORD *)(v2 + 16);
  v6 = result;
  result = mlx_expand_dims(v4, &v6, 1uLL, *(_QWORD *)(v3 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.flattened(start:end:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_flatten(*(_QWORD *)(v3 + 16), result, a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.floor(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_floor(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.floorDivide<A>(_:stream:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t dtype;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;

  v7 = *a2;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v4 + 16));
  sub_242553C80(dtype, &v12);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v12, a3, a4);
  result = (uint64_t)mlx_floor_divide(*(_QWORD *)(v4 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.log(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.log2(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log2(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.log10(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log10(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.log1p(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log1p(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.logSumExp(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_logsumexp(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.logSumExp(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 16);
  v7 = result;
  result = (uint64_t)mlx_logsumexp(v5, &v7, 1uLL, a2 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.logSumExp(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_logsumexp_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.matmul(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = mlx_matmul(*(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.max(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_max(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.max(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 16);
  v7 = result;
  result = mlx_max(v5, &v7, 1uLL, a2 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.max(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = mlx_max_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.mean(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_mean(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.mean(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 16);
  v7 = result;
  result = (uint64_t)mlx_mean(v5, &v7, 1uLL, a2 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.mean(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_mean_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.min(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_min(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.min(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 16);
  v7 = result;
  result = mlx_min(v5, &v7, 1uLL, a2 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.min(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = mlx_min_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.movedAxis(source:destination:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_moveaxis(*(_QWORD *)(v3 + 16), result, a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.pow<A>(_:stream:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t dtype;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;

  v7 = *a2;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v4 + 16));
  sub_242553C80(dtype, &v12);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v12, a3, a4);
  result = (uint64_t)mlx_power(*(_QWORD *)(v4 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.product(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_prod(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.product(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 16);
  v7 = result;
  result = (uint64_t)mlx_prod(v5, &v7, 1uLL, a2 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.product(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_prod_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.reciprocal(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_reciprocal(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s8Morpheus8MLXArrayC8reshaped_6streamACSaySiG_AA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = Array<A>.asInt32.getter(a1);
  v7 = mlx_reshape(v5, (const void *)(v6 + 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.round(decimals:stream:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_round(*(_QWORD *)(v2 + 16), result, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.rsqrt(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_rsqrt(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.sin(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sin(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.split(parts:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = mlx_split_equal_parts(*(_QWORD *)(v3 + 16), result, a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    v5 = sub_242507E64(result);
    mlx_free(v4);
    return v5;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.split(axis:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = mlx_split_equal_parts(*(_QWORD *)(v3 + 16), 2, a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v2 = result;
  if (!result)
    goto LABEL_14;
  result = sub_242507E64(result);
  v3 = result;
  if ((result & 0xC000000000000001) != 0)
  {
LABEL_11:
    v6 = MEMORY[0x2426A7C70](0, v3);
    MEMORY[0x2426A7C70](1, v3);
    goto LABEL_8;
  }
  v5 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    if (v5 != 1)
    {
      v6 = *(_QWORD *)(result + 32);
      swift_retain();
      swift_retain();
LABEL_8:
      swift_bridgeObjectRelease();
      mlx_free(v2);
      return v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t MLXArray.split(indices:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  result = Array<A>.asInt32.getter(a1);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = mlx_split(v7, (const void *)(result + 32), *(_QWORD *)(a1 + 16), a2, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    v10 = sub_242507E64(v9);
    mlx_free(v9);
    return v10;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.sqrt(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sqrt(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.square(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_square(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.squeezed(axes:stream:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = Array<A>.asInt32.getter(a1);
  v7 = mlx_squeeze(v5, (const void *)(v6 + 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.squeezed(axis:stream:)(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = *a2;
  v4 = *(_QWORD *)(v2 + 16);
  v6 = result;
  result = mlx_squeeze(v4, &v6, 1uLL, *(_QWORD *)(v3 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.squeezed(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = mlx_squeeze_all(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.sum(axes:keepDims:stream:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = Array<A>.asInt32.getter(a1);
  v9 = mlx_sum(v7, (const void *)(v8 + 32), *(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.sum(axis:keepDims:stream:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 16);
  v7 = result;
  result = (uint64_t)mlx_sum(v5, &v7, 1uLL, a2 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.sum(keepDims:stream:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_sum_all(*(_QWORD *)(v2 + 16), a1 & 1, *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.swappedAxes(_:_:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_swapaxes(*(_QWORD *)(v3 + 16), result, a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.take(_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = mlx_take(*(_QWORD *)(v3 + 16), *(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.take(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = mlx_take_all(*(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s8Morpheus8MLXArrayC10transposed4axes6streamACSaySiG_AA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = Array<A>.asInt32.getter(a1);
  v7 = mlx_transpose(v5, (const void *)(v6 + 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.transposed(axis:stream:)(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = *a2;
  v4 = *(_QWORD *)(v2 + 16);
  v6 = result;
  result = (uint64_t)mlx_transpose(v4, &v6, 1uLL, *(_QWORD *)(v3 + 16));
  v5 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.transposed(stream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_transpose_all(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.T.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (uint64_t)mlx_default_device();
  v2 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v3 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v2);
  result = (uint64_t)mlx_transpose_all(*(_QWORD *)(v0 + 16), v3);
  v4 = result;
  if (result)
  {
    mlx_free(v3);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.variance(axes:keepDims:ddof:stream:)(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v8 = *a4;
  v9 = *(_QWORD *)(v4 + 16);
  result = Array<A>.asInt32.getter(a1);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = mlx_var(v9, (const void *)(result + 32), *(_QWORD *)(a1 + 16), a2 & 1, a3, *(_QWORD *)(v8 + 16));
  result = swift_bridgeObjectRelease();
  if (v11)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.variance(axis:keepDims:ddof:stream:)(uint64_t result, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  v5 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = *a4;
  result = *(_QWORD *)(v4 + 16);
  v8 = v5;
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)mlx_var(result, &v8, 1uLL, a2 & 1, a3, *(_QWORD *)(v6 + 16));
  v7 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t MLXArray.variance(keepDims:ddof:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_var_all(*(_QWORD *)(v3 + 16), result & 1, a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _s8Morpheus8MLXArrayC2peoiyyAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_add(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  mlx_free(v6);
  *(_QWORD *)(swift_initStackObject() + 16) = v7;
  if (v7 != *(_QWORD *)(a1 + 16))
  {
    mlx_retain(v7);
    mlx_free(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v7;
  }
  return swift_release();
}

uint64_t _s8Morpheus8MLXArrayC2seoiyyAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  mlx_free(v6);
  *(_QWORD *)(swift_initStackObject() + 16) = v7;
  if (v7 != *(_QWORD *)(a1 + 16))
  {
    mlx_retain(v7);
    mlx_free(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v7;
  }
  return swift_release();
}

uint64_t _s8Morpheus8MLXArrayC2meoiyyAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_multiply(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  mlx_free(v6);
  *(_QWORD *)(swift_initStackObject() + 16) = v7;
  if (v7 != *(_QWORD *)(a1 + 16))
  {
    mlx_retain(v7);
    mlx_free(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v7;
  }
  return swift_release();
}

uint64_t _s8Morpheus8MLXArrayC2deoiyyAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)mlx_default_device();
  v5 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  result = mlx_default_stream(result);
  v6 = result;
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  mlx_free(v5);
  result = (uint64_t)mlx_divide(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v6);
  v7 = result;
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  mlx_free(v6);
  *(_QWORD *)(swift_initStackObject() + 16) = v7;
  if (v7 != *(_QWORD *)(a1 + 16))
  {
    mlx_retain(v7);
    mlx_free(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v7;
  }
  return swift_release();
}

uint64_t Int.int32.getter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0x7FFFFFFF)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t Array<A>.asInt32.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int64_t *v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_24250B880(0, v2, 0);
    result = v9;
    v4 = (int64_t *)(a1 + 32);
    while (1)
    {
      v6 = *v4++;
      v5 = v6;
      if (v6 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v5 > 0x7FFFFFFF)
        goto LABEL_10;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_24250B880(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v5;
      if (!--v2)
        return result;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t Sequence<>.asInt32.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_242510D2C((void (*)(char *, char *))sub_242510D00, 0, a1, MEMORY[0x24BEE3F88], MEMORY[0x24BEE4078], a2, MEMORY[0x24BEE40A8], a8);
}

uint64_t *sub_242510D00@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_242510D2C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_24259FE7C();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_24259FC18();
  v57 = sub_24259F948();
  v53 = sub_2425A0068();
  sub_2425A0020();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_24259FC0C();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_24259FE88();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_2425A0050();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_24259FE88();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_2425A0050();
      sub_24259FE88();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t sub_24251123C()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of Evaluatable.innerState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

Swift::Int __swiftcall resolve(axis:ndim:)(Swift::Int axis, Swift::Int ndim)
{
  BOOL v2;

  if (axis < 0)
  {
    v2 = __OFADD__(axis, ndim);
    axis += ndim;
    if (v2)
      __break(1u);
  }
  return axis;
}

uint64_t sub_242511268(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v25 = MEMORY[0x24BEE4AF8];
  result = sub_242509C04(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  result = swift_unknownObjectRetain();
  v23 = a2;
  if (v5)
  {
    v8 = 0;
    v9 = a3;
    v10 = a2 + 8 * a3;
    do
    {
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!(a3 - v4 + v8))
        goto LABEL_28;
      if (v9 + v8 >= v4 || v8 >= v5)
        goto LABEL_29;
      v12 = *(_QWORD *)(v10 + 8 * v8);
      if (v12 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_30;
      if (v12 > 0x7FFFFFFF)
        goto LABEL_31;
      v14 = *(_QWORD *)(v25 + 16);
      v13 = *(_QWORD *)(v25 + 24);
      if (v14 >= v13 >> 1)
      {
        result = sub_242509C04(v13 > 1, v14 + 1, 1);
        v9 = a3;
      }
      *(_QWORD *)(v25 + 16) = v14 + 1;
      *(_DWORD *)(v25 + 4 * v14 + 32) = v12;
      ++v8;
    }
    while (v11 != v5);
    v15 = v9 + v8;
    v17 = v4 - (v9 + v8);
    v16 = v4 <= v9 + v8;
    if (v4 == v9 + v8)
      goto LABEL_17;
  }
  else
  {
    v9 = a3;
    v15 = a3;
    v17 = v4 - a3;
    v16 = v4 <= a3;
    if (v4 == a3)
    {
LABEL_17:
      swift_unknownObjectRelease();
      return v25;
    }
  }
  if (v16)
    goto LABEL_36;
  if (v15 >= v9)
  {
    v18 = (int64_t *)(v23 + 8 * v15);
    while (1)
    {
      v20 = *v18++;
      v19 = v20;
      if (v20 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v19 > 0x7FFFFFFF)
        goto LABEL_33;
      v22 = *(_QWORD *)(v25 + 16);
      v21 = *(_QWORD *)(v25 + 24);
      if (v22 >= v21 >> 1)
        result = sub_242509C04(v21 > 1, v22 + 1, 1);
      *(_QWORD *)(v25 + 16) = v22 + 1;
      *(_DWORD *)(v25 + 4 * v22 + 32) = v19;
      if (!--v17)
        goto LABEL_17;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_24251147C(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_2425A00D4();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24259FD20();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_242511564(char a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_2425A00D4();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = sub_24259FD20();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1 & 1, a2);
    return v4;
  }
  return result;
}

uint64_t sub_24251161C(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_2425A00D4();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24259FD20();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_242511704(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (a4 < 0)
  {
    result = sub_2425A00D4();
    __break(1u);
  }
  else
  {
    if (a4)
    {
      v8 = sub_24259FD20();
      v9 = v8;
      *(_QWORD *)(v8 + 16) = a4;
      *(_QWORD *)(v8 + 32) = a1;
      *(_QWORD *)(v8 + 40) = a2;
      *(_DWORD *)(v8 + 48) = a3;
      *(_BYTE *)(v8 + 52) = BYTE4(a3);
      if (a4 != 1)
      {
        *(_QWORD *)(v8 + 56) = a1;
        *(_QWORD *)(v8 + 64) = a2;
        *(_DWORD *)(v8 + 72) = a3;
        *(_BYTE *)(v8 + 76) = BYTE4(a3);
        v10 = a4 - 2;
        if (v10)
        {
          v11 = v8 + 96;
          do
          {
            sub_24251DEA0(a1, a2, a3);
            *(_QWORD *)(v11 - 16) = a1;
            *(_QWORD *)(v11 - 8) = a2;
            *(_DWORD *)v11 = a3;
            *(_BYTE *)(v11 + 4) = BYTE4(a3);
            v11 += 24;
            --v10;
          }
          while (v10);
        }
        sub_24251DEA0(a1, a2, a3);
      }
    }
    else
    {
      sub_24251DEB4(a1, a2, a3);
      return MEMORY[0x24BEE4AF8];
    }
    return v9;
  }
  return result;
}

void sub_24251183C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  mlx::core *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0 + 1;
  if (__OFADD__(*v0, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  *v0 = v1;
  if (v1 < v0[1])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
    inited = swift_initStackObject();
    v3 = MEMORY[0x24BEE1768];
    *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
    *(_QWORD *)(inited + 56) = v3;
    *(_QWORD *)(inited + 64) = &protocol witness table for Int;
    *(_QWORD *)(inited + 32) = v1;
    type metadata accessor for Stream();
    v4 = swift_initStackObject();
    v5 = mlx_default_device();
    v6 = (uint64_t)v5;
    if (v5)
    {
      v7 = mlx_default_stream((uint64_t)v5);
      v8 = v7;
      if (v7)
      {
        *(_QWORD *)(v4 + 16) = v7;
        mlx_free(v6);
        v9 = v4;
        MLXArray.subscript.getter(inited, &v9);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        mlx_free(v8);
        return;
      }
      goto LABEL_9;
    }
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
}

void sub_24251195C(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_24251183C();
  *a1 = v2;
}

uint64_t MLXArray.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(v1 + 16);
  mlx_array_ndim(v3);
  v4 = mlx_array_dim(v3, 0);
  *a1 = -1;
  a1[1] = v4;
  a1[2] = v1;
  return swift_retain();
}

uint64_t sub_2425119D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  mlx_array_ndim(v4);
  result = mlx_array_dim(v4, 0);
  *a1 = -1;
  a1[1] = (int)result;
  a1[2] = v3;
  return result;
}

uint64_t sub_242511A30()
{
  return 0;
}

uint64_t sub_242511A38()
{
  return 2;
}

uint64_t sub_242511A40()
{
  unint64_t *v0;
  uint64_t v1;

  v1 = sub_24251D360(*v0);
  swift_release();
  return v1;
}

uint64_t sub_242511A74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24251D764(a1, a2, a3);
}

uint64_t sub_242511A94()
{
  return sub_24259FC48();
}

uint64_t sub_242511AB4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = v1;
  v3 = *a1;
  v4 = MLXArray.shape.getter();
  v5 = Array<A>.asInt32.getter(v4);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8E0);
  sub_2425213CC(&qword_2571FC8E8, &qword_2571FC8E0);
  sub_24259FDD4();
  if ((v16 & 1) == 0)
    goto LABEL_2;
  sub_2425A0260();
  swift_unknownObjectRetain_n();
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)(v7 + 16);
  swift_release();
  if (__OFSUB__(v16 >> 1, v15))
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 != (v16 >> 1) - v15)
  {
LABEL_17:
    swift_unknownObjectRelease_n();
LABEL_2:
    v6 = (_QWORD *)sub_24251CC60(v13, v14, v15, v16);
    goto LABEL_9;
  }
  v6 = (_QWORD *)swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (!v6)
  {
    swift_unknownObjectRelease();
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  swift_unknownObjectRelease();
  v9 = sub_24251BB24(v5, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_retain();
    swift_release();
    return v2;
  }
  v10 = v6[2];
  if (!v10)
  {
    swift_release();
    v6 = &unk_251352DE0;
    v10 = 1;
  }
  result = mlx_reshape(*(_QWORD *)(v2 + 16), v6 + 4, v10, *(_QWORD *)(v3 + 16));
  v12 = result;
  if (result)
  {
    swift_bridgeObjectRelease();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v12;
    return v2;
  }
  __break(1u);
  return result;
}

BOOL sub_242511CB0(_DWORD *a1)
{
  return *a1 == 1;
}

uint64_t MLXArray.resolve(index:axis:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;

  v3 = result;
  if ((result & 0x8000000000000000) == 0)
  {
    if ((unint64_t)result >> 31)
    {
      __break(1u);
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v2 = mlx_array_from_int(result);
    if (v2)
    {
LABEL_13:
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v2;
      return result;
    }
    __break(1u);
  }
  v4 = a2;
  v5 = *(_QWORD *)(v2 + 16);
  result = mlx_array_ndim(v5);
  if (v4 < 0)
  {
    v6 = __OFADD__(v4, result);
    v4 += result;
    if (v6)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v4 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_15;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = mlx_array_dim(v5, v4);
  v6 = __OFADD__(v3, v7);
  result = v3 + v7;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  result = mlx_array_from_int(result);
  v2 = result;
  if (result)
    goto LABEL_13;
LABEL_21:
  __break(1u);
  return result;
}

uint64_t MLXArray.resolve(index:axis:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  int v8;

  if ((a1 & 0x80000000) == 0)
  {
    v2 = mlx_array_from_int(a1);
    if (v2)
    {
LABEL_10:
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v2;
      return result;
    }
    __break(1u);
  }
  v4 = a2;
  v5 = *(_QWORD *)(v2 + 16);
  result = mlx_array_ndim(v5);
  if (v4 < 0)
  {
    v7 = __OFADD__(v4, result);
    v4 += result;
    if (v7)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    if (v4 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v8 = mlx_array_dim(v5, v4);
  v7 = __OFADD__(a1, v8);
  result = (a1 + v8);
  if (v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = mlx_array_from_int(result);
  v2 = result;
  if (result)
    goto LABEL_10;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_242511E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE v15[40];

  v4 = a1;
  sub_24251DE5C(a1, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC848);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8B8);
  if (swift_dynamicCast())
  {
    v5 = sub_242512150(v13, a2, v2);
    v6 = sub_242512150(v14, a2, v2);
LABEL_3:
    a2 = v6;
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return v5 | (unint64_t)(a2 << 32);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8C0);
  if (swift_dynamicCast())
  {
    v4 = v14;
    v5 = sub_242512150(v13, a2, v2);
    v7 = sub_242512150(v14, a2, v2);
    a2 = (v7 + 1);
    if (!__OFADD__(v7, 1))
      goto LABEL_13;
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8C8);
  if (swift_dynamicCast())
  {
    a2 = sub_242512150(v13, a2, v2);
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8D0);
  if (swift_dynamicCast())
  {
    v8 = sub_242512150(v13, a2, v2);
    a2 = (v8 + 1);
    if (!__OFADD__(v8, 1))
      goto LABEL_12;
    __break(1u);
    goto LABEL_21;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8D8);
  if (swift_dynamicCast())
  {
    v5 = sub_242512150(v13, a2, v2);
    v10 = *(_QWORD *)(v2 + 16);
    v11 = mlx_array_ndim(v10);
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_18;
    v12 = __OFADD__(a2, v11);
    a2 += v11;
    if (v12)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (a2 >= (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_18:
      if (a2 <= 0x7FFFFFFF)
      {
        v6 = mlx_array_dim(v10, a2);
        goto LABEL_3;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_24:
  sub_24251DE5C(v4, (uint64_t)&v13);
  sub_24259FF84();
  sub_24259FB70();
  sub_2425A008C();
  result = sub_2425A00E0();
  __break(1u);
  return result;
}

uint64_t sub_242512150(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v3 = a1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (!(a1 >> 31))
      return v3;
    __break(1u);
  }
  v5 = *(_QWORD *)(a3 + 16);
  result = mlx_array_ndim(v5);
  if ((a2 & 0x8000000000000000) == 0)
    goto LABEL_7;
  v7 = __OFADD__(a2, result);
  a2 += result;
  if (!v7)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    if (a2 <= 0x7FFFFFFF)
    {
      result = mlx_array_dim(v5, a2);
      v7 = __OFADD__(v3, (int)result);
      v3 += (int)result;
      if (!v7)
      {
        if (v3 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v3 <= 0x7FFFFFFF)
            return v3;
          goto LABEL_16;
        }
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t MLXArray.subscript.getter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;

  v6 = *a3;
  result = mlx_array_ndim(*(_QWORD *)(v3 + 16));
  if (a2 < 0)
  {
    v8 = __OFADD__(a2, result);
    a2 += result;
    if (v8)
      goto LABEL_9;
  }
  result = MLXArray.resolve(index:axis:)(a1, a2);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = mlx_take(*(_QWORD *)(v3 + 16), *(_QWORD *)(result + 16), a2, *(_QWORD *)(v6 + 16));
  v9 = result;
  if (result)
  {
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_2425122CC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = a1[1];
  v7 = a1[2];
  swift_retain();
  v5 = MLXArray.subscript.getter(v3, v4, &v7);
  result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_242512338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *a3;
  v4 = a3[1];
  v7 = a3[2];
  swift_retain();
  v5 = swift_retain();
  return MLXArray.subscript.setter(v5, v3, v4, &v7);
}

uint64_t MLXArray.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t dtype;
  int v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE v32[9];

  v6 = v4;
  v10 = *a4;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v4 + 16));
  sub_242553C80(dtype, &v31);
  v12 = v31;
  v13 = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(v13, v32);
  if (v12 == v32[0])
  {
    result = mlx_array_ndim(*(_QWORD *)(v6 + 16));
    if ((a3 & 0x8000000000000000) != 0)
    {
      v15 = __OFADD__(a3, result);
      a3 += result;
      if (v15)
        goto LABEL_21;
    }
    v5 = (_QWORD *)MLXArray.shape.getter();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((a3 & 0x8000000000000000) == 0)
        goto LABEL_6;
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)sub_24251DE48(v5);
  v5 = (_QWORD *)result;
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_18;
LABEL_6:
  if (a3 >= v5[2])
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v5[a3 + 4] = 1;
  v31 = v10;
  v16 = sub_242511AB4((uint64_t *)&v31);
  swift_release();
  v17 = Array<A>.asInt32.getter((uint64_t)v5);
  swift_bridgeObjectRelease();
  type metadata accessor for Stream();
  inited = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v19 = result;
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = mlx_default_stream(result);
  v20 = result;
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(_QWORD *)(inited + 16) = result;
  mlx_free(v19);
  result = mlx_broadcast_to(*(_QWORD *)(v16 + 16), (const void *)(v17 + 32), *(_QWORD *)(v17 + 16), v20);
  v21 = result;
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v22 = swift_initStackObject();
  *(_QWORD *)(v22 + 16) = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
  v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_2425C4A80;
  *(_QWORD *)(v23 + 32) = MLXArray.resolve(index:axis:)(a2, a3);
  v31 = v23;
  sub_24259FCCC();
  v24 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_2425C4B60;
  if (a3 >> 31)
    goto LABEL_20;
  v25 = result;
  *(_DWORD *)(result + 32) = a3;
  v26 = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v27 = result;
  if (!result)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = mlx_default_stream(result);
  v28 = result;
  if (!result)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v26 + 16) = result;
  mlx_free(v27);
  v31 = v26;
  v29 = sub_24250DF4C(v24, v22, v25, (uint64_t *)&v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v28);
  v30 = *(_QWORD *)(v29 + 16);
  if (v30 != *(_QWORD *)(v6 + 16))
  {
    mlx_retain(v30);
    mlx_free(*(_QWORD *)(v6 + 16));
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v29 + 16);
  }
  swift_release();
  swift_release();
  swift_setDeallocating();
  return mlx_free(*(_QWORD *)(v22 + 16));
}

void (*MLXArray.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[1] = a2;
  v9[2] = a3;
  v10 = *a4;
  v9[3] = v4;
  v9[4] = v10;
  v12 = v10;
  swift_retain();
  *v9 = MLXArray.subscript.getter(a2, a3, &v12);
  return sub_242512748;
}

void sub_242512748(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = (*a1)[4];
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = **a1;
  v8 = v3;
  if ((a2 & 1) != 0)
  {
    v7 = swift_retain();
    MLXArray.subscript.setter(v7, v5, v4, &v8);
    swift_release();
  }
  else
  {
    MLXArray.subscript.setter(v6, v5, v4, &v8);
  }
  free(v2);
}

uint64_t MLXArray.subscript.getter(char *a1, unint64_t a2, char **a3)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v8 = *(_QWORD *)v3;
  v9 = *a3;
  v10 = mlx_array_ndim(*(_QWORD *)(v3 + 16));
  v11 = v10;
  if (v10 < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v23 = (uint64_t)a1;
  v22 = v9;
  if (v10)
  {
    v12 = 0;
    v9 = (char *)MEMORY[0x24BEE4AF8];
    a1 = (char *)MEMORY[0x24BEE4AF8];
    v4 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_24251BB98(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v5 = *((_QWORD *)v4 + 2);
      v13 = *((_QWORD *)v4 + 3);
      if (v5 >= v13 >> 1)
        v4 = sub_24251BB98((char *)(v13 > 1), v5 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v5 + 1;
      *(_DWORD *)&v4[4 * v5 + 32] = 0;
      v8 = *(_QWORD *)(v3 + 16);
      mlx_array_ndim(v8);
      if (v12 == 0x80000000)
        break;
      v14 = mlx_array_dim(v8, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a1 = sub_24251BB98(0, *((_QWORD *)a1 + 2) + 1, 1, a1);
      v5 = *((_QWORD *)a1 + 2);
      v15 = *((_QWORD *)a1 + 3);
      if (v5 >= v15 >> 1)
        a1 = sub_24251BB98((char *)(v15 > 1), v5 + 1, 1, a1);
      *((_QWORD *)a1 + 2) = v5 + 1;
      *(_DWORD *)&a1[4 * v5 + 32] = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_24251BB98(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v17 = *((_QWORD *)v9 + 2);
      v16 = *((_QWORD *)v9 + 3);
      if (v17 >= v16 >> 1)
        v9 = sub_24251BB98((char *)(v16 > 1), v17 + 1, 1, v9);
      ++v12;
      *((_QWORD *)v9 + 2) = v17 + 1;
      *(_DWORD *)&v9[4 * v17 + 32] = 1;
      if (v11 == v12)
        goto LABEL_20;
    }
    __break(1u);
    goto LABEL_32;
  }
  v9 = (char *)MEMORY[0x24BEE4AF8];
  a1 = (char *)MEMORY[0x24BEE4AF8];
  v4 = (char *)MEMORY[0x24BEE4AF8];
LABEL_20:
  result = mlx_array_ndim(*(_QWORD *)(v3 + 16));
  v8 = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    v8 = a2 + result;
    if (__OFADD__(a2, result))
      goto LABEL_40;
  }
  v11 = sub_242511E94(v23, v8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_33:
    v4 = sub_24251DDCC((uint64_t)v4);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_34;
    goto LABEL_24;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_24:
  if (v8 < *((_QWORD *)v4 + 2))
  {
    v5 = (unint64_t)(v4 + 32);
    *(_DWORD *)&v4[4 * v8 + 32] = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_26;
    goto LABEL_36;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  a1 = sub_24251DDCC((uint64_t)a1);
LABEL_26:
  if (v8 >= *((_QWORD *)a1 + 2))
  {
    __break(1u);
  }
  else
  {
    v19 = HIDWORD(v11);
    v11 = (unint64_t)(a1 + 32);
    *(_DWORD *)&a1[4 * v8 + 32] = v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_28;
  }
  result = (uint64_t)sub_24251DDCC((uint64_t)v9);
  v9 = (char *)result;
LABEL_28:
  v20 = *((_QWORD *)v9 + 2);
  if (v8 >= v20)
  {
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  *(_DWORD *)&v9[4 * v8 + 32] = 1;
  result = mlx_slice(*(_QWORD *)(v3 + 16), (const void *)v5, *((_QWORD *)v4 + 2), (const void *)v11, *((_QWORD *)a1 + 2), v9 + 32, v20, *((_QWORD *)v22 + 2));
  v21 = result;
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v21;
    return result;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_242512B10@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  char *v7;

  v4 = *(_QWORD *)(a1 + 40);
  v7 = *(char **)(a1 + 48);
  swift_retain();
  v5 = MLXArray.subscript.getter((char *)a1, v4, &v7);
  result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_242512B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[40];

  sub_24251DE5C(a3, (uint64_t)v8);
  v4 = *(_QWORD *)(a3 + 40);
  v7 = *(_QWORD *)(a3 + 48);
  swift_retain();
  v5 = swift_retain();
  return MLXArray.subscript.setter(v5, (uint64_t)v8, v4, &v7);
}

uint64_t MLXArray.subscript.setter(uint64_t a1, uint64_t a2, int64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int8x16_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  unsigned int v37;
  unsigned __int8 v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[6];

  v11 = *a4;
  result = mlx_array_ndim(*(_QWORD *)(v4 + 16));
  if ((a3 & 0x8000000000000000) == 0)
    goto LABEL_4;
  v13 = __OFADD__(a3, result);
  a3 += result;
  if (v13)
  {
    __break(1u);
    return result;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
LABEL_4:
    v33 = v11;
    v34 = a1;
    v11 = MEMORY[0x24BEE4AF8];
    if (a3)
    {
      v42[0] = MEMORY[0x24BEE4AF8];
      swift_retain();
      sub_242509C28(0, a3, 0);
      v6 = 0;
      v5 = v42[0];
      do
      {
        if (a3 == v6)
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        v14 = *(_QWORD *)(v35 + 16);
        mlx_array_ndim(v14);
        if (v6 == 0x80000000)
          goto LABEL_31;
        v7 = mlx_array_dim(v14, v6);
        if ((v7 & 0x80000000) != 0)
          goto LABEL_32;
        v42[0] = v5;
        v16 = *(_QWORD *)(v5 + 16);
        v15 = *(_QWORD *)(v5 + 24);
        if (v16 >= v15 >> 1)
        {
          sub_242509C28(v15 > 1, v16 + 1, 1);
          v5 = v42[0];
        }
        ++v6;
        *(_QWORD *)(v5 + 16) = v16 + 1;
        v17 = v5 + 16 * v16;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = (int)v7;
      }
      while (a3 != v6);
      swift_release();
      v6 = *(_QWORD *)(v5 + 16);
      if (!v6)
        goto LABEL_25;
    }
    else
    {
      v5 = MEMORY[0x24BEE4AF8];
      v6 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v6)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        a3 = MEMORY[0x24BEE4AF8];
LABEL_26:
        sub_24251DE5C(a2, (uint64_t)v42);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC848);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC850);
        swift_dynamicCast();
        v26 = v40;
        v27 = v41;
        __swift_project_boxed_opaque_existential_1(v39, v40);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v27 + 8))(v36, v26, v27);
        v5 = v36[0];
        v6 = v36[1];
        v7 = v37 | ((unint64_t)v38 << 32);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
        sub_24251DEA0(v5, v6, v7);
        v11 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_27;
        goto LABEL_37;
      }
    }
    v32 = a2;
    v42[0] = v11;
    sub_242509BE8(0, v6, 0);
    v11 = 0;
    a3 = v42[0];
    v18.i64[0] = 0xFFFFFFFFLL;
    v18.i64[1] = 0xFFFFFFFFLL;
    a2 = 65;
    while (1)
    {
      v19 = (int8x16_t *)(v5 + 16 * v11);
      v20 = v19[2];
      v21 = v19[2].i64[0];
      if (v21 > 0x7FFFFFFF)
        break;
      if (v21 < (uint64_t)0xFFFFFFFF80000000 || v20.i64[1] < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_34;
      if (v20.i64[1] > 0x7FFFFFFF)
        goto LABEL_35;
      v42[0] = a3;
      v24 = *(_QWORD *)(a3 + 16);
      v23 = *(_QWORD *)(a3 + 24);
      v7 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        v31 = v20;
        sub_242509BE8(v23 > 1, v24 + 1, 1);
        v20 = v31;
        v18.i64[0] = 0xFFFFFFFFLL;
        v18.i64[1] = 0xFFFFFFFFLL;
        a3 = v42[0];
      }
      *(_QWORD *)(a3 + 16) = v7;
      v25 = (int8x16_t *)(a3 + 24 * v24);
      v25[2] = vandq_s8(v20, v18);
      ++v11;
      v25[3].i8[4] = 65;
      v25[3].i32[0] = 0;
      if (v6 == v11)
      {
        swift_bridgeObjectRelease();
        a2 = v32;
        goto LABEL_26;
      }
    }
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  __break(1u);
LABEL_37:
  a3 = (int64_t)sub_24251BFC4(0, *(_QWORD *)(a3 + 16) + 1, 1, (_QWORD *)a3);
LABEL_27:
  v29 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(a3 + 24);
  if (v29 >= v28 >> 1)
    a3 = (int64_t)sub_24251BFC4((_QWORD *)(v28 > 1), v29 + 1, 1, (_QWORD *)a3);
  *(_QWORD *)(a3 + 16) = v29 + 1;
  v30 = a3 + 24 * v29;
  *(_QWORD *)(v30 + 32) = v5;
  *(_QWORD *)(v30 + 40) = v6;
  *(_BYTE *)(v30 + 52) = BYTE4(v7);
  *(_DWORD *)(v30 + 48) = v7;
  v42[0] = v33;
  sub_242512FE4(v11, a3, v42);
  sub_24251DEB4(v5, v6, v7);
  return __swift_destroy_boxed_opaque_existential_1(a2);
}

uint64_t Range<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_7;
  if (a2 <= 0x7FFFFFFF)
  {
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = a2;
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 20) = 65;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_242512FE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t i;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = v3;
  v7 = *v4;
  v8 = *a3;
  type metadata accessor for Stream();
  inited = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v11 = result;
  if (!result)
    goto LABEL_34;
  result = mlx_default_stream(result);
  v12 = result;
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  *(_QWORD *)(inited + 16) = result;
  mlx_free(v11);
  v46 = (_QWORD *)inited;
  v13 = sub_242516008((uint64_t)v4, a2, a1, (unint64_t *)&v46);
  swift_setDeallocating();
  mlx_free(v12);
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v15 = (uint64_t *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 16);
    v17 = v4[2];
    v16 = v4 + 2;
    if (v14 == v17)
    {
LABEL_29:
      swift_release();
      return swift_release();
    }
LABEL_5:
    mlx_retain(v14);
    mlx_free(*v16);
    *v16 = *v15;
    goto LABEL_29;
  }
  v46 = (_QWORD *)v8;
  v18 = sub_242516B10((uint64_t)v4, a2, a1, (uint64_t *)&v46);
  v20 = v19;
  v22 = v21;
  swift_bridgeObjectRelease();
  if (!(v18 >> 62))
  {
    if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_8;
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v15 = (uint64_t *)(v20 + 16);
    v14 = *(_QWORD *)(v20 + 16);
    v41 = v4[2];
    v16 = v4 + 2;
    if (v14 == v41)
      goto LABEL_29;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v40 = sub_2425A0128();
  swift_bridgeObjectRelease();
  if (!v40)
    goto LABEL_31;
LABEL_8:
  result = (uint64_t)mlx_vector_array_new();
  v23 = result;
  if (!result)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v45 = v22;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v44 = v7;
  if (!v24)
    goto LABEL_25;
  v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
  result = sub_242509AC8(0, v24 & ~(v24 >> 63), 0);
  if (v24 < 0)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v42 = v23;
  v43 = v8;
  v25 = v46;
  if ((v18 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v24; ++i)
    {
      v27 = *(_QWORD *)(MEMORY[0x2426A7C70](i, v18) + 16);
      swift_unknownObjectRelease();
      v46 = v25;
      v29 = v25[2];
      v28 = v25[3];
      if (v29 >= v28 >> 1)
      {
        sub_242509AC8(v28 > 1, v29 + 1, 1);
        v25 = v46;
      }
      v25[2] = v29 + 1;
      v25[v29 + 4] = v27;
    }
  }
  else
  {
    v30 = v18 + 32;
    v31 = v46[2];
    v32 = v24;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)v30 + 16);
      v46 = v25;
      v34 = v25[3];
      if (v31 >= v34 >> 1)
      {
        sub_242509AC8(v34 > 1, v31 + 1, 1);
        v25 = v46;
      }
      v25[2] = v31 + 1;
      v25[v31 + 4] = v33;
      v30 += 8;
      ++v31;
      --v32;
    }
    while (v32);
  }
  v8 = v43;
  v23 = v42;
LABEL_25:
  mlx_vector_array_add_arrays(v23, v25 + 4, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = v4[2];
  v36 = *(_QWORD *)(v20 + 16);
  v37 = *(_QWORD *)(v45 + 16);
  v38 = *(_QWORD *)(v8 + 16);
  swift_release();
  v39 = mlx_scatter(v35, v23, v36, (const void *)(v45 + 32), v37, v38);
  swift_bridgeObjectRelease();
  result = v44;
  if (v39)
  {
    *(_QWORD *)(swift_initStackObject() + 16) = v39;
    if (v39 != (_QWORD *)v4[2])
    {
      mlx_retain((uint64_t)v39);
      mlx_free(v4[2]);
      v4[2] = (uint64_t)v39;
    }
    swift_release();
    mlx_free(v23);
    goto LABEL_29;
  }
LABEL_37:
  __break(1u);
  return result;
}

void (*MLXArray.subscript.modify(_QWORD *a1, char *a2, unint64_t a3, char **a4))(__int128 **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  char *v10;
  char *v12;

  v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[11] = a3;
  v9[12] = v4;
  v10 = *a4;
  v9[13] = v10;
  sub_24251DE5C((uint64_t)a2, (uint64_t)v9);
  v12 = v10;
  swift_retain();
  v9[10] = MLXArray.subscript.getter(a2, a3, &v12);
  return sub_24251348C;
}

void sub_24251348C(__int128 **a1, char a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 10);
  if ((a2 & 1) != 0)
  {
    v4 = *((_QWORD *)v2 + 13);
    v5 = *((_QWORD *)v2 + 11);
    sub_24251DEC8(*a1, (uint64_t)v2 + 40);
    v8 = v4;
    v6 = swift_retain();
    MLXArray.subscript.setter(v6, (uint64_t)v2 + 40, v5, &v8);
    swift_release();
  }
  else
  {
    v7 = *((_QWORD *)v2 + 11);
    v8 = *((_QWORD *)v2 + 13);
    MLXArray.subscript.setter(v3, (uint64_t)v2, v7, &v8);
  }
  free(v2);
}

uint64_t MLXArray.subscript.getter(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, char *a6, int64_t *a7)
{
  unint64_t v7;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v36;

  v12 = *(_QWORD *)v7;
  v13 = *a7;
  v14 = mlx_array_ndim(*(_QWORD *)(v7 + 16));
  v15 = v14;
  if (v14 < 0)
    goto LABEL_65;
  v30 = (char)a4;
  v31 = (char)a2;
  v32 = (unint64_t)a6;
  v33 = a5;
  v29 = v13;
  if (v14)
  {
    a5 = 0;
    a6 = (char *)MEMORY[0x24BEE4AF8];
    v7 = 0x80000000;
    v13 = 1;
    a4 = (char *)MEMORY[0x24BEE4AF8];
    a2 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a2 = sub_24251BB98(0, *((_QWORD *)a2 + 2) + 1, 1, a2);
      v17 = *((_QWORD *)a2 + 2);
      v16 = *((_QWORD *)a2 + 3);
      if (v17 >= v16 >> 1)
        a2 = sub_24251BB98((char *)(v16 > 1), v17 + 1, 1, a2);
      *((_QWORD *)a2 + 2) = v17 + 1;
      *(_DWORD *)&a2[4 * v17 + 32] = 0;
      v12 = *(_QWORD *)(v36 + 16);
      mlx_array_ndim(v12);
      if (a5 == 0x80000000)
        break;
      v18 = mlx_array_dim(v12, a5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a4 = sub_24251BB98(0, *((_QWORD *)a4 + 2) + 1, 1, a4);
      v20 = *((_QWORD *)a4 + 2);
      v19 = *((_QWORD *)a4 + 3);
      if (v20 >= v19 >> 1)
        a4 = sub_24251BB98((char *)(v19 > 1), v20 + 1, 1, a4);
      *((_QWORD *)a4 + 2) = v20 + 1;
      *(_DWORD *)&a4[4 * v20 + 32] = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a6 = sub_24251BB98(0, *((_QWORD *)a6 + 2) + 1, 1, a6);
      v22 = *((_QWORD *)a6 + 2);
      v21 = *((_QWORD *)a6 + 3);
      if (v22 >= v21 >> 1)
        a6 = sub_24251BB98((char *)(v21 > 1), v22 + 1, 1, a6);
      ++a5;
      *((_QWORD *)a6 + 2) = v22 + 1;
      *(_DWORD *)&a6[4 * v22 + 32] = 1;
      if (v15 == a5)
        goto LABEL_20;
    }
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  a6 = (char *)MEMORY[0x24BEE4AF8];
  a4 = (char *)MEMORY[0x24BEE4AF8];
  a2 = (char *)MEMORY[0x24BEE4AF8];
LABEL_20:
  v23 = mlx_array_ndim(*(_QWORD *)(v36 + 16));
  v13 = v33;
  v7 = v32;
  v12 = a1;
  a5 = a3;
  if ((v32 & 0x8000000000000000) != 0)
  {
    v7 = v32 + v23;
    if (__OFADD__(v32, v23))
      goto LABEL_77;
  }
  if (v33 < 1)
    goto LABEL_34;
  if ((v31 & 1) != 0)
    v12 = 0;
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_69;
  if (v12 > 0x7FFFFFFF)
    goto LABEL_70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_71;
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_72;
LABEL_29:
  if (v7 < *((_QWORD *)a2 + 2))
  {
    *(_DWORD *)&a2[4 * v7 + 32] = v12;
    if ((v30 & 1) != 0)
      goto LABEL_49;
    if (a5 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_74;
    if (a5 <= 0x7FFFFFFF)
      goto LABEL_51;
    __break(1u);
LABEL_34:
    if ((v31 & 1) != 0)
    {
      v24 = *(_QWORD *)(v36 + 16);
      result = mlx_array_ndim(v24);
      v26 = v7;
      if ((v7 & 0x8000000000000000) != 0)
      {
        v26 = v7 + result;
        if (__OFADD__(v7, result))
          goto LABEL_90;
        if (v26 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_87;
      }
      if (v26 > 0x7FFFFFFF)
        goto LABEL_88;
      v12 = (int)mlx_array_dim(v24, v26) - 1;
    }
    if (v12 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v12 <= 0x7FFFFFFF)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_81;
          goto LABEL_44;
        }
LABEL_80:
        a2 = sub_24251DDCC((uint64_t)a2);
        if ((v7 & 0x8000000000000000) != 0)
        {
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
LABEL_44:
        if (v7 >= *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *(_DWORD *)&a2[4 * v7 + 32] = v12;
        if ((v30 & 1) == 0)
        {
          if (a5 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a5 > 0x7FFFFFFF)
            {
              __break(1u);
LABEL_49:
              v12 = *(_QWORD *)(v36 + 16);
              result = mlx_array_ndim(v12);
              if (v7 >> 31)
                goto LABEL_86;
              a5 = mlx_array_dim(v12, v7);
LABEL_51:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                goto LABEL_75;
              goto LABEL_52;
            }
            goto LABEL_57;
          }
LABEL_83:
          __break(1u);
LABEL_84:
          result = (uint64_t)sub_24251DDCC((uint64_t)a4);
          a4 = (char *)result;
          goto LABEL_58;
        }
        goto LABEL_55;
      }
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  while (1)
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    a4 = sub_24251DDCC((uint64_t)a4);
LABEL_52:
    if (v7 >= *((_QWORD *)a4 + 2))
    {
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    *(_DWORD *)&a4[4 * v7 + 32] = a5;
    if (!((unint64_t)v13 >> 31))
      goto LABEL_94;
    __break(1u);
LABEL_55:
    v12 = *(_QWORD *)(v36 + 16);
    result = mlx_array_ndim(v12);
    if (v7 >> 31)
      goto LABEL_89;
    a5 = ~mlx_array_dim(v12, v7);
LABEL_57:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      goto LABEL_84;
LABEL_58:
    if (v7 >= *((_QWORD *)a4 + 2))
    {
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    *(_DWORD *)&a4[4 * v7 + 32] = a5;
    if (v13 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_66:
      __break(1u);
    }
    else
    {
LABEL_94:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_61;
    }
    a6 = sub_24251DDCC((uint64_t)a6);
LABEL_61:
    v27 = *((_QWORD *)a6 + 2);
    if (v7 < v27)
      break;
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    a2 = sub_24251DDCC((uint64_t)a2);
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_29;
LABEL_72:
    __break(1u);
  }
  *(_DWORD *)&a6[4 * v7 + 32] = v13;
  result = mlx_slice(*(_QWORD *)(v36 + 16), a2 + 32, *((_QWORD *)a2 + 2), a4 + 32, *((_QWORD *)a4 + 2), a6 + 32, v27, *(_QWORD *)(v29 + 16));
  v28 = result;
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v28;
    return result;
  }
LABEL_91:
  __break(1u);
  return result;
}

uint64_t sub_242513A88@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;

  v3 = *(_QWORD *)a1;
  v4 = (char *)*(unsigned __int8 *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (char *)*(unsigned __int8 *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(char **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  swift_retain();
  v9 = MLXArray.subscript.getter(v3, v4, v5, v6, v7, v8, &v11);
  result = swift_release();
  *a2 = v9;
  return result;
}

uint64_t sub_242513B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a3;
  v4 = *(_BYTE *)(a3 + 8);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_BYTE *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = *(_QWORD *)(a3 + 40);
  swift_retain();
  v9 = swift_retain();
  return MLXArray.subscript.setter(v9, v3, v4, v5, v6, v7, v8);
}

uint64_t MLXArray.subscript.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t dtype;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int32x4_t *v31;
  unint64_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  mlx::core *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  mlx::core *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t inited;
  mlx::core *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  mlx::core *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t result;
  uint64_t v110;
  char v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t __len;
  size_t __lena;
  size_t __lenb;
  int64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unsigned __int8 v127[16];

  v9 = v7;
  swift_release();
  dtype = mlx_array_get_dtype(*(_QWORD *)(v9 + 16));
  sub_242553C80(dtype, v127);
  v16 = v127[0];
  v17 = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(v17, &v126);
  if ((_DWORD)v16 != v126)
    goto LABEL_132;
  v111 = a5;
  v18 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)v127 = MEMORY[0x24BEE4AF8];
  v19 = mlx_array_ndim(*(_QWORD *)(v9 + 16));
  if (a7 < 0)
  {
    v20 = __OFADD__(a7, v19);
    a7 += v19;
    if (v20)
    {
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    if (a7 < 0)
      goto LABEL_133;
  }
  v110 = a2;
  v114 = a6;
  v113 = a1;
  v124 = v9;
  if (a7)
  {
    v21 = a7 + 1;
    if (!__OFADD__(a7, 1))
    {
      v22 = 0;
      __len = 4 * a7 + 4;
      v115 = 0x100000000;
      v119 = a7;
      while (1)
      {
        if (v22 == a7)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        a1 = *(_QWORD *)(v9 + 16);
        mlx_array_ndim(a1);
        if (v22 == 0x80000000)
          goto LABEL_126;
        v23 = mlx_array_dim(a1, v22);
        a1 = v23;
        if ((v23 & 0x80000000) != 0)
          goto LABEL_127;
        if (!(_DWORD)v23)
        {
          v24 = v18;
          goto LABEL_23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
        v24 = swift_allocObject();
        v25 = _swift_stdlib_malloc_size((const void *)v24);
        v26 = v25 - 32;
        if (v25 < 32)
          v26 = v25 - 29;
        v27 = v26 >> 2;
        *(_DWORD *)(v24 + 32) = 0;
        v28 = v24 + 32;
        *(_QWORD *)(v24 + 16) = (int)a1;
        *(_QWORD *)(v24 + 24) = 2 * v27;
        if ((_DWORD)a1 != 1)
        {
          if (a1 < 9)
          {
            LODWORD(v29) = 0;
            v30 = 1;
LABEL_21:
            v37 = (_DWORD *)(v28 + 4);
            v38 = v29 + 1;
            v39 = (int)a1 - v30;
            do
            {
              *v37++ = v38++;
              --v39;
            }
            while (v39);
            goto LABEL_23;
          }
          v29 = ((int)a1 - 1) & 0xFFFFFFFFFFFFFFF8;
          v28 += 4 * v29;
          v30 = v29 | 1;
          v31 = (int32x4_t *)(v24 + 52);
          v32 = v29;
          v33 = (int32x4_t)xmmword_2425C4B70;
          v34.i64[0] = 0x100000001;
          v34.i64[1] = 0x100000001;
          v35.i64[0] = 0x500000005;
          v35.i64[1] = 0x500000005;
          v36.i64[0] = 0x800000008;
          v36.i64[1] = 0x800000008;
          do
          {
            v31[-1] = vaddq_s32(v33, v34);
            *v31 = vaddq_s32(v33, v35);
            v33 = vaddq_s32(v33, v36);
            v31 += 2;
            v32 -= 8;
          }
          while (v32);
          if ((int)a1 - 1 != v29)
            goto LABEL_21;
        }
LABEL_23:
        if (v21 < 0)
          goto LABEL_172;
        v40 = sub_24259FD20();
        *(_QWORD *)(v40 + 16) = v21;
        memset_pattern16((void *)(v40 + 32), &unk_2425A2960, __len);
        if (v21)
        {
          v126 = (_QWORD *)v18;
          sub_242509AE4(0, v21, 0);
          v41 = 0;
          a1 = (uint64_t)v126;
          v8 = v126[2];
          do
          {
            v42 = *(int *)(v40 + 4 * v41 + 32);
            v126 = (_QWORD *)a1;
            v43 = *(_QWORD *)(a1 + 24);
            if (v8 >= v43 >> 1)
            {
              sub_242509AE4(v43 > 1, v8 + 1, 1);
              a1 = (uint64_t)v126;
            }
            ++v41;
            *(_QWORD *)(a1 + 16) = v8 + 1;
            *(_QWORD *)(a1 + 8 * v8++ + 32) = v42;
          }
          while (v21 != v41);
          swift_bridgeObjectRelease();
          v9 = v124;
          a7 = v119;
        }
        else
        {
          swift_bridgeObjectRelease();
          a1 = v18;
        }
        v16 = *(_QWORD *)(v24 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a1 = (uint64_t)sub_24251DE48((_QWORD *)a1);
        if (v22 >= *(_QWORD *)(a1 + 16))
          goto LABEL_128;
        *(_QWORD *)(a1 + 8 * v22 + 32) = v16;
        sub_242520430(v24, a1);
        swift_release();
        v44 = swift_bridgeObjectRelease();
        a1 = (uint64_t)v127;
        MEMORY[0x2426A794C](v44);
        if (*(_QWORD *)((*(_QWORD *)v127 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v127 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
          sub_24259FCF0();
        ++v22;
        sub_24259FD38();
        sub_24259FCCC();
        if (v22 == a7)
          goto LABEL_37;
      }
    }
    goto LABEL_150;
  }
LABEL_37:
  if (v114 < 1)
  {
    v16 = v110;
    v45 = a4;
    if ((a3 & 1) != 0)
    {
      a1 = *(_QWORD *)(v9 + 16);
      mlx_array_ndim(a1);
      if (a7 > 0x7FFFFFFF)
      {
LABEL_158:
        __break(1u);
        goto LABEL_159;
      }
      v16 = (int)mlx_array_dim(a1, a7) - 1;
    }
    if ((v111 & 1) != 0)
    {
      a1 = *(_QWORD *)(v9 + 16);
      mlx_array_ndim(a1);
      if (a7 > 0x7FFFFFFF)
      {
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
      v45 = (int)~mlx_array_dim(a1, a7);
    }
  }
  else
  {
    v16 = v110;
    if ((a3 & 1) != 0)
      v16 = 0;
    v45 = a4;
    if ((v111 & 1) != 0)
    {
      a1 = *(_QWORD *)(v9 + 16);
      mlx_array_ndim(a1);
      if (a7 > 0x7FFFFFFF)
      {
LABEL_157:
        __break(1u);
        goto LABEL_158;
      }
      v45 = (int)mlx_array_dim(a1, a7);
    }
  }
  if (v16 < 0)
  {
    a1 = *(_QWORD *)(v9 + 16);
    mlx_array_ndim(a1);
    if (a7 > 0x7FFFFFFF)
    {
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    v46 = mlx_array_dim(a1, a7);
    v20 = __OFADD__(v16, v46);
    v16 += v46;
    if (v20)
    {
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
  }
  if (v45 < 0)
  {
    a1 = *(_QWORD *)(v9 + 16);
    mlx_array_ndim(a1);
    if (a7 > 0x7FFFFFFF)
    {
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    v47 = mlx_array_dim(a1, a7);
    v20 = __OFADD__(v45, v47);
    v45 += v47;
    if (v20)
    {
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
  }
  v9 = a7 + 1;
  if (__OFADD__(a7, 1))
    goto LABEL_134;
  v117 = v45;
  v48 = v16;
  v49 = sub_24251147C(1u, a7 + 1);
  v50 = *(_QWORD *)(v49 + 16);
  v115 = a7 + 1;
  if (v50)
  {
    v126 = (_QWORD *)v18;
    a1 = (uint64_t)&v126;
    sub_242509AE4(0, v50, 0);
    v16 = 0;
    v8 = (unint64_t)v126;
    v51 = v126[2];
    do
    {
      v52 = *(int *)(v49 + 4 * v16 + 32);
      v126 = (_QWORD *)v8;
      v53 = *(_QWORD *)(v8 + 24);
      if (v51 >= v53 >> 1)
      {
        a1 = (uint64_t)&v126;
        sub_242509AE4(v53 > 1, v51 + 1, 1);
        v8 = (unint64_t)v126;
      }
      ++v16;
      *(_QWORD *)(v8 + 16) = v51 + 1;
      *(_QWORD *)(v8 + 8 * v51++ + 32) = v52;
    }
    while (v50 != v16);
    swift_bridgeObjectRelease();
    v9 = a7 + 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  if (v48 > 0x7FFFFFFF)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if (v48 < (uint64_t)0xFFFFFFFF80000000 || v117 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_136;
  if (v117 > 0x7FFFFFFF)
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  if (v114)
  {
    a1 = sub_24251D03C(v48 | ((unint64_t)v117 << 32), v114);
    v16 = *(_QWORD *)(a1 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_69;
    goto LABEL_139;
  }
LABEL_138:
  __break(1u);
LABEL_139:
  v8 = (unint64_t)sub_24251DE48((_QWORD *)v8);
LABEL_69:
  if (a7 >= *(_QWORD *)(v8 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v8 + 8 * a7 + 32) = v16;
    swift_bridgeObjectRetain();
    sub_242520430(a1, v8);
    swift_release();
    v54 = swift_bridgeObjectRelease();
    MEMORY[0x2426A794C](v54);
    if (*(_QWORD *)((*(_QWORD *)v127 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v127 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      goto LABEL_71;
  }
  sub_24259FCF0();
LABEL_71:
  sub_24259FD38();
  sub_24259FCCC();
  v55 = *(_QWORD *)v127;
  v56 = mlx_default_device();
  v57 = (uint64_t)v56;
  if (!v56)
  {
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }
  v58 = mlx_default_stream((uint64_t)v56);
  if (!v58)
  {
LABEL_161:
    __break(1u);
    goto LABEL_162;
  }
  mlx_free(v57);
  v59 = mlx_vector_array_new();
  if (!v59)
  {
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
  if (v55 >> 62)
  {
    swift_bridgeObjectRetain();
    a7 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    a7 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (a7)
  {
    v126 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_242509AC8(0, a7 & ~(a7 >> 63), 0);
    if (a7 < 0)
    {
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    __lena = v58;
    v61 = v126;
    if ((v55 & 0xC000000000000001) != 0)
    {
      v62 = 0;
      do
      {
        v63 = *(_QWORD *)(MEMORY[0x2426A7C70](v62, v55) + 16);
        swift_unknownObjectRelease();
        v126 = v61;
        v65 = v61[2];
        v64 = v61[3];
        if (v65 >= v64 >> 1)
        {
          sub_242509AC8(v64 > 1, v65 + 1, 1);
          v61 = v126;
        }
        ++v62;
        v61[2] = v65 + 1;
        v61[v65 + 4] = v63;
      }
      while (a7 != v62);
    }
    else
    {
      v66 = v55 + 32;
      v67 = v126[2];
      v68 = a7;
      do
      {
        v69 = *(_QWORD *)(*(_QWORD *)v66 + 16);
        v126 = v61;
        v70 = v61[3];
        if (v67 >= v70 >> 1)
        {
          sub_242509AC8(v70 > 1, v67 + 1, 1);
          v61 = v126;
        }
        v61[2] = v67 + 1;
        v61[v67 + 4] = v69;
        v66 += 8;
        ++v67;
        --v68;
      }
      while (v68);
    }
    v9 = v115;
    v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v58 = __lena;
  }
  else
  {
    v61 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  mlx_vector_array_add_arrays((uint64_t)v59, v61 + 4, a7);
  swift_bridgeObjectRelease();
  v71 = mlx_broadcast_arrays((uint64_t)v59, v58);
  v72 = v71;
  if (!v71)
  {
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
    goto LABEL_165;
  }
  v73 = sub_242507E64(v71);
  mlx_free(v72);
  mlx_free((uint64_t)v59);
  swift_bridgeObjectRelease();
  mlx_free(v58);
  *(_QWORD *)v127 = v73;
  if ((v73 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x2426A7C70](0, v73);
  }
  else
  {
    if (!*(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_145;
    }
    swift_bridgeObjectRetain();
    swift_retain();
  }
  v74 = MLXArray.shape.getter();
  swift_release();
  v75 = Array<A>.asInt32.getter(v74);
  swift_bridgeObjectRelease();
  v76 = mlx_array_ndim(*(_QWORD *)(v124 + 16));
  if (v9 > 0x7FFFFFFF)
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }
  if (v9 < (uint64_t)0xFFFFFFFF80000000 || v76 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_146;
  if (v76 > 0x7FFFFFFF)
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  if ((int)v76 < (int)v9)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v120 = v73 & 0xC000000000000001;
  __lenb = v73;
  v77 = sub_24251CA20(v9 | ((unint64_t)v76 << 32));
  v78 = *(_QWORD *)(v77 + 16);
  if (v78)
  {
    v118 = v75;
    v126 = v60;
    swift_retain();
    sub_242509C04(0, v78, 0);
    v9 = 0;
    v79 = (uint64_t)v126;
    v16 = 0x7FFFFFFFLL;
    do
    {
      a1 = *(int *)(v77 + 4 * v9 + 32);
      v80 = *(_QWORD *)(v124 + 16);
      v81 = mlx_array_ndim(v80);
      if ((a1 & 0x80000000) != 0)
      {
        v20 = __OFADD__(a1, v81);
        a1 += v81;
        if (v20)
          goto LABEL_131;
        if (a1 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_129;
        if (a1 > 0x7FFFFFFF)
          goto LABEL_130;
      }
      v82 = mlx_array_dim(v80, a1);
      v126 = (_QWORD *)v79;
      a7 = *(_QWORD *)(v79 + 16);
      v83 = *(_QWORD *)(v79 + 24);
      if (a7 >= v83 >> 1)
      {
        sub_242509C04(v83 > 1, a7 + 1, 1);
        v79 = (uint64_t)v126;
      }
      ++v9;
      *(_QWORD *)(v79 + 16) = a7 + 1;
      *(_DWORD *)(v79 + 4 * a7 + 32) = v82;
    }
    while (v78 != v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v9 = v115;
    v73 = __lenb;
    v75 = v118;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    v79 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v126 = (_QWORD *)v75;
  sub_242519FF0(v79);
  v84 = v126;
  swift_bridgeObjectRetain();
  v85 = sub_24251147C(1u, v9);
  if (v120)
  {
    v86 = MEMORY[0x2426A7C70](0, v73);
  }
  else
  {
    v86 = *(_QWORD *)(v73 + 32);
    swift_retain();
  }
  v87 = mlx_array_ndim(*(_QWORD *)(v86 + 16));
  swift_release();
  sub_242520894(v87, v87, v85);
  swift_bridgeObjectRelease();
  v88 = mlx_default_device();
  v89 = (uint64_t)v88;
  if (!v88)
    goto LABEL_164;
  v90 = mlx_default_stream((uint64_t)v88);
  if (!v90)
  {
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  mlx_free(v89);
  v91 = mlx_broadcast_to(*(_QWORD *)(v113 + 16), v84 + 4, v84[2], v90);
  if (!v91)
  {
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }
  swift_bridgeObjectRelease();
  mlx_free(v90);
  *(_QWORD *)(swift_initStackObject() + 16) = v91;
  v92 = v126;
  type metadata accessor for Stream();
  inited = swift_initStackObject();
  v94 = mlx_default_device();
  v95 = (uint64_t)v94;
  if (!v94)
  {
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
  v96 = mlx_default_stream((uint64_t)v94);
  v97 = v96;
  if (!v96)
  {
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }
  *(_QWORD *)(inited + 16) = v96;
  mlx_free(v95);
  v98 = mlx_reshape(v91, v92 + 4, v92[2], v97);
  if (!v98)
  {
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v99 = swift_initStackObject();
  *(_QWORD *)(v99 + 16) = v98;
  if ((v9 & 0x80000000) != 0)
    goto LABEL_149;
  v100 = v99;
  v101 = sub_24251CA20((unint64_t)v9 << 32);
  v102 = swift_initStackObject();
  v103 = mlx_default_device();
  v104 = (uint64_t)v103;
  if (!v103)
  {
LABEL_170:
    __break(1u);
    goto LABEL_171;
  }
  v105 = mlx_default_stream((uint64_t)v103);
  v106 = v105;
  if (v105)
  {
    *(_QWORD *)(v102 + 16) = v105;
    mlx_free(v104);
    v125 = v102;
    v107 = sub_24250DF4C(__lenb, v100, v101, &v125);
    swift_bridgeObjectRelease();
    swift_release();
    swift_setDeallocating();
    mlx_free(v106);
    v108 = *(_QWORD *)(v107 + 16);
    if (v108 != *(_QWORD *)(v124 + 16))
    {
      mlx_retain(v108);
      mlx_free(*(_QWORD *)(v124 + 16));
      *(_QWORD *)(v124 + 16) = *(_QWORD *)(v107 + 16);
    }
    swift_release();
    swift_release();
    swift_setDeallocating();
    return mlx_free(*(_QWORD *)(v100 + 16));
  }
LABEL_171:
  __break(1u);
LABEL_172:
  result = sub_2425A00D4();
  __break(1u);
  return result;
}

void (*MLXArray.subscript.modify(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char *a7, int64_t *a8))(uint64_t **a1, char a2)
{
  uint64_t v8;
  _QWORD *v17;
  int64_t v18;
  int64_t v20;

  v17 = malloc(0x40uLL);
  *a1 = v17;
  v17[3] = a6;
  v17[4] = a7;
  *((_BYTE *)v17 + 57) = a5;
  *((_BYTE *)v17 + 56) = a3;
  v17[1] = a2;
  v17[2] = a4;
  v18 = *a8;
  v17[5] = v8;
  v17[6] = v18;
  v20 = v18;
  swift_retain();
  *v17 = MLXArray.subscript.getter(a2, (char *)(a3 & 1), a4, (char *)(a5 & 1), a6, a7, &v20);
  return sub_242514AA4;
}

void sub_242514AA4(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;

  v2 = *a1;
  v4 = (*a1)[3];
  v3 = (*a1)[4];
  v5 = *((_BYTE *)*a1 + 57);
  v7 = (*a1)[1];
  v6 = (*a1)[2];
  v8 = *((_BYTE *)*a1 + 56);
  v9 = **a1;
  v10 = v8 & 1;
  v11 = v5 & 1;
  if ((a2 & 1) != 0)
  {
    v12 = swift_retain();
    MLXArray.subscript.setter(v12, v7, v10, v6, v11, v4, v3);
    swift_release();
  }
  else
  {
    MLXArray.subscript.setter(v9, v7, v8 & 1, v6, v5 & 1, v4, v3);
  }
  free(v2);
}

uint64_t sub_242514B60(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11[2];
  int v12;
  char v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned __int8 *)(a1 + 52);
    v7 = *(unsigned int *)(a1 + 48);
    v8 = v7 | (v6 << 32);
    v11[0] = v4;
    v11[1] = v5;
    v13 = v6;
    v12 = v7;
    sub_24251DEA0(v4, v5, v8);
    sub_242514C20(v2, (uint64_t)v11);
    v2 = v9;
    sub_24251DEB4(v4, v5, v8);
  }
  else if (v3)
  {
    v11[0] = *a2;
    return sub_242514FAC(v2, a1, v11);
  }
  else
  {
    swift_retain();
  }
  return v2;
}

void sub_242514C20(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_242514C70()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  if (v1 < 0)
  {
    v4 = *(_QWORD *)(v0 + 16);
    mlx_array_ndim(v4);
    v5 = mlx_array_dim(v4, 0);
    v6 = __OFADD__(v1, v5);
    v7 = v1 + v5;
    if (v6)
    {
      __break(1u);
      JUMPOUT(0x242514F5CLL);
    }
    v3 = mlx_array_from_int(v7);
    if (!v3)
    {
LABEL_10:
      __break(1u);
      JUMPOUT(0x242514C88);
    }
  }
  else
  {
    v3 = mlx_array_from_int(v1);
    if (!v3)
      goto LABEL_10;
  }
  type metadata accessor for MLXArray();
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v8 = mlx_take(*(_QWORD *)(v0 + 16), v3, 0, *(_QWORD *)(v2 + 16));
  if (!v8)
  {
    __break(1u);
    JUMPOUT(0x242514F70);
  }
  swift_release();
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v8;
  return result;
}

uint64_t sub_242514FAC(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  int v47;
  _QWORD *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unint64_t v56;
  int v57;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  mlx::core *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  mlx::core *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  int64x2_t *v97;
  unsigned int v98;
  BOOL v99;
  _QWORD *v101;
  unsigned int *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int *v108;
  int64x2_t *v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int *v112;
  unint64_t v113;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int *v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  int64x2_t v133;
  int64x2_t v134;
  unsigned int *v135;
  unsigned int *v136;
  uint64_t v137;
  unsigned int *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  int v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;

  v123 = *a3;
  v9 = (_QWORD *)MLXArray.shape.getter();
  v10 = (unsigned int *)Array<A>.asInt32.getter((uint64_t)v9);
  swift_bridgeObjectRelease();
  v11 = sub_2425186A4((uint64_t)v10, a2);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_25;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = v11 + 48;
  while (1)
  {
    if (v15 <= v12)
      v18 = *(_QWORD *)(v11 + 16);
    else
      v18 = v15;
    if (v15 >= v12)
      goto LABEL_233;
    v17 = v15 + 1;
    if (((*(unsigned int *)(v16 + 24 * v15) | ((unint64_t)*(unsigned __int8 *)(v16 + 24 * v15 + 4) << 32)) & 0x4000000000) != 0)
      goto LABEL_4;
    if ((v14 & v13 & 1) != 0)
      break;
    if (v17 == v12)
    {
LABEL_139:
      LOBYTE(v13) = 0;
      goto LABEL_16;
    }
    v19 = v18 - 1;
    v20 = (unsigned int *)(v11 + 72 + 24 * v15);
    while (1)
    {
      if (v19 == v15)
        goto LABEL_233;
      if (((*v20 | ((unint64_t)*((unsigned __int8 *)v20 + 4) << 32)) & 0x4000000000) != 0)
        break;
      v21 = v12 - 2 == v15++;
      v20 += 6;
      if (((v13 | v21) & 1) != 0)
        goto LABEL_16;
    }
    v17 = v15 + 2;
    v14 = 1;
LABEL_4:
    v13 |= v14;
    v15 = v17;
    if (v17 == v12)
      goto LABEL_139;
  }
  LOBYTE(v13) = 1;
LABEL_16:
  v22 = 0;
  v23 = 48;
  while ((((unint64_t)*(unsigned __int8 *)(v11 + v23 + 4) << 32) & 0xC000000000) != 0x8000000000)
  {
    v24 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_235;
    ++v22;
    v23 += 24;
    if (v24 == v12)
      goto LABEL_25;
  }
  if ((uint64_t)v12 < v22)
  {
    v25 = -1;
    v26 = v22;
    v22 = *(_QWORD *)(v11 + 16);
    goto LABEL_140;
  }
  if (v12 == v22)
  {
LABEL_25:
    v148 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_26:
    v27 = MEMORY[0x24BEE4AF8];
    v28 = (unsigned int *)a1;
    v29 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v10 = v28;
    swift_retain();
    if (!v29)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v127) = 0;
LABEL_30:
      v30 = mlx_array_ndim(*((_QWORD *)v10 + 2));
      a1 = sub_24251147C(0, v30);
      v3 = MLXArray.shape.getter();
      v9 = (_QWORD *)Array<A>.asInt32.getter(v3);
      swift_bridgeObjectRelease();
      v131 = sub_24251147C(1u, v30);
      v6 = *(_QWORD *)(v11 + 16);
      v124 = v11;
      if (!v6)
      {
        v128 = 0;
        goto LABEL_97;
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_32;
      goto LABEL_261;
    }
    LOBYTE(v127) = 0;
LABEL_28:
    swift_bridgeObjectRelease();
    v11 = v27;
    goto LABEL_30;
  }
  v25 = 1;
  v26 = *(_QWORD *)(v11 + 16);
LABEL_140:
  v72 = 0;
  while (2)
  {
    v46 = __OFADD__(v72, v25);
    v72 += v25;
    if (v46)
      goto LABEL_236;
    if (v22 == v12)
      goto LABEL_237;
    v73 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_238;
    v74 = *(_QWORD *)(v11 + 16);
    if (v73 == v12)
      goto LABEL_141;
    v75 = v11 + 72 + 24 * v22;
    v74 = v73;
    while (2)
    {
      if (v74 >= v12)
      {
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
LABEL_239:
        __break(1u);
LABEL_240:
        __break(1u);
LABEL_241:
        __break(1u);
LABEL_242:
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
        while (2)
        {
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          a1 = (unint64_t)sub_24251DDCC(a1);
LABEL_32:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = sub_24251DDCC((uint64_t)v9);
          v135 = v10;
          v139 = a1;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v31 = (char *)v131;
          else
            v31 = sub_24251DDCC(v131);
          v131 = (uint64_t)v31;
          v32 = 0;
          a1 = 0;
          v128 = 0;
          v130 = v139 + 32;
          v10 = (unsigned int *)(v124 + 48);
          while (1)
          {
            v36 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_234;
            inited = *((_QWORD *)v10 - 2);
            v3 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
            v37 = (v3 >> 38) & 3;
            if (!(_DWORD)v37)
              break;
            v5 = *((_QWORD *)v10 - 1);
            if ((_DWORD)v37 == 1)
            {
              v38 = *((_QWORD *)v135 + 2);
              v39 = mlx_array_ndim(v38);
              v40 = a1;
              if ((a1 & 0x8000000000000000) != 0)
              {
                v40 = a1 + v39;
                if (__OFADD__(a1, v39))
                  goto LABEL_252;
                if (v40 < (uint64_t)0xFFFFFFFF80000000)
                  goto LABEL_239;
              }
              if (v40 > 0x7FFFFFFF)
                goto LABEL_240;
              v41 = mlx_array_dim(v38, v40);
              if ((inited & 0x100000000) != 0)
                v42 = 0;
              else
                v42 = inited;
              if ((inited & 0x100000000) != 0 && (v3 & 0x100000000) == 0)
              {
                if ((v3 & 0x80000000) != 0)
                {
                  v42 = v41 - 1;
                  if (__OFSUB__(v41, 1))
                    goto LABEL_258;
                }
                else
                {
                  v42 = 0;
                }
              }
              if ((a1 & 0x8000000000000000) != 0)
                goto LABEL_241;
              if (a1 >= *(_QWORD *)(v139 + 16))
                goto LABEL_242;
              *(_DWORD *)(v130 + 4 * a1) = v42;
              if ((v5 & 0x100000000) != 0)
                v49 = v41;
              else
                v49 = v5;
              if ((v5 & 0x100000000) != 0 && (v3 & 0x100000000) == 0)
              {
                v49 = v41;
                if ((v3 & 0x80000000) != 0)
                {
                  v50 = -v41;
                  if (__OFSUB__(0, v41))
                    goto LABEL_259;
                  v46 = __OFSUB__(v50, 1);
                  v49 = v50 - 1;
                  if (v46)
                    goto LABEL_260;
                }
              }
              if (a1 >= v9[2])
                goto LABEL_243;
              *((_DWORD *)v9 + a1 + 8) = v49;
              v48 = (_QWORD *)v131;
              if (a1 >= *(_QWORD *)(v131 + 16))
                goto LABEL_244;
              if ((v3 & 0x100000000) != 0)
                v47 = 1;
              else
                v47 = v3;
LABEL_91:
              *((_DWORD *)v48 + a1 + 8) = v47;
              goto LABEL_92;
            }
            if ((_DWORD)v37 != 3 || inited != 1 || v5 != 0 || (v3 & 0xFFFFFFFFFFLL) != 0xC000000000)
              goto LABEL_275;
LABEL_48:
            v10 += 6;
            ++v32;
            if (v36 == v6)
              goto LABEL_95;
          }
          if ((v127 & 1) == 0)
          {
            if ((inited & 0x80000000) != 0)
            {
              v3 = *((_QWORD *)v135 + 2);
              v43 = mlx_array_ndim(v3);
              v44 = a1;
              if ((a1 & 0x8000000000000000) != 0)
              {
                v44 = a1 + v43;
                if (__OFADD__(a1, v43))
                  goto LABEL_265;
                if (v44 < (uint64_t)0xFFFFFFFF80000000)
                  continue;
              }
              if (v44 > 0x7FFFFFFF)
                goto LABEL_256;
              v45 = mlx_array_dim(v3, v44);
              v46 = __OFADD__((_DWORD)inited, v45);
              inited = (inited + v45);
              if (v46)
                goto LABEL_257;
            }
            if ((a1 & 0x8000000000000000) != 0)
              goto LABEL_248;
            if (a1 >= *(_QWORD *)(v139 + 16))
              goto LABEL_249;
            *(_DWORD *)(v130 + 4 * a1) = inited;
            v47 = inited + 1;
            if (__OFADD__((_DWORD)inited, 1))
              goto LABEL_250;
            if (a1 >= v9[2])
              goto LABEL_251;
            v128 = 1;
            v48 = v9;
            goto LABEL_91;
          }
          break;
        }
LABEL_92:
        v46 = __OFADD__(a1++, 1);
        if (!v46)
          goto LABEL_48;
        __break(1u);
LABEL_95:
        v11 = v124;
        swift_bridgeObjectRelease();
        v10 = v135;
        a1 = v139;
LABEL_97:
        v6 = mlx_slice(*((_QWORD *)v10 + 2), (const void *)(a1 + 32), *(_QWORD *)(a1 + 16), v9 + 4, v9[2], (const void *)(v131 + 32), *(_QWORD *)(v131 + 16), *(_QWORD *)(v123 + 16));
        if (v6)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v51 = type metadata accessor for MLXArray();
          v52 = swift_allocObject();
          *(_QWORD *)(v52 + 16) = v6;
          v53 = *(_QWORD *)(v11 + 16);
          v136 = (unsigned int *)v52;
          swift_retain();
          if (!((mlx_array_ndim(v6) < v53) | v128 & 1))
          {
            v10 = v136;
            swift_release();
            goto LABEL_129;
          }
          v131 = v51;
          v142 = (_QWORD *)MEMORY[0x24BEE4AF8];
          a1 = *(_QWORD *)(v11 + 16);
          if (a1)
          {
            swift_bridgeObjectRetain();
            v54 = 0;
            v55 = (unsigned int *)(v11 + 48);
            v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
            while (1)
            {
              v10 = (unsigned int *)*((_QWORD *)v55 - 2);
              v5 = *((_QWORD *)v55 - 1);
              v56 = *v55 | ((unint64_t)*((unsigned __int8 *)v55 + 4) << 32);
              v57 = *((unsigned __int8 *)v55 + 4) >> 6;
              if (v57 == 3)
              {
                if (v10 != (unsigned int *)1 || v5 != 0 || v56 != 0xC000000000)
                {
LABEL_118:
                  sub_24251DEA0(*((_QWORD *)v55 - 2), *((_QWORD *)v55 - 1), *v55 | ((unint64_t)*((unsigned __int8 *)v55 + 4) << 32));
                  v61 = mlx_array_ndim(v6);
                  v62 = v54;
                  if (v54 < 0)
                  {
                    v62 = v54 + v61;
                    if (__OFADD__(v54, v61))
                      goto LABEL_254;
                    if (v62 < (uint64_t)0xFFFFFFFF80000000)
                      goto LABEL_245;
                  }
                  if (v62 > 0x7FFFFFFF)
                    goto LABEL_246;
                  inited = v6;
                  v6 = mlx_array_dim(v6, v62);
                  v140 = (uint64_t)v10;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v9 = sub_24251BDB8(0, v9[2] + 1, 1, v9);
                  v3 = v9[2];
                  v63 = v9[3];
                  v10 = (unsigned int *)(v3 + 1);
                  if (v3 >= v63 >> 1)
                    v9 = sub_24251BDB8((_QWORD *)(v63 > 1), v3 + 1, 1, v9);
                  v9[2] = v10;
                  v9[v3 + 4] = (int)v6;
                  sub_24251DEB4(v140, v5, v56);
                  v142 = v9;
                  v46 = __OFADD__(v54++, 1);
                  if (v46)
                    goto LABEL_247;
                  v6 = inited;
                  goto LABEL_102;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v9 = sub_24251BDB8(0, v9[2] + 1, 1, v9);
                v3 = v9[2];
                v60 = v9[3];
                if (v3 >= v60 >> 1)
                  v9 = sub_24251BDB8((_QWORD *)(v60 > 1), v3 + 1, 1, v9);
                v9[2] = v3 + 1;
                v9[v3 + 4] = 1;
                v142 = v9;
              }
              else
              {
                if (v57 != 0 || (v128 & 1) == 0)
                  goto LABEL_118;
                v46 = __OFADD__(v54++, 1);
                if (v46)
                  goto LABEL_253;
              }
LABEL_102:
              v55 += 6;
              if (!--a1)
              {
                swift_bridgeObjectRelease();
                v64 = MLXArray.shape.getter();
                v65 = *(_QWORD *)(v64 + 16);
                if (v65 < v54)
                {
                  __break(1u);
                }
                else if ((v54 & 0x8000000000000000) == 0)
                {
                  inited = v64;
                  goto LABEL_134;
                }
                __break(1u);
LABEL_265:
                __break(1u);
LABEL_266:
                __break(1u);
                goto LABEL_267;
              }
            }
          }
          inited = MLXArray.shape.getter();
          v54 = 0;
          v65 = *(_QWORD *)(inited + 16);
LABEL_134:
          sub_242520190(inited, inited + 32, v54, (2 * v65) | 1);
          swift_bridgeObjectRelease();
          v66 = (uint64_t)v142;
          v67 = mlx_default_device();
          v68 = (uint64_t)v67;
          if (v67)
          {
            v69 = mlx_default_stream((uint64_t)v67);
            if (v69)
            {
              mlx_free(v68);
              v70 = Array<A>.asInt32.getter(v66);
              v3 = mlx_reshape(v6, (const void *)(v70 + 32), *(_QWORD *)(v66 + 16), v69);
              swift_bridgeObjectRelease();
              if (v3)
              {
                swift_bridgeObjectRelease();
                swift_release_n();
                mlx_free(v69);
                swift_bridgeObjectRelease();
                v10 = (unsigned int *)swift_allocObject();
                *((_QWORD *)v10 + 2) = v3;
                return (uint64_t)v10;
              }
              goto LABEL_272;
            }
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            v142 = 0;
            v143 = 0xE000000000000000;
            sub_24251DEA0(inited, v5, v3);
            sub_24259FF84();
            swift_bridgeObjectRelease();
            v146 = 0xD000000000000025;
            v147 = 0x80000002425E4D60;
            v142 = (_QWORD *)inited;
            v143 = v5;
            v145 = BYTE4(v3);
            v144 = v3;
            MLXArrayIndexOperation.description.getter();
            sub_24259FB70();
            swift_bridgeObjectRelease();
            result = sub_2425A00E0();
            __break(1u);
            return result;
          }
LABEL_270:
          __break(1u);
          goto LABEL_271;
        }
LABEL_269:
        __break(1u);
        goto LABEL_270;
      }
      if ((((unint64_t)*(unsigned __int8 *)(v75 + 4) << 32) & 0xC000000000) == 0x8000000000)
        goto LABEL_141;
      v76 = v74 + 1;
      if (__OFADD__(v74, 1))
        goto LABEL_232;
      ++v74;
      v75 += 24;
      if (v76 != v12)
        continue;
      break;
    }
    v74 = *(_QWORD *)(v11 + 16);
LABEL_141:
    v22 = v74;
    if (v74 != v26)
      continue;
    break;
  }
  v148 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v72 <= 0)
    goto LABEL_26;
  v77 = v11 + 32;
  v78 = 24 * v12 + 24;
  v79 = v12;
  while (((*(unsigned int *)(v11 + v78) | ((unint64_t)*(unsigned __int8 *)(v11 + v78 + 4) << 32)) & 0x4000000000) != 0)
  {
    v78 -= 24;
    if (!--v79)
    {
      LOBYTE(v13) = swift_bridgeObjectRelease();
      __break(1u);
      break;
    }
  }
  if ((uint64_t)v12 < v79)
    goto LABEL_266;
  v132 = v13;
  v126 = v77;
  v129 = (unsigned int *)v16;
  v137 = a1;
  if (v79 == 0x8000000000000000)
  {
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
    goto LABEL_269;
  }
  swift_bridgeObjectRetain();
  v3 = MEMORY[0x24BEE4AF8];
  v80 = v129;
  v141 = v79;
  v125 = v11;
  do
  {
    v5 = *((_QWORD *)v80 - 2);
    v84 = *((_QWORD *)v80 - 1);
    v85 = *v80 | ((unint64_t)*((unsigned __int8 *)v80 + 4) << 32);
    if (*((unsigned __int8 *)v80 + 4) >> 6 < 3uLL || v5 != 1 || v84 != 0 || v85 != 0xC000000000)
    {
      sub_24251DEA0(*((_QWORD *)v80 - 2), *((_QWORD *)v80 - 1), *v80 | ((unint64_t)*((unsigned __int8 *)v80 + 4) << 32));
      v142 = (_QWORD *)v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509BE8(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = (unint64_t)v142;
      }
      v82 = *(_QWORD *)(v3 + 16);
      v81 = *(_QWORD *)(v3 + 24);
      if (v82 >= v81 >> 1)
      {
        sub_242509BE8(v81 > 1, v82 + 1, 1);
        v3 = (unint64_t)v142;
      }
      *(_QWORD *)(v3 + 16) = v82 + 1;
      v83 = v3 + 24 * v82;
      *(_QWORD *)(v83 + 32) = v5;
      *(_QWORD *)(v83 + 40) = v84;
      *(_BYTE *)(v83 + 52) = BYTE4(v85);
      *(_DWORD *)(v83 + 48) = v85;
      v11 = v125;
    }
    v80 += 6;
    --v79;
  }
  while (v79);
  swift_bridgeObjectRelease();
  type metadata accessor for Stream();
  inited = swift_initStackObject();
  v89 = mlx_default_device();
  v90 = (uint64_t)v89;
  if (!v89)
    goto LABEL_273;
  v91 = mlx_default_stream((uint64_t)v89);
  v5 = v91;
  if (!v91)
    goto LABEL_274;
  *(_QWORD *)(inited + 16) = v91;
  mlx_free(v90);
  v142 = (_QWORD *)inited;
  v92 = sub_242518B4C(v137, v3, v132 & 1, (uint64_t *)&v142);
  v138 = v93;
  swift_release();
  swift_setDeallocating();
  mlx_free(v5);
  if ((v132 & 1) == 0)
  {
    v127 = v92;
    swift_bridgeObjectRetain();
    swift_retain();
    v134 = vdupq_n_s64(0x100000000uLL);
    v107 = v12;
    v108 = v129;
    v5 = v141;
    while (1)
    {
      v110 = *((unsigned __int8 *)v108 + 4);
      if (((v110 >> 6) & 1) == 0)
        goto LABEL_227;
      inited = *((_QWORD *)v108 - 2);
      v111 = *((_QWORD *)v108 - 1);
      v112 = v108;
      v113 = *v108 | ((unint64_t)*((unsigned __int8 *)v108 + 4) << 32);
      if (v110 >> 6 == 3)
      {
        v3 = (unint64_t)v148;
        if (inited == 1 && v111 == 0 && v113 == 0xC000000000)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v3 = (unint64_t)sub_24251BFC4(0, *(_QWORD *)(v3 + 16) + 1, 1, (_QWORD *)v3);
          v5 = v141;
          v117 = *(_QWORD *)(v3 + 16);
          v116 = *(_QWORD *)(v3 + 24);
          inited = v117 + 1;
          if (v117 >= v116 >> 1)
            v3 = (unint64_t)sub_24251BFC4((_QWORD *)(v116 > 1), v117 + 1, 1, (_QWORD *)v3);
          *(_QWORD *)(v3 + 16) = inited;
          v118 = v3 + 24 * v117;
          *(_OWORD *)(v118 + 32) = xmmword_2425C4B80;
          *(_BYTE *)(v118 + 52) = -64;
          *(_DWORD *)(v118 + 48) = 0;
          goto LABEL_204;
        }
      }
      else
      {
        v3 = (unint64_t)v148;
      }
      sub_24251DEA0(*((_QWORD *)v108 - 2), *((_QWORD *)v108 - 1), v113);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = (unint64_t)sub_24251BFC4(0, *(_QWORD *)(v3 + 16) + 1, 1, (_QWORD *)v3);
      v120 = *(_QWORD *)(v3 + 16);
      v119 = *(_QWORD *)(v3 + 24);
      if (v120 >= v119 >> 1)
        v3 = (unint64_t)sub_24251BFC4((_QWORD *)(v119 > 1), v120 + 1, 1, (_QWORD *)v3);
      *(_QWORD *)(v3 + 16) = v120 + 1;
      v109 = (int64x2_t *)(v3 + 24 * v120);
      v109[2] = v134;
      v109[3].i8[4] = 65;
      v109[3].i32[0] = 0;
      sub_24251DEB4(inited, v111, v113);
      v5 = v141;
LABEL_204:
      v108 = v112 + 6;
      v148 = (_QWORD *)v3;
      if (!--v107)
        goto LABEL_227;
    }
  }
  swift_retain();
  v3 = v11;
  v94 = sub_242511704(0x100000000, 0x100000000, 0x4100000000uLL, v92);
  sub_242519E98(v94);
  swift_bridgeObjectRetain();
  v133 = vdupq_n_s64(0x100000000uLL);
  inited = 65;
  v95 = v141;
  v96 = v129;
  do
  {
    v98 = *((unsigned __int8 *)v96 + 4);
    if (v98 >> 6 == 1)
    {
      v101 = v148;
      v102 = v96;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v101 = sub_24251BFC4(0, v101[2] + 1, 1, v101);
      v106 = v101[2];
      v105 = v101[3];
      v3 = v106 + 1;
      if (v106 >= v105 >> 1)
        v101 = sub_24251BFC4((_QWORD *)(v105 > 1), v106 + 1, 1, v101);
      v101[2] = v3;
      v97 = (int64x2_t *)&v101[3 * v106];
      v97[2] = v133;
      v97[3].i8[4] = 65;
      goto LABEL_181;
    }
    if (v98 >> 6 == 3)
    {
      v99 = (*v96 | ((unint64_t)*((unsigned __int8 *)v96 + 4) << 32)) == 0xC000000000
         && *((_QWORD *)v96 - 1) == 0;
      if (v99 && *((_QWORD *)v96 - 2) == 1)
      {
        v101 = v148;
        v102 = v96;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v101 = sub_24251BFC4(0, v101[2] + 1, 1, v101);
        v104 = v101[2];
        v103 = v101[3];
        v3 = v104 + 1;
        if (v104 >= v103 >> 1)
          v101 = sub_24251BFC4((_QWORD *)(v103 > 1), v104 + 1, 1, v101);
        v101[2] = v3;
        v97 = (int64x2_t *)&v101[3 * v104];
        v97[2] = (int64x2_t)xmmword_2425C4B80;
        v97[3].i8[4] = -64;
LABEL_181:
        v97[3].i32[0] = 0;
        v148 = v101;
        v96 = v102;
      }
    }
    v96 += 6;
    --v95;
  }
  while (v95);
  swift_bridgeObjectRelease();
  v10 = v138;
  v5 = v141;
  if (*(_QWORD *)(v125 + 16) < v12)
  {
    __break(1u);
LABEL_227:
    swift_bridgeObjectRelease();
    v10 = v138;
    v121 = sub_242511704(0x100000000, 0x100000000, 0x4100000000uLL, v127);
    sub_242519E98(v121);
    if (*(_QWORD *)(v125 + 16) < v12)
      goto LABEL_268;
  }
  LOBYTE(v127) = 1;
  v122 = swift_bridgeObjectRetain();
  sub_242519CD4(v122, v126, v5, (2 * v12) | 1);
  swift_release();
  v27 = (uint64_t)v148;
  if (v148[2])
    goto LABEL_28;
  swift_bridgeObjectRelease();
LABEL_129:
  swift_bridgeObjectRelease();
  return (uint64_t)v10;
}

uint64_t sub_242516008(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  mlx::core *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  int v52;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  uint64_t v55;
  uint64_t inited;
  mlx::core *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v6 = a1;
  v7 = *a4;
  v8 = mlx_array_ndim(*(_QWORD *)(a1 + 16));
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    return 0;
  v10 = 48;
  v11 = *(_QWORD *)(a2 + 16);
  do
  {
    if ((((unint64_t)*(unsigned __int8 *)(a2 + v10 + 4) << 32) & 0xC000000000) == 0x8000000000)
      return 0;
    v10 += 24;
    --v11;
  }
  while (v11);
  v70 = v7;
  v65 = sub_242511AB4((uint64_t *)&v70);
  swift_retain();
  v68 = sub_24251147C(0, v8);
  v12 = MLXArray.shape.getter();
  v13 = Array<A>.asInt32.getter(v12);
  swift_bridgeObjectRelease();
  v14 = sub_24251147C(1u, v8);
  v15 = v14;
  if (v9 != 1 || (v16 = *(unsigned __int8 *)(a2 + 52), v16 >> 6 != 1))
  {
    v28 = MLXArray.shape.getter();
    v29 = Array<A>.asInt32.getter(v28);
    swift_bridgeObjectRelease();
    v30 = sub_2425186A4(v29, a2);
    swift_bridgeObjectRelease();
    v31 = swift_bridgeObjectRetain();
    v32 = sub_24251F178(v31);
    swift_bridgeObjectRelease();
    if (!v32)
      goto LABEL_36;
    v69 = v30;
    v33 = mlx_array_ndim(*(_QWORD *)(v6 + 16));
    v34 = (char *)v68;
    v66 = v15;
    v22 = (_QWORD *)sub_24251161C(0, v33);
    v35 = mlx_array_ndim(*(_QWORD *)(v6 + 16));
    v19 = v35 - 1;
    if (__OFSUB__(v35, 1))
    {
LABEL_76:
      __break(1u);
    }
    else
    {
      v64 = v7;
      v36 = mlx_array_ndim(*(_QWORD *)(v65 + 16));
      v7 = v36 - 1;
      if (!__OFSUB__(v36, 1))
      {
        v37 = v69;
        if (v19 >= v32)
        {
          v38 = v35 + 3;
          do
          {
            v39 = v38 - 4;
            if ((v7 & 0x8000000000000000) != 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v37 = v69;
                if ((v39 & 0x8000000000000000) != 0)
                  goto LABEL_35;
              }
              else
              {
                v22 = sub_24251DE48(v22);
                v37 = v69;
                if ((v39 & 0x8000000000000000) != 0)
                {
LABEL_35:
                  __break(1u);
LABEL_36:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v42 = MLXArray.shape.getter();
                  v43 = mlx_default_device();
                  v44 = (uint64_t)v43;
                  if (v43)
                  {
                    v45 = mlx_default_stream((uint64_t)v43);
                    if (v45)
                    {
                      mlx_free(v44);
                      v46 = *(_QWORD *)(v65 + 16);
                      v47 = Array<A>.asInt32.getter(v42);
                      v48 = mlx_broadcast_to(v46, (const void *)(v47 + 32), *(_QWORD *)(v42 + 16), v45);
                      swift_bridgeObjectRelease();
                      if (v48)
                      {
                        swift_bridgeObjectRelease();
                        swift_release_n();
                        mlx_free(v45);
                        goto LABEL_71;
                      }
LABEL_93:
                      __break(1u);
LABEL_98:
                      __break(1u);
                      JUMPOUT(0x2425169B4);
                    }
LABEL_92:
                    __break(1u);
                    goto LABEL_93;
                  }
LABEL_91:
                  __break(1u);
                  goto LABEL_92;
                }
              }
              if (v39 >= v22[2])
                goto LABEL_75;
              v22[v38] = 1;
            }
            else
            {
              v40 = *(_QWORD *)(v65 + 16);
              mlx_array_ndim(v40);
              if (v7 >> 31)
              {
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
                goto LABEL_76;
              }
              v41 = mlx_array_dim(v40, v7);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v37 = v69;
                if ((v39 & 0x8000000000000000) != 0)
                  goto LABEL_73;
              }
              else
              {
                v22 = sub_24251DE48(v22);
                v37 = v69;
                if ((v39 & 0x8000000000000000) != 0)
                  goto LABEL_73;
              }
              if (v39 >= v22[2])
                goto LABEL_74;
              v22[v38] = v41;
              --v7;
            }
            --v38;
          }
          while ((uint64_t)v39 > v32);
          v19 = v38 - 4;
          v34 = (char *)v68;
        }
        v49 = *(_QWORD *)(v37 + 16);
        v67 = v6;
        if (v49)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v34 = sub_24251DDCC((uint64_t)v34);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = (uint64_t)sub_24251DDCC(v13);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_24251DDCC(v66);
          v68 = (uint64_t)v34;
          v23 = v13 + 32;
          v6 = v49 - 1;
          v26 = (char *)(v69 + 24 * v49 + 24);
          if ((unint64_t)(v49 - 1) < *(_QWORD *)(v69 + 16))
            __asm { BR              X9 }
          __break(1u);
          goto LABEL_51;
        }
LABEL_78:
        swift_bridgeObjectRelease();
        type metadata accessor for Stream();
        inited = swift_initStackObject();
        swift_bridgeObjectRetain();
        v57 = mlx_default_device();
        v58 = (uint64_t)v57;
        if (v57)
        {
          v59 = mlx_default_stream((uint64_t)v57);
          v60 = v59;
          if (v59)
          {
            *(_QWORD *)(inited + 16) = v59;
            mlx_free(v58);
            v61 = *(_QWORD *)(v65 + 16);
            v62 = Array<A>.asInt32.getter((uint64_t)v22);
            v63 = mlx_reshape(v61, (const void *)(v62 + 32), v22[2], v60);
            swift_bridgeObjectRelease();
            if (v63)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_release_n();
              v48 = (uint64_t)mlx_slice_update(*(_QWORD *)(v67 + 16), v63, (const void *)(v68 + 32), *(_QWORD *)(v68 + 16), (const void *)(v13 + 32), *(_QWORD *)(v13 + 16), (const void *)(v66 + 32), *(_QWORD *)(v66 + 16), *(_QWORD *)(v64 + 16));
              if (!v48)
                goto LABEL_98;
              mlx_free(v63);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_71;
            }
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_97;
      }
    }
    __break(1u);
    goto LABEL_78;
  }
  v4 = v14;
  v17 = (char *)v13;
  v18 = *(unsigned int *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(v6 + 16);
  mlx_array_ndim(v21);
  v22 = (_QWORD *)mlx_array_dim(v21, 0);
  v23 = v18 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v16 << 32);
  v24 = v20 & 0x100000000;
  if ((v20 & 0x100000000) != 0)
    v25 = 0;
  else
    v25 = v20;
  v26 = v17;
  if ((v23 & 0x100000000) != 0 || !v24)
    goto LABEL_52;
  if ((v23 & 0x80000000) == 0)
  {
    v25 = 0;
    goto LABEL_52;
  }
LABEL_51:
  v25 = (_DWORD)v22 - 1;
  if (__OFSUB__((_DWORD)v22, 1))
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
LABEL_52:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v68 = (uint64_t)sub_24251DDCC(v68);
  v50 = (const void *)v68;
  if (*(_QWORD *)(v68 + 16))
  {
    *(_DWORD *)(v68 + 32) = v25;
    v50 = (const void *)(v68 + 32);
    v51 = v19 & 0x100000000;
    if ((v19 & 0x100000000) != 0)
      v19 = v22;
    else
      v19 = v19;
    if ((v23 & 0x100000000) == 0)
    {
      if (v51)
      {
        v19 = (uint64_t)v22;
        if ((v23 & 0x80000000) != 0)
        {
          v52 = -(int)v22;
          if (__OFSUB__(0, (_DWORD)v22))
          {
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
          v19 = (v52 - 1);
          if (__OFSUB__(v52, 1))
          {
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
        }
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (*((_QWORD *)v26 + 2))
        goto LABEL_65;
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
  }
  else
  {
    __break(1u);
  }
  v26 = sub_24251DDCC((uint64_t)v26);
  if (!*((_QWORD *)v26 + 2))
    goto LABEL_85;
LABEL_65:
  *((_DWORD *)v26 + 8) = v19;
  v22 = v26 + 32;
  v19 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((v23 & 0x100000000) != 0)
    LODWORD(v23) = 1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_86:
    v19 = (uint64_t)sub_24251DDCC(v19);
    if (*(_QWORD *)(v19 + 16))
      goto LABEL_69;
    goto LABEL_87;
  }
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
LABEL_69:
  *(_DWORD *)(v19 + 32) = v23;
  v54 = *(_QWORD *)(v6 + 16);
  v55 = *(_QWORD *)(v65 + 16);
  swift_release();
  v48 = (uint64_t)mlx_slice_update(v54, v55, v50, *(_QWORD *)(v68 + 16), v22, *((_QWORD *)v26 + 2), (const void *)(v19 + 32), *(_QWORD *)(v19 + 16), *(_QWORD *)(v7 + 16));
  if (!v48)
    goto LABEL_98;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_71:
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v48;
  return result;
}

unint64_t sub_242516B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  mlx::core *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t inited;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;

  if (*(_QWORD *)(a2 + 16) == 1)
    __asm { BR              X10 }
  v5 = *a4;
  v6 = MLXArray.shape.getter();
  v7 = Array<A>.asInt32.getter(v6);
  swift_bridgeObjectRelease();
  v8 = sub_2425186A4(v7, a2);
  v62 = (_QWORD *)v5;
  v9 = sub_242511AB4((uint64_t *)&v62);
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_24251F178(v10);
  swift_bridgeObjectRelease();
  v58 = v11;
  if (v11)
  {
    v57 = v9;
    v61 = v5;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v8 + 16))
    {
      swift_bridgeObjectRetain();
      __asm { BR              X14 }
    }
    v63 = MEMORY[0x24BEE4AF8];
    v14 = sub_24251161C(1uLL, v11);
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
    v59 = MEMORY[0x24BEE4AF8];
    v16 = mlx_default_device();
    v17 = (uint64_t)v16;
    if (v16)
    {
      v18 = mlx_default_stream((uint64_t)v16);
      if (v18)
      {
        mlx_free(v17);
        v19 = mlx_vector_array_new();
        if (v19)
        {
          if (v15 >> 62)
          {
            swift_bridgeObjectRetain();
            v20 = sub_2425A0128();
            swift_bridgeObjectRelease();
          }
          else
          {
            v20 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
          if (v20)
          {
            v62 = (_QWORD *)MEMORY[0x24BEE4AF8];
            sub_242509AC8(0, v20 & ~(v20 >> 63), 0);
            if (v20 < 0)
            {
              __break(1u);
              JUMPOUT(0x242517EA4);
            }
            v60 = v14;
            v21 = v62;
            if ((v15 & 0xC000000000000001) != 0)
            {
              for (i = 0; i != v20; ++i)
              {
                v23 = *(_QWORD *)(MEMORY[0x2426A7C70](i, v15) + 16);
                swift_unknownObjectRelease();
                v62 = v21;
                v25 = v21[2];
                v24 = v21[3];
                if (v25 >= v24 >> 1)
                {
                  sub_242509AC8(v24 > 1, v25 + 1, 1);
                  v21 = v62;
                }
                v21[2] = v25 + 1;
                v21[v25 + 4] = v23;
              }
            }
            else
            {
              v26 = v15 + 32;
              v27 = v62[2];
              v28 = v20;
              do
              {
                v29 = *(_QWORD *)(*(_QWORD *)v26 + 16);
                v62 = v21;
                v30 = v21[3];
                if (v27 >= v30 >> 1)
                {
                  sub_242509AC8(v30 > 1, v27 + 1, 1);
                  v21 = v62;
                }
                v21[2] = v27 + 1;
                v21[v27 + 4] = v29;
                v26 += 8;
                ++v27;
                --v28;
              }
              while (v28);
            }
            v14 = v60;
          }
          mlx_vector_array_add_arrays((uint64_t)v19, v21 + 4, v20);
          swift_bridgeObjectRelease();
          v31 = mlx_broadcast_arrays((uint64_t)v19, v18);
          v32 = v31;
          if (v31)
          {
            v13 = sub_242507E64(v31);
            mlx_free(v32);
            mlx_free((uint64_t)v19);
            swift_bridgeObjectRelease();
            mlx_free(v18);
            v63 = v13;
            if ((v13 & 0xC000000000000001) != 0)
            {
              MEMORY[0x2426A7C70](0, v13);
            }
            else
            {
              if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_44;
              }
              swift_retain();
            }
            v33 = MLXArray.shape.getter();
            swift_release();
            v62 = (_QWORD *)v33;
            sub_242519B90(v59);
            v34 = (uint64_t)v62;
            v35 = MLXArray.shape.getter();
            v36 = sub_24251B178(v58, v35);
            v62 = (_QWORD *)v34;
            sub_242520190(v36, v37, v38, v39);
            swift_unknownObjectRelease();
            v40 = (uint64_t)v62;
            v41 = *(_QWORD *)(v57 + 16);
            v42 = Array<A>.asInt32.getter((uint64_t)v62);
            v43 = mlx_broadcast_to(v41, (const void *)(v42 + 32), *(_QWORD *)(v40 + 16), *(_QWORD *)(v61 + 16));
            swift_bridgeObjectRelease();
            if (v43)
            {
              swift_bridgeObjectRelease();
              swift_release_n();
              type metadata accessor for MLXArray();
              inited = swift_initStackObject();
              *(_QWORD *)(inited + 16) = v43;
              if ((v13 & 0xC000000000000001) != 0)
                MEMORY[0x2426A7C70](0, v13);
              else
                swift_retain();
              v45 = MLXArray.shape.getter();
              swift_retain();
              swift_release();
              v62 = (_QWORD *)v45;
              sub_242519B90(v14);
              v46 = (uint64_t)v62;
              v47 = MLXArray.shape.getter();
              v48 = sub_24251B178(v58, v47);
              v62 = (_QWORD *)v46;
              sub_242520190(v48, v49, v50, v51);
              swift_unknownObjectRelease();
              v52 = (uint64_t)v62;
              v53 = Array<A>.asInt32.getter((uint64_t)v62);
              v54 = mlx_reshape(v43, (const void *)(v53 + 32), *(_QWORD *)(v52 + 16), *(_QWORD *)(v61 + 16));
              swift_bridgeObjectRelease();
              if (v54)
              {
                swift_release();
                swift_setDeallocating();
                mlx_free(*(_QWORD *)(inited + 16));
                swift_bridgeObjectRelease();
                *(_QWORD *)(swift_allocObject() + 16) = v54;
                if (!(v13 >> 62))
                {
                  v55 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
                  goto LABEL_37;
                }
LABEL_44:
                swift_bridgeObjectRetain();
                v55 = sub_2425A0128();
                swift_bridgeObjectRelease();
                if (v55 < (uint64_t)0xFFFFFFFF80000000)
                {
                  __break(1u);
                  goto LABEL_46;
                }
LABEL_37:
                if (v55 <= 0x7FFFFFFF)
                {
                  if ((v55 & 0x80000000) == 0)
                  {
                    sub_24251CA20(v55 << 32);
                    return v13;
                  }
LABEL_47:
                  __break(1u);
                  JUMPOUT(0x242517E84);
                }
LABEL_46:
                __break(1u);
                goto LABEL_47;
              }
              goto LABEL_54;
            }
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_51;
  }
  swift_bridgeObjectRelease();
  v12 = mlx_broadcast_to(*(_QWORD *)(v9 + 16), (const void *)(v7 + 32), *(_QWORD *)(v7 + 16), *(_QWORD *)(v5 + 16));
  if (!v12)
  {
LABEL_55:
    __break(1u);
    JUMPOUT(0x242517EE4);
  }
  swift_bridgeObjectRelease();
  swift_release_n();
  type metadata accessor for MLXArray();
  *(_QWORD *)(swift_allocObject() + 16) = v12;
  return MEMORY[0x24BEE4AF8];
}

uint64_t (*MLXArray.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t *a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;

  a1[1] = a2;
  a1[2] = v3;
  v6 = *a3;
  a1[3] = *a3;
  v8 = v6;
  swift_retain();
  *a1 = MLXArray.subscript.getter(a2, &v8);
  return sub_2425181B8;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;

  a1[1] = a2;
  a1[2] = v3;
  v6 = *a3;
  a1[3] = *a3;
  v8 = v6;
  swift_retain();
  *a1 = MLXArray.subscript.getter(a2, &v8);
  return sub_24251860C;
}

uint64_t sub_2425181B8(uint64_t *a1, char a2)
{
  return sub_242518618(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t _s8Morpheus8MLXArrayC_6streamAcA0B5Index_pd_AA14StreamOrDeviceVtcig_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19[3];
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unsigned int v23;
  unsigned __int8 v24;
  uint64_t v25;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v25 = MEMORY[0x24BEE4AF8];
    sub_242509BE8(0, v3, 0);
    v6 = a1 + 32;
    v4 = v25;
    do
    {
      sub_24251DE5C(v6, (uint64_t)v19);
      v7 = v20;
      v8 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v22, v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      v9 = v22[0];
      v10 = v22[1];
      v11 = v24;
      v12 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509BE8(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v25;
      }
      v14 = *(_QWORD *)(v4 + 16);
      v13 = *(_QWORD *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_242509BE8(v13 > 1, v14 + 1, 1);
        v4 = v25;
      }
      *(_QWORD *)(v4 + 16) = v14 + 1;
      v15 = v4 + 24 * v14;
      *(_QWORD *)(v15 + 32) = v9;
      *(_QWORD *)(v15 + 40) = v10;
      *(_BYTE *)(v15 + 52) = (v12 | (unint64_t)(v11 << 32)) >> 32;
      *(_DWORD *)(v15 + 48) = v12;
      v6 += 40;
      --v3;
    }
    while (v3);
    v2 = v18;
  }
  v19[0] = v2;
  swift_retain();
  v16 = sub_242514B60(v4, v19);
  swift_release();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_242518348@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t *)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *a1;
  v8 = a1[1];
  swift_retain();
  v6 = a2(v5, &v8);
  result = swift_release();
  *a3 = v6;
  return result;
}

uint64_t sub_2425183B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = *a3;
  v9 = a3[1];
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = swift_retain();
  return a5(v7, v6, &v9);
}

uint64_t _s8Morpheus8MLXArrayC_6streamAcA0B5Index_pd_AA14StreamOrDeviceVtcis_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;

  v4 = a1;
  v5 = *a3;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v19 = *a3;
    v27 = MEMORY[0x24BEE4AF8];
    sub_242509BE8(0, v6, 0);
    v7 = a2 + 32;
    v8 = v27;
    do
    {
      sub_24251DE5C(v7, (uint64_t)v21);
      v9 = v22;
      v10 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v24, v9, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      v12 = v24[0];
      v11 = v24[1];
      v13 = v26;
      v14 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509BE8(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v27;
      }
      v16 = *(_QWORD *)(v8 + 16);
      v15 = *(_QWORD *)(v8 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_242509BE8(v15 > 1, v16 + 1, 1);
        v8 = v27;
      }
      *(_QWORD *)(v8 + 16) = v16 + 1;
      v17 = v8 + 24 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v11;
      *(_BYTE *)(v17 + 52) = (v14 | (unint64_t)(v13 << 32)) >> 32;
      *(_DWORD *)(v17 + 48) = v14;
      v7 += 40;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v4 = a1;
    v5 = v19;
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v21[0] = v5;
  return sub_242512FE4(v4, v8, v21);
}

uint64_t sub_24251860C(uint64_t *a1, char a2)
{
  return sub_242518618(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t sub_242518618(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *a1;
  v5 = a1[1];
  v8 = a1[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = swift_retain();
    a3(v6, v5, &v8);
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))a3)(v4, v5, &v8);
  }
}

uint64_t sub_2425186A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    goto LABEL_41;
  v5 = 0;
  v6 = (unsigned int *)(a2 + 48);
  while (*((unsigned __int8 *)v6 + 4) >> 6 < 3uLL
       || (*v6 | ((unint64_t)*((unsigned __int8 *)v6 + 4) << 32)) != 0xC000000000
       || *((_OWORD *)v6 - 1) != 0)
  {
    ++v5;
    v6 += 6;
    if (v3 == v5)
      goto LABEL_41;
  }
  if (v3 < v5)
  {
    v8 = -1;
    v9 = v5;
    v5 = *(_QWORD *)(a2 + 16);
    goto LABEL_14;
  }
  if (v3 == v5)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    return v2;
  }
  v8 = 1;
  v9 = *(_QWORD *)(a2 + 16);
LABEL_14:
  v10 = 0;
  do
  {
    v11 = __OFADD__(v10, v8);
    v10 += v8;
    if (v11)
      goto LABEL_56;
    if (v5 == v3)
      goto LABEL_57;
    v12 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_58;
    v13 = *(_QWORD *)(a2 + 16);
    if (v12 != v3)
    {
      v14 = (unsigned int *)(a2 + 72 + 24 * v5);
      v13 = v12;
      while (v13 < v3)
      {
        if (*((unsigned __int8 *)v14 + 4) >> 6 >= 3uLL
          && (*v14 | ((unint64_t)*((unsigned __int8 *)v14 + 4) << 32)) == 0xC000000000
          && *((_OWORD *)v14 - 1) == 0)
        {
          goto LABEL_15;
        }
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_55;
        ++v13;
        v14 += 6;
        if (v16 == v3)
        {
          v13 = *(_QWORD *)(a2 + 16);
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
LABEL_15:
    v5 = v13;
  }
  while (v13 != v9);
  if (!v10)
    goto LABEL_41;
  if (v10 <= 1)
  {
    v17 = 0;
    v18 = (unsigned int *)(a2 + 48);
    while (*((unsigned __int8 *)v18 + 4) >> 6 < 3uLL
         || (*v18 | ((unint64_t)*((unsigned __int8 *)v18 + 4) << 32)) != 0xC000000000
         || *((_OWORD *)v18 - 1) != 0)
    {
      v20 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_59;
      ++v17;
      v18 += 6;
      if (v20 == v3)
      {
        LOBYTE(v21) = 0;
        v17 = *(_QWORD *)(a2 + 16);
        goto LABEL_45;
      }
    }
    if (v3 < v17)
      goto LABEL_60;
    v21 = (unint64_t)v17 >> 63;
LABEL_45:
    v23 = v17 & 0x7FFFFFFFFFFFFFFFLL;
    v24 = (v17 & 0x7FFFFFFFFFFFFFFFLL) + 1;
    if (!__OFADD__(v17 & 0x7FFFFFFFFFFFFFFFLL, 1))
    {
      if (v3 < v24)
        LOBYTE(v21) = 1;
      if ((v21 & 1) == 0)
      {
        if ((v24 & 0x8000000000000000) == 0)
        {
          v25 = (2 * v17) | 1;
          v26 = (2 * v3) | 1;
          swift_bridgeObjectRetain_n();
          v27 = sub_24251F018(v2, v2 + 32, 0, v25);
          v28 = *(_QWORD *)(a1 + 16);
          v29 = swift_unknownObjectRetain();
          v30 = sub_24251F018(v29, v2 + 32, v24, v26);
          swift_bridgeObjectRelease();
          v11 = __OFSUB__(v28, v30);
          v31 = v28 - v30;
          if (!v11)
          {
            if (v31 >= v27)
            {
              swift_bridgeObjectRetain();
              v32 = sub_24251F2C0(v27, v31, a1);
              swift_bridgeObjectRelease();
              v33 = *(_QWORD *)(v32 + 16);
              v11 = __OFADD__(v33, v23);
              v34 = v33 + v23;
              if (!v11)
              {
                v36 = sub_24251BFC4(0, v34 & ~(v34 >> 63), 0, MEMORY[0x24BEE4AF8]);
                v35 = swift_unknownObjectRetain();
                sub_242519CD4(v35, v2 + 32, 0, v25);
                sub_242519E98(v32);
                sub_242519CD4(v2, v2 + 32, v24, v26);
                swift_bridgeObjectRelease();
                return (uint64_t)v36;
              }
              goto LABEL_66;
            }
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
LABEL_67:
  sub_24259FF84();
  swift_bridgeObjectRelease();
  MEMORY[0x2426A7958](v2, &type metadata for MLXArrayIndexOperation);
  sub_24259FB70();
  swift_bridgeObjectRelease();
  result = sub_2425A00E0();
  __break(1u);
  return result;
}

uint64_t MLXSlice.init(start:end:stride:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = result;
  *(_BYTE *)(a4 + 4) = BYTE4(result) & 1;
  *(_DWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 12) = BYTE4(a2) & 1;
  *(_DWORD *)(a4 + 16) = a3;
  *(_BYTE *)(a4 + 20) = BYTE4(a3) & 1;
  return result;
}

Swift::Int32 __swiftcall MLXSlice.start(_:)(Swift::Int32 a1)
{
  uint64_t v1;
  Swift::Int32 result;

  if (*(_BYTE *)(v1 + 4))
    result = 0;
  else
    result = *(_DWORD *)v1;
  if (*(_BYTE *)(v1 + 4) && (*(_BYTE *)(v1 + 20) & 1) == 0)
  {
    if ((*(_DWORD *)(v1 + 16) & 0x80000000) != 0)
    {
      result = a1 - 1;
      if (__OFSUB__(a1, 1))
        __break(1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

Swift::Int32 __swiftcall MLXSlice.end(_:)(Swift::Int32 result)
{
  uint64_t v1;
  Swift::Int32 v2;

  if (!*(_BYTE *)(v1 + 12))
    return *(_DWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 20) & 1) == 0 && (*(_DWORD *)(v1 + 16) & 0x80000000) != 0)
  {
    v2 = -result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
    }
    else
    {
      result = v2 - 1;
      if (!__OFSUB__(v2, 1))
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t MLXSlice.stride.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 20))
    return 1;
  else
    return *(unsigned int *)(v0 + 16);
}

uint64_t sub_242518B4C(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  mlx::core *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v5 = a2;
  v67 = *a4;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = sub_242511564(0, v7);
  v75 = MEMORY[0x24BEE4AF8];
  v68 = a1;
  v9 = MLXArray.shape.getter();
  v10 = Array<A>.asInt32.getter(v9);
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
    goto LABEL_59;
  }
  if ((a3 & 1) == 0)
  {
    v69 = v10;
    v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_24251F924(0, v11);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    swift_bridgeObjectRelease();
    v18 = v17 >> 1;
    v19 = (v17 >> 1) - v15;
    if (v17 >> 1 == v15)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      v66 = v8;
      v20 = 0;
      if (v15 > v18)
        v18 = v15;
      v21 = v18 - v15;
      v22 = v13 + 8 * v15;
      do
      {
        if (v21 == v20)
        {
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          JUMPOUT(0x2425198C0);
        }
        v23 = *(_QWORD *)(v22 + 8 * v20);
        swift_retain();
        v24 = MEMORY[0x24BEE4AF8];
        v25 = *(_QWORD *)(v23 + 16);
        mlx_array_ndim(v25);
        v26 = mlx_array_dim(v25, 0);
        if (v20 >= *(_QWORD *)(v24 + 16))
          goto LABEL_54;
        *(_QWORD *)(v24 + 8 * v20 + 32) = v26;
        v27 = mlx_default_device();
        v28 = (uint64_t)v27;
        if (!v27)
        {
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
          JUMPOUT(0x2425199D0);
        }
        v29 = mlx_default_stream((uint64_t)v27);
        if (!v29)
          goto LABEL_64;
        mlx_free(v28);
        v30 = *(_QWORD *)(v23 + 16);
        v31 = Array<A>.asInt32.getter(v24);
        v32 = mlx_reshape(v30, (const void *)(v31 + 32), *(_QWORD *)(v24 + 16), v29);
        swift_bridgeObjectRelease();
        if (!v32)
          goto LABEL_65;
        type metadata accessor for MLXArray();
        v33 = swift_allocObject();
        *(_QWORD *)(v33 + 16) = v32;
        swift_bridgeObjectRelease();
        mlx_free(v29);
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v75 & 0x8000000000000000) != 0
          || (v75 & 0x4000000000000000) != 0)
        {
          sub_24251DDE0(v75);
        }
        if (v20 >= *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_55;
        *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 8 * v20 + 0x20) = v33;
        swift_release();
        sub_24259FCCC();
        swift_release();
        ++v20;
      }
      while (v19 != v20);
      swift_unknownObjectRelease();
      v8 = v66;
      v7 = 0;
    }
    v10 = v69;
  }
  v34 = v75;
  swift_bridgeObjectRetain();
  v35 = mlx_vector_array_new();
  v36 = (uint64_t)v35;
  if (!v35)
  {
    __break(1u);
    goto LABEL_67;
  }
  v70 = (uint64_t)v35;
  if (v75 >> 62)
  {
    swift_bridgeObjectRetain();
    v36 = v70;
    v5 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v71 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v38 = &v71;
    sub_242509AC8(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
      __break(1u);
      __break(1u);
      v10 = (uint64_t)sub_24251DDCC(v10);
      memset_pattern16((void *)(v10 + 32), &unk_2425A2960, 4 * v7);
      goto LABEL_41;
    }
    v39 = v10;
    v37 = v71;
    if ((v34 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v5; ++i)
      {
        v41 = *(_QWORD *)(MEMORY[0x2426A7C70](i, v34) + 16);
        swift_unknownObjectRelease();
        v71 = v37;
        v43 = v37[2];
        v42 = v37[3];
        if (v43 >= v42 >> 1)
        {
          sub_242509AC8(v42 > 1, v43 + 1, 1);
          v37 = v71;
        }
        v37[2] = v43 + 1;
        v37[v43 + 4] = v41;
      }
    }
    else
    {
      v44 = v34 + 32;
      v45 = v71[2];
      v46 = v5;
      do
      {
        v47 = v8;
        v48 = *(_QWORD *)(*(_QWORD *)v44 + 16);
        v71 = v37;
        v49 = v37[3];
        if (v45 >= v49 >> 1)
        {
          sub_242509AC8(v49 > 1, v45 + 1, 1);
          v37 = v71;
        }
        v37[2] = v45 + 1;
        v37[v45 + 4] = v48;
        v44 += 8;
        ++v45;
        --v46;
        v8 = v47;
      }
      while (v46);
    }
    v7 = 0;
    v10 = v39;
    v36 = v70;
  }
  mlx_vector_array_add_arrays(v36, v37 + 4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 >> 31)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_58;
  }
  v38 = (_QWORD *)sub_24251CA20(v7 << 32);
LABEL_41:
  v50 = mlx_gather(*(_QWORD *)(v68 + 16), v36, v38 + 4, v38[2], (const void *)(v10 + 32), *(_QWORD *)(v10 + 16), *(_QWORD *)(v67 + 16));
  swift_release();
  if (!v50)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for MLXArray();
  *(_QWORD *)(swift_initStackObject() + 16) = v50;
  v51 = MLXArray.shape.getter();
  v52 = v51;
  v53 = *(_QWORD *)(v51 + 16);
  if (v53 < (uint64_t)v7)
  {
LABEL_58:
    __break(1u);
    __break(1u);
LABEL_59:
    sub_24251DEE0(v8);
LABEL_3:
    __asm { BR              X9 }
  }
  v71 = (_QWORD *)v51;
  v72 = v51 + 32;
  v54 = (2 * v53) | 1;
  v73 = 0;
  v74 = 1;
  v55 = swift_bridgeObjectRetain();
  sub_24251FEB8(v55, v52 + 32, v7, v54);
  swift_bridgeObjectRelease();
  v56 = (uint64_t)v71;
  v57 = v72;
  v58 = v73;
  v59 = v74;
  if ((v74 & 1) == 0)
  {
LABEL_44:
    v60 = sub_24251C8B4(v56, v57, v58, v59);
    goto LABEL_51;
  }
  sub_2425A0260();
  swift_unknownObjectRetain_n();
  v61 = swift_dynamicCastClass();
  if (!v61)
  {
    swift_unknownObjectRelease();
    v61 = MEMORY[0x24BEE4AF8];
  }
  v62 = *(_QWORD *)(v61 + 16);
  swift_release();
  if (__OFSUB__(v59 >> 1, v58))
  {
    __break(1u);
    goto LABEL_62;
  }
  if (v62 != (v59 >> 1) - v58)
  {
LABEL_62:
    swift_unknownObjectRelease_n();
    goto LABEL_44;
  }
  v60 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (!v60)
  {
    swift_unknownObjectRelease();
    v60 = MEMORY[0x24BEE4AF8];
  }
LABEL_51:
  swift_unknownObjectRelease();
  v63 = Array<A>.asInt32.getter(v60);
  v64 = mlx_reshape((uint64_t)v50, (const void *)(v63 + 32), *(_QWORD *)(v60 + 16), *(_QWORD *)(v67 + 16));
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_68:
    __break(1u);
    JUMPOUT(0x242519A00);
  }
  swift_setDeallocating();
  mlx_free((uint64_t)v50);
  swift_release();
  *(_QWORD *)(swift_allocObject() + 16) = v64;
  mlx_free(v70);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_242519B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24251BDB8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_242519CD4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    goto LABEL_8;
  v13 = v7[3] >> 1;
  if (v13 < v9)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v14 = v8 + v6;
      else
        v14 = v8;
      isUniquelyReferenced_nonNull_native = sub_24251BFC4(isUniquelyReferenced_nonNull_native, v14, 1, v7);
      v7 = isUniquelyReferenced_nonNull_native;
      v13 = isUniquelyReferenced_nonNull_native[3] >> 1;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v15 = v7[2];
  if (v13 - v15 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v16 = (unint64_t)&v7[3 * v15 + 4];
  v17 = a2 + 24 * a3;
  if (v17 < v16 + 24 * v6 && v16 < v17 + 24 * v6)
    goto LABEL_27;
  swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    result = swift_unknownObjectRelease();
    *(_QWORD *)v4 = v7;
    return result;
  }
  v19 = v7[2];
  v20 = __OFADD__(v19, v6);
  v21 = v19 + v6;
  if (!v20)
  {
    v7[2] = v21;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_242519E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24251BFC4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_242519FF0(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24251BB98(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251A134(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_2425A0128();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x2426A7C7C](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_24251DF30(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_24259FCCC();
  }
  __break(1u);
  return result;
}

uint64_t sub_24251A2EC(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_2425A0128();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x2426A7C7C](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_24251E134(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_24259FCCC();
  }
  __break(1u);
  return result;
}

uint64_t sub_24251A4A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24251C1E4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8A0);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251A60C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24251C30C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251A760(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_24251C540(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

Swift::Int32 __swiftcall MLXSlice.absoluteStart(_:)(Swift::Int32 a1)
{
  uint64_t v1;
  Swift::Int32 result;
  BOOL v4;
  BOOL v5;

  if (*(_BYTE *)(v1 + 4))
    result = 0;
  else
    result = *(_DWORD *)v1;
  if (*(_BYTE *)(v1 + 4))
    v4 = *(_BYTE *)(v1 + 20) == 0;
  else
    v4 = 0;
  if (v4)
  {
    if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
      return 0;
    result = a1 - 1;
    if (__OFSUB__(a1, 1))
      goto LABEL_16;
  }
  if (result < 0)
  {
    v5 = __OFADD__(result, a1);
    result += a1;
    if (v5)
    {
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

Swift::Int32 __swiftcall MLXSlice.absoluteEnd(_:)(Swift::Int32 result)
{
  uint64_t v1;
  Swift::Int32 v2;
  BOOL v3;
  Swift::Int32 v4;
  BOOL v5;

  v2 = *(_DWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 12))
  {
    v2 = result;
    v3 = *(_BYTE *)(v1 + 20) == 0;
  }
  else
  {
    v3 = 0;
  }
  if (!v3)
    goto LABEL_17;
  v2 = result;
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    goto LABEL_17;
  v4 = -result;
  if (__OFSUB__(0, result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = __OFSUB__(v4, 1);
  v2 = v4 - 1;
  if (!v5)
  {
LABEL_17:
    if ((v2 & 0x80000000) == 0)
      return v2;
    v5 = __OFADD__(v2, result);
    v2 += result;
    if (!v5)
      return v2;
    __break(1u);
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_24251A95C(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  LODWORD(v4) = a2;
  v6 = *a4;
  v18 = *a4;
  v7 = sub_242511AB4(&v18);
  v8 = MLXArray.shape.getter();
  v9 = Array<A>.asInt32.getter(v8);
  swift_bridgeObjectRelease();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_3;
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = (uint64_t)sub_24251DDCC(v9);
  v9 = result;
  if (!*(_QWORD *)(result + 16))
    goto LABEL_11;
LABEL_3:
  *(_DWORD *)(v9 + 32) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2425C4A80;
  if ((v4 & 0x80000000) == 0)
  {
    v4 = mlx_array_from_int(v4);
    if (v4)
      goto LABEL_8;
    __break(1u);
  }
  v12 = *(_QWORD *)(a1 + 16);
  mlx_array_ndim(v12);
  v13 = mlx_array_dim(v12, 0);
  v14 = __OFADD__((_DWORD)v4, v13);
  result = (v4 + v13);
  if (v14)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = mlx_array_from_int(result);
  v4 = result;
  if (result)
  {
LABEL_8:
    type metadata accessor for MLXArray();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v4;
    *(_QWORD *)(v11 + 32) = v15;
    v18 = v11;
    sub_24259FCCC();
    v16 = v18;
    result = mlx_broadcast_to(*(_QWORD *)(v7 + 16), (const void *)(v9 + 32), *(_QWORD *)(v9 + 16), *(_QWORD *)(v6 + 16));
    v17 = result;
    if (result)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MLXArray();
      *(_QWORD *)(swift_allocObject() + 16) = v17;
      swift_release();
      return v16;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_24251AB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v5 = *(_DWORD *)a2;
  v6 = *(unsigned __int8 *)(a2 + 4);
  v7 = *(unsigned int *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 20);
  v11 = *a4;
  if ((v10 & 1) == 0 && v9 != 1)
    goto LABEL_5;
  if ((v6 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 12))
      goto LABEL_5;
  }
  else
  {
    if (v5)
      v16 = 0;
    else
      v16 = *(_BYTE *)(a2 + 12);
    if ((v16 & 1) == 0)
    {
LABEL_5:
      v12 = *(_QWORD *)(a1 + 16);
      mlx_array_ndim(v12);
      result = mlx_array_dim(v12, 0);
      v14 = result;
      if (v6)
        v15 = 0;
      else
        v15 = v5;
      if ((v10 | v6 ^ 1) != 1)
      {
        if (v9 < 0)
        {
          v15 = result - 1;
          if (__OFSUB__((_DWORD)result, 1))
          {
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
        }
        else
        {
          v15 = 0;
        }
      }
      if ((v8 & 1) != 0)
      {
        if ((v10 & 1) != 0)
          goto LABEL_27;
        if ((v9 & 0x80000000) == 0)
          goto LABEL_26;
        v22 = -(int)result;
        if (__OFSUB__(0, (_DWORD)result))
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        v14 = (v22 - 1);
        if (!__OFSUB__(v22, 1))
        {
LABEL_26:
          if (v9 != 1)
          {
            if (v9)
            {
              v35 = sub_24251D03C(v15 | (unint64_t)(v14 << 32), v9);
              v36 = sub_242520430(v35, 0);
              swift_release();
              v38 = v11;
              v21 = sub_24251AF34(a1, v36, a3, &v38);
              swift_release();
              return v21;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_27:
          v38 = v11;
          v23 = sub_242511AB4(&v38);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
          result = swift_initStackObject();
          *(_OWORD *)(result + 16) = xmmword_2425C4B90;
          *(_DWORD *)(result + 32) = 1;
          if (!__OFSUB__((_DWORD)v14, v15))
          {
            v24 = result;
            *(_DWORD *)(result + 36) = v14 - v15;
            swift_retain();
            v25 = MLXArray.shape.getter();
            v26 = sub_242511268(v25, v25 + 32, *(_QWORD *)(v25 + 16) != 0, (2 * *(_QWORD *)(v25 + 16)) | 1);
            swift_bridgeObjectRelease();
            v38 = v24;
            sub_242519FF0(v26);
            result = mlx_broadcast_to(*(_QWORD *)(v23 + 16), (const void *)(v38 + 32), *(_QWORD *)(v38 + 16), *(_QWORD *)(v11 + 16));
            v27 = result;
            if (result)
            {
              swift_bridgeObjectRelease();
              swift_release_n();
              type metadata accessor for MLXArray();
              *(_QWORD *)(swift_allocObject() + 16) = v27;
              result = mlx_array_from_int(v15);
              v28 = result;
              if (result)
              {
                *(_QWORD *)(swift_initStackObject() + 16) = result;
                result = (uint64_t)mlx_default_device();
                v29 = result;
                if (result)
                {
                  result = mlx_default_stream(result);
                  v30 = result;
                  if (result)
                  {
                    mlx_free(v29);
                    v31 = Array<A>.asInt32.getter((uint64_t)&unk_251352E58);
                    v32 = mlx_reshape(v28, (const void *)(v31 + 32), 1uLL, v30);
                    swift_retain();
                    result = swift_bridgeObjectRelease();
                    if (v32)
                    {
                      v33 = swift_allocObject();
                      *(_QWORD *)(v33 + 16) = v32;
                      swift_release();
                      mlx_free(v30);
                      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
                      v34 = swift_allocObject();
                      *(_OWORD *)(v34 + 16) = xmmword_2425C4A80;
                      *(_QWORD *)(v34 + 32) = v33;
                      v38 = v34;
                      sub_24259FCCC();
                      v21 = v38;
                      swift_release();
                      return v21;
                    }
                    goto LABEL_45;
                  }
LABEL_44:
                  __break(1u);
LABEL_45:
                  __break(1u);
                  goto LABEL_46;
                }
LABEL_43:
                __break(1u);
                goto LABEL_44;
              }
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          __break(1u);
          goto LABEL_38;
        }
        __break(1u);
      }
      v14 = v7;
      if ((v10 & 1) != 0)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v38 = *a4;
  v17 = sub_242511AB4(&v38);
  v18 = MLXArray.shape.getter();
  v19 = Array<A>.asInt32.getter(v18);
  swift_bridgeObjectRelease();
  result = mlx_broadcast_to(*(_QWORD *)(v17 + 16), (const void *)(v19 + 32), *(_QWORD *)(v19 + 16), *(_QWORD *)(v11 + 16));
  v20 = result;
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for MLXArray();
    *(_QWORD *)(swift_allocObject() + 16) = v20;
    return MEMORY[0x24BEE4AF8];
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_24251AF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *a4;
  v5 = v22;
  v6 = sub_242511AB4(&v22);
  swift_retain();
  v7 = MLXArray.shape.getter();
  v8 = MLXArray.shape.getter();
  v9 = *(_QWORD *)(v8 + 16);
  v22 = v7;
  sub_242520190(v8, v8 + 32, v9 != 0, (2 * v9) | 1);
  swift_bridgeObjectRelease();
  v10 = Array<A>.asInt32.getter(v22);
  swift_bridgeObjectRelease();
  v22 = v10;
  v11 = *(_QWORD *)(v6 + 16);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  result = mlx_broadcast_to(v11, (const void *)(v10 + 32), v12, v13);
  v15 = result;
  if (!result)
    goto LABEL_10;
  swift_bridgeObjectRelease();
  swift_release_n();
  type metadata accessor for MLXArray();
  *(_QWORD *)(swift_initStackObject() + 16) = v15;
  result = mlx_array_ndim(*(_QWORD *)(a2 + 16));
  if (*(_QWORD *)(v10 + 16) < result)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (result < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_24251E4F8(result, result, 1);
  v16 = v22;
  result = (uint64_t)mlx_default_device();
  v17 = result;
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = mlx_default_stream(result);
  v18 = result;
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  mlx_free(v17);
  result = mlx_reshape(v15, (const void *)(v16 + 32), *(_QWORD *)(v16 + 16), v18);
  v19 = result;
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    mlx_free(v18);
    *(_QWORD *)(swift_allocObject() + 16) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_2425C4A80;
    *(_QWORD *)(v20 + 32) = a2;
    v21 = v20;
    sub_24259FCCC();
    swift_retain();
    return v21;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_24251B178(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (result)
      v4 = v3;
    else
      v4 = 0;
    if (v2 >= v4)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t MLXSlice.isFull.getter()
{
  int *v0;
  int v1;
  int v2;
  uint64_t result;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 4);
  if ((v0[5] & 1) != 0)
  {
    if (!v1)
      v2 = 1;
    if (v2 != 1)
      return 0;
    return *((unsigned __int8 *)v0 + 12);
  }
  result = 0;
  if (!v1)
    LOBYTE(v2) = 1;
  if (v0[4] == 1 && (v2 & 1) != 0)
    return *((unsigned __int8 *)v0 + 12);
  return result;
}

void MLXArrayIndexOperation.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_24251B24C()
{
  return sub_2425A01E8();
}

uint64_t Int.mlxArrayIndexOperation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24251BAA4(a1, 0, 0, a2);
}

void sub_24251B3D8(uint64_t a1@<X8>)
{
  sub_24251BAE8(0, 0, a1);
}

uint64_t Int32.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void sub_24251B3F8(uint64_t a1@<X8>)
{
  unsigned int *v1;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t MLXArray.mlxArrayIndexOperation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0x80;
  return swift_retain();
}

uint64_t sub_24251B424@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0x80;
  return swift_retain();
}

void MLXEllipsisIndex.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = -64;
}

void sub_24251B450(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = -64;
}

double MLXNewAxisIndex.mlxArrayIndexOperation.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_OWORD *)a1 = xmmword_2425C4B80;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = -64;
  return result;
}

double sub_24251B484@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_OWORD *)a1 = xmmword_2425C4B80;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = -64;
  return result;
}

uint64_t MLXSlice.description.getter()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 12);
  if ((*(_BYTE *)(v0 + 20) & 1) != 0 || *(_DWORD *)(v0 + 16) == 1)
  {
    if ((*(_BYTE *)(v0 + 4) & 1) == 0)
    {
      sub_242520A0C();
      sub_24259FF0C();
    }
    sub_24259FB70();
    swift_bridgeObjectRelease();
    sub_24259FB70();
    if ((v1 & 1) == 0)
    {
      sub_242520A0C();
      sub_24259FF0C();
    }
  }
  else
  {
    if ((*(_BYTE *)(v0 + 4) & 1) == 0)
    {
      sub_242520A0C();
      sub_24259FF0C();
    }
    sub_24259FB70();
    swift_bridgeObjectRelease();
    sub_24259FB70();
    if ((v1 & 1) == 0)
    {
      sub_242520A0C();
      sub_24259FF0C();
    }
    sub_24259FB70();
    swift_bridgeObjectRelease();
    sub_24259FB70();
    sub_2425A01E8();
  }
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static MLXArrayIndex<>.stride(from:to:by:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if ((a2 & 1) != 0)
  {
    result = 0;
    goto LABEL_5;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if ((a4 & 1) != 0)
  {
    LODWORD(a3) = 0;
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_16;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_9:
  if ((a6 & 1) != 0)
  {
    LODWORD(a5) = 0;
LABEL_13:
    *(_DWORD *)a7 = result;
    *(_BYTE *)(a7 + 4) = a2 & 1;
    *(_DWORD *)(a7 + 8) = a3;
    *(_BYTE *)(a7 + 12) = a4 & 1;
    *(_DWORD *)(a7 + 16) = a5;
    *(_BYTE *)(a7 + 20) = a6 & 1;
    return result;
  }
  if (a5 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_18;
  if (a5 <= 0x7FFFFFFF)
    goto LABEL_13;
LABEL_19:
  __break(1u);
  return result;
}

uint64_t stride(from:to:by:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if ((a2 & 1) != 0)
  {
    result = 0;
    goto LABEL_5;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if ((a4 & 1) != 0)
  {
    LODWORD(a3) = 0;
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_16;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_9:
  if ((a6 & 1) != 0)
  {
    LODWORD(a5) = 0;
LABEL_13:
    *(_DWORD *)a7 = result;
    *(_BYTE *)(a7 + 4) = a2 & 1;
    *(_DWORD *)(a7 + 8) = a3;
    *(_BYTE *)(a7 + 12) = a4 & 1;
    *(_DWORD *)(a7 + 16) = a5;
    *(_BYTE *)(a7 + 20) = a6 & 1;
    return result;
  }
  if (a5 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_18;
  if (a5 <= 0x7FFFFFFF)
    goto LABEL_13;
LABEL_19:
  __break(1u);
  return result;
}

void MLXSlice.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  unsigned int *v1;
  unsigned int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[4];
  v3 = 1;
  if (*((_BYTE *)v1 + 4))
    v4 = 0x100000000;
  else
    v4 = 0;
  if (*((_BYTE *)v1 + 12))
    v5 = 0x100000000;
  else
    v5 = 0;
  v6 = v5 | v1[2];
  if (!*((_BYTE *)v1 + 20))
    v3 = 0;
  *(_QWORD *)a1 = v4 | *v1;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 20) = v3 | 0x40;
}

void sub_24251B838(uint64_t a1@<X8>)
{
  unsigned int *v1;
  unsigned int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[4];
  v3 = 1;
  if (*((_BYTE *)v1 + 4))
    v4 = 0x100000000;
  else
    v4 = 0;
  if (*((_BYTE *)v1 + 12))
    v5 = 0x100000000;
  else
    v5 = 0;
  v6 = v5 | v1[2];
  if (!*((_BYTE *)v1 + 20))
    v3 = 0;
  *(_QWORD *)a1 = v4 | *v1;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 20) = v3 | 0x40;
}

void sub_24251B88C(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  if (*v1 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v2 = v1[1];
  if (*v1 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_9;
  if (v2 <= 0x7FFFFFFF)
  {
    *(_QWORD *)a1 = *v1;
    *(_QWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 65;
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t ClosedRange<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (!__OFADD__((_DWORD)a2, 1))
  {
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = (a2 + 1);
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 20) = 65;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_24251B940(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  BOOL v4;
  uint64_t v5;

  if (*v1 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v2 = v1[1];
  if (*v1 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_10;
  if (v2 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = __OFADD__((_DWORD)v2, 1);
  v5 = (v2 + 1);
  if (!v4)
  {
    *(_QWORD *)a1 = *v1;
    *(_QWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 65;
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t PartialRangeUpTo<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 20) = 65;
    return result;
  }
  __break(1u);
  return result;
}

void sub_24251B9D8(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 65;
    return;
  }
  __break(1u);
}

uint64_t PartialRangeThrough<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!__OFADD__((_DWORD)result, 1))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = (result + 1);
    *(_DWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 20) = 65;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_24251BA54(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *v1;
  if (*v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = __OFADD__((_DWORD)v2, 1);
  v4 = (v2 + 1);
  if (!v3)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 65;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t PartialRangeFrom<>.mlxArrayIndexOperation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24251BAA4(a1, 0x100000000, 0x4100000000, a2);
}

uint64_t sub_24251BAA4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = a3;
    *(_BYTE *)(a4 + 20) = BYTE4(a3);
    return result;
  }
  __break(1u);
  return result;
}

void sub_24251BADC(uint64_t a1@<X8>)
{
  sub_24251BAE8(0x100000000, 0x4100000000, a1);
}

void sub_24251BAE8(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  if (*v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (*v3 <= 0x7FFFFFFF)
  {
    *(_QWORD *)a3 = *v3;
    *(_QWORD *)(a3 + 8) = a1;
    *(_DWORD *)(a3 + 16) = a2;
    *(_BYTE *)(a3 + 20) = BYTE4(a2);
    return;
  }
  __break(1u);
}

BOOL sub_24251BB24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

char *sub_24251BB98(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_24251F748(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251BCA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC870);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24252063C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251BDB8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24251F57C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_24251BEC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7E0);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24251F664(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251BFC4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC838);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24251F830(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_24251C0E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC878);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24251F664(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251C1E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC898);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_242521028(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251C30C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC770);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24251F488(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251C41C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_242520324(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251C540(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7B8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24252054C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251C650(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC778);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_242521134(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24251C760(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7A8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2425212BC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_24251C8B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

int64_t sub_24251CA20(int64_t result)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  BOOL v4;
  int64_t v5;
  int64_t v6;
  int32x4_t *v7;
  int64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[12];

  v1 = result;
  v2 = HIDWORD(result);
  if (result < 0 != (int)result < 0)
  {
    if ((int)result >= 0)
      v3 = result;
    else
      v3 = -(int)result;
    if (result < 0)
      LODWORD(v2) = -HIDWORD(result);
    v4 = __CFADD__(v3, (_DWORD)v2);
    v5 = (v3 + v2);
    if (v4)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if ((int)result < 0)
      v6 = v5;
    else
      v6 = -v5;
    if (v6)
    {
LABEL_12:
      if (v6 <= 0)
      {
        v7 = (int32x4_t *)MEMORY[0x24BEE4AF8];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
        v7 = (int32x4_t *)swift_allocObject();
        v8 = _swift_stdlib_malloc_size(v7);
        v9 = v8 - 32;
        if (v8 < 32)
          v9 = v8 - 29;
        v7[1].i64[0] = v6;
        v7[1].i64[1] = 2 * (v9 >> 2);
      }
      result = sub_24251DA98((unint64_t)v11, v7 + 2, v6, v1);
      if (result == v6)
        return (int64_t)v7;
      __break(1u);
      goto LABEL_23;
    }
    return MEMORY[0x24BEE4AF8];
  }
  v10 = HIDWORD(result) - result;
  if (!__OFSUB__(HIDWORD(result), (_DWORD)result))
  {
    v6 = v10;
    if (v10)
      goto LABEL_12;
    return MEMORY[0x24BEE4AF8];
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_24251CB28(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251CC60(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 29;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

_QWORD *sub_24251CDCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC810);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = sub_24251DBAC((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_2425213C4();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_24251CEC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 32 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC770);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 1;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 5);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251D03C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;

  LODWORD(v3) = a1;
  v4 = HIDWORD(a1);
  result = sub_24251EF70(a1, a2);
  v6 = result;
  v7 = a2 >> 63;
  if (result > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
    v8 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v8);
    v9 = result - 32;
    if (result < 32)
      v9 = result - 29;
    v10 = v9 >> 2;
    v8[2] = v6;
    v8[3] = 2 * v10;
    v11 = v8 + 4;
    v12 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - v6;
    while (1)
    {
      v13 = (int)v3 <= (int)v4;
      if (a2 > 0)
        v13 = (int)v3 >= (int)v4;
      if (v13)
        break;
      v14 = v3;
      if (a2 < 0 == (int)v3 >= 0)
      {
        v3 = a2 + (int)v3;
        if (__OFADD__(a2, v14))
          goto LABEL_64;
        if (v3 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_66;
        if (v3 > 0x7FFFFFFF)
        {
          __break(1u);
          goto LABEL_19;
        }
      }
      else
      {
        if (a2 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_63;
        if (a2 > 0x7FFFFFFF)
          goto LABEL_65;
        if (__OFADD__((_DWORD)v3, (_DWORD)a2))
          LODWORD(v3) = v7 ^ 0x7FFFFFFF;
        else
          LODWORD(v3) = v3 + a2;
      }
      *v11++ = v14;
      if (!--v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
LABEL_19:
  if (v6 < 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
  v11 = (_DWORD *)(MEMORY[0x24BEE4AF8] + 32);
LABEL_21:
  v15 = (int)v3 <= (int)v4;
  if (a2 > 0)
    v15 = (int)v3 >= (int)v4;
  if (!v15)
  {
    v33 = v7 ^ 0x7FFFFFFF;
    while (a2 < 0 != (int)v3 >= 0)
    {
      if (a2 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_67;
      if (a2 > 0x7FFFFFFF)
        goto LABEL_69;
      LODWORD(v17) = v3 + a2;
      if (!__OFADD__((_DWORD)v3, (_DWORD)a2))
        goto LABEL_38;
      LODWORD(v17) = v33;
      if (v12)
      {
        v16 = v8;
        LODWORD(v17) = v33;
        v18 = __OFSUB__(v12--, 1);
        if (v18)
          goto LABEL_62;
        goto LABEL_54;
      }
LABEL_42:
      v19 = v8[3];
      if ((uint64_t)((v19 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_72;
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (v20 <= 1)
        v21 = 1;
      else
        v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
      v16 = (_QWORD *)swift_allocObject();
      v22 = _swift_stdlib_malloc_size(v16);
      v23 = v22 - 32;
      if (v22 < 32)
        v23 = v22 - 29;
      v24 = v23 >> 2;
      v16[2] = v21;
      v16[3] = 2 * (v23 >> 2);
      v25 = (unint64_t)(v16 + 4);
      v26 = v8[3] >> 1;
      if (v8[2])
      {
        v27 = v8 + 4;
        if (v16 != v8 || v25 >= (unint64_t)v27 + 4 * v26)
          memmove(v16 + 4, v27, 4 * v26);
        v8[2] = 0;
      }
      v11 = (_DWORD *)(v25 + 4 * v26);
      v28 = (v24 & 0x7FFFFFFFFFFFFFFFLL) - v26;
      result = swift_release();
      v18 = __OFSUB__(v28, 1);
      v12 = v28 - 1;
      if (v18)
        goto LABEL_62;
LABEL_54:
      *v11++ = v3;
      v29 = (int)v17 <= (int)v4;
      if (a2 > 0)
        v29 = (int)v17 >= (int)v4;
      LODWORD(v3) = v17;
      v8 = v16;
      if (v29)
        goto LABEL_57;
    }
    v17 = a2 + (int)v3;
    if (__OFADD__(a2, (int)v3))
      goto LABEL_68;
    if (v17 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_70;
    if (v17 > 0x7FFFFFFF)
      goto LABEL_71;
LABEL_38:
    if (v12)
    {
      v16 = v8;
      v18 = __OFSUB__(v12--, 1);
      if (v18)
        goto LABEL_62;
      goto LABEL_54;
    }
    goto LABEL_42;
  }
  v16 = v8;
LABEL_57:
  v30 = v16[3];
  if (v30 < 2)
    return (uint64_t)v16;
  v31 = v30 >> 1;
  v18 = __OFSUB__(v31, v12);
  v32 = v31 - v12;
  if (!v18)
  {
    v16[2] = v32;
    return (uint64_t)v16;
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t sub_24251D360(unint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51[2];
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  unsigned int v57;
  unsigned __int8 v58;
  uint64_t v59;

  v1 = *(_QWORD *)(a1 + 16);
  swift_retain();
  mlx_array_ndim(v1);
  v2 = mlx_array_dim(v1, 0);
  if (v2 >= 1)
  {
    v45 = v2;
    type metadata accessor for Stream();
    v3 = 0;
    v4 = 0;
    v5 = MEMORY[0x24BEE4AF8] + 32;
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
      v48 = v4;
      *(_QWORD *)(inited + 32) = v4;
      v8 = inited + 32;
      *(_QWORD *)(inited + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(inited + 64) = &protocol witness table for Int;
      v9 = swift_initStackObject();
      result = (uint64_t)mlx_default_device();
      v11 = result;
      if (!result)
        goto LABEL_38;
      result = mlx_default_stream(result);
      if (!result)
        goto LABEL_39;
      v47 = (uint64_t *)v5;
      v49 = v6;
      v50 = v3;
      *(_QWORD *)(v9 + 16) = result;
      mlx_free(v11);
      v59 = MEMORY[0x24BEE4AF8];
      sub_242509BE8(0, 1, 0);
      sub_24251DE5C(v8, (uint64_t)v51);
      v12 = v54;
      v13 = v55;
      __swift_project_boxed_opaque_existential_1(v51, v54);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v56, v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      v14 = v56[0];
      v15 = v56[1];
      v16 = v58;
      v17 = v57;
      v18 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509BE8(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v59;
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_242509BE8(v19 > 1, v20 + 1, 1);
        v18 = v59;
      }
      *(_QWORD *)(v18 + 16) = v20 + 1;
      v21 = v18 + 24 * v20;
      *(_QWORD *)(v21 + 32) = v14;
      *(_QWORD *)(v21 + 40) = v15;
      *(_BYTE *)(v21 + 52) = (v17 | (unint64_t)(v16 << 32)) >> 32;
      *(_DWORD *)(v21 + 48) = v17;
      if (v20)
      {
        v51[0] = v9;
        v22 = sub_242514FAC(a1, v18, v51);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v24 = *(_QWORD *)(v18 + 32);
        v23 = *(_QWORD *)(v18 + 40);
        v25 = *(unsigned __int8 *)(v18 + 52);
        v26 = *(unsigned int *)(v18 + 48);
        v27 = v26 | (v25 << 32);
        v51[0] = v24;
        v51[1] = v23;
        v53 = v25;
        v52 = v26;
        v56[0] = v9;
        sub_24251DEA0(v24, v23, v27);
        sub_242514C20(a1, (uint64_t)v51);
        v22 = v28;
        swift_retain();
        sub_24251DEB4(v24, v23, v27);
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      result = swift_release();
      if (v50)
      {
        v29 = v49;
        v30 = v47;
        v3 = v50 - 1;
        if (__OFSUB__(v50, 1))
          goto LABEL_35;
      }
      else
      {
        v31 = v49[3];
        if ((uint64_t)((v31 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_36;
        v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
        if (v32 <= 1)
          v33 = 1;
        else
          v33 = v32;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
        v29 = (_QWORD *)swift_allocObject();
        v34 = _swift_stdlib_malloc_size(v29);
        v35 = v34 - 32;
        if (v34 < 32)
          v35 = v34 - 25;
        v36 = v35 >> 3;
        v29[2] = v33;
        v29[3] = (2 * (v35 >> 3)) | 1;
        v37 = (unint64_t)(v29 + 4);
        v38 = v49[3] >> 1;
        if (v49[2])
        {
          v39 = v49 + 4;
          if (v29 != v49 || v37 >= (unint64_t)v39 + 8 * v38)
            memmove(v29 + 4, v39, 8 * v38);
          v49[2] = 0;
        }
        v30 = (uint64_t *)(v37 + 8 * v38);
        v40 = (v36 & 0x7FFFFFFFFFFFFFFFLL) - v38;
        result = swift_release();
        v41 = __OFSUB__(v40, 1);
        v3 = v40 - 1;
        if (v41)
        {
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
      }
      *v30 = v22;
      v5 = (uint64_t)(v30 + 1);
      v4 = v48 + 1;
      v6 = v29;
      if (v45 == v48 + 1)
      {
        result = swift_release();
        goto LABEL_31;
      }
    }
  }
  result = swift_release();
  v3 = 0;
  v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_31:
  v42 = v29[3];
  if (v42 < 2)
    return (uint64_t)v29;
  v43 = v42 >> 1;
  v41 = __OFSUB__(v43, v3);
  v44 = v43 - v3;
  if (!v41)
  {
    v29[2] = v44;
    return (uint64_t)v29;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_24251D764(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36[2];
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  unsigned int v42;
  unsigned __int8 v43;
  uint64_t v44;

  v6 = *(_QWORD *)(v3 + 16);
  mlx_array_ndim(v6);
  result = mlx_array_dim(v6, 0);
  v33 = (int)result;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_19;
  }
  if (!a3)
  {
LABEL_19:
    v8 = -1;
    goto LABEL_20;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if ((int)result >= 1)
    {
      v31 = a1;
      type metadata accessor for Stream();
      v8 = 0;
      v30 = a3;
      v32 = a3 - 1;
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
        *(_QWORD *)(inited + 32) = v8;
        v10 = inited + 32;
        *(_QWORD *)(inited + 56) = MEMORY[0x24BEE1768];
        *(_QWORD *)(inited + 64) = &protocol witness table for Int;
        v11 = swift_initStackObject();
        result = (uint64_t)mlx_default_device();
        v12 = result;
        if (!result)
          goto LABEL_24;
        result = mlx_default_stream(result);
        if (!result)
          goto LABEL_25;
        *(_QWORD *)(v11 + 16) = result;
        mlx_free(v12);
        v44 = MEMORY[0x24BEE4AF8];
        sub_242509BE8(0, 1, 0);
        sub_24251DE5C(v10, (uint64_t)v36);
        v14 = v39;
        v13 = v40;
        __swift_project_boxed_opaque_existential_1(v36, v39);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v41, v14, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        v15 = v41[0];
        v16 = v41[1];
        v17 = v43;
        v18 = v42;
        v19 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_242509BE8(0, *(_QWORD *)(v19 + 16) + 1, 1);
          v19 = v44;
        }
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_242509BE8(v20 > 1, v21 + 1, 1);
          v19 = v44;
        }
        *(_QWORD *)(v19 + 16) = v21 + 1;
        v22 = v19 + 24 * v21;
        *(_QWORD *)(v22 + 32) = v15;
        *(_QWORD *)(v22 + 40) = v16;
        *(_BYTE *)(v22 + 52) = (v18 | (unint64_t)(v17 << 32)) >> 32;
        *(_DWORD *)(v22 + 48) = v18;
        if (v21)
        {
          v36[0] = v11;
          v23 = sub_242514FAC(v34, v19, v36);
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v25 = *(_QWORD *)(v19 + 32);
          v24 = *(_QWORD *)(v19 + 40);
          v26 = *(unsigned __int8 *)(v19 + 52);
          v27 = *(unsigned int *)(v19 + 48);
          v28 = v27 | (v26 << 32);
          v36[0] = v25;
          v36[1] = v24;
          v38 = v26;
          v37 = v27;
          v41[0] = v11;
          sub_24251DEA0(v25, v24, v28);
          sub_242514C20(v34, (uint64_t)v36);
          v23 = v29;
          swift_retain();
          sub_24251DEB4(v25, v24, v28);
          swift_bridgeObjectRelease();
          swift_release_n();
        }
        swift_release();
        *(_QWORD *)(a2 + 8 * v8) = v23;
        if (v32 == v8)
        {
          a3 = v30;
          a1 = v31;
          goto LABEL_20;
        }
        if (v33 == ++v8)
        {
          a3 = v33;
          v8 = v33;
          a1 = v31;
          goto LABEL_20;
        }
      }
    }
    v8 = 0;
    a3 = 0;
LABEL_20:
    *a1 = v8;
    a1[1] = v33;
    a1[2] = v34;
    return a3;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_24251DA98(unint64_t result, int32x4_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int32 v8;
  int32x4_t *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int32x4_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  int32x4_t v17;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    LODWORD(v5) = a4;
LABEL_7:
    *(_QWORD *)result = a4;
    *(_DWORD *)(result + 8) = v5;
    return a3;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((_DWORD)a4 == HIDWORD(a4))
    {
LABEL_5:
      a3 = 0;
      goto LABEL_6;
    }
    if (SHIDWORD(a4) >= (int)a4)
    {
      if ((int)a4 >= SHIDWORD(a4))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        v5 = HIDWORD(a4);
        a3 = v4;
      }
      else
      {
        v6 = (HIDWORD(a4) + ~(_DWORD)a4);
        v4 = v6 + 1;
        if (v6 >= a3 - 1)
          v6 = a3 - 1;
        if (v6 >= 8)
        {
          v11 = v6 + 1;
          v12 = v11 & 7;
          if ((v11 & 7) == 0)
            v12 = 8;
          v13 = v11 - v12;
          v7 = v11 - v12 + 1;
          v8 = a4 + v13;
          v9 = (int32x4_t *)((char *)a2 + 4 * v13);
          v14 = vaddq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2425C4B70);
          v15 = a2 + 1;
          v16.i64[0] = 0x400000004;
          v16.i64[1] = 0x400000004;
          v17.i64[0] = 0x800000008;
          v17.i64[1] = 0x800000008;
          do
          {
            v15[-1] = v14;
            *v15 = vaddq_s32(v14, v16);
            v14 = vaddq_s32(v14, v17);
            v15 += 2;
            v13 -= 8;
          }
          while (v13);
          v10 = HIDWORD(a4) - 1;
        }
        else
        {
          v7 = 1;
          v8 = a4;
          v9 = a2;
          v10 = HIDWORD(a4) - 1;
        }
        while (1)
        {
          LODWORD(v5) = v8 + 1;
          v9->i32[0] = v8;
          if (a3 == v7)
            break;
          if (v10 == v8)
            goto LABEL_23;
          ++v7;
          v9 = (int32x4_t *)((char *)v9 + 4);
          ++v8;
          if ((int)v5 >= SHIDWORD(a4))
            goto LABEL_22;
        }
      }
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24251DBAC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v21;
    v11[1] = v22;
    v11[2] = v23;
    if (v13 == v10)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_24251DDCC(uint64_t a1)
{
  return sub_24251BB98(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_24251DDE0(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x2426A7C7CLL);
}

_QWORD *sub_24251DE48(_QWORD *a1)
{
  return sub_24251BDB8(0, a1[2], 0, a1);
}

uint64_t sub_24251DE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24251DEA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (((a3 >> 38) & 3) == 2)
    return swift_retain();
  return result;
}

uint64_t sub_24251DEB4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (((a3 >> 38) & 3) == 2)
    return swift_release();
  return result;
}

uint64_t sub_24251DEC8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

char *sub_24251DEE0(uint64_t a1)
{
  return sub_24251BEC8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_24251DEF4(_QWORD *a1)
{
  return sub_24251C30C(0, a1[2], 0, a1);
}

_QWORD *sub_24251DF08(_QWORD *a1)
{
  return sub_24251C540(0, a1[2], 0, a1);
}

_QWORD *sub_24251DF1C(_QWORD *a1)
{
  return sub_24251C760(0, a1[2], 0, a1);
}

uint64_t sub_24251DF30(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_2425A0128();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_2425A0128();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_2425213CC(&qword_2571FC890, &qword_2571FC880);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC880);
          v12 = sub_24251E390(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_24252123C();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251E134(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_2425A0128();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_2425A0128();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_2425213CC(&qword_2571FC8B0, &qword_2571FC8A8);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8A8);
          v12 = sub_24251E338(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for MLXArray();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t (*sub_24251E338(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_24251E410(v6, a2, a3);
  return sub_24251E38C;
}

uint64_t (*sub_24251E390(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_24251E484(v6, a2, a3);
  return sub_24251E38C;
}

void sub_24251E3E4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_24251E410(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x2426A7C70](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_24251E47C;
  }
  __break(1u);
  return result;
}

uint64_t sub_24251E47C()
{
  return swift_release();
}

void (*sub_24251E484(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x2426A7C70](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_24251E4F0;
  }
  __break(1u);
  return result;
}

void sub_24251E4F0(id *a1)
{

}

char *sub_24251E4F8(uint64_t a1, int64_t a2, int a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = sub_24251BB98(result, v13, 1, v5);
    v5 = result;
  }
  v14 = &v5[4 * a1 + 32];
  if (!v9)
    goto LABEL_20;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v14 + 4;
    v18 = &v5[4 * a2 + 32];
    if (v14 + 4 != v18 || result >= &v18[4 * v17])
      result = (char *)memmove(result, v18, 4 * v17);
    v19 = *((_QWORD *)v5 + 2);
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      *((_QWORD *)v5 + 2) = v20;
LABEL_20:
      *(_DWORD *)v14 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251E658(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v1 + 8);
  sub_2425A0260();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (_QWORD)v9 + 32)
    goto LABEL_31;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v7 = *(_QWORD *)(v1 + 16);
    v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7)
      break;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v5 >= v7)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v19 = *(_QWORD *)(result + 24);
    result = swift_release();
    v20 = (v19 >> 1) - (_QWORD)v9;
    v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21)
      goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 25;
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v7)
    goto LABEL_30;
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)(v4 + 4);
    v15 = (_QWORD *)(v11 + 8 * v7);
    if (v15 >= &v4[v10 + 4] || v14 >= (unint64_t)&v15[v10])
    {
      memcpy(v4 + 4, v15, 8 * v10);
      if (!__OFSUB__(0, v7))
      {
        v17 = v4[2];
        v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v14 - 8 * v7;
              *(_QWORD *)(v1 + 16) = v7;
              *(_QWORD *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251E8C8(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *__dst;

  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v30 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v30 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = v16;
  __dst = (char *)(v10 + 32);
  v18 = sub_24251EE04(v8);
  v37 = (char *)(v10 + 32 + 8 * a2 + 8 * a3);
  if (v18)
  {
    v36 = a4;
    if (a2 < 0)
      goto LABEL_46;
    v19 = v18;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 8 * v20);
    v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 8 * a2);
    v36(v10 + 32 + 8 * a2, a3);
    if (v14 < 0)
      goto LABEL_46;
    v23 = &v22[8 * v38];
    if (v37 != v23 || v37 >= &v23[8 * v14])
      memmove(v37, v23, 8 * v14);
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v34 = *(_QWORD *)(v10 + 16);
      v30 = __OFADD__(v20, v34);
      v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *v4 = v10;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v25 = (void (*)(char *, uint64_t))a4;
  v20 = v4[2];
  v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 8 * v20), 8 * a2);
  v25(&__dst[8 * a2], a3);
  v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v29 = v4[3] >> 1;
  v30 = __OFSUB__(v29, v28);
  v31 = v29 < v28;
  v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 8 * v28), 8 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251EB38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  sub_2425A0260();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)(result + 16);
  v5 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v5)
    goto LABEL_13;
  *(_QWORD *)(result + 16) = v9;
  result = swift_release();
  v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t sub_24251EBEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  sub_2425A0260();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 25;
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return (uint64_t)v27;
}

uint64_t (*sub_24251EDF0())()
{
  return nullsub_1;
}

uint64_t sub_24251EE04(uint64_t a1)
{
  _QWORD *v1;
  int64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  sub_2425A0260();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    sub_2425A0260();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x24BEE4AF8];
    }
    v16 = v8 + 8 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 25;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      sub_24251FABC(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_24251EF70(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  BOOL v6;

  result = 0;
  v4 = HIDWORD(a1);
  while (1)
  {
    v6 = (int)a1 <= (int)v4;
    if (a2 > 0)
      v6 = (int)a1 >= (int)v4;
    if (v6)
      return result;
    if (a2 < 0 == (int)a1 >= 0)
    {
      v5 = __OFADD__(a2, (int)a1);
      a1 = a2 + (int)a1;
      if (v5)
        goto LABEL_20;
      if (a1 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_21;
      if (a1 > 0x7FFFFFFF)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      if (a2 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_18;
      if (a2 > 0x7FFFFFFF)
        goto LABEL_19;
      v5 = __OFADD__((_DWORD)a1, (_DWORD)a2);
      LODWORD(a1) = a1 + a2;
      if (v5)
        LODWORD(a1) = (a2 >> 63) ^ 0x7FFFFFFF;
    }
    v5 = __OFADD__(result++, 1);
    if (v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
  }
}

uint64_t sub_24251F018(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v18;
  uint64_t result;

  v4 = (a4 >> 1) - a3;
  if (a4 >> 1 == a3)
  {
    v5 = MEMORY[0x24BEE4AF8];
LABEL_22:
    v18 = *(_QWORD *)(v5 + 16);
    swift_release();
    return v18;
  }
  if ((uint64_t)(a4 >> 1) > a3)
  {
    swift_unknownObjectRetain();
    v8 = (unsigned int *)(a2 + 24 * a3 + 16);
    v5 = MEMORY[0x24BEE4AF8];
    do
    {
      v12 = *((_QWORD *)v8 - 2);
      v13 = *((_QWORD *)v8 - 1);
      v14 = *v8 | ((unint64_t)*((unsigned __int8 *)v8 + 4) << 32);
      if (*((unsigned __int8 *)v8 + 4) >> 6 < 3uLL || v12 != 1 || v13 != 0 || v14 != 0xC000000000)
      {
        sub_24251DEA0(*((_QWORD *)v8 - 2), *((_QWORD *)v8 - 1), *v8 | ((unint64_t)*((unsigned __int8 *)v8 + 4) << 32));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_242509BE8(0, *(_QWORD *)(v5 + 16) + 1, 1);
        v10 = *(_QWORD *)(v5 + 16);
        v9 = *(_QWORD *)(v5 + 24);
        if (v10 >= v9 >> 1)
          sub_242509BE8(v9 > 1, v10 + 1, 1);
        *(_QWORD *)(v5 + 16) = v10 + 1;
        v11 = v5 + 24 * v10;
        *(_QWORD *)(v11 + 32) = v12;
        *(_QWORD *)(v11 + 40) = v13;
        *(_BYTE *)(v11 + 52) = BYTE4(v14);
        *(_DWORD *)(v11 + 48) = v14;
      }
      v8 += 6;
      --v4;
    }
    while (v4);
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_24251F178(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)(swift_bridgeObjectRetain() + 48);
    v3 = MEMORY[0x24BEE4AF8];
    do
    {
      v7 = *((_QWORD *)v2 - 2);
      v8 = *((_QWORD *)v2 - 1);
      v9 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
      if (*((unsigned __int8 *)v2 + 4) >> 6 < 3uLL || v7 != 1 || v8 != 0 || v9 != 0xC000000000)
      {
        sub_24251DEA0(*((_QWORD *)v2 - 2), *((_QWORD *)v2 - 1), *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_242509BE8(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v5 = *(_QWORD *)(v3 + 16);
        v4 = *(_QWORD *)(v3 + 24);
        if (v5 >= v4 >> 1)
          sub_242509BE8(v4 > 1, v5 + 1, 1);
        *(_QWORD *)(v3 + 16) = v5 + 1;
        v6 = v3 + 24 * v5;
        *(_QWORD *)(v6 + 32) = v7;
        *(_QWORD *)(v6 + 40) = v8;
        *(_BYTE *)(v6 + 52) = BYTE4(v9);
        *(_DWORD *)(v6 + 48) = v9;
      }
      v2 += 6;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  v13 = *(_QWORD *)(v3 + 16);
  swift_release();
  return v13;
}

uint64_t sub_24251F2C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_16;
  v4 = result;
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    result = sub_242509BE8(0, v3 & ~(v3 >> 63), 0);
    if (a2 < v4 || v3 < 0)
      goto LABEL_17;
    result = v14;
    v7 = *(_QWORD *)(a3 + 16);
    if (v7 <= v4)
      v7 = v4;
    v8 = v7 - v4;
    v9 = (unsigned int *)(a3 + 4 * v4 + 32);
    while ((v4 & 0x8000000000000000) == 0)
    {
      if (!v8)
        goto LABEL_15;
      v10 = *v9;
      v15 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        sub_242509BE8(v11 > 1, v12 + 1, 1);
        result = v15;
      }
      *(_QWORD *)(result + 16) = v12 + 1;
      v13 = result + 24 * v12;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = v10;
      *(_BYTE *)(v13 + 52) = 64;
      *(_DWORD *)(v13 + 48) = 1;
      --v8;
      ++v9;
      if (!--v3)
        return result;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

BOOL _s8Morpheus8MLXSliceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v5;

  v2 = *(_BYTE *)(a2 + 4);
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 4))
      return 0;
  }
  else
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 12))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
      v3 = *(_BYTE *)(a2 + 12);
    else
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
      v5 = *(_BYTE *)(a2 + 20);
    else
      v5 = 1;
    return (v5 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 20) & 1) != 0;
}

uint64_t sub_24251F488(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

char *sub_24251F57C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_2425A0164();
  __break(1u);
  return result;
}

char *sub_24251F664(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_2425A0164();
  __break(1u);
  return result;
}

char *sub_24251F748(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251F830(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24251F924(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  v5 = sub_2425A0128();
  result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    swift_bridgeObjectRetain();
    v9 = sub_2425A0128();
    result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    v8 = sub_2425A0128();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    type metadata accessor for MLXArray();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      sub_24259FFC0();
      v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    v12 = sub_2425A0134();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v12;
}

unint64_t sub_24251FABC(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_14;
  v7 = *v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = __OFSUB__(v8, a2);
  v10 = v8 - a2;
  if (v9)
    goto LABEL_18;
  if (v10 < 0)
  {
LABEL_21:
    result = sub_2425A0164();
    __break(1u);
    return result;
  }
  result = v7 + 32 + 8 * result + 8 * a3;
  v11 = (const void *)(v7 + 32 + 8 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 8 * v10)
    result = (unint64_t)memmove((void *)result, v11, 8 * v10);
  v13 = *(_QWORD *)(v7 + 16);
  v9 = __OFADD__(v13, v6);
  v14 = v13 + v6;
  if (v9)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

_QWORD *sub_24251FBAC(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1[2];
  v3 = v1[3];
  v4 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
    goto LABEL_48;
  v5 = result[4];
  v35 = result[3] >> 1;
  if (v5 == v35)
    return result;
  v6 = result[2];
  if (v5 < v6 || v5 >= v35)
    goto LABEL_49;
  v8 = v5 + 1;
  v9 = *(_QWORD *)(result[1] + 8 * v5);
  v28 = result[1];
  v29 = result[2];
  v30 = v1;
  while (!__OFADD__(v4, 1))
  {
    v36 = sub_24251EBEC(v4, v4 + 1, *v1, v1[1], v2, v3);
    v10 = sub_24251EDF0();
    sub_24251E8C8(&v36, v4, 0, (void (*)(uint64_t, uint64_t))v10);
    swift_release();
    result = (_QWORD *)swift_release();
    v2 = v1[2];
    v3 = v1[3];
    v11 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2))
      goto LABEL_43;
    v31 = v4 + 1;
    v32 = v3 >> 1;
    v12 = v1[1];
    if ((v3 & 1) != 0)
    {
      v33 = v4;
      v13 = v1[2];
      sub_2425A0260();
      swift_unknownObjectRetain();
      v14 = swift_dynamicCastClass();
      if (!v14)
      {
        swift_unknownObjectRelease();
        v14 = MEMORY[0x24BEE4AF8];
      }
      v15 = *(_QWORD *)(v14 + 16);
      if (v12 + 8 * v13 + 8 * v11 == v14 + 8 * v15 + 32)
      {
        v17 = *(_QWORD *)(v14 + 24);
        result = (_QWORD *)swift_release();
        v18 = (v17 >> 1) - v15;
        v19 = __OFADD__(v11, v18);
        v16 = v11 + v18;
        if (v19)
          goto LABEL_47;
        v6 = v29;
      }
      else
      {
        result = (_QWORD *)swift_release();
        v16 = v11;
      }
      v2 = v13;
      v4 = v33;
      if (v33 >= v16)
      {
LABEL_32:
        v20 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      v16 = (v3 >> 1) - v2;
      if (v4 >= v11)
        goto LABEL_32;
    }
    *(_QWORD *)(v12 + 8 * v2 + 8 * v4) = v9;
    if (v8 != v35)
    {
      v21 = 0;
      v22 = ~v4 + v16;
      while (v8 >= v6 && v8 + v21 < v35)
      {
        v9 = *(_QWORD *)(v28 + 8 * v8 + 8 * v21);
        v20 = v22 != v21;
        if (v22 == v21)
        {
          v8 += v21 + 1;
          v4 = v16;
          goto LABEL_33;
        }
        *(_QWORD *)(v12 + 8 * v4 + 8 * v2 + 8 + 8 * v21++) = v9;
        if (!(v8 - v35 + v21))
        {
          v9 = 0;
          v4 = v31 + v21;
          v8 = v35;
          goto LABEL_33;
        }
      }
      goto LABEL_41;
    }
    v9 = 0;
    v20 = 1;
    v4 = v31;
    v8 = v35;
LABEL_33:
    v23 = v4 - v11;
    if (__OFSUB__(v4, v11))
      goto LABEL_44;
    v1 = v30;
    if (v23)
    {
      v34 = v4;
      v24 = v2;
      sub_2425A0260();
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v25 = result[2];
      v19 = __OFADD__(v25, v23);
      v26 = v25 + v23;
      if (v19)
        goto LABEL_45;
      result[2] = v26;
      result = (_QWORD *)swift_release();
      v27 = v32 + v23;
      if (__OFADD__(v32, v23))
        goto LABEL_46;
      if ((v27 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        break;
      }
      v3 = v3 & 1 | (2 * v27);
      v30[3] = v3;
      v6 = v29;
      v2 = v24;
      v4 = v34;
    }
    if (v20)
      return result;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

_QWORD *sub_24251FEB8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  _QWORD v36[5];

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v15 = v9;
    goto LABEL_10;
  }
  v12 = v4[1];
  sub_2425A0260();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x24BEE4AF8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(v13 + 24);
  swift_release();
  v17 = (v16 >> 1) - v14;
  v18 = __OFADD__(v9, v17);
  v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v20 = 2 * v15;
    if (v20 > v19)
      v19 = v20;
  }
  result = (_QWORD *)sub_24251E658(v19);
  v23 = v4[2];
  v22 = v4[3];
  v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23))
    goto LABEL_40;
  v25 = (char *)(v4[1] + 8 * v23 + 8 * v24);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    v28 = v24;
    goto LABEL_23;
  }
  sub_2425A0260();
  swift_unknownObjectRetain();
  v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (v25 != (char *)(v26 + 8 * v27 + 32))
  {
    result = (_QWORD *)swift_release();
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v26 + 24);
  result = (_QWORD *)swift_release();
  v30 = (v29 >> 1) - v27;
  v18 = __OFADD__(v24, v30);
  v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
    goto LABEL_48;
  v32 = (char *)(a2 + 8 * a3);
  v33 = 8 * v6;
  if (v32 < &v25[8 * v6] && v25 < &v32[v33])
    goto LABEL_48;
  result = memcpy(v25, v32, v33);
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      result = (_QWORD *)sub_2425A0164();
      __break(1u);
      return result;
    }
    result = (_QWORD *)sub_24251EB38(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v36[0] = a1;
    v36[1] = a2;
    v36[2] = a3;
    v36[3] = a4;
    v36[4] = v5;
    return sub_24251FBAC(v36);
  }
  return result;
}

_QWORD *sub_242520190(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_24251BDB8(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)&v7[v14 + 4];
  v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6])
    goto LABEL_27;
  result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_242520324(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC850);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_242520430(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = (uint64_t *)(a2 + 32);
      v6 = 1;
      while (1)
      {
        v7 = *v5++;
        v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
          break;
        v6 = v8;
        if (!--v4)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_14;
    }
    v8 = 1;
LABEL_9:
    v9 = a2;
    if (v8 != v3)
      goto LABEL_15;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_2425C4B60;
    *(_QWORD *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  v10 = Array<A>.asInt32.getter(v9);
  v11 = *(_QWORD *)(v9 + 16);
  result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = mlx_array_from_data((unsigned __int8 *)(v2 + 32), (char *)(v10 + 32), v11, 4);
  result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_24252054C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24252063C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_24252072C(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_24251C540(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

char *sub_242520894(uint64_t a1, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  char *result;
  int64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v12 = v6 + v11;
  if (__OFADD__(v6, v11))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v12)
      v14 = v6 + v11;
    else
      v14 = v6;
    result = sub_24251BB98(result, v14, 1, v5);
    v5 = result;
  }
  v15 = &v5[4 * a1 + 32];
  if (!v11)
    goto LABEL_20;
  v16 = *((_QWORD *)v5 + 2);
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_28;
  if (v18 < 0)
  {
LABEL_30:
    result = (char *)sub_2425A0164();
    __break(1u);
    return result;
  }
  result = &v15[4 * v10];
  v19 = &v5[4 * a2 + 32];
  if (result != v19 || result >= &v19[4 * v18])
    result = (char *)memmove(result, v19, 4 * v18);
  v20 = *((_QWORD *)v5 + 2);
  v17 = __OFADD__(v20, v11);
  v21 = v20 + v11;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *((_QWORD *)v5 + 2) = v21;
LABEL_20:
  if (v10)
    result = (char *)memcpy(v15, (const void *)(a3 + 32), 4 * v10);
  *v3 = v5;
  return result;
}

unint64_t sub_242520A0C()
{
  unint64_t result;

  result = qword_2571FC858;
  if (!qword_2571FC858)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE3FC8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&qword_2571FC858);
  }
  return result;
}

uint64_t sub_242520A50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_242520A68()
{
  return 0;
}

uint64_t sub_242520A80()
{
  return 0;
}

uint64_t sub_242520A98()
{
  return 0;
}

uint64_t sub_242520AA8@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_242518348(a1, MLXArray.subscript.getter, a2);
}

uint64_t sub_242520AC4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2425183B0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t sub_242520AE0()
{
  return 0;
}

uint64_t sub_242520AF0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_242518348(a1, (uint64_t (*)(uint64_t, uint64_t *))MLXArray.subscript.getter, a2);
}

uint64_t sub_242520B0C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2425183B0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t sub_242520B28()
{
  return 0;
}

uint64_t destroy for MLXArrayIndexOperation(uint64_t a1)
{
  return sub_24251DEB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32));
}

uint64_t _s8Morpheus22MLXArrayIndexOperationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 20);
  v6 = *(unsigned int *)(a2 + 16);
  sub_24251DEA0(*(_QWORD *)a2, v4, v6 | (v5 << 32));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t assignWithCopy for MLXArrayIndexOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 20);
  v6 = *(unsigned int *)(a2 + 16);
  sub_24251DEA0(*(_QWORD *)a2, v4, v6 | (v5 << 32));
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 20) = v5;
  sub_24251DEB4(v7, v8, v9);
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MLXArrayIndexOperation(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_BYTE *)(a2 + 20);
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 20) = v3;
  sub_24251DEB4(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLXArrayIndexOperation(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 21))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 8) >> 29) & 0xFFFFFFF0 | (*(_QWORD *)a1 >> 60);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for MLXArrayIndexOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (unint64_t)-a2 << 60;
      *(_QWORD *)(result + 8) = ((unint64_t)-a2 << 29) & 0x1FFFFFFE00000000;
      *(_BYTE *)(result + 20) = 0;
      *(_DWORD *)(result + 16) = 0;
      return result;
    }
    *(_BYTE *)(result + 21) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_242520D3C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 20) >> 6;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_242520D58(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  unint64_t v3;

  v2 = *(_DWORD *)(a1 + 16);
  result = a1 + 16;
  v3 = v2 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
  *(_DWORD *)result = v2;
  *(_BYTE *)(result + 4) = BYTE4(v3) & 0x3F;
  return result;
}

int8x16_t sub_242520D74(int8x16_t *a1, uint64_t a2)
{
  __int32 v2;
  unint64_t v3;
  int8x16_t result;

  if (a2 < 3)
  {
    v2 = a1[1].i32[0];
    v3 = (a2 << 38) | ((unint64_t)(a1[1].i8[4] & 1) << 32);
    result = vandq_s8(*a1, (int8x16_t)xmmword_2425C4BA0);
    *a1 = result;
    a1[1].i32[0] = v2;
    a1[1].i8[4] = BYTE4(v3);
  }
  else
  {
    a1->i64[0] = (a2 - 3);
    a1->i64[1] = 0;
    a1[1].i32[0] = 0;
    a1[1].i8[4] = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLXArrayIndexOperation()
{
  return &type metadata for MLXArrayIndexOperation;
}

uint64_t dispatch thunk of MLXArrayIndex.mlxArrayIndexOperation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for MLXEllipsisIndex()
{
  return &type metadata for MLXEllipsisIndex;
}

ValueMetadata *type metadata accessor for MLXNewAxisIndex()
{
  return &type metadata for MLXNewAxisIndex;
}

__n128 __swift_memcpy21_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MLXSlice(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLXSlice(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MLXSlice()
{
  return &type metadata for MLXSlice;
}

unint64_t sub_242520E7C()
{
  unint64_t result;

  result = qword_2571FC860;
  if (!qword_2571FC860)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C4E44, &_s16MLXArrayIteratorVN);
    atomic_store(result, (unint64_t *)&qword_2571FC860);
  }
  return result;
}

uint64_t _s16MLXArrayIteratorVwCP(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t _s16MLXArrayIteratorVwxx()
{
  return swift_release();
}

_QWORD *_s16MLXArrayIteratorVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s16MLXArrayIteratorVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t _s16MLXArrayIteratorVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s16MLXArrayIteratorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s16MLXArrayIteratorVMa()
{
  return &_s16MLXArrayIteratorVN;
}

uint64_t sub_242521028(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8A0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_242521134(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC780);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

unint64_t sub_24252123C()
{
  unint64_t result;

  result = qword_2571FC888;
  if (!qword_2571FC888)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2571FC888);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426A87D4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2425212BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t sub_2425213C4()
{
  return swift_release();
}

uint64_t sub_2425213CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Int.mod(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;

  if (a2 == (int)a2)
  {
    v2 = result;
    result = mlx_array_from_int(a2);
    v3 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v3;
      sub_242588564(4, inited, v2);
      swift_setDeallocating();
      return mlx_free(v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2425214D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = *v1;
  if (*v1 == (int)*v1)
  {
    result = mlx_array_from_int(result);
    v4 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v4;
      sub_242588564(4, inited, a1);
      swift_setDeallocating();
      return mlx_free(v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Int32.mod(_:)(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(4, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242521644(uint64_t a1)
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(4, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t UInt32.mod(_:)(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(4, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_2425217E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x2425217ECLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_242521804(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = *v1;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(4, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_2425218F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x2425218FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t Float.mod(_:)(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(4, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2425219C4(uint64_t a1)
{
  float *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(4, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Double.mod(_:)(uint64_t a1, double a2)
{
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = a2;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(4, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242521B2C(uint64_t a1)
{
  double *v1;
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = *v1;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(4, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.mod(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v5 = *v2;
  v12 = 7;
  result = (uint64_t)sub_24256BFA4(a1, &v12);
  if (!v3)
  {
    v7 = result;
    result = (uint64_t)mlx_default_device();
    v8 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v9 = result;
      if (result)
      {
        mlx_free(v8);
        result = (uint64_t)mlx_remainder(v2[2], *(_QWORD *)(v7 + 16), v9);
        v10 = result;
        if (result)
        {
          mlx_free(v9);
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = v10;
          a2[3] = v5;
          result = swift_release();
          *a2 = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_242521CC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLXArray.mod(_:)(a1, a2);
}

uint64_t dispatch thunk of Modulable.mod(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void sub_242521D04()
{
  Array.len()();
}

Swift::Int sub_242521D18()
{
  return Dictionary.len()();
}

Swift::Int sub_242521D30()
{
  return SharedMutableArray.len()();
}

Swift::Int sub_242521D54()
{
  return SharedMutableDict.len()();
}

uint64_t sub_242521D78()
{
  return _sSS8MorpheusE3lenSiyF_0();
}

Swift::Int __swiftcall MLXArray.len()()
{
  uint64_t v0;

  return mlx_array_size(*(_QWORD *)(v0 + 16));
}

uint64_t sub_242521D9C()
{
  uint64_t v0;

  return mlx_array_size(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

uint64_t dispatch thunk of Countable.len()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t _s8Morpheus4evalyyAA8MLXArrayCd_tF_0(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  result = (uint64_t)mlx_vector_array_new();
  v3 = result;
  if (result)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v4 = sub_2425A0128();
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
    {
LABEL_16:
      mlx_vector_array_add_arrays(v3, (uint64_t *)(v5 + 32), v4);
      swift_bridgeObjectRelease();
      mlx_eval(v3);
      return mlx_free(v3);
    }
    v15 = MEMORY[0x24BEE4AF8];
    result = sub_242509AC8(0, v4 & ~(v4 >> 63), 0);
    if ((v4 & 0x8000000000000000) == 0)
    {
      v5 = v15;
      if ((a1 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v4; ++i)
        {
          v7 = *(_QWORD *)(MEMORY[0x2426A7C70](i, a1) + 16);
          swift_unknownObjectRelease();
          v9 = *(_QWORD *)(v15 + 16);
          v8 = *(_QWORD *)(v15 + 24);
          if (v9 >= v8 >> 1)
            sub_242509AC8(v8 > 1, v9 + 1, 1);
          *(_QWORD *)(v15 + 16) = v9 + 1;
          *(_QWORD *)(v15 + 8 * v9 + 32) = v7;
        }
      }
      else
      {
        v10 = a1 + 32;
        v11 = *(_QWORD *)(v15 + 16);
        v12 = v4;
        do
        {
          v13 = *(_QWORD *)(*(_QWORD *)v10 + 16);
          v14 = *(_QWORD *)(v15 + 24);
          if (v11 >= v14 >> 1)
            sub_242509AC8(v14 > 1, v11 + 1, 1);
          *(_QWORD *)(v15 + 16) = v11 + 1;
          *(_QWORD *)(v15 + 8 * v11 + 32) = v13;
          v10 += 8;
          ++v11;
          --v12;
        }
        while (v12);
      }
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall asyncEval(_:)(Swift::OpaquePointer a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = mlx_vector_array_new();
  if (v2)
  {
    if ((unint64_t)a1._rawValue >> 62)
    {
      swift_bridgeObjectRetain();
      v3 = sub_2425A0128();
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v4 = MEMORY[0x24BEE4AF8];
    if (!v3)
    {
LABEL_16:
      mlx_vector_array_add_arrays((uint64_t)v2, (uint64_t *)(v4 + 32), v3);
      swift_bridgeObjectRelease();
      mlx_async_eval((uint64_t)v2);
      mlx_free((uint64_t)v2);
      return;
    }
    v14 = MEMORY[0x24BEE4AF8];
    sub_242509AC8(0, v3 & ~(v3 >> 63), 0);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v4 = v14;
      if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v3; ++i)
        {
          v6 = *(_QWORD *)(MEMORY[0x2426A7C70](i, a1._rawValue) + 16);
          swift_unknownObjectRelease();
          v8 = *(_QWORD *)(v14 + 16);
          v7 = *(_QWORD *)(v14 + 24);
          if (v8 >= v7 >> 1)
            sub_242509AC8(v7 > 1, v8 + 1, 1);
          *(_QWORD *)(v14 + 16) = v8 + 1;
          *(_QWORD *)(v14 + 8 * v8 + 32) = v6;
        }
      }
      else
      {
        v9 = (char *)a1._rawValue + 32;
        v10 = *(_QWORD *)(v14 + 16);
        v11 = v3;
        do
        {
          v12 = *(_QWORD *)(*(_QWORD *)v9 + 16);
          v13 = *(_QWORD *)(v14 + 24);
          if (v10 >= v13 >> 1)
            sub_242509AC8(v13 > 1, v10 + 1, 1);
          *(_QWORD *)(v14 + 16) = v10 + 1;
          *(_QWORD *)(v14 + 8 * v10 + 32) = v12;
          v9 += 8;
          ++v10;
          --v11;
        }
        while (v11);
      }
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_242522160(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  __int128 v41;
  _OWORD v42[2];
  _OWORD v43[2];
  _OWORD v44[2];
  __int128 v45;
  _BYTE v46[40];

  sub_242526478(a1, (uint64_t)v46);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8F0);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(&v41, (uint64_t)&v35);
    v4 = v36;
    v5 = *(_QWORD *)&v37[0];
    __swift_project_boxed_opaque_existential_1(&v35, v36);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    sub_24251A2EC(v6);
    v7 = &v35;
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  v34 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8F8);
  if (swift_dynamicCast())
  {
    v8 = swift_bridgeObjectRetain();
    *(_QWORD *)&v41 = sub_24251CDCC(v8);
    sub_2425251F8((_QWORD **)&v41);
    v9 = MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(v41 + 16))
    {
      v33 = (_QWORD *)(v41 + 32);
      swift_retain();
      v10 = v33[1];
      v11 = v33[2];
      *(_QWORD *)&v41 = *v33;
      *((_QWORD *)&v41 + 1) = v10;
      swift_retain();
      swift_bridgeObjectRetain_n();
      sub_24259FB10();
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    swift_release();
    v14 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v14 + 16);
    if (v17)
    {
      *(_QWORD *)&v41 = v9;
      sub_2425A002C();
      v18 = 48;
      do
      {
        swift_retain();
        sub_2425A0008();
        sub_2425A0038();
        sub_2425A0044();
        sub_2425A0014();
        v18 += 24;
        --v17;
      }
      while (v17);
      v19 = v41;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v19 = MEMORY[0x24BEE4AF8];
    }
    v13 = v19;
    goto LABEL_26;
  }
  type metadata accessor for MLXArray();
  if (swift_dynamicCast())
  {
    v12 = swift_retain();
    MEMORY[0x2426A794C](v12);
    if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_24259FCF0();
    sub_24259FD38();
    sub_24259FCCC();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8A8);
  if (swift_dynamicCast())
  {
    v13 = v41;
LABEL_26:
    sub_24251A2EC(v13);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC900);
  if (swift_dynamicCast())
  {
    v15 = *(_QWORD *)(v35 + 16);
    if (v15)
    {
      v16 = v35 + 32;
      do
      {
        sub_242526478(v16, (uint64_t)&v41);
        sub_242522160(&v41, a2);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
        v16 += 32;
        --v15;
      }
      while (v15);
    }
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC908);
  if (!swift_dynamicCast())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC910);
    if (swift_dynamicCast())
    {
      sub_2425264B4(&v41, &v35);
      sub_2425264B4(v42, v37);
      sub_242522160(&v35, a2);
      sub_242522160(v37, a2);
      v32 = &qword_2571FC910;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC918);
      if (swift_dynamicCast())
      {
        sub_2425264B4(&v41, &v35);
        sub_2425264B4(v42, v37);
        sub_2425264B4(v43, v38);
        sub_242522160(&v35, a2);
        sub_242522160(v37, a2);
        sub_242522160(v38, a2);
        v32 = &qword_2571FC918;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC920);
        if (swift_dynamicCast())
        {
          sub_2425264B4(&v41, &v35);
          sub_2425264B4(v42, v37);
          sub_2425264B4(v43, v38);
          sub_2425264B4(v44, v39);
          sub_242522160(&v35, a2);
          sub_242522160(v37, a2);
          sub_242522160(v38, a2);
          sub_242522160(v39, a2);
          v32 = &qword_2571FC920;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC928);
          if (!swift_dynamicCast())
          {
            if (swift_dynamicCast())
            {
              swift_bridgeObjectRelease();
              return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC930);
            if (swift_dynamicCast()
              || (__swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938), swift_dynamicCast()))
            {
              v7 = &v41;
              goto LABEL_3;
            }
            sub_242526478(a1, (uint64_t)&v41);
            *(_QWORD *)&v35 = 0;
            *((_QWORD *)&v35 + 1) = 0xE000000000000000;
            sub_24259FF84();
            sub_24259FB70();
            sub_2425A008C();
            sub_2425A00E0();
            __break(1u);
LABEL_68:
            JUMPOUT(0x2425248F0);
          }
          sub_2425264B4(&v41, &v35);
          sub_2425264B4(v42, v37);
          sub_2425264B4(v43, v38);
          sub_2425264B4(v44, v39);
          sub_2425264B4(&v45, v40);
          sub_242522160(&v35, a2);
          sub_242522160(v37, a2);
          sub_242522160(v38, a2);
          sub_242522160(v39, a2);
          sub_242522160(v40, a2);
          v32 = &qword_2571FC928;
        }
      }
    }
    sub_2425264C4((uint64_t)&v35, v32);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  v21 = 0;
  v22 = v35 + 64;
  v23 = 1 << *(_BYTE *)(v35 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v35 + 64);
  v26 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      v27 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v28 = v27 | (v21 << 6);
      goto LABEL_33;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_68;
    }
    if (v29 >= v26)
      goto LABEL_11;
    v30 = *(_QWORD *)(v22 + 8 * v29);
    ++v21;
    if (v30)
      goto LABEL_50;
    v21 = v29 + 1;
    if (v29 + 1 >= v26)
      goto LABEL_11;
    v30 = *(_QWORD *)(v22 + 8 * v21);
    if (v30)
      goto LABEL_50;
    v21 = v29 + 2;
    if (v29 + 2 >= v26)
      goto LABEL_11;
    v30 = *(_QWORD *)(v22 + 8 * v21);
    if (v30)
      goto LABEL_50;
    v21 = v29 + 3;
    if (v29 + 3 >= v26)
      goto LABEL_11;
    v30 = *(_QWORD *)(v22 + 8 * v21);
    if (v30)
      goto LABEL_50;
    v31 = v29 + 4;
    if (v31 >= v26)
      goto LABEL_11;
    v30 = *(_QWORD *)(v22 + 8 * v31);
    if (!v30)
      break;
    v21 = v31;
LABEL_50:
    v25 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v21 << 6);
LABEL_33:
    sub_242526478(*(_QWORD *)(v35 + 56) + 32 * v28, (uint64_t)&v41);
    sub_242522160(&v41, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  }
  while (1)
  {
    v21 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      JUMPOUT(0x242524914);
    }
    if (v21 >= v26)
      break;
    v30 = *(_QWORD *)(v22 + 8 * v21);
    ++v31;
    if (v30)
      goto LABEL_50;
  }
LABEL_11:
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

uint64_t _s8Morpheus4evalyyypd_tF_0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1 = MEMORY[0x24BEE4AF8];
  v18 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_242522160(v3, &v18);
      v3 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    v1 = v18;
  }
  result = (uint64_t)mlx_vector_array_new();
  v5 = result;
  if (result)
  {
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_2425A0128();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
    {
LABEL_20:
      mlx_vector_array_add_arrays(v5, (uint64_t *)(v7 + 32), v6);
      swift_bridgeObjectRelease();
      mlx_eval(v5);
      mlx_free(v5);
      return swift_bridgeObjectRelease();
    }
    v17 = MEMORY[0x24BEE4AF8];
    result = sub_242509AC8(0, v6 & ~(v6 >> 63), 0);
    if ((v6 & 0x8000000000000000) == 0)
    {
      v7 = v17;
      if ((v1 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v6; ++i)
        {
          v9 = *(_QWORD *)(MEMORY[0x2426A7C70](i, v1) + 16);
          swift_unknownObjectRelease();
          v11 = *(_QWORD *)(v17 + 16);
          v10 = *(_QWORD *)(v17 + 24);
          if (v11 >= v10 >> 1)
            sub_242509AC8(v10 > 1, v11 + 1, 1);
          *(_QWORD *)(v17 + 16) = v11 + 1;
          *(_QWORD *)(v17 + 8 * v11 + 32) = v9;
        }
      }
      else
      {
        v12 = v1 + 32;
        v13 = *(_QWORD *)(v17 + 16);
        v14 = v6;
        do
        {
          v15 = *(_QWORD *)(*(_QWORD *)v12 + 16);
          v16 = *(_QWORD *)(v17 + 24);
          if (v13 >= v16 >> 1)
            sub_242509AC8(v16 > 1, v13 + 1, 1);
          *(_QWORD *)(v17 + 16) = v13 + 1;
          *(_QWORD *)(v17 + 8 * v13 + 32) = v15;
          v12 += 8;
          ++v13;
          --v14;
        }
        while (v14);
      }
      goto LABEL_20;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s8Morpheus9asyncEvalyyypd_tF_0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1 = MEMORY[0x24BEE4AF8];
  v18 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_242522160(v3, &v18);
      v3 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    v1 = v18;
  }
  result = (uint64_t)mlx_vector_array_new();
  v5 = result;
  if (result)
  {
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_2425A0128();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
    {
LABEL_20:
      mlx_vector_array_add_arrays(v5, (uint64_t *)(v7 + 32), v6);
      swift_bridgeObjectRelease();
      mlx_async_eval(v5);
      mlx_free(v5);
      return swift_bridgeObjectRelease();
    }
    v17 = MEMORY[0x24BEE4AF8];
    result = sub_242509AC8(0, v6 & ~(v6 >> 63), 0);
    if ((v6 & 0x8000000000000000) == 0)
    {
      v7 = v17;
      if ((v1 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v6; ++i)
        {
          v9 = *(_QWORD *)(MEMORY[0x2426A7C70](i, v1) + 16);
          swift_unknownObjectRelease();
          v11 = *(_QWORD *)(v17 + 16);
          v10 = *(_QWORD *)(v17 + 24);
          if (v11 >= v10 >> 1)
            sub_242509AC8(v10 > 1, v11 + 1, 1);
          *(_QWORD *)(v17 + 16) = v11 + 1;
          *(_QWORD *)(v17 + 8 * v11 + 32) = v9;
        }
      }
      else
      {
        v12 = v1 + 32;
        v13 = *(_QWORD *)(v17 + 16);
        v14 = v6;
        do
        {
          v15 = *(_QWORD *)(*(_QWORD *)v12 + 16);
          v16 = *(_QWORD *)(v17 + 24);
          if (v13 >= v16 >> 1)
            sub_242509AC8(v16 > 1, v13 + 1, 1);
          *(_QWORD *)(v17 + 16) = v13 + 1;
          *(_QWORD *)(v17 + 8 * v13 + 32) = v15;
          v12 += 8;
          ++v13;
          --v14;
        }
        while (v14);
      }
      goto LABEL_20;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_242524ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_242524F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC898);
  v5 = swift_allocObject();
  v6 = v5;
  *(_OWORD *)(v5 + 16) = xmmword_2425C4B60;
  v7 = v10;
  if (!v3)
    v7 = 0;
  v8 = 0xE000000000000000;
  if (v3)
    v8 = v3;
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v8;
  *(_QWORD *)(v5 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return v6;
}

uint64_t sub_2425251F8(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_242526500(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_242525260(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_242525260(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;

  v3 = a1[1];
  result = sub_2425A01DC();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_148;
    if (v3)
      return sub_242525C08(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_156;
  v112 = v3;
  v107 = result;
  v105 = a1;
  if (v3 < 2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    v114 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_114:
      v109 = v7;
      if (v11 >= 2)
      {
        v99 = *v105;
        do
        {
          v100 = v11 - 2;
          if (v11 < 2)
            goto LABEL_143;
          if (!v99)
            goto LABEL_155;
          v101 = *(_QWORD *)&v10[16 * v100 + 32];
          v102 = *(_QWORD *)&v10[16 * v11 + 24];
          sub_242525DF8((char *)(v99 + 24 * v101), (char *)(v99 + 24 * *(_QWORD *)&v10[16 * v11 + 16]), v99 + 24 * v102, v114);
          if (v1)
            break;
          if (v102 < v101)
            goto LABEL_144;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = sub_242526464((uint64_t)v10);
          if (v100 >= *((_QWORD *)v10 + 2))
            goto LABEL_145;
          v103 = &v10[16 * v100 + 32];
          *(_QWORD *)v103 = v101;
          *((_QWORD *)v103 + 1) = v102;
          v104 = *((_QWORD *)v10 + 2);
          if (v11 > v104)
            goto LABEL_146;
          memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v104 - v11));
          *((_QWORD *)v10 + 2) = v104 - 1;
          v11 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_125:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v109 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC818);
    v7 = sub_24259FD20();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v112;
    v114 = (char *)(v7 + 32);
  }
  v109 = v7;
  v8 = 0;
  v9 = *a1;
  v106 = *a1 + 64;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v115 = *a1;
  while (1)
  {
    v12 = v8;
    v13 = v8 + 1;
    v111 = v8;
    if (v8 + 1 < v3)
    {
      v108 = v10;
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      v14 = sub_24259FB10();
      v16 = v15;
      swift_bridgeObjectRetain();
      if (v14 == sub_24259FB10() && v16 == v17)
        v120 = 0;
      else
        v120 = sub_2425A0254();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v12 = v111;
      v3 = v112;
      v13 = v111 + 2;
      if (v111 + 2 < v112)
      {
        v18 = v106 + 24 * v111;
        while (1)
        {
          v116 = v13;
          swift_retain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          v19 = sub_24259FB10();
          v21 = v20;
          swift_bridgeObjectRetain();
          v23 = v19 == sub_24259FB10() && v21 == v22;
          v24 = v23 ? 0 : sub_2425A0254();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (((v120 ^ v24) & 1) != 0)
            break;
          v18 += 24;
          ++v13;
          v3 = v112;
          if (v112 == v116 + 1)
          {
            v13 = v112;
            goto LABEL_32;
          }
        }
        v3 = v112;
LABEL_32:
        v12 = v111;
      }
      v10 = v108;
      v9 = v115;
      if ((v120 & 1) != 0)
      {
        if (v13 < v12)
          goto LABEL_149;
        if (v12 < v13)
        {
          v25 = 24 * v13;
          v26 = 24 * v12;
          v27 = v13;
          v28 = v12;
          do
          {
            if (v28 != --v27)
            {
              if (!v115)
                goto LABEL_154;
              v29 = v115 + v26;
              v30 = v115 + v25;
              v31 = *(_OWORD *)(v115 + v26);
              v32 = *(_QWORD *)(v115 + v26 + 16);
              v33 = *(_QWORD *)(v115 + v25 - 8);
              *(_OWORD *)v29 = *(_OWORD *)(v115 + v25 - 24);
              *(_QWORD *)(v29 + 16) = v33;
              *(_OWORD *)(v30 - 24) = v31;
              *(_QWORD *)(v30 - 8) = v32;
            }
            ++v28;
            v25 -= 24;
            v26 += 24;
          }
          while (v28 < v27);
        }
      }
    }
    if (v13 < v3)
    {
      if (__OFSUB__(v13, v12))
        goto LABEL_147;
      if (v13 - v12 < v107)
        break;
    }
LABEL_65:
    if (v13 < v12)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_2425262AC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v49 = *((_QWORD *)v10 + 2);
    v48 = *((_QWORD *)v10 + 3);
    v11 = v49 + 1;
    v9 = v115;
    if (v49 >= v48 >> 1)
    {
      v98 = sub_2425262AC((char *)(v48 > 1), v49 + 1, 1, v10);
      v9 = v115;
      v10 = v98;
    }
    *((_QWORD *)v10 + 2) = v11;
    v50 = v10 + 32;
    v51 = &v10[16 * v49 + 32];
    *(_QWORD *)v51 = v12;
    *((_QWORD *)v51 + 1) = v13;
    v118 = v13;
    if (v49)
    {
      while (1)
      {
        v52 = v11 - 1;
        if (v11 >= 4)
        {
          v57 = &v50[16 * v11];
          v58 = *((_QWORD *)v57 - 8);
          v59 = *((_QWORD *)v57 - 7);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_131;
          v62 = *((_QWORD *)v57 - 6);
          v61 = *((_QWORD *)v57 - 5);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_132;
          v64 = v11 - 2;
          v65 = &v50[16 * v11 - 32];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_134;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_137;
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_141;
            v80 = v55 < v90;
            goto LABEL_102;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v81 = *((_QWORD *)v10 + 4);
            v82 = *((_QWORD *)v10 + 5);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_96;
          }
          v54 = *((_QWORD *)v10 + 4);
          v53 = *((_QWORD *)v10 + 5);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_133;
        v64 = v11 - 2;
        v70 = &v50[16 * v11 - 32];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_136;
        v76 = &v50[16 * v52];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_139;
        if (__OFADD__(v74, v79))
          goto LABEL_140;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_102:
          if (v80)
            v52 = v64;
          goto LABEL_104;
        }
LABEL_96:
        if ((v75 & 1) != 0)
          goto LABEL_135;
        v83 = &v50[16 * v52];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_138;
        if (v86 < v74)
          goto LABEL_14;
LABEL_104:
        v91 = v52 - 1;
        if (v52 - 1 >= v11)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (!v9)
          goto LABEL_153;
        v92 = v10;
        v93 = &v50[16 * v91];
        v94 = *(_QWORD *)v93;
        v95 = &v50[16 * v52];
        v96 = *((_QWORD *)v95 + 1);
        sub_242525DF8((char *)(v9 + 24 * *(_QWORD *)v93), (char *)(v9 + 24 * *(_QWORD *)v95), v9 + 24 * v96, v114);
        if (v1)
          goto LABEL_125;
        if (v96 < v94)
          goto LABEL_128;
        if (v52 > *((_QWORD *)v92 + 2))
          goto LABEL_129;
        *(_QWORD *)v93 = v94;
        *(_QWORD *)&v50[16 * v91 + 8] = v96;
        v97 = *((_QWORD *)v92 + 2);
        if (v52 >= v97)
          goto LABEL_130;
        v10 = v92;
        v11 = v97 - 1;
        memmove(&v50[16 * v52], v95 + 16, 16 * (v97 - 1 - v52));
        *((_QWORD *)v10 + 2) = v97 - 1;
        v9 = v115;
        if (v97 <= 2)
          goto LABEL_14;
      }
    }
    v11 = 1;
LABEL_14:
    v3 = v112;
    v8 = v118;
    v7 = v109;
    if (v118 >= v112)
      goto LABEL_114;
  }
  if (__OFADD__(v12, v107))
    goto LABEL_150;
  if (v12 + v107 >= v3)
    v34 = v3;
  else
    v34 = v12 + v107;
  if (v34 >= v12)
  {
    if (v13 != v34)
    {
      v35 = (_QWORD *)(v9 + 24 * v13);
      v110 = v34;
      do
      {
        v37 = v12;
        v113 = v35;
        v38 = v35;
        v117 = v13;
        while (1)
        {
          v119 = v37;
          swift_retain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          v39 = sub_24259FB10();
          v41 = v40;
          swift_bridgeObjectRetain();
          if (v39 == sub_24259FB10() && v41 == v42)
            break;
          v44 = sub_2425A0254();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
            goto LABEL_53;
          v36 = v117;
          if (!v115)
            goto LABEL_152;
          v45 = *v38;
          v46 = v38[1];
          v47 = v38[2];
          *(_OWORD *)v38 = *(_OWORD *)(v38 - 3);
          v38[2] = *(v38 - 1);
          *(v38 - 2) = v46;
          *(v38 - 1) = v47;
          *(v38 - 3) = v45;
          v38 -= 3;
          v37 = v119 + 1;
          if (v117 == v119 + 1)
            goto LABEL_54;
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_53:
        v36 = v117;
LABEL_54:
        v13 = v36 + 1;
        v35 = v113 + 3;
        v12 = v111;
      }
      while (v13 != v110);
      v13 = v110;
    }
    goto LABEL_65;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  result = sub_2425A00D4();
  __break(1u);
  return result;
}

uint64_t sub_242525C08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = result;
  if (a3 != a2)
  {
    v18 = *a4;
    v4 = (_QWORD *)(*a4 + 24 * a3);
LABEL_6:
    v19 = a3;
    v20 = v16;
    v17 = v4;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      v6 = sub_24259FB10();
      v8 = v7;
      swift_bridgeObjectRetain();
      if (v6 == sub_24259FB10() && v8 == v9)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease_n();
        v5 = v19;
LABEL_5:
        a3 = v5 + 1;
        v4 = v17 + 3;
        if (a3 == a2)
          return result;
        goto LABEL_6;
      }
      v11 = sub_2425A0254();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v5 = v19;
      if ((v11 & 1) == 0)
        goto LABEL_5;
      if (!v18)
        break;
      v12 = *v4;
      v13 = v4[1];
      v14 = v4[2];
      *(_OWORD *)v4 = *(_OWORD *)(v4 - 3);
      v4[2] = *(v4 - 1);
      *(v4 - 2) = v13;
      *(v4 - 1) = v14;
      *(v4 - 3) = v12;
      v4 -= 3;
      if (v19 == ++v20)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_242525DF8(char *__src, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t result;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;

  v4 = a2;
  v5 = __src;
  v6 = a2 - __src;
  v7 = (a2 - __src) / 24;
  v8 = a3 - (_QWORD)a2;
  v9 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v40 = __src;
  v39 = a4;
  if (v7 >= v9)
  {
    if (v8 >= -23)
    {
      if (a4 != a2 || &a2[24 * v9] <= a4)
        memmove(a4, a2, 24 * v9);
      v20 = &a4[24 * v9];
      v38 = v20;
      v40 = v4;
      if (v5 < v4 && v8 >= 24)
      {
        v21 = a3 - 24;
        v22 = v4;
        v36 = v5;
        do
        {
          v35 = v20;
          v20 -= 24;
          v22 -= 24;
          swift_retain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          v23 = sub_24259FB10();
          v25 = v24;
          swift_bridgeObjectRetain();
          v27 = v23 == sub_24259FB10() && v25 == v26;
          v37 = v4;
          if (v27)
            v28 = 0;
          else
            v28 = sub_2425A0254();
          v29 = (char *)(v21 + 24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if ((v28 & 1) != 0)
          {
            v20 = v35;
            if (v29 != v37 || v21 >= (unint64_t)v37)
            {
              v30 = *(_OWORD *)v22;
              *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
              *(_OWORD *)v21 = v30;
            }
            v40 = v22;
          }
          else
          {
            v38 = v20;
            if (v29 < v35 || v21 >= (unint64_t)v35 || v29 != v35)
            {
              v31 = *(_OWORD *)v20;
              *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v21 = v31;
            }
            v22 = v37;
          }
          if (v22 <= v36)
            break;
          v21 -= 24;
          v4 = v22;
        }
        while (v20 > a4);
      }
LABEL_50:
      sub_2425263A8((void **)&v40, (const void **)&v39, &v38);
      return 1;
    }
  }
  else if (v6 >= -23)
  {
    if (a4 != __src || &__src[24 * v7] <= a4)
      memmove(a4, __src, 24 * v7);
    v38 = &a4[24 * v7];
    if ((unint64_t)v4 < a3 && v6 >= 24)
    {
      v10 = a4;
      while (1)
      {
        swift_retain();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        v11 = sub_24259FB10();
        v13 = v12;
        swift_bridgeObjectRetain();
        if (v11 == sub_24259FB10() && v13 == v14)
          break;
        v16 = sub_2425A0254();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          goto LABEL_19;
        v17 = v4 + 24;
        if (v5 < v4 || v5 >= v17 || v5 != v4)
        {
          v18 = *(_OWORD *)v4;
          *((_QWORD *)v5 + 2) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v5 = v18;
        }
LABEL_22:
        v5 += 24;
        if (v10 < &a4[24 * v7])
        {
          v4 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v40 = v5;
        goto LABEL_50;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_19:
      if (v5 != v10)
      {
        v19 = *(_OWORD *)v10;
        *((_QWORD *)v5 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v5 = v19;
      }
      v10 += 24;
      v39 = v10;
      v17 = v4;
      goto LABEL_22;
    }
    goto LABEL_50;
  }
  result = sub_2425A0164();
  __break(1u);
  return result;
}

char *sub_2425262AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC830);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2425263A8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)sub_2425A0164();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

char *sub_242526464(uint64_t a1)
{
  return sub_2425262AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_242526478(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_2425264B4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_2425264C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_242526500(_QWORD *a1)
{
  return sub_24250ABB8(0, a1[2], 0, a1);
}

uint64_t broadcast(_:to:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = Array<A>.asInt32.getter(a2);
  v7 = mlx_broadcast_to(v5, (const void *)(v6 + 32), *(_QWORD *)(a2 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t add<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_add(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t addmm<A, B, C>(_:_:_:alpha:beta:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = *a4;
  return addMM<A, B, C>(_:_:_:alpha:beta:stream:)(a1, a2, a3, &v13, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t addMM<A, B, C>(_:_:_:alpha:beta:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v16 = *a4;
  v17 = toArrays<A, B>(_:_:)(a2, a3, a5, a6, a8, a11);
  v19 = v18;
  v25 = v17;
  v20 = type metadata accessor for MLXArray();
  toArrays<A, B>(_:_:)((uint64_t)&v25, a1, v20, a7, (uint64_t)&protocol witness table for MLXArray, a12);
  v22 = v21;
  swift_release();
  result = mlx_addmm(*(_QWORD *)(v22 + 16), *(_QWORD *)(v17 + 16), *(_QWORD *)(v19 + 16), *(_QWORD *)(v16 + 16), a9, a10);
  v24 = result;
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t acos(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_arccos(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t acosh(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_arccosh(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t asin(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_arcsin(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t asinh(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_arcsinh(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t atan(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_arctan(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t atanh(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_arctanh(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t atLeast1D(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_atleast_1d(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t atLeast2D(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_atleast_2d(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t atLeast3D(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_atleast_3d(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t argPartition(_:kth:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_argpartition(*(_QWORD *)(result + 16), a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t argPartition(_:kth:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_argpartition_all(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t argSort(_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_argsort(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t argSort(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_argsort_all(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t asStrided(_:_:strides:offset:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v6 = a3;
  v8 = *a5;
  if (a2)
  {
    v9 = a2;
    if (a3)
    {
LABEL_3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }
  }
  else
  {
    v9 = MLXArray.shape.getter();
    if (v6)
      goto LABEL_3;
  }
  v15 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRetain();
  if (v15)
  {
    swift_bridgeObjectRetain();
    v16 = 1;
    v17 = sub_24251BDB8(0, 1, 1, MEMORY[0x24BEE4AF8]);
    while (v15 <= *(_QWORD *)(v9 + 16))
    {
      v18 = *(_QWORD *)(v9 + 8 * v15 + 24);
      v20 = v17[2];
      v19 = v17[3];
      if (v20 >= v19 >> 1)
        v17 = sub_24251BDB8((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      v17[2] = v20 + 1;
      v17[v20 + 4] = v16;
      if ((unsigned __int128)(v16 * (__int128)v18) >> 64 != (v16 * v18) >> 63)
        goto LABEL_16;
      v16 *= v18;
      if (!--v15)
        goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v6 = sub_242526D98((uint64_t)v17);
LABEL_4:
  v10 = *(_QWORD *)(a1 + 16);
  v11 = Array<A>.asInt32.getter(v9);
  v12 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  v13 = mlx_as_strided(v10, (const void *)(v11 + 32), v12, (const void *)(v6 + 32), *(_QWORD *)(v6 + 16), a4, *(_QWORD *)(v8 + 16));
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v13)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242526D98(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = v1[2];
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = v1[v3 + 4];
    v8 = v1[i];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24251DE48(v1);
      v1 = (_QWORD *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t blockMaskedMM(_:_:blockSize:maskOut:maskLHS:maskRHS:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a4)
    a4 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(result + 16);
  v8 = *(_QWORD *)(a2 + 16);
  if (a5)
    a5 = *(_QWORD *)(a5 + 16);
  if (a6)
    a6 = *(_QWORD *)(a6 + 16);
  result = mlx_block_masked_mm(v7, v8, a3, a4, a5, a6, *(_QWORD *)(*(_QWORD *)a7 + 16));
  v9 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t ceil(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_ceil(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t clip<A, B>(_:min:max:stream:)(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a8;
  v15 = sub_24259FE7C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v32 - v17;
  v34 = *a4;
  v35 = a1;
  v19 = type metadata accessor for MLXArray();
  v20 = toArrays<A, B>(_:_:)((uint64_t)&v35, a2, v19, a5, (uint64_t)&protocol witness table for MLXArray, a7);
  v22 = v21;
  v23 = *(_QWORD *)(a6 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24(a3, 1, a6) == 1)
  {
    v25 = 0;
    v26 = *(_QWORD *)(v20 + 16);
    v27 = *(_QWORD *)(v22 + 16);
  }
  else
  {
    v35 = v20;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, a3, v15);
    result = v24(v18, 1, a6);
    if ((_DWORD)result == 1)
      goto LABEL_10;
    toArrays<A, B>(_:_:)((uint64_t)&v35, (uint64_t)v18, v19, a6, (uint64_t)&protocol witness table for MLXArray, v33);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, a6);
    swift_release();
    v26 = *(_QWORD *)(v20 + 16);
    v27 = *(_QWORD *)(v22 + 16);
    if (v30)
      v25 = *(_QWORD *)(v30 + 16);
    else
      v25 = 0;
  }
  result = (uint64_t)mlx_clip(v26, v27, v25, *(_QWORD *)(v34 + 16));
  v31 = result;
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v31;
    return result;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t clip<A>(_:max:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v8 = *a3;
  v14 = a1;
  v9 = type metadata accessor for MLXArray();
  v10 = toArrays<A, B>(_:_:)((uint64_t)&v14, a2, v9, a4, (uint64_t)&protocol witness table for MLXArray, a5);
  result = (uint64_t)mlx_clip(*(_QWORD *)(v10 + 16), 0, *(_QWORD *)(v11 + 16), *(_QWORD *)(v8 + 16));
  v13 = result;
  if (result)
  {
    swift_release();
    swift_release();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t concatenated(_:axis:stream:)(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a3;
  result = (uint64_t)mlx_vector_array_new();
  v7 = result;
  if (!result)
    goto LABEL_24;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v21 = MEMORY[0x24BEE4AF8];
    result = sub_242509AC8(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v9 = v21;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v8; ++i)
      {
        v11 = *(_QWORD *)(MEMORY[0x2426A7C70](i, a1) + 16);
        swift_unknownObjectRelease();
        v13 = *(_QWORD *)(v21 + 16);
        v12 = *(_QWORD *)(v21 + 24);
        if (v13 >= v12 >> 1)
          sub_242509AC8(v12 > 1, v13 + 1, 1);
        *(_QWORD *)(v21 + 16) = v13 + 1;
        *(_QWORD *)(v21 + 8 * v13 + 32) = v11;
      }
    }
    else
    {
      v14 = a1 + 32;
      v15 = *(_QWORD *)(v21 + 16);
      v16 = v8;
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)v14 + 16);
        v18 = *(_QWORD *)(v21 + 24);
        if (v15 >= v18 >> 1)
          sub_242509AC8(v18 > 1, v15 + 1, 1);
        *(_QWORD *)(v21 + 16) = v15 + 1;
        *(_QWORD *)(v21 + 8 * v15 + 32) = v17;
        v14 += 8;
        ++v15;
        --v16;
      }
      while (v16);
    }
  }
  mlx_vector_array_add_arrays(v7, (uint64_t *)(v9 + 32), v8);
  result = swift_bridgeObjectRelease();
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = (uint64_t)mlx_concatenate(v7, a2, *(_QWORD *)(v5 + 16));
  v19 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v19;
    mlx_free(v7);
    return v20;
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL static ConvolveMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ConvolveMode.hash(into:)()
{
  return sub_2425A02E4();
}

uint64_t ConvolveMode.hashValue.getter()
{
  sub_2425A02D8();
  sub_2425A02E4();
  return sub_2425A02F0();
}

BOOL sub_242527474(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_242527488()
{
  sub_2425A02D8();
  sub_2425A02E4();
  return sub_2425A02F0();
}

uint64_t sub_2425274CC()
{
  return sub_2425A02E4();
}

uint64_t sub_2425274F4()
{
  sub_2425A02D8();
  sub_2425A02E4();
  return sub_2425A02F0();
}

uint64_t cosh(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_cosh(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t degrees(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_degrees(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t divide<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_divide(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t divmod<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = mlx_divmod(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    result = sub_242507E64(result);
    v12 = result;
    if ((result & 0xC000000000000001) != 0)
    {
      v14 = MEMORY[0x2426A7C70](0, result);
      MEMORY[0x2426A7C70](1, v12);
      goto LABEL_6;
    }
    v13 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
      if (v13 != 1)
      {
        v14 = *(_QWORD *)(result + 32);
        swift_retain();
        swift_retain();
LABEL_6:
        swift_bridgeObjectRelease();
        mlx_free(v11);
        swift_release();
        swift_release();
        return v14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t equargsortal<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t erf(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_erf(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t erfInverse(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_erfinv(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t expandedDimensions(_:axes:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = Array<A>.asInt32.getter(a2);
  v7 = mlx_expand_dims(v5, (const void *)(v6 + 32), *(_QWORD *)(a2 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t expandedDimensions(_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = *a3;
  v4 = *(_QWORD *)(result + 16);
  v6 = a2;
  result = mlx_expand_dims(v4, &v6, 1uLL, *(_QWORD *)(v3 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t expm1(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_expm1(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t greater<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_greater(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t greaterEqual<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_greater_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t inner(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = mlx_inner(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t isClose(_:_:rtol:atol:equalNaN:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, double a5, double a6)
{
  uint64_t result;
  uint64_t v7;

  result = (uint64_t)mlx_isclose(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16), a5, a6);
  v7 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t isNaN(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_isnan(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t isInf(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_isinf(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t isNegInf(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_isneginf(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t isPosInf(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_isposinf(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t less<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_less(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t lessEqual<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_less_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t logAddExp<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_logaddexp(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t logicalAnd<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_logical_and(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t logicalNot(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_logical_not(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t logicalOr<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_logical_or(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Morpheus::MeshGridIndexing_optional __swiftcall MeshGridIndexing.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  Morpheus::MeshGridIndexing_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2425A017C();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t MeshGridIndexing.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 27241;
  else
    return 31096;
}

uint64_t sub_242528048(char *a1, char *a2)
{
  return sub_24255DF78(*a1, *a2);
}

uint64_t sub_242528054()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425280B0()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2425280E0()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

Morpheus::MeshGridIndexing_optional sub_242528138(Swift::String *a1)
{
  return MeshGridIndexing.init(rawValue:)(*a1);
}

void sub_242528144(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 31096;
  if (*v1)
    v2 = 27241;
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

uint64_t meshGrid(_:sparse:indexing:stream:)(unint64_t a1, int a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t i;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;

  v8 = sub_24259FB04();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a3;
  v13 = *a4;
  result = (uint64_t)mlx_vector_array_new();
  v15 = result;
  if (!result)
    goto LABEL_27;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v16)
    goto LABEL_17;
  v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
  result = sub_242509AC8(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  HIDWORD(v33) = v12;
  v34 = v8;
  v35 = v13;
  v36 = a2;
  v17 = v37;
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v16; ++i)
    {
      v19 = *(_QWORD *)(MEMORY[0x2426A7C70](i, a1) + 16);
      swift_unknownObjectRelease();
      v37 = v17;
      v21 = v17[2];
      v20 = v17[3];
      if (v21 >= v20 >> 1)
      {
        sub_242509AC8(v20 > 1, v21 + 1, 1);
        v17 = v37;
      }
      v17[2] = v21 + 1;
      v17[v21 + 4] = v19;
    }
  }
  else
  {
    v22 = a1 + 32;
    v23 = v37[2];
    v24 = v16;
    do
    {
      v25 = *(_QWORD *)(*(_QWORD *)v22 + 16);
      v37 = v17;
      v26 = v17[3];
      if (v23 >= v26 >> 1)
      {
        sub_242509AC8(v26 > 1, v23 + 1, 1);
        v17 = v37;
      }
      v17[2] = v23 + 1;
      v17[v23 + 4] = v25;
      v22 += 8;
      ++v23;
      --v24;
    }
    while (v24);
  }
  LOBYTE(a2) = v36;
  v8 = v34;
  v13 = v35;
  v12 = HIDWORD(v33);
LABEL_17:
  mlx_vector_array_add_arrays(v15, v17 + 4, v16);
  swift_bridgeObjectRelease();
  v27 = 31096;
  if (v12)
    v27 = 27241;
  v37 = (_QWORD *)v27;
  v38 = 0xE200000000000000;
  sub_24259FAF8();
  sub_24253B194();
  v28 = sub_24259FEC4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  if (v28)
    v29 = (char *)(v28 + 32);
  else
    v29 = 0;
  v30 = mlx_string_new(v29);
  result = swift_bridgeObjectRelease();
  if (!v30)
    goto LABEL_28;
  result = mlx_meshgrid(v15, a2 & 1, (uint64_t)v30, *(_QWORD *)(v13 + 16));
  v31 = result;
  if (result)
  {
    v32 = sub_242507E64(result);
    mlx_free(v31);
    mlx_free((uint64_t)v30);
    mlx_free(v15);
    return v32;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t maximum<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_maximum(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t minimum<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_minimum(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t multiply<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_multiply(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t negative(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_negative(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t notEqual<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_not_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outer(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_outer(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t padded(_:width:value:stream:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t dtype;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v5 = a1;
  v7 = *a2;
  v6 = a2[1];
  v8 = *a4;
  result = mlx_array_ndim(*(_QWORD *)(a1 + 16));
  v10 = result;
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v11 = sub_24251CA20(result << 32);
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v28 = v8;
  if (v10)
  {
    v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v10, 0);
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 <= 0x7FFFFFFF)
      {
        v26 = v11;
        v27 = v5;
        v13 = v29;
        v14 = v29[2];
        v15 = v10;
        do
        {
          v29 = v13;
          v16 = v13[3];
          if (v14 >= v16 >> 1)
          {
            sub_242509C04(v16 > 1, v14 + 1, 1);
            v13 = v29;
          }
          v13[2] = v14 + 1;
          *((_DWORD *)v13 + v14++ + 8) = v7;
          --v15;
        }
        while (v15);
        v29 = v12;
        result = sub_242509C04(0, v10, 0);
        if (v6 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v6 <= 0x7FFFFFFF)
          {
            v12 = v29;
            v17 = v29[2];
            v18 = v10;
            do
            {
              v29 = v12;
              v19 = v12[3];
              if (v17 >= v19 >> 1)
              {
                sub_242509C04(v19 > 1, v17 + 1, 1);
                v12 = v29;
              }
              v12[2] = v17 + 1;
              *((_DWORD *)v12 + v17++ + 8) = v6;
              --v18;
            }
            while (v18);
            v11 = v26;
            v5 = v27;
            if (a3)
              goto LABEL_18;
            goto LABEL_20;
          }
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (a3)
  {
LABEL_18:
    v20 = a3;
    goto LABEL_21;
  }
LABEL_20:
  dtype = mlx_array_get_dtype(*(_QWORD *)(v5 + 16));
  sub_242553C80(dtype, &v29);
  v20 = sub_24252B5F0(0, (char)v29);
LABEL_21:
  v22 = *(_QWORD *)(v5 + 16);
  v23 = *(_QWORD *)(v20 + 16);
  v24 = *(_QWORD *)(v28 + 16);
  swift_retain();
  v25 = mlx_pad(v22, (const void *)(v11 + 32), v10, v13 + 4, v10, v12 + 4, v10, v23, v24);
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v25)
  {
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v25;
    return result;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2425289C4(char a1, float a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1 != 6)
  {
    sub_24253B69C();
    __asm { BR              X10 }
  }
  v2 = mlx_array_from_float(a2);
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x242528E2CLL);
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  return result;
}

void sub_242529278(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242529280);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2425292CC(int a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  int v9[6];
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2 != 4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    v6 = MEMORY[0x24BEE3F88];
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(v7, (uint64_t)v9);
      __asm { BR              X10 }
    }
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_2425264C4((uint64_t)v7, &qword_2571FC958);
    v10 = v6;
    v11 = sub_242520A0C();
    v9[0] = a1;
    __asm { BR              X10 }
  }
  v3 = mlx_array_from_int(a1);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x24252B1FCLL);
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

void sub_24252B54C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x24252B554);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24252B5F0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  _QWORD v9[7];

  v9[5] = *MEMORY[0x24BDAC8D0];
  if (a2 != 5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    v6 = MEMORY[0x24BEE1768];
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(v7, (uint64_t)v9);
      __asm { BR              X10 }
    }
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_2425264C4((uint64_t)v7, &qword_2571FC958);
    v9[3] = v6;
    v9[4] = sub_24253B658();
    v9[0] = a1;
    __asm { BR              X10 }
  }
  v9[0] = a1;
  v3 = mlx_array_from_data((unsigned __int8 *)v9, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 5);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x24252D7D0);
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

void sub_24252DB20(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x24252DB28);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24252DBC4(char a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD v7[7];

  v7[5] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    LOBYTE(v2) = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(&v4, (uint64_t)v7);
      __asm { BR              X10 }
    }
    v6 = 0;
    v4 = 0u;
    v5 = 0u;
    sub_2425264C4((uint64_t)&v4, &qword_2571FC958);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC930);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(&v4, (uint64_t)v7);
      __asm { BR              X10 }
    }
LABEL_9:
    v6 = 0;
    v4 = 0u;
    v5 = 0u;
    sub_2425264C4((uint64_t)&v4, &qword_2571FC9B8);
    v7[0] = 0;
    v7[1] = 0xE000000000000000;
    sub_24259FF84();
    sub_24259FB70();
    LOBYTE(v4) = 0;
    sub_2425A008C();
    sub_24259FB70();
    LOBYTE(v4) = v2;
    sub_2425A008C();
    sub_2425A00E0();
    __break(1u);
    JUMPOUT(0x242530AE0);
  }
  v2 = mlx_array_from_BOOL(a1 & 1);
  if (!v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  return result;
}

void sub_242530AE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242530AECLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_242530B80(unsigned __int8 a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  unsigned __int8 v9[24];
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2 != 3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    v6 = MEMORY[0x24BEE3E50];
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(v7, (uint64_t)v9);
      __asm { BR              X10 }
    }
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_2425264C4((uint64_t)v7, &qword_2571FC958);
    v10 = v6;
    v11 = sub_24253B5D0();
    v9[0] = a1;
    __asm { BR              X10 }
  }
  v9[0] = a1;
  v3 = mlx_array_from_data(v9, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 3);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x242532734);
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

void sub_242532A88(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242532A90);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_242532B2C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  _QWORD v9[7];

  v9[5] = *MEMORY[0x24BDAC8D0];
  if (a2 != 5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    v6 = MEMORY[0x24BEE4008];
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(v7, (uint64_t)v9);
      __asm { BR              X10 }
    }
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_2425264C4((uint64_t)v7, &qword_2571FC958);
    v9[3] = v6;
    v9[4] = sub_24253B58C();
    v9[0] = a1;
    __asm { BR              X10 }
  }
  v9[0] = a1;
  v3 = mlx_array_from_data((unsigned __int8 *)v9, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 5);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x242534D24);
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

void sub_242535074(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x24253507CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_242535118(unsigned __int8 a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  unsigned __int8 v9[24];
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2 != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    v6 = MEMORY[0x24BEE4260];
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(v7, (uint64_t)v9);
      __asm { BR              X10 }
    }
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_2425264C4((uint64_t)v7, &qword_2571FC958);
    v10 = v6;
    v11 = sub_24253B614();
    v9[0] = a1;
    __asm { BR              X10 }
  }
  v9[0] = a1;
  v3 = mlx_array_from_data(v9, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 1);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x242536F58);
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

void sub_2425372A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x2425372B0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24253734C(int a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  unsigned __int8 v9[24];
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2 != 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    v6 = MEMORY[0x24BEE44F0];
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(v7, (uint64_t)v9);
      __asm { BR              X10 }
    }
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_2425264C4((uint64_t)v7, &qword_2571FC958);
    v10 = v6;
    v11 = sub_24253B548();
    *(_DWORD *)v9 = a1;
    __asm { BR              X10 }
  }
  *(_DWORD *)v9 = a1;
  v3 = mlx_array_from_data(v9, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x2425394ECLL);
  }
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

void sub_24253983C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242539844);
  }
  _Unwind_Resume(a1);
}

uint64_t padded(_:widths:value:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t *v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t dtype;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v5 = a1;
  v6 = *a4;
  result = mlx_array_ndim(*(_QWORD *)(a1 + 16));
  v8 = result;
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v34 = v6;
  v9 = sub_24251CA20(result << 32);
  v10 = v9;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v31 = v9;
    v32 = v5;
    v33 = v8;
    v38 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v11, 0);
    v13 = v38;
    v36 = a2;
    v14 = (int64_t *)(a2 + 32);
    v15 = v11;
    do
    {
      v17 = *v14;
      v14 += 2;
      v16 = v17;
      if (v17 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v16 > 0x7FFFFFFF)
        goto LABEL_24;
      v38 = v13;
      v19 = v13[2];
      v18 = v13[3];
      if (v19 >= v18 >> 1)
      {
        result = sub_242509C04(v18 > 1, v19 + 1, 1);
        v13 = v38;
      }
      v13[2] = v19 + 1;
      *((_DWORD *)v13 + v19 + 8) = v16;
      --v15;
    }
    while (v15);
    v38 = v12;
    result = sub_242509C04(0, v11, 0);
    v20 = (int64_t *)(v36 + 40);
    while (1)
    {
      v22 = *v20;
      v20 += 2;
      v21 = v22;
      if (v22 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v21 > 0x7FFFFFFF)
        goto LABEL_26;
      v38 = v12;
      v24 = v12[2];
      v23 = v12[3];
      if (v24 >= v23 >> 1)
      {
        result = sub_242509C04(v23 > 1, v24 + 1, 1);
        v12 = v38;
      }
      v12[2] = v24 + 1;
      *((_DWORD *)v12 + v24 + 8) = v21;
      if (!--v11)
      {
        v5 = v32;
        v8 = v33;
        v25 = a3;
        v10 = v31;
        if (!a3)
          goto LABEL_20;
        goto LABEL_18;
      }
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v25 = a3;
  if (a3)
  {
LABEL_18:
    v37 = v25;
  }
  else
  {
LABEL_20:
    dtype = mlx_array_get_dtype(*(_QWORD *)(v5 + 16));
    sub_242553C80(dtype, &v38);
    v37 = sub_24252B5F0(0, (char)v38);
  }
  v27 = *(_QWORD *)(v5 + 16);
  v28 = *(_QWORD *)(v37 + 16);
  v29 = *(_QWORD *)(v34 + 16);
  swift_retain();
  v30 = mlx_pad(v27, (const void *)(v10 + 32), v8, v13 + 4, v8, v12 + 4, v8, v28, v29);
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v30)
  {
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v30;
    return result;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t partitioned(_:kth:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_partition(*(_QWORD *)(result + 16), a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t partitioned(_:kth:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_partition_all(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t radians(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_radians(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t remainder<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_remainder(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sigmoid(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sigmoid(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sign(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sign(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sinh(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sinh(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sorted(_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_sort(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sorted(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sort_all(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std(_:axes:keepDims:ddof:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v8 = *a5;
  v9 = *(_QWORD *)(a1 + 16);
  result = Array<A>.asInt32.getter(a2);
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = mlx_std(v9, (const void *)(result + 32), *(_QWORD *)(a2 + 16), a3 & 1, a4, *(_QWORD *)(v8 + 16));
  result = swift_bridgeObjectRelease();
  if (v11)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t std(_:axis:keepDims:ddof:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = *a5;
  result = *(_QWORD *)(result + 16);
  v7 = a2;
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)mlx_std(result, &v7, 1uLL, a3 & 1, a4, *(_QWORD *)(v5 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t std(_:keepDims:ddof:stream:)(uint64_t result, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_std_all(*(_QWORD *)(result + 16), a2 & 1, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t stacked(_:axis:stream:)(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a3;
  result = (uint64_t)mlx_vector_array_new();
  v7 = result;
  if (!result)
    goto LABEL_24;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_2425A0128();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v21 = MEMORY[0x24BEE4AF8];
    result = sub_242509AC8(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v9 = v21;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v8; ++i)
      {
        v11 = *(_QWORD *)(MEMORY[0x2426A7C70](i, a1) + 16);
        swift_unknownObjectRelease();
        v13 = *(_QWORD *)(v21 + 16);
        v12 = *(_QWORD *)(v21 + 24);
        if (v13 >= v12 >> 1)
          sub_242509AC8(v12 > 1, v13 + 1, 1);
        *(_QWORD *)(v21 + 16) = v13 + 1;
        *(_QWORD *)(v21 + 8 * v13 + 32) = v11;
      }
    }
    else
    {
      v14 = a1 + 32;
      v15 = *(_QWORD *)(v21 + 16);
      v16 = v8;
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)v14 + 16);
        v18 = *(_QWORD *)(v21 + 24);
        if (v15 >= v18 >> 1)
          sub_242509AC8(v18 > 1, v15 + 1, 1);
        *(_QWORD *)(v21 + 16) = v15 + 1;
        *(_QWORD *)(v21 + 8 * v15 + 32) = v17;
        v14 += 8;
        ++v15;
        --v16;
      }
      while (v16);
    }
  }
  mlx_vector_array_add_arrays(v7, (uint64_t *)(v9 + 32), v8);
  result = swift_bridgeObjectRelease();
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = (uint64_t)mlx_stack(v7, (mlx::core *)a2, *(_QWORD *)(v5 + 16));
  v19 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v19;
    mlx_free(v7);
    return v20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t stopGradient(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_stop_gradient(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t subtract<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a3;
  v8 = toArrays<A, B>(_:_:)(a1, a2, a4, a5, a6, a7);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(v8 + 16), *(_QWORD *)(v9 + 16), *(_QWORD *)(v7 + 16));
  v11 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t takeAlong(_:_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = mlx_take_along_axis(*(_QWORD *)(result + 16), *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t takeAlong(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = Array<A>.asInt32.getter((uint64_t)&unk_251353730);
  v7 = mlx_reshape(v5, (const void *)(v6 + 32), 1uLL, *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    result = mlx_take_along_axis(v7, *(_QWORD *)(a2 + 16), 0, *(_QWORD *)(v4 + 16));
    v9 = result;
    if (result)
    {
      mlx_free(v7);
      type metadata accessor for MLXArray();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v9;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t tan(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_tan(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t tanh(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_tanh(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t tensordot(_:_:axes:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = mlx_tensordot_along_axis(*(_QWORD *)(result + 16), *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t tensordot(_:_:axes:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v11 = *a7;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2425C4B90;
  *(_QWORD *)(inited + 32) = a3;
  *(_QWORD *)(inited + 40) = a4;
  v15 = Array<A>.asInt32.getter(inited);
  swift_setDeallocating();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_2425C4B90;
  *(_QWORD *)(v16 + 32) = a5;
  *(_QWORD *)(v16 + 40) = a6;
  v17 = Array<A>.asInt32.getter(v16);
  swift_setDeallocating();
  v18 = mlx_tensordot(v12, v13, (const void *)(v15 + 32), 2uLL, (const void *)(v17 + 32), 2uLL, *(_QWORD *)(v11 + 16));
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v18)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t tiled(_:repetitions:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = Array<A>.asInt32.getter(a2);
  v7 = mlx_tile(v5, (const void *)(v6 + 32), *(_QWORD *)(a2 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t tiled(_:repetitions:stream:)(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = *a3;
  v4 = *(_QWORD *)(result + 16);
  v6 = a2;
  result = mlx_tile(v4, &v6, 1uLL, *(_QWORD *)(v3 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t top(_:k:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_topk(*(_QWORD *)(result + 16), a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t top(_:k:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_topk_all(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _s8Morpheus5where___6streamAA8MLXArrayCAE_xq_AA14StreamOrDeviceVtAA06ScalarF5ArrayRzAaHR_r0_lF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v9 = *a4;
  v10 = toArrays<A, B>(_:_:)(a2, a3, a5, a6, a7, a8);
  result = (uint64_t)mlx_where(*(_QWORD *)(a1 + 16), *(_QWORD *)(v10 + 16), *(_QWORD *)(v11 + 16), *(_QWORD *)(v9 + 16));
  v13 = result;
  if (result)
  {
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_24253A9F4(_BYTE *a1, float a2)
{
  int v4;
  unsigned int v5;
  int v6;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = (LODWORD(a2) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    v7 = 0;
    result = 1;
    goto LABEL_24;
  }
  LOBYTE(v6) = 0;
  v7 = 1;
  if (v4 == 255)
  {
    result = 0;
  }
  else
  {
    result = 0;
    if (a2 > -1.0)
    {
      v9 = sub_24259FDB0();
      if (v9 > 7)
      {
        LOBYTE(v6) = 0;
        result = 0;
        v7 = 1;
        goto LABEL_24;
      }
      v10 = v9;
      v11 = sub_24259FDA4();
      v12 = v11 + __clz(__rbit32(v5));
      v13 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 7)
        {
          if (v13 < -8 || v13 > 8)
          {
LABEL_9:
            LOBYTE(v6) = 0;
            LOBYTE(v14) = 0;
            if ((v10 & 0x8000000000000000) == 0)
              goto LABEL_22;
            goto LABEL_23;
          }
          if (v13 < 0)
          {
            if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8)
              goto LABEL_9;
            v6 = LOBYTE(a2) >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v13 >= 8)
              goto LABEL_9;
            v6 = LODWORD(a2) << v13;
          }
LABEL_20:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_22:
            v14 = 1 << v10;
            goto LABEL_23;
          }
          LOBYTE(v14) = 0;
LABEL_23:
          v7 = 0;
          LOBYTE(v6) = v6 | v14;
          result = v10 >= v11;
          goto LABEL_24;
        }
        if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
        {
LABEL_13:
          LOBYTE(v6) = 0;
          goto LABEL_20;
        }
        if ((v13 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v13 < 0x20)
          {
            v6 = v5 << v13;
            goto LABEL_20;
          }
          goto LABEL_13;
        }
      }
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0)
        LOBYTE(v6) = 0;
      else
        v6 = v5 >> (v12 - v10);
      goto LABEL_20;
    }
  }
LABEL_24:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

BOOL sub_24253AB68(uint64_t a1, float a2)
{
  int v3;
  unsigned int v4;
  int v5;
  char v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;

  v3 = (LODWORD(a2) >> 23);
  v4 = LODWORD(a2) & 0x7FFFFF;
  v5 = v3 | LODWORD(a2) & 0x7FFFFF;
  if (v5)
  {
    v5 = 0;
    v6 = 1;
    if (v3 == 255)
    {
      result = 0;
    }
    else
    {
      result = 0;
      if (a2 > -1.0)
      {
        v8 = sub_24259FDB0();
        if (v8 <= 31)
        {
          v9 = v8;
          v10 = sub_24259FDA4();
          v11 = v10 + __clz(__rbit32(v4));
          v12 = v9 - v11;
          if (__OFSUB__(v9, v11))
          {
            __break(1u);
          }
          else
          {
            if (v11 > 31)
            {
              if (v12 < -32 || v12 > 32)
                goto LABEL_13;
            }
            else if (v12 < -32 || v12 > 32)
            {
              goto LABEL_13;
            }
            if ((v12 & 0x8000000000000000) == 0)
            {
              if ((unint64_t)v12 < 0x20)
              {
                v13 = v4 << v12;
                if (v9 < 0)
                {
LABEL_18:
                  v14 = 0;
                  goto LABEL_25;
                }
LABEL_24:
                v14 = 1 << v9;
                goto LABEL_25;
              }
              goto LABEL_13;
            }
          }
          if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFE0)
          {
            v13 = v4 >> (v11 - v9);
            if (v9 < 0)
              goto LABEL_18;
            goto LABEL_24;
          }
LABEL_13:
          v13 = 0;
          v14 = 0;
          if (v9 < 0)
          {
LABEL_25:
            v6 = 0;
            v5 = v13 | v14;
            result = v9 >= v10;
            goto LABEL_26;
          }
          goto LABEL_24;
        }
        v5 = 0;
        result = 0;
        v6 = 1;
      }
    }
  }
  else
  {
    v6 = 0;
    result = 1;
  }
LABEL_26:
  *(_DWORD *)a1 = v5;
  *(_BYTE *)(a1 + 4) = v6;
  return result;
}

BOOL sub_24253ACB0(_BYTE *a1, float a2)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;

  v5 = (LODWORD(a2) >> 23);
  v6 = LODWORD(a2) & 0x7FFFFF;
  v7 = v5 | LODWORD(a2) & 0x7FFFFF;
  if (!v7)
  {
    LOBYTE(v15) = 0;
    result = 1;
    goto LABEL_28;
  }
  if (v5 == 255 || (v8 = sub_24259FDB0(), v8 > 7))
  {
LABEL_37:
    LOBYTE(v15) = 0;
    result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_28;
  }
  v9 = v8;
  v10 = sub_24259FDA4();
  result = v9 >= v10;
  v12 = v10 + __clz(__rbit32(v6));
  v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 > 7)
  {
    if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
    {
LABEL_12:
      LOBYTE(v13) = 0;
      goto LABEL_19;
    }
    if (v13 < 0)
    {
      v16 = v6 >> (v12 - v9);
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0)
        LOBYTE(v13) = 0;
      else
        LOBYTE(v13) = v16;
    }
    else
    {
      if ((unint64_t)v13 >= 0x20)
        goto LABEL_12;
      LODWORD(v13) = v6 << v13;
    }
LABEL_19:
    if (v9 != 7)
    {
      if (v9 < 0)
      {
        LOBYTE(v14) = 0;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_30:
    if (a2 >= 0.0 || (_BYTE)v13)
      goto LABEL_37;
    goto LABEL_32;
  }
  if (v13 >= -8 && v13 <= 8)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8)
        goto LABEL_8;
      LODWORD(v13) = LOBYTE(a2) >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 8)
        goto LABEL_8;
      LODWORD(v13) = LODWORD(a2) << v13;
    }
    goto LABEL_19;
  }
LABEL_8:
  if (v9 == 7)
    goto LABEL_36;
  LOBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0)
LABEL_22:
    v14 = 1 << v9;
LABEL_23:
  v15 = (char)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (a2 >= 0.0)
      goto LABEL_37;
LABEL_32:
    LOBYTE(v7) = 0;
    LOBYTE(v15) = 0x80;
    goto LABEL_28;
  }
  LOBYTE(v7) = 0;
  v15 = -v15;
LABEL_28:
  *a1 = v15;
  a1[1] = v7;
  return result;
}

BOOL sub_24253AE64(uint64_t a1, float a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v4 = (LODWORD(a2) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    LODWORD(v12) = 0;
    result = 1;
    goto LABEL_25;
  }
  if (v4 == 255)
    goto LABEL_28;
  v7 = sub_24259FDB0();
  if (v7 > 31)
    goto LABEL_28;
  v8 = v7;
  v9 = sub_24259FDA4();
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit32(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      LODWORD(v12) = 0x80000000;
      goto LABEL_25;
    }
LABEL_28:
    LODWORD(v12) = 0;
    result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 31)
  {
    if (v12 < -32 || v12 > 32)
      goto LABEL_11;
  }
  else if (v12 < -32 || v12 > 32)
  {
    goto LABEL_11;
  }
  if (v12 < 0)
    goto LABEL_32;
  if ((unint64_t)v12 < 0x20)
  {
    v14 = v5 << v12;
    if (v8 != 31)
      goto LABEL_17;
LABEL_34:
    if (a2 < 0.0 && !v14)
      goto LABEL_36;
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 31)
    goto LABEL_27;
  v13 = 0;
  v14 = 0;
  if (v8 < 0)
    goto LABEL_20;
LABEL_19:
  v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    v12 = v14 | v13;
    if (a2 >= 0.0)
      break;
    if ((v12 & 0x80000000) == 0)
    {
      LOBYTE(v6) = 0;
      LODWORD(v12) = -(int)v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0)
      goto LABEL_11;
    v14 = v5 >> -(char)v12;
    if (v8 == 31)
      goto LABEL_34;
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_19;
    v13 = 0;
  }
  if ((v12 & 0x80000000) != 0)
    goto LABEL_31;
  LOBYTE(v6) = 0;
LABEL_25:
  *(_DWORD *)a1 = v12;
  *(_BYTE *)(a1 + 4) = v6;
  return result;
}

BOOL sub_24253AFE8(uint64_t a1, float a2)
{
  int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = (LODWORD(a2) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = v4 | LOBYTE(a2);
  if (!(v4 | v5))
  {
    v14 = 0;
    result = 1;
    goto LABEL_26;
  }
  if (v4 == 255 || (v7 = sub_24259FDB0(), v7 > 63))
  {
LABEL_38:
    v14 = 0;
    result = 0;
    v6 = 1;
    goto LABEL_26;
  }
  v8 = v7;
  v9 = sub_24259FDA4();
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit32(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v11 > 63)
  {
    if ((unint64_t)(v12 - 33) < 0xFFFFFFFFFFFFFFBFLL)
      goto LABEL_12;
    if (v12 < 0)
    {
      if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0)
        LODWORD(v12) = 0;
      else
        LODWORD(v12) = v5 >> (v11 - v8);
      goto LABEL_16;
    }
    if ((unint64_t)v12 >= 0x20)
LABEL_12:
      LODWORD(v12) = 0;
    else
      LODWORD(v12) = (_DWORD)v5 << v12;
LABEL_16:
    v12 = v12;
LABEL_17:
    if (v8 != 63)
    {
      if (v8 < 0)
      {
        v13 = 0;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_31:
    if (a2 >= 0.0 || v12)
      goto LABEL_38;
    goto LABEL_33;
  }
  if (v12 >= -64 && v12 <= 64)
  {
    if (v12 < 0)
    {
      if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0)
        goto LABEL_8;
      v12 = v5 >> (v11 - v8);
    }
    else
    {
      if ((unint64_t)v12 >= 0x40)
        goto LABEL_8;
      v12 = v5 << v12;
    }
    goto LABEL_17;
  }
LABEL_8:
  if (v8 == 63)
    goto LABEL_37;
  v13 = 0;
  v12 = 0;
  if ((v8 & 0x8000000000000000) == 0)
LABEL_20:
    v13 = 1 << v8;
LABEL_21:
  v14 = v12 | v13;
  if (a2 >= 0.0)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      v6 = 0;
      goto LABEL_26;
    }
    goto LABEL_36;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0)
      goto LABEL_38;
LABEL_33:
    v6 = 0;
    v14 = 0x8000000000000000;
    goto LABEL_26;
  }
  v6 = 0;
  v14 = -(uint64_t)v14;
LABEL_26:
  *(_QWORD *)a1 = v14;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

unint64_t sub_24253B194()
{
  unint64_t result;

  result = qword_2571FC940;
  if (!qword_2571FC940)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2571FC940);
  }
  return result;
}

unint64_t sub_24253B1DC()
{
  unint64_t result;

  result = qword_2571FC948;
  if (!qword_2571FC948)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for ConvolveMode, &type metadata for ConvolveMode);
    atomic_store(result, (unint64_t *)&qword_2571FC948);
  }
  return result;
}

unint64_t sub_24253B224()
{
  unint64_t result;

  result = qword_2571FC950;
  if (!qword_2571FC950)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for MeshGridIndexing, &type metadata for MeshGridIndexing);
    atomic_store(result, (unint64_t *)&qword_2571FC950);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConvolveMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConvolveMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24253B350 + 4 * byte_2425C4F55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24253B384 + 4 * byte_2425C4F50[v4]))();
}

uint64_t sub_24253B384(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24253B38C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24253B394);
  return result;
}

uint64_t sub_24253B3A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24253B3A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24253B3AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24253B3B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24253B3C0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_24253B3C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConvolveMode()
{
  return &type metadata for ConvolveMode;
}

uint64_t getEnumTagSinglePayload for MeshGridIndexing(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshGridIndexing(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24253B4BC + 4 * byte_2425C4F5F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24253B4F0 + 4 * byte_2425C4F5A[v4]))();
}

uint64_t sub_24253B4F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24253B4F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24253B500);
  return result;
}

uint64_t sub_24253B50C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24253B514);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24253B518(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24253B520(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_24253B52C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MeshGridIndexing()
{
  return &type metadata for MeshGridIndexing;
}

unint64_t sub_24253B548()
{
  unint64_t result;

  result = qword_2571FC960;
  if (!qword_2571FC960)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&qword_2571FC960);
  }
  return result;
}

unint64_t sub_24253B58C()
{
  unint64_t result;

  result = qword_2571FC968;
  if (!qword_2571FC968)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE4040], MEMORY[0x24BEE4008]);
    atomic_store(result, (unint64_t *)&qword_2571FC968);
  }
  return result;
}

unint64_t sub_24253B5D0()
{
  unint64_t result;

  result = qword_2571FC970;
  if (!qword_2571FC970)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE3E78], MEMORY[0x24BEE3E50]);
    atomic_store(result, (unint64_t *)&qword_2571FC970);
  }
  return result;
}

unint64_t sub_24253B614()
{
  unint64_t result;

  result = qword_2571FC978;
  if (!qword_2571FC978)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&qword_2571FC978);
  }
  return result;
}

unint64_t sub_24253B658()
{
  unint64_t result;

  result = qword_2571FC980;
  if (!qword_2571FC980)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2571FC980);
  }
  return result;
}

unint64_t sub_24253B69C()
{
  unint64_t result;

  result = qword_2571FC988;
  if (!qword_2571FC988)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&qword_2571FC988);
  }
  return result;
}

unint64_t sub_24253B6E0()
{
  unint64_t result;

  result = qword_2571FC990;
  if (!qword_2571FC990)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE4048], MEMORY[0x24BEE4008]);
    atomic_store(result, (unint64_t *)&qword_2571FC990);
  }
  return result;
}

unint64_t sub_24253B724()
{
  unint64_t result;

  result = qword_2571FC998;
  if (!qword_2571FC998)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE3FD8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&qword_2571FC998);
  }
  return result;
}

unint64_t sub_24253B768()
{
  unint64_t result;

  result = qword_2571FC9A0;
  if (!qword_2571FC9A0)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE3E80], MEMORY[0x24BEE3E50]);
    atomic_store(result, (unint64_t *)&qword_2571FC9A0);
  }
  return result;
}

unint64_t sub_24253B7AC()
{
  unint64_t result;

  result = qword_2571FC9A8;
  if (!qword_2571FC9A8)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&qword_2571FC9A8);
  }
  return result;
}

unint64_t sub_24253B7F0()
{
  unint64_t result;

  result = qword_2571FC9B0;
  if (!qword_2571FC9B0)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE42A0], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&qword_2571FC9B0);
  }
  return result;
}

uint64_t Int.pow(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;

  if (a2 == (int)a2)
  {
    v2 = result;
    result = mlx_array_from_int(a2);
    v3 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v3;
      sub_242588564(5, inited, v2);
      swift_setDeallocating();
      return mlx_free(v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24253B8F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = *v1;
  if (*v1 == (int)*v1)
  {
    result = mlx_array_from_int(result);
    v4 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v4;
      sub_242588564(5, inited, a1);
      swift_setDeallocating();
      return mlx_free(v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Int32.pow(_:)(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(5, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24253BA68(uint64_t a1)
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(5, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t UInt32.pow(_:)(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(5, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_24253BC08(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x24253BC10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24253BC28(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = *v1;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(5, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_24253BD18(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x24253BD20);
  }
  _Unwind_Resume(a1);
}

uint64_t Float.pow(_:)(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(5, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24253BDE8(uint64_t a1)
{
  float *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(5, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Double.pow(_:)(uint64_t a1, double a2)
{
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = a2;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(5, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24253BF50(uint64_t a1)
{
  double *v1;
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = *v1;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(5, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.pow(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v5 = *v2;
  v12 = 7;
  result = (uint64_t)sub_24256BFA4(a1, &v12);
  if (!v3)
  {
    v7 = result;
    result = (uint64_t)mlx_default_device();
    v8 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v9 = result;
      if (result)
      {
        mlx_free(v8);
        result = (uint64_t)mlx_power(v2[2], *(_QWORD *)(v7 + 16), v9);
        v10 = result;
        if (result)
        {
          mlx_free(v9);
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = v10;
          a2[3] = v5;
          result = swift_release();
          *a2 = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_24253C0EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLXArray.pow(_:)(a1, a2);
}

uint64_t dispatch thunk of Exponentiable.pow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t abs(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_abs(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t all(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_all_axes(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t all(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_all_axis(*(_QWORD *)(result + 16), a2, a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t all(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_all_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t allClose<A>(_:_:rtol:atol:equalNaN:stream:)(uint64_t a1, double a2, double a3, uint64_t a4, char a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t dtype;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v14 = *a6;
  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v19);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a8 + 8))(&v19, a7, a8);
  result = (uint64_t)mlx_allclose(*(_QWORD *)(a1 + 16), *(_QWORD *)(v16 + 16), a5 & 1, *(_QWORD *)(v14 + 16), a2, a3);
  v18 = result;
  if (result)
  {
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t any(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_any(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t any(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a4;
  v5 = *(_QWORD *)(result + 16);
  v7 = a2;
  result = (uint64_t)mlx_any(v5, &v7, 1uLL, a3 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t any(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_any_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t argMax(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_argmax(*(_QWORD *)(result + 16), a2, a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t argMax(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_argmax_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t argMin(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_argmin(*(_QWORD *)(result + 16), a2, a3 & 1, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t argMin(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_argmin_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t arrayEqual<A>(_:_:equalNAN:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t dtype;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;

  v10 = *a4;
  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v15);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a6 + 8))(&v15, a5, a6);
  result = (uint64_t)mlx_array_equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(v12 + 16), a3 & 1, *(_QWORD *)(v10 + 16));
  v14 = result;
  if (result)
  {
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t cos(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_cos(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t cummax(_:axis:reverse:inclusive:stream:)(uint64_t result, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cummax(*(_QWORD *)(result + 16), a2, a3 & 1, a4 & 1, *(_QWORD *)(*(_QWORD *)a5 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t cummax(_:reverse:inclusive:stream:)(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a4;
  result = mlx_reshape(*(_QWORD *)(a1 + 16), &unk_251353778, 1uLL, *(_QWORD *)(*a4 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cummax(result, 0, a2 & 1, a3 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t cummin(_:axis:reverse:inclusive:stream:)(uint64_t result, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cummin(*(_QWORD *)(result + 16), a2, a3 & 1, a4 & 1, *(_QWORD *)(*(_QWORD *)a5 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t cummin(_:reverse:inclusive:stream:)(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a4;
  result = mlx_reshape(*(_QWORD *)(a1 + 16), &unk_2513537A0, 1uLL, *(_QWORD *)(*a4 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cummin(result, 0, a2 & 1, a3 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t cumprod(_:axis:reverse:inclusive:stream:)(uint64_t result, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cumprod(*(_QWORD *)(result + 16), a2, a3 & 1, a4 & 1, *(_QWORD *)(*(_QWORD *)a5 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t cumprod(_:reverse:inclusive:stream:)(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a4;
  result = mlx_reshape(*(_QWORD *)(a1 + 16), &unk_2513537C8, 1uLL, *(_QWORD *)(*a4 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cumprod(result, 0, a2 & 1, a3 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t cumsum(_:axis:reverse:inclusive:stream:)(uint64_t result, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_cumsum(*(_QWORD *)(result + 16), a2, a3 & 1, a4 & 1, *(_QWORD *)(*(_QWORD *)a5 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t cumsum(_:reverse:inclusive:stream:)(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a4;
  result = mlx_reshape(*(_QWORD *)(a1 + 16), &unk_2513537F0, 1uLL, *(_QWORD *)(*a4 + 16));
  v8 = result;
  if (result)
  {
    result = (uint64_t)mlx_cumsum(result, 0, a2 & 1, a3 & 1, *(_QWORD *)(v6 + 16));
    v9 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      mlx_free(v8);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t diag(_:k:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_diag(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t diagonal(_:offset:axis1:axis2:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_11;
  if (a4 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = (uint64_t)mlx_diagonal(*(_QWORD *)(result + 16), a2, a3, a4, *(_QWORD *)(*(_QWORD *)a5 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t exp(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_exp(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t flattened(_:start:end:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_flatten(*(_QWORD *)(result + 16), a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t floor(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_floor(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t floorDivide<A>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t dtype;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  v8 = *a3;
  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 8))(&v13, a4, a5);
  result = (uint64_t)mlx_floor_divide(*(_QWORD *)(a1 + 16), *(_QWORD *)(v10 + 16), *(_QWORD *)(v8 + 16));
  v12 = result;
  if (result)
  {
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t log(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t log2(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log2(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t log10(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log10(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t log1p(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_log1p(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t logSumExp(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_logsumexp(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t logSumExp(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a4;
  v5 = *(_QWORD *)(result + 16);
  v7 = a2;
  result = (uint64_t)mlx_logsumexp(v5, &v7, 1uLL, a3 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t logSumExp(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_logsumexp_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t matmul(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = mlx_matmul(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t max(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_max(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t max(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a4;
  v5 = *(_QWORD *)(result + 16);
  v7 = a2;
  result = mlx_max(v5, &v7, 1uLL, a3 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t max(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = mlx_max_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t mean(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_mean(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t mean(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a4;
  v5 = *(_QWORD *)(result + 16);
  v7 = a2;
  result = (uint64_t)mlx_mean(v5, &v7, 1uLL, a3 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t mean(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_mean_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t min(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_min(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t min(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a4;
  v5 = *(_QWORD *)(result + 16);
  v7 = a2;
  result = mlx_min(v5, &v7, 1uLL, a3 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t min(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = mlx_min_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t movedAxis(_:source:destination:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_moveaxis(*(_QWORD *)(result + 16), a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t pow(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_power(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t pow<A>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t dtype;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  v8 = *a3;
  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  sub_242553C80(dtype, &v13);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 8))(&v13, a4, a5);
  result = (uint64_t)mlx_power(*(_QWORD *)(a1 + 16), *(_QWORD *)(v10 + 16), *(_QWORD *)(v8 + 16));
  v12 = result;
  if (result)
  {
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t pow<A>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t dtype;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  v4 = *a3;
  dtype = mlx_array_get_dtype(*(_QWORD *)(a2 + 16));
  sub_242553C80(dtype, &v10);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v4 + 16);
  swift_retain();
  result = (uint64_t)mlx_power(v6, v6, v7);
  v9 = result;
  if (result)
  {
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t product(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_prod(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t product(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a4;
  v5 = *(_QWORD *)(result + 16);
  v7 = a2;
  result = (uint64_t)mlx_prod(v5, &v7, 1uLL, a3 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t product(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_prod_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t reciprocal(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_reciprocal(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s8Morpheus8reshaped__6streamAA8MLXArrayCAE_SaySiGAA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = Array<A>.asInt32.getter(a2);
  v7 = mlx_reshape(v5, (const void *)(v6 + 32), *(_QWORD *)(a2 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t round(_:decimals:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_round(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t rsqrt(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_rsqrt(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sin(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sin(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t split(_:parts:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = mlx_split_equal_parts(*(_QWORD *)(result + 16), a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    v5 = sub_242507E64(result);
    mlx_free(v4);
    return v5;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t split(_:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = mlx_split_equal_parts(*(_QWORD *)(a1 + 16), 2, a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (!result)
    goto LABEL_14;
  result = sub_242507E64(result);
  v4 = result;
  if ((result & 0xC000000000000001) != 0)
  {
LABEL_11:
    v7 = MEMORY[0x2426A7C70](0, v4);
    MEMORY[0x2426A7C70](1, v4);
    goto LABEL_8;
  }
  v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    if (v6 != 1)
    {
      v7 = *(_QWORD *)(result + 32);
      swift_retain();
      swift_retain();
LABEL_8:
      swift_bridgeObjectRelease();
      mlx_free(v3);
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t split(_:indices:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  result = Array<A>.asInt32.getter(a2);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = mlx_split(v7, (const void *)(result + 32), *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    v10 = sub_242507E64(v9);
    mlx_free(v9);
    return v10;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sqrt(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_sqrt(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t square(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_square(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t squeezed(_:axes:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = Array<A>.asInt32.getter(a2);
  v7 = mlx_squeeze(v5, (const void *)(v6 + 32), *(_QWORD *)(a2 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t squeezed(_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = *a3;
  v4 = *(_QWORD *)(result + 16);
  v6 = a2;
  result = mlx_squeeze(v4, &v6, 1uLL, *(_QWORD *)(v3 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t squeezed(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = mlx_squeeze_all(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sum(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = Array<A>.asInt32.getter(a2);
  v9 = mlx_sum(v7, (const void *)(v8 + 32), *(_QWORD *)(a2 + 16), a3 & 1, *(_QWORD *)(v6 + 16));
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sum(_:axis:keepDims:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = *a4;
  v5 = *(_QWORD *)(result + 16);
  v7 = a2;
  result = (uint64_t)mlx_sum(v5, &v7, 1uLL, a3 & 1, *(_QWORD *)(v4 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sum(_:keepDims:stream:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)mlx_sum_all(*(_QWORD *)(a1 + 16), a2 & 1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t swappedAxes(_:_:_:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_swapaxes(*(_QWORD *)(result + 16), a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t take(_:_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = mlx_take(*(_QWORD *)(result + 16), *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t take(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = mlx_take_all(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)a3 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s8Morpheus10transposed_4axes6streamAA8MLXArrayCAF_SaySiGAA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = Array<A>.asInt32.getter(a2);
  v7 = mlx_transpose(v5, (const void *)(v6 + 32), *(_QWORD *)(a2 + 16), *(_QWORD *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t transposed(_:axis:stream:)(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = *a3;
  v4 = *(_QWORD *)(result + 16);
  v6 = a2;
  result = (uint64_t)mlx_transpose(v4, &v6, 1uLL, *(_QWORD *)(v3 + 16));
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t transposed(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_transpose_all(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t T(_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_transpose_all(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t variance(_:axes:keepDims:ddof:stream:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v8 = *a5;
  v9 = *(_QWORD *)(a1 + 16);
  result = Array<A>.asInt32.getter(a2);
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = mlx_var(v9, (const void *)(result + 32), *(_QWORD *)(a2 + 16), a3 & 1, a4, *(_QWORD *)(v8 + 16));
  result = swift_bridgeObjectRelease();
  if (v11)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t variance(_:axis:keepDims:ddof:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = *a5;
  result = *(_QWORD *)(result + 16);
  v7 = a2;
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)mlx_var(result, &v7, 1uLL, a3 & 1, a4, *(_QWORD *)(v5 + 16));
  v6 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variance(_:keepDims:ddof:stream:)(uint64_t result, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_var_all(*(_QWORD *)(result + 16), a2 & 1, a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(_:)(int a1)
{
  uint64_t result;
  uint64_t v2;

  result = mlx_array_from_int(a1);
  v2 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.__allocating_init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_2425406D0(a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_24259FD80();
  if (AssociatedTypeWitness == MEMORY[0x24BEE1768])
  {
    v11 = sub_2425A0080();
    swift_bridgeObjectRelease();
    v10 = sub_2425407D0(v11, a2);
  }
  else
  {
    v10 = sub_2425406D0(v9, a2, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a3);
  return v10;
}

uint64_t MLXArray.__allocating_init(_:)(uint64_t result)
{
  uint64_t v1;

  if (result == (int)result)
  {
    result = mlx_array_from_int(result);
    v1 = result;
    if (result)
    {
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];

  v12[2] = a2;
  v12[3] = a3;
  sub_24253EA10(a1, (uint64_t)sub_24254450C, (uint64_t)v12, a2, MEMORY[0x24BEE4078], MEMORY[0x24BEE27D0], MEMORY[0x24BEE40A8], a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  v10 = v12[5];
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v10;
  return result;
}

uint64_t MLXArray.__allocating_init(_:)(float a1)
{
  uint64_t result;
  uint64_t v2;

  result = mlx_array_from_float(a1);
  v2 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.__allocating_init<A>(_:dtype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_24254099C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v5;
}

uint64_t MLXArray.__allocating_init(int64:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = a1;
  v1 = mlx_array_from_data((unsigned __int8 *)v3, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 5);
  if (!v1)
    __break(1u);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

void sub_24253EA04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __break(1u);
}

uint64_t sub_24253EA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t MLXArray.__allocating_init(_:)(char a1)
{
  uint64_t result;
  uint64_t v2;

  result = mlx_array_from_BOOL(a1 & 1);
  v2 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24253EAE0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v7, a2, a3);
  result = mlx_array_from_data(a1, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, v7);
  if (result)
    *a4 = result;
  else
    __break(1u);
  return result;
}

uint64_t sub_24253EB5C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v8 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2425C4B60;
    *(_QWORD *)(v8 + 32) = MEMORY[0x2426A79DC](a2, a3);
  }
  swift_bridgeObjectRetain();
  result = sub_24259FAB0();
  if (!result)
    goto LABEL_9;
  v11 = (unsigned __int8 *)result;
  v12 = Array<A>.asInt32.getter(v8);
  v13 = *(_QWORD *)(v8 + 16);
  result = swift_bridgeObjectRelease();
  if (v13 >> 31)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  v14 = mlx_array_from_data(v11, (char *)(v12 + 32), v13, v15);
  result = swift_bridgeObjectRelease();
  if (v14)
  {
    *a5 = v14;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_2425407D0(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24253ECCC@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)result;
  if (a2)
  {
    v6 = a2;
    if (result)
      goto LABEL_3;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
  result = swift_allocObject();
  v6 = result;
  *(_OWORD *)(result + 16) = xmmword_2425C4B60;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 16);
  if (!v4)
    goto LABEL_7;
LABEL_3:
  swift_bridgeObjectRetain();
  v7 = Array<A>.asInt32.getter(v6);
  v8 = *(_QWORD *)(v6 + 16);
  result = swift_bridgeObjectRelease();
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v9 = mlx_array_from_data(v4, (char *)(v7 + 32), v8, 4);
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a4 = v9;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(int64:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 16);
  if (!a2)
    goto LABEL_7;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(a2 + 32);
    v6 = 1;
    while (1)
    {
      v7 = *v5++;
      v8 = v6 * v7;
      if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
        goto LABEL_10;
      v6 = v8;
      if (!--v4)
      {
        if (v8 != v3)
          goto LABEL_9;
        goto LABEL_7;
      }
    }
  }
  if (v3 == 1)
  {
LABEL_7:
    sub_24253F294(result + 32, a2, result, &v10);
    swift_bridgeObjectRelease();
    v9 = v10;
    swift_bridgeObjectRelease();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
    return result;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(converting:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      v6 = (uint64_t *)(a2 + 32);
      v7 = 1;
      while (1)
      {
        v8 = *v6++;
        v9 = v7 * v8;
        if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
          goto LABEL_17;
        v7 = v9;
        if (!--v5)
        {
          if (v9 != v4)
            goto LABEL_16;
          goto LABEL_7;
        }
      }
    }
    if (v4 != 1)
    {
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return result;
    }
  }
LABEL_7:
  if (v4)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_242509CF0(0, v4, 0);
    v10 = 0;
    v11 = v17;
    v12 = *(_QWORD *)(v17 + 16);
    do
    {
      v13 = *(double *)(v3 + 8 * v10 + 32);
      v17 = v11;
      v14 = *(_QWORD *)(v11 + 24);
      if (v12 >= v14 >> 1)
      {
        sub_242509CF0(v14 > 1, v12 + 1, 1);
        v11 = v17;
      }
      ++v10;
      v15 = v13;
      *(_QWORD *)(v11 + 16) = v12 + 1;
      *(float *)(v11 + 4 * v12++ + 32) = v15;
    }
    while (v4 != v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  sub_24253F000(v11 + 32, a2, v11, &v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v17;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v16;
  return result;
}

uint64_t sub_24253F000@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)result;
  if (a2)
  {
    v6 = a2;
    if (result)
      goto LABEL_3;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
  result = swift_allocObject();
  v6 = result;
  *(_OWORD *)(result + 16) = xmmword_2425C4B60;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 16);
  if (!v4)
    goto LABEL_7;
LABEL_3:
  swift_bridgeObjectRetain();
  v7 = Array<A>.asInt32.getter(v6);
  v8 = *(_QWORD *)(v6 + 16);
  result = swift_bridgeObjectRelease();
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v9 = mlx_array_from_data(v4, (char *)(v7 + 32), v8, 6);
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a4 = v9;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void MLXArray.__allocating_init(_:_:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2425A00E0();
  __break(1u);
}

uint64_t MLXArray.__allocating_init(int64:_:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *))(v6 + 16))((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_24259FD80();
  v8 = *(_QWORD *)(result + 16);
  if (!a2)
    goto LABEL_7;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(a2 + 32);
    v11 = 1;
    while (1)
    {
      v12 = *v10++;
      v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
        goto LABEL_10;
      v11 = v13;
      if (!--v9)
      {
        if (v13 != v8)
          goto LABEL_9;
        goto LABEL_7;
      }
    }
  }
  if (v8 == 1)
  {
LABEL_7:
    sub_24253F294(result + 32, a2, result, &v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v17;
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v15;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24253F294@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)result;
  if (a2)
  {
    v6 = a2;
    if (result)
      goto LABEL_3;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
  result = swift_allocObject();
  v6 = result;
  *(_OWORD *)(result + 16) = xmmword_2425C4B60;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 16);
  if (!v4)
    goto LABEL_7;
LABEL_3:
  swift_bridgeObjectRetain();
  v7 = Array<A>.asInt32.getter(v6);
  v8 = *(_QWORD *)(v6 + 16);
  result = swift_bridgeObjectRelease();
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v9 = mlx_array_from_data(v4, (char *)(v7 + 32), v8, 5);
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a4 = v9;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void MLXArray.__allocating_init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a3)
  {
    v8 = a3;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
      v10 = (uint64_t *)(a3 + 32);
      v11 = 1;
      do
      {
        v12 = *v10++;
        v13 = v11 * v12;
        if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
        {
          __break(1u);
          goto LABEL_15;
        }
        v11 = v13;
        --v9;
      }
      while (v9);
      if (v13 == a2)
        goto LABEL_10;
      goto LABEL_16;
    }
    if (a2 != 1)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2425C4B60;
    *(_QWORD *)(v8 + 32) = a2;
  }
LABEL_10:
  v14 = sub_24259FAB0();
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v15 = (unsigned __int8 *)v14;
  v16 = Array<A>.asInt32.getter(v8);
  v17 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v17 >> 31)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v19, a4, a5);
  v18 = mlx_array_from_data(v15, (char *)(v16 + 32), v17, v19);
  swift_bridgeObjectRelease();
  if (v18)
  {
    *(_QWORD *)(swift_allocObject() + 16) = v18;
    return;
  }
LABEL_18:
  __break(1u);
}

void MLXArray.__allocating_init<A>(_:_:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;

  v9 = sub_24253F528(a4, a1, a2, a5);
  MLXArray.__allocating_init<A>(_:_:)(v9, v10, a3, a5, a6);
}

uint64_t sub_24253F528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72);
  if (v4)
  {
    if (a3 - a2 != 0x8000000000000000 || v4 != -1)
      return a2;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void MLXArray.__allocating_init<A>(_:_:type:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24253F5D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v9 = v3;
  v10 = v2;
  v11 = BYTE2(v2);
  v12 = BYTE3(v2);
  v13 = BYTE4(v2);
  v14 = BYTE5(v2);
  sub_24253F830((unsigned __int8 *)&v9, (uint64_t)&v9 + BYTE6(v2), v5, v1, v4, v0, &v8);
  sub_2425443D8(v3, v2);
  v6 = v8;
  swift_bridgeObjectRelease();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v6;
  return result;
}

uint64_t sub_24253F830@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = sub_24253F528(a3, (uint64_t)a1, a2, a5);
  v14 = v13;
  if (a4)
  {
    v15 = *(_QWORD *)(a4 + 16);
    if (v15)
    {
      v16 = (uint64_t *)(a4 + 32);
      v17 = 1;
      while (1)
      {
        v18 = *v16++;
        v19 = v17 * v18;
        if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63)
          break;
        v17 = v19;
        if (!--v15)
          goto LABEL_9;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    v19 = 1;
LABEL_9:
    v20 = a4;
    if (v19 != v13)
      goto LABEL_16;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
    result = swift_allocObject();
    v20 = result;
    *(_OWORD *)(result + 16) = xmmword_2425C4B60;
    *(_QWORD *)(result + 32) = v14;
  }
  if (!a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v21 = Array<A>.asInt32.getter(v20);
  v22 = *(_QWORD *)(v20 + 16);
  result = swift_bridgeObjectRelease();
  if (v22 >> 31)
    goto LABEL_15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v24, a5, a6);
  v23 = mlx_array_from_data(a1, (char *)(v21 + 32), v22, v24);
  result = swift_bridgeObjectRelease();
  if (v23)
  {
    *a7 = v23;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

void MLXArray.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24253F9E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  uint64_t v17;
  uint64_t result;

  v17 = mlx_array_from_BOOL(objc_msgSend(v16, sel_BOOLValue));
  if (!v17)
  {
    __break(1u);
    JUMPOUT(0x24253FA00);
  }

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v17;
  return result;
}

void sub_24253FB98(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x24253FBA0);
  }
  _Unwind_Resume(a1);
}

uint64_t MLXArray.__allocating_init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_242544460(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24253FC58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_242544460(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void _s8Morpheus8MLXArrayCyACSaySo8NSNumberCG_AA5DTypeOSaySiGSgtcfC_0(unint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  if (a1 >> 62)
    goto LABEL_12;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (a3)
  {
    while (1)
    {
      v6 = *(_QWORD *)(a3 + 16);
      if (!v6)
        break;
      v7 = (uint64_t *)(a3 + 32);
      v8 = 1;
      while (1)
      {
        v9 = *v7++;
        v10 = v8 * v9;
        if ((unsigned __int128)(v8 * (__int128)v9) >> 64 != (v8 * v9) >> 63)
          break;
        v8 = v10;
        if (!--v6)
          goto LABEL_9;
      }
      __break(1u);
LABEL_12:
      v5 = sub_2425A0128();
      if (!a3)
        goto LABEL_10;
    }
    v10 = 1;
LABEL_9:
    swift_bridgeObjectRelease();
    if (v10 != v5)
    {
      __break(1u);
      JUMPOUT(0x24254065CLL);
    }
  }
LABEL_10:
  __asm { BR              X9 }
}

uint64_t sub_2425406D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = MEMORY[0x2426A79DC](a1, a3);
  if (!a2)
    goto LABEL_7;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(a2 + 32);
    v7 = 1;
    while (1)
    {
      v8 = *v6++;
      v9 = v7 * v8;
      if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
        goto LABEL_10;
      v7 = v9;
      if (!--v5)
      {
        if (v9 != result)
          goto LABEL_9;
        goto LABEL_7;
      }
    }
  }
  if (result == 1)
  {
LABEL_7:
    MEMORY[0x24BDAC7A8](result);
    sub_24259FD14();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v10;
    return result;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_2425407D0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      v6 = (uint64_t *)(a2 + 32);
      v7 = 1;
      while (1)
      {
        v8 = *v6++;
        v9 = v7 * v8;
        if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
          goto LABEL_27;
        v7 = v9;
        if (!--v5)
        {
          if (v9 != v4)
            goto LABEL_24;
          goto LABEL_7;
        }
      }
    }
    if (v4 != 1)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
LABEL_7:
  if (v4)
  {
    v10 = (int64_t *)(result + 32);
    if (*(_QWORD *)(result + 32) != (int)*(_QWORD *)(result + 32))
    {
LABEL_30:
      __break(1u);
      return result;
    }
    if (v4 != 1)
    {
      v11 = 5;
      do
      {
        v12 = v11 - 3;
        if (__OFADD__(v11 - 4, 1))
          goto LABEL_28;
        if (*(_QWORD *)(result + 8 * v11) != (int)*(_QWORD *)(result + 8 * v11))
          goto LABEL_29;
        ++v11;
      }
      while (v12 != v4);
    }
    v19 = MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v4, 0);
    v13 = v19;
    while (1)
    {
      v15 = *v10++;
      v14 = v15;
      if (v15 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_25;
      if (v14 > 0x7FFFFFFF)
        goto LABEL_26;
      v19 = v13;
      v17 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        result = sub_242509C04(v16 > 1, v17 + 1, 1);
        v13 = v19;
      }
      *(_QWORD *)(v13 + 16) = v17 + 1;
      *(_DWORD *)(v13 + 4 * v17 + 32) = v14;
      if (!--v4)
        goto LABEL_22;
    }
  }
  v13 = MEMORY[0x24BEE4AF8];
LABEL_22:
  sub_24253ECCC(v13 + 32, a2, v3, &v19);
  swift_bridgeObjectRelease();
  v18 = v19;
  type metadata accessor for MLXArray();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v18;
  return result;
}

uint64_t sub_24254099C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t result;
  char v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[7];

  v39[5] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v32 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v32 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v32 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v21 = *v20;
  v33 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v22 + 16);
  v34 = v22;
  v33((__int128 *)v39, v23, v22);
  v35 = v21;
  if (LOBYTE(v39[0]) != (_DWORD)v21)
  {
LABEL_5:
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v25(v11, a1, a3);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC938);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(&v36, (uint64_t)v39);
      __asm { BR              X9 }
    }
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    sub_2425264C4((uint64_t)&v36, &qword_2571FC958);
    v25(v8, a1, a3);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC930);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(&v36, (uint64_t)v39);
      __asm { BR              X9 }
    }
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    sub_2425264C4((uint64_t)&v36, &qword_2571FC9B8);
    v39[0] = 0;
    v39[1] = 0xE000000000000000;
    sub_24259FF84();
    v28 = v35;
    sub_24259FB70();
    v33(&v36, a3, v34);
    sub_2425A008C();
    sub_24259FB70();
    LOBYTE(v36) = v28;
    sub_2425A008C();
    LODWORD(v31) = 0;
    v30 = 223;
    sub_2425A00E0();
    __break(1u);
    JUMPOUT(0x242544310);
  }
  swift_getDynamicType();
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v19, a1, a3);
    swift_dynamicCast();
    v24 = mlx_array_from_int(v39[0]);
    if (!v24)
    {
      __break(1u);
      goto LABEL_5;
    }
  }
  else
  {
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v17, a1, a3);
      swift_dynamicCast();
      v24 = mlx_array_from_BOOL(v39[0]);
      if (v24)
        goto LABEL_16;
      __break(1u);
    }
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, a1, a3);
      swift_dynamicCast();
      v24 = mlx_array_from_float(*(float *)v39);
      if (!v24)
      {
        __break(1u);
        JUMPOUT(0x242540E24);
      }
    }
    else
    {
      MEMORY[0x24BDAC7A8](0);
      v30 = a3;
      v31 = v34;
      sub_24253EA10(a1, (uint64_t)sub_2425444D4, (uint64_t)v29, a3, MEMORY[0x24BEE4078], MEMORY[0x24BEE27D0], MEMORY[0x24BEE40A8], v26);
      v24 = v39[0];
    }
  }
LABEL_16:
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v24;
  return result;
}

void sub_242544314(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x24254431CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2425443D8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_24254441C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_242544460(uint64_t result)
{
  uint64_t v1;
  char v2[8];

  if (*(_QWORD *)(result + 16) >> 31)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)v2 = *(_QWORD *)(result + 16);
    result = mlx_array_from_data((unsigned __int8 *)(result + 32), v2, 1, 4);
    v1 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2425444D4@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_24253EAE0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2425444F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_24253EB5C(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_24254450C@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2425444D4(a1, a2);
}

uint64_t sub_242544520(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_24259FDE0();
  if (!v18)
    return sub_24259FD08();
  v19 = v18;
  v25 = v15;
  v39 = sub_24259F948();
  v32 = sub_2425A0068();
  sub_2425A0020();
  v36 = v17;
  result = sub_24259FDC8();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_24259FE4C();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_2425A0050();
      sub_24259FDEC();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t NestedDictionary.flattened(prefix:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  *(_QWORD *)(swift_allocObject() + 16) = v6;
  swift_bridgeObjectRetain();
  type metadata accessor for NestedItem(0, a3[2], a3[3], a3[4]);
  NestedItem.flattened(prefix:)(a1);
  v8 = v7;
  swift_release();
  return v8;
}

uint64_t IndentedDescription.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 16))(0, a1);
}

uint64_t indentedDescription(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  _BYTE v10[32];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_242526478(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC9C0);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(v8, (uint64_t)v11);
    v4 = v12;
    v5 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_24254DC2C((uint64_t)v8);
    sub_242526478(a1, (uint64_t)v11);
    return sub_24259FB10();
  }
  return v6;
}

void NestedItem.unwrap()()
{
  __asm { BR              X10 }
}

uint64_t sub_2425449E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_0;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = swift_projectBox();
  v0[3] = v2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_0, v3, v2);
}

uint64_t sub_242544A28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  *(_OWORD *)(v3 - 96) = *(_OWORD *)(v2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  v4 = sub_24259F9D8();
  result = sub_24259F9F0();
  v1[3] = result;
  *v1 = v4;
  return result;
}

void NestedItem.mapValues<A>(_:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  __asm { BR              X10 }
}

uint64_t sub_242544C24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  v8 = swift_allocBox();
  v4(v5);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
    return swift_deallocBox();
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
    *a1 = v8;
  }
  return result;
}

void NestedItem.mapValues<A, B, C>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[19];
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v47 = a5;
  v48 = a4;
  v41[7] = a2;
  v41[6] = a1;
  v53 = *(_QWORD *)(*(_QWORD *)(a6 + 16) - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v41[11] = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v44 = (char *)v41 - v15;
  MEMORY[0x24BDAC7A8](v14);
  swift_getTupleTypeMetadata2();
  v16 = sub_24259FE7C();
  v45 = *(_QWORD *)(v16 - 8);
  v46 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v41[15] = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v41[14] = (char *)v41 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v41[13] = (char *)v41 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v41[12] = (char *)v41 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v41[17] = (char *)v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[9] = *(_QWORD *)(a9 - 8);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v41[8] = (char *)v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v41[5] = (char *)v41 - v29;
  v51 = a7;
  v42 = sub_24259FE7C();
  v41[18] = *(_QWORD *)(v42 - 8);
  v30 = MEMORY[0x24BDAC7A8](v42);
  v41[16] = (char *)v41 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v41[10] = (char *)v41 - v32;
  v50 = a9;
  v33 = sub_24259FE7C();
  v34 = MEMORY[0x24BDAC7A8](v33);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v52 = a8;
  v38 = MEMORY[0x24BDAC7A8](v37);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v49 = a6;
  v40 = MEMORY[0x24BDAC7A8](v39);
  MEMORY[0x24BDAC7A8](v40);
  __asm { BR              X10 }
}

uint64_t sub_242545290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *(_QWORD *)(v17 - 240) = a5;
  *(_QWORD *)(v17 - 312) = a4;
  *(_QWORD *)(v17 - 232) = a3;
  *(_QWORD *)(v17 - 176) = a2;
  *(_QWORD *)(v17 - 304) = v11;
  *(_QWORD *)(v17 - 296) = v7;
  *(_QWORD *)(v17 - 256) = a1;
  *(_QWORD *)(v17 - 248) = v6;
  v19 = v8;
  v20 = v9;
  v21 = swift_projectBox();
  v22 = v20;
  v23 = v21;
  if (v22 >> 62)
  {
    *(_QWORD *)(v17 - 280) = v19;
    v33 = v16;
    v34 = v12;
    v35 = *(_QWORD *)(v17 - 184);
    if (v22 >> 62 != 3 || v22 != 0xC000000000000000)
    {
      *(_QWORD *)(v17 - 136) = 0;
      *(_QWORD *)(v17 - 128) = 0xE000000000000000;
      v66 = *(_QWORD *)(v17 - 280);
      v67 = v22;
      swift_retain();
      swift_retain();
      sub_24259FF84();
      v68 = *(_QWORD *)(v17 - 128);
      *(_QWORD *)(v17 - 136) = *(_QWORD *)(v17 - 136);
      *(_QWORD *)(v17 - 128) = v68;
      sub_24259FB70();
      *(_QWORD *)(v17 - 152) = v66;
      v69 = *(_QWORD *)(v17 - 208);
      MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, v69);
      sub_2425A0230();
      sub_24259FB70();
      *(_QWORD *)(v17 - 152) = v67;
      v70 = type metadata accessor for NestedItem(0, v34, *(_QWORD *)(v17 - 192), *(_QWORD *)(v69 + 32));
      MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, v70);
      sub_2425A0230();
      sub_2425A00E0();
      __break(1u);
      JUMPOUT(0x2425469B4);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v10, v21, v33);
    v36 = *(_QWORD *)(v17 - 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v14 + 56))(v36, 1, 1, *(_QWORD *)(v17 - 192));
    swift_retain();
    v37 = *(_QWORD *)(v17 - 168);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v17 - 216))(*(_QWORD *)(v17 - 240), a6, v10, v36);
    if (v37)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v17 - 272) + 8))(v36, *(_QWORD *)(v17 - 264));
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v33);
      return swift_release();
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v17 - 272) + 8))(v36, *(_QWORD *)(v17 - 264));
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v33);
      v46 = *(_QWORD *)(v17 - 296);
      v47 = *(_QWORD *)(v17 - 312);
      v48 = *(_QWORD *)(v17 - 256);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v47, a6, v48);
      v49 = *(_QWORD *)(v17 - 344);
      v50 = *(_QWORD *)(v17 - 200);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v50) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
        v51 = swift_allocBox();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 248) + 32))(v52, *(_QWORD *)(v17 - 240), v35);
        result = swift_release();
        **(_QWORD **)(v17 - 368) = v51;
        **(_QWORD **)(v17 - 360) = 0xC000000000000000;
      }
      else
      {
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
        v61 = *(_QWORD *)(v17 - 376);
        v60(v61, v47, v50);
        v62 = swift_allocBox();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 248) + 32))(v63, *(_QWORD *)(v17 - 240), v35);
        **(_QWORD **)(v17 - 368) = v62;
        v64 = swift_allocBox();
        v60(v65, v61, v50);
        result = swift_release();
        **(_QWORD **)(v17 - 360) = v64;
      }
    }
  }
  else
  {
    *(_QWORD *)(v17 - 208) = v22;
    v24 = swift_projectBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v23, v16);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    v26 = *(_QWORD *)(v17 - 280);
    v27 = *(_QWORD *)(v17 - 192);
    v25(v26, v24, v27);
    v28 = *(_QWORD *)(v17 - 288);
    v25(v28, v26, v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, v27);
    v29 = v19 & 0x3FFFFFFFFFFFFFFFLL;
    v30 = *(_QWORD *)(v17 - 208) & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    *(_QWORD *)(v17 - 208) = v29;
    swift_retain();
    v31 = *(_QWORD *)(v17 - 168);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v17 - 216))(*(_QWORD *)(v17 - 176), *(_QWORD *)(v17 - 232), v15, v28);
    if (v31)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v17 - 272) + 8))(v28, *(_QWORD *)(v17 - 264));
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v26, v27);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v16);
      swift_release();
      return swift_release();
    }
    else
    {
      *(_QWORD *)(v17 - 216) = v30;
      *(_QWORD *)(v17 - 168) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v17 - 272) + 8))(v28, *(_QWORD *)(v17 - 264));
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v26, v27);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v16);
      v38 = *(_QWORD *)(v17 - 296);
      v39 = *(_QWORD *)(v17 - 304);
      v40 = *(_QWORD *)(v17 - 256);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v38 + 32))(v39, *(_QWORD *)(v17 - 232), v40);
      v41 = *(_QWORD *)(v17 - 344);
      v42 = *(_QWORD *)(v17 - 200);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v42) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
        v43 = *(_QWORD *)(v17 - 184);
        v44 = swift_allocBox();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 248) + 32))(v45, *(_QWORD *)(v17 - 176), v43);
        swift_release();
        result = swift_release();
        **(_QWORD **)(v17 - 368) = v44;
        **(_QWORD **)(v17 - 360) = 0xC000000000000000;
      }
      else
      {
        v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32);
        v54 = *(_QWORD *)(v17 - 352);
        v53(v54, v39, v42);
        v55 = *(_QWORD *)(v17 - 184);
        v56 = swift_allocBox();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 248) + 32))(v57, *(_QWORD *)(v17 - 176), v55);
        **(_QWORD **)(v17 - 368) = v56;
        v58 = swift_allocBox();
        v53(v59, v54, v42);
        swift_release();
        result = swift_release();
        **(_QWORD **)(v17 - 360) = v58;
      }
    }
  }
  return result;
}

void sub_2425469C4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v18 = *a1;
  v19 = a9 + 8;
  v21[0] = 0xC000000000000000;
  v21[1] = v18;
  v20 = type metadata accessor for NestedItem(0, a4, a5, a10);
  NestedItem.mapValues<A, B, C>(_:_:)(a9, v19, (uint64_t)v21, a2, a3, v20, a6, a7, a8);
  if (v11)
    *a11 = v11;
}

uint64_t sub_242546A80(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;

  v74 = a8;
  v75 = a7;
  v72 = a5;
  v73 = a6;
  v64 = a3;
  v65 = a2;
  v66 = a1;
  v67 = a16;
  v17 = sub_24259FE7C();
  v68 = *(_QWORD *)(v17 - 8);
  v69 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v59 - v21;
  v70 = a15;
  v23 = sub_24259FE7C();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v59 - v29;
  v71 = a14;
  v31 = *(_QWORD *)(a14 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v59 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v76;
  result = ((uint64_t (*)(char *, char *, char *, uint64_t, uint64_t, char *))v75)(v33, v30, v22, a4, v72, v73);
  if (!v34)
  {
    v60 = v20;
    v61 = v27;
    v75 = v24;
    v73 = v22;
    v76 = v23;
    v36 = v69;
    v37 = v71;
    v38 = swift_allocBox();
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 16);
    v74 = v33;
    v39(v40, v33, v37);
    v41 = v70;
    v42 = *(_QWORD *)(v70 - 8);
    v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
    v44 = v43(v30, 1, v70);
    v72 = v38;
    v63 = v30;
    if (v44 == 1)
    {
      v45 = v31;
      v62 = 0xC000000000000000;
    }
    else
    {
      v46 = v61;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v61, v30, v76);
      if (v43(v46, 1, v41) == 1)
      {
        swift_release();
        __break(1u);
        goto LABEL_13;
      }
      v45 = v31;
      v62 = swift_allocBox();
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v47, v46, v41);
    }
    v48 = v36;
    v50 = v73;
    v49 = v74;
    v51 = v67;
    v52 = *(_QWORD *)(v67 - 8);
    v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
    v54 = v53(v73, 1, v67);
    v55 = v68;
    if (v54 == 1)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v71);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v48);
      result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v63, v76);
      v56 = 0xC000000000000000;
LABEL_10:
      *v66 = v72;
      *v65 = v62;
      *v64 = v56;
      return result;
    }
    v57 = v60;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v60, v50, v48);
    if (v53(v57, 1, v51) != 1)
    {
      v56 = swift_allocBox();
      v70 = v58;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v74, v71);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v48);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v63, v76);
      result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v70, v57, v51);
      goto LABEL_10;
    }
LABEL_13:
    swift_release();
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_242546DF8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  uint64_t v41;
  unint64_t v42;
  _QWORD v43[2];
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v17 = a17;
  v18 = a9;
  type metadata accessor for NestedItem(0, a9, a14, a17);
  v50 = sub_24259F948();
  type metadata accessor for NestedItem(0, a9, a15, a17);
  v49 = sub_24259F948();
  type metadata accessor for NestedItem(0, a9, a16, a17);
  v48 = sub_24259F948();
  v19 = type metadata accessor for NestedItem(255, a9, a11, a17);
  v20 = sub_24259FD68();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE12C8], v20);
  sub_24259FC30();
  v47 = v45;
  sub_2425A011C();
  sub_2425A00F8();
  sub_2425A0110();
  sub_2425A0104();
  v21 = v46;
  if ((~v46 & 0xF000000000000007) != 0)
  {
    v22 = v45;
    v23 = type metadata accessor for NestedItem(0, a9, a12, a17);
    v36 = v23;
    while (1)
    {
      if (v22 >= MEMORY[0x2426A79DC](a5, v23))
      {
        v24 = 0xC000000000000000;
      }
      else
      {
        sub_24259FD8C();
        v24 = v45;
      }
      v25 = type metadata accessor for NestedItem(0, v18, a13, v17);
      if (v22 >= MEMORY[0x2426A79DC](a6, v25))
      {
        v26 = 0xC000000000000000;
      }
      else
      {
        sub_24259FD8C();
        v26 = v45;
      }
      v43[0] = v24;
      v43[1] = v21;
      v42 = v26;
      NestedItem.mapValues<A, B, C, D, E>(_:_:_:)(&v45, &v47, &v44, v43, &v42, a7, a8, v19, a12, a13, a14, a15, a16);
      if (v41)
        break;
      v41 = 0;
      v27 = v47;
      v28 = v17;
      v29 = v44;
      sub_24259FD68();
      swift_retain();
      sub_24259FD50();
      v45 = v27;
      sub_24259FD68();
      swift_retain();
      sub_24259FD50();
      v45 = v29;
      sub_24259FD68();
      swift_retain();
      sub_24259FD50();
      v17 = v28;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_24254DD68(v22, v21);
      sub_2425A0104();
      v22 = v45;
      v21 = v46;
      v18 = a9;
      v23 = v36;
      if ((~v46 & 0xF000000000000007) == 0)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return sub_24254DD68(v22, v21);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v50;
    *a1 = v30 | 0x4000000000000000;
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v49;
    *a2 = v31 | 0x4000000000000000;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v48;
    *a3 = result | 0x4000000000000000;
  }
  return result;
}

void NestedItem.mapValues<A, B, C, D, E>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[30];

  v38[29] = a3;
  v38[27] = a1;
  v38[21] = a6;
  v38[22] = a7;
  v38[28] = a2;
  v38[18] = a13;
  v38[19] = a12;
  v38[20] = a11;
  v38[16] = *(_QWORD *)(a9 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v38[11] = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v38[9] = (char *)v38 - v17;
  v38[15] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v38[10] = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v38[12] = (char *)v38 - v21;
  v38[24] = v22;
  v23 = sub_24259FE7C();
  v38[13] = *(_QWORD *)(v23 - 8);
  v38[14] = v23;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v38[8] = (char *)v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v38[7] = (char *)v38 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v38[6] = (char *)v38 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v38[23] = a9;
  v30 = sub_24259FE7C();
  v31 = MEMORY[0x24BDAC7A8](v30);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v38[17] = a8;
  v38[25] = *(_QWORD *)(a8 + 24);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v37 = MEMORY[0x24BDAC7A8](v36);
  MEMORY[0x24BDAC7A8](v37);
  __asm { BR              X10 }
}

uint64_t sub_24254755C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  *(_QWORD *)(v15 - 336) = a2;
  *(_QWORD *)(v15 - 344) = v8;
  v16 = v5;
  *(_QWORD *)(v15 - 328) = v4;
  *(_QWORD *)(v15 - 320) = a1;
  *(_QWORD *)(v15 - 312) = v3;
  *(_QWORD *)(v15 - 144) = v2;
  v17 = v6;
  v18 = swift_projectBox();
  v19 = v17;
  v20 = v18;
  if (v19 >> 62)
  {
    v38 = *(_QWORD *)(v15 - 312);
    v39 = *(_QWORD *)(v15 - 144);
    v23 = v16;
    if (v19 >> 62 == 3 && v19 == 0xC000000000000000)
    {
      v40 = *(_QWORD *)(v15 - 256);
      if (!(v16 >> 62))
      {
        *(_QWORD *)(v15 - 280) = v16;
        v41 = swift_projectBox();
        v42 = *(_QWORD *)(v15 - 152);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v11, v20, v42);
        v43 = *(_QWORD *)(v15 - 232);
        v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
        v45 = v40;
        v46 = v41;
        v47 = v40;
        v48 = *(_QWORD *)(v15 - 160);
        v44(v45, v46, v48);
        v49 = *(_QWORD *)(v15 - 168);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 224) + 56))(v7, 1, 1, v49);
        v50 = *(char **)(v15 - 304);
        v44((uint64_t)v50, v47, v48);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v50, 0, 1, v48);
        v51 = *(_QWORD *)(*(_QWORD *)(v15 - 216) + 16);
        *(_QWORD *)(v15 - 144) &= 0x3FFFFFFFFFFFFFFFuLL;
        swift_retain();
        swift_retain();
        sub_242546A80(*(uint64_t **)(v15 - 136), *(uint64_t **)(v15 - 128), *(uint64_t **)(v15 - 120), v11, v7, v50, *(_QWORD *)(v15 - 184), *(char **)(v15 - 176), v51, v42, v42, v49, v48, *(_QWORD *)(v15 - 192), *(_QWORD *)(v15 - 200), *(_QWORD *)(v15 - 208));
        (*(void (**)(char *, _QWORD))(*(_QWORD *)(v15 - 248) + 8))(v50, *(_QWORD *)(v15 - 240));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v15 - 328) + 8))(v7, *(_QWORD *)(v15 - 320));
        (*(void (**)(_QWORD, uint64_t))(v43 + 8))(*(_QWORD *)(v15 - 256), v48);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 312) + 8))(v11, v42);
        swift_release();
        return swift_release();
      }
      if (v16 >> 62 == 3 && v16 == 0xC000000000000000)
      {
        v60 = *(_QWORD *)(v15 - 152);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v10, v18, v60);
        v61 = *(_QWORD *)(v15 - 168);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 224) + 56))(v13, 1, 1, v61);
        v62 = *(_QWORD *)(v15 - 160);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 232) + 56))(v9, 1, 1, v62);
        v63 = *(_QWORD *)(*(_QWORD *)(v15 - 216) + 16);
        swift_retain();
        sub_242546A80(*(uint64_t **)(v15 - 136), *(uint64_t **)(v15 - 128), *(uint64_t **)(v15 - 120), v10, v13, v9, *(_QWORD *)(v15 - 184), *(char **)(v15 - 176), v63, v60, v60, v61, v62, *(_QWORD *)(v15 - 192), *(_QWORD *)(v15 - 200), *(_QWORD *)(v15 - 208));
        (*(void (**)(char *, _QWORD))(*(_QWORD *)(v15 - 248) + 8))(v9, *(_QWORD *)(v15 - 240));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v15 - 328) + 8))(v13, *(_QWORD *)(v15 - 320));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 312) + 8))(v10, v60);
        return swift_release();
      }
    }
  }
  else
  {
    v21 = v19;
    v22 = swift_projectBox();
    v23 = v16;
    *(_QWORD *)(v15 - 352) = v21;
    if (!(v16 >> 62))
    {
      *(_QWORD *)(v15 - 280) = v16;
      v24 = swift_projectBox();
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v15 - 312) + 16))(*(_QWORD *)(v15 - 336), v20, *(_QWORD *)(v15 - 152));
      v25 = *(_QWORD *)(v15 - 224);
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
      v27 = *(_QWORD *)(v15 - 264);
      v28 = *(_QWORD *)(v15 - 168);
      v26(v27, v22, v28);
      v29 = *(_QWORD *)(v15 - 232);
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
      v31 = *(_QWORD *)(v15 - 272);
      v32 = *(_QWORD *)(v15 - 160);
      v30(v31, v24, v32);
      v33 = *(_QWORD *)(v15 - 344);
      v26(v33, v27, v28);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v33, 0, 1, v28);
      v34 = *(char **)(v15 - 288);
      v30((uint64_t)v34, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v34, 0, 1, v32);
      v35 = *(_QWORD *)(*(_QWORD *)(v15 - 216) + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      v36 = *(_QWORD *)(v15 - 336);
      sub_242546A80(*(uint64_t **)(v15 - 136), *(uint64_t **)(v15 - 128), *(uint64_t **)(v15 - 120), v36, v33, v34, *(_QWORD *)(v15 - 184), *(char **)(v15 - 176), v35, *(_QWORD *)(v15 - 152), *(_QWORD *)(v15 - 152), v28, v32, *(_QWORD *)(v15 - 192), *(_QWORD *)(v15 - 200), *(_QWORD *)(v15 - 208));
      (*(void (**)(char *, _QWORD))(*(_QWORD *)(v15 - 248) + 8))(v34, *(_QWORD *)(v15 - 240));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v15 - 328) + 8))(v33, *(_QWORD *)(v15 - 320));
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v15 - 232) + 8))(*(_QWORD *)(v15 - 272), v32);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v15 - 224) + 8))(*(_QWORD *)(v15 - 264), v28);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v15 - 312) + 8))(v36, *(_QWORD *)(v15 - 152));
      swift_release();
      swift_release();
      return swift_release();
    }
    v39 = *(_QWORD *)(v15 - 144);
    v19 = v21;
    if (v16 >> 62 == 3 && v16 == 0xC000000000000000)
    {
      v52 = *(_QWORD *)(v15 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 312) + 16))(v12, v20, v52);
      v53 = *(_QWORD *)(v15 - 224);
      v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
      v55 = *(_QWORD *)(v15 - 280);
      v56 = *(_QWORD *)(v15 - 168);
      v54(v55, v22, v56);
      v54(v14, v55, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v14, 0, 1, v56);
      v57 = *(char **)(v15 - 296);
      v58 = *(_QWORD *)(v15 - 160);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 232) + 56))(v57, 1, 1, v58);
      v59 = *(_QWORD *)(*(_QWORD *)(v15 - 216) + 16);
      swift_retain();
      swift_retain();
      sub_242546A80(*(uint64_t **)(v15 - 136), *(uint64_t **)(v15 - 128), *(uint64_t **)(v15 - 120), v12, v14, v57, *(_QWORD *)(v15 - 184), *(char **)(v15 - 176), v59, v52, v52, v56, v58, *(_QWORD *)(v15 - 192), *(_QWORD *)(v15 - 200), *(_QWORD *)(v15 - 208));
      (*(void (**)(char *, _QWORD))(*(_QWORD *)(v15 - 248) + 8))(v57, *(_QWORD *)(v15 - 240));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v15 - 328) + 8))(v14, *(_QWORD *)(v15 - 320));
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v15 - 224) + 8))(*(_QWORD *)(v15 - 280), v56);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 312) + 8))(v12, v52);
      swift_release();
      return swift_release();
    }
  }
  *(_QWORD *)(v15 - 104) = 0;
  *(_QWORD *)(v15 - 96) = 0xE000000000000000;
  v64 = v39;
  v65 = v23;
  v66 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_24259FF84();
  v67 = *(_QWORD *)(v15 - 96);
  *(_QWORD *)(v15 - 104) = *(_QWORD *)(v15 - 104);
  *(_QWORD *)(v15 - 96) = v67;
  sub_24259FB70();
  *(_QWORD *)(v15 - 72) = v64;
  v68 = *(_QWORD *)(v15 - 216);
  MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, v68);
  sub_2425A0230();
  sub_24259FB70();
  *(_QWORD *)(v15 - 72) = v66;
  v69 = *(_QWORD *)(v68 + 16);
  v70 = *(_QWORD *)(v68 + 32);
  v71 = type metadata accessor for NestedItem(0, v69, *(_QWORD *)(v15 - 168), v70);
  MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, v71);
  sub_2425A0230();
  sub_24259FB70();
  *(_QWORD *)(v15 - 72) = v65;
  v72 = type metadata accessor for NestedItem(0, v69, *(_QWORD *)(v15 - 160), v70);
  MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, v72);
  sub_2425A0230();
  result = sub_2425A00E0();
  __break(1u);
  return result;
}

uint64_t sub_242548540(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  int64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t TupleTypeMetadata2;
  unint64_t v97;
  _QWORD v98[2];
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;

  v80 = a8;
  v79 = a7;
  v78 = a6;
  v77 = a5;
  v63 = a3;
  v62 = a2;
  v61 = a1;
  v73 = a13;
  v72 = a12;
  v95 = *(_QWORD *)(a9 - 8);
  v18 = MEMORY[0x24BDAC7A8](a1);
  v70 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v93 = (char *)&v60 - v20;
  v71 = type metadata accessor for NestedItem(255, a9, v21, a17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v82 = sub_24259FE7C();
  v81 = *(_QWORD *)(v82 - 8);
  v22 = MEMORY[0x24BDAC7A8](v82);
  v83 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v84 = (char *)&v60 - v24;
  v74 = a14;
  v69 = type metadata accessor for NestedItem(0, a9, a14, a17);
  v103 = sub_24259F93C();
  v75 = a15;
  v68 = type metadata accessor for NestedItem(0, a9, a15, a17);
  v102 = sub_24259F93C();
  v76 = a16;
  v67 = type metadata accessor for NestedItem(0, a9, a16, a17);
  v92 = a17;
  v25 = sub_24259F93C();
  v26 = *(_QWORD *)(a4 + 64);
  v64 = a4 + 64;
  v101 = v25;
  v27 = 1 << *(_BYTE *)(a4 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v65 = (unint64_t)(v27 + 63) >> 6;
  v60 = v65 - 1;
  v66 = a4;
  result = swift_bridgeObjectRetain();
  v31 = 0;
  if (!v29)
    goto LABEL_6;
LABEL_4:
  v90 = v31;
  v91 = (v29 - 1) & v29;
  v32 = __clz(__rbit64(v29)) | (v31 << 6);
  v33 = v83;
  v34 = v84;
  while (2)
  {
    v35 = v66;
    (*(void (**)(char *, unint64_t, uint64_t))(v95 + 16))(v33, *(_QWORD *)(v66 + 48) + *(_QWORD *)(v95 + 72) * v32, a9);
    v36 = TupleTypeMetadata2;
    *(_QWORD *)&v33[*(int *)(TupleTypeMetadata2 + 48)] = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v32);
    v37 = *(_QWORD *)(v36 - 8);
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 56))(v33, 0, 1);
    swift_retain();
    while (1)
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v34, v33, v82);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v34, 1, TupleTypeMetadata2) == 1)
      {
        swift_release();
        v58 = swift_allocObject();
        *(_QWORD *)(v58 + 16) = v103;
        *v61 = v58 | 0x8000000000000000;
        v59 = swift_allocObject();
        *(_QWORD *)(v59 + 16) = v102;
        *v62 = v59 | 0x8000000000000000;
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v101;
        *v63 = result | 0x8000000000000000;
        return result;
      }
      v40 = *(_QWORD *)&v34[*(int *)(TupleTypeMetadata2 + 48)];
      v41 = v93;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v93, v34, a9);
      v42 = v72;
      v43 = v92;
      v44 = type metadata accessor for NestedItem(0, a9, v72, v92);
      MEMORY[0x2426A76A0](&v104, v41, v77, a9, v44, v43);
      if ((~v104 & 0xF000000000000007) != 0)
        v45 = v104;
      else
        v45 = 0xC000000000000000;
      v46 = v73;
      v47 = type metadata accessor for NestedItem(0, a9, v73, v43);
      MEMORY[0x2426A76A0](&v104, v41, v78, a9, v47, v43);
      if ((~v104 & 0xF000000000000007) != 0)
        v48 = v104;
      else
        v48 = 0xC000000000000000;
      v88 = v45;
      v89 = v40;
      v98[0] = v45;
      v98[1] = v40;
      v97 = v48;
      v49 = v94;
      NestedItem.mapValues<A, B, C, D, E>(_:_:_:)(&v104, &v100, &v99, v98, &v97, v79, v80, v71, v42, v46, v74, v75, v76);
      v94 = v49;
      if (v49)
      {
        (*(void (**)(char *, uint64_t))(v95 + 8))(v93, a9);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return swift_release();
      }
      v50 = v104;
      v51 = v100;
      v85 = v99;
      v52 = v95;
      v53 = v93;
      v87 = v48;
      v54 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
      v55 = v70;
      v54(v70, v93, a9);
      v104 = v50;
      v86 = v50 & 0x3FFFFFFFFFFFFFFFLL;
      sub_24259F9F0();
      swift_retain();
      sub_24259FA14();
      v54(v55, v53, a9);
      v104 = v51;
      sub_24259F9F0();
      swift_retain();
      sub_24259FA14();
      v54(v55, v53, a9);
      v104 = v85;
      sub_24259F9F0();
      swift_retain();
      sub_24259FA14();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v53, a9);
      v31 = v90;
      v29 = v91;
      if (v91)
        goto LABEL_4;
LABEL_6:
      v38 = v31 + 1;
      v34 = v84;
      if (__OFADD__(v31, 1))
      {
        __break(1u);
        goto LABEL_38;
      }
      v33 = v83;
      if (v38 >= v65)
      {
        v90 = v31;
        goto LABEL_11;
      }
      v39 = *(_QWORD *)(v64 + 8 * v38);
      if (v39)
        goto LABEL_10;
      v56 = v31 + 2;
      if (v31 + 2 < v65)
        break;
LABEL_34:
      v90 = v38;
LABEL_11:
      v37 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 56))(v83, 1, 1);
      v91 = 0;
    }
    v39 = *(_QWORD *)(v64 + 8 * v56);
    if (v39)
    {
      v38 = v31 + 2;
LABEL_10:
      v90 = v38;
      v91 = (v39 - 1) & v39;
      v32 = __clz(__rbit64(v39)) + (v38 << 6);
      continue;
    }
    break;
  }
  v57 = v31 + 3;
  if (v57 >= v65)
  {
    v90 = v56;
    goto LABEL_11;
  }
  v39 = *(_QWORD *)(v64 + 8 * v57);
  if (v39)
  {
    v38 = v57;
    goto LABEL_10;
  }
  while (1)
  {
    v38 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    if (v38 >= v65)
    {
      v38 = v60;
      goto LABEL_34;
    }
    v39 = *(_QWORD *)(v64 + 8 * v38);
    ++v57;
    if (v39)
      goto LABEL_10;
  }
LABEL_38:
  __break(1u);
  return result;
}

void NestedItem.compactMapValues<A>(_:)()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_24259FE7C();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_242548E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  *(_QWORD *)(v8 - 136) = v1;
  v9 = v0;
  v10 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v10, v9);
  v11 = *(_QWORD *)(v8 - 96);
  (*(void (**)(uint64_t))(v8 - 112))(v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v9);
  if (!v11)
  {
    *(_QWORD *)(v8 - 96) = 0;
    v13 = *(_QWORD *)(v8 - 120);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v13) == 1)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8))(v6, *(_QWORD *)(v8 - 136));
      v14 = 0xC000000000000000;
    }
    else
    {
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
      v15(v2, v6, v13);
      v14 = swift_allocBox();
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v16, v2, v13);
    }
    **(_QWORD **)(v8 - 128) = v14;
  }
  return result;
}

uint64_t sub_2425492C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v14;
  uint64_t result;

  v14 = type metadata accessor for NestedItem(0, a4, a5, a7);
  result = a9(a2, a3, v14, a6);
  if (v9)
    *a8 = v9;
  return result;
}

uint64_t sub_242549364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for NestedItem(255, a2, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(a1 + *(int *)(v9 + 48));
  if (v12 == 0xC000000000000000)
  {
    v13 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a5, 1, 1, v13);
  }
  else
  {
    v15 = *(_QWORD *)(a2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
    v16 = swift_getTupleTypeMetadata2();
    v17 = *(int *)(v16 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a5, v11, a2);
    *(_QWORD *)(a5 + v17) = v12;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a5, 0, 1, v16);
    return swift_retain();
  }
}

void NestedItem.mapValues<A>(prefix:_:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  __asm { BR              X10 }
}

uint64_t sub_24254954C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;

  *(_QWORD *)(v9 - 120) = a3;
  *(_QWORD *)(v9 - 112) = a1;
  *(_QWORD *)(v9 - 104) = a2;
  v10 = v3;
  v11 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v11, v6);
  if (v4)
  {
    v12 = v4;
  }
  else
  {
    v10 = 0;
    v12 = 0xE000000000000000;
  }
  v13 = swift_allocBox();
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 - 112))(v10, v12, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v6);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return swift_deallocBox();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    **(_QWORD **)(v9 - 120) = v13;
  }
  return result;
}

uint64_t sub_242549A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = sub_2425503D0(a1, a3, a4);
  v16 = v15;
  v17 = type metadata accessor for NestedItem(0, a7, a8, a10);
  NestedItem.mapValues<A>(prefix:_:)(v14, v16, a5, a6, v17, a9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_242549AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  _QWORD v20[2];

  type metadata accessor for NestedItem(255, a3, a4, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)v20 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16);
  v12((char *)v20 - v10, a1, a3);
  v13 = sub_24259FB10();
  v15 = v14;
  v12(v11, a2, a3);
  if (v13 == sub_24259FB10() && v15 == v16)
    v18 = 0;
  else
    v18 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18 & 1;
}

uint64_t sub_242549C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a8;
  v34 = a2;
  v35 = a7;
  v32 = a12;
  v33 = a11;
  v31 = a10;
  v16 = *(_QWORD *)(a9 - 8);
  v17 = MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v20;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v22(v17, v23, a9);
  v40 = v21;
  v22((uint64_t)v19, a3, a9);
  v24 = sub_24259FB10();
  v26 = v25;
  if (a6)
  {
    v38 = a5;
    v39 = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24259FB70();
    swift_bridgeObjectRetain();
    sub_24259FB70();
    swift_bridgeObjectRelease_n();
    v24 = v38;
    v26 = v39;
  }
  v27 = type metadata accessor for NestedItem(0, a9, v31, v32);
  v28 = v37;
  NestedItem.mapValues<A>(prefix:_:)(v24, v26, v35, v36, v27, v33);
  if (v28)
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_242549D90@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t result;

  type metadata accessor for NestedItem(255, a3, a4, a6);
  v15 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  type metadata accessor for NestedItem(255, a3, a5, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = a2(a8, a8 + *(int *)(TupleTypeMetadata2 + 48), a1, v15);
  if (v8)
    *a7 = v8;
  return result;
}

void NestedItem.flattened(prefix:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  __asm { BR              X10 }
}

uint64_t sub_242549EFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_2425A01F4();
  swift_allocObject();
  v9 = sub_24259FCD8();
  if (v2)
    v10 = v3;
  else
    v10 = 0;
  v11 = 0xE000000000000000;
  if (v2)
    v11 = v2;
  *(_QWORD *)v8 = v10;
  *((_QWORD *)v8 + 1) = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v8[*(int *)(TupleTypeMetadata2 + 48)], v1, v0);
  *(_QWORD *)(v5 - 88) = v9;
  v12 = sub_24259FD68();
  ((void (*)(uint64_t))nullsub_1)(v12);
  v13 = *(_QWORD *)(v5 - 88);
  swift_bridgeObjectRetain();
  return v13;
}

uint64_t sub_24254A2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = sub_2425503D0(a1, a3, a4);
  v12 = v11;
  v13 = type metadata accessor for NestedItem(0, a5, a6, a7);
  v14 = NestedItem.flattened(prefix:)(v10, v12, v13);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_24254A388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x24BDAC7A8](a1);
  v26 = *v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v15);
  v17 = sub_24259FB10();
  v19 = v18;
  if (a4)
  {
    v24 = a3;
    v25 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24259FB70();
    swift_bridgeObjectRetain();
    sub_24259FB70();
    swift_bridgeObjectRelease_n();
    v17 = v24;
    v19 = v25;
  }
  v20 = type metadata accessor for NestedItem(0, a5, a6, a7);
  v21 = NestedItem.flattened(prefix:)(v17, v19, v20);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t static NestedItem.unflattened<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_getTupleTypeMetadata2();
  v6 = sub_24259FD68();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE12E0], v6);
  if ((sub_24259FE1C() & 1) == 0)
    return sub_24254A5EC(a1, MEMORY[0x24BEE0D00], a2, MEMORY[0x24BEE0D10], a3);
  v7 = swift_allocObject();
  type metadata accessor for NestedItem(255, MEMORY[0x24BEE0D00], a2, MEMORY[0x24BEE0D10]);
  swift_getTupleTypeMetadata2();
  sub_24259FD08();
  result = sub_24259F978();
  *(_QWORD *)(v7 + 16) = result;
  *a3 = v7 | 0x8000000000000000;
  return result;
}

uint64_t sub_24254A5EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  _QWORD *v30;
  uint64_t (*v31)@<X0>(uint64_t *@<X8>);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)();
  _QWORD *v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)@<X0>(uint64_t *@<X8>);
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)@<X0>(uint64_t *@<X8>);
  unint64_t *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (*v153)@<X0>(uint64_t *@<X8>);
  _QWORD *v154;
  uint64_t (*v155)();
  _QWORD *v156;
  __int128 v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  _QWORD *v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;

  v161 = a2;
  v162 = a4;
  v5 = a3;
  v6 = a1;
  v165 = *(_QWORD **)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v164 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v149 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = *(_QWORD *)(v149 + 64);
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v158 = (uint64_t *)((char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v141 - v13);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v141 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (uint64_t *)((char *)&v141 - v18);
  v20 = MEMORY[0x2426A79DC](v6, TupleTypeMetadata2);
  v159 = TupleTypeMetadata2;
  if (v20 == 1)
  {
    sub_24259FD8C();
    v21 = TupleTypeMetadata2;
    v22 = *v19;
    v23 = v19[1];
    v24 = (char *)v19 + *(int *)(v21 + 48);
    if (v22)
      v25 = 0;
    else
      v25 = v23 == 0xE000000000000000;
    if (v25)
    {
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v165[1])(v24, v5);
      TupleTypeMetadata2 = v159;
    }
    else
    {
      v26 = sub_2425A0254();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v165[1])(v24, v5);
      TupleTypeMetadata2 = v159;
      if ((v26 & 1) == 0)
        goto LABEL_7;
    }
    v85 = swift_allocBox();
    v86 = TupleTypeMetadata2;
    v88 = v87;
    sub_24259FD8C();
    swift_bridgeObjectRelease();
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v165[4])(v88, &v17[*(int *)(v86 + 48)], v5);
    *a5 = v85;
    return result;
  }
LABEL_7:
  v145 = v17;
  v144 = (unint64_t *)a5;
  *(_QWORD *)&v157 = sub_24259FD68();
  v163 = sub_24259F93C();
  v27 = swift_bridgeObjectRetain();
  if (MEMORY[0x2426A79F4](v27, TupleTypeMetadata2))
  {
    v142 = v10;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = *(int *)(TupleTypeMetadata2 + 48);
    v148 = v14;
    v147 = (char *)v14 + v33;
    v143 = sub_242550FE8;
    v146 = v6;
    v160 = v5;
    while (1)
    {
      v154 = v30;
      v155 = v29;
      v156 = v32;
      v39 = sub_24259FD2C();
      sub_24259FCE4();
      if ((v39 & 1) != 0)
      {
        v40 = v148;
        (*(void (**)(uint64_t *, unint64_t, uint64_t))(v149 + 16))(v148, v6+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(_QWORD *)(v149 + 72) * v28, TupleTypeMetadata2);
      }
      else
      {
        v84 = sub_24259FFCC();
        v40 = v148;
        if (v142 != 8)
          goto LABEL_66;
        *(_QWORD *)&v168 = v84;
        (*(void (**)(uint64_t *, __int128 *, uint64_t))(v149 + 16))(v148, &v168, TupleTypeMetadata2);
        swift_unknownObjectRelease();
      }
      v41 = v28 + 1;
      if (__OFADD__(v28, 1))
        break;
      v151 = v28;
      v43 = *v40;
      v42 = v40[1];
      ((void (*)(char *, char *, uint64_t))v165[4])(v164, v147, v5);
      sub_24254B5A8(46, 0xE100000000000000, v43, v42);
      v150 = v41;
      v153 = v31;
      if ((v44 & 1) != 0)
      {
        v152 = 0;
        v64 = 0xE000000000000000;
      }
      else
      {
        swift_bridgeObjectRetain();
        v45 = sub_24259FC00();
        v47 = v46;
        v49 = v48;
        v51 = v50;
        swift_bridgeObjectRelease();
        v52 = MEMORY[0x2426A77C0](v45, v47, v49, v51);
        v54 = v53;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v55 = sub_24259FB58();
        swift_bridgeObjectRelease();
        v56 = sub_2425505F0(v55, v43, v42);
        v58 = v57;
        v60 = v59;
        v62 = v61;
        swift_bridgeObjectRelease();
        v152 = MEMORY[0x2426A77C0](v56, v58, v60, v62);
        v64 = v63;
        swift_bridgeObjectRelease();
        v43 = v52;
        v42 = v54;
      }
      *(_QWORD *)&v168 = v43;
      *((_QWORD *)&v168 + 1) = v42;
      v65 = sub_24259FBF4();
      v67 = v66;
      v68 = (_QWORD *)swift_allocObject();
      v69 = v160;
      v70 = v161;
      v68[2] = v161;
      v68[3] = v69;
      v71 = v162;
      v68[4] = v162;
      sub_242550FC8((uint64_t)v155);
      *(_QWORD *)&v168 = v152;
      *((_QWORD *)&v168 + 1) = v64;
      v72 = sub_24259FBF4();
      v73 = v158;
      v74 = (char *)v158 + *(int *)(v159 + 48);
      *v158 = v72;
      v73[1] = v75;
      ((void (*)(char *, char *, uint64_t))v165[2])(v74, v164, v69);
      v76 = (_QWORD *)swift_allocObject();
      v76[2] = v70;
      v76[3] = v69;
      v76[4] = v71;
      v76[5] = sub_242550F94;
      v77 = v68;
      v78 = v76;
      v76[6] = v68;
      sub_242550FC8((uint64_t)v153);
      v79 = v163;
      swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v168 = v79;
      sub_24255A05C(v65, v67);
      if (__OFADD__(*(_QWORD *)(v79 + 16), (v80 & 1) == 0))
        goto LABEL_60;
      v81 = v80;
      sub_2425A00C8();
      if ((sub_2425A00B0() & 1) != 0)
      {
        sub_24255A05C(v65, v67);
        if ((v81 & 1) != (v82 & 1))
          goto LABEL_68;
      }
      v83 = v168;
      swift_bridgeObjectRelease();
      if ((v81 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v35 = v78;
      }
      else
      {
        v34 = swift_bridgeObjectRetain();
        v35 = v78;
        *(_QWORD *)&v166 = ((uint64_t (*)(uint64_t))v78[5])(v34);
        *(_QWORD *)&v168 = v65;
        *((_QWORD *)&v168 + 1) = v67;
        swift_bridgeObjectRetain();
        sub_2425A00BC();
      }
      v163 = v83;
      swift_bridgeObjectRelease();
      sub_24259FD50();
      swift_bridgeObjectRelease();
      v5 = v160;
      ((void (*)(char *, uint64_t))v165[1])(v164, v160);
      v6 = v146;
      TupleTypeMetadata2 = v159;
      v36 = MEMORY[0x2426A79F4](v146, v159);
      v37 = sub_242550F94;
      v29 = sub_242550F94;
      v38 = v77;
      v28 = v151 + 1;
      v30 = v38;
      v31 = sub_242550FE8;
      v32 = v35;
      if (v150 == v36)
        goto LABEL_27;
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v37 = 0;
  v38 = 0;
  v143 = 0;
  v35 = 0;
LABEL_27:
  swift_bridgeObjectRelease();
  v90 = v145;
  sub_24259FD8C();
  v91 = &v90[*(int *)(TupleTypeMetadata2 + 48)];
  LOBYTE(v90) = sub_24254B420(*(_QWORD *)v90, *((_QWORD *)v90 + 1));
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t))v165[1])(v91, v5);
  v165 = v35;
  if ((v90 & 1) != 0)
  {
    v158 = (uint64_t *)v37;
    v159 = (uint64_t)v38;
    v98 = v5;
    type metadata accessor for NestedItem(0, MEMORY[0x24BEE0D00], v5, MEMORY[0x24BEE0D10]);
    v99 = 0;
    *(_QWORD *)&v166 = sub_24259F93C();
    v100 = v163 + 64;
    v101 = 1 << *(_BYTE *)(v163 + 32);
    v102 = -1;
    if (v101 < 64)
      v102 = ~(-1 << v101);
    v103 = v102 & *(_QWORD *)(v163 + 64);
    v104 = (unint64_t)(v101 + 63) >> 6;
    while (1)
    {
      if (v103)
      {
        v105 = __clz(__rbit64(v103));
        v103 &= v103 - 1;
        v106 = v105 | (v99 << 6);
      }
      else
      {
        v111 = v99 + 1;
        if (__OFADD__(v99, 1))
          goto LABEL_61;
        if (v111 >= v104)
        {
LABEL_48:
          swift_release();
          v114 = swift_allocObject();
          *(_QWORD *)(v114 + 16) = v166;
          sub_242550FC8((uint64_t)v158);
          result = sub_242550FC8((uint64_t)v143);
          v115 = v114 | 0x8000000000000000;
          goto LABEL_58;
        }
        v112 = *(_QWORD *)(v100 + 8 * v111);
        ++v99;
        if (!v112)
        {
          v99 = v111 + 1;
          if (v111 + 1 >= v104)
            goto LABEL_48;
          v112 = *(_QWORD *)(v100 + 8 * v99);
          if (!v112)
          {
            v113 = v111 + 2;
            if (v113 >= v104)
              goto LABEL_48;
            v112 = *(_QWORD *)(v100 + 8 * v113);
            if (!v112)
            {
              while (1)
              {
                v99 = v113 + 1;
                if (__OFADD__(v113, 1))
                  goto LABEL_62;
                if (v99 >= v104)
                  goto LABEL_48;
                v112 = *(_QWORD *)(v100 + 8 * v99);
                ++v113;
                if (v112)
                  goto LABEL_47;
              }
            }
            v99 = v113;
          }
        }
LABEL_47:
        v103 = (v112 - 1) & v112;
        v106 = __clz(__rbit64(v112)) + (v99 << 6);
      }
      v107 = (uint64_t *)(*(_QWORD *)(v163 + 48) + 16 * v106);
      v108 = *v107;
      v109 = v107[1];
      swift_bridgeObjectRetain();
      v110 = swift_bridgeObjectRetain();
      sub_24254A5EC(&v170, v110, v161, v98, v162);
      swift_bridgeObjectRelease();
      v172 = v170;
      *(_QWORD *)&v168 = v108;
      *((_QWORD *)&v168 + 1) = v109;
      sub_24259F9F0();
      sub_24259FA14();
    }
  }
  v92 = v163;
  v93 = swift_bridgeObjectRetain();
  v94 = MEMORY[0x2426A7658](v93, MEMORY[0x24BEE0D00], v157, MEMORY[0x24BEE0D10]);
  v95 = swift_bridgeObjectRelease();
  if ((v94 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v96 = swift_allocObject();
    type metadata accessor for NestedItem(0, MEMORY[0x24BEE0D00], v5, MEMORY[0x24BEE0D10]);
    *(_QWORD *)(v96 + 16) = sub_24259FD08();
    sub_242550FC8((uint64_t)v37);
    v97 = v143;
    goto LABEL_57;
  }
  v158 = (uint64_t *)v37;
  v159 = (uint64_t)v38;
  *(_QWORD *)&v168 = v92;
  MEMORY[0x24BDAC7A8](v95);
  v117 = v161;
  v116 = v162;
  *(&v141 - 4) = v161;
  *(&v141 - 3) = v5;
  *(&v141 - 2) = v116;
  v118 = sub_24259F9F0();
  swift_bridgeObjectRetain();
  v119 = (char *)swift_getTupleTypeMetadata2();
  v120 = MEMORY[0x2426A87E0](MEMORY[0x24BEE04E8], v118);
  v122 = sub_242544520((void (*)(char *, char *))sub_242551010, (uint64_t)(&v141 - 6), v118, v119, MEMORY[0x24BEE4078], v120, MEMORY[0x24BEE40A8], v121);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v168 = v122;
  v164 = v119;
  v123 = sub_24259FD68();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE12C8], v123);
  sub_24259FC30();
  v170 = v166;
  v124 = (_QWORD *)swift_allocObject();
  v124[2] = v117;
  v124[3] = v5;
  v124[4] = v116;
  v125 = sub_24259FF9C();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE25B0], v125);
  sub_2425A0170();
  swift_release();
  swift_bridgeObjectRelease();
  v157 = v168;
  v166 = v168;
  v167 = v169;
  v126 = sub_2425A0074();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE2B40], v126);
  sub_24259FC84();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v171 & 1) != 0)
    goto LABEL_67;
  v127 = v170;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v168 = 0xC000000000000000;
  v128 = __OFADD__(v127, 1);
  v129 = v127 + 1;
  if (!v128)
  {
    v130 = type metadata accessor for NestedItem(0, MEMORY[0x24BEE0D00], v5, MEMORY[0x24BEE0D10]);
    *(_QWORD *)&v168 = sub_242550538((uint64_t)&v168, v129, v130);
    if (MEMORY[0x2426A79F4](v122, v164))
    {
      v160 = v5;
      v131 = 0;
      v132 = v122 + 40;
      while (1)
      {
        v133 = sub_24259FD2C();
        sub_24259FCE4();
        if ((v133 & 1) == 0)
          break;
        v134 = v131 + 1;
        if (__OFADD__(v131, 1))
          goto LABEL_64;
        v135 = *(_QWORD *)(v132 - 8);
        v136 = swift_bridgeObjectRetain();
        sub_24254A5EC(&v166, v136, v161, v160, v162);
        swift_bridgeObjectRelease();
        v137 = v166;
        v138 = sub_24259FD68();
        sub_24259FCFC();
        v139 = v168;
        sub_24255CA68(v135, v168);
        *(_QWORD *)(v139 + 8 * v135 + 32) = v137;
        v140 = v164;
        swift_release();
        nullsub_1(v138);
        ++v131;
        v132 += 16;
        if (v134 == MEMORY[0x2426A79F4](v122, v140))
          goto LABEL_56;
      }
LABEL_63:
      sub_24259FFCC();
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    v96 = swift_allocObject();
    *(_QWORD *)(v96 + 16) = v168;
    sub_242550FC8((uint64_t)v158);
    v97 = v143;
LABEL_57:
    result = sub_242550FC8((uint64_t)v97);
    v115 = v96 | 0x4000000000000000;
LABEL_58:
    *v144 = v115;
    return result;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  result = sub_2425A0290();
  __break(1u);
  return result;
}

uint64_t sub_24254B420(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  char v15;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      v3 = sub_24259FBE8();
      v5 = v4;
      swift_bridgeObjectRelease();
      if (v3 == 46 && v5 == 0xE100000000000000)
        break;
      v6 = sub_2425A0254();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0 || 4 * v2 == (unint64_t)sub_24259FB58() >> 14)
        goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
LABEL_12:
  v7 = sub_24259FC00();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((v7 ^ v9) < 0x4000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_242550468(v7, v9, v11, v13, 10);
    if ((v14 & 0x100) != 0)
      sub_24254FAC4(v7, v9, v11, v13, 10);
    v15 = v14;
    swift_bridgeObjectRelease();
    return v15 & 1;
  }
}

unint64_t sub_24254B5A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (sub_24259FBE8() != a1 || v9 != a2)
  {
    v10 = sub_2425A0254();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = sub_24259FB58();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t *sub_24254B694@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *i;
  unsigned __int8 *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  _QWORD v27[3];

  v4 = *result;
  v5 = result[1];
  v6 = HIBYTE(v5) & 0xF;
  v7 = *result & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v5) & 0xF;
  else
    v8 = *result & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain();
    v12 = (uint64_t)sub_2425502EC(v4, v5, 10);
    v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_55;
LABEL_36:
    *a2 = v12;
    a2[1] = v2;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  v2 = result[2];
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_54;
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_56;
    for (i = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32); ; i = (unsigned __int8 *)sub_24259FFF0())
    {
      v10 = sub_24254FBB4(i, v7, 10);
      if ((v11 & 1) == 0)
        break;
LABEL_55:
      __break(1u);
LABEL_56:
      ;
    }
    v12 = (uint64_t)v10;
    goto LABEL_36;
  }
  v27[0] = *result;
  v27[1] = v5 & 0xFFFFFFFFFFFFFFLL;
  if (v4 == 43)
  {
    if (!v6)
      goto LABEL_59;
    if (v6 == 1)
      goto LABEL_57;
    if ((BYTE1(v4) - 48) <= 9u)
    {
      v12 = (BYTE1(v4) - 48);
      if (v6 == 2)
        goto LABEL_34;
      if ((BYTE2(v4) - 48) <= 9u)
      {
        v12 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
        v13 = v6 - 3;
        if (v6 != 3)
        {
          v14 = (unsigned __int8 *)v27 + 3;
          while (1)
          {
            v15 = *v14 - 48;
            if (v15 > 9)
              goto LABEL_32;
            v16 = 10 * v12;
            if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
              goto LABEL_32;
            v12 = v16 + v15;
            if (__OFADD__(v16, v15))
              goto LABEL_32;
            LOBYTE(v6) = 0;
            ++v14;
            if (!--v13)
              goto LABEL_35;
          }
        }
        goto LABEL_34;
      }
    }
LABEL_32:
    v12 = 0;
    LOBYTE(v6) = 1;
    goto LABEL_35;
  }
  if (v4 != 45)
  {
    if (!v6 || (v4 - 48) > 9u)
      goto LABEL_32;
    v12 = (v4 - 48);
    if (v6 == 1)
    {
LABEL_34:
      LOBYTE(v6) = 0;
      goto LABEL_35;
    }
    if ((BYTE1(v4) - 48) <= 9u)
    {
      v12 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
      v17 = v6 - 2;
      if (v6 != 2)
      {
        v18 = (unsigned __int8 *)v27 + 2;
        while (1)
        {
          v19 = *v18 - 48;
          if (v19 > 9)
            goto LABEL_32;
          v20 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
            goto LABEL_32;
          v12 = v20 + v19;
          if (__OFADD__(v20, v19))
            goto LABEL_32;
          LOBYTE(v6) = 0;
          ++v18;
          if (!--v17)
            goto LABEL_35;
        }
      }
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v6)
  {
    if (v6 != 1)
    {
      if ((BYTE1(v4) - 48) > 9u)
        goto LABEL_32;
      if (v6 == 2)
      {
        LOBYTE(v6) = 0;
        v12 = -(uint64_t)(BYTE1(v4) - 48);
        goto LABEL_35;
      }
      if ((BYTE2(v4) - 48) > 9u)
        goto LABEL_32;
      v12 = -10 * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
      v21 = v6 - 3;
      if (v6 != 3)
      {
        v22 = (unsigned __int8 *)v27 + 3;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            goto LABEL_32;
          v24 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
            goto LABEL_32;
          v12 = v24 - v23;
          if (__OFSUB__(v24, v23))
            goto LABEL_32;
          LOBYTE(v6) = 0;
          ++v22;
          if (!--v21)
            goto LABEL_35;
        }
      }
      goto LABEL_34;
    }
LABEL_57:
    v12 = 0;
LABEL_35:
    if ((v6 & 1) != 0)
      goto LABEL_55;
    goto LABEL_36;
  }
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

void NestedItem.flattenedValues()(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  __asm { BR              X10 }
}

uint64_t sub_24254BA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v0);
  sub_24254F8B8(v0, v0);
  swift_allocObject();
  v5 = sub_24259FCD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v1, v0);
  *(_QWORD *)(v3 - 88) = v5;
  v7 = sub_24259FD68();
  nullsub_1(v7);
  return *(_QWORD *)(v3 - 88);
}

void sub_24254BCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[18];

  v11[12] = a2;
  v11[8] = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v11[7] = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v11[6] = (char *)v11 - v7;
  v11[11] = v8;
  swift_getTupleTypeMetadata2();
  v9 = sub_24259FE7C();
  v11[9] = *(_QWORD *)(v9 - 8);
  v11[10] = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  __asm { BR              X11 }
}

uint64_t sub_24254C2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  type metadata accessor for NestedItem(255, a3, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v30 - v12;
  v14 = *(int *)(v11 + 48);
  v15 = *(_QWORD *)(a3 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v16((char *)&v30 - v12, a1, a3);
  v17 = *(_QWORD *)(a1 + v14);
  v18 = *(int *)(TupleTypeMetadata2 + 48);
  v19 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v19(v10, v13, a3);
  *(_QWORD *)&v10[v18] = v17;
  swift_retain();
  v30 = sub_24259FB10();
  v21 = v20;
  v22 = *(int *)(TupleTypeMetadata2 + 48);
  v23 = v31;
  v16(v13, v31, a3);
  v24 = *(_QWORD *)(v23 + v22);
  v25 = *(int *)(TupleTypeMetadata2 + 48);
  v19(v10, v13, a3);
  *(_QWORD *)&v10[v25] = v24;
  swift_retain();
  if (v30 == sub_24259FB10() && v21 == v26)
    v28 = 0;
  else
    v28 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28 & 1;
}

Swift::String __swiftcall NestedItem.description(indent:)(Swift::Int indent)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::String result;

  MEMORY[0x24BDAC7A8](indent);
  v3 = *v1;
  MEMORY[0x2426A7874](32, 0xE100000000000000, indent);
  __asm { BR              X10 }
  return result;
}

uint64_t sub_24254C4EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_0;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v5 = swift_projectBox();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v2, v5, v0);
  *(_QWORD *)(v4 - 104) = v0;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v4 - 128));
  v6((uint64_t)boxed_opaque_existential_0, v2, v0);
  if (__OFADD__(v1, 2))
  {
    __break(1u);
    JUMPOUT(0x24254C9F4);
  }
  v8 = indentedDescription(_:_:)(v4 - 128, v1 + 2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  return v8;
}

uint64_t sub_24254CA04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v8 = *a1;
  result = type metadata accessor for NestedItem(0, a3, a4, a5);
  v13[3] = result;
  v13[0] = v8;
  if (__OFADD__(a2, 2))
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    v10 = indentedDescription(_:_:)((uint64_t)v13, a2 + 2);
    v12 = v11;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    *a6 = v10;
    a6[1] = v12;
  }
  return result;
}

uint64_t sub_24254CA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  _QWORD v19[2];

  type metadata accessor for NestedItem(255, a3, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16);
  v11((char *)v19 - v9, a1, a3);
  v12 = sub_24259FB10();
  v14 = v13;
  v11(v10, a2, a3);
  if (v12 == sub_24259FB10() && v14 == v15)
    v17 = 0;
  else
    v17 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17 & 1;
}

uint64_t sub_24254CBC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[4];
  uint64_t v20;
  unint64_t v21;

  v10 = type metadata accessor for NestedItem(255, a3, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)v19 - v12;
  v20 = 0;
  v21 = 0xE000000000000000;
  sub_2425A0224();
  sub_24259FB70();
  v14 = *(int *)(TupleTypeMetadata2 + 48);
  v15 = *(_QWORD *)(a3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, a3);
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)&v13[v14] = v17;
  v19[3] = v10;
  v19[0] = v17;
  if (__OFADD__(a2, 2))
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    indentedDescription(_:_:)((uint64_t)v19, a2 + 2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, a3);
    sub_24259FB70();
    result = swift_bridgeObjectRelease();
    v18 = v21;
    *a6 = v20;
    a6[1] = v18;
  }
  return result;
}

uint64_t sub_24254CD30(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, a1);
  return IndentedDescription.description.getter(a1, v2);
}

void static NestedItem<>.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v2 = (char *)sub_24254CE00 + 4 * byte_2425C5194[*(_QWORD *)MEMORY[0x24BDAC7A8](v1) >> 62];
  __asm { BR              X10 }
}

uint64_t sub_24254CE00()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  char v8;
  void (*v9)(uint64_t, uint64_t);

  if (v1 >> 62)
  {
    v8 = 0;
  }
  else
  {
    v5 = swift_projectBox();
    v6 = swift_projectBox();
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v7(v3, v5, v0);
    v7(v2, v6, v0);
    swift_retain();
    swift_retain();
    v8 = sub_24259FAA4();
    v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v9(v2, v0);
    v9(v3, v0);
    swift_release();
    swift_release();
  }
  return v8 & 1;
}

void sub_24254CFE4(uint64_t a1)
{
  static NestedItem<>.== infix(_:_:)(a1);
}

uint64_t NestedDictionary.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  type metadata accessor for NestedItem(0, a1, a2, a3);
  result = sub_24259F93C();
  *a4 = result;
  return result;
}

uint64_t NestedDictionary.init(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  type metadata accessor for NestedItem(0, a2, a3, a4);
  sub_24259F93C();
  result = swift_bridgeObjectRelease();
  *a5 = a1;
  return result;
}

uint64_t NestedDictionary.init(item:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = *a1;
  v7 = type metadata accessor for NestedItem(0, a2, a3, a4);
  sub_24259F93C();
  if (v6 >> 62 == 2)
  {
    v8 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    result = swift_bridgeObjectRelease();
    *a5 = v8;
  }
  else
  {
    sub_24259FF84();
    sub_24259FB70();
    MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, v7);
    sub_2425A0230();
    result = sub_2425A00E0();
    __break(1u);
  }
  return result;
}

void NestedDictionary.subscript.getter(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for NestedItem(0, a2[2], a2[3], a2[4]);
  JUMPOUT(0x2426A76A0);
}

void sub_24254D22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;

  v4 = (uint64_t *)type metadata accessor for NestedDictionary(0, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  NestedDictionary.subscript.getter(a2, v4);
}

void sub_24254D278()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

uint64_t sub_24254D294(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v10 = *a1;
  sub_242550B14(v10);
  v8 = (_QWORD *)type metadata accessor for NestedDictionary(0, v5, v6, v7);
  return sub_242550A60((uint64_t)&v10, a3, v8);
}

uint64_t NestedDictionary.subscript.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_242550A60(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3[2] - 8) + 8))(a2);
}

void NestedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  v8 = a3[2];
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v7[5] = malloc(*(_QWORD *)(v9 + 64));
  (*(void (**)(void))(v9 + 16))();
  NestedDictionary.subscript.getter(a2, a3);
}

void (*sub_24254D3C4())(uint64_t **a1, char a2)
{
  return sub_24254D3E8;
}

void sub_24254D3E8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *a1;
  v4 = (*a1)[4];
  v3 = (void *)(*a1)[5];
  v5 = (*a1)[3];
  v6 = **a1;
  v7 = (_QWORD *)v2[1];
  v8 = v6;
  if ((a2 & 1) != 0)
  {
    sub_242550B14(v6);
    sub_242550A60((uint64_t)&v8, (uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
    sub_242550B2C(*v2);
  }
  else
  {
    sub_242550A60((uint64_t)&v8, (uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  }
  free(v3);
  free(v2);
}

uint64_t NestedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *v3;
  v8 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v10 = type metadata accessor for NestedItem(0, v8, v7, v9);
  MEMORY[0x2426A76A0](&v15, a1, v6, v8, v10, v9);
  v11 = v15;
  if ((~v15 & 0xF000000000000007) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
  if (v15 >> 62)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
  }
  else
  {
    v13 = swift_projectBox();
    v14 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a3, v13, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v7);
  }
  return sub_242550B2C(v11);
}

uint64_t sub_24254D590@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v5;

  v5 = (_QWORD *)type metadata accessor for NestedDictionary(0, *(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  return NestedDictionary.subscript.getter(a1, v5, a3);
}

uint64_t sub_24254D5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = sub_24259FE7C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v17 = type metadata accessor for NestedDictionary(0, v6, v7, v8);
  return NestedDictionary.subscript.setter((uint64_t)v13, (uint64_t)v15, v17);
}

uint64_t NestedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v27 = a2;
  v5 = *(_QWORD *)(a3 + 16);
  v29 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = sub_24259FE7C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v28 = a1;
  v18(v14, a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9) == 1)
  {
    v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19(v14, v10);
    v20 = v29;
    v21 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v7, v27, v5);
    v30 = 0xF000000000000007;
    type metadata accessor for NestedItem(255, v5, v9, *(_QWORD *)(a3 + 32));
    sub_24259F9F0();
    sub_24259FA14();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v5);
    return ((uint64_t (*)(uint64_t, uint64_t))v19)(v28, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v9);
    v23 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v7, v27, v5);
    v24 = swift_allocBox();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v25, v17, v9);
    v30 = v24;
    type metadata accessor for NestedItem(255, v5, v9, *(_QWORD *)(a3 + 32));
    sub_24259F9F0();
    sub_24259FA14();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v23, v5);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v28, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v9);
  }
}

void (*NestedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = sub_24259FE7C();
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v11 = malloc(v10);
  v12 = a3[2];
  v7[5] = v11;
  v7[6] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[7] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v7[8] = malloc(v14);
  v7[9] = malloc(v14);
  (*(void (**)(void))(v13 + 16))();
  NestedDictionary.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_24254DA58;
}

void sub_24254DA58(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (void *)(*a1)[8];
  v4 = (void *)(*a1)[9];
  if ((a2 & 1) != 0)
  {
    v5 = v2[7];
    v11 = v2[6];
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    v8 = v2[2];
    v9 = v2[3];
    v10 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    NestedDictionary.subscript.setter((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    NestedDictionary.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t NestedDictionary.keys.getter()
{
  return swift_bridgeObjectRetain();
}

void NestedDictionary.isEmpty.getter(uint64_t *a1)
{
  type metadata accessor for NestedItem(0, a1[2], a1[3], a1[4]);
  JUMPOUT(0x2426A7658);
}

uint64_t NestedDictionary.count.getter(uint64_t *a1)
{
  type metadata accessor for NestedItem(0, a1[2], a1[3], a1[4]);
  return _sSD8MorpheusE3lenSiyF_0();
}

uint64_t NestedDictionary.asItem()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *a1 = v4 | 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for NestedItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NestedItem);
}

uint64_t sub_24254DC2C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC9C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_24254DC6C()
{
  sub_24254DC80();
}

void sub_24254DC80()
{
  uint64_t *v0;

  type metadata accessor for NestedItem(0, v0[2], v0[3], v0[4]);
  NestedItem.unwrap()();
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_24254DD0C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24254DD30(uint64_t a1)
{
  return sub_24254F640(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.mapValues<A>(_:));
}

uint64_t sub_24254DD4C(uint64_t a1, _QWORD *a2)
{
  return sub_24254F6F0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.mapValues<A>(_:));
}

uint64_t sub_24254DD68(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((~a2 & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

void sub_24254DD80(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  sub_2425469C4(a1, v3[8], v3[9], v3[2], v3[3], v3[4], v3[5], v3[6], a3, v3[7], a2);
}

uint64_t sub_24254DDB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_24254DDD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_retain();
}

uint64_t NestedDictionary.asDictionary()(uint64_t *a1)
{
  type metadata accessor for NestedItem(0, a1[2], a1[3], a1[4]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  return sub_24259F9D8();
}

uint64_t NestedDictionary.description.getter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  swift_bridgeObjectRetain();
  v4 = type metadata accessor for NestedItem(0, a1[2], a1[3], a1[4]);
  v5 = MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>, v4);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v5 + 16))(0, v4, v5);
  swift_release();
  return v6;
}

uint64_t NestedDictionary.mapValues<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_24254E918(a1, a2, a3, a4, (void (*)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.mapValues<A>(_:), a5);
}

uint64_t NestedDictionary.mapValues<A, B, C>(_:transform:)(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  unint64_t v31;

  v13 = *a3;
  v14 = *v9;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  v29[1] = v15 | 0x8000000000000000;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v13;
  v29[0] = v16 | 0x8000000000000000;
  v18 = a6[2];
  v17 = a6[3];
  v19 = a6[4];
  v20 = type metadata accessor for NestedItem(0, v18, v17, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C>(_:_:)((uint64_t)&v31, (uint64_t)&v30, (uint64_t)v29, a4, a5, v20, a7, a8, a9);
  swift_release();
  result = swift_release();
  if (!v28)
  {
    if (v31 >> 62 == 2 && (v30 & 0xC000000000000000) == 0x8000000000000000)
    {
      v22 = *(_QWORD *)(v31 + 16);
      v23 = *(_QWORD *)(v30 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v22, v18, a8, v19, a1);
      NestedDictionary.init(values:)(v23, v18, a9, v19, a2);
      swift_release_n();
      return swift_release_n();
    }
    else
    {
      result = sub_2425A00E0();
      __break(1u);
    }
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A, B>(_:transform:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  _QWORD *v40;
  _QWORD v41[2];
  uint64_t v42;
  unint64_t v43;

  v13 = *a1;
  v14 = *v7;
  v15 = (_QWORD *)swift_allocObject();
  v17 = a4[2];
  v16 = a4[3];
  v15[2] = v17;
  v15[3] = v16;
  v15[4] = a5;
  v15[5] = a6;
  v18 = a4[4];
  v15[6] = v18;
  v15[7] = a2;
  v15[8] = a3;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v14;
  v41[1] = v19 | 0x8000000000000000;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v13;
  v41[0] = v20 | 0x8000000000000000;
  v34 = v17;
  v35 = v16;
  v36 = a5;
  v37 = a6;
  v38 = v18;
  v39 = sub_242550B54;
  v40 = v15;
  v26 = v17;
  v27 = v16;
  v28 = a5;
  v29 = a6;
  v30 = v18;
  v31 = sub_242550B84;
  v32 = &v33;
  v21 = type metadata accessor for NestedItem(0, v17, v16, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C>(_:_:)((uint64_t)&v43, (uint64_t)&v42, (uint64_t)v41, (uint64_t)sub_242550BB0, (uint64_t)v25, v21, a5, a6, MEMORY[0x24BEE1768]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v43 >> 62 == 2)
  {
    v22 = swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v22, v17, a6, v18, a7);
    swift_release();
    return swift_release();
  }
  else
  {
    result = sub_2425A00E0();
    __break(1u);
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A, B, C, D, E>(_:_:transform:)(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v15 = *a4;
  v16 = *a5;
  v17 = *v13;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  v37[1] = v18 | 0x8000000000000000;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v15;
  v37[0] = v19 | 0x8000000000000000;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v16;
  v36 = v20 | 0x8000000000000000;
  v21 = a8[2];
  v22 = a8[3];
  v23 = a8[4];
  v31 = v21;
  v24 = type metadata accessor for NestedItem(0, v21, v22, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C, D, E>(_:_:_:)((uint64_t)&v40, (uint64_t)&v39, (uint64_t)&v38, (uint64_t)v37, (uint64_t)&v36, a6, a7, v24, a9, a10, a11, a12, a13);
  swift_release();
  swift_release();
  result = swift_release();
  if (!v35)
  {
    if (v40 >> 62 == 2 && v39 >> 62 == 2 && (v38 & 0xC000000000000000) == 0x8000000000000000)
    {
      v26 = *(_QWORD *)(v40 + 16);
      v27 = *(_QWORD *)(v39 + 16);
      v28 = *(_QWORD *)(v38 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v26, v31, a11, v23, a1);
      NestedDictionary.init(values:)(v27, v31, a12, v23, a2);
      NestedDictionary.init(values:)(v28, v31, a13, v23, a3);
      swift_release_n();
      swift_release_n();
      return swift_release_n();
    }
    else
    {
      result = sub_2425A00E0();
      __break(1u);
    }
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A, B, C, D>(_:_:transform:)(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v11;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)();
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)();
  _QWORD *v53;
  unint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v15 = *a3;
  v30 = *a4;
  v31 = *v11;
  v16 = (_QWORD *)swift_allocObject();
  v17 = a7[2];
  v18 = a7[3];
  v16[2] = v17;
  v16[3] = v18;
  v16[4] = a8;
  v16[5] = a9;
  v16[6] = a10;
  v16[7] = a11;
  v19 = a7[4];
  v16[8] = v19;
  v16[9] = a5;
  v16[10] = a6;
  v20 = v17;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v31;
  v55[1] = v21 | 0x8000000000000000;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v15;
  v55[0] = v22 | 0x8000000000000000;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v30;
  v54 = v23 | 0x8000000000000000;
  v45 = v20;
  v46 = v18;
  v47 = a8;
  v48 = a9;
  v49 = a10;
  v50 = a11;
  v51 = v19;
  v52 = sub_242550BFC;
  v53 = v16;
  v35 = v20;
  v36 = v18;
  v37 = a8;
  v38 = a9;
  v39 = a10;
  v40 = a11;
  v41 = v19;
  v42 = sub_242550C20;
  v43 = &v44;
  v24 = v20;
  v25 = type metadata accessor for NestedItem(0, v20, v18, v19);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C, D, E>(_:_:_:)((uint64_t)&v58, (uint64_t)&v57, (uint64_t)&v56, (uint64_t)v55, (uint64_t)&v54, (uint64_t)sub_242550C4C, (uint64_t)v34, v25, a8, a9, a10, a11, MEMORY[0x24BEE1768]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v58 >> 62 == 2 && (v57 & 0xC000000000000000) == 0x8000000000000000)
  {
    v26 = *(_QWORD *)(v58 + 16);
    v27 = *(_QWORD *)(v57 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v26, v24, a10, v19, a1);
    NestedDictionary.init(values:)(v27, v24, a11, v19, a2);
    swift_release();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    result = sub_2425A00E0();
    __break(1u);
  }
  return result;
}

uint64_t NestedDictionary.compactMapValues<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_24254E918(a1, a2, a3, a4, (void (*)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.compactMapValues<A>(_:), a5);
}

uint64_t sub_24254E918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, void (*a5)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v22;

  v9 = v7;
  v14 = *v6;
  *(_QWORD *)(swift_allocObject() + 16) = v14;
  v16 = a3[2];
  v15 = a3[3];
  v17 = a3[4];
  v18 = type metadata accessor for NestedItem(0, v16, v15, v17);
  swift_bridgeObjectRetain();
  a5(&v22, a1, a2, v18, a4);
  result = swift_release();
  if (!v9)
  {
    if (v22 >> 62 == 2)
    {
      v20 = swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v20, v16, a4, v17, a6);
      return swift_release();
    }
    else
    {
      result = sub_2425A00E0();
      __break(1u);
    }
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A>(transform:)@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;

  v8 = *v3;
  *(_QWORD *)(swift_allocObject() + 16) = v8;
  swift_bridgeObjectRetain();
  v10 = a1[2];
  v9 = a1[3];
  v11 = a1[4];
  type metadata accessor for NestedItem(0, v10, v9, v11);
  NestedItem.mapValues<A>(prefix:_:)(0);
  result = swift_release();
  if (!v4)
  {
    if (v14 >> 62 == 2)
    {
      v13 = swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v13, v10, a2, v11, a3);
      return swift_release();
    }
    else
    {
      result = sub_2425A00E0();
      __break(1u);
    }
  }
  return result;
}

uint64_t static NestedDictionary.unflattened<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  static NestedItem.unflattened<>(_:)(a1, a2, (uint64_t *)&v7);
  if (v7 >> 62 == 2)
  {
    v5 = swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v5, MEMORY[0x24BEE0D00], a2, MEMORY[0x24BEE0D10], a3);
    return swift_release();
  }
  else
  {
    result = sub_2425A00E0();
    __break(1u);
  }
  return result;
}

{
  uint64_t v5;
  char *TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[5] = a1;
  v11[2] = a2;
  v5 = sub_24259F9F0();
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x2426A87E0](MEMORY[0x24BEE04E8], v5);
  v9 = sub_242544520((void (*)(char *, char *))sub_242550C8C, (uint64_t)v11, v5, TupleTypeMetadata2, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  static NestedDictionary.unflattened<>(_:)(v9, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24254ED44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = *(int *)(MEMORY[0x24BDAC7A8](TupleTypeMetadata2) + 48);
  v9 = (char *)&v16 + v8 - v7;
  v10 = (char *)a1 + v8;
  v12 = *a1;
  v11 = a1[1];
  v13 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v9, v10, a2);
  v14 = (char *)a3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  *a3 = v12;
  a3[1] = v11;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v14, v9, a2);
  return swift_bridgeObjectRetain();
}

uint64_t NestedDictionary.flattenedValues()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  swift_bridgeObjectRetain();
  v4 = type metadata accessor for NestedItem(0, a1[2], a1[3], a1[4]);
  NestedItem.flattenedValues()(v4);
  v6 = v5;
  swift_release();
  return v6;
}

uint64_t NestedDictionary.replacingValues(with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;

  v7 = *v3;
  *(_QWORD *)(swift_allocObject() + 16) = v7;
  swift_bridgeObjectRetain();
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = type metadata accessor for NestedItem(0, v8, v9, v10);
  sub_24254BCF0((uint64_t)&v14, a1, 0, v11);
  swift_release();
  if (v14 >> 62 == 2)
  {
    v12 = swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v12, v8, v9, v10, a3);
    return swift_release();
  }
  else
  {
    result = sub_2425A00E0();
    __break(1u);
  }
  return result;
}

uint64_t static NestedDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v9;

  v7 = type metadata accessor for NestedItem(0, a3, a4, a5);
  v9 = a6;
  MEMORY[0x2426A87E0](&protocol conformance descriptor for <> NestedItem<A, B>, v7, &v9);
  return sub_24259F9FC() & 1;
}

uint64_t sub_24254F074(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static NestedDictionary<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(_QWORD *)(a4 - 8));
}

uint64_t NestedDictionary.startIndex.getter(_QWORD *a1)
{
  return sub_24254F0A0(a1, MEMORY[0x24BEE0268]);
}

uint64_t NestedDictionary.endIndex.getter(_QWORD *a1)
{
  return sub_24254F0A0(a1, MEMORY[0x24BEE0438]);
}

uint64_t sub_24254F0A0(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  v5 = a1[2];
  v6 = a1[4];
  v7 = type metadata accessor for NestedItem(0, v5, a1[3], v6);
  return a2(v4, v5, v7, v6);
}

uint64_t NestedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  type metadata accessor for NestedItem(0, a6[2], a6[3], a6[4]);
  return sub_24259FA20();
}

uint64_t NestedDictionary.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  type metadata accessor for NestedItem(0, a4[2], a4[3], a4[4]);
  return sub_24259F9B4();
}

uint64_t sub_24254F1FC@<X0>(uint64_t a1@<X8>)
{
  return sub_24254F214((uint64_t (*)(void))NestedDictionary.startIndex.getter, a1);
}

uint64_t sub_24254F208@<X0>(uint64_t a1@<X8>)
{
  return sub_24254F214((uint64_t (*)(void))NestedDictionary.endIndex.getter, a1);
}

uint64_t sub_24254F214@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  return result;
}

void (*sub_24254F240(uint64_t **a1, uint64_t a2, uint64_t *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  void (*v11)(_QWORD *);
  _QWORD *v12;
  _QWORD *v13;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  v7 = a3[2];
  type metadata accessor for NestedItem(255, v7, a3[3], a3[4]);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6[5] = v9;
  v10 = (char *)malloc(*(_QWORD *)(v9 + 64));
  v6[6] = (uint64_t)v10;
  v11 = sub_24254F384(v6, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), a3);
  v13 = v12;
  v6[7] = (uint64_t)v11;
  (*(void (**)(char *))(*(_QWORD *)(v7 - 8) + 16))(v10);
  *(_QWORD *)&v10[*(int *)(TupleTypeMetadata2 + 48)] = *v13;
  swift_retain();
  return sub_24254F330;
}

void sub_24254F330(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_24254F384(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5))(_QWORD *a1)
{
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  void *v12;

  v9 = a4 & 1;
  type metadata accessor for NestedItem(255, a5[2], a5[3], a5[4]);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  a1[2] = (uint64_t)v12;
  NestedDictionary.subscript.getter((uint64_t)v12, (uint64_t)v12 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, v9, a5);
  return sub_24254F448;
}

void sub_24254F448(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

void sub_24254F488(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t sub_24254F4B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  result = NestedDictionary.index(after:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = v6 & 1;
  return result;
}

uint64_t sub_24254F4EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 16);
  v6 = NestedDictionary.index(after:)(*(_QWORD *)a1, v4, v5, a2);
  v8 = v7;
  v10 = v9;
  result = sub_242550F58(v3, v4, v5);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v10 & 1;
  return result;
}

uint64_t sub_24254F564@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;

  v4 = *v2;
  result = NestedDictionary.startIndex.getter(a1);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v7 & 1;
  return result;
}

uint64_t sub_24254F5A0(uint64_t a1)
{
  MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedDictionary<A, B>, a1);
  return sub_24259FDF8();
}

uint64_t sub_24254F5D4(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedDictionary<A, B>, a1);
  v1 = sub_24258783C();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24254F624(uint64_t a1)
{
  return sub_24254F640(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.compactMapValues<A>(_:));
}

uint64_t sub_24254F640(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v2[4];
  v5 = v2[6];
  v6 = v2[7];
  v7 = type metadata accessor for NestedItem(0, v2[2], v2[3], v2[5]);
  return a2(v5, v6, v7, v4);
}

uint64_t sub_24254F6B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_242549364(a1, v2[2], v2[4], v2[5], a2);
}

uint64_t sub_24254F6D4(uint64_t a1, _QWORD *a2)
{
  return sub_24254F6F0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.compactMapValues<A>(_:));
}

uint64_t sub_24254F6F0(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v3;

  return sub_2425492C8(a1, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5], a2, a3);
}

unint64_t *sub_24254F724@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;

  v3 = *result;
  if (*result == 0xC000000000000000)
    v3 = 0xF000000000000007;
  else
    result = (unint64_t *)swift_retain();
  *a2 = v3;
  return result;
}

uint64_t sub_24254F764(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_242549AE8(a1, a2, v2[2], v2[3], v2[4], v2[5]) & 1;
}

uint64_t sub_24254F784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_242549C1C(a1, a2, a3, a4, v4[6], v4[7], v4[8], v4[9], v4[2], v4[3], v4[4], v4[5]);
}

uint64_t sub_24254F7B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_242549D90(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 48), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a2, a3);
}

uint64_t sub_24254F7DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_242549A28(a1, a2, v2[6], v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_24254F80C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD *))(v2 + 48))(*a1, a1 + 1);
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_24254F844(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_24254A388(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t sub_24254F854@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24254F948(a1, a2);
}

uint64_t sub_24254F868(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_24254A2F8(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t sub_24254F878@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD *))(v2 + 40))(*a1, a1 + 1);
  *a2 = result;
  return result;
}

uint64_t sub_24254F8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
  else
    return sub_2425A01F4();
}

uint64_t sub_24254F904()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = type metadata accessor for NestedItem(0, v0[2], v0[3], v0[4]);
  return NestedItem.flattenedValues()(v1);
}

uint64_t sub_24254F948@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t result;

  v5 = (uint64_t (*)(uint64_t, uint64_t))v2[5];
  type metadata accessor for NestedItem(255, v2[2], v2[3], v2[4]);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  *a2 = result;
  return result;
}

uint64_t sub_24254F9C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for NestedItem(0, v1[2], v1[3], v1[4]);
  result = NestedItem.flattenedValues()(v3);
  *a1 = result;
  return result;
}

uint64_t sub_24254FA18(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_24254CA90(a1, a2, v2[2], v2[3], v2[4]) & 1;
}

uint64_t sub_24254FA38@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_24254CBC4(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

unint64_t sub_24254FA58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2571FC9E8[0];
  if (!qword_2571FC9E8[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2571FC9E0);
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, qword_2571FC9E8);
  }
  return result;
}

uint64_t sub_24254FAA4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_24254CA04(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

unsigned __int8 *sub_24254FAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_24255104C();
  swift_bridgeObjectRetain();
  v7 = sub_24259FBF4();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_24254FE30();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_24259FFF0();
  }
LABEL_7:
  v13 = sub_24254FBB4(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_24254FBB4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_24254FE30()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_24259FC00();
  v4 = sub_24254FEAC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24254FEAC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_24254FFF0(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_24259B800(v9, 0);
      v12 = sub_2425500DC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x2426A77CC](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x2426A77CCLL);
LABEL_9:
      sub_24259FFF0();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x2426A77CC]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_24254FFF0(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_24259B868(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_24259B868(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_24259FBB8();
  }
  __break(1u);
  return result;
}

unint64_t sub_2425500DC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_24259B868(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_24259FBC4();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_24259FFF0();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_24259B868(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_24259FBA0();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unsigned __int8 *sub_2425502EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_24259FBF4();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_24254FE30();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_24259FFF0();
  }
LABEL_7:
  v11 = sub_24254FBB4(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_2425503D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return sub_2425A01E8();
  swift_bridgeObjectRetain();
  sub_24259FB70();
  sub_2425A01E8();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_242550468(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_24259FFF0();
  }
  result = sub_24255063C((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_242550538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_24259FD08();
  v15 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a3 - 8);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      v11 = a2 - 1;
      if (v11)
      {
        v12 = *(_QWORD *)(v9 + 72);
        v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    v14 = sub_24259FD68();
    nullsub_1(v14);
    return v15;
  }
  return result;
}

unint64_t sub_2425505F0(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_24259FC00();
  __break(1u);
  return result;
}

uint64_t sub_24255063C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_24259B868(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = sub_24259FBB8();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_24259B868(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_24259B868(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = sub_24259FBB8();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_242550A60(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = a3[2];
  v6 = *(_QWORD *)MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v7 + 16))((char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9[1] = v6;
  type metadata accessor for NestedItem(255, v4, a3[3], a3[4]);
  sub_24259F9F0();
  return sub_24259FA14();
}

uint64_t sub_242550B14(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_retain();
  return result;
}

uint64_t sub_242550B2C(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t sub_242550B44()
{
  return swift_deallocObject();
}

uint64_t sub_242550B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(a2, a3);
  return 0;
}

uint64_t sub_242550B84()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_242550BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v8;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, a3, a4);
  if (!v5)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v8 & 1;
  }
  return result;
}

uint64_t sub_242550BEC()
{
  return swift_deallocObject();
}

uint64_t sub_242550BFC()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 72))();
  return 0;
}

uint64_t sub_242550C20()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t sub_242550C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v10;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 72))(a1, a2, a4, a5, a6);
  if (!v7)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = v10 & 1;
  }
  return result;
}

uint64_t sub_242550C8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_24254ED44(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_242550CA8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2426A87E0](&protocol conformance descriptor for NestedItem<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_242550CD4()
{
  JUMPOUT(0x2426A87E0);
}

void sub_242550CE4()
{
  JUMPOUT(0x2426A87E0);
}

void sub_242550CF4()
{
  JUMPOUT(0x2426A87E0);
}

void sub_242550D04()
{
  JUMPOUT(0x2426A87E0);
}

void sub_242550D14()
{
  JUMPOUT(0x2426A87E0);
}

uint64_t sub_242550D2C()
{
  return 24;
}

__n128 sub_242550D38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_242550D54()
{
  return 24;
}

__n128 sub_242550D60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of IndentedDescription.description(indent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_242550D7C()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *sub_242550D84(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t sub_242550DB4()
{
  return swift_release();
}

_QWORD *sub_242550DC0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *sub_242550E0C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_242550E40(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_242550E9C(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_242550EEC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

_QWORD *sub_242550F08(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_242550F18(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

uint64_t sub_242550F44()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for NestedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NestedDictionary);
}

uint64_t sub_242550F58(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_242550F64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_24254C2A4(a1, a2, v2[2], v2[3], v2[4]) & 1;
}

uint64_t sub_242550F84()
{
  return swift_deallocObject();
}

uint64_t sub_242550F94()
{
  swift_getTupleTypeMetadata2();
  return sub_24259FD08();
}

uint64_t sub_242550FC8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_242550FD8()
{
  return swift_deallocObject();
}

uint64_t sub_242550FE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t *sub_242551010@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24254B694(a1, a2);
}

uint64_t sub_242551030()
{
  return swift_deallocObject();
}

_QWORD *sub_242551040@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_24255104C()
{
  unint64_t result;

  result = qword_2571FCAF0;
  if (!qword_2571FCAF0)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_2571FCAF0);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2426A878C](a1, v6, a5);
}

uint64_t sub_242551130(uint64_t a1, uint64_t a2)
{
  return sub_24254FA18(a1, a2) & 1;
}

uint64_t static StreamOrDevice.default.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for Stream();
  v2 = swift_allocObject();
  result = (uint64_t)mlx_default_device();
  v4 = result;
  if (result)
  {
    result = mlx_default_stream(result);
    if (result)
    {
      *(_QWORD *)(v2 + 16) = result;
      result = mlx_free(v4);
      *a1 = v2;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t StreamOrDevice.ctx.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t Stream.__allocating_init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v0 = swift_allocObject();
  result = (uint64_t)mlx_default_device();
  v2 = result;
  if (result)
  {
    result = mlx_default_stream(result);
    if (result)
    {
      *(_QWORD *)(v0 + 16) = result;
      mlx_free(v2);
      return v0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static StreamOrDevice.device(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = mlx_default_stream(*(_QWORD *)(a1 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for Stream();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Stream.defaultStream(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  result = mlx_default_stream(*(_QWORD *)(a1 + 16));
  v2 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2425512C4(uint64_t a1)
{
  return sub_242551328(a1, &qword_2571FC5B0, (uint64_t)&qword_2571FCBC8, &qword_2571FCAF8);
}

uint64_t static StreamOrDevice.cpu.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_2425513B4(&qword_2571FC5A0, &qword_2571FCAF8, a1);
}

uint64_t sub_242551304(uint64_t a1)
{
  return sub_242551328(a1, &qword_2571FC5B8, (uint64_t)&qword_2571FCBD0, &qword_2571FCB00);
}

uint64_t sub_242551328(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v7;

  if (*a2 != -1)
    swift_once();
  result = mlx_default_stream(*(_QWORD *)(*(_QWORD *)a3 + 16));
  v7 = result;
  if (result)
  {
    type metadata accessor for Stream();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static StreamOrDevice.gpu.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_2425513B4(&qword_2571FC5A8, &qword_2571FCB00, a1);
}

uint64_t sub_2425513B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_retain();
}

uint64_t static StreamOrDevice.stream(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t StreamOrDevice.description.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = mlx_tostring(*(uint64_t (****)(_QWORD))(*(_QWORD *)v0 + 16));
  v2 = result;
  if (result)
  {
    result = mlx_string_data(result);
    if (result)
    {
      v3 = sub_24259FB88();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Stream.description.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = mlx_tostring(*(uint64_t (****)(_QWORD))(v0 + 16));
  v2 = result;
  if (result)
  {
    result = mlx_string_data(result);
    if (result)
    {
      v3 = sub_24259FB88();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Stream.init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = (uint64_t)mlx_default_device();
  v2 = result;
  if (result)
  {
    result = mlx_default_stream(result);
    if (result)
    {
      *(_QWORD *)(v0 + 16) = result;
      mlx_free(v2);
      return v0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Stream()
{
  return objc_opt_self();
}

uint64_t Stream.__allocating_init(index:_:)(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = swift_allocObject();
  result = mlx_stream_new(a1, *(_QWORD *)(a2 + 16));
  v6 = result;
  if (result)
  {
    swift_release();
    *(_QWORD *)(v4 + 16) = v6;
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Stream.init(index:_:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = mlx_stream_new(a1, *(_QWORD *)(a2 + 16));
  v4 = result;
  if (result)
  {
    swift_release();
    *(_QWORD *)(v2 + 16) = v4;
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Stream.deinit()
{
  uint64_t v0;

  mlx_free(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t Stream.__deallocating_deinit()
{
  uint64_t v0;

  mlx_free(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Stream.synchronize()()
{
  uint64_t v0;

  mlx_synchronize(*(_QWORD *)(v0 + 16));
}

ValueMetadata *type metadata accessor for StreamOrDevice()
{
  return &type metadata for StreamOrDevice;
}

uint64_t method lookup function for Stream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Stream.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of Stream.__allocating_init(index:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t static MLXArray.zeros<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _QWORD *v21;

  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = a4;
    v18 = *a3;
    v19 = a5;
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v6, 0);
    v7 = v21;
    v10 = (int64_t *)(a1 + 32);
    v11 = v6;
    while (1)
    {
      v13 = *v10++;
      v12 = v13;
      if (v13 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v12 > 0x7FFFFFFF)
        goto LABEL_12;
      v21 = v7;
      v15 = v7[2];
      v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        result = sub_242509C04(v14 > 1, v15 + 1, 1);
        v7 = v21;
      }
      v7[2] = v15 + 1;
      *((_DWORD *)v7 + v15 + 8) = v12;
      if (!--v11)
      {
        a5 = v19;
        a4 = v17;
        v5 = v18;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_9:
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v20, a4, a5);
    v16 = mlx_zeros(v7 + 4, v6, v20, *(_QWORD *)(v5 + 16));
    result = swift_bridgeObjectRelease();
    if (v16)
    {
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v16;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static MLXArray.zeros(like:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_zeros_like(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static MLXArray.ones<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _QWORD *v21;

  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = a4;
    v18 = *a3;
    v19 = a5;
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v6, 0);
    v7 = v21;
    v10 = (int64_t *)(a1 + 32);
    v11 = v6;
    while (1)
    {
      v13 = *v10++;
      v12 = v13;
      if (v13 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v12 > 0x7FFFFFFF)
        goto LABEL_12;
      v21 = v7;
      v15 = v7[2];
      v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        result = sub_242509C04(v14 > 1, v15 + 1, 1);
        v7 = v21;
      }
      v7[2] = v15 + 1;
      *((_DWORD *)v7 + v15 + 8) = v12;
      if (!--v11)
      {
        a5 = v19;
        a4 = v17;
        v5 = v18;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_9:
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v20, a4, a5);
    v16 = mlx_ones(v7 + 4, v6, v20, *(_QWORD *)(v5 + 16));
    result = swift_bridgeObjectRelease();
    if (v16)
    {
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v16;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static MLXArray.ones(_:dtype:stream:)(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = *a3;
    v17 = *a2;
    result = sub_242509C04(0, v5, 0);
    v6 = v18;
    v9 = (int64_t *)(a1 + 32);
    v10 = v5;
    while (1)
    {
      v12 = *v9++;
      v11 = v12;
      if (v12 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v11 > 0x7FFFFFFF)
        goto LABEL_12;
      v14 = *(_QWORD *)(v18 + 16);
      v13 = *(_QWORD *)(v18 + 24);
      if (v14 >= v13 >> 1)
        result = sub_242509C04(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v18 + 16) = v14 + 1;
      *(_DWORD *)(v18 + 4 * v14 + 32) = v11;
      if (!--v10)
      {
        v3 = v17;
        v4 = v16;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_9:
    v15 = mlx_ones((const void *)(v6 + 32), v5, v3, *(_QWORD *)(v4 + 16));
    result = swift_bridgeObjectRelease();
    if (v15)
    {
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v15;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static MLXArray.ones(like:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_ones_like(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static MLXArray.eye<A>(_:m:k:type:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a3 & 1) != 0)
    a2 = result;
  if (a2 > 0x7FFFFFFF)
    goto LABEL_14;
  v10 = a4;
  if (a4 < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_15;
  if (a4 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = *a6;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v13, a7, a8);
  result = (uint64_t)mlx_eye(v8, a2, v10, v13, *(_QWORD *)(v11 + 16));
  v12 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t static MLXArray.full<A>(_:values:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;

  v10 = *a4;
  v11 = Array<A>.asInt32.getter(a1);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v16, a5, a6);
  v14 = mlx_full((const void *)(v11 + 32), v12, v13, v16, *(_QWORD *)(v10 + 16));
  result = swift_bridgeObjectRelease();
  if (v14)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static MLXArray.full(_:values:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t dtype;
  _QWORD *v10;
  uint64_t result;
  unsigned __int8 v12;

  v5 = *a3;
  v6 = Array<A>.asInt32.getter(a1);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  dtype = mlx_array_get_dtype(v8);
  sub_242553C80(dtype, &v12);
  v10 = mlx_full((const void *)(v6 + 32), v7, v8, v12, *(_QWORD *)(v5 + 16));
  result = swift_bridgeObjectRelease();
  if (v10)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static MLXArray.identity<A>(_:type:stream:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v8, a4, a5);
  result = (uint64_t)mlx_identity(v5, v8, *(_QWORD *)(v6 + 16));
  v7 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static MLXArray.linspace<A>(_:_:count:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  void (*v16)(char *);
  void (*v17)(char *, uint64_t);
  double v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  double v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  v29 = a6;
  v9 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v27 - v13;
  v28 = *v15;
  v16 = *(void (**)(char *))(v9 + 16);
  v16((char *)&v27 - v13);
  if (sub_24259FEF4() < 65)
  {
    v19 = sub_24259FF00();
    v27 = a3;
    v20 = v19;
    v21 = sub_24259FEE8();
    v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v14, a5);
    a3 = v27;
    if ((v20 & 1) != 0)
      v18 = (double)v21;
    else
      v18 = (double)(unint64_t)v21;
  }
  else
  {
    sub_242552FE4();
    sub_242553028();
    sub_24259F960();
    v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v14, a5);
    v18 = v30;
  }
  ((void (*)(char *, uint64_t, uint64_t))v16)(v12, a2, a5);
  if (sub_24259FEF4() <= 64)
  {
    v24 = sub_24259FF00();
    v25 = sub_24259FEE8();
    result = ((uint64_t (*)(char *, uint64_t))v17)(v12, a5);
    if ((v24 & 1) != 0)
      v23 = (double)v25;
    else
      v23 = (double)(unint64_t)v25;
  }
  else
  {
    sub_242552FE4();
    sub_242553028();
    sub_24259F960();
    result = ((uint64_t (*)(char *, uint64_t))v17)(v12, a5);
    v23 = v30;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  (*(void (**)(double *__return_ptr, uint64_t))(v29 + 16))(&v30, a5);
  result = (uint64_t)mlx_linspace(a3, LOBYTE(v30), *(_QWORD *)(v28 + 16), v18, v23);
  v26 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v26;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

{
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *);
  double v16;
  uint64_t result;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  double v22;
  double v23;

  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  v15 = *(void (**)(char *))(v14 + 16);
  v15(v11);
  sub_242552FE4();
  sub_24259F954();
  v16 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v15)(v11, a2, a5);
  result = sub_24259F954();
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v18 = v22;
  (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v21, a5, a6);
  result = (uint64_t)mlx_linspace(a3, v21, *(_QWORD *)(v13 + 16), v16, v18);
  v19 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v19;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _s8Morpheus8MLXArrayC6repeat_5count4axis6streamA2C_S2iAA14StreamOrDeviceVtFZ_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_repeat(*(_QWORD *)(result + 16), a2, (mlx::core *)a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _s8Morpheus8MLXArrayC6repeat_5count6streamA2C_SiAA14StreamOrDeviceVtFZ_0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_repeat_all(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t zeros<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _QWORD *v21;

  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = a4;
    v18 = *a3;
    v19 = a5;
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v6, 0);
    v7 = v21;
    v10 = (int64_t *)(a1 + 32);
    v11 = v6;
    while (1)
    {
      v13 = *v10++;
      v12 = v13;
      if (v13 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v12 > 0x7FFFFFFF)
        goto LABEL_12;
      v21 = v7;
      v15 = v7[2];
      v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        result = sub_242509C04(v14 > 1, v15 + 1, 1);
        v7 = v21;
      }
      v7[2] = v15 + 1;
      *((_DWORD *)v7 + v15 + 8) = v12;
      if (!--v11)
      {
        v5 = v18;
        a5 = v19;
        a4 = v17;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_9:
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v20, a4, a5);
    v16 = mlx_zeros(v7 + 4, v6, v20, *(_QWORD *)(v5 + 16));
    result = swift_bridgeObjectRelease();
    if (v16)
    {
      type metadata accessor for MLXArray();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v16;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t zeros(like:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_zeros_like(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ones<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _QWORD *v21;

  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = a4;
    v18 = *a3;
    v19 = a5;
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v6, 0);
    v7 = v21;
    v10 = (int64_t *)(a1 + 32);
    v11 = v6;
    while (1)
    {
      v13 = *v10++;
      v12 = v13;
      if (v13 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v12 > 0x7FFFFFFF)
        goto LABEL_12;
      v21 = v7;
      v15 = v7[2];
      v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        result = sub_242509C04(v14 > 1, v15 + 1, 1);
        v7 = v21;
      }
      v7[2] = v15 + 1;
      *((_DWORD *)v7 + v15 + 8) = v12;
      if (!--v11)
      {
        v5 = v18;
        a5 = v19;
        a4 = v17;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_9:
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v20, a4, a5);
    v16 = mlx_ones(v7 + 4, v6, v20, *(_QWORD *)(v5 + 16));
    result = swift_bridgeObjectRelease();
    if (v16)
    {
      type metadata accessor for MLXArray();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v16;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t ones(like:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)mlx_ones_like(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t eye<A>(_:m:k:type:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a3 & 1) != 0)
    a2 = result;
  if (a2 > 0x7FFFFFFF)
    goto LABEL_14;
  v10 = a4;
  if (a4 < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_15;
  if (a4 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = *a6;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v13, a7, a8);
  result = (uint64_t)mlx_eye(v8, a2, v10, v13, *(_QWORD *)(v11 + 16));
  v12 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t full<A>(_:values:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;

  v10 = *a4;
  v11 = Array<A>.asInt32.getter(a1);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v16, a5, a6);
  v14 = mlx_full((const void *)(v11 + 32), v12, v13, v16, *(_QWORD *)(v10 + 16));
  result = swift_bridgeObjectRelease();
  if (v14)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t full(_:values:stream:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t dtype;
  _QWORD *v10;
  uint64_t result;
  unsigned __int8 v12;

  v5 = *a3;
  v6 = Array<A>.asInt32.getter(a1);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  dtype = mlx_array_get_dtype(v8);
  sub_242553C80(dtype, &v12);
  v10 = mlx_full((const void *)(v6 + 32), v7, v8, v12, *(_QWORD *)(v5 + 16));
  result = swift_bridgeObjectRelease();
  if (v10)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t identity<A>(_:type:stream:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v8, a4, a5);
  result = (uint64_t)mlx_identity(v5, v8, *(_QWORD *)(v6 + 16));
  v7 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t linspace<A>(_:_:count:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  void (*v17)(char *);
  void (*v18)(char *, uint64_t);
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t result;
  double v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;

  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v31 - v14;
  v33 = *v16;
  v17 = *(void (**)(char *))(v10 + 16);
  v17((char *)&v31 - v14);
  if (sub_24259FEF4() < 65)
  {
    v20 = sub_24259FF00();
    v32 = a3;
    v21 = a2;
    v22 = a6;
    v23 = v20;
    v24 = sub_24259FEE8();
    v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v15, a5);
    v25 = (v23 & 1) == 0;
    a6 = v22;
    a2 = v21;
    a3 = v32;
    if (v25)
      v19 = (double)(unint64_t)v24;
    else
      v19 = (double)v24;
  }
  else
  {
    sub_242552FE4();
    sub_242553028();
    sub_24259F960();
    v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v15, a5);
    v19 = v34;
  }
  ((void (*)(char *, uint64_t, uint64_t))v17)(v13, a2, a5);
  if (sub_24259FEF4() <= 64)
  {
    v28 = sub_24259FF00();
    v29 = sub_24259FEE8();
    result = ((uint64_t (*)(char *, uint64_t))v18)(v13, a5);
    if ((v28 & 1) != 0)
      v27 = (double)v29;
    else
      v27 = (double)(unint64_t)v29;
  }
  else
  {
    sub_242552FE4();
    sub_242553028();
    sub_24259F960();
    result = ((uint64_t (*)(char *, uint64_t))v18)(v13, a5);
    v27 = v34;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v34, a5, a6);
  result = (uint64_t)mlx_linspace(a3, LOBYTE(v34), *(_QWORD *)(v33 + 16), v19, v27);
  v30 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v30;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

{
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *);
  double v16;
  uint64_t result;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  double v22;
  double v23;

  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  v15 = *(void (**)(char *))(v14 + 16);
  v15(v11);
  sub_242552FE4();
  sub_24259F954();
  v16 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v15)(v11, a2, a5);
  result = sub_24259F954();
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v18 = v22;
  (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v21, a5, a6);
  result = (uint64_t)mlx_linspace(a3, v21, *(_QWORD *)(v13 + 16), v16, v18);
  v19 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v19;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _s8Morpheus6repeat_5count4axis6streamAA8MLXArrayCAG_S2iAA14StreamOrDeviceVtF_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)mlx_repeat(*(_QWORD *)(result + 16), a2, (mlx::core *)a3, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _s8Morpheus6repeat_5count6streamAA8MLXArrayCAF_SiAA14StreamOrDeviceVtF_0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)mlx_repeat_all(*(_QWORD *)(result + 16), a2, *(_QWORD *)(*(_QWORD *)a3 + 16));
  v3 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _s8Morpheus8MLXArrayC5zeros_5dtype6streamACSaySiG_AA5DTypeOAA14StreamOrDeviceVtFZ_0(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = *a2;
    v17 = MEMORY[0x24BEE4AF8];
    result = sub_242509C04(0, v5, 0);
    v6 = v17;
    v9 = (int64_t *)(a1 + 32);
    v10 = v5;
    while (1)
    {
      v12 = *v9++;
      v11 = v12;
      if (v12 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v11 > 0x7FFFFFFF)
        goto LABEL_12;
      v14 = *(_QWORD *)(v17 + 16);
      v13 = *(_QWORD *)(v17 + 24);
      if (v14 >= v13 >> 1)
        result = sub_242509C04(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v17 + 16) = v14 + 1;
      *(_DWORD *)(v17 + 4 * v14 + 32) = v11;
      if (!--v10)
      {
        v3 = v16;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_9:
    v15 = mlx_zeros((const void *)(v6 + 32), v5, v3, *(_QWORD *)(v4 + 16));
    result = swift_bridgeObjectRelease();
    if (v15)
    {
      type metadata accessor for MLXArray();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v15;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_242552FE4()
{
  unint64_t result;

  result = qword_2571FCBB8;
  if (!qword_2571FCBB8)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_2571FCBB8);
  }
  return result;
}

unint64_t sub_242553028()
{
  unint64_t result;

  result = qword_2571FCBC0;
  if (!qword_2571FCBC0)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_2571FCBC0);
  }
  return result;
}

uint64_t IntOrPair.first.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t IntOrPair.second.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t IntOrPair.values.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Morpheus::IntOrPair __swiftcall IntOrPair.init(integerLiteral:)(Swift::Int integerLiteral)
{
  Swift::Int *v1;
  Morpheus::IntOrPair result;

  *v1 = integerLiteral;
  v1[1] = integerLiteral;
  result.values._0 = integerLiteral;
  return result;
}

_QWORD *_s8Morpheus9IntOrPairV12arrayLiteralACSid_tcfC_0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (result[2] == 2)
  {
    v3 = result[4];
    v4 = result[5];
    result = (_QWORD *)swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Morpheus::IntOrPair __swiftcall IntOrPair.init(_:)(Morpheus::IntOrPair result)
{
  Morpheus::IntOrPair *v1;

  *v1 = result;
  return result;
}

uint64_t *sub_2425530DC@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t IntOrArray.init(integerLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t IntOrArray.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

uint64_t IntOrArray.asArray.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_2425C4B60;
    *(_QWORD *)(v2 + 32) = v1;
    return v2;
  }
  return v1;
}

uint64_t IntOrArray.asInt32Array.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 8) == 1)
    return Array<A>.asInt32.getter(*(_QWORD *)v0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC820);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_2425C4B60;
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    *(_DWORD *)(result + 32) = v1;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IntOrArray.count.getter()
{
  _BYTE *v0;

  if (v0[8] == 1)
    return *(_QWORD *)(*(_QWORD *)v0 + 16);
  else
    return 1;
}

_QWORD *sub_242553208@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_242553218@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

void FloatOrArray.init(floatLiteral:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

double FloatOrArray.asArray.getter()
{
  uint64_t *v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = *v0;
  if ((v0[1] & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC808);
    v3 = swift_allocObject();
    *(_QWORD *)&result = 1;
    *(_OWORD *)(v3 + 16) = xmmword_2425C4B60;
    *(_DWORD *)(v3 + 32) = v1;
  }
  return result;
}

uint64_t FloatOrArray.asArray(dimensions:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  _DWORD *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  v3 = *v1;
  if ((v1[1] & 1) != 0)
  {
    if (*(_QWORD *)(v3 + 16) == a1)
      return swift_bridgeObjectRetain();
    __break(1u);
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_16:
    result = sub_2425A00D4();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = sub_24259FD20();
  *(_QWORD *)(result + 16) = a1;
  v5 = (_DWORD *)(result + 32);
  if (a1 < 8)
  {
    v6 = 0;
LABEL_12:
    v10 = a1 - v6;
    do
    {
      *v5++ = v3;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 += a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(v3);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a1)
    goto LABEL_12;
  return result;
}

uint64_t sub_2425533A4()
{
  return MEMORY[0x24BEE17E8];
}

uint64_t sub_2425533B0()
{
  return MEMORY[0x24BEE1560];
}

unsigned int *sub_2425533BC@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for IntOrPair(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IntOrPair(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IntOrPair()
{
  return &type metadata for IntOrPair;
}

uint64_t initializeBufferWithCopyOfBuffer for IntOrArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_242553474(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_242553474(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for IntOrArray(uint64_t a1)
{
  return sub_242553490(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_242553490(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t *assignWithCopy for IntOrArray(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_242553540(a1, a2, a3, (void (*)(_QWORD, _QWORD))sub_242553474, (void (*)(uint64_t, uint64_t))sub_242553490);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for IntOrArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_242553490(v5, v6);
  return a1;
}

uint64_t sub_242553508(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_242553510(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IntOrArray()
{
  return &type metadata for IntOrArray;
}

uint64_t *assignWithCopy for FloatOrArray(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_242553540(a1, a2, a3, (void (*)(_QWORD, _QWORD))sub_242553640, (void (*)(uint64_t, uint64_t))sub_242553644);
}

uint64_t *sub_242553540(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 8);
  a4(*a2, v8);
  v9 = *a1;
  v10 = *((unsigned __int8 *)a1 + 8);
  *a1 = v7;
  *((_BYTE *)a1 + 8) = v8;
  a5(v9, v10);
  return a1;
}

uint64_t _s8Morpheus10IntOrArrayOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s8Morpheus10IntOrArrayOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FloatOrArray()
{
  return &type metadata for FloatOrArray;
}

Morpheus::DeviceType_optional __swiftcall DeviceType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  Morpheus::DeviceType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2425A017C();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t DeviceType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 7696487;
  else
    return 7696483;
}

uint64_t sub_2425536EC(char *a1, char *a2)
{
  return sub_24255E3E8(*a1, *a2);
}

uint64_t sub_2425536F8()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242553758()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24255378C()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

Morpheus::DeviceType_optional sub_2425537E8(Swift::String *a1)
{
  return DeviceType.init(rawValue:)(*a1);
}

void sub_2425537F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 7696487;
  else
    v2 = 7696483;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

_QWORD *Device.__allocating_init(_:index:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = swift_allocObject();
  result = mlx_device_new(*a1, a2);
  if (result)
  {
    *(_QWORD *)(v4 + 16) = result;
    return (_QWORD *)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *Device.init(_:index:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;

  result = mlx_device_new(*a1, a2);
  if (result)
  {
    *(_QWORD *)(v2 + 16) = result;
    return (_QWORD *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

mlx::core *Device.__allocating_init()()
{
  uint64_t v0;
  mlx::core *result;

  v0 = swift_allocObject();
  result = mlx_default_device();
  if (result)
  {
    *(_QWORD *)(v0 + 16) = result;
    return (mlx::core *)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

mlx::core *Device.init()()
{
  uint64_t v0;
  mlx::core *result;

  result = mlx_default_device();
  if (result)
  {
    *(_QWORD *)(v0 + 16) = result;
    return (mlx::core *)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Device.deinit()
{
  uint64_t v0;

  mlx_free(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t Device.__deallocating_deinit()
{
  uint64_t v0;

  mlx_free(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

_QWORD *sub_242553954()
{
  uint64_t v0;
  _QWORD *result;

  type metadata accessor for Device();
  v0 = swift_allocObject();
  result = mlx_device_new(0, 0);
  if (result)
  {
    *(_QWORD *)(v0 + 16) = result;
    qword_2571FCBC8 = v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Device.cpu.getter()
{
  return sub_242553A2C(&qword_2571FC5B0);
}

_QWORD *sub_2425539C0()
{
  uint64_t v0;
  _QWORD *result;

  type metadata accessor for Device();
  v0 = swift_allocObject();
  result = mlx_device_new(1, 0);
  if (result)
  {
    *(_QWORD *)(v0 + 16) = result;
    qword_2571FCBD0 = v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Device.gpu.getter()
{
  return sub_242553A2C(&qword_2571FC5B8);
}

uint64_t sub_242553A2C(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

mlx::core *static Device.defaultDevice()()
{
  uint64_t v0;
  mlx::core *result;

  v0 = swift_allocObject();
  result = mlx_default_device();
  if (result)
  {
    *(_QWORD *)(v0 + 16) = result;
    return (mlx::core *)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Device.setDefault(device:)(uint64_t a1)
{
  return mlx_set_default_device(*(_QWORD *)(a1 + 16));
}

uint64_t Device.description.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = mlx_tostring(*(uint64_t (****)(_QWORD))(v0 + 16));
  v2 = result;
  if (result)
  {
    result = mlx_string_data(result);
    if (result)
    {
      v3 = sub_24259FB88();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_242553B34()
{
  unint64_t result;

  result = qword_2571FCBD8;
  if (!qword_2571FCBD8)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for DeviceType, &type metadata for DeviceType);
    atomic_store(result, (unint64_t *)&qword_2571FCBD8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_242553BC4 + 4 * byte_2425C564D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_242553BF8 + 4 * byte_2425C5648[v4]))();
}

uint64_t sub_242553BF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242553C00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242553C08);
  return result;
}

uint64_t sub_242553C14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242553C1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_242553C20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242553C28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

uint64_t type metadata accessor for Device()
{
  return objc_opt_self();
}

uint64_t method lookup function for Device()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Device.__allocating_init(_:index:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of Device.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_242553C80@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result >= 7)
  {
    sub_24259FF84();
    sub_24259FB70();
    type metadata accessor for mlx_array_dtype_();
    sub_2425A008C();
    result = sub_2425A00E0();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t DType.isComplex.getter()
{
  return 0;
}

BOOL static DType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t toArrays<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t dtype;
  uint64_t v24;
  uint64_t v25;

  v24 = a6;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v24 - v16;
  MEMORY[0x24BDAC7A8](v15);
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  type metadata accessor for MLXArray();
  if (swift_dynamicCast())
  {
    v20 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a2, a4);
    if (swift_dynamicCast())
      return v20;
    dtype = mlx_array_get_dtype(*(_QWORD *)(v20 + 16));
    sub_242553C80(dtype, &v25);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, a4);
  if (!swift_dynamicCast())
  {
    LOBYTE(v25) = 7;
    v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 8))(&v25, a3, a5);
    LOBYTE(v25) = 7;
LABEL_8:
    (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(&v25, a4);
    return v20;
  }
  v21 = mlx_array_get_dtype(*(_QWORD *)(v25 + 16));
  sub_242553C80(v21, &v25);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 8))(&v25, a3, a5);
}

uint64_t MLXArray.asMLXArray(dtype:)()
{
  return swift_retain();
}

void static Int.dtype.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Int32.dtype.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Float.dtype.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_242553F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  BOOL v4;
  uint64_t result;
  char v8;

  v4 = a1 == 0x5F6C6F6F62 && a2 == 0xE500000000000000;
  if (v4 || (sub_2425A0254() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 0;
LABEL_7:
    *a3 = v8;
    return result;
  }
  if (a1 == 0x323374616F6C66 && a2 == 0xE700000000000000 || (sub_2425A0254() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 6;
    goto LABEL_7;
  }
  if (a1 == 947154537 && a2 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 3;
    goto LABEL_7;
  }
  if (a1 == 0x3233746E69 && a2 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 4;
    goto LABEL_7;
  }
  if (a1 == 0x3436746E69 && a2 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 5;
    goto LABEL_7;
  }
  if (a1 == 0x38746E6975 && a2 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 1;
    goto LABEL_7;
  }
  if (a1 == 0x3233746E6975 && a2 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 2;
    goto LABEL_7;
  }
  sub_24259FF84();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  result = sub_2425A00E0();
  __break(1u);
  return result;
}

BOOL DType.isFloatingPoint.getter()
{
  unsigned __int8 *v0;

  return *v0 == 6;
}

BOOL DType.isInteger.getter()
{
  unsigned __int8 *v0;

  return *v0 - 1 < 5;
}

BOOL DType.isSignedInteger.getter()
{
  unsigned __int8 *v0;

  return *v0 - 3 < 3;
}

uint64_t DType.hash(into:)()
{
  return sub_2425A02E4();
}

uint64_t DType.hashValue.getter()
{
  sub_2425A02D8();
  sub_2425A02E4();
  return sub_2425A02F0();
}

uint64_t HasDType.asMLXArray(dtype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = (unsigned __int8 *)MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  if (v10 == 7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v15, a2, a3);
    LOBYTE(v10) = v15;
  }
  else
  {
    LOBYTE(v15) = v10;
  }
  type metadata accessor for MLXArray();
  v14 = v10;
  v11 = sub_24254099C((uint64_t)v9, (uint64_t)&v14, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  return v11;
}

void static Bool.dtype.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_242554468(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_242554470(char *a1)
{
  char *v1;
  char v2;

  if (*a1 == 7)
    v2 = 0;
  else
    v2 = *a1;
  return sub_24252DBC4(*v1, v2);
}

void sub_242554484(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Int8.dtype.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void sub_24255449C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_2425544A8(char *a1)
{
  unsigned __int8 *v1;
  char v2;

  if (*a1 == 7)
    v2 = 3;
  else
    v2 = *a1;
  return sub_242530B80(*v1, v2);
}

void sub_2425544C0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_2425544CC(char *a1)
{
  int *v1;
  char v2;

  if (*a1 == 7)
    v2 = 4;
  else
    v2 = *a1;
  return sub_2425292CC(*v1, v2);
}

uint64_t sub_2425544E4(char *a1)
{
  uint64_t *v1;
  char v2;

  if (*a1 == 7)
    v2 = 5;
  else
    v2 = *a1;
  return sub_242532B2C(*v1, v2);
}

void static UInt8.dtype.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void sub_242554508(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_242554514(char *a1)
{
  unsigned __int8 *v1;
  char v2;

  if (*a1 == 7)
    v2 = 1;
  else
    v2 = *a1;
  return sub_242535118(*v1, v2);
}

void static UInt32.dtype.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void sub_242554534(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_242554540(char *a1)
{
  int *v1;
  char v2;

  if (*a1 == 7)
    v2 = 2;
  else
    v2 = *a1;
  return sub_24253734C(*v1, v2);
}

uint64_t Float.asMLXArray(dtype:)(float a1)
{
  return sub_2425289C4(6, a1);
}

void sub_242554560(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_24255456C()
{
  float *v0;

  return sub_2425289C4(6, *v0);
}

unsigned __int8 *Int.asMLXArray(dtype:)(unsigned __int8 *result, uint64_t a2)
{
  int v2;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v2 = *result;
  if (v2 == 7)
    LOBYTE(v2) = 4;
  return (unsigned __int8 *)sub_2425292CC(a2, v2);
}

uint64_t sub_2425545B4(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t result;
  int v4;
  char v5;

  result = *v1;
  if (*v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v4 = *a1;
  if (v4 == 7)
    v5 = 4;
  else
    v5 = v4;
  return sub_2425292CC(result, v5);
}

uint64_t Double.asMLXArray(dtype:)(char *a1, double a2)
{
  char v2;
  float v3;

  if (*a1 == 7)
    v2 = 6;
  else
    v2 = *a1;
  v3 = a2;
  return sub_2425289C4(v2, v3);
}

uint64_t sub_242554608(char *a1)
{
  double *v1;
  char v2;
  float v3;

  if (*a1 == 7)
    v2 = 6;
  else
    v2 = *a1;
  v3 = *v1;
  return sub_2425289C4(v2, v3);
}

uint64_t sub_242554624()
{
  return swift_retain();
}

uint64_t Array<A>.asMLXArray(dtype:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  v6 = *a1;
  type metadata accessor for MLXArray();
  v7 = swift_bridgeObjectRetain();
  sub_2425406D0(v7, 0, a3);
  swift_bridgeObjectRelease();
  if (v6 == 7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
    LOBYTE(v6) = v15;
  }
  else
  {
    LOBYTE(v15) = v6;
  }
  v14 = v6;
  type metadata accessor for Stream();
  inited = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v10 = result;
  if (result)
  {
    result = mlx_default_stream(result);
    v11 = result;
    if (result)
    {
      *(_QWORD *)(inited + 16) = result;
      mlx_free(v10);
      v13 = inited;
      v12 = MLXArray.asType(_:stream:)(&v14, &v13);
      swift_release();
      swift_setDeallocating();
      mlx_free(v11);
      return (uint64_t)v12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_242554754(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.asMLXArray(dtype:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

unint64_t sub_24255476C()
{
  unint64_t result;

  result = qword_2571FCC90;
  if (!qword_2571FCC90)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for DType, &type metadata for DType);
    atomic_store(result, (unint64_t *)&qword_2571FCC90);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24255488C + 4 * byte_2425C575D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2425548C0 + 4 * byte_2425C5758[v4]))();
}

uint64_t sub_2425548C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2425548C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2425548D0);
  return result;
}

uint64_t sub_2425548DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2425548E4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2425548E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2425548F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DType()
{
  return &type metadata for DType;
}

uint64_t dispatch thunk of static HasDType.dtype.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScalarOrArray.asMLXArray(dtype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t Int.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  _BYTE v18[32];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  sub_242526478(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C8);
  if (swift_dynamicCast())
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    if (a2 == (int)a2)
    {
      result = mlx_array_from_int(a2);
      v7 = result;
      if (result)
      {
        type metadata accessor for MLXArray();
        inited = swift_initStackObject();
        *(_QWORD *)(inited + 16) = v7;
        sub_242588564(2, inited, a1);
        swift_setDeallocating();
        return mlx_free(v7);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    sub_242526478(a1, (uint64_t)v18);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
    if (swift_dynamicCast())
    {
      sub_24251DEC8(v16, (uint64_t)v19);
      v9 = v20;
      v10 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      if (a2 < 1)
      {
        swift_bridgeObjectRelease();
        v12 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        *(_QWORD *)&v16[0] = MEMORY[0x24BEE4AF8];
        do
        {
          v11 = swift_bridgeObjectRetain();
          sub_24251A60C(v11);
          --a2;
        }
        while (a2);
        swift_bridgeObjectRelease();
        v12 = *(_QWORD *)&v16[0];
      }
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v12;
      a3[3] = v14;
      *a3 = v15;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      sub_2425264C4((uint64_t)v16, &qword_2571FCCA0);
      sub_242554B60();
      swift_allocError();
      *v13 = 15;
      return swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_242554B60()
{
  unint64_t result;

  result = qword_2571FCCA8;
  if (!qword_2571FCCA8)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for MorpheusError, &type metadata for MorpheusError);
    atomic_store(result, (unint64_t *)&qword_2571FCCA8);
  }
  return result;
}

uint64_t sub_242554BA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return Int.mul(_:)(a1, *v2, a2);
}

uint64_t Int32.mul(_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  _BYTE v18[32];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  LODWORD(v3) = a2;
  sub_242526478(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C8);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    result = mlx_array_from_int(v3);
    v7 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v7;
      sub_242588564(2, inited, a1);
      swift_setDeallocating();
      return mlx_free(v7);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_242526478(a1, (uint64_t)v18);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
    if (swift_dynamicCast())
    {
      sub_24251DEC8(v16, (uint64_t)v19);
      v9 = v20;
      v10 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      if ((int)v3 < 1)
      {
        swift_bridgeObjectRelease();
        v12 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v3 = (int)v3;
        *(_QWORD *)&v16[0] = MEMORY[0x24BEE4AF8];
        do
        {
          v11 = swift_bridgeObjectRetain();
          sub_24251A60C(v11);
          --v3;
        }
        while (v3);
        swift_bridgeObjectRelease();
        v12 = *(_QWORD *)&v16[0];
      }
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v12;
      a3[3] = v14;
      *a3 = v15;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      sub_2425264C4((uint64_t)v16, &qword_2571FCCA0);
      sub_242554B60();
      swift_allocError();
      *v13 = 15;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_242554DF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int *v2;

  return Int32.mul(_:)(a1, *v2, a2);
}

uint64_t UInt32.mul(_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  _BYTE v18[32];
  unsigned __int8 v19[24];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  LODWORD(v3) = a2;
  v22 = *MEMORY[0x24BDAC8D0];
  sub_242526478(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C8);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    *(_DWORD *)v19 = v3;
    result = mlx_array_from_data(v19, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
    v7 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v7;
      sub_242588564(2, inited, a1);
      swift_setDeallocating();
      return mlx_free(v7);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_242526478(a1, (uint64_t)v18);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
    if (swift_dynamicCast())
    {
      sub_24251DEC8(v16, (uint64_t)v19);
      v9 = v20;
      v10 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      if ((_DWORD)v3)
      {
        v3 = v3;
        *(_QWORD *)&v16[0] = MEMORY[0x24BEE4AF8];
        do
        {
          v11 = swift_bridgeObjectRetain();
          sub_24251A60C(v11);
          --v3;
        }
        while (v3);
        swift_bridgeObjectRelease();
        v12 = *(_QWORD *)&v16[0];
      }
      else
      {
        swift_bridgeObjectRelease();
        v12 = MEMORY[0x24BEE4AF8];
      }
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v12;
      a3[3] = v14;
      *a3 = v15;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      sub_2425264C4((uint64_t)v16, &qword_2571FCCA0);
      sub_242554B60();
      swift_allocError();
      *v13 = 15;
      return swift_willThrow();
    }
  }
  return result;
}

void sub_242555078(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242555080);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_242555094@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int *v2;

  return UInt32.mul(_:)(a1, *v2, a2);
}

uint64_t Float.mul(_:)(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(2, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24255515C(uint64_t a1)
{
  float *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(2, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Double.mul(_:)(uint64_t a1, double a2)
{
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = a2;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(2, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2425552C4(uint64_t a1)
{
  double *v1;
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = *v1;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(2, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v5 = *v2;
  v12 = 7;
  result = (uint64_t)sub_24256BFA4(a1, &v12);
  if (!v3)
  {
    v7 = result;
    result = (uint64_t)mlx_default_device();
    v8 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v9 = result;
      if (result)
      {
        mlx_free(v8);
        result = (uint64_t)mlx_multiply(v2[2], *(_QWORD *)(v7 + 16), v9);
        v10 = result;
        if (result)
        {
          mlx_free(v9);
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = v10;
          a2[3] = v5;
          result = swift_release();
          *a2 = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_242555460@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLXArray.mul(_:)(a1, a2);
}

uint64_t SharedMutableArray.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void (*v9)(char *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t result;
  BOOL v20;
  void (*v21)(char *);
  _BYTE *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD v53[2];
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t);
  __int128 v66[2];
  uint64_t v67;
  uint64_t v68[4];
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);

  sub_242526478(a1, (uint64_t)v68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC930);
  if (!swift_dynamicCast())
  {
    v67 = 0;
    memset(v66, 0, sizeof(v66));
    sub_2425264C4((uint64_t)v66, &qword_2571FC9B8);
    sub_242554B60();
    swift_allocError();
    *v22 = 15;
    return swift_willThrow();
  }
  v61 = a2;
  v62 = v2;
  sub_24251DEC8(v66, (uint64_t)v69);
  SharedMutableArray.anyArray.getter();
  v4 = v70;
  v5 = v71;
  v6 = __swift_project_boxed_opaque_existential_1(v69, v70);
  v60 = v53;
  v7 = *(_QWORD **)(v4 - 8);
  v8 = (_QWORD *)v7[8];
  MEMORY[0x24BDAC7A8](v6);
  v9 = (void (*)(char *))v7[2];
  v9((char *)v53 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = v5;
  v10 = sub_24259FF00();
  LOBYTE(v5) = v10;
  v59 = v53;
  v63 = v8;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v53 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = v11;
  ((void (*)(uint64_t (*)(uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t), uint64_t))v9)(v11, v11, v4);
  v58 = v7;
  if ((v5 & 1) == 0)
  {
    v18 = (void (*)(char *, uint64_t))v7[1];
    v18((char *)v11, v4);
LABEL_10:
    v21 = v9;
    v23 = v72;
    v15 = v63;
    goto LABEL_25;
  }
  v12 = v64;
  v13 = sub_24259FEF4();
  v65 = (uint64_t (*)(char *, uint64_t))v7[1];
  v14 = v65((char *)v11, v4);
  if (v13 <= 64)
  {
    v18 = (void (*)(char *, uint64_t))v65;
    goto LABEL_10;
  }
  v57 = v53;
  v15 = v63;
  MEMORY[0x24BDAC7A8](v14);
  ((void (*)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))v9)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v72, v4);
  *(_QWORD *)&v66[0] = 0x8000000000000000;
  if ((sub_24259FF00() & 1) != 0)
  {
    v16 = sub_24259FEF4();
    if (v16 < 64)
    {
      v17 = sub_24259FEE8();
      v18 = (void (*)(char *, uint64_t))v65;
      result = v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      v20 = v17 < *(_QWORD *)&v66[0];
      v21 = v9;
LABEL_22:
      v23 = v72;
      if (v20)
        goto LABEL_45;
      goto LABEL_25;
    }
    v56 = v53;
    MEMORY[0x24BDAC7A8](v16);
    sub_24253B658();
    sub_24259FEDC();
    v26 = sub_24259FA50();
    v28 = (void (*)(char *, uint64_t))v65;
    v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v18 = v28;
    result = ((uint64_t (*)(char *, uint64_t))v28)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v21 = v9;
  }
  else
  {
    v24 = sub_24259FF00();
    v25 = sub_24259FEF4();
    if ((v24 & 1) == 0)
    {
      v21 = v9;
      if (v25 >= 64)
      {
        v18 = (void (*)(char *, uint64_t))v65;
        v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
        v23 = v72;
        goto LABEL_25;
      }
      v29 = sub_24259FEE8();
      v18 = (void (*)(char *, uint64_t))v65;
      result = v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      v20 = v29 < *(_QWORD *)&v66[0];
      goto LABEL_22;
    }
    v21 = v9;
    if (v25 <= 64)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v56 = v53;
      MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      v31 = sub_2425A0278();
      v53[1] = v53;
      MEMORY[0x24BDAC7A8](v31);
      v54 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0;
      v32 = (char *)v53 - v54;
      sub_2425A023C();
      LODWORD(v55) = sub_24259FA50();
      v33 = v32;
      v23 = (uint64_t (*)(uint64_t, uint64_t))v65;
      v34 = v65(v33, v4);
      v56 = v53;
      MEMORY[0x24BDAC7A8](v34);
      v35 = (uint64_t)v53 - v54;
      ((void (*)(char *, char *, uint64_t))v58[4])((char *)v53 - v54, (char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      if ((v55 & 1) != 0)
      {
LABEL_44:
        result = v23(v35, v4);
LABEL_45:
        __break(1u);
        return result;
      }
      v36 = *(_QWORD *)&v66[0];
      v37 = sub_24259FEE8();
      result = v23(v35, v4);
      v20 = v37 < v36;
      v18 = (void (*)(char *, uint64_t))v23;
      goto LABEL_22;
    }
    v56 = v53;
    MEMORY[0x24BDAC7A8](v25);
    sub_24253B658();
    sub_24259FEDC();
    v26 = sub_24259FA50();
    v27 = (void (*)(char *, uint64_t))v65;
    v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v18 = v27;
    result = ((uint64_t (*)(char *, uint64_t))v27)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  v23 = v72;
  if ((v26 & 1) != 0)
    goto LABEL_45;
LABEL_25:
  v38 = sub_24259FEF4();
  v72 = (uint64_t (*)(uint64_t, uint64_t))v53;
  MEMORY[0x24BDAC7A8](v38);
  ((void (*)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))v21)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v4);
  if (v38 < 65)
  {
    v43 = sub_24259FEF4();
    v18((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    if (v43 != 64)
      goto LABEL_37;
    v39 = sub_24259FF00();
    if ((v39 & 1) != 0)
      goto LABEL_37;
  }
  else
  {
    v39 = ((uint64_t (*)(char *, uint64_t))v18)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  v65 = (uint64_t (*)(char *, uint64_t))v18;
  v63 = v53;
  MEMORY[0x24BDAC7A8](v39);
  ((void (*)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))v21)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v4);
  *(_QWORD *)&v66[0] = 0x7FFFFFFFFFFFFFFFLL;
  v40 = sub_24259FF00();
  v41 = sub_24259FEF4();
  if ((v40 & 1) != 0)
  {
    if (v41 > 64)
    {
      MEMORY[0x24BDAC7A8](v41);
      sub_24253B658();
      sub_24259FEDC();
      v35 = sub_24259FA50();
      v42 = (void (*)(char *, uint64_t))v65;
      v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      v18 = v42;
      v42((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
LABEL_36:
      if ((v35 & 1) == 0)
        goto LABEL_37;
      __break(1u);
      goto LABEL_44;
    }
  }
  else if (v41 > 63)
  {
    v68[0] = 0x7FFFFFFFFFFFFFFFLL;
    MEMORY[0x24BDAC7A8](v41);
    v44 = (char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    v45 = ((uint64_t (*)(char *, char *, uint64_t))v58[4])(v44, v44, v4);
    MEMORY[0x24BDAC7A8](v45);
    sub_24253B658();
    sub_24259FEDC();
    v35 = sub_24259FA50();
    v46 = (void (*)(char *, uint64_t))v65;
    v65(v44, v4);
    v46(v44, v4);
    v18 = v46;
    goto LABEL_36;
  }
  sub_24259FEE8();
  v18 = (void (*)(char *, uint64_t))v65;
  v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
LABEL_37:
  v47 = sub_24259FEE8();
  v18((char *)v23, v4);
  if (v47 < 1)
  {
    swift_bridgeObjectRelease();
    v49 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    *(_QWORD *)&v66[0] = MEMORY[0x24BEE4AF8];
    do
    {
      v48 = swift_bridgeObjectRetain();
      sub_24251A60C(v48);
      --v47;
    }
    while (v47);
    swift_bridgeObjectRelease();
    v49 = *(_QWORD *)&v66[0];
  }
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = v49;
  v52 = v61;
  v61[3] = v50;
  *v52 = v51;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
}

uint64_t sub_242555EA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return SharedMutableArray.mul(_:)(a1, a2);
}

uint64_t Array.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void (*v9)(char *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t result;
  BOOL v20;
  void (*v21)(char *);
  _BYTE *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t);
  __int128 v66[2];
  uint64_t v67;
  uint64_t v68[4];
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);

  sub_242526478(a1, (uint64_t)v68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC930);
  if (!swift_dynamicCast())
  {
    v67 = 0;
    memset(v66, 0, sizeof(v66));
    sub_2425264C4((uint64_t)v66, &qword_2571FC9B8);
    sub_242554B60();
    swift_allocError();
    *v22 = 15;
    return swift_willThrow();
  }
  v61 = a2;
  v62 = v2;
  sub_24251DEC8(v66, (uint64_t)v69);
  Array.anyArray.getter();
  v4 = v70;
  v5 = v71;
  v6 = __swift_project_boxed_opaque_existential_1(v69, v70);
  v60 = v53;
  v7 = *(_QWORD **)(v4 - 8);
  v8 = (_QWORD *)v7[8];
  MEMORY[0x24BDAC7A8](v6);
  v9 = (void (*)(char *))v7[2];
  v9((char *)v53 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = v5;
  v10 = sub_24259FF00();
  LOBYTE(v5) = v10;
  v59 = v53;
  v63 = v8;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v53 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = v11;
  ((void (*)(uint64_t (*)(uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t), uint64_t))v9)(v11, v11, v4);
  v58 = v7;
  if ((v5 & 1) == 0)
  {
    v18 = (void (*)(char *, uint64_t))v7[1];
    v18((char *)v11, v4);
LABEL_10:
    v21 = v9;
    v23 = v72;
    v15 = v63;
    goto LABEL_25;
  }
  v12 = v64;
  v13 = sub_24259FEF4();
  v65 = (uint64_t (*)(char *, uint64_t))v7[1];
  v14 = v65((char *)v11, v4);
  if (v13 <= 64)
  {
    v18 = (void (*)(char *, uint64_t))v65;
    goto LABEL_10;
  }
  v57 = v53;
  v15 = v63;
  MEMORY[0x24BDAC7A8](v14);
  ((void (*)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))v9)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v72, v4);
  *(_QWORD *)&v66[0] = 0x8000000000000000;
  if ((sub_24259FF00() & 1) != 0)
  {
    v16 = sub_24259FEF4();
    if (v16 < 64)
    {
      v17 = sub_24259FEE8();
      v18 = (void (*)(char *, uint64_t))v65;
      result = v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      v20 = v17 < *(_QWORD *)&v66[0];
      v21 = v9;
LABEL_22:
      v23 = v72;
      if (v20)
        goto LABEL_45;
      goto LABEL_25;
    }
    v56 = v53;
    MEMORY[0x24BDAC7A8](v16);
    sub_24253B658();
    sub_24259FEDC();
    v26 = sub_24259FA50();
    v28 = (void (*)(char *, uint64_t))v65;
    v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v18 = v28;
    result = ((uint64_t (*)(char *, uint64_t))v28)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v21 = v9;
  }
  else
  {
    v24 = sub_24259FF00();
    v25 = sub_24259FEF4();
    if ((v24 & 1) == 0)
    {
      v21 = v9;
      if (v25 >= 64)
      {
        v18 = (void (*)(char *, uint64_t))v65;
        v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
        v23 = v72;
        goto LABEL_25;
      }
      v29 = sub_24259FEE8();
      v18 = (void (*)(char *, uint64_t))v65;
      result = v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      v20 = v29 < *(_QWORD *)&v66[0];
      goto LABEL_22;
    }
    v21 = v9;
    if (v25 <= 64)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v56 = v53;
      MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      v31 = sub_2425A0278();
      v53[1] = v53;
      MEMORY[0x24BDAC7A8](v31);
      v54 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0;
      v32 = (char *)v53 - v54;
      sub_2425A023C();
      LODWORD(v55) = sub_24259FA50();
      v33 = v32;
      v23 = (uint64_t (*)(uint64_t, uint64_t))v65;
      v34 = v65(v33, v4);
      v56 = v53;
      MEMORY[0x24BDAC7A8](v34);
      v35 = (uint64_t)v53 - v54;
      ((void (*)(char *, char *, uint64_t))v58[4])((char *)v53 - v54, (char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      if ((v55 & 1) != 0)
      {
LABEL_44:
        result = v23(v35, v4);
LABEL_45:
        __break(1u);
        return result;
      }
      v36 = *(_QWORD *)&v66[0];
      v37 = sub_24259FEE8();
      result = v23(v35, v4);
      v20 = v37 < v36;
      v18 = (void (*)(char *, uint64_t))v23;
      goto LABEL_22;
    }
    v56 = v53;
    MEMORY[0x24BDAC7A8](v25);
    sub_24253B658();
    sub_24259FEDC();
    v26 = sub_24259FA50();
    v27 = (void (*)(char *, uint64_t))v65;
    v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v18 = v27;
    result = ((uint64_t (*)(char *, uint64_t))v27)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  v23 = v72;
  if ((v26 & 1) != 0)
    goto LABEL_45;
LABEL_25:
  v38 = sub_24259FEF4();
  v72 = (uint64_t (*)(uint64_t, uint64_t))v53;
  MEMORY[0x24BDAC7A8](v38);
  ((void (*)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))v21)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v4);
  if (v38 < 65)
  {
    v43 = sub_24259FEF4();
    v18((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    if (v43 != 64)
      goto LABEL_37;
    v39 = sub_24259FF00();
    if ((v39 & 1) != 0)
      goto LABEL_37;
  }
  else
  {
    v39 = ((uint64_t (*)(char *, uint64_t))v18)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  v65 = (uint64_t (*)(char *, uint64_t))v18;
  v63 = v53;
  MEMORY[0x24BDAC7A8](v39);
  ((void (*)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))v21)((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v4);
  *(_QWORD *)&v66[0] = 0x7FFFFFFFFFFFFFFFLL;
  v40 = sub_24259FF00();
  v41 = sub_24259FEF4();
  if ((v40 & 1) != 0)
  {
    if (v41 > 64)
    {
      MEMORY[0x24BDAC7A8](v41);
      sub_24253B658();
      sub_24259FEDC();
      v35 = sub_24259FA50();
      v42 = (void (*)(char *, uint64_t))v65;
      v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      v18 = v42;
      v42((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
LABEL_36:
      if ((v35 & 1) == 0)
        goto LABEL_37;
      __break(1u);
      goto LABEL_44;
    }
  }
  else if (v41 > 63)
  {
    v68[0] = 0x7FFFFFFFFFFFFFFFLL;
    MEMORY[0x24BDAC7A8](v41);
    v44 = (char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    v45 = ((uint64_t (*)(char *, char *, uint64_t))v58[4])(v44, v44, v4);
    MEMORY[0x24BDAC7A8](v45);
    sub_24253B658();
    sub_24259FEDC();
    v35 = sub_24259FA50();
    v46 = (void (*)(char *, uint64_t))v65;
    v65(v44, v4);
    v46(v44, v4);
    v18 = v46;
    goto LABEL_36;
  }
  sub_24259FEE8();
  v18 = (void (*)(char *, uint64_t))v65;
  v65((char *)v53 - (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
LABEL_37:
  v47 = sub_24259FEE8();
  v18((char *)v23, v4);
  if (v47 < 1)
  {
    swift_bridgeObjectRelease();
    v50 = MEMORY[0x24BEE4AF8];
    v48 = v61;
  }
  else
  {
    *(_QWORD *)&v66[0] = MEMORY[0x24BEE4AF8];
    v48 = v61;
    do
    {
      v49 = swift_bridgeObjectRetain();
      sub_24251A60C(v49);
      --v47;
    }
    while (v47);
    swift_bridgeObjectRelease();
    v50 = *(_QWORD *)&v66[0];
  }
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v50;
  v48[3] = v51;
  *v48 = v52;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
}

uint64_t sub_2425568FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Array.mul(_:)(a1, a2);
}

uint64_t String.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *);
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t result;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD v46[2];
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  __int128 v57[2];
  uint64_t v58;
  uint64_t v59[4];
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_242526478(a1, (uint64_t)v59);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC930);
  if (!swift_dynamicCast())
  {
    v58 = 0;
    memset(v57, 0, sizeof(v57));
    sub_2425264C4((uint64_t)v57, &qword_2571FC9B8);
    sub_242554B60();
    swift_allocError();
    *v22 = 15;
    return swift_willThrow();
  }
  v52 = a2;
  v53 = a3;
  v56 = a4;
  v63 = v4;
  sub_24251DEC8(v57, (uint64_t)v60);
  v8 = v61;
  v9 = v62;
  v10 = __swift_project_boxed_opaque_existential_1(v60, v61);
  v55 = v46;
  v11 = *(_QWORD **)(v8 - 8);
  v12 = v11[8];
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void (*)(char *))v11[2];
  v14(v13);
  v15 = sub_24259FF00();
  v16 = v15;
  v54 = v46;
  MEMORY[0x24BDAC7A8](v15);
  ((void (*)(char *, char *, uint64_t))v14)(v13, v13, v8);
  v49 = v11;
  if ((v16 & 1) == 0)
  {
    v18 = (void (*)(char *, uint64_t))v11[1];
    v18(v13, v8);
    goto LABEL_19;
  }
  v17 = sub_24259FEF4();
  v18 = (void (*)(char *, uint64_t))v11[1];
  v19 = ((uint64_t (*)(char *, uint64_t))v18)(v13, v8);
  if (v17 <= 64)
    goto LABEL_19;
  v51 = v46;
  MEMORY[0x24BDAC7A8](v19);
  v20 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(char *, char *, uint64_t))v14)(v20, v13, v8);
  *(_QWORD *)&v57[0] = 0x8000000000000000;
  if ((sub_24259FF00() & 1) == 0)
  {
    v24 = sub_24259FF00();
    v21 = sub_24259FEF4();
    if ((v24 & 1) == 0)
    {
      if (v21 >= 64)
      {
        v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        goto LABEL_19;
      }
      goto LABEL_15;
    }
    if (v21 <= 64)
      goto LABEL_17;
LABEL_11:
    v50 = v46;
    MEMORY[0x24BDAC7A8](v21);
    sub_24253B658();
    sub_24259FEDC();
    v25 = sub_24259FA50();
    v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    if ((v25 & 1) != 0)
      goto LABEL_16;
    goto LABEL_19;
  }
  v21 = sub_24259FEF4();
  if (v21 >= 64)
    goto LABEL_11;
LABEL_15:
  v26 = sub_24259FEE8();
  v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  if (v26 < *(uint64_t *)&v57[0])
  {
LABEL_16:
    do
    {
      __break(1u);
LABEL_17:
      v50 = *(_QWORD **)(*(_QWORD *)(v9 + 24) + 16);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v48 = v46;
      MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
      v46[0] = (char *)v46 - v28;
      swift_getAssociatedConformanceWitness();
      v29 = sub_2425A0278();
      v46[1] = v46;
      MEMORY[0x24BDAC7A8](v29);
      v47 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
      v30 = (char *)v46 - v47;
      sub_2425A023C();
      LODWORD(v46[0]) = sub_24259FA50();
      v31 = ((uint64_t (*)(char *, uint64_t))v18)(v30, v8);
      v50 = v46;
      MEMORY[0x24BDAC7A8](v31);
      v32 = (uint64_t)v46 - v47;
      ((void (*)(char *, char *, uint64_t))v49[4])((char *)v46 - v47, v20, v8);
      if ((v46[0] & 1) != 0)
        goto LABEL_36;
      v20 = *(char **)&v57[0];
      v33 = sub_24259FEE8();
      v18((char *)v32, v8);
    }
    while (v33 < (uint64_t)v20);
  }
LABEL_19:
  v34 = sub_24259FEF4();
  MEMORY[0x24BDAC7A8](v34);
  ((void (*)(char *, char *, uint64_t))v14)((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v8);
  if (v34 < 65)
  {
    v38 = sub_24259FEF4();
    v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    if (v38 != 64)
      goto LABEL_31;
    v35 = sub_24259FF00();
    if ((v35 & 1) != 0)
      goto LABEL_31;
  }
  else
  {
    v35 = ((uint64_t (*)(char *, uint64_t))v18)((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  }
  v51 = v46;
  v50 = v46;
  MEMORY[0x24BDAC7A8](v35);
  ((void (*)(char *, char *, uint64_t))v14)((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v8);
  *(_QWORD *)&v57[0] = 0x7FFFFFFFFFFFFFFFLL;
  v36 = sub_24259FF00();
  v37 = sub_24259FEF4();
  if ((v36 & 1) != 0)
  {
    if (v37 > 64)
    {
      MEMORY[0x24BDAC7A8](v37);
      sub_24253B658();
      sub_24259FEDC();
      v32 = sub_24259FA50();
      v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      if ((v32 & 1) != 0)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_29:
    sub_24259FEE8();
    v18((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    goto LABEL_31;
  }
  if (v37 <= 63)
    goto LABEL_29;
  v48 = v46;
  v59[0] = 0x7FFFFFFFFFFFFFFFLL;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = ((uint64_t (*)(char *, char *, uint64_t))v49[4])(v39, v39, v8);
  MEMORY[0x24BDAC7A8](v40);
  sub_24253B658();
  sub_24259FEDC();
  v32 = sub_24259FA50();
  v18(v39, v8);
  v18(v39, v8);
  if ((v32 & 1) != 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    result = ((uint64_t (*)(uint64_t, uint64_t))v18)(v32, v8);
    __break(1u);
    return result;
  }
LABEL_31:
  v41 = sub_24259FEE8();
  v18(v13, v8);
  if (v41 <= 0)
  {
    v43 = 0;
    v44 = 0xE000000000000000;
  }
  else
  {
    v42 = v53;
    swift_bridgeObjectRetain();
    v43 = MEMORY[0x2426A7874](v52, v42, v41);
  }
  v45 = v56;
  v56[3] = MEMORY[0x24BEE0D00];
  *v45 = v43;
  v45[1] = v44;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
}

uint64_t sub_2425571C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return String.mul(_:)(a1, *v2, v2[1], a2);
}

uint64_t dispatch thunk of Multiplicable.mul(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

Swift::Int32 __swiftcall Int.value()()
{
  uint64_t v0;

  if (v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v0 <= 0x7FFFFFFF)
  {
    return v0;
  }
  __break(1u);
  return v0;
}

uint64_t sub_24255721C()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0x7FFFFFFF)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_242557248()
{
  unsigned int *v0;

  return *v0;
}

void SliceStruct.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = 0x100000000;
  if (*((_BYTE *)v1 + 4))
    v2 = 0x100000000;
  if (!*((_BYTE *)v1 + 20))
    v3 = v1[4];
  v4 = v1[2] | 0x4000000000;
  if (*((_BYTE *)v1 + 12))
    v4 = 0x4100000000;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 20) = BYTE4(v4);
}

void sub_2425572A0(uint64_t a1@<X8>)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = 0x100000000;
  if (*((_BYTE *)v1 + 4))
    v2 = 0x100000000;
  if (!*((_BYTE *)v1 + 20))
    v3 = v1[4];
  v4 = v1[2] | 0x4000000000;
  if (*((_BYTE *)v1 + 12))
    v4 = 0x4100000000;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 20) = BYTE4(v4);
}

void Ellipsis.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = -64;
}

ValueMetadata *type metadata accessor for SliceStruct()
{
  return &type metadata for SliceStruct;
}

ValueMetadata *type metadata accessor for Ellipsis()
{
  return &type metadata for Ellipsis;
}

uint64_t dispatch thunk of SliceIndex.value()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_24255732C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255E688(*a1, *a2);
}

uint64_t sub_242557338()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425573C8()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242557434()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425574C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242557FF8();
  *a1 = result;
  return result;
}

void sub_2425574EC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE400000000000000;
  v5 = 1885697139;
  if (v2 != 1)
  {
    v5 = 0x7265707075;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7265776F6CLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_24255753C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1885697139;
  if (*v0 != 1)
    v1 = 0x7265707075;
  if (*v0)
    return v1;
  else
    return 0x7265776F6CLL;
}

uint64_t sub_242557588@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242557FF8();
  *a1 = result;
  return result;
}

uint64_t sub_2425575AC()
{
  return 0;
}

uint64_t sub_2425575B8()
{
  sub_242557DEC();
  return sub_2425A0344();
}

uint64_t sub_2425575E0()
{
  sub_242557DEC();
  return sub_2425A0350();
}

uint64_t sub_242557608(_QWORD *a1)
{
  swift_allocObject();
  return sub_242557650(a1);
}

uint64_t sub_242557650(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[5];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242557DEC();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    type metadata accessor for MorpheusSlice();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = sub_24258B914((uint64_t)v8, 0);
    *(_QWORD *)(v1 + 48) = v9;
    swift_unknownObjectRelease();
    *(_QWORD *)(v1 + 56) = sub_24258B914((uint64_t)v8, 1);
    *(_QWORD *)(v1 + 64) = v10;
    swift_unknownObjectRelease();
    MEMORY[0x48] = sub_24258B914((uint64_t)v8, 2);
    MEMORY[0x50] = v11;
    swift_release();
    swift_unknownObjectRelease();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v14);
    v3 = sub_24259BC74(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_242557880@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  _BYTE v46[32];
  uint64_t v47;

  v3 = v2;
  if (v1[5])
  {
    v5 = v1[6];
    ObjectType = swift_getObjectType();
    v7 = MEMORY[0x2426A8918](v1 + 3);
    v8 = v1[4];
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
    swift_unknownObjectRetain();
    v9(v7, v8, ObjectType, v5);
    swift_unknownObjectRelease();
  }
  if (v1[7])
  {
    v10 = v1[8];
    v11 = swift_getObjectType();
    v12 = MEMORY[0x2426A8918](v1 + 3);
    v13 = v1[4];
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
    swift_unknownObjectRetain();
    v14(v12, v13, v11, v10);
    swift_unknownObjectRelease();
  }
  if (v1[9])
  {
    v15 = v1[10];
    v16 = swift_getObjectType();
    v17 = MEMORY[0x2426A8918](v1 + 3);
    v18 = v1[4];
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    v19(v17, v18, v16, v15);
    swift_unknownObjectRelease();
  }
  if (!v1[5])
  {
    v47 = 0;
    memset(v46, 0, sizeof(v46));
    if (!v1[7])
      goto LABEL_10;
LABEL_14:
    v27 = v1[8];
    v28 = swift_getObjectType();
    v29 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v27 + 64);
    swift_unknownObjectRetain();
    v29(v42, v28, v27);
    if (v3)
    {
      sub_242557D64((uint64_t)v46);
      return swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    sub_242591BB0((uint64_t)v44);
    sub_242557D30((uint64_t)v42);
    if (v1[9])
      goto LABEL_11;
    goto LABEL_17;
  }
  v20 = v1[6];
  v21 = swift_getObjectType();
  v22 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v20 + 64);
  swift_unknownObjectRetain();
  v22(v44, v21, v20);
  result = swift_unknownObjectRelease();
  if (v3)
    return result;
  sub_242591BB0((uint64_t)v46);
  sub_242557D30((uint64_t)v44);
  if (v1[7])
    goto LABEL_14;
LABEL_10:
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  if (v1[9])
  {
LABEL_11:
    v24 = v1[10];
    v25 = swift_getObjectType();
    v26 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v24 + 64);
    swift_unknownObjectRetain();
    v26(v39, v25, v24);
    swift_unknownObjectRelease();
    if (v3)
    {
      sub_242557D64((uint64_t)v44);
      return sub_242557D64((uint64_t)v46);
    }
    sub_242591BB0((uint64_t)v42);
    sub_242557D30((uint64_t)v39);
    goto LABEL_19;
  }
LABEL_17:
  v43 = 0;
  memset(v42, 0, sizeof(v42));
LABEL_19:
  sub_242557DA4((uint64_t)v46, (uint64_t)v39);
  v30 = v40;
  if (v40)
  {
    v31 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    sub_242557D64((uint64_t)v39);
    v32 = 0;
  }
  sub_242557DA4((uint64_t)v44, (uint64_t)v39);
  v33 = v40;
  if (v40)
  {
    v34 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    sub_242557D64((uint64_t)v39);
    v35 = 0;
  }
  sub_242557DA4((uint64_t)v42, (uint64_t)v39);
  v36 = v40;
  if (v40)
  {
    v37 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
    sub_242557D64((uint64_t)v42);
    sub_242557D64((uint64_t)v44);
    sub_242557D64((uint64_t)v46);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    sub_242557D64((uint64_t)v42);
    sub_242557D64((uint64_t)v44);
    sub_242557D64((uint64_t)v46);
    result = sub_242557D64((uint64_t)v39);
    v38 = 0;
  }
  *(_QWORD *)(a1 + 24) = &type metadata for SliceStruct;
  *(_DWORD *)a1 = v32;
  *(_BYTE *)(a1 + 4) = v30 == 0;
  *(_DWORD *)(a1 + 8) = v35;
  *(_BYTE *)(a1 + 12) = v33 == 0;
  *(_DWORD *)(a1 + 16) = v38;
  *(_BYTE *)(a1 + 20) = v36 == 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_242557CA4()
{
  return 0;
}

uint64_t sub_242557CB0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_242557CD4()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MorpheusSlice()
{
  return objc_opt_self();
}

uint64_t sub_242557D30(uint64_t a1)
{
  destroy for OpResult(a1);
  return a1;
}

uint64_t sub_242557D64(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_242557DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_242557DEC()
{
  unint64_t result;

  result = qword_2571FCE10;
  if (!qword_2571FCE10)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5B94, &type metadata for MorpheusSlice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FCE10);
  }
  return result;
}

uint64_t sub_242557E30(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t storeEnumTagSinglePayload for MorpheusSlice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_242557EA0 + 4 * byte_2425C59FD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_242557ED4 + 4 * byte_2425C59F8[v4]))();
}

uint64_t sub_242557ED4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242557EDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242557EE4);
  return result;
}

uint64_t sub_242557EF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242557EF8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_242557EFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242557F04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MorpheusSlice.CodingKeys()
{
  return &type metadata for MorpheusSlice.CodingKeys;
}

unint64_t sub_242557F24()
{
  unint64_t result;

  result = qword_2571FCE18;
  if (!qword_2571FCE18)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5B6C, &type metadata for MorpheusSlice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FCE18);
  }
  return result;
}

unint64_t sub_242557F6C()
{
  unint64_t result;

  result = qword_2571FCE20;
  if (!qword_2571FCE20)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5AA4, &type metadata for MorpheusSlice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FCE20);
  }
  return result;
}

unint64_t sub_242557FB4()
{
  unint64_t result;

  result = qword_2571FCE28;
  if (!qword_2571FCE28)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5ACC, &type metadata for MorpheusSlice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FCE28);
  }
  return result;
}

uint64_t sub_242557FF8()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_242558040(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_2425264B4((_OWORD *)a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    sub_24255A48C(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    swift_bridgeObjectRelease();
    return sub_24255BA80(a2);
  }
  else
  {
    sub_2425264C4(a1, &qword_2571FC790);
    sub_242559DA0(a2, v7);
    sub_24255BA80(a2);
    return sub_2425264C4((uint64_t)v7, &qword_2571FC790);
  }
}

uint64_t sub_2425580FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_2425264B4((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_24255A5C4(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_2425264C4(a1, &qword_2571FC790);
    sub_242559E88(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_2425264C4((uint64_t)v9, &qword_2571FC790);
  }
}

uint64_t sub_2425581D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD v9[4];

  if (*(_QWORD *)(a1 + 24) == 1)
  {
    sub_2425264C4(a1, &qword_2571FD098);
    sub_242559F78(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_2425264C4((uint64_t)v9, &qword_2571FD098);
  }
  else
  {
    sub_24255BAB4(a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_24255A6F4((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_2425582A8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD070);
  v2 = sub_2425A0158();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24255BB44(v6, (uint64_t)v15, qword_2571FD0A0);
    result = sub_24255A0C0((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_2425264B4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2425583E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD080);
  v2 = sub_2425A0158();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24255BB44(v6, (uint64_t)&v15, &qword_2571FD088);
    v7 = v15;
    v8 = v16;
    result = sub_24255A05C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_2425264B4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24255851C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD090);
  v2 = sub_2425A0158();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24255BB44(v6, (uint64_t)&v15, &qword_2571FC7D8);
    v7 = v15;
    v8 = v16;
    result = sub_24255A05C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_24255BAB4((uint64_t)&v17, v3[7] + 32 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_242558650(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD078);
  v2 = (_QWORD *)sub_2425A0158();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_24255A05C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_242558768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _OWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;

  swift_retain();
  sub_242591180(a1, a2, (uint64_t)&v11);
  swift_release();
  if (v12)
    return sub_2425264B4(&v11, a3);
  sub_2425264C4((uint64_t)&v11, &qword_2571FC790);
  if (qword_2571FC5C0 != -1)
    swift_once();
  v7 = qword_2571FFB08;
  result = (_OWORD *)swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 104);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_24255A05C(a1, a2);
    if ((v10 & 1) != 0)
    {
      sub_242526478(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)a3);
    }
    else
    {
      *a3 = 0u;
      a3[1] = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return (_OWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_2425588A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[32];
  uint64_t v6;
  _BYTE v7[32];
  _BYTE v8[40];
  _QWORD v9[4];

  v9[3] = MEMORY[0x24BEE0D00];
  v9[0] = a1;
  v9[1] = a2;
  sub_242526478((uint64_t)v9, (uint64_t)v8);
  swift_retain();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_24259FF48();
    sub_242526478(a3, (uint64_t)v7);
    sub_24255BA44((uint64_t)v8, (uint64_t)&v6);
    sub_24255BB44((uint64_t)v7, (uint64_t)v5, &qword_2571FC790);
    swift_beginAccess();
    sub_242558040((uint64_t)v5, (uint64_t)&v6);
    swift_endAccess();
    sub_24255BA80((uint64_t)v8);
    sub_2425264C4((uint64_t)v7, &qword_2571FC790);
    swift_release();
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_2425589F4()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_242558A20()
{
  return swift_retain();
}

uint64_t sub_242558A28()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_242558A54(char *a1, char *a2)
{
  return sub_24255E5F0(*a1, *a2);
}

uint64_t sub_242558A60()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242558AD4()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242558B24()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242558B94@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_242558BF0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1668183398;
  if (!*v1)
    v2 = 0x6B636F6C62;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_242558C24()
{
  _BYTE *v0;

  if (*v0)
    return 1668183398;
  else
    return 0x6B636F6C62;
}

uint64_t sub_242558C54@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_242558CB4()
{
  sub_24255B760();
  return sub_2425A0344();
}

uint64_t sub_242558CDC()
{
  sub_24255B760();
  return sub_2425A0350();
}

uint64_t MorpheusProgram.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  MorpheusProgram.init(from:)(a1);
  return v2;
}

_QWORD *MorpheusProgram.init(from:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24255B568();
  if (v2)
  {
    type metadata accessor for MorpheusProgram();
    swift_deallocPartialClassInstance();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_24255B760();
    sub_2425A0338();
    v19 = 0;
    type metadata accessor for LexicalBlock();
    sub_24255B800((unint64_t *)&qword_2571FCE40, 255, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
    sub_2425A01D0();
    v1[5] = v18;
    LOBYTE(v18) = 1;
    v1[2] = sub_2425A01A0();
    v1[3] = v10;
    type metadata accessor for MorpheusProgram.RootBlock();
    v11 = swift_allocObject();
    type metadata accessor for LexicalContext();
    v17 = v11;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = 0x6E776F6E6B6E55;
    v12[3] = 0xE700000000000000;
    v16 = sub_2425582A8(MEMORY[0x24BEE4AF8]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE48);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = MEMORY[0x24BEE4B00];
    swift_beginAccess();
    *(_QWORD *)(v13 + 16) = v16;
    swift_bridgeObjectRelease();
    v12[4] = v13;
    v12[5] = sub_242558650(MEMORY[0x24BEE4AF8]);
    v14 = v17;
    *(_QWORD *)(v17 + 16) = v12;
    v12[2] = 1953460050;
    v12[3] = 0xE400000000000000;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v3[4] = v14;
    *(_QWORD *)(v3[5] + 32) = &off_251355B10;
    swift_unknownObjectWeakAssign();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t sub_242559020()
{
  uint64_t v0;

  swift_retain();
  v0 = sub_242598E28();
  swift_release();
  return v0;
}

uint64_t sub_242559068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t v13;

  swift_retain();
  sub_242598B8C();
  result = swift_release();
  if (!v4)
  {
    v9 = *(_QWORD *)(v3 + 16);
    v10 = *(_QWORD *)(v3 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2425986A8(v9, v10, &v12);
    swift_release();
    swift_bridgeObjectRelease();
    if (v13)
    {
      type metadata accessor for Function();
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_242566054(a1, a2, a3);
        return swift_release();
      }
    }
    else
    {
      sub_2425264C4((uint64_t)&v12, &qword_2571FC790);
    }
    sub_242554B60();
    swift_allocError();
    *v11 = 8;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2425591A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  if (qword_2571FC5D0 != -1)
    swift_once();
  v0 = qword_2571FFB28;
  v1 = qword_2571FC5E0;
  swift_bridgeObjectRetain();
  if (v1 != -1)
    swift_once();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_2425592B8(v2, v0);
  v4 = sub_242564E0C(v3);
  swift_bridgeObjectRelease();
  v6[0] = MEMORY[0x24BEE4AF8];
  v6[1] = MEMORY[0x24BEE4AF8];
  v6[2] = MEMORY[0x24BEE4AF8];
  v6[3] = MEMORY[0x24BEE4AF8];
  v6[4] = MEMORY[0x24BEE4AF8];
  type metadata accessor for Function();
  v7 = 0u;
  v8 = 0u;
  swift_allocObject();
  result = Function.init(name:arguments:attrs:body:)(1953460082, 0xE400000000000000, (uint64_t)v6, v4, 0, 0);
  qword_2571FFB08 = result;
  return result;
}

uint64_t sub_2425592B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_24255B250(a1, (uint64_t)sub_24255B534, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

_QWORD *static MorpheusProgram.registerFunction(name:f:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  _BYTE *v36;
  __int128 v37;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  *(_QWORD *)&v52 = a1;
  *((_QWORD *)&v52 + 1) = a2;
  v50[0] = 46;
  v50[1] = 0xE100000000000000;
  sub_24253B194();
  v3 = sub_24259FEAC();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRetain();
    swift_release();
LABEL_47:
    swift_bridgeObjectRelease_n();
    sub_242554B60();
    swift_allocError();
    *v36 = 7;
    return (_QWORD *)swift_willThrow();
  }
  v54 = v3 + 32;
  v5 = (_QWORD *)v3;
  swift_bridgeObjectRetain_n();
  v39 = v5;
  v6 = v5 + 5;
  v7 = MEMORY[0x24BEE4AF8];
  v8 = v4;
  do
  {
    v13 = *(v6 - 1);
    v12 = *v6;
    v14 = HIBYTE(*v6) & 0xF;
    if ((*v6 & 0x2000000000000000) == 0)
      v14 = v13 & 0xFFFFFFFFFFFFLL;
    if (!v14)
    {
      swift_bridgeObjectRetain();
      *(_QWORD *)&v52 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509BCC(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v52;
      }
      v10 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_242509BCC(v9 > 1, v10 + 1, 1);
        v7 = v52;
      }
      *(_QWORD *)(v7 + 16) = v10 + 1;
      v11 = v7 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v13;
      *(_QWORD *)(v11 + 40) = v12;
    }
    v6 += 2;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v7 + 16);
  swift_release();
  if (v15)
    goto LABEL_47;
  if (v4 > v39[2])
  {
    __break(1u);
  }
  else
  {
    v37 = *(_OWORD *)(v54 + 16 * v4 - 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (qword_2571FC5C0 == -1)
    {
      if (v39[2])
        goto LABEL_16;
LABEL_51:
      __break(1u);
LABEL_52:
      result = sub_24251DF08(v39);
      v17 = result[2];
      if (v17)
        goto LABEL_18;
LABEL_53:
      __break(1u);
      return result;
    }
  }
  swift_once();
  if (!v39[2])
    goto LABEL_51;
LABEL_16:
  v8 = qword_2571FFB08;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_52;
  result = v39;
  v17 = v39[2];
  if (!v17)
    goto LABEL_53;
LABEL_18:
  v18 = result;
  result[2] = v17 - 1;
  swift_bridgeObjectRelease();
  v19 = v18[2];
  if (v19)
  {
    v20 = v18 + 5;
    while (1)
    {
      v22 = *(v20 - 1);
      v21 = *v20;
      swift_beginAccess();
      v23 = *(_QWORD *)(v8 + 104);
      if (!*(_QWORD *)(v23 + 16))
        break;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v24 = sub_24255A05C(v22, v21);
      if ((v25 & 1) != 0)
      {
        sub_242526478(*(_QWORD *)(v23 + 56) + 32 * v24, (uint64_t)&v52);
      }
      else
      {
        v52 = 0u;
        v53 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v53 + 1))
        goto LABEL_32;
      type metadata accessor for Function();
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v8 = v50[0];
        goto LABEL_23;
      }
      v40 = (uint64_t *)(v8 + 104);
      v41 = v20;
      v42 = v19;
LABEL_34:
      swift_bridgeObjectRetain();
      v26 = MEMORY[0x24BEE4AF8];
      v44 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
      v43 = type metadata accessor for Function();
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 32) = v26;
      *(_QWORD *)(v8 + 40) = v26;
      *(_QWORD *)(v8 + 48) = v26;
      *(_QWORD *)(v8 + 56) = v26;
      *(_QWORD *)(v8 + 64) = v26;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      v27 = sub_2425583E8(v26);
      v54 = v21;
      *(_QWORD *)(v8 + 104) = v27;
      *(_QWORD *)(v8 + 16) = v22;
      *(_QWORD *)(v8 + 24) = v21;
      *(_QWORD *)(v8 + 32) = v26;
      *(_QWORD *)(v8 + 40) = v26;
      *(_QWORD *)(v8 + 48) = v26;
      *(_QWORD *)(v8 + 56) = v26;
      *(_QWORD *)(v8 + 64) = v26;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(_QWORD *)(v8 + 104) = v44;
      swift_bridgeObjectRelease();
      v28 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v8 + 112) = sub_24255B7E8;
      *(_QWORD *)(v8 + 120) = v28;
      swift_beginAccess();
      swift_weakAssign();
      *((_QWORD *)&v53 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v52 = v22;
      *((_QWORD *)&v52 + 1) = v54;
      v51 = v43;
      v50[0] = v8;
      sub_242526478((uint64_t)&v52, (uint64_t)&v48);
      swift_retain();
      if (swift_dynamicCast())
      {
        v29 = v47[0];
        sub_242526478((uint64_t)v50, (uint64_t)&v48);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v49 = v43;
          *(_QWORD *)&v48 = *(_QWORD *)&v47[0];
          swift_beginAccess();
          if (v49)
          {
            sub_2425264B4(&v48, v47);
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v45 = *v40;
            *v40 = 0x8000000000000000;
            sub_24255A5C4(v47, v29, *((uint64_t *)&v29 + 1), isUniquelyReferenced_nonNull_native);
            *v40 = v45;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_retain();
            sub_2425264C4((uint64_t)&v48, &qword_2571FC790);
            swift_bridgeObjectRetain();
            v31 = sub_24255A05C(v29, *((uint64_t *)&v29 + 1));
            v33 = v32;
            swift_bridgeObjectRelease();
            if ((v33 & 1) != 0)
            {
              v34 = swift_isUniquelyReferenced_nonNull_native();
              v35 = *v40;
              v46 = *v40;
              *v40 = 0x8000000000000000;
              if ((v34 & 1) == 0)
              {
                sub_24255ACCC();
                v35 = v46;
              }
              swift_bridgeObjectRelease();
              sub_2425264B4((_OWORD *)(*(_QWORD *)(v35 + 56) + 32 * v31), v47);
              sub_24255A2B8(v31, v35);
              *v40 = v35;
              swift_bridgeObjectRelease();
            }
            else
            {
              memset(v47, 0, sizeof(v47));
            }
            swift_bridgeObjectRelease();
            sub_2425264C4((uint64_t)v47, &qword_2571FC790);
          }
          v19 = v42;
          swift_endAccess();
          swift_release();
          swift_release();
          goto LABEL_22;
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      v19 = v42;
LABEL_22:
      v20 = v41;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
LABEL_23:
      v20 += 2;
      if (!--v19)
        goto LABEL_48;
    }
    v52 = 0u;
    v53 = 0u;
    swift_bridgeObjectRetain();
LABEL_32:
    v40 = (uint64_t *)(v8 + 104);
    v41 = v20;
    v42 = v19;
    sub_2425264C4((uint64_t)&v52, &qword_2571FC790);
    goto LABEL_34;
  }
LABEL_48:
  swift_bridgeObjectRelease();
  *((_QWORD *)&v53 + 1) = MEMORY[0x24BEE0D00];
  v52 = v37;
  v51 = type metadata accessor for Function();
  v50[0] = a3;
  swift_retain();
  sub_2425678E4((uint64_t)&v52, (uint64_t)v50);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
}

uint64_t static MorpheusProgram.fromDSL(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  v5 = sub_24259FB04();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1;
  v17 = a2;
  v15[2] = 10;
  v15[3] = 0xE100000000000000;
  v15[0] = 28252;
  v15[1] = 0xE200000000000000;
  sub_24253B194();
  sub_24259FEB8();
  sub_24259FAF8();
  v9 = sub_24259FAEC();
  v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v11 >> 60 == 15)
  {
    sub_242554B60();
    swift_allocError();
    *v12 = 34;
    return swift_willThrow();
  }
  else
  {
    sub_24259F8A0();
    swift_allocObject();
    sub_24259F894();
    type metadata accessor for MorpheusProgram();
    sub_24255B800(&qword_2571FCE50, v14, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusProgram, (uint64_t)&protocol conformance descriptor for MorpheusProgram);
    sub_24259F888();
    sub_24255B840(v9, v11);
    result = swift_release();
    if (!v2)
      return v16;
  }
  return result;
}

uint64_t MorpheusProgram.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t MorpheusProgram.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *sub_242559D00@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  type metadata accessor for MorpheusProgram();
  v5 = swift_allocObject();
  result = MorpheusProgram.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_242559D54()
{
  uint64_t v0;

  swift_retain();
  v0 = sub_242598E28();
  swift_release();
  return v0;
}

double sub_242559DA0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_24255A0C0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24255AAE8();
      v9 = v11;
    }
    sub_24255BA80(*(_QWORD *)(v9 + 48) + 40 * v6);
    sub_2425264B4((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_24255A0F0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_242559E88@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_24255A05C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24255ACCC();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_2425264B4((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_24255A2B8(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_242559F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_24255A05C(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24255AEB0();
      v12 = v13;
    }
    swift_bridgeObjectRelease();
    sub_24255BAB4(*(_QWORD *)(v12 + 56) + 32 * v8, (uint64_t)a3);
    sub_24255A2B8(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 1;
  }
  return result;
}

unint64_t sub_24255A05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2425A02D8();
  sub_24259FB40();
  v4 = sub_2425A02F0();
  return sub_24255A944(a1, a2, v4);
}

unint64_t sub_24255A0C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24259FF30();
  return sub_24255AA24(a1, v2);
}

unint64_t sub_24255A0F0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_24259FF24();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_24255BA44(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = sub_24259FF30();
        result = sub_24255BA80((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_24255A2B8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_24259FF24();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2425A02D8();
        swift_bridgeObjectRetain();
        sub_24259FB40();
        v10 = sub_2425A02F0();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_24255A48C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_24255A0C0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_2425264B4(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_24255AAE8();
      goto LABEL_7;
    }
    sub_242599948(v13, a3 & 1);
    v19 = sub_24255A0C0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24255BA44(a2, (uint64_t)v21);
      return sub_24259A58C(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)sub_2425A0290();
  __break(1u);
  return result;
}

_OWORD *sub_24255A5C4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_24255A05C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return sub_2425264B4(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24255ACCC();
      goto LABEL_7;
    }
    sub_242599C5C(v15, a4 & 1);
    v21 = sub_24255A05C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24259A604(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_2425A0290();
  __break(1u);
  return result;
}

uint64_t sub_24255A6F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_24255A05C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_24255BAFC(a1, v18[7] + 32 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24255AEB0();
      goto LABEL_7;
    }
    sub_242599F58(v15, a4 & 1);
    v20 = sub_24255A05C(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_24255BAFC(a1, v18[7] + 32 * v12);
LABEL_11:
      sub_24259A66C(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2425A0290();
  __break(1u);
  return result;
}

uint64_t sub_24255A818(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_24255A05C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24255B09C();
      goto LABEL_7;
    }
    sub_24259A278(v15, a4 & 1);
    v21 = sub_24255A05C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24259A6DC(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2425A0290();
  __break(1u);
  return result;
}

unint64_t sub_24255A944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2425A0254() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2425A0254() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24255AA24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_24255BA44(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x2426A7BD4](v9, a1);
      sub_24255BA80((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void *sub_24255AAE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD070);
  v2 = *v0;
  v3 = sub_2425A0140();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_24255BA44(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_242526478(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_2425264B4(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24255ACCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD080);
  v2 = *v0;
  v3 = sub_2425A0140();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_242526478(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_2425264B4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24255AEB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[32];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD090);
  v2 = *v0;
  v3 = sub_2425A0140();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 32 * v15;
    sub_24255BB44(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26, &qword_2571FC790);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    sub_24255BAB4((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24255B09C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD078);
  v2 = *v0;
  v3 = sub_2425A0140();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24255B250(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = sub_24256DECC();
  if (!v8)
    goto LABEL_24;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = (_QWORD *)*a5;
  v15 = sub_24255A05C(v7, v8);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_24255B09C();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v24 = (uint64_t *)(v22[6] + 16 * v15);
    *v24 = v10;
    v24[1] = v11;
    *(_QWORD *)(v22[7] + 8 * v15) = v12;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v27;
LABEL_13:
    v28 = sub_24256DECC();
    if (v29)
    {
      v31 = v28;
      v32 = v29;
      v33 = v30;
      do
      {
        v37 = (_QWORD *)*a5;
        v39 = sub_24255A05C(v31, v32);
        v40 = v37[2];
        v41 = (v38 & 1) == 0;
        v42 = v40 + v41;
        if (__OFADD__(v40, v41))
          goto LABEL_25;
        v43 = v38;
        if (v37[3] < v42)
        {
          sub_24259A278(v42, 1);
          v44 = sub_24255A05C(v31, v32);
          if ((v43 & 1) != (v45 & 1))
            goto LABEL_27;
          v39 = v44;
        }
        v46 = (_QWORD *)*a5;
        if ((v43 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v34 = v46[7];
          swift_release();
          *(_QWORD *)(v34 + 8 * v39) = v33;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          v47 = (uint64_t *)(v46[6] + 16 * v39);
          *v47 = v31;
          v47[1] = v32;
          *(_QWORD *)(v46[7] + 8 * v39) = v33;
          v48 = v46[2];
          v26 = __OFADD__(v48, 1);
          v49 = v48 + 1;
          if (v26)
            goto LABEL_26;
          v46[2] = v49;
        }
        v31 = sub_24256DECC();
        v32 = v35;
        v33 = v36;
      }
      while (v35);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_2425213C4();
    return swift_release();
  }
  sub_24259A278(v18, a4 & 1);
  v20 = sub_24255A05C(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    v23 = v22[7];
    swift_release();
    *(_QWORD *)(v23 + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  result = sub_2425A0290();
  __break(1u);
  return result;
}

uint64_t sub_24255B534@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_24255B568()
{
  __SecTask *v0;
  __CFString *v1;
  CFTypeRef v2;
  _BYTE *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _BYTE *v9;
  char v10;

  v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    v1 = (__CFString *)sub_24259FAD4();
    v2 = SecTaskCopyValueForEntitlement(v0, v1, 0);

    if (v2)
    {
      swift_unknownObjectRetain();
      if ((swift_dynamicCast() & 1) == 0 || (v10 & 1) == 0)
      {
        sub_242554B60();
        swift_allocError();
        *v3 = 0;
        swift_willThrow();
      }

      return swift_unknownObjectRelease();
    }

  }
  if (qword_2571FC5C8 != -1)
    swift_once();
  v5 = sub_24259F930();
  __swift_project_value_buffer(v5, (uint64_t)qword_2571FFB10);
  v6 = sub_24259F918();
  v7 = sub_24259FE70();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2422E0000, v6, v7, "Morpheus require proper entitlement, please contact PFL team (#help-pfl)", v8, 2u);
    MEMORY[0x2426A88B8](v8, -1, -1);
  }

  sub_242554B60();
  swift_allocError();
  *v9 = 0;
  return swift_willThrow();
}

uint64_t type metadata accessor for MorpheusProgram()
{
  return objc_opt_self();
}

unint64_t sub_24255B760()
{
  unint64_t result;

  result = qword_2571FCE38;
  if (!qword_2571FCE38)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5DB0, &type metadata for MorpheusProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FCE38);
  }
  return result;
}

uint64_t type metadata accessor for MorpheusProgram.RootBlock()
{
  return objc_opt_self();
}

uint64_t sub_24255B7C4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_24255B7E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_242565F70(a1);
}

uint64_t sub_24255B800(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x2426A87E0](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24255B840(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2425443D8(a1, a2);
  return a1;
}

uint64_t method lookup function for MorpheusProgram()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MorpheusProgram.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of MorpheusProgram.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MorpheusProgram.execute(args:keywords:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t storeEnumTagSinglePayload for MorpheusProgram.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24255B8EC + 4 * byte_2425C5BED[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24255B920 + 4 * byte_2425C5BE8[v4]))();
}

uint64_t sub_24255B920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24255B928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24255B930);
  return result;
}

uint64_t sub_24255B93C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24255B944);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24255B948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24255B950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MorpheusProgram.CodingKeys()
{
  return &type metadata for MorpheusProgram.CodingKeys;
}

unint64_t sub_24255B970()
{
  unint64_t result;

  result = qword_2571FD058;
  if (!qword_2571FD058)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5D78, &type metadata for MorpheusProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD058);
  }
  return result;
}

unint64_t sub_24255B9B8()
{
  unint64_t result;

  result = qword_2571FD060;
  if (!qword_2571FD060)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5CB0, &type metadata for MorpheusProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD060);
  }
  return result;
}

unint64_t sub_24255BA00()
{
  unint64_t result;

  result = qword_2571FD068;
  if (!qword_2571FD068)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C5CD8, &type metadata for MorpheusProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD068);
  }
  return result;
}

uint64_t sub_24255BA44(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_24255BA80(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_24255BAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24255BAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_24255BB44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t SharedMutableArray.__allocating_init(array:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_24255BBD0()
{
  sub_24255CAE8();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24255BBF8()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = sub_24259FD68();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE12E0], v0);
  return sub_24259FDF8();
}

uint64_t sub_24255BC68()
{
  sub_24255CAB8();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24255BC7C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t SharedMutableArray.init(array:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t _s8Morpheus18SharedMutableArrayC3lenSiyF_0()
{
  return sub_24255BD58((uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE11C8]);
}

uint64_t sub_24255BCD8(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = a1 + 1;
  if (__OFADD__(a1, 1))
    __break(1u);
  return result;
}

uint64_t sub_24255BD1C()
{
  swift_beginAccess();
  return 0;
}

uint64_t sub_24255BD4C()
{
  return sub_24255BD58((uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1220]);
}

uint64_t sub_24255BD58(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 80);
  v5 = swift_bridgeObjectRetain();
  v6 = a1(v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24255BDC4()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_24259FD8C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24255BE38(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v5;
  unint64_t v6;
  char v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;

  v3 = a2;
  v5 = (unint64_t *)(v2 + 16);
  if ((a2 & 0x8000000000000000) != 0)
  {
    swift_beginAccess();
    v6 = *(_QWORD *)(*v5 + 16) + v3;
    swift_beginAccess();
    v3 = *v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v6 & 0x8000000000000000) == 0)
        goto LABEL_8;
    }
    else
    {
      v3 = (unint64_t)sub_24251DEF4((_QWORD *)v3);
      *v5 = v3;
      if ((v6 & 0x8000000000000000) == 0)
      {
LABEL_8:
        if (v6 < *(_QWORD *)(v3 + 16))
        {
          v8 = (_QWORD *)(v3 + 32 * v6);
          goto LABEL_10;
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_beginAccess();
  if (*(_QWORD *)(*v5 + 16) > v3)
  {
    swift_beginAccess();
    v6 = *v5;
    v7 = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v6;
    if ((v7 & 1) != 0)
    {
LABEL_4:
      if (*(_QWORD *)(v6 + 16) > v3)
      {
        v8 = (_QWORD *)(v6 + 32 * v3);
LABEL_10:
        __swift_assign_boxed_opaque_existential_0(v8 + 4, a1);
        swift_endAccess();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    v6 = (unint64_t)sub_24251DEF4((_QWORD *)v6);
    *v5 = v6;
    goto LABEL_4;
  }
  if (qword_2571FC5C8 != -1)
LABEL_22:
    swift_once();
  v11 = sub_24259F930();
  __swift_project_value_buffer(v11, (uint64_t)qword_2571FFB10);
  swift_retain();
  v12 = sub_24259F918();
  v13 = sub_24259FE70();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    *(_DWORD *)v14 = 134218240;
    sub_24259FE94();
    *(_WORD *)(v14 + 12) = 2048;
    sub_24259FE94();
    swift_release();
    _os_log_impl(&dword_2422E0000, v12, v13, "SharedMutableArray> Index out of range %ld >= %ld", (uint8_t *)v14, 0x16u);
    MEMORY[0x2426A88B8](v14, -1, -1);
  }
  else
  {
    swift_release();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24255C0A8(uint64_t a1, int64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  sub_24255CB1C(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a1);
}

void (*sub_24255C0E4(_QWORD *a1, uint64_t a2))(int64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  sub_24255BDC4();
  return sub_24255C16C;
}

void sub_24255C16C(int64_t **a1, char a2)
{
  int64_t *v2;
  void *v3;
  void *v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  void (*v8)(void *, int64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(int64_t, void *, int64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_24255CB1C((uint64_t)v3, v7);
    v8 = *(void (**)(void *, int64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_24255CB1C((*a1)[5], v7);
    v8 = *(void (**)(void *, int64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t SharedMutableArray.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedMutableArray.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24255C254@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = sub_24255BD1C();
  *a1 = 0;
  return result;
}

uint64_t sub_24255C27C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_24255BD4C();
  *a1 = result;
  return result;
}

void (*sub_24255C2A4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_24255C2F4(v2);
  return sub_24251E3E4;
}

void (*sub_24255C2F4(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = malloc(*(_QWORD *)(v3 + 64));
  sub_24255BDC4();
  return sub_24254F448;
}

uint64_t sub_24255C354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a2 + 80), a3, a4);
  return sub_24259FE40();
}

uint64_t sub_24255C39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a1 + 80), a3, a4);
  return sub_24259FE34();
}

uint64_t sub_24255C3DC()
{
  return _s8Morpheus18SharedMutableArrayC3lenSiyF_0();
}

void sub_24255C3FC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_24255C40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_24259FE10();
}

uint64_t sub_24255C464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a4 + 80), a3, a4);
  return sub_24259FE04();
}

uint64_t sub_24255C4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_24259FE28();
}

uint64_t sub_24255C50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_2425875C0(a1, a2, v7, a4);
}

uint64_t sub_24255C554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_2425875D4(a1, a2, v7, a4);
}

uint64_t sub_24255C59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_242587840(a1, a2);
}

uint64_t sub_24255C5E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_24255BCD8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_24255C610(uint64_t *a1)
{
  uint64_t result;

  result = sub_24255BCD8(*a1);
  *a1 = result;
  return result;
}

uint64_t sub_24255C63C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = sub_24255CAE8();
  v4 = v3;
  swift_bridgeObjectRetain();
  result = swift_release();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_24255C680()
{
  return sub_24255BBF8();
}

uint64_t sub_24255C6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a1 + 80), a3, a4);
  MEMORY[0x2426A87E0](&protocol conformance descriptor for SharedMutableArray<A>, v4);
  v5 = sub_24258783C();
  swift_release();
  return v5;
}

void sub_24255C6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a4 + 80), a3, a4);
  JUMPOUT(0x2426A78D4);
}

uint64_t sub_24255C750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableArray(0, *(_QWORD *)(a4 + 80), a3, a4);
  return sub_24259FC48();
}

uint64_t SharedMutableArray<A>.store(key:obj:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5[4];

  sub_242526478(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    sub_242526478(a2, (uint64_t)v5);
    return sub_24255BE38(v5, v4);
  }
  return result;
}

uint64_t sub_24255C834(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5[4];

  sub_242526478(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    sub_242526478(a2, (uint64_t)v5);
    return sub_24255BE38(v5, v4);
  }
  return result;
}

uint64_t SharedMutableArray<A>.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = MEMORY[0x2426A7958](v0, MEMORY[0x24BEE4AD8] + 8);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24255C928()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = MEMORY[0x2426A7958](v0, MEMORY[0x24BEE4AD8] + 8);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SharedMutableArray<A>.get(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _BYTE v7[32];

  sub_242526478(a1, (uint64_t)v7);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    result = swift_beginAccess();
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v5 = *(_QWORD *)(v2 + 16);
      if (v6 < *(_QWORD *)(v5 + 16))
        return sub_242526478(v5 + 32 * v6 + 32, (uint64_t)a2);
    }
    __break(1u);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_24255CA48@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return SharedMutableArray<A>.get(_:)(a1, a2);
}

uint64_t sub_24255CA68(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_24255CAB8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_24255CAE8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

void sub_24255CB1C(uint64_t a1, int64_t a2)
{
  uint64_t *v2;
  int64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char isClassOrObjCExistentialType;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a2;
  v5 = v2 + 2;
  v6 = *v2;
  if (a2 < 0)
  {
    swift_beginAccess();
    v7 = *(_QWORD *)(v6 + 80);
    v13 = swift_bridgeObjectRetain();
    v14 = MEMORY[0x2426A79DC](v13, v7);
    swift_bridgeObjectRelease();
    v15 = __OFADD__(v14, v3);
    v3 += v14;
    if (!v15)
    {
      swift_beginAccess();
      sub_24259FD68();
      sub_24259FCFC();
      v16 = *v5;
      sub_24255CA68(v3, v16);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v12 = v16 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v12 = v16;
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 80);
  v8 = swift_bridgeObjectRetain();
  v9 = MEMORY[0x2426A79DC](v8, v7);
  swift_bridgeObjectRelease();
  if (v9 > v3)
  {
    swift_beginAccess();
    sub_24259FD68();
    sub_24259FCFC();
    v10 = *v5;
    sub_24255CA68(v3, v10);
    v11 = _swift_isClassOrObjCExistentialType();
    v12 = v10 & 0xFFFFFFFFFFFFFF8;
    if ((v11 & 1) == 0)
      v12 = v10;
LABEL_5:
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v12+ ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v3, a1, v7);
    swift_endAccess();
    return;
  }
  if (qword_2571FC5C8 != -1)
LABEL_16:
    swift_once();
  v18 = sub_24259F930();
  __swift_project_value_buffer(v18, (uint64_t)qword_2571FFB10);
  swift_retain();
  v19 = sub_24259F918();
  v20 = sub_24259FE70();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    *(_DWORD *)v21 = 134218240;
    sub_24259FE94();
    *(_WORD *)(v21 + 12) = 2048;
    swift_beginAccess();
    v22 = swift_bridgeObjectRetain();
    MEMORY[0x2426A79DC](v22, v7);
    swift_bridgeObjectRelease();
    sub_24259FE94();
    swift_release();
    _os_log_impl(&dword_2422E0000, v19, v20, "SharedMutableArray> Index out of range %ld >= %ld", (uint8_t *)v21, 0x16u);
    MEMORY[0x2426A88B8](v21, -1, -1);
  }
  else
  {
    swift_release();
  }

}

void sub_24255CE50()
{
  JUMPOUT(0x2426A87E0);
}

uint64_t sub_24255CE60()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_24255CE6C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_24255CAB8();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24255CE94()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_24255BC7C(v0);
}

uint64_t sub_24255CEBC()
{
  return 8;
}

_QWORD *sub_24255CEC8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_24255CED4()
{
  return sub_24255BDC4();
}

void sub_24255CEF8(uint64_t a1, uint64_t a2, int64_t *a3)
{
  sub_24255CB1C(a1, *a3);
}

uint64_t sub_24255CF20()
{
  return 8;
}

uint64_t sub_24255CF30()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SharedMutableArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedMutableArray);
}

uint64_t method lookup function for SharedMutableArray()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedMutableArray.makeIterator()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SharedMutableArray.underestimatedCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SharedMutableArray.array.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SharedMutableArray.__allocating_init(array:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SharedMutableArray.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SharedMutableArray.index(after:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SharedMutableArray.startIndex.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SharedMutableArray.endIndex.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SharedMutableArray.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SharedMutableArray.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SharedMutableArray.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t Dictionary<>.get(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *boxed_opaque_existential_0;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[32];
  _OWORD v19[2];
  uint64_t v20;

  v8 = sub_24259FE7C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - v10;
  sub_242526478(a1, (uint64_t)v18);
  if (!swift_dynamicCast())
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    result = sub_24255D2DC((uint64_t)&v15);
    goto LABEL_5;
  }
  v19[0] = v15;
  v19[1] = v16;
  v20 = v17;
  MEMORY[0x2426A76A0](v19, a2, MEMORY[0x24BEE23D0], a3, MEMORY[0x24BEE23D8]);
  v12 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    sub_24255BA80((uint64_t)v19);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    return result;
  }
  *(_QWORD *)(a4 + 24) = a3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a4);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_0, v11, a3);
  return sub_24255BA80((uint64_t)v19);
}

uint64_t sub_24255D2DC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24255D31C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return Dictionary<>.get(_:)(a1, *v3, *(_QWORD *)(a2 + 24), a3);
}

uint64_t Array.get(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  _BYTE v9[32];

  sub_242526478(a1, (uint64_t)v9);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    if (v8 < 0 && (result = MEMORY[0x2426A79DC](a2, a3), __OFADD__(result, v8)))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(a4 + 24) = a3;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)a4);
      return sub_24259FD8C();
    }
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_24255D3DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return Array.get(_:)(a1, *v3, *(_QWORD *)(a2 + 16), a3);
}

uint64_t dispatch thunk of Subscriptable.get(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t storeEnumTagSinglePayload for ExprContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24255D440 + 4 * byte_2425C6035[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24255D474 + 4 * byte_2425C6030[v4]))();
}

uint64_t sub_24255D474(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24255D47C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24255D484);
  return result;
}

uint64_t sub_24255D490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24255D498);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24255D49C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24255D4A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExprContext()
{
  return &type metadata for ExprContext;
}

uint64_t sub_24255D4C0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x65756C6176;
    else
      v3 = 7894115;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE300000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x65756C6176;
      else
        v6 = 7894115;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE300000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6563696C73;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6563696C73)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255D5B8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x65756C6176;
    else
      v3 = 7894115;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE300000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x65756C6176;
      else
        v6 = 7894115;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE300000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1920234593;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1920234593)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255D6A8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x70795465756C6176;
  else
    v3 = 0x65756C6176;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE900000000000065;
  if ((a2 & 1) != 0)
    v5 = 0x70795465756C6176;
  else
    v5 = 0x65756C6176;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000065;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255D74C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 2036625250;
  else
    v3 = 0x6D614E7373616C63;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 2036625250;
  else
    v5 = 0x6D614E7373616C63;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE900000000000065;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255D7EC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7894115;
  else
    v3 = 0x65756C6176;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7894115;
  else
    v5 = 0x65756C6176;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255D884(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65756C6176;
  else
    v3 = 6779489;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65756C6176;
  else
    v5 = 6779489;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255D91C(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0x6F697469646E6F63;
  v3 = 0xE90000000000006ELL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6B636F6C426669;
    else
      v5 = 0x636F6C4265736C65;
    if (v4 == 1)
      v6 = 0xE700000000000000;
    else
      v6 = 0xE90000000000006BLL;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6F697469646E6F63;
  v6 = 0xE90000000000006ELL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x6B636F6C426669;
    else
      v2 = 0x636F6C4265736C65;
    if (v7 == 1)
      v3 = 0xE700000000000000;
    else
      v3 = 0xE90000000000006BLL;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255DA2C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756C6176;
  else
    v3 = 28783;
  if (v2)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756C6176;
  else
    v5 = 28783;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE200000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255DAC0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x646E617265706FLL;
  else
    v3 = 28783;
  if (v2)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x646E617265706FLL;
  else
    v5 = 28783;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE200000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255DB58(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1952867692;
    else
      v3 = 0x7468676972;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1952867692;
      else
        v6 = 0x7468676972;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE200000000000000;
    v3 = 28783;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE200000000000000;
  if (v3 != 28783)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255DC40(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7894115;
  else
    v3 = 25705;
  if (v2)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7894115;
  else
    v5 = 25705;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE200000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255DCD0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x656D614E6D657469;
    else
      v3 = 2036625250;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x656D614E6D657469;
      else
        v6 = 2036625250;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x65636E6575716573;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x65636E6575716573)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255DDD8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1936159329;
    else
      v3 = 0x7364726F7779656BLL;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1936159329;
      else
        v6 = 0x7364726F7779656BLL;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x6E6F6974636E7566;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x6E6F6974636E7566)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255DEE0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F6E656E696CLL;
  else
    v3 = 1701869940;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6F6E656E696CLL;
  else
    v5 = 1701869940;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255DF78(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 27241;
  else
    v2 = 31096;
  if ((a2 & 1) != 0)
    v3 = 27241;
  else
    v3 = 31096;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2425A0254();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_24255DFDC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x69737265766E6F63;
  else
    v3 = 0x65756C6176;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEA00000000006E6FLL;
  if ((a2 & 1) != 0)
    v5 = 0x69737265766E6F63;
  else
    v5 = 0x65756C6176;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006E6FLL;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24255E080(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24255E0E4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24255E1B8 + 4 * byte_2425C6043[a2]))(1936159329);
}

uint64_t sub_24255E1B8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1936159329 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24255E2F8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x65726F7473;
    else
      v3 = 7103844;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE300000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x65726F7473;
      else
        v6 = 7103844;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE300000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1684107116;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1684107116)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255E3E8(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 7696487;
  else
    v2 = 7696483;
  if ((a2 & 1) != 0)
    v3 = 7696487;
  else
    v3 = 7696483;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2425A0254();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_24255E450(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 7565423;
    else
      v3 = 0x74617261706D6F63;
    if (v2 == 1)
      v4 = 0xE300000000000000;
    else
      v4 = 0xEB0000000073726FLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 7565423;
      else
        v6 = 0x74617261706D6F63;
      if (v5 == 1)
        v7 = 0xE300000000000000;
      else
        v7 = 0xEB0000000073726FLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1952867692;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1952867692)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255E558(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7563378;
  else
    v3 = 0x746567726174;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7563378;
  else
    v5 = 0x746567726174;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255E5F0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1668183398;
  else
    v3 = 0x6B636F6C62;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1668183398;
  else
    v5 = 0x6B636F6C62;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255E688(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1885697139;
    else
      v3 = 0x7265707075;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1885697139;
      else
        v6 = 0x7265707075;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x7265776F6CLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x7265776F6CLL)
  {
LABEL_21:
    v8 = sub_2425A0254();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24255E780(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7894115;
  else
    v3 = 0x7961727261;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7894115;
  else
    v5 = 0x7961727261;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255E818(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756C6176;
  else
    v3 = 1937335659;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756C6176;
  else
    v5 = 1937335659;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24255E8B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255E2F8(*a1, *a2);
}

uint64_t sub_24255E8BC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24255E948()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24255E9B0()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24255EA38@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24255EBA0();
  *a1 = result;
  return result;
}

void sub_24255EA64(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x65726F7473;
  if (v2 != 1)
  {
    v5 = 7103844;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1684107116;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_24255EAB0()
{
  sub_24255EBE8();
  return sub_24259FCA8();
}

uint64_t sub_24255EB0C()
{
  sub_24255EBE8();
  return sub_24259FC9C();
}

unint64_t sub_24255EB5C()
{
  unint64_t result;

  result = qword_2571FD128;
  if (!qword_2571FD128)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6124, &type metadata for ExprContext);
    atomic_store(result, (unint64_t *)&qword_2571FD128);
  }
  return result;
}

uint64_t sub_24255EBA0()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_24255EBE8()
{
  unint64_t result;

  result = qword_2571FD130;
  if (!qword_2571FD130)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C60AC, &type metadata for ExprContext);
    atomic_store(result, (unint64_t *)&qword_2571FD130);
  }
  return result;
}

uint64_t sub_24255EC2C(char *a1, char *a2)
{
  return sub_24255E818(*a1, *a2);
}

uint64_t sub_24255EC38()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24255ECAC()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24255ECFC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24255ED6C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24255EDC8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1937335659;
  if (*v1)
    v2 = 0x7365756C6176;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24255EDFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7365756C6176;
  else
    return 1937335659;
}

uint64_t sub_24255EE2C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24255EE8C()
{
  sub_24255FB8C();
  return sub_2425A0344();
}

uint64_t sub_24255EEB4()
{
  sub_24255FB8C();
  return sub_2425A0350();
}

uint64_t sub_24255EEDC(_QWORD *a1)
{
  swift_allocObject();
  return sub_24255EF24(a1);
}

uint64_t sub_24255EF24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v11[5];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD268);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24255FB8C();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for MorpheusDict();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = sub_242591C10((uint64_t)v8, 0);
    *(_QWORD *)(v1 + 48) = sub_242591C10((uint64_t)v8, 1);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v11);
    v3 = sub_24259BC74(v11);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24255F0F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = v1;
  swift_retain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_24255F910(v5, v3);
  swift_release();
  result = swift_bridgeObjectRelease();
  if (!v2)
  {
    swift_retain();
    v8 = swift_bridgeObjectRetain();
    v9 = sub_24255F5CC(v8, v3);
    swift_bridgeObjectRelease();
    swift_release();
    v12 = sub_2425582A8(MEMORY[0x24BEE4AF8]);
    MEMORY[0x24BDAC7A8](v12);
    sub_24255F4AC(v6, v9, (void (*)(_BYTE *, _BYTE *))sub_24255F840);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE48);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = MEMORY[0x24BEE4B00];
    swift_beginAccess();
    *(_QWORD *)(v11 + 16) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)a1 = v11;
    *(_BYTE *)(a1 + 32) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24255F298(uint64_t a1, uint64_t a2)
{
  uint64_t v4[4];
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  sub_24255F848(a1, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    return sub_2425264C4((uint64_t)&v5, &qword_2571FC7A0);
  v8[0] = v5;
  v8[1] = v6;
  v9 = v7;
  sub_24255BA44((uint64_t)v8, (uint64_t)&v5);
  sub_242588900(a2, v4);
  sub_242558040((uint64_t)v4, (uint64_t)&v5);
  return sub_24255BA80((uint64_t)v8);
}

uint64_t sub_24255F324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_24259FF84();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC780);
  MEMORY[0x2426A7958](v1, v2);
  sub_24259FB70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  v3 = swift_bridgeObjectRetain();
  MEMORY[0x2426A7958](v3, v2);
  sub_24259FB70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  return 0x79656B2874636964;
}

uint64_t sub_24255F43C()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24255F458()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MorpheusDict()
{
  return objc_opt_self();
}

uint64_t sub_24255F4AC(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, _BYTE *))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  _BYTE v11[40];
  _BYTE v12[40];
  _BYTE v13[32];
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  v14 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = 0;
    v7 = v14 + 32;
    v8 = a2 + 32;
    while (1)
    {
      result = sub_24255F848(v7, (uint64_t)v11);
      v10 = *(_QWORD *)(a2 + 16);
      if (v6 == v10)
      {
        sub_2425264C4((uint64_t)v11, &qword_2571FC7A0);
        goto LABEL_8;
      }
      if (v6 >= v10)
        break;
      ++v6;
      sub_24255F8CC((uint64_t)v11, (uint64_t)v12, &qword_2571FC7A0);
      sub_242526478(v8, (uint64_t)v13);
      a3(v12, v13);
      sub_2425264C4((uint64_t)v12, &qword_2571FD260);
      v7 += 40;
      v8 += 32;
      if (v5 == v6)
        goto LABEL_8;
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24255F5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  char v21;
  _BYTE v22[32];
  _QWORD v23[5];
  _OWORD v24[2];
  uint64_t v25[5];
  uint64_t v26;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v26 = MEMORY[0x24BEE4AF8];
    sub_242509D28(0, v4, 0);
    v5 = v26;
    v19 = a2 + 24;
    v8 = (uint64_t *)(a1 + 40);
    v18 = a2;
    do
    {
      v9 = *v8;
      v10 = v3;
      ObjectType = swift_getObjectType();
      v12 = MEMORY[0x2426A8918](v19);
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v14(v12, v13, ObjectType, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v23, ObjectType, v9);
      v3 = v10;
      if (v10)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v5;
      }
      sub_24255F890((uint64_t)v23, (uint64_t)v20);
      if (v21 && (sub_242557D30((uint64_t)v20), sub_24255F890((uint64_t)v23, (uint64_t)v20), v21 != 1))
      {
        sub_242557D30((uint64_t)v20);
      }
      else
      {
        sub_24255F8CC((uint64_t)v20, (uint64_t)v22, &qword_2571FC790);
        sub_24255F8CC((uint64_t)v22, (uint64_t)v20, &qword_2571FC790);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
        if ((swift_dynamicCast() & 1) != 0)
          goto LABEL_10;
      }
      memset(v24, 0, sizeof(v24));
LABEL_10:
      sub_242557D30((uint64_t)v23);
      sub_242588D2C((uint64_t)v24, v25);
      sub_2425264C4((uint64_t)v24, &qword_2571FC790);
      swift_unknownObjectRelease();
      v26 = v5;
      v16 = *(_QWORD *)(v5 + 16);
      v15 = *(_QWORD *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_242509D28(v15 > 1, v16 + 1, 1);
        v5 = v26;
      }
      *(_QWORD *)(v5 + 16) = v16 + 1;
      sub_2425264B4(v25, (_OWORD *)(v5 + 32 * v16 + 32));
      v8 += 2;
      --v4;
      a2 = v18;
    }
    while (v4);
  }
  return v5;
}

uint64_t sub_24255F840(uint64_t a1, uint64_t a2)
{
  return sub_24255F298(a1, a2);
}

uint64_t sub_24255F848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24255F890(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for OpResult(a2, a1);
  return a2;
}

uint64_t sub_24255F8CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24255F910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  int64_t v19;
  _BYTE v20[32];
  char v21;
  _BYTE v22[32];
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v27 = MEMORY[0x24BEE4AF8];
    sub_242509D44(0, v4, 0);
    v5 = v27;
    v18 = a2 + 24;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v19 = v4;
      v9 = *i;
      ObjectType = swift_getObjectType();
      v11 = MEMORY[0x2426A8918](v18);
      v12 = a2;
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v14(v11, v13, ObjectType, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v23, ObjectType, v9);
      if (v3)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v5;
      }
      sub_24255F890((uint64_t)v23, (uint64_t)v20);
      if (v21)
        break;
      sub_24255F8CC((uint64_t)v20, (uint64_t)v22, &qword_2571FC790);
      sub_24255F8CC((uint64_t)v22, (uint64_t)v20, &qword_2571FC790);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
      a2 = v12;
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_9;
LABEL_11:
      sub_242557D30((uint64_t)v23);
      swift_unknownObjectRelease();
      v27 = v5;
      v16 = *(_QWORD *)(v5 + 16);
      v15 = *(_QWORD *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_242509D44(v15 > 1, v16 + 1, 1);
        v5 = v27;
      }
      *(_QWORD *)(v5 + 16) = v16 + 1;
      sub_24255F8CC((uint64_t)&v24, v5 + 40 * v16 + 32, &qword_2571FC7A0);
      v4 = v19 - 1;
      if (v19 == 1)
        return v5;
    }
    sub_242557D30((uint64_t)v20);
    sub_24255F890((uint64_t)v23, (uint64_t)v20);
    a2 = v12;
    if (v21 != 1)
    {
      sub_242557D30((uint64_t)v20);
      v24 = 0u;
      v25 = 0u;
      v26 = 0;
      goto LABEL_11;
    }
    sub_24255F8CC((uint64_t)v20, (uint64_t)v22, &qword_2571FC790);
    sub_24255F8CC((uint64_t)v22, (uint64_t)v20, &qword_2571FC790);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_11;
LABEL_9:
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    goto LABEL_11;
  }
  return v5;
}

unint64_t sub_24255FB8C()
{
  unint64_t result;

  result = qword_2571FD270;
  if (!qword_2571FD270)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C627C, &type metadata for MorpheusDict.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD270);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MorpheusDict.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24255FC1C + 4 * byte_2425C6155[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24255FC50 + 4 * byte_2425C6150[v4]))();
}

uint64_t sub_24255FC50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24255FC58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24255FC60);
  return result;
}

uint64_t sub_24255FC6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24255FC74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24255FC78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24255FC80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MorpheusDict.CodingKeys()
{
  return &type metadata for MorpheusDict.CodingKeys;
}

unint64_t sub_24255FCA0()
{
  unint64_t result;

  result = qword_2571FD278;
  if (!qword_2571FD278)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6254, &type metadata for MorpheusDict.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD278);
  }
  return result;
}

unint64_t sub_24255FCE8()
{
  unint64_t result;

  result = qword_2571FD280;
  if (!qword_2571FD280)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C618C, &type metadata for MorpheusDict.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD280);
  }
  return result;
}

unint64_t sub_24255FD30()
{
  unint64_t result;

  result = qword_2571FD288;
  if (!qword_2571FD288)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C61B4, &type metadata for MorpheusDict.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD288);
  }
  return result;
}

uint64_t sub_24255FD74()
{
  return 1;
}

uint64_t sub_24255FD7C()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_24255FDC8()
{
  return sub_24259FB40();
}

uint64_t sub_24255FDDC()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_24255FE24@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_24255FE74(_QWORD *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_24255FE8C()
{
  return 0x65756C6176;
}

uint64_t sub_24255FEA0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_24255FEF4()
{
  sub_242560458();
  return sub_2425A0344();
}

uint64_t sub_24255FF1C()
{
  sub_242560458();
  return sub_2425A0350();
}

uint64_t sub_24255FF44(_QWORD *a1)
{
  swift_allocObject();
  return sub_24255FF8C(a1);
}

uint64_t sub_24255FF8C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v12[5];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD398);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242560458();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_unknownObjectRelease();
    type metadata accessor for Return();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = sub_24258B930((uint64_t)v8);
    *(_QWORD *)(v1 + 48) = v9;
    swift_release();
    swift_unknownObjectRelease();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

void sub_242560124(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  _QWORD v18[4];
  char v19;

  v3 = v2;
  if (!v1[5])
    goto LABEL_5;
  v5 = v1[6];
  ObjectType = swift_getObjectType();
  v7 = MEMORY[0x2426A8918](v1 + 3);
  v8 = v1[4];
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  if (!v1[5])
  {
LABEL_5:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
LABEL_6:
    *(_BYTE *)(a1 + 32) = 1;
    return;
  }
  v10 = v1[6];
  v11 = swift_getObjectType();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  v12(v18, v11, v10);
  if (v3)
  {
    swift_unknownObjectRelease();
    return;
  }
  if (!v19 || v19 == 1)
  {
    swift_unknownObjectRelease();
    sub_24255BAB4((uint64_t)v18, a1);
    goto LABEL_6;
  }
  if (qword_2571FC5C8 != -1)
    swift_once();
  v13 = sub_24259F930();
  __swift_project_value_buffer(v13, (uint64_t)qword_2571FFB10);
  swift_retain();
  v14 = sub_24259F918();
  v15 = sub_24259FE70();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v16 = 134217984;
    sub_24259FE94();
    swift_release();
    _os_log_impl(&dword_2422E0000, v14, v15, "Return> Invalid return value. line %ld", v16, 0xCu);
    MEMORY[0x2426A88B8](v16, -1, -1);

  }
  else
  {

    swift_release();
  }
  sub_242554B60();
  swift_allocError();
  *v17 = 39;
  swift_willThrow();
  swift_unknownObjectRelease();
  sub_242557D30((uint64_t)v18);
}

uint64_t sub_242560380()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_getObjectType();
    sub_2425A01E8();
  }
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return 0x206E7275746572;
}

uint64_t sub_242560404()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_24256040C()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Return()
{
  return objc_opt_self();
}

unint64_t sub_242560458()
{
  unint64_t result;

  result = qword_2571FD3A0;
  if (!qword_2571FD3A0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C63F4, &type metadata for Return.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD3A0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Return.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for Return.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_242560530 + 4 * byte_2425C62D8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_242560550 + 4 * byte_2425C62DD[v4]))();
}

_BYTE *sub_242560530(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_242560550(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_242560558(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_242560560(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_242560568(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_242560570(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_24256057C()
{
  return 0;
}

ValueMetadata *type metadata accessor for Return.CodingKeys()
{
  return &type metadata for Return.CodingKeys;
}

unint64_t sub_242560598()
{
  unint64_t result;

  result = qword_2571FD3A8;
  if (!qword_2571FD3A8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C63CC, &type metadata for Return.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD3A8);
  }
  return result;
}

unint64_t sub_2425605E0()
{
  unint64_t result;

  result = qword_2571FD3B0;
  if (!qword_2571FD3B0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6304, &type metadata for Return.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD3B0);
  }
  return result;
}

unint64_t sub_242560628()
{
  unint64_t result;

  result = qword_2571FD3B8;
  if (!qword_2571FD3B8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C632C, &type metadata for Return.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD3B8);
  }
  return result;
}

double sub_24256066C@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 2;
  return result;
}

uint64_t sub_242560680()
{
  return 0x65756E69746E6F63;
}

uint64_t sub_242560698(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  swift_allocObject();
  sub_24251DE5C(a1, (uint64_t)v4);
  v2 = sub_24259BC74(v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t sub_24256070C()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Continue()
{
  return objc_opt_self();
}

uint64_t sub_242560750(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255D4C0(*a1, *a2);
}

uint64_t sub_24256075C()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425607EC()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242560858()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425608E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242561B6C();
  *a1 = result;
  return result;
}

void sub_242560910(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x65756C6176;
  if (v2 != 1)
  {
    v5 = 7894115;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6563696C73;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_242560960()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65756C6176;
  if (*v0 != 1)
    v1 = 7894115;
  if (*v0)
    return v1;
  else
    return 0x6563696C73;
}

uint64_t sub_2425609AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242561B6C();
  *a1 = result;
  return result;
}

uint64_t sub_2425609D0()
{
  sub_242561940();
  return sub_2425A0344();
}

uint64_t sub_2425609F8()
{
  sub_242561940();
  return sub_2425A0350();
}

uint64_t sub_242560A20(_QWORD *a1)
{
  swift_allocObject();
  return sub_242560A68(a1);
}

uint64_t sub_242560A68(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD608);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242561940();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Subscript();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = sub_24258B94C((uint64_t)v8, 0);
    *(_QWORD *)(v1 + 48) = v10;
    *(_QWORD *)(v1 + 56) = sub_24258B94C((uint64_t)v8, 1);
    *(_QWORD *)(v1 + 64) = v11;
    v14 = 2;
    sub_242561984();
    sub_2425A01D0();
    *(_BYTE *)(v1 + 72) = v13[0];
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v13);
    v3 = sub_24259BC74(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_242560CAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(__int128 *__return_ptr, uint64_t, uint64_t);
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  char *v64;
  char v65;
  _BYTE *v66;
  _BYTE v67[32];
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[2];

  v3 = v2;
  v4 = v1;
  v6 = *(_QWORD *)(v1 + 48);
  ObjectType = swift_getObjectType();
  v8 = MEMORY[0x2426A8918](v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  v11 = *(_QWORD *)(v1 + 64);
  v12 = swift_getObjectType();
  v13 = MEMORY[0x2426A8918](v1 + 24);
  v14 = *(_QWORD *)(v1 + 32);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  v15(v13, v14, v12, v11);
  swift_unknownObjectRelease();
  v16 = *(_QWORD *)(v1 + 48);
  v17 = swift_getObjectType();
  v18 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 64);
  swift_unknownObjectRetain();
  v18(&v73, v17, v16);
  if (v3)
    return swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_242591630(&v70);
  sub_242557D30((uint64_t)&v73);
  if (*((_QWORD *)&v71 + 1))
  {
    sub_2425264B4(&v70, v76);
    if (*(_BYTE *)(v1 + 72))
    {
      if (*(_BYTE *)(v1 + 72) != 1)
      {
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        *(_BYTE *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        return result;
      }
      v20 = *(_QWORD *)(v1 + 64);
      v21 = swift_getObjectType();
      v22 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v20 + 64);
      swift_unknownObjectRetain();
      v22(&v68, v21, v20);
      swift_unknownObjectRelease();
      sub_2425916F0((uint64_t)&v70);
      sub_242557D30((uint64_t)&v68);
      if (*((_QWORD *)&v71 + 1))
      {
        sub_24251DEC8(&v70, (uint64_t)&v73);
        *(_QWORD *)(a1 + 24) = &type metadata for Store;
        v23 = swift_allocObject();
        *(_QWORD *)a1 = v23;
        sub_24251DEC8(&v73, v23 + 16);
        result = (uint64_t)sub_2425264B4(v76, (_OWORD *)(v23 + 56));
        *(_BYTE *)(a1 + 32) = 0;
        return result;
      }
      sub_2425264C4((uint64_t)&v70, &qword_2571FD5F0);
      if (qword_2571FC5C8 != -1)
        swift_once();
      v39 = sub_24259F930();
      __swift_project_value_buffer(v39, (uint64_t)qword_2571FFB10);
      swift_retain_n();
      v40 = sub_24259F918();
      v41 = sub_24259FE70();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc();
        v43 = swift_slowAlloc();
        *(_QWORD *)&v73 = v43;
        *(_DWORD *)v42 = 136315394;
        v44 = *(_QWORD *)(v1 + 56);
        swift_getObjectType();
        *(_QWORD *)&v70 = v44;
        v45 = sub_2425A01E8();
        *(_QWORD *)&v70 = sub_24259B370(v45, v46, (uint64_t *)&v73);
        sub_24259FE94();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2048;
        v47 = *(_QWORD *)(v4 + 16);
        swift_release();
        *(_QWORD *)&v70 = v47;
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v40, v41, "Subscript> Value %s is not Storable. lino %ld", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v43, -1, -1);
        MEMORY[0x2426A88B8](v42, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      sub_242554B60();
      swift_allocError();
      v65 = 13;
      goto LABEL_38;
    }
    v33 = *(_QWORD *)(v1 + 64);
    v34 = swift_getObjectType();
    v35 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v33 + 64);
    swift_unknownObjectRetain();
    v35(&v73, v34, v33);
    swift_unknownObjectRelease();
    sub_242591630(&v70);
    sub_242557D30((uint64_t)&v73);
    if (!*((_QWORD *)&v71 + 1))
    {
      sub_2425264C4((uint64_t)&v70, &qword_2571FC790);
      if (qword_2571FC5C8 != -1)
        swift_once();
      v48 = sub_24259F930();
      __swift_project_value_buffer(v48, (uint64_t)qword_2571FFB10);
      swift_retain_n();
      v49 = sub_24259F918();
      v50 = sub_24259FE70();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc();
        v52 = swift_slowAlloc();
        *(_QWORD *)&v73 = v52;
        *(_DWORD *)v51 = 136315394;
        v53 = *(_QWORD *)(v1 + 56);
        swift_getObjectType();
        *(_QWORD *)&v70 = v53;
        v54 = sub_2425A01E8();
        *(_QWORD *)&v70 = sub_24259B370(v54, v55, (uint64_t *)&v73);
        sub_24259FE94();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2048;
        v56 = *(_QWORD *)(v4 + 16);
        swift_release();
        *(_QWORD *)&v70 = v56;
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v49, v50, "Subscript> Invalid value %s. lino %ld", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v52, -1, -1);
        MEMORY[0x2426A88B8](v51, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      sub_242554B60();
      swift_allocError();
      v65 = 25;
LABEL_38:
      *v64 = v65;
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    }
    sub_2425264B4(&v70, &v68);
    sub_242526478((uint64_t)&v68, (uint64_t)v67);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD5F8);
    if (swift_dynamicCast())
    {
      sub_24251DEC8(&v70, (uint64_t)&v73);
      v37 = v74;
      v38 = v75;
      __swift_project_boxed_opaque_existential_1(&v73, v74);
      (*(void (**)(__int128 *__return_ptr, _OWORD *, uint64_t, uint64_t))(v38 + 8))(&v70, v76, v37, v38);
      sub_242588D2C((uint64_t)&v70, (uint64_t *)a1);
      sub_2425264C4((uint64_t)&v70, &qword_2571FC790);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      *(_BYTE *)(a1 + 32) = 0;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    }
    else
    {
      v72 = 0;
      v70 = 0u;
      v71 = 0u;
      sub_2425264C4((uint64_t)&v70, &qword_2571FD600);
      sub_242526478((uint64_t)v76, (uint64_t)&v73);
      if ((swift_dynamicCast() & 1) != 0
        && (__swift_project_boxed_opaque_existential_1(&v68, v69),
            v57 = (void *)sub_2425A0248(),
            v58 = (void *)sub_24259FAD4(),
            swift_bridgeObjectRelease(),
            v59 = objc_msgSend(v57, sel_valueForKey_, v58),
            v58,
            swift_unknownObjectRelease(),
            v59))
      {
        sub_24259FF18();
        swift_unknownObjectRelease();
        sub_2425264B4(&v70, &v73);
        sub_242588900((uint64_t)&v73, (uint64_t *)a1);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        *(_BYTE *)(a1 + 32) = 0;
      }
      else
      {
        if (qword_2571FC5C8 != -1)
          swift_once();
        v60 = sub_24259F930();
        __swift_project_value_buffer(v60, (uint64_t)qword_2571FFB10);
        swift_retain();
        v61 = sub_24259F918();
        v62 = sub_24259FE70();
        if (os_log_type_enabled(v61, v62))
        {
          v63 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v63 = 134217984;
          *(_QWORD *)&v73 = *(_QWORD *)(v4 + 16);
          sub_24259FE94();
          swift_release();
          _os_log_impl(&dword_2422E0000, v61, v62, "Subscript> Not supported Subscript. lino %ld", v63, 0xCu);
          MEMORY[0x2426A88B8](v63, -1, -1);

        }
        else
        {

          swift_release();
        }
        sub_242554B60();
        swift_allocError();
        *v66 = 26;
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      }
    }
  }
  else
  {
    sub_2425264C4((uint64_t)&v70, &qword_2571FC790);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v24 = sub_24259F930();
    __swift_project_value_buffer(v24, (uint64_t)qword_2571FFB10);
    swift_retain_n();
    v25 = sub_24259F918();
    v26 = sub_24259FE70();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      *(_QWORD *)&v73 = v28;
      *(_DWORD *)v27 = 136315394;
      v29 = *(_QWORD *)(v1 + 40);
      swift_getObjectType();
      *(_QWORD *)&v70 = v29;
      v30 = sub_2425A01E8();
      *(_QWORD *)&v70 = sub_24259B370(v30, v31, (uint64_t *)&v73);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2048;
      v32 = *(_QWORD *)(v4 + 16);
      swift_release();
      *(_QWORD *)&v70 = v32;
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v25, v26, "Subscript> Invalid slice %s. lino %ld", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v28, -1, -1);
      MEMORY[0x2426A88B8](v27, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_242554B60();
    swift_allocError();
    *v36 = 24;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_242561800()
{
  uint64_t v1;

  swift_getObjectType();
  v1 = sub_2425A01E8();
  sub_24259FB70();
  swift_getObjectType();
  sub_2425A01E8();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  return v1;
}

uint64_t sub_2425618A4()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_2425618C0()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Subscript()
{
  return objc_opt_self();
}

uint64_t sub_242561914()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

unint64_t sub_242561940()
{
  unint64_t result;

  result = qword_2571FD610;
  if (!qword_2571FD610)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C65A4, &type metadata for Subscript.SubscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD610);
  }
  return result;
}

unint64_t sub_242561984()
{
  unint64_t result;

  result = qword_2571FD618;
  if (!qword_2571FD618)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6084, &type metadata for ExprContext);
    atomic_store(result, (unint64_t *)&qword_2571FD618);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Subscript.SubscriptCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_242561A14 + 4 * byte_2425C6465[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_242561A48 + 4 * byte_2425C6460[v4]))();
}

uint64_t sub_242561A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242561A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242561A58);
  return result;
}

uint64_t sub_242561A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242561A6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_242561A70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242561A78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Subscript.SubscriptCodingKeys()
{
  return &type metadata for Subscript.SubscriptCodingKeys;
}

unint64_t sub_242561A98()
{
  unint64_t result;

  result = qword_2571FD620;
  if (!qword_2571FD620)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C657C, &type metadata for Subscript.SubscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD620);
  }
  return result;
}

unint64_t sub_242561AE0()
{
  unint64_t result;

  result = qword_2571FD628;
  if (!qword_2571FD628)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C64B4, &type metadata for Subscript.SubscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD628);
  }
  return result;
}

unint64_t sub_242561B28()
{
  unint64_t result;

  result = qword_2571FD630;
  if (!qword_2571FD630)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C64DC, &type metadata for Subscript.SubscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD630);
  }
  return result;
}

uint64_t sub_242561B6C()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_242561BB4()
{
  uint64_t v0;

  v0 = sub_24259F930();
  __swift_allocate_value_buffer(v0, qword_2571FFB10);
  __swift_project_value_buffer(v0, (uint64_t)qword_2571FFB10);
  return sub_24259F924();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_242561C6C()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD638);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2425C6600;
  *(_QWORD *)(inited + 32) = 0x746E697270;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v1 = MEMORY[0x24BEE4AF8];
  v2 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
  type metadata accessor for Function();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v1;
  *(_QWORD *)(v3 + 48) = v1;
  *(_QWORD *)(v3 + 56) = v1;
  *(_QWORD *)(v3 + 64) = v1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_QWORD *)(v3 + 104) = sub_2425583E8(v1);
  *(_QWORD *)(v3 + 16) = 0x746E697270;
  *(_QWORD *)(v3 + 24) = 0xE500000000000000;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v1;
  *(_QWORD *)(v3 + 48) = v1;
  *(_QWORD *)(v3 + 56) = v1;
  *(_QWORD *)(v3 + 64) = v1;
  *(_OWORD *)(v3 + 72) = xmmword_2425C6610;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v3 + 104) = v2;
  swift_bridgeObjectRelease();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = sub_2425620B4;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v3 + 112) = sub_242562F18;
  *(_QWORD *)(v3 + 120) = v4;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = 7234924;
  *(_QWORD *)(inited + 64) = 0xE300000000000000;
  v5 = sub_2425583E8(v1);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 32) = v1;
  *(_QWORD *)(v6 + 40) = v1;
  *(_QWORD *)(v6 + 48) = v1;
  *(_QWORD *)(v6 + 56) = v1;
  *(_QWORD *)(v6 + 64) = v1;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = sub_2425583E8(v1);
  *(_QWORD *)(v6 + 16) = 7234924;
  *(_QWORD *)(v6 + 24) = 0xE300000000000000;
  *(_QWORD *)(v6 + 32) = v1;
  *(_QWORD *)(v6 + 40) = &unk_2513530D0;
  *(_QWORD *)(v6 + 48) = v1;
  *(_QWORD *)(v6 + 56) = v1;
  *(_QWORD *)(v6 + 64) = v1;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v6 + 104) = v5;
  swift_bridgeObjectRelease();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_2425624F8;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v6 + 112) = sub_242562F84;
  *(_QWORD *)(v6 + 120) = v7;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0x656C707574;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v8 = sub_2425583E8(v1);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 32) = v1;
  *(_QWORD *)(v9 + 40) = v1;
  *(_QWORD *)(v9 + 48) = v1;
  *(_QWORD *)(v9 + 56) = v1;
  *(_QWORD *)(v9 + 64) = v1;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_QWORD *)(v9 + 104) = sub_2425583E8(v1);
  *(_QWORD *)(v9 + 16) = 0x656C707574;
  *(_QWORD *)(v9 + 24) = 0xE500000000000000;
  *(_QWORD *)(v9 + 32) = v1;
  *(_QWORD *)(v9 + 40) = &unk_251353100;
  *(_QWORD *)(v9 + 48) = v1;
  *(_QWORD *)(v9 + 56) = v1;
  *(_QWORD *)(v9 + 64) = v1;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v9 + 104) = v8;
  swift_bridgeObjectRelease();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_2425627B0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v9 + 112) = sub_242562F84;
  *(_QWORD *)(v9 + 120) = v10;
  *(_QWORD *)(inited + 96) = v9;
  *(_QWORD *)(inited + 104) = 0x6563696C73;
  *(_QWORD *)(inited + 112) = 0xE500000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC788);
  v11 = (_OWORD *)swift_allocObject();
  v11[1] = xmmword_2425C4B90;
  v11[2] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v12 = sub_2425583E8(v1);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 32) = v1;
  *(_QWORD *)(v13 + 40) = v1;
  *(_QWORD *)(v13 + 48) = v1;
  *(_QWORD *)(v13 + 56) = v1;
  *(_QWORD *)(v13 + 64) = v1;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_QWORD *)(v13 + 104) = sub_2425583E8(v1);
  *(_QWORD *)(v13 + 16) = 0x6563696C73;
  *(_QWORD *)(v13 + 24) = 0xE500000000000000;
  *(_QWORD *)(v13 + 32) = v1;
  *(_QWORD *)(v13 + 40) = &unk_251353130;
  *(_QWORD *)(v13 + 48) = v1;
  *(_QWORD *)(v13 + 56) = v1;
  *(_QWORD *)(v13 + 64) = v11;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v13 + 104) = v12;
  swift_bridgeObjectRelease();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_2425629CC;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v13 + 112) = sub_242562F84;
  *(_QWORD *)(v13 + 120) = v14;
  *(_QWORD *)(inited + 120) = v13;
  result = sub_242558650(inited);
  qword_2571FFB28 = result;
  return result;
}

void sub_2425620B4(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;

  if (*(_QWORD *)(a1 + 16)
    && (v4 = sub_24255A05C(0x7365756C6176, 0xE600000000000000), (v5 & 1) != 0)
    && (sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v30),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC900),
        (swift_dynamicCast() & 1) != 0))
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v6 = sub_24259F930();
    __swift_project_value_buffer(v6, (uint64_t)qword_2571FFB10);
    swift_bridgeObjectRetain();
    v7 = sub_24259F918();
    v8 = sub_24259FE64();
    if (os_log_type_enabled(v7, v8))
    {
      v26 = v8;
      v9 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v31 = v25;
      v27 = v9;
      *(_DWORD *)v9 = 136315138;
      v10 = *(_QWORD *)(v28 + 16);
      v11 = MEMORY[0x24BEE4AF8];
      if (v10)
      {
        v24 = v7;
        v29 = MEMORY[0x24BEE4AF8];
        sub_242509BCC(0, v10, 0);
        v12 = v28 + 32;
        v11 = v29;
        do
        {
          sub_242526478(v12, (uint64_t)v30);
          sub_2425A008C();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_242509BCC(0, *(_QWORD *)(v11 + 16) + 1, 1);
            v11 = v29;
          }
          v14 = *(_QWORD *)(v11 + 16);
          v13 = *(_QWORD *)(v11 + 24);
          if (v14 >= v13 >> 1)
          {
            sub_242509BCC(v13 > 1, v14 + 1, 1);
            v11 = v29;
          }
          *(_QWORD *)(v11 + 16) = v14 + 1;
          v15 = v11 + 16 * v14;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = 0xE000000000000000;
          v12 += 32;
          --v10;
        }
        while (v10);
        v7 = v24;
      }
      v30[0] = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC9E0);
      sub_24254FA58();
      v21 = sub_24259FA38();
      v23 = v22;
      swift_bridgeObjectRelease();
      v30[0] = sub_24259B370(v21, v23, &v31);
      sub_24259FE94();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2422E0000, v7, v26, "%s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v25, -1, -1);
      MEMORY[0x2426A88B8](v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *a2 = 0u;
    a2[1] = 0u;
  }
  else
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v16 = sub_24259F930();
    __swift_project_value_buffer(v16, (uint64_t)qword_2571FFB10);
    v17 = sub_24259F918();
    v18 = sub_24259FE70();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_2422E0000, v17, v18, "print> Invalid arg values", v19, 2u);
      MEMORY[0x2426A88B8](v19, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v20 = 44;
    swift_willThrow();
  }
}

uint64_t sub_2425624F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _BYTE *v16;
  _BYTE v17[32];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_24255A05C(6972015, 0xE300000000000000), (v5 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD660);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v19 + 1))
      {
        sub_24251DEC8(&v18, (uint64_t)v21);
        __swift_project_boxed_opaque_existential_1(v21, v22);
        v6 = sub_24259FDE0();
LABEL_12:
        a2[3] = MEMORY[0x24BEE1768];
        *a2 = v6;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
    }
    else
    {
      v20 = 0;
      v18 = 0u;
      v19 = 0u;
    }
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
  }
  sub_2425264C4((uint64_t)&v18, &qword_2571FD648);
  if (*(_QWORD *)(a1 + 16) && (v7 = sub_24255A05C(6972015, 0xE300000000000000), (v8 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD658);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v19 + 1))
      {
        sub_24251DEC8(&v18, (uint64_t)v21);
        v9 = v22;
        v10 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
        goto LABEL_12;
      }
    }
    else
    {
      v20 = 0;
      v18 = 0u;
      v19 = 0u;
    }
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
  }
  sub_2425264C4((uint64_t)&v18, &qword_2571FD650);
  if (qword_2571FC5C8 != -1)
    swift_once();
  v12 = sub_24259F930();
  __swift_project_value_buffer(v12, (uint64_t)qword_2571FFB10);
  v13 = sub_24259F918();
  v14 = sub_24259FE70();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_2422E0000, v13, v14, "len> Invalid arg obj", v15, 2u);
    MEMORY[0x2426A88B8](v15, -1, -1);
  }

  sub_242554B60();
  swift_allocError();
  *v16 = 45;
  return swift_willThrow();
}

uint64_t sub_2425627B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _BYTE *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_24255A05C(0x656C626172657469, 0xE800000000000000), (v5 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v19 + 1))
      {
        sub_24251DEC8(&v18, (uint64_t)v21);
        v6 = v22;
        v7 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
        v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 16) = v8;
        a2[3] = v9;
        *a2 = v10;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
    }
    else
    {
      v20 = 0;
      v18 = 0u;
      v19 = 0u;
    }
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
  }
  sub_2425264C4((uint64_t)&v18, &qword_2571FCCA0);
  if (qword_2571FC5C8 != -1)
    swift_once();
  v12 = sub_24259F930();
  __swift_project_value_buffer(v12, (uint64_t)qword_2571FFB10);
  v13 = sub_24259F918();
  v14 = sub_24259FE70();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_2422E0000, v13, v14, "tuple> Invalid arg iterable", v15, 2u);
    MEMORY[0x2426A88B8](v15, -1, -1);
  }

  sub_242554B60();
  swift_allocError();
  *v16 = 47;
  return swift_willThrow();
}

uint64_t sub_2425629CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_24255A05C(0x7472617473, 0xE500000000000000), (v5 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v46);
    sub_2425264B4(&v46, v49);
    if (*(_QWORD *)(a1 + 16) > 1uLL)
    {
      sub_242526478((uint64_t)v49, (uint64_t)&v43);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD640);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v48 = 0;
        v46 = 0u;
        v47 = 0u;
      }
      if (*(_QWORD *)(a1 + 16) && (v6 = sub_24255A05C(1886352499, 0xE400000000000000), (v7 & 1) != 0))
      {
        sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v40);
        if ((swift_dynamicCast() & 1) == 0)
        {
          v45 = 0;
          v43 = 0u;
          v44 = 0u;
        }
      }
      else
      {
        v43 = 0u;
        v44 = 0u;
        v45 = 0;
      }
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      if (*(_QWORD *)(a1 + 16) == 3)
      {
        v17 = sub_24255A05C(1885697139, 0xE400000000000000);
        if ((v18 & 1) != 0)
        {
          sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v36);
          if ((swift_dynamicCast() & 1) == 0)
          {
            v39 = 0;
            v37 = 0u;
            v38 = 0u;
          }
        }
        else
        {
          v37 = 0u;
          v38 = 0u;
          v39 = 0;
        }
        sub_242562F30((uint64_t)&v37, (uint64_t)&v40);
      }
      v19 = *((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        sub_24251DE5C((uint64_t)&v46, (uint64_t)&v37);
        v20 = *((_QWORD *)&v38 + 1);
        v21 = v39;
        __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
        v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
        v23 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
          goto LABEL_27;
      }
      else
      {
        v22 = 0;
        v23 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
LABEL_27:
          sub_24251DE5C((uint64_t)&v40, (uint64_t)&v37);
          v24 = *((_QWORD *)&v38 + 1);
          v25 = v39;
          __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
          v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
          v27 = *((_QWORD *)&v44 + 1);
          if (*((_QWORD *)&v44 + 1))
          {
LABEL_28:
            sub_24251DE5C((uint64_t)&v43, (uint64_t)&v37);
            v50 = v23;
            v28 = v26;
            v29 = v19;
            v30 = v22;
            v31 = *((_QWORD *)&v38 + 1);
            v32 = v39;
            __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
            v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
            v34 = v32;
            v22 = v30;
            v19 = v29;
            v26 = v28;
            v23 = v50;
            v35 = v33(v31, v34);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
LABEL_32:
            *(_QWORD *)(a2 + 24) = &type metadata for SliceStruct;
            *(_DWORD *)a2 = v22;
            *(_BYTE *)(a2 + 4) = v19 == 0;
            *(_DWORD *)(a2 + 8) = v26;
            *(_BYTE *)(a2 + 12) = v23 == 0;
            *(_DWORD *)(a2 + 16) = v35;
            *(_BYTE *)(a2 + 20) = v27 == 0;
            sub_2425264C4((uint64_t)&v40, &qword_2571FCE00);
            sub_2425264C4((uint64_t)&v43, &qword_2571FCE00);
            return sub_2425264C4((uint64_t)&v46, &qword_2571FCE00);
          }
LABEL_31:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
          v35 = 0;
          goto LABEL_32;
        }
      }
      v26 = 0;
      v27 = *((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
        goto LABEL_28;
      goto LABEL_31;
    }
    sub_242526478((uint64_t)v49, (uint64_t)&v40);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD640);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(&v43, (uint64_t)&v46);
      v14 = *((_QWORD *)&v47 + 1);
      v15 = v48;
      __swift_project_boxed_opaque_existential_1(&v46, *((uint64_t *)&v47 + 1));
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      *(_QWORD *)(a2 + 24) = &type metadata for SliceStruct;
      *(_DWORD *)a2 = v16;
      *(_BYTE *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 12) = 1;
      *(_DWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 20) = 1;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    }
    else
    {
      v45 = 0;
      v43 = 0u;
      v44 = 0u;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      result = sub_2425264C4((uint64_t)&v43, &qword_2571FCE00);
      *(_QWORD *)(a2 + 24) = &type metadata for SliceStruct;
      *(_DWORD *)a2 = 0;
      *(_BYTE *)(a2 + 4) = 1;
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 12) = 1;
      *(_DWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 20) = 1;
    }
  }
  else
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v8 = sub_24259F930();
    __swift_project_value_buffer(v8, (uint64_t)qword_2571FFB10);
    v9 = sub_24259F918();
    v10 = sub_24259FE70();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_2422E0000, v9, v10, "slice> Invalid arg start", v11, 2u);
      MEMORY[0x2426A88B8](v11, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v12 = 46;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_242562EF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_242562F18(uint64_t a1)
{
  uint64_t v1;

  return sub_242565F14(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_242562F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_242562F84(uint64_t a1)
{
  return sub_242562F18(a1);
}

uint64_t Int.divide(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;

  if (a2 == (int)a2)
  {
    v2 = result;
    result = mlx_array_from_int(a2);
    v3 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v3;
      sub_242588564(3, inited, v2);
      swift_setDeallocating();
      return mlx_free(v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_242563058(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = *v1;
  if (*v1 == (int)*v1)
  {
    result = mlx_array_from_int(result);
    v4 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v4;
      sub_242588564(3, inited, a1);
      swift_setDeallocating();
      return mlx_free(v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Int32.divide(_:)(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(3, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2425631CC(uint64_t a1)
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(3, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t UInt32.divide(_:)(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(3, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_24256336C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242563374);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24256338C(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = *v1;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(3, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_24256347C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242563484);
  }
  _Unwind_Resume(a1);
}

uint64_t Float.divide(_:)(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(3, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24256354C(uint64_t a1)
{
  float *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(3, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Double.divide(_:)(uint64_t a1, double a2)
{
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = a2;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(3, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2425636B4(uint64_t a1)
{
  double *v1;
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = *v1;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(3, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.divide(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v5 = *v2;
  v12 = 7;
  result = (uint64_t)sub_24256BFA4(a1, &v12);
  if (!v3)
  {
    v7 = result;
    result = (uint64_t)mlx_default_device();
    v8 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v9 = result;
      if (result)
      {
        mlx_free(v8);
        result = (uint64_t)mlx_divide(v2[2], *(_QWORD *)(v7 + 16), v9);
        v10 = result;
        if (result)
        {
          mlx_free(v9);
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = v10;
          a2[3] = v5;
          result = swift_release();
          *a2 = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_242563850@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLXArray.divide(_:)(a1, a2);
}

uint64_t dispatch thunk of Divisible.divide(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_242563888(char *a1, char *a2)
{
  return sub_24255DAC0(*a1, *a2);
}

uint64_t sub_242563894()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242563908()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242563958()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425639C8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_242563A24(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 28783;
  if (*v1)
    v2 = 0x646E617265706FLL;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_242563A58()
{
  _BYTE *v0;

  if (*v0)
    return 0x646E617265706FLL;
  else
    return 28783;
}

uint64_t sub_242563A88@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_242563AE8()
{
  sub_242564894();
  return sub_2425A0344();
}

uint64_t sub_242563B10()
{
  sub_242564894();
  return sub_2425A0350();
}

uint64_t sub_242563B38(_QWORD *a1)
{
  swift_allocObject();
  return sub_242563B80(a1);
}

uint64_t sub_242563B80(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD798);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242564894();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Unary();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v13[0]) = 0;
    v1[7] = sub_2425A01A0();
    v1[8] = v10;
    v1[5] = sub_24258D0D0((uint64_t)v8, 1);
    v1[6] = v11;
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v13);
    v3 = sub_24259BC74(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_242563D5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;

  v3 = v2;
  v4 = v1;
  v6 = v1[6];
  ObjectType = swift_getObjectType();
  v8 = MEMORY[0x2426A8918](v1 + 3);
  v9 = v1[4];
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v11 = sub_24256480C();
  switch(v11)
  {
    case 4:
      if (qword_2571FC5C8 != -1)
        swift_once();
      v22 = sub_24259F930();
      __swift_project_value_buffer(v22, (uint64_t)qword_2571FFB10);
      swift_retain();
      v23 = sub_24259F918();
      v24 = sub_24259FE70();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc();
        v26 = swift_slowAlloc();
        v63[0] = v26;
        *(_DWORD *)v25 = 136315394;
        v27 = v4[7];
        v28 = v4[8];
        swift_bridgeObjectRetain();
        *(_QWORD *)&v60 = sub_24259B370(v27, v28, v63);
        sub_24259FE94();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2048;
        *(_QWORD *)&v60 = v4[2];
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v23, v24, "Unary> Invalid unary operator %s. lino %ld", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v26, -1, -1);
        MEMORY[0x2426A88B8](v25, -1, -1);

      }
      else
      {

        swift_release();
      }
      sub_242554B60();
      swift_allocError();
      v49 = 27;
      break;
    case 2:
      v29 = v1[6];
      v30 = swift_getObjectType();
      v31 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 64);
      swift_unknownObjectRetain();
      v31(v63, v30, v29);
      result = swift_unknownObjectRelease();
      if (v3)
        return result;
      v32 = sub_2425917DC();
      result = sub_242557D30((uint64_t)v63);
      if (v32 != 2)
      {
        *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE1328];
        *(_BYTE *)a1 = (v32 & 1) == 0;
        *(_BYTE *)(a1 + 32) = 0;
        return result;
      }
      if (qword_2571FC5C8 != -1)
        swift_once();
      v33 = sub_24259F930();
      __swift_project_value_buffer(v33, (uint64_t)qword_2571FFB10);
      swift_retain_n();
      v34 = sub_24259F918();
      v35 = sub_24259FE70();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc();
        v37 = swift_slowAlloc();
        v63[0] = v37;
        *(_DWORD *)v36 = 136315394;
        swift_getObjectType();
        v38 = sub_2425A01E8();
        *(_QWORD *)&v60 = sub_24259B370(v38, v39, v63);
        sub_24259FE94();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2048;
        v40 = v4[2];
        swift_release();
        *(_QWORD *)&v60 = v40;
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v34, v35, "Unary> Operand %s is not Bool. lino %ld", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v37, -1, -1);
        MEMORY[0x2426A88B8](v36, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      sub_242554B60();
      swift_allocError();
      v49 = 29;
      break;
    case 1:
      v12 = v1[6];
      v13 = swift_getObjectType();
      v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 64);
      swift_unknownObjectRetain();
      v14(v59, v13, v12);
      result = swift_unknownObjectRelease();
      if (v3)
        return result;
      sub_242591898((uint64_t)&v60);
      sub_242557D30((uint64_t)v59);
      if (v61)
      {
        sub_24251DEC8(&v60, (uint64_t)v63);
        v16 = v64;
        v17 = v65;
        __swift_project_boxed_opaque_existential_1(v63, v64);
        v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
        v61 = v16;
        v62 = v17;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v60);
        v18(v16, v17);
        v19 = v61;
        v20 = __swift_project_boxed_opaque_existential_1(&v60, v61);
        *(_QWORD *)(a1 + 24) = v19;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a1);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(boxed_opaque_existential_0, v20, v19);
        *(_BYTE *)(a1 + 32) = 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      }
      sub_242564854((uint64_t)&v60);
      if (qword_2571FC5C8 != -1)
        swift_once();
      v50 = sub_24259F930();
      __swift_project_value_buffer(v50, (uint64_t)qword_2571FFB10);
      swift_retain_n();
      v51 = sub_24259F918();
      v52 = sub_24259FE70();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = swift_slowAlloc();
        v54 = swift_slowAlloc();
        v63[0] = v54;
        *(_DWORD *)v53 = 136315394;
        v55 = v1[5];
        swift_getObjectType();
        *(_QWORD *)&v60 = v55;
        v56 = sub_2425A01E8();
        *(_QWORD *)&v60 = sub_24259B370(v56, v57, v63);
        sub_24259FE94();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v53 + 12) = 2048;
        v58 = v4[2];
        swift_release();
        *(_QWORD *)&v60 = v58;
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v51, v52, "Unary> Operand %s is not Negationable. lino %ld", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v54, -1, -1);
        MEMORY[0x2426A88B8](v53, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      sub_242554B60();
      swift_allocError();
      v49 = 28;
      break;
    default:
      if (qword_2571FC5C8 != -1)
        swift_once();
      v41 = sub_24259F930();
      __swift_project_value_buffer(v41, (uint64_t)qword_2571FFB10);
      swift_retain();
      v42 = sub_24259F918();
      v43 = sub_24259FE70();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc();
        v45 = swift_slowAlloc();
        v63[0] = v45;
        *(_DWORD *)v44 = 136315394;
        v46 = v4[7];
        v47 = v4[8];
        swift_bridgeObjectRetain();
        *(_QWORD *)&v60 = sub_24259B370(v46, v47, v63);
        sub_24259FE94();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2048;
        *(_QWORD *)&v60 = v4[2];
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v42, v43, "Unary> Unary operator %s not supported yet. lino %ld", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v45, -1, -1);
        MEMORY[0x2426A88B8](v44, -1, -1);

      }
      else
      {

        swift_release();
      }
      sub_242554B60();
      swift_allocError();
      v49 = 30;
      break;
  }
  *v48 = v49;
  return swift_willThrow();
}

void sub_242564684()
{
  char *v0;

  swift_bridgeObjectRetain();
  v0 = (char *)&loc_2425646D8 + *((int *)qword_242564788 + sub_24256480C());
  __asm { BR              X10 }
}

uint64_t sub_2425646E8()
{
  uint64_t v1;

  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_getObjectType();
  swift_unknownObjectRetain();
  sub_24259FB1C();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24256479C()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2425647B8()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Unary()
{
  return objc_opt_self();
}

uint64_t sub_24256480C()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_242564854(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD790);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_242564894()
{
  unint64_t result;

  result = qword_2571FD7A0;
  if (!qword_2571FD7A0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C67BC, &type metadata for Unary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD7A0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Unary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_242564924 + 4 * byte_2425C669D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_242564958 + 4 * byte_2425C6698[v4]))();
}

uint64_t sub_242564958(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242564960(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242564968);
  return result;
}

uint64_t sub_242564974(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24256497CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_242564980(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242564988(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Unary.CodingKeys()
{
  return &type metadata for Unary.CodingKeys;
}

unint64_t sub_2425649A8()
{
  unint64_t result;

  result = qword_2571FD7A8;
  if (!qword_2571FD7A8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6794, &type metadata for Unary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD7A8);
  }
  return result;
}

unint64_t sub_2425649F0()
{
  unint64_t result;

  result = qword_2571FD7B0;
  if (!qword_2571FD7B0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C66CC, &type metadata for Unary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD7B0);
  }
  return result;
}

unint64_t sub_242564A38()
{
  unint64_t result;

  result = qword_2571FD7B8;
  if (!qword_2571FD7B8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C66F4, &type metadata for Unary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FD7B8);
  }
  return result;
}

uint64_t dispatch thunk of Storable.store(key:obj:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for Arguments(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for Store(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for Store(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for Store(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_0(a1 + 5, a2 + 5);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Store(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for Store(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Store(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Store()
{
  return &type metadata for Store;
}

unint64_t sub_242564E0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD080);
    v2 = (_QWORD *)sub_2425A0158();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v36;
  v7 = &v38;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_2425213C4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v5 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = v18 | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v34 = *v24;
    v35 = v24[1];
    type metadata accessor for Function();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_dynamicCast();
    sub_2425264B4(v6, v7);
    sub_2425264B4(v7, v39);
    sub_2425264B4(v39, &v37);
    result = sub_24255A05C(v34, v35);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = v5;
      v11 = v7;
      v12 = v6;
      v13 = v1;
      v14 = i;
      v15 = v10;
      v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v16 = v34;
      v16[1] = v35;
      v10 = v15;
      i = v14;
      v1 = v13;
      v6 = v12;
      v7 = v11;
      v5 = v33;
      v17 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      result = (unint64_t)sub_2425264B4(&v37, v17);
      if (!v33)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v34;
    v27[1] = v35;
    result = (unint64_t)sub_2425264B4(&v37, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v18 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_242565160(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[3];
  _OWORD v45[2];
  __int128 v46;
  _OWORD v47[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD080);
    v2 = (_QWORD *)sub_2425A0158();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v35 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v34 = (unint64_t)(63 - v3) >> 6;
  v6 = v47;
  v7 = v45;
  v8 = &v41;
  v9 = &v43;
  result = swift_bridgeObjectRetain();
  v36 = 0;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v19 = v36 + 1;
  if (__OFADD__(v36, 1))
    goto LABEL_35;
  if (v19 >= v34)
    goto LABEL_32;
  v20 = *(_QWORD *)(v35 + 8 * v19);
  v21 = v36 + 1;
  if (!v20)
  {
    v21 = v36 + 2;
    if (v36 + 2 >= v34)
      goto LABEL_32;
    v20 = *(_QWORD *)(v35 + 8 * v21);
    if (!v20)
    {
      v21 = v36 + 3;
      if (v36 + 3 >= v34)
        goto LABEL_32;
      v20 = *(_QWORD *)(v35 + 8 * v21);
      if (!v20)
      {
        v21 = v36 + 4;
        if (v36 + 4 >= v34)
          goto LABEL_32;
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            v20 = *(_QWORD *)(v35 + 8 * v22);
            if (v20)
            {
              v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v21 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_36;
              if (v21 >= v34)
                break;
              v20 = *(_QWORD *)(v35 + 8 * v21);
              ++v22;
              if (v20)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_2425213C4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v36 = v21;
  v37 = (v20 - 1) & v20;
  for (i = __clz(__rbit64(v20)) + (v21 << 6); ; i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v25 = *v23;
    v24 = v23[1];
    sub_24255BB44(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v6, &qword_2571FC790);
    *(_QWORD *)&v46 = v25;
    *((_QWORD *)&v46 + 1) = v24;
    v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    v39 = v25;
    v40 = v24;
    sub_24255BAB4((uint64_t)v7, (uint64_t)v38);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    swift_dynamicCast();
    v26 = v39;
    v27 = v40;
    sub_2425264B4(v8, v9);
    sub_2425264B4(v9, v44);
    sub_2425264B4(v44, &v42);
    result = sub_24255A05C(v26, v27);
    v28 = result;
    if ((v29 & 1) != 0)
    {
      v11 = v9;
      v12 = v8;
      v13 = v1;
      v14 = v7;
      v15 = v6;
      v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v16 = v26;
      v16[1] = v27;
      v6 = v15;
      v7 = v14;
      v1 = v13;
      v8 = v12;
      v9 = v11;
      v17 = (_OWORD *)(v2[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      result = (unint64_t)sub_2425264B4(&v42, v17);
      v5 = v37;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v30 = (uint64_t *)(v2[6] + 16 * result);
    *v30 = v26;
    v30[1] = v27;
    result = (unint64_t)sub_2425264B4(&v42, (_OWORD *)(v2[7] + 32 * result));
    v31 = v2[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_34;
    v2[2] = v33;
    v5 = v37;
    if (!v37)
      goto LABEL_11;
LABEL_10:
    v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t Function.__allocating_init(name:arguments:attrs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  Function.init(name:arguments:attrs:body:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t sub_242565588(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  __int128 v10;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE v28[32];
  _OWORD v29[3];
  _BYTE v30[32];
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  _OWORD v34[3];
  uint64_t v35;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return result;
  v5 = result;
  v6 = *(_QWORD *)(a2 + 16);
  v25 = a2 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = (uint64_t *)(v5 + 16 * v3 + 24);
  v26 = v6;
  while (1)
  {
    if (!v6)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v8 = __OFSUB__(v6--, 1);
    if (v8)
      break;
    if (v6 < 0 || v6 >= v26)
      goto LABEL_23;
    v35 = v3;
    v9 = *v7;
    *(_QWORD *)&v33 = *(v7 - 1);
    *((_QWORD *)&v33 + 1) = v9;
    sub_24255BB44(v25 + 32 * v6, (uint64_t)v34, &qword_2571FC790);
    v31 = v33;
    v32[0] = v34[0];
    v32[1] = v34[1];
    v10 = v33;
    v29[2] = v33;
    sub_24255BB44((uint64_t)v32, (uint64_t)v30, &qword_2571FC790);
    sub_24255BB44((uint64_t)v32, (uint64_t)v29, &qword_2571FC790);
    sub_24255BAB4((uint64_t)v29, (uint64_t)v28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = (_QWORD *)*a3;
    v27 = (_QWORD *)*a3;
    v13 = a3;
    *a3 = 0x8000000000000000;
    v15 = sub_24255A05C(v10, *((uint64_t *)&v10 + 1));
    v16 = v12[2];
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      goto LABEL_24;
    v19 = v14;
    if (v12[3] >= v18)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v22 = v27;
        if ((v14 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_24255AEB0();
        v22 = v27;
        if ((v19 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_242599F58(v18, isUniquelyReferenced_nonNull_native);
      v20 = sub_24255A05C(v10, *((uint64_t *)&v10 + 1));
      if ((v19 & 1) != (v21 & 1))
        goto LABEL_26;
      v15 = v20;
      v22 = v27;
      if ((v19 & 1) != 0)
      {
LABEL_3:
        sub_24255BAFC((uint64_t)v28, v22[7] + 32 * v15);
        goto LABEL_4;
      }
    }
    v22[(v15 >> 6) + 8] |= 1 << v15;
    *(_OWORD *)(v22[6] + 16 * v15) = v10;
    sub_24255BAB4((uint64_t)v28, v22[7] + 32 * v15);
    v23 = v22[2];
    v8 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v8)
      goto LABEL_25;
    v22[2] = v24;
    swift_bridgeObjectRetain();
LABEL_4:
    v3 = v35 - 1;
    v7 -= 2;
    a3 = v13;
    *v13 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2425264C4((uint64_t)v30, &qword_2571FC790);
    sub_2425264C4((uint64_t)&v31, &qword_2571FC7D8);
    if (!v3)
      goto LABEL_20;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = sub_2425A0290();
  __break(1u);
  return result;
}

uint64_t sub_242565874(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _BYTE v28[32];
  _QWORD v29[2];
  _QWORD v30[4];
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  _OWORD v36[3];
  _OWORD *v37;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return result;
  v5 = result;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = a2 + 32;
  v37 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = (uint64_t *)(v5 + 40);
  v26 = a3;
  while (1)
  {
    if (!v6)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v9 = *v8;
    *(_QWORD *)&v35 = *(v8 - 1);
    *((_QWORD *)&v35 + 1) = v9;
    sub_24255BB44(v7, (uint64_t)v36, &qword_2571FC790);
    v33 = v35;
    v34[0] = v36[0];
    v34[1] = v36[1];
    v31 = v35;
    sub_24255BB44((uint64_t)v37, (uint64_t)v32, &qword_2571FC790);
    v30[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    v29[0] = swift_allocObject();
    sub_24255BAB4((uint64_t)v32, v29[0] + 16);
    swift_bridgeObjectRetain();
    LOBYTE(v9) = _s8Morpheus0A5UtilsO5isNilySbypFZ_0((uint64_t)v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    if ((v9 & 1) == 0)
      break;
LABEL_5:
    sub_2425264C4((uint64_t)&v33, &qword_2571FC7D8);
    v7 += 32;
    --v6;
    v8 += 2;
    if (!--v3)
      goto LABEL_19;
  }
  v10 = v33;
  v31 = v33;
  v11 = (uint64_t)v37;
  sub_24255BB44((uint64_t)v37, (uint64_t)v32, &qword_2571FC790);
  sub_24255BB44(v11, (uint64_t)v30, &qword_2571FC790);
  sub_24255BAB4((uint64_t)v30, (uint64_t)v28);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *a3;
  v27 = (_QWORD *)*a3;
  *a3 = 0x8000000000000000;
  v15 = sub_24255A05C(v10, *((uint64_t *)&v10 + 1));
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (!__OFADD__(v16, v17))
  {
    v19 = v14;
    if (*(_QWORD *)(v13 + 24) < v18)
    {
      sub_242599F58(v18, isUniquelyReferenced_nonNull_native);
      v20 = sub_24255A05C(v10, *((uint64_t *)&v10 + 1));
      if ((v19 & 1) != (v21 & 1))
        goto LABEL_23;
      v15 = v20;
      v22 = v27;
      if ((v19 & 1) == 0)
        goto LABEL_15;
LABEL_3:
      sub_24255BAFC((uint64_t)v28, v22[7] + 32 * v15);
LABEL_4:
      a3 = v26;
      *v26 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2425264C4((uint64_t)v32, &qword_2571FC790);
      goto LABEL_5;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v27;
      if ((v14 & 1) != 0)
        goto LABEL_3;
    }
    else
    {
      sub_24255AEB0();
      v22 = v27;
      if ((v19 & 1) != 0)
        goto LABEL_3;
    }
LABEL_15:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    *(_OWORD *)(v22[6] + 16 * v15) = v10;
    sub_24255BAB4((uint64_t)v28, v22[7] + 32 * v15);
    v23 = v22[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_22;
    v22[2] = v25;
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = sub_2425A0290();
  __break(1u);
  return result;
}

void __swiftcall Arguments.init(args:posonlyargs:kwonlyargs:kwDefaults:defaults:vaargs:kwargs:)(Morpheus::Arguments *__return_ptr retstr, Swift::OpaquePointer args, Swift::OpaquePointer posonlyargs, Swift::OpaquePointer kwonlyargs, Swift::OpaquePointer kwDefaults, Swift::OpaquePointer defaults, Swift::String_optional vaargs, Swift::String_optional kwargs)
{
  retstr->args = args;
  retstr->posonlyargs = posonlyargs;
  retstr->kwonlyargs = kwonlyargs;
  retstr->kwDefaults = kwDefaults;
  retstr->defaults = defaults;
  retstr->vararg = vaargs;
  retstr->kwarg = kwargs;
}

void sub_242565BCC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  BOOL v14;

  v1 = (_QWORD *)*v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    v3 = v1[4] == 1718379891 && v1[5] == 0xE400000000000000;
    if (v3 || (sub_2425A0254() & 1) != 0)
    {
LABEL_7:
      sub_24252072C(0, 1);
    }
    else if (v2 != 1)
    {
      v7 = v1 + 7;
      v8 = 1;
      while (1)
      {
        v9 = v8 + 1;
        if (__OFADD__(v8, 1))
          break;
        v10 = *(v7 - 1) == 1718379891 && *v7 == 0xE400000000000000;
        if (v10 || (sub_2425A0254() & 1) != 0)
          goto LABEL_7;
        v7 += 2;
        ++v8;
        if (v9 == v2)
          goto LABEL_8;
      }
      __break(1u);
      goto LABEL_37;
    }
  }
LABEL_8:
  v4 = (_QWORD *)v0[1];
  v5 = v4[2];
  if (!v5)
    return;
  v6 = v4[4] == 1718379891 && v4[5] == 0xE400000000000000;
  if (v6 || (sub_2425A0254() & 1) != 0)
  {
LABEL_14:
    sub_24252072C(0, 1);
    return;
  }
  if (v5 != 1)
  {
    v11 = v4 + 7;
    for (i = 1; ; ++i)
    {
      v13 = i + 1;
      if (__OFADD__(i, 1))
        break;
      v14 = *(v11 - 1) == 1718379891 && *v11 == 0xE400000000000000;
      if (v14 || (sub_2425A0254() & 1) != 0)
        goto LABEL_14;
      v11 += 2;
      if (v13 == v5)
        return;
    }
LABEL_37:
    __break(1u);
  }
}

uint64_t Function.init(name:arguments:attrs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  __int128 v19;

  v10 = *(_QWORD *)(a3 + 32);
  v19 = *(_OWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 56);
  v18 = *(_QWORD *)(a3 + 64);
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 40) = v12;
  *(_QWORD *)(v6 + 48) = v12;
  *(_QWORD *)(v6 + 56) = v12;
  *(_QWORD *)(v6 + 64) = v12;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = sub_2425583E8(v12);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 48) = v13;
  *(_QWORD *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 72) = v19;
  *(_QWORD *)(v6 + 88) = v11;
  *(_QWORD *)(v6 + 96) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v6 + 104) = a4;
  swift_bridgeObjectRelease();
  if (a5)
  {
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = a5;
    *(_QWORD *)(v14 + 24) = a6;
    *(_QWORD *)(v6 + 112) = sub_242565FFC;
    *(_QWORD *)(v6 + 120) = v14;
  }
  else
  {
    v15 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v6 + 112) = sub_24255B7E8;
    *(_QWORD *)(v6 + 120) = v15;
    swift_beginAccess();
    swift_weakAssign();
  }
  return v6;
}

uint64_t sub_242565EF0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_242565F14(uint64_t a1, void (*a2)(void))
{
  sub_242565160(a1);
  a2();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242565F70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  sub_242589160(Strong, a1);
  return swift_release();
}

uint64_t sub_242565FD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_242565FFC(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(void);

  v2 = *(void (**)(void))(v1 + 16);
  sub_242565160(a1);
  v2();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242566054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(__int128 *__return_ptr, uint64_t);
  uint64_t v95;
  _BYTE *v96;
  uint64_t result;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v130;
  _QWORD *v132;
  uint64_t v134;
  os_log_type_t v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD v141[4];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;

  v5 = *(_QWORD *)(v3 + 48);
  v4 = *(_QWORD *)(v3 + 56);
  v6 = MEMORY[0x24BEE4AF8];
  v148 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = 0;
    v9 = v4 + 32;
    v134 = v4;
    v10 = (uint64_t *)(v5 + 40);
    while (v8 < *(_QWORD *)(v5 + 16))
    {
      v11 = *(_QWORD *)(v4 + 16);
      if (v8 == v11)
        goto LABEL_14;
      if (v8 >= v11)
        goto LABEL_91;
      v12 = *v10;
      *(_QWORD *)&v142 = *(v10 - 1);
      *((_QWORD *)&v142 + 1) = v12;
      sub_24255BB44(v9, (uint64_t)&v143, &qword_2571FC790);
      v145 = v142;
      v146 = v143;
      v147 = v144;
      sub_24255BB44((uint64_t)&v146, (uint64_t)&v143, &qword_2571FC790);
      v141[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
      v141[0] = swift_allocObject();
      sub_24255BAB4((uint64_t)&v143, v141[0] + 16);
      swift_bridgeObjectRetain();
      LOBYTE(v12) = _s8Morpheus0A5UtilsO5isNilySbypFZ_0((uint64_t)v141);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
      if ((v12 & 1) != 0)
      {
        v142 = v145;
        v143 = v146;
        v144 = v147;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_242509D7C(0, *(_QWORD *)(v6 + 16) + 1, 1);
          v4 = v134;
        }
        v13 = v148;
        v15 = *(_QWORD *)(v148 + 16);
        v14 = *(_QWORD *)(v148 + 24);
        if (v15 >= v14 >> 1)
        {
          sub_242509D7C(v14 > 1, v15 + 1, 1);
          v4 = v134;
          v13 = v148;
        }
        *(_QWORD *)(v13 + 16) = v15 + 1;
        v16 = (_OWORD *)(v13 + 48 * v15);
        v16[2] = v142;
        v16[3] = v143;
        v16[4] = v144;
        v6 = v13;
      }
      else
      {
        sub_2425264C4((uint64_t)&v145, &qword_2571FC7D8);
      }
      ++v8;
      v10 += 2;
      v9 += 32;
      if (v7 == v8)
        goto LABEL_14;
    }
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v6 + 16);
  if (v17)
  {
    v141[0] = MEMORY[0x24BEE4AF8];
    sub_242509BCC(0, v17, 0);
    v18 = v6 + 32;
    do
    {
      sub_24255BB44(v18, (uint64_t)&v145, &qword_2571FC7D8);
      v19 = v145;
      v142 = v145;
      sub_24255BB44((uint64_t)&v146, (uint64_t)&v143, &qword_2571FC790);
      swift_bridgeObjectRetain();
      sub_2425264C4((uint64_t)&v143, &qword_2571FC790);
      sub_2425264C4((uint64_t)&v145, &qword_2571FC7D8);
      v20 = v141[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509BCC(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v141[0];
      }
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_242509BCC(v21 > 1, v22 + 1, 1);
        v20 = v141[0];
      }
      *(_QWORD *)(v20 + 16) = v22 + 1;
      *(_OWORD *)(v20 + 16 * v22 + 32) = v19;
      v18 += 48;
      --v17;
    }
    while (v17);
  }
  swift_release();
  v23 = swift_bridgeObjectRetain();
  v24 = sub_24256757C(v23);
  v25 = swift_bridgeObjectRetain();
  v26 = sub_242568C2C(v25);
  swift_bridgeObjectRelease();
  v27 = sub_24256806C(v24, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v148 = sub_24255851C(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)&v145 = v132[5];
    swift_bridgeObjectRetain();
    v28 = swift_bridgeObjectRetain();
    sub_24251A760(v28);
    v29 = v145;
    v30 = v132[8];
    swift_bridgeObjectRetain();
    sub_242565588(v29, v30, &v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v132[6];
    v32 = v132[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_242565874(v31, v32, &v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = v132[4];
    *(_QWORD *)&v145 = v132[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = sub_24251A760(v33);
    v35 = v145;
    MEMORY[0x24BDAC7A8](v34);
    swift_bridgeObjectRetain();
    sub_242568CC0(v35, a1, (void (*)(uint64_t, uint64_t, _BYTE *))sub_242568DD8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v145 = v132[5];
    swift_bridgeObjectRetain();
    v37 = swift_bridgeObjectRetain();
    sub_24251A760(v37);
    v38 = *(_QWORD *)(v145 + 16);
    swift_bridgeObjectRelease();
    if (v38 >= v36)
      goto LABEL_31;
    v39 = v132[10];
    if (!v39)
    {
      if (qword_2571FC5C8 != -1)
        swift_once();
      v119 = sub_24259F930();
      __swift_project_value_buffer(v119, (uint64_t)qword_2571FFB10);
      swift_retain();
      v120 = sub_24259F918();
      v121 = sub_24259FE70();
      if (os_log_type_enabled(v120, v121))
      {
        v122 = (uint8_t *)swift_slowAlloc();
        v123 = swift_slowAlloc();
        *(_QWORD *)&v145 = v123;
        *(_DWORD *)v122 = 136315138;
        v124 = v132[2];
        v125 = v132[3];
        swift_bridgeObjectRetain();
        *(_QWORD *)&v142 = sub_24259B370(v124, v125, (uint64_t *)&v145);
        sub_24259FE94();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2422E0000, v120, v121, "Function> More positional args passed for function %s", v122, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v123, -1, -1);
        MEMORY[0x2426A88B8](v122, -1, -1);

      }
      else
      {

        swift_release();
      }
      sub_242554B60();
      swift_allocError();
      *v128 = 2;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    v40 = v132[9];
    *(_QWORD *)&v145 = v132[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = swift_bridgeObjectRetain();
    sub_24251A760(v41);
    v42 = *(_QWORD *)(v145 + 16);
    swift_bridgeObjectRelease();
    if (v36 < v42)
    {
      __break(1u);
    }
    else
    {
      sub_2425A0260();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v43 = swift_dynamicCastClass();
      if (!v43)
      {
        swift_bridgeObjectRelease();
        v43 = MEMORY[0x24BEE4AF8];
      }
      v44 = *(_QWORD *)(v43 + 16);
      swift_release();
      if (v44 == v36 - v42)
      {
        v45 = swift_dynamicCastClass();
        swift_bridgeObjectRelease();
        if (!v45)
        {
          swift_bridgeObjectRelease();
          v45 = MEMORY[0x24BEE4AF8];
        }
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease_n();
    v45 = sub_24251CEC4(a1, a1 + 32, v42, (2 * v36) | 1);
LABEL_30:
    swift_bridgeObjectRelease();
    *((_QWORD *)&v146 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC900);
    *(_QWORD *)&v145 = v45;
    sub_24255BAB4((uint64_t)&v145, (uint64_t)&v142);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v141[0] = v148;
    v148 = 0x8000000000000000;
    sub_24255A6F4((uint64_t)&v142, v40, v39, isUniquelyReferenced_nonNull_native);
    v148 = v141[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_31:
    *(_QWORD *)&v145 = v132[4];
    v47 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48 = swift_bridgeObjectRetain();
    sub_24251A760(v48);
    v49 = *(_QWORD *)(v145 + 16);
    if (v49)
    {
      v50 = (uint64_t *)(v145 + 40);
      do
      {
        v52 = *(v50 - 1);
        v51 = *v50;
        if (*(_QWORD *)(v47 + 16))
        {
          swift_bridgeObjectRetain_n();
          v53 = sub_24255A05C(v52, v51);
          if ((v54 & 1) != 0)
          {
            sub_242526478(*(_QWORD *)(v47 + 56) + 32 * v53, (uint64_t)&v142);
          }
          else
          {
            v142 = 0u;
            v143 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v143 + 1))
          {
            sub_2425264B4(&v142, &v145);
            sub_242526478((uint64_t)&v145, (uint64_t)&v142);
            sub_24255BAB4((uint64_t)&v142, (uint64_t)v141);
            swift_bridgeObjectRetain();
            v55 = swift_isUniquelyReferenced_nonNull_native();
            v56 = v148;
            v140 = (_QWORD *)v148;
            v148 = 0x8000000000000000;
            v58 = sub_24255A05C(v52, v51);
            v59 = *(_QWORD *)(v56 + 16);
            v60 = (v57 & 1) == 0;
            v61 = v59 + v60;
            if (__OFADD__(v59, v60))
              goto LABEL_92;
            v62 = v57;
            if (*(_QWORD *)(v56 + 24) >= v61)
            {
              if ((v55 & 1) != 0)
              {
                v65 = v140;
                if ((v57 & 1) == 0)
                  goto LABEL_51;
              }
              else
              {
                sub_24255AEB0();
                v65 = v140;
                if ((v62 & 1) == 0)
                  goto LABEL_51;
              }
            }
            else
            {
              sub_242599F58(v61, v55);
              v63 = sub_24255A05C(v52, v51);
              if ((v62 & 1) != (v64 & 1))
              {
                result = sub_2425A0290();
                __break(1u);
                return result;
              }
              v58 = v63;
              v65 = v140;
              if ((v62 & 1) == 0)
              {
LABEL_51:
                v65[(v58 >> 6) + 8] |= 1 << v58;
                v66 = (uint64_t *)(v65[6] + 16 * v58);
                *v66 = v52;
                v66[1] = v51;
                sub_24255BAB4((uint64_t)v141, v65[7] + 32 * v58);
                v67 = v65[2];
                v68 = __OFADD__(v67, 1);
                v69 = v67 + 1;
                if (v68)
                  goto LABEL_93;
                v65[2] = v69;
                swift_bridgeObjectRetain();
                goto LABEL_53;
              }
            }
            sub_24255BAFC((uint64_t)v141, v65[7] + 32 * v58);
LABEL_53:
            v148 = (unint64_t)v65;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
            goto LABEL_54;
          }
        }
        else
        {
          v142 = 0u;
          v143 = 0u;
          swift_bridgeObjectRetain();
        }
        sub_2425264C4((uint64_t)&v142, &qword_2571FC790);
LABEL_54:
        swift_bridgeObjectRetain();
        v70 = sub_24255A05C(v52, v51);
        v72 = v71;
        swift_bridgeObjectRelease();
        if ((v72 & 1) != 0)
        {
          v73 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v142 = v47;
          if ((v73 & 1) == 0)
          {
            sub_24255ACCC();
            v47 = v142;
          }
          swift_bridgeObjectRelease();
          sub_2425264B4((_OWORD *)(*(_QWORD *)(v47 + 56) + 32 * v70), &v145);
          sub_24255A2B8(v70, v47);
          swift_bridgeObjectRelease();
        }
        else
        {
          v145 = 0u;
          v146 = 0u;
        }
        v50 += 2;
        sub_2425264C4((uint64_t)&v145, &qword_2571FC790);
        swift_bridgeObjectRelease();
        --v49;
      }
      while (v49);
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v47 + 16))
    {
      v87 = v132[12];
      if (!v87)
      {
        if (qword_2571FC5C8 != -1)
          swift_once();
        v112 = sub_24259F930();
        __swift_project_value_buffer(v112, (uint64_t)qword_2571FFB10);
        swift_retain();
        v113 = sub_24259F918();
        v114 = sub_24259FE70();
        if (os_log_type_enabled(v113, v114))
        {
          v115 = (uint8_t *)swift_slowAlloc();
          v116 = swift_slowAlloc();
          *(_QWORD *)&v145 = v116;
          *(_DWORD *)v115 = 136315138;
          v117 = v132[2];
          v118 = v132[3];
          swift_bridgeObjectRetain();
          *(_QWORD *)&v142 = sub_24259B370(v117, v118, (uint64_t *)&v145);
          sub_24259FE94();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2422E0000, v113, v114, "Function> More keyword args passed for function %s", v115, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x2426A88B8](v116, -1, -1);
          MEMORY[0x2426A88B8](v115, -1, -1);

        }
        else
        {

          swift_release();
        }
        sub_242554B60();
        swift_allocError();
        *v127 = 3;
        swift_willThrow();
        goto LABEL_86;
      }
      v88 = v132[11];
      *((_QWORD *)&v146 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v145 = v88;
      *((_QWORD *)&v145 + 1) = v87;
      sub_24255BAB4((uint64_t)&v145, (uint64_t)&v142);
      swift_bridgeObjectRetain_n();
      v89 = swift_isUniquelyReferenced_nonNull_native();
      v141[0] = v148;
      v148 = 0x8000000000000000;
      sub_24255A6F4((uint64_t)&v142, v88, v87, v89);
      v148 = v141[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v90 = swift_bridgeObjectRetain();
    v138 = sub_24256757C(v90);
    v91 = v132[4];
    *(_QWORD *)&v145 = v132[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24251A760(v91);
    v92 = swift_bridgeObjectRetain();
    sub_24251A760(v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v93 = sub_242568C2C(v145);
    swift_bridgeObjectRelease();
    LOBYTE(v91) = sub_24256806C(v138, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v91 & 1) != 0)
    {
      v94 = (void (*)(__int128 *__return_ptr, uint64_t))v132[14];
      swift_retain();
      v95 = swift_bridgeObjectRetain();
      v94(&v145, v95);
      swift_bridgeObjectRelease();
      swift_release();
      if (!v130)
      {
        sub_242588D2C((uint64_t)&v145, a3);
        sub_2425264C4((uint64_t)&v145, &qword_2571FC790);
      }
    }
    else
    {
      if (qword_2571FC5C8 != -1)
        swift_once();
      v98 = sub_24259F930();
      __swift_project_value_buffer(v98, (uint64_t)qword_2571FFB10);
      swift_retain_n();
      v99 = sub_24259F918();
      v100 = sub_24259FE70();
      if (os_log_type_enabled(v99, v100))
      {
        v101 = swift_slowAlloc();
        v139 = swift_slowAlloc();
        *(_QWORD *)&v142 = v139;
        *(_DWORD *)v101 = 136315650;
        v136 = v99;
        v135 = v100;
        v103 = v132[2];
        v102 = v132[3];
        swift_bridgeObjectRetain();
        *(_QWORD *)&v145 = sub_24259B370(v103, v102, (uint64_t *)&v142);
        sub_24259FE94();
        swift_bridgeObjectRelease();
        *(_WORD *)(v101 + 12) = 2080;
        v104 = v132[4];
        *(_QWORD *)&v145 = v132[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24251A760(v104);
        v105 = swift_bridgeObjectRetain();
        sub_24251A760(v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v106 = MEMORY[0x2426A7958](v145, MEMORY[0x24BEE0D00]);
        v108 = v107;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v145 = sub_24259B370(v106, v108, (uint64_t *)&v142);
        sub_24259FE94();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v101 + 22) = 2080;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
        v109 = sub_24259F990();
        v111 = v110;
        swift_bridgeObjectRelease();
        v141[0] = sub_24259B370(v109, v111, (uint64_t *)&v142);
        sub_24259FE94();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2422E0000, v136, v135, "Function> Missing required args for function %s, required: %s, provided: %s", (uint8_t *)v101, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v139, -1, -1);
        MEMORY[0x2426A88B8](v101, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      sub_242554B60();
      swift_allocError();
      *v126 = 4;
      swift_willThrow();
    }
LABEL_86:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (qword_2571FC5C8 != -1)
LABEL_94:
    swift_once();
  v74 = sub_24259F930();
  __swift_project_value_buffer(v74, (uint64_t)qword_2571FFB10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  v75 = sub_24259F918();
  v76 = sub_24259FE70();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = swift_slowAlloc();
    v137 = swift_slowAlloc();
    *(_QWORD *)&v145 = v137;
    *(_DWORD *)v77 = 136315650;
    v78 = v132[2];
    v79 = v132[3];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v142 = sub_24259B370(v78, v79, (uint64_t *)&v145);
    sub_24259FE94();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 12) = 2080;
    v80 = swift_bridgeObjectRetain();
    v81 = MEMORY[0x2426A7958](v80, MEMORY[0x24BEE0D00]);
    v83 = v82;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v142 = sub_24259B370(v81, v83, (uint64_t *)&v145);
    sub_24259FE94();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 22) = 2080;
    swift_bridgeObjectRetain();
    v84 = sub_24259F990();
    v86 = v85;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v142 = sub_24259B370(v84, v86, (uint64_t *)&v145);
    sub_24259FE94();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2422E0000, v75, v76, "Function> Missing required keyword args for function %s, required: %s, provided: %s", (uint8_t *)v77, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2426A88B8](v137, -1, -1);
    MEMORY[0x2426A88B8](v77, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
  }
  sub_242554B60();
  swift_allocError();
  *v96 = 1;
  return swift_willThrow();
}

uint64_t sub_24256757C(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_24259FDBC();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_242567EC0(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_242567710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[32];

  sub_242526478(a3, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return sub_2425581D0((uint64_t)v6, a1, a2);
}

uint64_t sub_242567768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char v10;

  result = swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 104);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_24255A05C(a1, a2);
    if ((v10 & 1) != 0)
    {
      sub_242526478(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)a3);
    }
    else
    {
      *a3 = 0u;
      a3[1] = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_242567814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 104);
  if (!*(_QWORD *)(v5 + 16))
  {
    v10 = 0u;
    v11 = 0u;
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_24255A05C(a1, a2);
  if ((v7 & 1) != 0)
  {
    sub_242526478(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v10);
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v11 + 1))
    goto LABEL_8;
  v8 = 1;
LABEL_9:
  sub_2425264C4((uint64_t)&v10, &qword_2571FC790);
  return v8;
}

uint64_t sub_2425678E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  sub_242526478(a1, (uint64_t)v7);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    sub_242526478(a2, (uint64_t)v7);
    v4 = type metadata accessor for Function();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7[3] = v4;
      v7[0] = v5;
      swift_beginAccess();
      swift_retain();
      sub_2425580FC((uint64_t)v7, v5, v6);
      swift_endAccess();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t Function.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t Function.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_242567B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_242567768(a1, a2, a3);
}

uint64_t sub_242567B28(uint64_t a1, uint64_t a2)
{
  return sub_242567814(a1, a2) & 1;
}

uint64_t sub_242567B4C(uint64_t a1, uint64_t a2)
{
  return sub_2425678E4(a1, a2);
}

uint64_t type metadata accessor for Function()
{
  return objc_opt_self();
}

uint64_t destroy for Arguments()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Arguments(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Arguments(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Arguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Arguments(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Arguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Arguments()
{
  return &type metadata for Arguments;
}

uint64_t method lookup function for Function()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Function.__allocating_init(name:arguments:attrs:body:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of Function.attribute(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of Function.has(attribute:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of Function.store(key:obj:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t sub_242567EC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_2425A02D8();
  swift_bridgeObjectRetain();
  sub_24259FB40();
  v8 = sub_2425A02F0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2425A0254() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2425A0254() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_242568638(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_24256806C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t i;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return 0;
  v3 = a2;
  v4 = a1;
  v31 = a2 + 56;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a2 + 56);
  v30 = (unint64_t)(63 - v5) >> 6;
  v32 = a1 + 56;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v12)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (i << 6);
      v12 = i;
      if (!*(_QWORD *)(v4 + 16))
        goto LABEL_40;
      goto LABEL_25;
    }
    v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v13 >= v30)
      goto LABEL_41;
    v14 = *(_QWORD *)(v31 + 8 * v13);
    v12 = i + 1;
    if (!v14)
    {
      v12 = i + 2;
      if (i + 2 >= v30)
        goto LABEL_41;
      v14 = *(_QWORD *)(v31 + 8 * v12);
      if (!v14)
      {
        v12 = i + 3;
        if (i + 3 >= v30)
          goto LABEL_41;
        v14 = *(_QWORD *)(v31 + 8 * v12);
        if (!v14)
          break;
      }
    }
LABEL_24:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
    if (!*(_QWORD *)(v4 + 16))
    {
LABEL_40:
      v2 = 0;
      goto LABEL_42;
    }
LABEL_25:
    v16 = v3;
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v19 = *v17;
    v18 = v17[1];
    sub_2425A02D8();
    swift_bridgeObjectRetain();
    sub_24259FB40();
    v20 = sub_2425A02F0();
    v21 = v4;
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v20 & ~v22;
    if (((*(_QWORD *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      goto LABEL_39;
    v24 = *(_QWORD *)(v21 + 48);
    v25 = (_QWORD *)(v24 + 16 * v23);
    v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (sub_2425A0254() & 1) == 0)
    {
      v27 = ~v22;
      while (1)
      {
        v23 = (v23 + 1) & v27;
        if (((*(_QWORD *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          break;
        v28 = (_QWORD *)(v24 + 16 * v23);
        v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (sub_2425A0254() & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      v2 = 0;
LABEL_42:
      sub_2425213C4();
      return v2;
    }
LABEL_7:
    result = swift_bridgeObjectRelease();
    v3 = v16;
    v4 = v21;
  }
  v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_41:
    v2 = 1;
    goto LABEL_42;
  }
  v14 = *(_QWORD *)(v31 + 8 * v15);
  if (v14)
  {
    v12 = i + 4;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v12 >= v30)
      goto LABEL_41;
    v14 = *(_QWORD *)(v31 + 8 * v12);
    ++v15;
    if (v14)
      goto LABEL_24;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_24256835C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD8F8);
  v3 = sub_24259FF60();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_2425A02D8();
      sub_24259FB40();
      result = sub_2425A02F0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_242568638(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_24256835C();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_2425687D0();
      goto LABEL_22;
    }
    sub_242568980();
  }
  v11 = *v4;
  sub_2425A02D8();
  sub_24259FB40();
  result = sub_2425A02F0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_2425A0254(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_2425A0284();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_2425A0254();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_2425687D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD8F8);
  v2 = *v0;
  v3 = sub_24259FF54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_242568980()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD8F8);
  v3 = sub_24259FF60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_2425A02D8();
    swift_bridgeObjectRetain();
    sub_24259FB40();
    result = sub_2425A02F0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_242568C2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_24259FDBC();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_242567EC0(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_242568CC0(uint64_t result, uint64_t a2, void (*a3)(uint64_t, uint64_t, _BYTE *))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _BYTE v12[32];

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v5 = result;
    v6 = *(_QWORD *)(a2 + 16);
    v7 = a2 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = (uint64_t *)(v5 + 40);
    do
    {
      if (!v6)
        break;
      v10 = *v8;
      v11[0] = *(v8 - 1);
      v9 = v11[0];
      v11[1] = v10;
      sub_242526478(v7, (uint64_t)v12);
      swift_bridgeObjectRetain();
      a3(v9, v10, v12);
      sub_2425264C4((uint64_t)v11, &qword_2571FD088);
      v7 += 32;
      --v6;
      v8 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_242568DAC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_242568DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_242567710(a1, a2, a3);
}

uint64_t sub_242568DE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255DB58(*a1, *a2);
}

uint64_t sub_242568DEC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242568E74()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242568ED8()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242568F5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242569FD8();
  *a1 = result;
  return result;
}

void sub_242568F88(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE200000000000000;
  v4 = 0xE400000000000000;
  v5 = 1952867692;
  if (v2 != 1)
  {
    v5 = 0x7468676972;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 28783;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_242568FD0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1952867692;
  if (*v0 != 1)
    v1 = 0x7468676972;
  if (*v0)
    return v1;
  else
    return 28783;
}

uint64_t sub_242569014@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242569FD8();
  *a1 = result;
  return result;
}

uint64_t sub_242569038()
{
  sub_242569DF0();
  return sub_2425A0344();
}

uint64_t sub_242569060()
{
  sub_242569DF0();
  return sub_2425A0350();
}

uint64_t sub_242569088(_QWORD *a1)
{
  swift_allocObject();
  return sub_2425690D0(a1);
}

uint64_t sub_2425690D0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FDAA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242569DF0();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for BinOp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v14[0]) = 0;
    v1[9] = sub_2425A01A0();
    v1[10] = v10;
    v1[5] = sub_24258D0EC((uint64_t)v8, 1);
    v1[6] = v11;
    v1[7] = sub_24258D0EC((uint64_t)v8, 2);
    v1[8] = v12;
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v14);
    v3 = sub_24259BC74(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_2425692F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t, uint64_t);
  char *v20;
  uint64_t v21[10];
  _QWORD v22[5];
  uint64_t v23[4];
  uint64_t v24[5];

  v2 = v1;
  v3 = v0[6];
  ObjectType = swift_getObjectType();
  v5 = MEMORY[0x2426A8918](v0 + 3);
  v6 = v0[4];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v7(v5, v6, ObjectType, v3);
  swift_unknownObjectRelease();
  v8 = v0[8];
  v9 = swift_getObjectType();
  v10 = MEMORY[0x2426A8918](v0 + 3);
  v11 = v0[4];
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  v12(v10, v11, v9, v8);
  swift_unknownObjectRelease();
  v13 = v0[6];
  v14 = swift_getObjectType();
  v15 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 64);
  swift_unknownObjectRetain();
  v15(v22, v14, v13);
  if (!v2)
  {
    swift_unknownObjectRelease();
    sub_24259BDDC(v21);
    sub_242557D30((uint64_t)v22);
    sub_242588900((uint64_t)v21, v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v16 = v0[8];
    v17 = swift_getObjectType();
    v18 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v16 + 64);
    swift_unknownObjectRetain();
    v18(v22, v17, v16);
    swift_unknownObjectRelease();
    sub_24259BDDC(v21);
    sub_242557D30((uint64_t)v22);
    sub_242588900((uint64_t)v21, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    swift_bridgeObjectRetain();
    v20 = (char *)sub_2425694F0 + 4 * byte_2425C68E8[sub_242569DA8()];
    __asm { BR              X10 }
  }
  return swift_unknownObjectRelease();
}

void sub_2425694F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _BYTE *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_242526478(v25 - 120, (uint64_t)&a13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FDA98);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(&a9, (uint64_t)&a17);
    v26 = a20;
    v27 = a21;
    __swift_project_boxed_opaque_existential_1(&a17, a20);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 8))(&a22, v26, v27);
    if (!v23)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&a22);
      __swift_destroy_boxed_opaque_existential_1(v25 - 120);
      *(_BYTE *)(v24 + 32) = 0;
      v28 = &a17;
      goto LABEL_12;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a17);
  }
  else
  {
    a11 = 0;
    a9 = 0u;
    a10 = 0u;
    sub_2425264C4((uint64_t)&a9, &qword_2571FDAA0);
    sub_242554B60();
    swift_allocError();
    *v29 = 15;
    swift_willThrow();
  }
  if (qword_2571FC5C8 != -1)
    swift_once();
  v30 = sub_24259F930();
  __swift_project_value_buffer(v30, (uint64_t)qword_2571FFB10);
  swift_retain_n();
  v31 = sub_24259F918();
  v32 = sub_24259FE70();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    *(_QWORD *)(v25 - 72) = v34;
    a17 = v34;
    *(_DWORD *)v33 = 136315906;
    v35 = v22[5];
    swift_getObjectType();
    *(_QWORD *)&a9 = v35;
    v36 = sub_2425A01E8();
    *(_QWORD *)&a9 = sub_24259B370(v36, v37, &a17);
    sub_24259FE94();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    v38 = v22[7];
    swift_getObjectType();
    *(_QWORD *)&a9 = v38;
    v39 = sub_2425A01E8();
    *(_QWORD *)&a9 = sub_24259B370(v39, v40, &a17);
    sub_24259FE94();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    v41 = v22[9];
    v42 = v22[10];
    swift_bridgeObjectRetain();
    *(_QWORD *)&a9 = sub_24259B370(v41, v42, &a17);
    sub_24259FE94();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 32) = 2048;
    v43 = v22[2];
    swift_release();
    *(_QWORD *)&a9 = v43;
    sub_24259FE94();
    swift_release();
    _os_log_impl(&dword_2422E0000, v31, v32, "BinOp> Left: %s and right: %s are not supported  with op: %s. line %ld", (uint8_t *)v33, 0x2Au);
    v44 = *(_QWORD *)(v25 - 72);
    swift_arrayDestroy();
    MEMORY[0x2426A88B8](v44, -1, -1);
    MEMORY[0x2426A88B8](v33, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a22);
  v28 = (uint64_t *)(v25 - 120);
LABEL_12:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  JUMPOUT(0x242569468);
}

void sub_242569BB8()
{
  char *v0;

  swift_getObjectType();
  swift_unknownObjectRetain();
  sub_24259FB1C();
  sub_24259FB70();
  swift_bridgeObjectRetain();
  v0 = (char *)&loc_242569C48 + dword_242569D0C[sub_242569DA8()];
  __asm { BR              X10 }
}

uint64_t sub_242569C58()
{
  uint64_t v1;

  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_getObjectType();
  swift_unknownObjectRetain();
  sub_24259FB1C();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_242569D28()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242569D4C()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BinOp()
{
  return objc_opt_self();
}

uint64_t sub_242569DA8()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

unint64_t sub_242569DF0()
{
  unint64_t result;

  result = qword_2571FDAB0;
  if (!qword_2571FDAB0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6A1C, &type metadata for BinOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDAB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BinOp.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_242569E80 + 4 * byte_2425C68F4[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_242569EB4 + 4 * byte_2425C68EF[v4]))();
}

uint64_t sub_242569EB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242569EBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242569EC4);
  return result;
}

uint64_t sub_242569ED0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242569ED8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_242569EDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242569EE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BinOp.CodingKeys()
{
  return &type metadata for BinOp.CodingKeys;
}

unint64_t sub_242569F04()
{
  unint64_t result;

  result = qword_2571FDAB8;
  if (!qword_2571FDAB8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C69F4, &type metadata for BinOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDAB8);
  }
  return result;
}

unint64_t sub_242569F4C()
{
  unint64_t result;

  result = qword_2571FDAC0;
  if (!qword_2571FDAC0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C692C, &type metadata for BinOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDAC0);
  }
  return result;
}

unint64_t sub_242569F94()
{
  unint64_t result;

  result = qword_2571FDAC8;
  if (!qword_2571FDAC8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6954, &type metadata for BinOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDAC8);
  }
  return result;
}

uint64_t sub_242569FD8()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

void sub_24256A020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t dtype;
  int v3;
  uint64_t v4;
  mlx::core *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 v9;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  dtype = mlx_array_get_dtype(v1);
  sub_242553C80(dtype, &v9);
  v3 = v9;
  if (v9 == 6)
    goto LABEL_6;
  v4 = *(_QWORD *)(v0 + 16);
  v5 = mlx_default_device();
  v6 = (uint64_t)v5;
  if (!v5)
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = mlx_default_stream((uint64_t)v5);
  if (!v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  mlx_free(v6);
  mlx_free(v7);
  v8 = mlx_astype(v4, 6, v7);
  v1 = (uint64_t)v8;
  if (!v8)
  {
LABEL_11:
    __break(1u);
    return;
  }
  mlx_array_eval((uint64_t)v8);
LABEL_6:
  mlx_array_item_float32(v1);
  if (v3 != 6)
    mlx_free(v1);
}

uint64_t sub_24256A11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t dtype;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  dtype = mlx_array_get_dtype(v1);
  sub_242553C80(dtype, &v9);
  v3 = v9;
  if (v9 != 5)
  {
    v4 = *(_QWORD *)(v0 + 16);
    result = (uint64_t)mlx_default_device();
    v6 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v7 = result;
      if (result)
      {
        mlx_free(v6);
        mlx_free(v7);
        result = (uint64_t)mlx_astype(v4, 5, v7);
        v1 = result;
        if (result)
        {
          mlx_array_eval(result);
          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:
  v8 = mlx_array_item_int64(v1);
  if (v3 != 5)
    mlx_free(v1);
  return v8;
}

uint64_t sub_24256A210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t dtype;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  dtype = mlx_array_get_dtype(v1);
  sub_242553C80(dtype, &v9);
  v3 = v9;
  if (v9 != 4)
  {
    v4 = *(_QWORD *)(v0 + 16);
    result = (uint64_t)mlx_default_device();
    v6 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v7 = result;
      if (result)
      {
        mlx_free(v6);
        mlx_free(v7);
        result = (uint64_t)mlx_astype(v4, 4, v7);
        v1 = result;
        if (result)
        {
          mlx_array_eval(result);
          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:
  v8 = mlx_array_item_int32(v1);
  if (v3 != 4)
    mlx_free(v1);
  return v8;
}

uint64_t sub_24256A304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t dtype;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  dtype = mlx_array_get_dtype(v1);
  sub_242553C80(dtype, &v9);
  v3 = v9;
  if (v9 != 3)
  {
    v4 = *(_QWORD *)(v0 + 16);
    result = (uint64_t)mlx_default_device();
    v6 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v7 = result;
      if (result)
      {
        mlx_free(v6);
        mlx_free(v7);
        result = (uint64_t)mlx_astype(v4, 3, v7);
        v1 = result;
        if (result)
        {
          mlx_array_eval(result);
          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:
  v8 = mlx_array_item_int8(v1);
  if (v3 != 3)
    mlx_free(v1);
  return v8;
}

uint64_t sub_24256A3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t dtype;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  dtype = mlx_array_get_dtype(v1);
  sub_242553C80(dtype, &v9);
  v3 = v9;
  if (v9 != 2)
  {
    v4 = *(_QWORD *)(v0 + 16);
    result = (uint64_t)mlx_default_device();
    v6 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v7 = result;
      if (result)
      {
        mlx_free(v6);
        mlx_free(v7);
        result = (uint64_t)mlx_astype(v4, 2, v7);
        v1 = result;
        if (result)
        {
          mlx_array_eval(result);
          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:
  v8 = mlx_array_item_uint32(v1);
  if (v3 != 2)
    mlx_free(v1);
  return v8;
}

uint64_t sub_24256A4EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t dtype;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  dtype = mlx_array_get_dtype(v1);
  sub_242553C80(dtype, &v9);
  v3 = v9;
  if (v9 != 1)
  {
    v4 = *(_QWORD *)(v0 + 16);
    result = (uint64_t)mlx_default_device();
    v6 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v7 = result;
      if (result)
      {
        mlx_free(v6);
        mlx_free(v7);
        result = (uint64_t)mlx_astype(v4, 1, v7);
        v1 = result;
        if (result)
        {
          mlx_array_eval(result);
          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:
  v8 = mlx_array_item_uint8(v1);
  if (v3 != 1)
    mlx_free(v1);
  return v8;
}

uint64_t sub_24256A5E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t dtype;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  dtype = mlx_array_get_dtype(v1);
  sub_242553C80(dtype, &v9);
  v3 = v9;
  if (v9)
  {
    v4 = *(_QWORD *)(v0 + 16);
    result = (uint64_t)mlx_default_device();
    v6 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v7 = result;
      if (result)
      {
        mlx_free(v6);
        mlx_free(v7);
        result = (uint64_t)mlx_astype(v4, 0, v7);
        v1 = result;
        if (result)
        {
          mlx_array_eval(result);
          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:
  v8 = mlx_array_item_BOOL(v1);
  if (v3)
    mlx_free(v1);
  return v8;
}

_QWORD *static MLXArray.asAnyArray(_:_:)(uint64_t a1, unsigned __int8 *a2)
{
  return sub_24256BFA4(a1, a2);
}

uint64_t static MLXArray.isMLXArray(_:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[32];

  sub_242526478(a1, (uint64_t)v3);
  v1 = swift_dynamicCast();
  if ((_DWORD)v1)
    swift_release();
  return v1;
}

Swift::Bool __swiftcall MLXArray.isScalar()()
{
  uint64_t v0;
  uint64_t v1;

  if (mlx_array_size(*(_QWORD *)(v0 + 16)) != 1)
    return 0;
  v1 = *(_QWORD *)(MLXArray.shape.getter() + 16);
  swift_bridgeObjectRelease();
  return v1 == 0;
}

void MLXArray.scalar()()
{
  uint64_t v0;
  uint64_t dtype;
  char v2;

  dtype = mlx_array_get_dtype(*(_QWORD *)(v0 + 16));
  sub_242553C80(dtype, &v2);
  __asm { BR              X10 }
}

uint64_t sub_24256A7C4()
{
  uint64_t v0;
  uint64_t result;

  result = sub_24256A5E0();
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE1328];
  *(_BYTE *)v0 = result & 1;
  return result;
}

double MLXArray.attribute(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a1 == 7235949 && a2 == 0xE300000000000000;
  if (v5 || (sub_2425A0254() & 1) != 0)
  {
    swift_retain();
    v8 = MEMORY[0x24BEE4AF8];
    v9 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
    v10 = type metadata accessor for Function();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v8;
    *(_QWORD *)(v11 + 48) = v8;
    *(_QWORD *)(v11 + 56) = v8;
    *(_QWORD *)(v11 + 64) = v8;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_QWORD *)(v11 + 104) = sub_2425583E8(v8);
    strcpy((char *)(v11 + 16), "np.ndarray.min");
    *(_BYTE *)(v11 + 31) = -18;
    *(_QWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v8;
    *(_QWORD *)(v11 + 48) = v8;
    *(_QWORD *)(v11 + 56) = v8;
    *(_QWORD *)(v11 + 64) = v8;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(_QWORD *)(v11 + 104) = v9;
    swift_bridgeObjectRelease();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_24256C420;
    *(_QWORD *)(v12 + 24) = v3;
    v14 = sub_242562F84;
  }
  else
  {
    if ((a1 != 7889261 || a2 != 0xE300000000000000) && (sub_2425A0254() & 1) == 0)
    {
      if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
      {
        v17 = mlx_array_size(*(_QWORD *)(v3 + 16));
      }
      else
      {
        if (a1 == 0x6570616873 && a2 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
        {
          v18 = MLXArray.shape.getter();
          *(_QWORD *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7B0);
          *(_QWORD *)a3 = v18;
          return result;
        }
        if ((a1 != 1835623534 || a2 != 0xE400000000000000) && (sub_2425A0254() & 1) == 0)
        {
          result = 0.0;
          *(_OWORD *)a3 = 0u;
          *(_OWORD *)(a3 + 16) = 0u;
          return result;
        }
        v17 = mlx_array_ndim(*(_QWORD *)(v3 + 16));
      }
      *(_QWORD *)(a3 + 24) = MEMORY[0x24BEE1768];
      *(_QWORD *)a3 = v17;
      return result;
    }
    swift_retain();
    v15 = MEMORY[0x24BEE4AF8];
    v16 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
    v10 = type metadata accessor for Function();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 32) = v15;
    *(_QWORD *)(v11 + 40) = v15;
    *(_QWORD *)(v11 + 48) = v15;
    *(_QWORD *)(v11 + 56) = v15;
    *(_QWORD *)(v11 + 64) = v15;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_QWORD *)(v11 + 104) = sub_2425583E8(v15);
    strcpy((char *)(v11 + 16), "np.ndarray.max");
    *(_BYTE *)(v11 + 31) = -18;
    *(_QWORD *)(v11 + 32) = v15;
    *(_QWORD *)(v11 + 40) = v15;
    *(_QWORD *)(v11 + 48) = v15;
    *(_QWORD *)(v11 + 56) = v15;
    *(_QWORD *)(v11 + 64) = v15;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(_QWORD *)(v11 + 104) = v16;
    swift_bridgeObjectRelease();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_24256C3E4;
    *(_QWORD *)(v12 + 24) = v3;
    v14 = sub_242562F18;
  }
  *(_QWORD *)(v11 + 112) = v14;
  *(_QWORD *)(v11 + 120) = v12;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)a3 = v11;
  return result;
}

uint64_t sub_24256AC64@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  result = (uint64_t)mlx_default_device();
  v6 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v7 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v6);
  result = mlx_min_all(a1[2], 0, v7);
  v8 = result;
  if (result)
  {
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    result = mlx_free(v7);
    a2[3] = v4;
    *a2 = v9;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24256AD24@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  result = (uint64_t)mlx_default_device();
  v6 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = mlx_default_stream(result);
  v7 = result;
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  mlx_free(v6);
  result = mlx_max_all(a1[2], 0, v7);
  v8 = result;
  if (result)
  {
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    result = mlx_free(v7);
    a2[3] = v4;
    *a2 = v9;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall MLXArray.has(attribute:)(Swift::String attribute)
{
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v3;

  object = (uint64_t)attribute._object;
  countAndFlagsBits = attribute._countAndFlagsBits;
  v3 = sub_24256C438((uint64_t)&unk_251353B48);
  swift_arrayDestroy();
  LOBYTE(object) = sub_24256AE54(countAndFlagsBits, object, v3);
  swift_bridgeObjectRelease();
  return object & 1;
}

uint64_t sub_24256AE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_2425A02D8();
    sub_24259FB40();
    v6 = sub_2425A02F0();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_2425A0254() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_2425A0254() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

double sub_24256AF88@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MLXArray.attribute(for:)(a1, a2, a3);
}

uint64_t sub_24256AFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24256C438((uint64_t)&unk_251353B48);
  swift_arrayDestroy();
  LOBYTE(a2) = sub_24256AE54(a1, a2, v4);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t MLXArray.store(key:obj:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _BYTE *v43;
  _QWORD *v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  _BYTE *v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  ValueMetadata *v61;
  _UNKNOWN **v62;
  _OWORD v63[3];
  uint64_t v64[3];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t AssociatedConformanceWitness;
  _QWORD v69[4];
  _QWORD *v70;

  LOBYTE(v69[0]) = 7;
  result = (uint64_t)sub_24256BFA4(a2, (unsigned __int8 *)v69);
  if (v3)
    return result;
  v53 = result;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v70 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_242526478(a1, (uint64_t)&v60);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC850);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(&v66, (uint64_t)v69);
    sub_24251DE5C((uint64_t)v69, (uint64_t)&v66);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v70 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = sub_24251C41C(0, v6[2] + 1, 1, v6);
      v70 = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
      v70 = sub_24251C41C((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v11 = *((_QWORD *)&v67 + 1);
    v10 = AssociatedConformanceWitness;
    v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v66, *((uint64_t *)&v67 + 1));
    MEMORY[0x24BDAC7A8](v12);
    v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v14);
    sub_24256BF2C(v9, (uint64_t)v14, (uint64_t *)&v70, v11, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
LABEL_33:
    v44 = v70;
    type metadata accessor for Stream();
    inited = swift_initStackObject();
    result = (uint64_t)mlx_default_device();
    v46 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      if (result)
      {
        *(_QWORD *)(inited + 16) = result;
        mlx_free(v46);
        v69[0] = inited;
        return MLXArray.subscript.setter(v53, v44, v69);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  AssociatedConformanceWitness = 0;
  v66 = 0u;
  v67 = 0u;
  sub_2425264C4((uint64_t)&v66, &qword_2571FDAD0);
  sub_242526478(a1, (uint64_t)&v60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD660);
  if (swift_dynamicCast())
  {
    v52[1] = v2;
    v52[2] = 0;
    sub_24251DEC8(&v66, (uint64_t)v69);
    v16 = __swift_project_boxed_opaque_existential_1(v69, v69[3]);
    MEMORY[0x24BDAC7A8](v16);
    (*(void (**)(char *))(v18 + 16))((char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    *((_QWORD *)&v67 + 1) = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v66);
    sub_24259FC0C();
    v54 = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v66, *((uint64_t *)&v67 + 1));
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v26 = sub_24259FE7C();
      v27 = *(_QWORD *)(v26 - 8);
      MEMORY[0x24BDAC7A8](v26);
      v29 = (char *)v52 - v28;
      sub_24259FE88();
      v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
        goto LABEL_33;
      }
      v65 = AssociatedTypeWitness;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v64);
      (*(void (**)(uint64_t *, char *, uint64_t))(v30 + 32))(boxed_opaque_existential_0, v29, AssociatedTypeWitness);
      sub_2425264B4(v64, v63);
      sub_242526478((uint64_t)v63, (uint64_t)&v59);
      if (swift_dynamicCast())
      {
        sub_24251DEC8(&v56, (uint64_t)&v60);
        sub_24251DE5C((uint64_t)&v60, (uint64_t)&v56);
        v32 = v70;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v32 = sub_24251C41C(0, v32[2] + 1, 1, v32);
          v70 = v32;
        }
        v34 = v32[2];
        v33 = v32[3];
        if (v34 >= v33 >> 1)
          v70 = sub_24251C41C((_QWORD *)(v33 > 1), v34 + 1, 1, v32);
        v19 = *((_QWORD *)&v57 + 1);
        v20 = v58;
        v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v56, *((uint64_t *)&v57 + 1));
        MEMORY[0x24BDAC7A8](v21);
        v23 = (char *)v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v24 + 16))(v23);
        sub_24256BF2C(v34, (uint64_t)v23, (uint64_t *)&v70, v19, v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      }
      else
      {
        v58 = 0;
        v56 = 0u;
        v57 = 0u;
        sub_2425264C4((uint64_t)&v56, &qword_2571FDAD0);
        sub_242526478((uint64_t)v63, (uint64_t)&v60);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_37;
        if (v56 == __PAIR128__(0xE700000000000000, 0x7369786177656ELL))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v35 = sub_2425A0254();
          swift_bridgeObjectRelease();
          if ((v35 & 1) == 0)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            if (qword_2571FC5C8 != -1)
              swift_once();
            v47 = sub_24259F930();
            __swift_project_value_buffer(v47, (uint64_t)qword_2571FFB10);
            v48 = sub_24259F918();
            v49 = sub_24259FE70();
            if (os_log_type_enabled(v48, v49))
            {
              v50 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v50 = 0;
              _os_log_impl(&dword_2422E0000, v48, v49, "Unrecognized MLXArray slice", v50, 2u);
              MEMORY[0x2426A88B8](v50, -1, -1);
            }

            sub_242554B60();
            swift_allocError();
            *v51 = 38;
            swift_willThrow();
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
          }
        }
        v36 = v70;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = sub_24251C41C(0, v36[2] + 1, 1, v36);
        v38 = v36[2];
        v37 = v36[3];
        if (v38 >= v37 >> 1)
          v36 = sub_24251C41C((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
        v61 = &type metadata for MLXNewAxisIndex;
        v62 = &protocol witness table for MLXNewAxisIndex;
        v36[2] = v38 + 1;
        sub_24251DEC8(&v60, (uint64_t)&v36[5 * v38 + 4]);
        v70 = v36;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    }
  }
  AssociatedConformanceWitness = 0;
  v66 = 0u;
  v67 = 0u;
  swift_bridgeObjectRelease();
  sub_2425264C4((uint64_t)&v66, &qword_2571FD648);
  if (qword_2571FC5C8 != -1)
    swift_once();
  v39 = sub_24259F930();
  __swift_project_value_buffer(v39, (uint64_t)qword_2571FFB10);
  v40 = sub_24259F918();
  v41 = sub_24259FE70();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_2422E0000, v40, v41, "Invalid MLXArray slice", v42, 2u);
    MEMORY[0x2426A88B8](v42, -1, -1);
  }

  sub_242554B60();
  swift_allocError();
  *v43 = 38;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_24256B8E8(uint64_t a1, uint64_t a2)
{
  return MLXArray.store(key:obj:)(a1, a2);
}

uint64_t MLXArray.get(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47[32];
  _BYTE v48[32];
  __int128 v49;
  __int128 v50;
  _UNKNOWN **v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];

  v5 = *v2;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v55[0] = MEMORY[0x24BEE4AF8];
  sub_242526478(a1, (uint64_t)&v44);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC850);
  if (!swift_dynamicCast())
  {
    v51 = 0;
    v49 = 0u;
    v50 = 0u;
    sub_2425264C4((uint64_t)&v49, &qword_2571FDAD0);
    sub_242526478(a1, (uint64_t)&v44);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v51 = 0;
      v49 = 0u;
      v50 = 0u;
      sub_2425264C4((uint64_t)&v49, &qword_2571FCCA0);
      goto LABEL_28;
    }
    v42 = v5;
    v43 = a2;
    sub_24251DEC8(&v49, (uint64_t)v52);
    v16 = v53;
    v17 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
    v19 = *(_QWORD *)(v18 + 16);
    if (!v19)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      a2 = v43;
      v5 = v42;
      goto LABEL_28;
    }
    v41 = v18;
    v20 = v18 + 32;
    while (1)
    {
      sub_242526478(v20, (uint64_t)v48);
      sub_242526478((uint64_t)v48, (uint64_t)v47);
      if (swift_dynamicCast())
      {
        sub_24251DEC8(&v44, (uint64_t)&v49);
        sub_24251DE5C((uint64_t)&v49, (uint64_t)&v44);
        v27 = (_QWORD *)v55[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v27 = sub_24251C41C(0, v27[2] + 1, 1, v27);
          v55[0] = (uint64_t)v27;
        }
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
          v55[0] = (uint64_t)sub_24251C41C((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v21 = *((_QWORD *)&v45 + 1);
        v22 = v46;
        v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v44, *((uint64_t *)&v45 + 1));
        MEMORY[0x24BDAC7A8](v23);
        v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v26 + 16))(v25);
        sub_24256BF2C(v29, (uint64_t)v25, v55, v21, v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      }
      else
      {
        v46 = 0;
        v45 = 0u;
        v44 = 0u;
        sub_2425264C4((uint64_t)&v44, &qword_2571FDAD0);
        sub_242526478((uint64_t)v48, (uint64_t)&v49);
        if ((swift_dynamicCast() & 1) != 0)
        {
          if (v44 == __PAIR128__(0xE700000000000000, 0x7369786177656ELL))
          {
            swift_bridgeObjectRelease();
LABEL_21:
            v31 = (_QWORD *)v55[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v31 = sub_24251C41C(0, v31[2] + 1, 1, v31);
            v33 = v31[2];
            v32 = v31[3];
            if (v33 >= v32 >> 1)
              v31 = sub_24251C41C((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
            *((_QWORD *)&v50 + 1) = &type metadata for MLXNewAxisIndex;
            v51 = &protocol witness table for MLXNewAxisIndex;
            v31[2] = v33 + 1;
            sub_24251DEC8(&v49, (uint64_t)&v31[5 * v33 + 4]);
            v55[0] = (uint64_t)v31;
            goto LABEL_11;
          }
          v30 = sub_2425A0254();
          swift_bridgeObjectRelease();
          if ((v30 & 1) != 0)
            goto LABEL_21;
        }
      }
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      v20 += 32;
      if (!--v19)
        goto LABEL_27;
    }
  }
  sub_24251DEC8(&v49, (uint64_t)v52);
  sub_24251DE5C((uint64_t)v52, (uint64_t)&v49);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v55[0] = (uint64_t)v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_24251C41C(0, v6[2] + 1, 1, v6);
    v55[0] = (uint64_t)v6;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v55[0] = (uint64_t)sub_24251C41C((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v10 = *((_QWORD *)&v50 + 1);
  v11 = (uint64_t)v51;
  v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v49, *((uint64_t *)&v50 + 1));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  sub_24256BF2C(v9, (uint64_t)v14, v55, v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
LABEL_28:
  v34 = v55[0];
  type metadata accessor for Stream();
  inited = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v37 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_35;
  }
  result = mlx_default_stream(result);
  v38 = result;
  if (!result)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  *(_QWORD *)(inited + 16) = result;
  mlx_free(v37);
  v52[0] = inited;
  v39 = MLXArray.subscript.getter(v34, v52);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v38);
  result = mlx_array_size(*(_QWORD *)(v39 + 16));
  if (result == 1 && (v40 = *(_QWORD *)(MLXArray.shape.getter() + 16), result = swift_bridgeObjectRelease(), !v40))
  {
    MLXArray.scalar()();
    return swift_release();
  }
  else
  {
    a2[3] = v5;
    *a2 = v39;
  }
  return result;
}

uint64_t sub_24256BF0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLXArray.get(_:)(a1, a2);
}

uint64_t sub_24256BF2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_24251DEC8(&v12, v10 + 40 * a1 + 32);
}

_QWORD *sub_24256BFA4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE *v19;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _BYTE *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v4 = *a2;
  sub_242526478(a1, (uint64_t)v30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(&v27, (uint64_t)v31);
    v5 = v32;
    v6 = v33;
    v7 = __swift_project_boxed_opaque_existential_1(v31, v32);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC900);
    *((_QWORD *)&v28 + 1) = v9;
    *(_QWORD *)&v27 = v8;
    swift_bridgeObjectRetain();
    v10 = static MorpheusUtils.getShape(_:)((uint64_t)&v27);
    if (v2)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      return v7;
    }
    v11 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    *((_QWORD *)&v28 + 1) = v9;
    *(_QWORD *)&v27 = v8;
    swift_bridgeObjectRetain();
    v21 = static MorpheusUtils.flattenNumericArray(_:)((uint64_t)&v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    if (v4 == 7)
    {
      *((_QWORD *)&v28 + 1) = v9;
      *(_QWORD *)&v27 = v8;
      static MorpheusUtils.getType(of:)((uint64_t)&v27, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
      if (v30[0] == 7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_2571FC5C8 != -1)
          swift_once();
        v22 = sub_24259F930();
        __swift_project_value_buffer(v22, (uint64_t)qword_2571FFB10);
        v23 = sub_24259F918();
        v24 = sub_24259FE70();
        v7 = (_QWORD *)v24;
        if (os_log_type_enabled(v23, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v25 = 0;
          _os_log_impl(&dword_2422E0000, v23, (os_log_type_t)v7, "MLXArray> Dtype can't be inferred", v25, 2u);
          MEMORY[0x2426A88B8](v25, -1, -1);
        }

        sub_242554B60();
        swift_allocError();
        *v26 = 33;
        swift_willThrow();
        goto LABEL_5;
      }
      LOBYTE(v27) = v30[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      LOBYTE(v27) = v4;
    }
    _s8Morpheus8MLXArrayCyACSaySo8NSNumberCG_AA5DTypeOSaySiGSgtcfC_0(v21, (unsigned __int8 *)&v27, v11);
LABEL_8:
    v7 = (_QWORD *)v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    return v7;
  }
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  sub_2425264C4((uint64_t)&v27, &qword_2571FCCA0);
  sub_242526478(a1, (uint64_t)v30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C8);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(&v27, (uint64_t)v31);
    v12 = v32;
    v13 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    LOBYTE(v27) = 7;
    v14 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v13 + 8))(&v27, v12, v13);
    goto LABEL_8;
  }
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  sub_2425264C4((uint64_t)&v27, &qword_2571FDAD8);
  if (qword_2571FC5C8 != -1)
    swift_once();
  v15 = sub_24259F930();
  __swift_project_value_buffer(v15, (uint64_t)qword_2571FFB10);
  v16 = sub_24259F918();
  v17 = sub_24259FE70();
  v7 = (_QWORD *)v17;
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_2422E0000, v16, (os_log_type_t)v7, "MLXArray> Can't convert to MLXArray", v18, 2u);
    MEMORY[0x2426A88B8](v18, -1, -1);
  }

  sub_242554B60();
  swift_allocError();
  *v19 = 37;
  swift_willThrow();
  return v7;
}

uint64_t sub_24256C3E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_24256AD24(v1, a1);
}

uint64_t sub_24256C3FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24256C420@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_24256AC64(v1, a1);
}

uint64_t sub_24256C438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD8F8);
    v3 = sub_24259FF6C();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_2425A02D8();
      swift_bridgeObjectRetain();
      sub_24259FB40();
      result = sub_2425A02F0();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_2425A0254(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_2425A0254();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_24256C604(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 2;
}

uint64_t sub_24256C61C()
{
  return 0x6B61657262;
}

uint64_t type metadata accessor for Break()
{
  return objc_opt_self();
}

uint64_t sub_24256C650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_24256DB38(a1, (uint64_t)sub_24256DE8C, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24256C6CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255DDD8(*a1, *a2);
}

uint64_t sub_24256C6D8()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256C770()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24256C7E4()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256C878@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24256E428();
  *a1 = result;
  return result;
}

void sub_24256C8A4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE400000000000000;
  v5 = 1936159329;
  if (v2 != 1)
  {
    v5 = 0x7364726F7779656BLL;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E6F6974636E7566;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_24256C8FC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1936159329;
  if (*v0 != 1)
    v1 = 0x7364726F7779656BLL;
  if (*v0)
    return v1;
  else
    return 0x6E6F6974636E7566;
}

uint64_t sub_24256C950@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24256E428();
  *a1 = result;
  return result;
}

uint64_t sub_24256C974()
{
  sub_24256E240();
  return sub_2425A0344();
}

uint64_t sub_24256C99C()
{
  sub_24256E240();
  return sub_2425A0350();
}

uint64_t sub_24256C9C4(_QWORD *a1)
{
  swift_allocObject();
  return sub_24256CA0C(a1);
}

uint64_t sub_24256CA0C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FDD40);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24256E240();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Call();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[7] = sub_24258D108((uint64_t)v8, 0);
    v1[8] = v10;
    v1[5] = sub_242591C2C((uint64_t)v8, 1);
    v1[6] = sub_242591C2C((uint64_t)v8, 2);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24256CC28@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[4];
  char v62;
  uint64_t v63[5];
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67[3];
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[40];
  uint64_t v71;

  v2 = v1[8];
  ObjectType = swift_getObjectType();
  v4 = MEMORY[0x2426A8918](v1 + 3);
  v5 = v1[4];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  v6(v4, v5, ObjectType, v2);
  swift_unknownObjectRelease();
  v7 = *(_QWORD *)(v1[5] + 16);
  if (v7)
  {
    v8 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v9 = *v8;
      v10 = swift_getObjectType();
      v11 = MEMORY[0x2426A8918](v1 + 3);
      v12 = v1[4];
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v13(v11, v12, v10, v9);
      swift_unknownObjectRelease();
      v8 += 2;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  v14 = *(_QWORD *)(v1[6] + 16);
  if (v14)
  {
    v15 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v16 = *v15;
      v17 = swift_getObjectType();
      v18 = MEMORY[0x2426A8918](v1 + 3);
      v19 = v1[4];
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 48);
      swift_unknownObjectRetain();
      v20(v18, v19, v17, v16);
      swift_unknownObjectRelease();
      v15 += 2;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  v21 = v1[8];
  v22 = swift_getObjectType();
  v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 64);
  swift_unknownObjectRetain();
  v23(v67, v22, v21);
  if (v60)
    return swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v25 = sub_242591968();
  sub_242557D30((uint64_t)v67);
  if (!v25)
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v36 = sub_24259F930();
    __swift_project_value_buffer(v36, (uint64_t)qword_2571FFB10);
    swift_retain_n();
    v37 = sub_24259F918();
    v38 = sub_24259FE70();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc();
      v40 = swift_slowAlloc();
      v67[0] = v40;
      *(_DWORD *)v39 = 136315394;
      swift_getObjectType();
      v41 = sub_2425A01E8();
      *(_QWORD *)&v64 = sub_24259B370(v41, v42, v67);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2048;
      v43 = v1[2];
      swift_release();
      *(_QWORD *)&v64 = v43;
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v37, v38, "Call> %s is a Function. line %ld", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v40, -1, -1);
      MEMORY[0x2426A88B8](v39, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_242554B60();
    swift_allocError();
    *v57 = 41;
    return swift_willThrow();
  }
  v26 = v1[5];
  v27 = *(_QWORD *)(v26 + 16);
  v28 = MEMORY[0x24BEE4AF8];
  if (v27)
  {
    v71 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_242509D28(0, v27, 0);
    v28 = v71;
    v29 = (uint64_t *)(v26 + 40);
    do
    {
      v30 = *v29;
      v31 = swift_getObjectType();
      v32 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 64);
      swift_unknownObjectRetain();
      v32(v67, v31, v30);
      sub_24255F890((uint64_t)v67, (uint64_t)&v64);
      if ((_BYTE)v66
        && (sub_242557D30((uint64_t)&v64), sub_24255F890((uint64_t)v67, (uint64_t)&v64), v66 != 1))
      {
        sub_242557D30((uint64_t)&v64);
        v61[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
        v33 = swift_allocObject();
        v61[0] = v33;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = 0u;
      }
      else
      {
        sub_24255F8CC((uint64_t)&v64, (uint64_t)v70, &qword_2571FC790);
        sub_242588D2C((uint64_t)v70, v61);
        sub_2425264C4((uint64_t)v70, &qword_2571FC790);
      }
      sub_242557D30((uint64_t)v67);
      sub_242588900((uint64_t)v61, v63);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
      swift_unknownObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509D28(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v71;
      }
      v35 = *(_QWORD *)(v28 + 16);
      v34 = *(_QWORD *)(v28 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_242509D28(v34 > 1, v35 + 1, 1);
        v28 = v71;
      }
      *(_QWORD *)(v28 + 16) = v35 + 1;
      sub_2425264B4(v63, (_OWORD *)(v28 + 32 * v35 + 32));
      v29 += 2;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  v67[0] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC900);
  sub_24256DAEC();
  v44 = sub_24259FC78();
  swift_bridgeObjectRelease();
  v45 = v1[6];
  v46 = *(_QWORD *)(v45 + 16);
  if (!v46)
  {
    v47 = MEMORY[0x24BEE4B00];
    goto LABEL_46;
  }
  v59 = v44;
  swift_bridgeObjectRetain_n();
  v47 = MEMORY[0x24BEE4B00];
  v48 = (uint64_t *)(v45 + 40);
  do
  {
    v50 = *v48;
    v51 = swift_getObjectType();
    v52 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v50 + 64);
    swift_unknownObjectRetain();
    v52(v63, v51, v50);
    sub_24255F890((uint64_t)v63, (uint64_t)v61);
    if (!v62 || (sub_242557D30((uint64_t)v61), sub_24255F890((uint64_t)v63, (uint64_t)v61), v62 == 1))
    {
      sub_24255F8CC((uint64_t)v61, (uint64_t)v70, &qword_2571FC790);
      sub_24255F8CC((uint64_t)v70, (uint64_t)v61, &qword_2571FC790);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FDD20);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v66 = 0;
        v64 = 0u;
        v65 = 0u;
      }
    }
    else
    {
      sub_242557D30((uint64_t)v61);
      v64 = 0u;
      v65 = 0u;
      v66 = 0;
    }
    sub_242557D30((uint64_t)v63);
    if (*((_QWORD *)&v65 + 1))
    {
      sub_24251DEC8(&v64, (uint64_t)v67);
      v53 = v68;
      v54 = v69;
      __swift_project_boxed_opaque_existential_1(v67, v68);
      v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
      v56 = sub_24256D5B4(v55);
      swift_bridgeObjectRelease();
      if (v56)
      {
        swift_bridgeObjectRetain();
        v49 = sub_24256C650(v56, v47);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v47 = v49;
        goto LABEL_31;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    }
    else
    {
      sub_2425264C4((uint64_t)&v64, &qword_2571FDD18);
    }
    swift_unknownObjectRelease();
LABEL_31:
    v48 += 2;
    --v46;
  }
  while (v46);
  swift_bridgeObjectRelease_n();
  v44 = v59;
LABEL_46:
  sub_242566054(v44, v47, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_242588900((uint64_t)v67, (uint64_t *)a1);
  swift_release();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_24256D4C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  _BYTE v10[32];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_242526478(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_24251DEC8(v8, (uint64_t)v11);
    v4 = v12;
    v5 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    a2[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC900);
    *a2 = v6;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_2425264C4((uint64_t)v8, &qword_2571FCCA0);
    return sub_242526478(a1, (uint64_t)a2);
  }
}

unint64_t sub_24256D5B4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  __int128 v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  __int128 v22;
  _OWORD v23[2];
  _OWORD v24[2];
  __int128 v25;
  _OWORD v26[2];
  _OWORD v27[2];
  _OWORD v28[2];
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD080);
    v2 = (_QWORD *)sub_2425A0158();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v20 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (v5)
    goto LABEL_9;
LABEL_10:
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
    goto LABEL_36;
  if (v11 >= v21)
    goto LABEL_32;
  v12 = *(_QWORD *)(v20 + 8 * v11);
  ++v7;
  if (!v12)
  {
    v7 = v11 + 1;
    if (v11 + 1 >= v21)
      goto LABEL_32;
    v12 = *(_QWORD *)(v20 + 8 * v7);
    if (!v12)
    {
      v7 = v11 + 2;
      if (v11 + 2 >= v21)
        goto LABEL_32;
      v12 = *(_QWORD *)(v20 + 8 * v7);
      if (!v12)
      {
        v13 = v11 + 3;
        if (v13 < v21)
        {
          v12 = *(_QWORD *)(v20 + 8 * v13);
          if (v12)
          {
            v7 = v13;
            goto LABEL_23;
          }
          while (1)
          {
            v7 = v13 + 1;
            if (__OFADD__(v13, 1))
              goto LABEL_37;
            if (v7 >= v21)
              break;
            v12 = *(_QWORD *)(v20 + 8 * v7);
            ++v13;
            if (v12)
              goto LABEL_23;
          }
        }
LABEL_32:
        swift_release();
        return (unint64_t)v2;
      }
    }
  }
LABEL_23:
  v5 = (v12 - 1) & v12;
  for (i = __clz(__rbit64(v12)) + (v7 << 6); ; i = v9 | (v7 << 6))
  {
    sub_24255BA44(*(_QWORD *)(a1 + 48) + 40 * i, (uint64_t)v31);
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v32 + 8);
    v29[0] = v32[0];
    v29[1] = v32[1];
    v30 = v33;
    v28[0] = v31[0];
    v28[1] = v31[1];
    sub_24255BA44((uint64_t)v28, (uint64_t)v23);
    if (!swift_dynamicCast() || !*((_QWORD *)&v22 + 1))
    {
      sub_2425264C4((uint64_t)v28, &qword_2571FDD38);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    sub_242526478((uint64_t)v29 + 8, (uint64_t)v23);
    sub_2425264C4((uint64_t)v28, &qword_2571FDD38);
    sub_2425264B4(v23, v24);
    v25 = v22;
    sub_2425264B4(v24, v26);
    v14 = v25;
    sub_2425264B4(v26, v27);
    sub_2425264B4(v27, &v25);
    result = sub_24255A05C(v14, *((uint64_t *)&v14 + 1));
    v15 = result;
    if ((v16 & 1) != 0)
    {
      *(_OWORD *)(v2[6] + 16 * result) = v14;
      swift_bridgeObjectRelease();
      v8 = (_OWORD *)(v2[7] + 32 * v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      result = (unint64_t)sub_2425264B4(&v25, v8);
      if (!v5)
        goto LABEL_10;
      goto LABEL_9;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v14;
    result = (unint64_t)sub_2425264B4(&v25, (_OWORD *)(v2[7] + 32 * result));
    v17 = v2[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_35;
    v2[2] = v19;
    if (!v5)
      goto LABEL_10;
LABEL_9:
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_24256D944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_getObjectType();
  sub_2425A0230();
  sub_24259FB70();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC780);
  MEMORY[0x2426A7958](v1, v2);
  sub_24259FB70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  v3 = swift_bridgeObjectRetain();
  MEMORY[0x2426A7958](v3, v2);
  sub_24259FB70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24256DA40()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_24256DA64()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Call()
{
  return objc_opt_self();
}

uint64_t sub_24256DAC0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

unint64_t sub_24256DAEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2571FDD10;
  if (!qword_2571FDD10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2571FC900);
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2571FDD10);
  }
  return result;
}

uint64_t sub_24256DB38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  _OWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  _OWORD v46[2];
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v50 = a1;
  v51 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v52 = v8;
  v53 = 0;
  v54 = v11 & v9;
  v55 = a2;
  v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24256E05C(&v48);
  v12 = *((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_27;
  v13 = v48;
  sub_2425264B4(v49, v47);
  v14 = *(_QWORD **)a5;
  v16 = sub_24255A05C(v13, v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_24255ACCC();
      if ((v20 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v24 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v25 = (uint64_t *)(v24[6] + 16 * v16);
    *v25 = v13;
    v25[1] = v12;
    sub_2425264B4(v47, (_OWORD *)(v24[7] + 32 * v16));
    v26 = v24[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    sub_24256E05C(&v48);
    for (i = *((_QWORD *)&v48 + 1); *((_QWORD *)&v48 + 1); i = *((_QWORD *)&v48 + 1))
    {
      v31 = v48;
      sub_2425264B4(v49, v47);
      v32 = *(_QWORD **)a5;
      v34 = sub_24255A05C(v31, i);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_28;
      v38 = v33;
      if (v32[3] < v37)
      {
        sub_242599C5C(v37, 1);
        v39 = sub_24255A05C(v31, i);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_30;
        v34 = v39;
      }
      if ((v38 & 1) != 0)
      {
        sub_242526478((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        swift_bridgeObjectRelease();
        v30 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        sub_2425264B4(v46, v30);
      }
      else
      {
        v41 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v42 = (uint64_t *)(v41[6] + 16 * v34);
        *v42 = v31;
        v42[1] = i;
        sub_2425264B4(v47, (_OWORD *)(v41[7] + 32 * v34));
        v43 = v41[2];
        v27 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v27)
          goto LABEL_29;
        v41[2] = v44;
      }
      sub_24256E05C(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_2425213C4();
    return swift_release();
  }
  sub_242599C5C(v19, a4 & 1);
  v21 = sub_24255A05C(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_242526478((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    swift_bridgeObjectRelease();
    v23 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    sub_2425264B4(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  result = sub_2425A0290();
  __break(1u);
  return result;
}

uint64_t sub_24256DE8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_242526478((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24256DECC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    v11(&v19, v20);
    swift_release();
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_24256E05C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_242526478(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_24255F8CC((uint64_t)&v23, (uint64_t)v22, &qword_2571FDD28);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_2425264C4((uint64_t)v21, &qword_2571FDD30);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

unint64_t sub_24256E240()
{
  unint64_t result;

  result = qword_2571FDD48;
  if (!qword_2571FDD48)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6BD4, &type metadata for Call.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDD48);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Call.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24256E2D0 + 4 * byte_2425C6AAD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24256E304 + 4 * asc_2425C6AA8[v4]))();
}

uint64_t sub_24256E304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24256E30C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24256E314);
  return result;
}

uint64_t sub_24256E320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24256E328);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24256E32C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24256E334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Call.CodingKeys()
{
  return &type metadata for Call.CodingKeys;
}

unint64_t sub_24256E354()
{
  unint64_t result;

  result = qword_2571FDD50;
  if (!qword_2571FDD50)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6BAC, &type metadata for Call.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDD50);
  }
  return result;
}

unint64_t sub_24256E39C()
{
  unint64_t result;

  result = qword_2571FDD58;
  if (!qword_2571FDD58)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6AE4, &type metadata for Call.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDD58);
  }
  return result;
}

unint64_t sub_24256E3E4()
{
  unint64_t result;

  result = qword_2571FDD60;
  if (!qword_2571FDD60)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6B0C, &type metadata for Call.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDD60);
  }
  return result;
}

uint64_t sub_24256E428()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_24256E470(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255D91C(*a1, *a2);
}

uint64_t sub_24256E47C()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256E520()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24256E5A0()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256E640@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24256F378();
  *a1 = result;
  return result;
}

void sub_24256E66C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x6B636F6C426669;
  if (*v1 != 1)
  {
    v3 = 0x636F6C4265736C65;
    v2 = 0xE90000000000006BLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6F697469646E6F63;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE90000000000006ELL;
  *a1 = v4;
  a1[1] = v5;
}

uint64_t sub_24256E6D0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6B636F6C426669;
  if (*v0 != 1)
    v1 = 0x636F6C4265736C65;
  if (*v0)
    return v1;
  else
    return 0x6F697469646E6F63;
}

uint64_t sub_24256E730@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24256F378();
  *a1 = result;
  return result;
}

uint64_t sub_24256E754()
{
  sub_24256F148();
  return sub_2425A0344();
}

uint64_t sub_24256E77C()
{
  sub_24256F148();
  return sub_2425A0350();
}

uint64_t sub_24256E7A4(_QWORD *a1)
{
  swift_allocObject();
  return sub_24256E7EC(a1);
}

uint64_t sub_24256E7EC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];
  char v13;

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FDEB8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[8] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24256F148();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
    type metadata accessor for Choice();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_24258D124((uint64_t)v8, 0);
    v1[6] = v10;
    v13 = 1;
    type metadata accessor for LexicalBlock();
    sub_24256F18C();
    sub_2425A01D0();
    v1[7] = v12[0];
    v13 = 2;
    sub_2425A01D0();
    v1[8] = v12[0];
    swift_release();
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24256EA5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  char v31;
  _QWORD v32[6];

  v3 = v2;
  v4 = v1;
  v6 = v1[6];
  ObjectType = swift_getObjectType();
  v8 = MEMORY[0x2426A8918](v1 + 3);
  v9 = v1[4];
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  v11 = v1[7];
  MEMORY[0x2426A8918](v4 + 3);
  *(_QWORD *)(v11 + 32) = v4[4];
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  v12 = v4[8];
  if (v12)
  {
    MEMORY[0x2426A8918](v4 + 3);
    *(_QWORD *)(v12 + 32) = v4[4];
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  v13 = v4[6];
  v14 = swift_getObjectType();
  v15 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v13 + 64);
  swift_unknownObjectRetain();
  v15(&v29, v14, v13);
  result = swift_unknownObjectRelease();
  if (!v3)
  {
    if (v31)
    {
      sub_242557D30((uint64_t)&v29);
      if (qword_2571FC5C8 != -1)
        swift_once();
      v17 = sub_24259F930();
      __swift_project_value_buffer(v17, (uint64_t)qword_2571FFB10);
      swift_retain_n();
      v18 = sub_24259F918();
      v19 = sub_24259FE70();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        *(_QWORD *)&v29 = v21;
        *(_DWORD *)v20 = 136315394;
        v22 = v4[5];
        swift_getObjectType();
        v32[0] = v22;
        v23 = sub_2425A01E8();
        v32[0] = sub_24259B370(v23, v24, (uint64_t *)&v29);
        sub_24259FE94();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2048;
        v25 = v4[2];
        swift_release();
        v32[0] = v25;
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v18, v19, "Choice> Invalid %s. line %ld", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v21, -1, -1);
        MEMORY[0x2426A88B8](v20, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      sub_242554B60();
      swift_allocError();
      *v28 = 52;
      return swift_willThrow();
    }
    else
    {
      sub_24255BAB4((uint64_t)&v29, (uint64_t)v32);
      sub_24256F0C4((uint64_t)v32, (uint64_t)&v29);
      if (*((_QWORD *)&v30 + 1))
      {
        sub_24252123C();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v26 = (void *)v32[5];
          v27 = sub_24259FD98();

          if ((v27 & 1) != 0)
          {
            swift_retain();
            sub_242598C7C(a1);
            sub_2425264C4((uint64_t)v32, &qword_2571FC790);
            return swift_release();
          }
        }
      }
      else
      {
        sub_2425264C4((uint64_t)&v29, &qword_2571FC790);
      }
      if (v4[8])
      {
        swift_retain();
        sub_242598C7C((uint64_t)&v29);
        sub_2425264C4((uint64_t)v32, &qword_2571FC790);
        swift_release();
        return sub_24256F10C((uint64_t)&v29, a1);
      }
      else
      {
        sub_2425264C4((uint64_t)v32, &qword_2571FC790);
        v29 = 0u;
        v30 = 0u;
        v31 = -1;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_BYTE *)(a1 + 32) = 0;
        return sub_2425264C4((uint64_t)&v29, &qword_2571FDEB0);
      }
    }
  }
  return result;
}

uint64_t sub_24256EEB4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  swift_getObjectType();
  sub_2425A01E8();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_retain();
  v1 = sub_242598E28();
  v3 = v2;
  swift_release();
  sub_242585A04(v1, v3);
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  result = 673212009;
  if (*(_QWORD *)(v0 + 64))
  {
    swift_retain();
    v5 = sub_242598E28();
    sub_242585A04(v5, v6);
    swift_bridgeObjectRelease();
    sub_24259FB70();
    swift_bridgeObjectRelease();
    sub_24259FB70();
    sub_24259FB70();
    swift_release();
    swift_bridgeObjectRelease();
    return 673212009;
  }
  return result;
}

uint64_t sub_24256F044()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_24256F068()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Choice()
{
  return objc_opt_self();
}

uint64_t sub_24256F0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24256F10C(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

unint64_t sub_24256F148()
{
  unint64_t result;

  result = qword_2571FDEC0;
  if (!qword_2571FDEC0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6D54, &type metadata for Choice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDEC0);
  }
  return result;
}

unint64_t sub_24256F18C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2571FCE40;
  if (!qword_2571FCE40)
  {
    v1 = type metadata accessor for LexicalBlock();
    result = MEMORY[0x2426A87E0](&unk_2425C9154, v1);
    atomic_store(result, (unint64_t *)&qword_2571FCE40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Choice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24256F220 + 4 * byte_2425C6C2D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24256F254 + 4 * byte_2425C6C28[v4]))();
}

uint64_t sub_24256F254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24256F25C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24256F264);
  return result;
}

uint64_t sub_24256F270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24256F278);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24256F27C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24256F284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Choice.CodingKeys()
{
  return &type metadata for Choice.CodingKeys;
}

unint64_t sub_24256F2A4()
{
  unint64_t result;

  result = qword_2571FDEC8;
  if (!qword_2571FDEC8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6D2C, &type metadata for Choice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDEC8);
  }
  return result;
}

unint64_t sub_24256F2EC()
{
  unint64_t result;

  result = qword_2571FDED0;
  if (!qword_2571FDED0)
  {
    result = MEMORY[0x2426A87E0]("e", &type metadata for Choice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDED0);
  }
  return result;
}

unint64_t sub_24256F334()
{
  unint64_t result;

  result = qword_2571FDED8;
  if (!qword_2571FDED8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6C8C, &type metadata for Choice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FDED8);
  }
  return result;
}

uint64_t sub_24256F378()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_24256F3C0(char *a1, char *a2)
{
  return sub_24255D884(*a1, *a2);
}

uint64_t sub_24256F3CC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256F440()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24256F490()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256F500@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24256F55C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6779489;
  if (*v1)
    v2 = 0x65756C6176;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24256F590()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 6779489;
}

uint64_t sub_24256F5C0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24256F620()
{
  sub_24256FB44();
  return sub_2425A0344();
}

uint64_t sub_24256F648()
{
  sub_24256FB44();
  return sub_2425A0350();
}

uint64_t sub_24256F670(_QWORD *a1)
{
  swift_allocObject();
  return sub_24256F6B8(a1);
}

uint64_t sub_24256F6B8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE018);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[5] = 0;
  v1[6] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24256FB44();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    type metadata accessor for Keyword();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v13[0]) = 0;
    v1[5] = sub_2425A01A0();
    v1[6] = v9;
    swift_bridgeObjectRelease();
    v1[7] = sub_24258D140((uint64_t)v8, 1);
    v1[8] = v11;
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v13);
    v3 = sub_24259BC74(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24256F894@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  unint64_t v18;
  _QWORD v19[5];
  _OWORD v20[2];

  v3 = v2;
  v4 = v1;
  v6 = v1[8];
  ObjectType = swift_getObjectType();
  v8 = MEMORY[0x2426A8918](v1 + 3);
  v9 = v1[4];
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  v11 = v1[8];
  v12 = swift_getObjectType();
  v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  v13(v19, v12, v11);
  result = swift_unknownObjectRelease();
  if (!v3)
  {
    sub_242591630(v20);
    sub_242557D30((uint64_t)v19);
    v15 = v1[6];
    if (v15)
    {
      v16 = v4[5];
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE008);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
      *(_QWORD *)(inited + 32) = v16;
      *(_QWORD *)(inited + 40) = v15;
      swift_bridgeObjectRetain();
      sub_242588D2C((uint64_t)v20, (uint64_t *)(inited + 48));
      v18 = sub_2425583E8(inited);
      *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE010);
      *(_QWORD *)a1 = v18;
    }
    else
    {
      sub_242588D2C((uint64_t)v20, (uint64_t *)a1);
    }
    result = sub_24256FB04((uint64_t)v20);
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_24256FA04()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 48))
  {
    v2 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRetain();
    sub_24259FB70();
  }
  else
  {
    v2 = 10794;
  }
  swift_getObjectType();
  sub_2425A01E8();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24256FA94()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_24256FAB0()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Keyword()
{
  return objc_opt_self();
}

uint64_t sub_24256FB04(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24256FB44()
{
  unint64_t result;

  result = qword_2571FE020;
  if (!qword_2571FE020)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6EF4, &type metadata for Keyword.KeywordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE020);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Keyword.KeywordCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24256FBD4 + 4 * byte_2425C6DB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24256FC08 + 4 * byte_2425C6DB0[v4]))();
}

uint64_t sub_24256FC08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24256FC10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24256FC18);
  return result;
}

uint64_t sub_24256FC24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24256FC2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24256FC30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24256FC38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Keyword.KeywordCodingKeys()
{
  return &type metadata for Keyword.KeywordCodingKeys;
}

unint64_t sub_24256FC58()
{
  unint64_t result;

  result = qword_2571FE028;
  if (!qword_2571FE028)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6ECC, &type metadata for Keyword.KeywordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE028);
  }
  return result;
}

unint64_t sub_24256FCA0()
{
  unint64_t result;

  result = qword_2571FE030;
  if (!qword_2571FE030)
  {
    result = MEMORY[0x2426A87E0]("%", &type metadata for Keyword.KeywordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE030);
  }
  return result;
}

unint64_t sub_24256FCE8()
{
  unint64_t result;

  result = qword_2571FE038;
  if (!qword_2571FE038)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6E2C, &type metadata for Keyword.KeywordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE038);
  }
  return result;
}

uint64_t sub_24256FD2C(char *a1, char *a2)
{
  return sub_24255E558(*a1, *a2);
}

uint64_t sub_24256FD38()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256FDAC()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24256FDFC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24256FE6C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24256FEC8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7563378;
  if (!*v1)
    v2 = 0x746567726174;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24256FEFC()
{
  _BYTE *v0;

  if (*v0)
    return 7563378;
  else
    return 0x746567726174;
}

uint64_t sub_24256FF2C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24256FF8C()
{
  sub_242570A7C();
  return sub_2425A0344();
}

uint64_t sub_24256FFB4()
{
  sub_242570A7C();
  return sub_2425A0350();
}

uint64_t sub_24256FFDC(_QWORD *a1)
{
  swift_allocObject();
  return sub_242570024(a1);
}

uint64_t sub_242570024(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE170);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242570A7C();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Assignment();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_24258E8C4((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_24258E8C4((uint64_t)v8, 1);
    v1[8] = v11;
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v13);
    v3 = sub_24259BC74(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_2425701F8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_0;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t i;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  uint64_t v67;
  _OWORD v68[2];
  _QWORD v69[7];
  uint64_t v70;

  v3 = v2;
  v4 = v1;
  v70 = a1;
  v5 = v1[6];
  ObjectType = swift_getObjectType();
  v7 = MEMORY[0x2426A8918](v1 + 3);
  v8 = v1[4];
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  v10 = v1[8];
  v11 = swift_getObjectType();
  v12 = MEMORY[0x2426A8918](v1 + 3);
  v13 = v1[4];
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  v14(v12, v13, v11, v10);
  swift_unknownObjectRelease();
  v15 = v1[6];
  v16 = swift_getObjectType();
  v17 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 64);
  swift_unknownObjectRetain();
  v17(v69, v16, v15);
  if (v3)
    return swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v18 = v1[8];
  v19 = swift_getObjectType();
  v20 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v18 + 64);
  swift_unknownObjectRetain();
  v20(&v64, v19, v18);
  swift_unknownObjectRelease();
  sub_242591630(&v59);
  sub_242557D30((uint64_t)&v64);
  if (!*((_QWORD *)&v60 + 1))
  {
    sub_242557D30((uint64_t)v69);
    v24 = &qword_2571FC790;
LABEL_8:
    result = sub_2425264C4((uint64_t)&v59, v24);
    goto LABEL_17;
  }
  sub_2425264B4(&v59, v68);
  sub_242591A28((uint64_t)&v59);
  if (*((_QWORD *)&v60 + 1))
  {
    v66[0] = v61;
    v66[1] = v62;
    v67 = v63;
    v64 = v59;
    v65 = v60;
    v22 = *((_QWORD *)&v60 + 1);
    v23 = v61;
    __swift_project_boxed_opaque_existential_1(&v64, *((uint64_t *)&v60 + 1));
    sub_242588900((uint64_t)v68, (uint64_t *)&v59);
    (*(void (**)(char *, __int128 *, uint64_t, uint64_t))(v23 + 8))((char *)v66 + 8, &v59, v22, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    sub_242557D30((uint64_t)v69);
    result = sub_242570A48((uint64_t)&v64);
LABEL_17:
    v41 = (_OWORD *)v70;
    *(_BYTE *)(v70 + 32) = 0;
    *v41 = 0u;
    v41[1] = 0u;
    return result;
  }
  sub_2425264C4((uint64_t)&v59, &qword_2571FE168);
  v25 = sub_242591AEC();
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    result = sub_242557D30((uint64_t)v69);
    goto LABEL_17;
  }
  v26 = v25;
  sub_242526478((uint64_t)v68, (uint64_t)v53);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD660);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_QWORD *)&v61 = 0;
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    sub_242557D30((uint64_t)v69);
    v24 = &qword_2571FD648;
    goto LABEL_8;
  }
  sub_24251DEC8(&v59, (uint64_t)&v64);
  v27 = *(_QWORD *)(v26 + 16);
  __swift_project_boxed_opaque_existential_1(&v64, *((uint64_t *)&v65 + 1));
  if (v27 == sub_24259FDE0())
  {
    v28 = __swift_project_boxed_opaque_existential_1(&v64, *((uint64_t *)&v65 + 1));
    MEMORY[0x24BDAC7A8](v28);
    (*(void (**)(char *))(v30 + 16))((char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    *((_QWORD *)&v60 + 1) = swift_getAssociatedTypeWitness();
    *(_QWORD *)&v61 = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v59);
    sub_24259FC0C();
    v48 = v26;
    v49 = v26 + 72;
    for (i = 0; ; i = v37 + 1)
    {
      v51 = v61;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v59, *((uint64_t *)&v60 + 1));
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v32 = sub_24259FE7C();
      v4 = *(_QWORD **)(v32 - 8);
      MEMORY[0x24BDAC7A8](v32);
      v34 = (char *)&v47 - v33;
      sub_24259FE88();
      v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, AssociatedTypeWitness) == 1)
      {
        ((void (*)(char *, uint64_t))v4[1])(v34, v32);
        v57 = 0u;
        v58 = 0u;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
        sub_242557D30((uint64_t)v69);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
        goto LABEL_17;
      }
      *((_QWORD *)&v58 + 1) = AssociatedTypeWitness;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v57);
      (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(boxed_opaque_existential_0, v34, AssociatedTypeWitness);
      sub_2425264B4(&v57, v56);
      v37 = i;
      if (i >= *(_QWORD *)(v48 + 16))
        break;
      v38 = v49;
      sub_24251DE5C(v49 - 40, (uint64_t)v53);
      v39 = v54;
      v40 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      sub_242526478(v38, (uint64_t)v52);
      (*(void (**)(_BYTE *, _OWORD *, uint64_t, uint64_t))(v40 + 8))(v52, v56, v39, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
      v49 = v38 + 72;
    }
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  if (qword_2571FC5C8 != -1)
LABEL_26:
    swift_once();
  v42 = sub_24259F930();
  __swift_project_value_buffer(v42, (uint64_t)qword_2571FFB10);
  swift_retain();
  v43 = sub_24259F918();
  v44 = sub_24259FE70();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v45 = 134217984;
    *(_QWORD *)&v59 = v4[2];
    sub_24259FE94();
    swift_release();
    _os_log_impl(&dword_2422E0000, v43, v44, "Assignment> Invalid tuple decomposition. line %ld", v45, 0xCu);
    MEMORY[0x2426A88B8](v45, -1, -1);

  }
  else
  {

    swift_release();
  }
  sub_242554B60();
  swift_allocError();
  *v46 = 9;
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  sub_242557D30((uint64_t)v69);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
}

uint64_t sub_24257095C()
{
  swift_getObjectType();
  sub_2425A0230();
  sub_24259FB70();
  swift_getObjectType();
  sub_2425A0230();
  return 0;
}

uint64_t sub_2425709F4()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Assignment()
{
  return objc_opt_self();
}

uint64_t sub_242570A48(uint64_t a1)
{
  destroy for Store(a1);
  return a1;
}

unint64_t sub_242570A7C()
{
  unint64_t result;

  result = qword_2571FE178;
  if (!qword_2571FE178)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7098, &type metadata for Assignment.AssignmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE178);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Assignment.AssignmentCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_242570B0C + 4 * byte_2425C6F55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_242570B40 + 4 * byte_2425C6F50[v4]))();
}

uint64_t sub_242570B40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242570B48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242570B50);
  return result;
}

uint64_t sub_242570B5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242570B64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_242570B68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242570B70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Assignment.AssignmentCodingKeys()
{
  return &type metadata for Assignment.AssignmentCodingKeys;
}

unint64_t sub_242570B90()
{
  unint64_t result;

  result = qword_2571FE180;
  if (!qword_2571FE180)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7070, &type metadata for Assignment.AssignmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE180);
  }
  return result;
}

unint64_t sub_242570BD8()
{
  unint64_t result;

  result = qword_2571FE188;
  if (!qword_2571FE188)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6FA8, &type metadata for Assignment.AssignmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE188);
  }
  return result;
}

unint64_t sub_242570C20()
{
  unint64_t result;

  result = qword_2571FE190;
  if (!qword_2571FE190)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C6FD0, &type metadata for Assignment.AssignmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE190);
  }
  return result;
}

uint64_t Dictionary<>.attribute(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *boxed_opaque_existential_0;
  _QWORD v17[2];

  v10 = sub_24259FE7C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v17 - v12;
  v17[0] = a1;
  v17[1] = a2;
  swift_bridgeObjectRetain();
  MEMORY[0x2426A76A0](v17, a3, MEMORY[0x24BEE0D00], a4, MEMORY[0x24BEE0D10]);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a5 + 24) = a4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a5);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_0, v13, a4);
  }
  return result;
}

BOOL Dictionary<>.has(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BOOL8 v12;
  _QWORD v14[2];

  v8 = sub_24259FE7C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - v10;
  v14[0] = a1;
  v14[1] = a2;
  swift_bridgeObjectRetain();
  MEMORY[0x2426A76A0](v14, a3, MEMORY[0x24BEE0D00], a4, MEMORY[0x24BEE0D10]);
  swift_bridgeObjectRelease();
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 48))(v11, 1, a4) != 1;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

uint64_t sub_242570E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return Dictionary<>.attribute(for:)(a1, a2, *v4, *(_QWORD *)(a3 + 24), a4);
}

BOOL sub_242570E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Dictionary<>.has(attribute:)(a1, a2, *v3, *(_QWORD *)(a3 + 24));
}

uint64_t dispatch thunk of Attributable.attribute(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of Attributable.has(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_242570E94()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_242570EE0()
{
  return sub_24259FB40();
}

uint64_t sub_242570EF4()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_242570F3C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_242570F8C(_QWORD *a1@<X8>)
{
  *a1 = 0x7365756C6176;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_242570FA4()
{
  return 0x7365756C6176;
}

uint64_t sub_242570FB8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_24257100C()
{
  sub_242571534();
  return sub_2425A0344();
}

uint64_t sub_242571034()
{
  sub_242571534();
  return sub_2425A0350();
}

uint64_t sub_24257105C(_QWORD *a1)
{
  swift_allocObject();
  return sub_2425710A4(a1);
}

uint64_t sub_2425710A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v12[5];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE2A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242571534();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for JoinedStr();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v3 + 40) = sub_242591C48((uint64_t)v8);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v9 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_24257122C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  char v18;
  _BYTE v19[32];
  _QWORD v20[5];
  uint64_t v21[6];
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = v2;
  v4 = 0xE000000000000000;
  v22 = 0;
  v23 = 0xE000000000000000;
  result = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(result + 16);
  if (v6)
  {
    v7 = v1;
    v16 = a1;
    v24 = v1 + 24;
    v8 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      v9 = *v8;
      ObjectType = swift_getObjectType();
      v11 = MEMORY[0x2426A8918](v24);
      v12 = *(_QWORD *)(v7 + 32);
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v13(v11, v12, ObjectType, v9);
      v21[4] = 0;
      v21[5] = 0xE000000000000000;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v20, ObjectType, v9);
      if (v3)
        break;
      sub_24255F890((uint64_t)v20, (uint64_t)v17);
      if (!v18 || (sub_242557D30((uint64_t)v17), sub_24255F890((uint64_t)v20, (uint64_t)v17), v18 == 1))
      {
        sub_24255BAB4((uint64_t)v17, (uint64_t)v19);
        sub_242588D2C((uint64_t)v19, v21);
        sub_24256FB04((uint64_t)v19);
      }
      else
      {
        sub_242557D30((uint64_t)v17);
        v21[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
        v14 = swift_allocObject();
        v21[0] = v14;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
      }
      sub_242557D30((uint64_t)v20);
      sub_2425A008C();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      sub_24259FB70();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v8 += 2;
      if (!--v6)
      {
        result = swift_bridgeObjectRelease();
        v15 = v22;
        v4 = v23;
        a1 = v16;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v15 = 0;
LABEL_11:
    *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE0D00];
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_242571458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC780);
  v3 = MEMORY[0x2426A7958](v1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_2425714B4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2425714BC()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JoinedStr()
{
  return objc_opt_self();
}

uint64_t sub_242571508()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

unint64_t sub_242571534()
{
  unint64_t result;

  result = qword_2571FE2A8;
  if (!qword_2571FE2A8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7254, &type metadata for JoinedStr.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE2A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for JoinedStr.StrideCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2425715B8 + 4 * byte_2425C7120[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2425715D8 + 4 * byte_2425C7125[v4]))();
}

_BYTE *sub_2425715B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2425715D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2425715E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2425715E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2425715F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2425715F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JoinedStr.StrideCodingKeys()
{
  return &type metadata for JoinedStr.StrideCodingKeys;
}

unint64_t sub_242571618()
{
  unint64_t result;

  result = qword_2571FE2B0;
  if (!qword_2571FE2B0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C722C, &type metadata for JoinedStr.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE2B0);
  }
  return result;
}

unint64_t sub_242571660()
{
  unint64_t result;

  result = qword_2571FE2B8;
  if (!qword_2571FE2B8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7164, &type metadata for JoinedStr.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE2B8);
  }
  return result;
}

unint64_t sub_2425716A8()
{
  unint64_t result;

  result = qword_2571FE2C0;
  if (!qword_2571FE2C0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C718C, &type metadata for JoinedStr.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE2C0);
  }
  return result;
}

uint64_t Int.subtract(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;

  if (a2 == (int)a2)
  {
    v2 = result;
    result = mlx_array_from_int(a2);
    v3 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v3;
      sub_242588564(1, inited, v2);
      swift_setDeallocating();
      return mlx_free(v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2425717AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = *v1;
  if (*v1 == (int)*v1)
  {
    result = mlx_array_from_int(result);
    v4 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v4;
      sub_242588564(1, inited, a1);
      swift_setDeallocating();
      return mlx_free(v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Int32.subtract(_:)(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(1, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242571920(uint64_t a1)
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(1, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t UInt32.subtract(_:)(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(1, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_242571AC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242571AC8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_242571AE0(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = *v1;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(1, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_242571BD0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242571BD8);
  }
  _Unwind_Resume(a1);
}

uint64_t Float.subtract(_:)(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(1, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242571CA0(uint64_t a1)
{
  float *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(1, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Double.subtract(_:)(uint64_t a1, double a2)
{
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = a2;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(1, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242571E08(uint64_t a1)
{
  double *v1;
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = *v1;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(1, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.subtract(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v5 = *v2;
  v12 = 7;
  result = (uint64_t)sub_24256BFA4(a1, &v12);
  if (!v3)
  {
    v7 = result;
    result = (uint64_t)mlx_default_device();
    v8 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v9 = result;
      if (result)
      {
        mlx_free(v8);
        result = (uint64_t)mlx_subtract(v2[2], *(_QWORD *)(v7 + 16), v9);
        v10 = result;
        if (result)
        {
          mlx_free(v9);
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = v10;
          a2[3] = v5;
          result = swift_release();
          *a2 = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_242571FA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLXArray.subtract(_:)(a1, a2);
}

uint64_t dispatch thunk of Subtractable.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_242571FDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255D5B8(*a1, *a2);
}

uint64_t sub_242571FE8()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242572074()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2425720DC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242572164@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2425730A4();
  *a1 = result;
  return result;
}

void sub_242572190(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x65756C6176;
  if (v2 != 1)
  {
    v5 = 7894115;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1920234593;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_2425721DC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65756C6176;
  if (*v0 != 1)
    v1 = 7894115;
  if (*v0)
    return v1;
  else
    return 1920234593;
}

uint64_t sub_242572224@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2425730A4();
  *a1 = result;
  return result;
}

uint64_t sub_242572248()
{
  sub_242572EBC();
  return sub_2425A0344();
}

uint64_t sub_242572270()
{
  sub_242572EBC();
  return sub_2425A0350();
}

uint64_t sub_242572298(_QWORD *a1)
{
  swift_allocObject();
  return sub_2425722E0(a1);
}

uint64_t sub_2425722E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE418);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242572EBC();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Attribute();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v13[0]) = 0;
    *(_QWORD *)(v1 + 40) = sub_2425A01A0();
    *(_QWORD *)(v1 + 48) = v10;
    *(_QWORD *)(v1 + 56) = sub_24258E8E0((uint64_t)v8, 1);
    *(_QWORD *)(v1 + 64) = v11;
    v14 = 2;
    sub_242561984();
    sub_2425A01D0();
    *(_BYTE *)(v1 + 72) = v13[0];
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v13);
    v3 = sub_24259BC74(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24257252C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  _BYTE *v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;

  v3 = v2;
  v4 = (_QWORD *)v1;
  v6 = *(_QWORD *)(v1 + 64);
  ObjectType = swift_getObjectType();
  v8 = MEMORY[0x2426A8918](v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  result = swift_unknownObjectRelease();
  if (*(_BYTE *)(v1 + 72))
  {
    if (*(_BYTE *)(v1 + 72) != 1)
    {
      *(_BYTE *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
    }
    v12 = *(_QWORD *)(v1 + 64);
    v13 = swift_getObjectType();
    v14 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 64);
    swift_unknownObjectRetain();
    v14(&v58, v13, v12);
    result = swift_unknownObjectRelease();
    if (v3)
      return result;
    sub_2425916F0((uint64_t)&v60);
    sub_242557D30((uint64_t)&v58);
    if (v61)
    {
      sub_24251DEC8(&v60, (uint64_t)v62);
      sub_24251DE5C((uint64_t)v62, (uint64_t)&v60);
      v16 = *(_QWORD *)(v1 + 40);
      v15 = *(_QWORD *)(v1 + 48);
      v59 = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v58 = v16;
      *((_QWORD *)&v58 + 1) = v15;
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      *(_QWORD *)(a1 + 24) = &type metadata for Store;
      v17 = swift_allocObject();
      *(_QWORD *)a1 = v17;
      sub_24251DEC8(&v60, v17 + 16);
      result = (uint64_t)sub_2425264B4(&v58, (_OWORD *)(v17 + 56));
      *(_BYTE *)(a1 + 32) = 0;
      return result;
    }
    sub_2425264C4((uint64_t)&v60, &qword_2571FD5F0);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v26 = sub_24259F930();
    __swift_project_value_buffer(v26, (uint64_t)qword_2571FFB10);
    swift_retain_n();
    v27 = sub_24259F918();
    v28 = sub_24259FE70();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v62[0] = v30;
      *(_DWORD *)v29 = 136315394;
      v31 = *(_QWORD *)(v1 + 56);
      swift_getObjectType();
      *(_QWORD *)&v60 = v31;
      v32 = sub_2425A01E8();
      *(_QWORD *)&v60 = sub_24259B370(v32, v33, v62);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2048;
      v34 = v4[2];
      swift_release();
      *(_QWORD *)&v60 = v34;
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v27, v28, "Attribute> %s is not Storable. line %ld", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v30, -1, -1);
      MEMORY[0x2426A88B8](v29, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_242554B60();
    swift_allocError();
    v56 = 13;
    goto LABEL_27;
  }
  v18 = *(_QWORD *)(v1 + 64);
  v19 = swift_getObjectType();
  v20 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v18 + 64);
  swift_unknownObjectRetain();
  v20(&v58, v19, v18);
  result = swift_unknownObjectRelease();
  if (v3)
    return result;
  sub_2425916FC((uint64_t)&v60);
  sub_242557D30((uint64_t)&v58);
  if (!v61)
  {
    sub_2425264C4((uint64_t)&v60, &qword_2571FE410);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v35 = sub_24259F930();
    __swift_project_value_buffer(v35, (uint64_t)qword_2571FFB10);
    swift_retain_n();
    v36 = sub_24259F918();
    v37 = sub_24259FE70();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v62[0] = v39;
      *(_DWORD *)v38 = 136315394;
      v40 = *(_QWORD *)(v1 + 56);
      swift_getObjectType();
      *(_QWORD *)&v60 = v40;
      v41 = sub_2425A01E8();
      *(_QWORD *)&v60 = sub_24259B370(v41, v42, v62);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2048;
      v43 = v4[2];
      swift_release();
      *(_QWORD *)&v60 = v43;
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v36, v37, "Attribute> %s is not Attributable. line %ld", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v39, -1, -1);
      MEMORY[0x2426A88B8](v38, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_242554B60();
    swift_allocError();
    v56 = 10;
LABEL_27:
    *v55 = v56;
    return swift_willThrow();
  }
  sub_24251DEC8(&v60, (uint64_t)v62);
  v21 = v63;
  v22 = v64;
  __swift_project_boxed_opaque_existential_1(v62, v63);
  v23 = *(_QWORD *)(v1 + 40);
  v24 = *(_QWORD *)(v1 + 48);
  v25 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8);
  swift_bridgeObjectRetain();
  v25(&v58, v23, v24, v21, v22);
  swift_bridgeObjectRelease();
  if (v59)
  {
    sub_2425264B4(&v58, &v60);
    sub_2425264B4(&v60, (_OWORD *)a1);
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    sub_2425264C4((uint64_t)&v58, &qword_2571FC790);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v44 = sub_24259F930();
    __swift_project_value_buffer(v44, (uint64_t)qword_2571FFB10);
    swift_retain_n();
    v45 = sub_24259F918();
    v46 = sub_24259FE70();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc();
      v48 = swift_slowAlloc();
      *(_QWORD *)&v60 = v48;
      *(_DWORD *)v47 = 136315650;
      v49 = *(_QWORD *)(v1 + 56);
      swift_getObjectType();
      *(_QWORD *)&v58 = v49;
      v50 = sub_2425A01E8();
      *(_QWORD *)&v58 = sub_24259B370(v50, v51, (uint64_t *)&v60);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2080;
      v52 = v4[5];
      v53 = v4[6];
      swift_bridgeObjectRetain();
      *(_QWORD *)&v58 = sub_24259B370(v52, v53, (uint64_t *)&v60);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 22) = 2048;
      v54 = v4[2];
      swift_release();
      *(_QWORD *)&v58 = v54;
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v45, v46, "Attribute> %s does not have attribute %s. line %ld", (uint8_t *)v47, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v48, -1, -1);
      MEMORY[0x2426A88B8](v47, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_242554B60();
    swift_allocError();
    *v57 = 11;
    swift_willThrow();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
}

uint64_t sub_242572DA8()
{
  swift_getObjectType();
  sub_2425A0230();
  sub_24259FB70();
  swift_bridgeObjectRetain();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_242572E3C()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Attribute()
{
  return objc_opt_self();
}

uint64_t sub_242572E90()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

unint64_t sub_242572EBC()
{
  unint64_t result;

  result = qword_2571FE420;
  if (!qword_2571FE420)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7464, &type metadata for Attribute.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE420);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Attribute.AttributeCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_242572F4C + 4 * byte_2425C7325[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_242572F80 + 4 * byte_2425C7320[v4]))();
}

uint64_t sub_242572F80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242572F88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242572F90);
  return result;
}

uint64_t sub_242572F9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242572FA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_242572FA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242572FB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Attribute.AttributeCodingKeys()
{
  return &type metadata for Attribute.AttributeCodingKeys;
}

unint64_t sub_242572FD0()
{
  unint64_t result;

  result = qword_2571FE428;
  if (!qword_2571FE428)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C743C, &type metadata for Attribute.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE428);
  }
  return result;
}

unint64_t sub_242573018()
{
  unint64_t result;

  result = qword_2571FE430;
  if (!qword_2571FE430)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7374, &type metadata for Attribute.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE430);
  }
  return result;
}

unint64_t sub_242573060()
{
  unint64_t result;

  result = qword_2571FE438;
  if (!qword_2571FE438)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C739C, &type metadata for Attribute.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE438);
  }
  return result;
}

uint64_t sub_2425730A4()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_2425730EC(uint64_t a1, uint64_t a2)
{
  uint64_t dtype;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  dtype = mlx_array_get_dtype(*(_QWORD *)(a1 + 16));
  result = sub_242553C80(dtype, &v10);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = sub_2425292CC(a2, v10);
  result = (uint64_t)mlx_default_device();
  v7 = result;
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = mlx_default_stream(result);
  v8 = result;
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  mlx_free(v7);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(a1 + 16), *(_QWORD *)(v6 + 16), v8);
  v9 = result;
  if (result)
  {
    mlx_free(v8);
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_2425731E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t dtype;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v10 = *(_QWORD *)(a1 + 16);
  swift_retain();
  dtype = mlx_array_get_dtype(v10);
  result = sub_242553C80(dtype, &v22);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = sub_2425292CC(a2, v22);
  if ((a4 & 1) != 0)
  {
    v19 = 0;
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(v13 + 16);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v15 = mlx_array_get_dtype(v14);
  result = sub_242553C80(v15, &v21);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_14;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16 = sub_2425292CC(a3, v21);
  swift_release();
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(v13 + 16);
  if (v16)
    v19 = *(_QWORD *)(v16 + 16);
  else
    v19 = 0;
LABEL_10:
  result = (uint64_t)mlx_clip(v17, v18, v19, *(_QWORD *)(a5 + 16));
  v20 = result;
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for MLXArray();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v20;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_242573344()
{
  _OWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC788);
  v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_2425C4B60;
  v0[2] = 0u;
  v0[3] = 0u;
  v1 = MEMORY[0x24BEE4AF8];
  v2 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
  type metadata accessor for Function();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v1;
  *(_QWORD *)(v3 + 48) = v1;
  *(_QWORD *)(v3 + 56) = v1;
  *(_QWORD *)(v3 + 64) = v1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_QWORD *)(v3 + 104) = sub_2425583E8(v1);
  *(_QWORD *)(v3 + 16) = 0x79617272612E706ELL;
  *(_QWORD *)(v3 + 24) = 0xE800000000000000;
  *(_QWORD *)(v3 + 32) = &unk_251353180;
  *(_QWORD *)(v3 + 40) = v1;
  *(_QWORD *)(v3 + 48) = v1;
  *(_QWORD *)(v3 + 56) = v1;
  *(_QWORD *)(v3 + 64) = v0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v3 + 104) = v2;
  swift_bridgeObjectRelease();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = sub_24257349C;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(v3 + 112) = sub_242562F84;
  *(_QWORD *)(v3 + 120) = result;
  qword_2571FFB30 = v3;
  return result;
}

uint64_t sub_24257349C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE *v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  _OWORD v21[2];

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v20);
    sub_2425264B4(v20, v21);
    if (*(_QWORD *)(a1 + 16)
      && (v7 = sub_24255A05C(0x6570797464, 0xE500000000000000), (v8 & 1) != 0)
      && (sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v20), (swift_dynamicCast() & 1) != 0))
    {
      sub_242553F9C(v18, v19, (char *)v20);
      v9 = v20[0];
    }
    else
    {
      v9 = 7;
    }
    LOBYTE(v20[0]) = v9;
    v16 = sub_24256BFA4((uint64_t)v21, (unsigned __int8 *)v20);
    if (!v2)
    {
      v17 = v16;
      a2[3] = type metadata accessor for MLXArray();
      *a2 = v17;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v10 = sub_24259F930();
    __swift_project_value_buffer(v10, (uint64_t)qword_2571FFB10);
    v11 = sub_24259F918();
    v12 = sub_24259FE70();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2422E0000, v11, v12, "Missing required args for numpy.array", v13, 2u);
      MEMORY[0x2426A88B8](v13, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v14 = 49;
    return swift_willThrow();
  }
}

_QWORD *static Numpy.toMLXArray(arg:)(uint64_t a1)
{
  return sub_242579CC0(a1);
}

uint64_t sub_2425736A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t dtype;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v58[3];

  v6 = mlx_array_ndim(*(_QWORD *)(a1 + 16));
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain();
  if (v6 != 1)
  {
    mlx_array_ndim(v7);
    v44 = mlx_array_dim(v7, 0);
    if (v44 >= 1)
    {
      v45 = v44;
      type metadata accessor for Stream();
      v46 = 0;
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
        *(_QWORD *)(inited + 56) = MEMORY[0x24BEE1768];
        *(_QWORD *)(inited + 64) = &protocol witness table for Int;
        *(_QWORD *)(inited + 32) = v46;
        v48 = swift_initStackObject();
        result = (uint64_t)mlx_default_device();
        v49 = result;
        if (!result)
          break;
        result = mlx_default_stream(result);
        v50 = result;
        if (!result)
          goto LABEL_51;
        *(_QWORD *)(v48 + 16) = result;
        mlx_free(v49);
        v58[0] = v48;
        v51 = MLXArray.subscript.getter(inited, v58);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        mlx_free(v50);
        swift_bridgeObjectRetain();
        v52 = a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v52 = sub_24251BDB8(0, a2[2] + 1, 1, a2);
        v54 = v52[2];
        v53 = v52[3];
        if (v54 >= v53 >> 1)
          v52 = sub_24251BDB8((_QWORD *)(v53 > 1), v54 + 1, 1, v52);
        v52[2] = v54 + 1;
        v52[v54 + 4] = v46;
        sub_2425736A4(v51, v52, a3, a4);
        swift_release();
        swift_bridgeObjectRelease();
        if (v45 == ++v46)
          return swift_release();
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    return swift_release();
  }
  mlx_array_ndim(v7);
  v8 = mlx_array_dim(v7, 0);
  if (v8 < 1)
    return swift_release();
  v9 = (uint64_t *)(a3 + 16);
  v55 = v8;
  type metadata accessor for Stream();
  v10 = 0;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
    v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = xmmword_2425C4B60;
    *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v11 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v11 + 32) = v10;
    v12 = swift_initStackObject();
    result = (uint64_t)mlx_default_device();
    v14 = result;
    if (!result)
      break;
    result = mlx_default_stream(result);
    v15 = result;
    if (!result)
      goto LABEL_53;
    *(_QWORD *)(v12 + 16) = result;
    mlx_free(v14);
    v58[0] = v12;
    v16 = MLXArray.subscript.getter(v11, v58);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    mlx_free(v15);
    dtype = mlx_array_get_dtype(*(_QWORD *)(v16 + 16));
    sub_242553C80(dtype, v58);
    v18 = sub_2425292CC(0, v58[0]);
    result = (uint64_t)mlx_default_device();
    v19 = result;
    if (!result)
      goto LABEL_54;
    result = mlx_default_stream(result);
    v20 = result;
    if (!result)
      goto LABEL_55;
    mlx_free(v19);
    result = (uint64_t)mlx_not_equal(*(_QWORD *)(v16 + 16), *(_QWORD *)(v18 + 16), v20);
    v21 = result;
    if (!result)
      goto LABEL_56;
    mlx_free(v20);
    swift_release();
    type metadata accessor for MLXArray();
    *(_QWORD *)(swift_initStackObject() + 16) = v21;
    result = (uint64_t)mlx_default_device();
    v22 = result;
    if (!result)
      goto LABEL_57;
    result = mlx_default_stream(result);
    v23 = result;
    if (!result)
      goto LABEL_58;
    mlx_free(v22);
    result = (uint64_t)mlx_all_all(v21, 0, v23);
    v24 = result;
    if (!result)
      goto LABEL_59;
    swift_release();
    mlx_free(v23);
    *(_QWORD *)(swift_initStackObject() + 16) = v24;
    v25 = sub_24256A5E0();
    swift_setDeallocating();
    mlx_free(v24);
    if ((v25 & 1) != 0)
    {
      v26 = a2[2];
      if (v26)
      {
        swift_bridgeObjectRetain();
        v27 = 0;
        while (1)
        {
          v28 = a2[v27 + 4];
          swift_beginAccess();
          v29 = (_QWORD *)*v9;
          result = swift_isUniquelyReferenced_nonNull_native();
          *v9 = (uint64_t)v29;
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_24251DF1C(v29);
            v29 = (_QWORD *)result;
            *v9 = result;
          }
          if (v27 >= v29[2])
            break;
          v30 = &v29[v27];
          v31 = (_QWORD *)v30[4];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v30[4] = v31;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v31 = sub_24251BDB8(0, v31[2] + 1, 1, v31);
            v30[4] = v31;
          }
          v34 = v31[2];
          v33 = v31[3];
          if (v34 >= v33 >> 1)
          {
            v31 = sub_24251BDB8((_QWORD *)(v33 > 1), v34 + 1, 1, v31);
            v30[4] = v31;
          }
          ++v27;
          v31[2] = v34 + 1;
          v31[v34 + 4] = v28;
          swift_endAccess();
          if (v26 == v27)
          {
            swift_bridgeObjectRelease();
            goto LABEL_26;
          }
        }
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_26:
      v35 = *(_QWORD *)(a4 + 16);
      swift_beginAccess();
      v36 = (_QWORD *)*v9;
      result = swift_isUniquelyReferenced_nonNull_native();
      *v9 = (uint64_t)v36;
      if ((result & 1) != 0)
      {
        if (!v35)
          goto LABEL_48;
      }
      else
      {
        result = (uint64_t)sub_24251DF1C(v36);
        v36 = (_QWORD *)result;
        *v9 = result;
        if (!v35)
          goto LABEL_48;
      }
      if (v35 > v36[2])
        goto LABEL_49;
      v37 = v35 - 1;
      v38 = v36 + 4;
      v39 = v35 - 1;
      v40 = (_QWORD *)v36[v39 + 4];
      v41 = swift_isUniquelyReferenced_nonNull_native();
      v38[v39] = v40;
      if ((v41 & 1) == 0)
      {
        v40 = sub_24251BDB8(0, v40[2] + 1, 1, v40);
        v38[v37] = v40;
      }
      v43 = v40[2];
      v42 = v40[3];
      if (v43 >= v42 >> 1)
      {
        v40 = sub_24251BDB8((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
        v38[v37] = v40;
      }
      v40[2] = v43 + 1;
      v40[v43 + 4] = v10;
      swift_endAccess();
    }
    swift_release();
    if (++v10 == v55)
      return swift_release();
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_242573D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v69[9];
  uint64_t v70;

  if (mlx_array_ndim(*(_QWORD *)(a1 + 16)) == 1)
  {
    result = (uint64_t)mlx_default_device();
    v8 = result;
    if (!result)
    {
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    result = mlx_default_stream(result);
    v9 = result;
    if (!result)
    {
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    mlx_free(v8);
    result = (uint64_t)mlx_argsort_all(*(_QWORD *)(a1 + 16), v9);
    v10 = result;
    if (!result)
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    mlx_free(v9);
    result = (uint64_t)mlx_default_device();
    v11 = result;
    if (!result)
    {
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    result = mlx_default_stream(result);
    v12 = result;
    if (!result)
    {
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    mlx_free(v11);
    result = mlx_take_all(*(_QWORD *)(a1 + 16), v10, v12);
    v13 = result;
    if (!result)
    {
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    mlx_free(v12);
    if (mlx_array_size(*(_QWORD *)(a2 + 16)) == 1)
    {
      v14 = *(_QWORD *)(MLXArray.shape.getter() + 16);
      swift_bridgeObjectRelease();
      if (!v14)
      {
        if (a3 == 1952867692 && a4 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
        {
          result = (uint64_t)mlx_default_device();
          v50 = result;
          if (!result)
          {
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
          result = mlx_default_stream(result);
          v51 = result;
          if (!result)
          {
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          mlx_free(v50);
          result = (uint64_t)mlx_less(v13, *(_QWORD *)(a2 + 16), v51);
          v52 = result;
          if (!result)
          {
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          mlx_free(v51);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v52;
          result = (uint64_t)mlx_default_device();
          v53 = result;
          if (!result)
          {
LABEL_98:
            __break(1u);
            goto LABEL_99;
          }
          result = mlx_default_stream(result);
          v54 = result;
          if (!result)
          {
LABEL_99:
            __break(1u);
            goto LABEL_100;
          }
          mlx_free(v53);
          result = (uint64_t)mlx_sum_all(v52, 0, v54);
          v55 = result;
          if (!result)
          {
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }
        }
        else
        {
          result = (uint64_t)mlx_default_device();
          v56 = result;
          if (!result)
          {
LABEL_101:
            __break(1u);
            goto LABEL_102;
          }
          result = mlx_default_stream(result);
          v57 = result;
          if (!result)
          {
LABEL_102:
            __break(1u);
            goto LABEL_103;
          }
          mlx_free(v56);
          result = (uint64_t)mlx_less_equal(v13, *(_QWORD *)(a2 + 16), v57);
          v58 = result;
          if (!result)
          {
LABEL_103:
            __break(1u);
            goto LABEL_104;
          }
          mlx_free(v57);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v58;
          result = (uint64_t)mlx_default_device();
          v59 = result;
          if (!result)
          {
LABEL_104:
            __break(1u);
            goto LABEL_105;
          }
          result = mlx_default_stream(result);
          v54 = result;
          if (!result)
          {
LABEL_105:
            __break(1u);
            goto LABEL_106;
          }
          mlx_free(v59);
          result = (uint64_t)mlx_sum_all(v58, 0, v54);
          v55 = result;
          if (!result)
          {
LABEL_106:
            __break(1u);
            return result;
          }
        }
        swift_release();
        mlx_free(v54);
        *(_QWORD *)(swift_initStackObject() + 16) = v55;
        *(_QWORD *)(a5 + 24) = MEMORY[0x24BEE3F88];
        *(_QWORD *)(a5 + 32) = &protocol witness table for Int32;
        v60 = sub_24256A210();
        swift_setDeallocating();
        mlx_free(v55);
        mlx_free(v13);
        result = mlx_free(v10);
        *(_DWORD *)a5 = v60;
        return result;
      }
    }
    v15 = MLXArray.shape.getter();
    v69[0] = 4;
    type metadata accessor for Stream();
    inited = swift_initStackObject();
    result = (uint64_t)mlx_default_device();
    v17 = result;
    if (!result)
      goto LABEL_93;
    result = mlx_default_stream(result);
    v18 = result;
    if (!result)
    {
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    *(_QWORD *)(inited + 16) = result;
    mlx_free(v17);
    v70 = inited;
    v66 = _s8Morpheus8MLXArrayC5zeros_5dtype6streamACSaySiG_AA5DTypeOAA14StreamOrDeviceVtFZ_0(v15, v69, &v70);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    mlx_free(v18);
    v19 = *(_QWORD *)(a2 + 16);
    swift_retain();
    mlx_array_ndim(v19);
    v67 = v13;
    v20 = mlx_array_dim(v19, 0);
    if (v20 >= 1)
    {
      v61 = a5;
      v21 = 0;
      v64 = v20;
      v23 = a3 == 1952867692 && a4 == 0xE400000000000000;
      v65 = v23;
      v24 = MEMORY[0x24BEE1768];
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
        v25 = swift_initStackObject();
        *(_OWORD *)(v25 + 16) = xmmword_2425C4B60;
        *(_QWORD *)(v25 + 56) = v24;
        *(_QWORD *)(v25 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v25 + 32) = v21;
        v26 = swift_initStackObject();
        result = (uint64_t)mlx_default_device();
        v27 = result;
        if (!result)
          break;
        result = mlx_default_stream(result);
        v28 = result;
        if (!result)
          goto LABEL_70;
        *(_QWORD *)(v26 + 16) = result;
        mlx_free(v27);
        v70 = v26;
        v29 = MLXArray.subscript.getter(v25, &v70);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        mlx_free(v28);
        if (v65 || (sub_2425A0254() & 1) != 0)
        {
          v30 = swift_initStackObject();
          *(_OWORD *)(v30 + 16) = xmmword_2425C4B60;
          *(_QWORD *)(v30 + 56) = v24;
          *(_QWORD *)(v30 + 64) = &protocol witness table for Int;
          *(_QWORD *)(v30 + 32) = v21;
          v31 = swift_initStackObject();
          result = (uint64_t)mlx_default_device();
          v32 = result;
          if (!result)
            goto LABEL_71;
          result = mlx_default_stream(result);
          if (!result)
            goto LABEL_72;
          *(_QWORD *)(v31 + 16) = result;
          mlx_free(v32);
          result = (uint64_t)mlx_default_device();
          v33 = result;
          if (!result)
            goto LABEL_73;
          result = mlx_default_stream(result);
          v34 = result;
          if (!result)
            goto LABEL_74;
          mlx_free(v33);
          result = (uint64_t)mlx_less(v67, *(_QWORD *)(v29 + 16), v34);
          v35 = result;
          if (!result)
            goto LABEL_75;
          mlx_free(v34);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v35;
          result = (uint64_t)mlx_default_device();
          v36 = result;
          if (!result)
            goto LABEL_76;
          result = mlx_default_stream(result);
          v37 = result;
          if (!result)
            goto LABEL_77;
          mlx_free(v36);
          result = (uint64_t)mlx_sum_all(v35, 0, v37);
          v38 = result;
          if (!result)
            goto LABEL_78;
        }
        else
        {
          v39 = swift_initStackObject();
          *(_OWORD *)(v39 + 16) = xmmword_2425C4B60;
          *(_QWORD *)(v39 + 56) = v24;
          *(_QWORD *)(v39 + 64) = &protocol witness table for Int;
          *(_QWORD *)(v39 + 32) = v21;
          v31 = swift_initStackObject();
          result = (uint64_t)mlx_default_device();
          v40 = result;
          if (!result)
            goto LABEL_79;
          result = mlx_default_stream(result);
          if (!result)
            goto LABEL_80;
          *(_QWORD *)(v31 + 16) = result;
          mlx_free(v40);
          result = (uint64_t)mlx_default_device();
          v41 = result;
          if (!result)
            goto LABEL_81;
          result = mlx_default_stream(result);
          v42 = result;
          if (!result)
            goto LABEL_82;
          mlx_free(v41);
          result = (uint64_t)mlx_less_equal(v67, *(_QWORD *)(v29 + 16), v42);
          v43 = result;
          if (!result)
            goto LABEL_83;
          mlx_free(v42);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v43;
          result = (uint64_t)mlx_default_device();
          v44 = result;
          if (!result)
            goto LABEL_84;
          result = mlx_default_stream(result);
          v37 = result;
          if (!result)
            goto LABEL_85;
          mlx_free(v44);
          result = (uint64_t)mlx_sum_all(v43, 0, v37);
          v38 = result;
          if (!result)
            goto LABEL_86;
        }
        swift_release();
        mlx_free(v37);
        *(_QWORD *)(swift_initStackObject() + 16) = v38;
        v70 = v31;
        MLXArray.subscript.setter();
        swift_release();
        ++v21;
        v24 = MEMORY[0x24BEE1768];
        if (v64 == v21)
        {
          swift_release();
          a5 = v61;
          goto LABEL_51;
        }
      }
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    swift_release();
LABEL_51:
    *(_QWORD *)(a5 + 24) = type metadata accessor for MLXArray();
    *(_QWORD *)(a5 + 32) = &protocol witness table for MLXArray;
    mlx_free(v67);
    result = mlx_free(v10);
    *(_QWORD *)a5 = v66;
  }
  else
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v45 = sub_24259F930();
    __swift_project_value_buffer(v45, (uint64_t)qword_2571FFB10);
    swift_retain();
    v46 = sub_24259F918();
    v47 = sub_24259FE70();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v48 = 134217984;
      v70 = mlx_array_ndim(*(_QWORD *)(a1 + 16));
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v46, v47, "Ndim of %ld is not supported for searchsorted", v48, 0xCu);
      MEMORY[0x2426A88B8](v48, -1, -1);

    }
    else
    {

      swift_release();
    }
    sub_242554B60();
    swift_allocError();
    *v49 = 48;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_242574814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  objc_class *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77[3];
  uint64_t v78;
  uint64_t v79;
  char v80;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
  *(_QWORD *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8C8);
  *(_QWORD *)(inited + 64) = &protocol witness table for <> PartialRangeUpTo<A>;
  *(_QWORD *)(inited + 32) = -1;
  type metadata accessor for Stream();
  v5 = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v7 = result;
  if (!result)
    goto LABEL_51;
  result = mlx_default_stream(result);
  v8 = result;
  if (!result)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  *(_QWORD *)(v5 + 16) = result;
  mlx_free(v7);
  v77[0] = v5;
  v9 = MLXArray.subscript.getter(inited, v77);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v8);
  v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_2425C4B60;
  *(_QWORD *)(v10 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8D8);
  *(_QWORD *)(v10 + 64) = &protocol witness table for <> PartialRangeFrom<A>;
  *(_QWORD *)(v10 + 32) = 1;
  v11 = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v12 = result;
  if (!result)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  result = mlx_default_stream(result);
  v13 = result;
  if (!result)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  *(_QWORD *)(v11 + 16) = result;
  mlx_free(v12);
  v77[0] = v11;
  v14 = MLXArray.subscript.getter(v10, v77);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v13);
  result = (uint64_t)mlx_default_device();
  v15 = result;
  if (!result)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  result = mlx_default_stream(result);
  v16 = result;
  if (!result)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  mlx_free(v15);
  result = (uint64_t)mlx_less_equal(*(_QWORD *)(v9 + 16), *(_QWORD *)(v14 + 16), v16);
  v17 = result;
  if (!result)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  mlx_free(v16);
  swift_release();
  swift_release();
  v18 = type metadata accessor for MLXArray();
  *(_QWORD *)(swift_initStackObject() + 16) = v17;
  result = (uint64_t)mlx_default_device();
  v19 = result;
  if (!result)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  result = mlx_default_stream(result);
  v20 = result;
  if (!result)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  mlx_free(v19);
  result = (uint64_t)mlx_all_all(v17, 0, v20);
  v21 = result;
  if (!result)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  swift_release();
  mlx_free(v20);
  *(_QWORD *)(swift_initStackObject() + 16) = v21;
  v22 = sub_24256A5E0();
  swift_setDeallocating();
  mlx_free(v21);
  if ((v22 & 1) == 0)
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v23 = sub_24259F930();
    __swift_project_value_buffer(v23, (uint64_t)qword_2571FFB10);
    v22 = sub_24259F918();
    v24 = sub_24259FE70();
    if (os_log_type_enabled(v22, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_2422E0000, v22, v24, "Array is not monotonically increasing for interp", v25, 2u);
      MEMORY[0x2426A88B8](v25, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v26 = 5;
    swift_willThrow();
    return (uint64_t)v22;
  }
  sub_242573D5C(a2, a1, 1952867692, 0xE400000000000000, (uint64_t)v77);
  if (v2)
    return (uint64_t)v22;
  v27 = v78;
  v28 = v79;
  __swift_project_boxed_opaque_existential_1(v77, v78);
  v80 = 7;
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 8))(&v80, v27, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  result = mlx_array_size(*(_QWORD *)(a2 + 16));
  v30 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v31 = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v32 = result;
  if (!result)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  result = mlx_default_stream(result);
  v33 = result;
  if (!result)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  *(_QWORD *)(v31 + 16) = result;
  mlx_free(v32);
  v34 = sub_2425731E4(v29, 1, v30, 0, v31);
  swift_release();
  swift_setDeallocating();
  mlx_free(v33);
  v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_2425C4B60;
  v36 = swift_retain();
  v37 = sub_2425730EC(v36, 1);
  *(_QWORD *)(v35 + 56) = v18;
  *(_QWORD *)(v35 + 64) = &protocol witness table for MLXArray;
  *(_QWORD *)(v35 + 32) = v37;
  v38 = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v39 = result;
  if (!result)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  result = mlx_default_stream(result);
  v40 = result;
  if (!result)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  *(_QWORD *)(v38 + 16) = result;
  mlx_free(v39);
  v77[0] = v38;
  v74 = MLXArray.subscript.getter(v35, v77);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v40);
  v41 = swift_initStackObject();
  *(_OWORD *)(v41 + 16) = xmmword_2425C4B60;
  *(_QWORD *)(v41 + 56) = v18;
  *(_QWORD *)(v41 + 64) = &protocol witness table for MLXArray;
  *(_QWORD *)(v41 + 32) = v34;
  v42 = swift_initStackObject();
  swift_retain();
  result = (uint64_t)mlx_default_device();
  v43 = result;
  if (!result)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  result = mlx_default_stream(result);
  v44 = result;
  if (!result)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  *(_QWORD *)(v42 + 16) = result;
  mlx_free(v43);
  v77[0] = v42;
  v75 = MLXArray.subscript.getter(v41, v77);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v44);
  v45 = swift_initStackObject();
  *(_OWORD *)(v45 + 16) = xmmword_2425C4B60;
  v46 = sub_2425730EC(v34, 1);
  *(_QWORD *)(v45 + 56) = v18;
  *(_QWORD *)(v45 + 64) = &protocol witness table for MLXArray;
  *(_QWORD *)(v45 + 32) = v46;
  v47 = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v48 = result;
  if (!result)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  result = mlx_default_stream(result);
  v49 = result;
  if (!result)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  *(_QWORD *)(v47 + 16) = result;
  mlx_free(v48);
  v77[0] = v47;
  v50 = MLXArray.subscript.getter(v45, v77);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v49);
  v51 = swift_initStackObject();
  *(_OWORD *)(v51 + 16) = xmmword_2425C4B60;
  *(_QWORD *)(v51 + 56) = v18;
  *(_QWORD *)(v51 + 64) = &protocol witness table for MLXArray;
  *(_QWORD *)(v51 + 32) = v34;
  v52 = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v53 = result;
  if (!result)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  result = mlx_default_stream(result);
  v54 = result;
  if (!result)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  *(_QWORD *)(v52 + 16) = result;
  mlx_free(v53);
  v77[0] = v52;
  v55 = MLXArray.subscript.getter(v51, v77);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  mlx_free(v54);
  result = (uint64_t)mlx_default_device();
  v56 = result;
  if (!result)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  result = mlx_default_stream(result);
  v57 = result;
  if (!result)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  mlx_free(v56);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(v55 + 16), *(_QWORD *)(v50 + 16), v57);
  v58 = result;
  if (!result)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  mlx_free(v57);
  result = (uint64_t)mlx_default_device();
  v59 = result;
  if (!result)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  result = mlx_default_stream(result);
  v60 = result;
  if (!result)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  mlx_free(v59);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(v75 + 16), *(_QWORD *)(v74 + 16), v60);
  v61 = result;
  if (!result)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  mlx_free(v60);
  result = (uint64_t)mlx_default_device();
  v62 = result;
  if (!result)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  result = mlx_default_stream(result);
  v63 = result;
  if (!result)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  mlx_free(v62);
  result = (uint64_t)mlx_divide(v58, v61, v63);
  v64 = result;
  if (!result)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  mlx_free(v63);
  mlx_free(v61);
  mlx_free(v58);
  result = (uint64_t)mlx_default_device();
  v65 = result;
  if (!result)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  result = mlx_default_stream(result);
  v66 = result;
  if (!result)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  mlx_free(v65);
  result = (uint64_t)mlx_subtract(*(_QWORD *)(a1 + 16), *(_QWORD *)(v74 + 16), v66);
  v67 = result;
  if (!result)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  mlx_free(v66);
  result = (uint64_t)mlx_default_device();
  v68 = result;
  if (!result)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  result = mlx_default_stream(result);
  v69 = result;
  if (!result)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  mlx_free(v68);
  result = (uint64_t)mlx_multiply(v64, v67, v69);
  v70 = result;
  if (!result)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  mlx_free(v69);
  mlx_free(v67);
  result = (uint64_t)mlx_default_device();
  v71 = result;
  if (!result)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  result = mlx_default_stream(result);
  v72 = result;
  if (!result)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  mlx_free(v71);
  result = (uint64_t)mlx_add(*(_QWORD *)(v50 + 16), v70, v72);
  v73 = (objc_class *)result;
  if (result)
  {
    mlx_free(v72);
    swift_release();
    mlx_free(v70);
    mlx_free(v64);
    v22 = swift_allocObject();
    v22[2].isa = v73;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v22;
  }
LABEL_88:
  __break(1u);
  return result;
}

unint64_t sub_2425752A8()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t result;
  uint64_t v69;
  _QWORD v70[5];
  __int128 v71;
  __int128 v72;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD638);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
  *(_QWORD *)(inited + 32) = 28782;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  v69 = inited;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE008);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2425C74C0;
  *(_QWORD *)(v1 + 32) = 6712937;
  *(_QWORD *)(v1 + 40) = 0xE300000000000000;
  v2 = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v1 + 48) = 2139095040;
  *(_QWORD *)(v1 + 72) = v2;
  *(_QWORD *)(v1 + 80) = 7233902;
  *(_QWORD *)(v1 + 88) = 0xE300000000000000;
  *(_DWORD *)(v1 + 96) = 2143289344;
  *(_QWORD *)(v1 + 120) = v2;
  *(_QWORD *)(v1 + 128) = 0x79617272617361;
  *(_QWORD *)(v1 + 136) = 0xE700000000000000;
  if (qword_2571FC5D8 != -1)
    swift_once();
  v3 = qword_2571FFB30;
  v4 = type metadata accessor for Function();
  *(_QWORD *)(v1 + 144) = v3;
  *(_QWORD *)(v1 + 168) = v4;
  *(_QWORD *)(v1 + 176) = 0x7961727261;
  *(_QWORD *)(v1 + 184) = 0xE500000000000000;
  *(_QWORD *)(v1 + 192) = v3;
  *(_QWORD *)(v1 + 216) = v4;
  *(_QWORD *)(v1 + 224) = 0x727261796E617361;
  *(_QWORD *)(v1 + 232) = 0xEA00000000007961;
  *(_QWORD *)(v1 + 240) = v3;
  *(_QWORD *)(v1 + 264) = v4;
  *(_QWORD *)(v1 + 272) = 0x5F6C6F6F62;
  v5 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v1 + 280) = 0xE500000000000000;
  *(_QWORD *)(v1 + 288) = 0x5F6C6F6F62;
  *(_QWORD *)(v1 + 296) = 0xE500000000000000;
  *(_QWORD *)(v1 + 312) = v5;
  *(_QWORD *)(v1 + 320) = 0x323374616F6C66;
  *(_QWORD *)(v1 + 328) = 0xE700000000000000;
  *(_QWORD *)(v1 + 336) = 0x323374616F6C66;
  *(_QWORD *)(v1 + 344) = 0xE700000000000000;
  *(_QWORD *)(v1 + 360) = v5;
  *(_QWORD *)(v1 + 368) = 947154537;
  *(_QWORD *)(v1 + 376) = 0xE400000000000000;
  *(_QWORD *)(v1 + 384) = 947154537;
  *(_QWORD *)(v1 + 392) = 0xE400000000000000;
  *(_QWORD *)(v1 + 408) = v5;
  *(_QWORD *)(v1 + 416) = 0x3233746E69;
  *(_QWORD *)(v1 + 424) = 0xE500000000000000;
  *(_QWORD *)(v1 + 432) = 0x3233746E69;
  *(_QWORD *)(v1 + 440) = 0xE500000000000000;
  *(_QWORD *)(v1 + 456) = v5;
  *(_QWORD *)(v1 + 464) = 0x3436746E69;
  *(_QWORD *)(v1 + 472) = 0xE500000000000000;
  *(_QWORD *)(v1 + 480) = 0x3436746E69;
  *(_QWORD *)(v1 + 488) = 0xE500000000000000;
  *(_QWORD *)(v1 + 504) = v5;
  *(_QWORD *)(v1 + 512) = 0x38746E6975;
  *(_QWORD *)(v1 + 520) = 0xE500000000000000;
  *(_QWORD *)(v1 + 552) = v5;
  *(_QWORD *)(v1 + 528) = 0x38746E6975;
  *(_QWORD *)(v1 + 536) = 0xE500000000000000;
  *(_QWORD *)(v1 + 560) = 0x3233746E6975;
  *(_QWORD *)(v1 + 568) = 0xE600000000000000;
  *(_QWORD *)(v1 + 600) = v5;
  *(_QWORD *)(v1 + 576) = 0x3233746E6975;
  *(_QWORD *)(v1 + 584) = 0xE600000000000000;
  *(_QWORD *)(v1 + 608) = 6579297;
  *(_QWORD *)(v1 + 616) = 0xE300000000000000;
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_2425C4B60;
  *(_QWORD *)(v6 + 32) = 0x656375646572;
  *(_QWORD *)(v6 + 40) = 0xE600000000000000;
  swift_retain_n();
  v7 = MEMORY[0x24BEE4AF8];
  v8 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 32) = v7;
  *(_QWORD *)(v9 + 40) = v7;
  *(_QWORD *)(v9 + 48) = v7;
  *(_QWORD *)(v9 + 56) = v7;
  *(_QWORD *)(v9 + 64) = v7;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_QWORD *)(v9 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v9 + 16) = 0x656375646572;
  *(_QWORD *)(v9 + 24) = 0xE600000000000000;
  *(_QWORD *)(v9 + 32) = &unk_251353200;
  *(_QWORD *)(v9 + 40) = v7;
  *(_QWORD *)(v9 + 48) = v7;
  *(_QWORD *)(v9 + 56) = v7;
  *(_QWORD *)(v9 + 64) = v7;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v9 + 104) = v8;
  swift_bridgeObjectRelease();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_24257696C;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v9 + 112) = sub_242562F18;
  *(_QWORD *)(v9 + 120) = v10;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 48) = v9;
  v11 = sub_2425583E8(v6);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 32) = v7;
  *(_QWORD *)(v12 + 40) = v7;
  *(_QWORD *)(v12 + 48) = v7;
  *(_QWORD *)(v12 + 56) = v7;
  *(_QWORD *)(v12 + 64) = v7;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_QWORD *)(v12 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v12 + 16) = 0x6464612E706ELL;
  *(_QWORD *)(v12 + 24) = 0xE600000000000000;
  *(_QWORD *)(v12 + 32) = &unk_2513531C0;
  *(_QWORD *)(v12 + 40) = v7;
  *(_QWORD *)(v12 + 48) = v7;
  *(_QWORD *)(v12 + 56) = v7;
  *(_QWORD *)(v12 + 64) = v7;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v12 + 104) = v11;
  swift_bridgeObjectRelease();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_242577668;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v12 + 112) = sub_242562F84;
  *(_QWORD *)(v12 + 120) = v13;
  *(_QWORD *)(v1 + 648) = v4;
  *(_QWORD *)(v1 + 624) = v12;
  *(_QWORD *)(v1 + 656) = 0x796C7069746C756DLL;
  *(_QWORD *)(v1 + 664) = 0xE800000000000000;
  v14 = sub_2425583E8(v7);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 32) = v7;
  *(_QWORD *)(v15 + 40) = v7;
  *(_QWORD *)(v15 + 48) = v7;
  *(_QWORD *)(v15 + 56) = v7;
  *(_QWORD *)(v15 + 64) = v7;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_QWORD *)(v15 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v15 + 16) = 0x69746C756D2E706ELL;
  *(_QWORD *)(v15 + 24) = 0xEB00000000796C70;
  *(_QWORD *)(v15 + 32) = &unk_251353240;
  *(_QWORD *)(v15 + 40) = v7;
  *(_QWORD *)(v15 + 48) = v7;
  *(_QWORD *)(v15 + 56) = v7;
  *(_QWORD *)(v15 + 64) = v7;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v15 + 104) = v14;
  swift_bridgeObjectRelease();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_242577810;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v15 + 112) = sub_242562F84;
  *(_QWORD *)(v15 + 120) = v16;
  *(_QWORD *)(v1 + 696) = v4;
  *(_QWORD *)(v1 + 672) = v15;
  *(_QWORD *)(v1 + 704) = 0x656469766964;
  *(_QWORD *)(v1 + 712) = 0xE600000000000000;
  v17 = sub_2425583E8(v7);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 32) = v7;
  *(_QWORD *)(v18 + 40) = v7;
  *(_QWORD *)(v18 + 48) = v7;
  *(_QWORD *)(v18 + 56) = v7;
  *(_QWORD *)(v18 + 64) = v7;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_QWORD *)(v18 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v18 + 16) = 0x64697669642E706ELL;
  *(_QWORD *)(v18 + 24) = 0xE900000000000065;
  *(_QWORD *)(v18 + 32) = &unk_251353280;
  *(_QWORD *)(v18 + 40) = v7;
  *(_QWORD *)(v18 + 48) = v7;
  *(_QWORD *)(v18 + 56) = v7;
  *(_QWORD *)(v18 + 64) = v7;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v18 + 104) = v17;
  swift_bridgeObjectRelease();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_2425779B8;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v18 + 112) = sub_242562F84;
  *(_QWORD *)(v18 + 120) = v19;
  *(_QWORD *)(v1 + 744) = v4;
  *(_QWORD *)(v1 + 720) = v18;
  *(_QWORD *)(v1 + 752) = 0x65706168736572;
  *(_QWORD *)(v1 + 760) = 0xE700000000000000;
  v20 = sub_2425583E8(v7);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 32) = v7;
  *(_QWORD *)(v21 + 40) = v7;
  *(_QWORD *)(v21 + 48) = v7;
  *(_QWORD *)(v21 + 56) = v7;
  *(_QWORD *)(v21 + 64) = v7;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  *(_QWORD *)(v21 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v21 + 16) = 0x61687365722E706ELL;
  *(_QWORD *)(v21 + 24) = 0xEA00000000006570;
  *(_QWORD *)(v21 + 32) = &unk_2513532C0;
  *(_QWORD *)(v21 + 40) = v7;
  *(_QWORD *)(v21 + 48) = v7;
  *(_QWORD *)(v21 + 56) = v7;
  *(_QWORD *)(v21 + 64) = v7;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v21 + 104) = v20;
  swift_bridgeObjectRelease();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_242577B60;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v21 + 112) = sub_242562F84;
  *(_QWORD *)(v21 + 120) = v22;
  *(_QWORD *)(v1 + 792) = v4;
  *(_QWORD *)(v1 + 768) = v21;
  *(_QWORD *)(v1 + 800) = 0x657571696E75;
  *(_QWORD *)(v1 + 808) = 0xE600000000000000;
  v23 = sub_2425583E8(v7);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 32) = v7;
  *(_QWORD *)(v24 + 40) = v7;
  *(_QWORD *)(v24 + 48) = v7;
  *(_QWORD *)(v24 + 56) = v7;
  *(_QWORD *)(v24 + 64) = v7;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *(_QWORD *)(v24 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v24 + 16) = 0x7571696E752E706ELL;
  *(_QWORD *)(v24 + 24) = 0xE900000000000065;
  *(_QWORD *)(v24 + 32) = &unk_251353300;
  *(_QWORD *)(v24 + 40) = v7;
  *(_QWORD *)(v24 + 48) = v7;
  *(_QWORD *)(v24 + 56) = v7;
  *(_QWORD *)(v24 + 64) = v7;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v24 + 104) = v23;
  swift_bridgeObjectRelease();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = sub_242577E98;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v24 + 112) = sub_242562F84;
  *(_QWORD *)(v24 + 120) = v25;
  *(_QWORD *)(v1 + 840) = v4;
  *(_QWORD *)(v1 + 816) = v24;
  *(_QWORD *)(v1 + 848) = 0x6C61757165;
  *(_QWORD *)(v1 + 856) = 0xE500000000000000;
  v26 = sub_2425583E8(v7);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 32) = v7;
  *(_QWORD *)(v27 + 40) = v7;
  *(_QWORD *)(v27 + 48) = v7;
  *(_QWORD *)(v27 + 56) = v7;
  *(_QWORD *)(v27 + 64) = v7;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_QWORD *)(v27 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v27 + 16) = 0x6C617571652E706ELL;
  *(_QWORD *)(v27 + 24) = 0xE800000000000000;
  *(_QWORD *)(v27 + 32) = &unk_251353330;
  *(_QWORD *)(v27 + 40) = v7;
  *(_QWORD *)(v27 + 48) = v7;
  *(_QWORD *)(v27 + 56) = v7;
  *(_QWORD *)(v27 + 64) = v7;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v27 + 104) = v26;
  swift_bridgeObjectRelease();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = sub_242578024;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v27 + 112) = sub_242562F84;
  *(_QWORD *)(v27 + 120) = v28;
  *(_QWORD *)(v1 + 888) = v4;
  *(_QWORD *)(v1 + 864) = v27;
  *(_QWORD *)(v1 + 896) = 0x74726F73677261;
  *(_QWORD *)(v1 + 904) = 0xE700000000000000;
  v29 = sub_2425583E8(v7);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 32) = v7;
  *(_QWORD *)(v30 + 40) = v7;
  *(_QWORD *)(v30 + 48) = v7;
  *(_QWORD *)(v30 + 56) = v7;
  *(_QWORD *)(v30 + 64) = v7;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 88) = 0u;
  *(_QWORD *)(v30 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v30 + 16) = 0x6F736772612E706ELL;
  *(_QWORD *)(v30 + 24) = 0xEA00000000007472;
  *(_QWORD *)(v30 + 32) = &unk_251353370;
  *(_QWORD *)(v30 + 40) = v7;
  *(_QWORD *)(v30 + 48) = v7;
  *(_QWORD *)(v30 + 56) = v7;
  *(_QWORD *)(v30 + 64) = v7;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v30 + 104) = v29;
  swift_bridgeObjectRelease();
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = sub_2425781CC;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v30 + 112) = sub_242562F84;
  *(_QWORD *)(v30 + 120) = v31;
  *(_QWORD *)(v1 + 936) = v4;
  *(_QWORD *)(v1 + 912) = v30;
  *(_QWORD *)(v1 + 944) = 1717987684;
  *(_QWORD *)(v1 + 952) = 0xE400000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC788);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_2425C4B60;
  *(_QWORD *)(v32 + 56) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v32 + 32) = 1;
  v33 = sub_2425583E8(v7);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 32) = v7;
  *(_QWORD *)(v34 + 40) = v7;
  *(_QWORD *)(v34 + 48) = v7;
  *(_QWORD *)(v34 + 56) = v7;
  *(_QWORD *)(v34 + 64) = v7;
  *(_OWORD *)(v34 + 72) = 0u;
  *(_OWORD *)(v34 + 88) = 0u;
  *(_QWORD *)(v34 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v34 + 16) = 0x666669642E706ELL;
  *(_QWORD *)(v34 + 24) = 0xE700000000000000;
  *(_QWORD *)(v34 + 32) = &unk_2513533A0;
  *(_QWORD *)(v34 + 40) = v7;
  *(_QWORD *)(v34 + 48) = v7;
  *(_QWORD *)(v34 + 56) = v7;
  *(_QWORD *)(v34 + 64) = v32;
  *(_OWORD *)(v34 + 72) = 0u;
  *(_OWORD *)(v34 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v34 + 104) = v33;
  swift_bridgeObjectRelease();
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = sub_242578300;
  *(_QWORD *)(v35 + 24) = 0;
  *(_QWORD *)(v34 + 112) = sub_242562F84;
  *(_QWORD *)(v34 + 120) = v35;
  *(_QWORD *)(v1 + 984) = v4;
  *(_QWORD *)(v1 + 960) = v34;
  *(_QWORD *)(v1 + 992) = 0x6572656877;
  *(_QWORD *)(v1 + 1000) = 0xE500000000000000;
  v36 = sub_2425583E8(v7);
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 32) = v7;
  *(_QWORD *)(v37 + 40) = v7;
  *(_QWORD *)(v37 + 48) = v7;
  *(_QWORD *)(v37 + 56) = v7;
  *(_QWORD *)(v37 + 64) = v7;
  *(_OWORD *)(v37 + 72) = 0u;
  *(_OWORD *)(v37 + 88) = 0u;
  *(_QWORD *)(v37 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v37 + 16) = 0x65726568772E706ELL;
  *(_QWORD *)(v37 + 24) = 0xE800000000000000;
  *(_QWORD *)(v37 + 32) = &unk_2513533E0;
  *(_QWORD *)(v37 + 40) = v7;
  *(_QWORD *)(v37 + 48) = v7;
  *(_QWORD *)(v37 + 56) = v7;
  *(_QWORD *)(v37 + 64) = v7;
  *(_OWORD *)(v37 + 72) = 0u;
  *(_OWORD *)(v37 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v37 + 104) = v36;
  swift_bridgeObjectRelease();
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = sub_2425786B8;
  *(_QWORD *)(v38 + 24) = 0;
  *(_QWORD *)(v37 + 112) = sub_242562F84;
  *(_QWORD *)(v37 + 120) = v38;
  *(_QWORD *)(v1 + 1032) = v4;
  *(_QWORD *)(v1 + 1008) = v37;
  *(_QWORD *)(v1 + 1040) = 0x6E657461636E6F63;
  *(_QWORD *)(v1 + 1048) = 0xEB00000000657461;
  v39 = sub_2425583E8(v7);
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 32) = v7;
  *(_QWORD *)(v40 + 40) = v7;
  *(_QWORD *)(v40 + 48) = v7;
  *(_QWORD *)(v40 + 56) = v7;
  *(_QWORD *)(v40 + 64) = v7;
  *(_OWORD *)(v40 + 72) = 0u;
  *(_OWORD *)(v40 + 88) = 0u;
  *(_QWORD *)(v40 + 104) = sub_2425583E8(v7);
  strcpy((char *)(v40 + 16), "np.concatenate");
  *(_BYTE *)(v40 + 31) = -18;
  *(_QWORD *)(v40 + 32) = &unk_251353430;
  *(_QWORD *)(v40 + 40) = v7;
  *(_QWORD *)(v40 + 48) = v7;
  *(_QWORD *)(v40 + 56) = v7;
  *(_QWORD *)(v40 + 64) = v7;
  *(_OWORD *)(v40 + 72) = 0u;
  *(_OWORD *)(v40 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v40 + 104) = v39;
  swift_bridgeObjectRelease();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = sub_242578A00;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v40 + 112) = sub_242562F84;
  *(_QWORD *)(v40 + 120) = v41;
  *(_QWORD *)(v1 + 1080) = v4;
  *(_QWORD *)(v1 + 1056) = v40;
  *(_QWORD *)(v1 + 1088) = 0x6D75736D7563;
  *(_QWORD *)(v1 + 1096) = 0xE600000000000000;
  v42 = sub_2425583E8(v7);
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 32) = v7;
  *(_QWORD *)(v43 + 40) = v7;
  *(_QWORD *)(v43 + 48) = v7;
  *(_QWORD *)(v43 + 56) = v7;
  *(_QWORD *)(v43 + 64) = v7;
  *(_OWORD *)(v43 + 72) = 0u;
  *(_OWORD *)(v43 + 88) = 0u;
  *(_QWORD *)(v43 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v43 + 16) = 0x75736D75632E706ELL;
  *(_QWORD *)(v43 + 24) = 0xE90000000000006DLL;
  *(_QWORD *)(v43 + 32) = &unk_251353460;
  *(_QWORD *)(v43 + 40) = v7;
  *(_QWORD *)(v43 + 48) = v7;
  *(_QWORD *)(v43 + 56) = v7;
  *(_QWORD *)(v43 + 64) = v7;
  *(_OWORD *)(v43 + 72) = 0u;
  *(_OWORD *)(v43 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v43 + 104) = v42;
  swift_bridgeObjectRelease();
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = sub_242578D80;
  *(_QWORD *)(v44 + 24) = 0;
  *(_QWORD *)(v43 + 112) = sub_242562F84;
  *(_QWORD *)(v43 + 120) = v44;
  *(_QWORD *)(v1 + 1128) = v4;
  *(_QWORD *)(v1 + 1104) = v43;
  *(_QWORD *)(v1 + 1136) = 0x5F6C616369676F6CLL;
  *(_QWORD *)(v1 + 1144) = 0xEA0000000000726FLL;
  v45 = sub_2425583E8(v7);
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 32) = v7;
  *(_QWORD *)(v46 + 40) = v7;
  *(_QWORD *)(v46 + 48) = v7;
  *(_QWORD *)(v46 + 56) = v7;
  *(_QWORD *)(v46 + 64) = v7;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_QWORD *)(v46 + 104) = sub_2425583E8(v7);
  strcpy((char *)(v46 + 16), "np.logical_or");
  *(_WORD *)(v46 + 30) = -4864;
  *(_QWORD *)(v46 + 32) = &unk_251353490;
  *(_QWORD *)(v46 + 40) = v7;
  *(_QWORD *)(v46 + 48) = v7;
  *(_QWORD *)(v46 + 56) = v7;
  *(_QWORD *)(v46 + 64) = v7;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v46 + 104) = v45;
  swift_bridgeObjectRelease();
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = sub_242578EF4;
  *(_QWORD *)(v47 + 24) = 0;
  *(_QWORD *)(v46 + 112) = sub_242562F84;
  *(_QWORD *)(v46 + 120) = v47;
  *(_QWORD *)(v1 + 1176) = v4;
  *(_QWORD *)(v1 + 1152) = v46;
  *(_QWORD *)(v1 + 1184) = 0x6F72657A6E6F6ELL;
  *(_QWORD *)(v1 + 1192) = 0xE700000000000000;
  v48 = sub_2425583E8(v7);
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 32) = v7;
  *(_QWORD *)(v49 + 40) = v7;
  *(_QWORD *)(v49 + 48) = v7;
  *(_QWORD *)(v49 + 56) = v7;
  *(_QWORD *)(v49 + 64) = v7;
  *(_OWORD *)(v49 + 72) = 0u;
  *(_OWORD *)(v49 + 88) = 0u;
  *(_QWORD *)(v49 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v49 + 16) = 0x657A6E6F6E2E706ELL;
  *(_QWORD *)(v49 + 24) = 0xEA00000000006F72;
  *(_QWORD *)(v49 + 32) = &unk_2513534D0;
  *(_QWORD *)(v49 + 40) = v7;
  *(_QWORD *)(v49 + 48) = v7;
  *(_QWORD *)(v49 + 56) = v7;
  *(_QWORD *)(v49 + 64) = v7;
  *(_OWORD *)(v49 + 72) = 0u;
  *(_OWORD *)(v49 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v49 + 104) = v48;
  swift_bridgeObjectRelease();
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = sub_2425790E4;
  *(_QWORD *)(v50 + 24) = 0;
  *(_QWORD *)(v49 + 112) = sub_242562F84;
  *(_QWORD *)(v49 + 120) = v50;
  *(_QWORD *)(v1 + 1224) = v4;
  *(_QWORD *)(v1 + 1200) = v49;
  strcpy((char *)(v1 + 1232), "searchsorted");
  *(_BYTE *)(v1 + 1245) = 0;
  *(_WORD *)(v1 + 1246) = -5120;
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_2425C4B60;
  *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v51 + 32) = 1952867692;
  *(_QWORD *)(v51 + 40) = 0xE400000000000000;
  v52 = sub_2425583E8(v7);
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 32) = v7;
  *(_QWORD *)(v53 + 40) = v7;
  *(_QWORD *)(v53 + 48) = v7;
  *(_QWORD *)(v53 + 56) = v7;
  *(_QWORD *)(v53 + 64) = v7;
  *(_OWORD *)(v53 + 72) = 0u;
  *(_OWORD *)(v53 + 88) = 0u;
  *(_QWORD *)(v53 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v53 + 16) = 0x63726165732E706ELL;
  *(_QWORD *)(v53 + 24) = 0xEF646574726F7368;
  *(_QWORD *)(v53 + 32) = &unk_251353500;
  *(_QWORD *)(v53 + 40) = v7;
  *(_QWORD *)(v53 + 48) = v7;
  *(_QWORD *)(v53 + 56) = v7;
  *(_QWORD *)(v53 + 64) = v51;
  *(_OWORD *)(v53 + 72) = 0u;
  *(_OWORD *)(v53 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v53 + 104) = v52;
  swift_bridgeObjectRelease();
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = sub_2425791A8;
  *(_QWORD *)(v54 + 24) = 0;
  *(_QWORD *)(v53 + 112) = sub_242562F84;
  *(_QWORD *)(v53 + 120) = v54;
  *(_QWORD *)(v1 + 1272) = v4;
  *(_QWORD *)(v1 + 1248) = v53;
  *(_QWORD *)(v1 + 1280) = 0x707265746E69;
  *(_QWORD *)(v1 + 1288) = 0xE600000000000000;
  v55 = sub_2425583E8(v7);
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 32) = v7;
  *(_QWORD *)(v56 + 40) = v7;
  *(_QWORD *)(v56 + 48) = v7;
  *(_QWORD *)(v56 + 56) = v7;
  *(_QWORD *)(v56 + 64) = v7;
  *(_OWORD *)(v56 + 72) = 0u;
  *(_OWORD *)(v56 + 88) = 0u;
  *(_QWORD *)(v56 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v56 + 16) = 0x7265746E692E706ELL;
  *(_QWORD *)(v56 + 24) = 0xE900000000000070;
  *(_QWORD *)(v56 + 32) = &unk_251353550;
  *(_QWORD *)(v56 + 40) = v7;
  *(_QWORD *)(v56 + 48) = v7;
  *(_QWORD *)(v56 + 56) = v7;
  *(_QWORD *)(v56 + 64) = v7;
  *(_OWORD *)(v56 + 72) = 0u;
  *(_OWORD *)(v56 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v56 + 104) = v55;
  swift_bridgeObjectRelease();
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = sub_24257940C;
  *(_QWORD *)(v57 + 24) = 0;
  *(_QWORD *)(v56 + 112) = sub_242562F84;
  *(_QWORD *)(v56 + 120) = v57;
  *(_QWORD *)(v1 + 1320) = v4;
  *(_QWORD *)(v1 + 1296) = v56;
  *(_QWORD *)(v1 + 1328) = 0x646E65707061;
  *(_QWORD *)(v1 + 1336) = 0xE600000000000000;
  v58 = sub_2425583E8(v7);
  v59 = swift_allocObject();
  *(_QWORD *)(v59 + 32) = v7;
  *(_QWORD *)(v59 + 40) = v7;
  *(_QWORD *)(v59 + 48) = v7;
  *(_QWORD *)(v59 + 56) = v7;
  *(_QWORD *)(v59 + 64) = v7;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_QWORD *)(v59 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v59 + 16) = 0x6E657070612E706ELL;
  *(_QWORD *)(v59 + 24) = 0xE900000000000064;
  *(_QWORD *)(v59 + 32) = &unk_2513535A0;
  *(_QWORD *)(v59 + 40) = v7;
  *(_QWORD *)(v59 + 48) = v7;
  *(_QWORD *)(v59 + 56) = v7;
  *(_QWORD *)(v59 + 64) = v7;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v59 + 104) = v58;
  swift_bridgeObjectRelease();
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = sub_2425795DC;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)(v59 + 112) = sub_242562F84;
  *(_QWORD *)(v59 + 120) = v60;
  *(_QWORD *)(v1 + 1368) = v4;
  *(_QWORD *)(v1 + 1344) = v59;
  *(_QWORD *)(v1 + 1376) = 7958113;
  *(_QWORD *)(v1 + 1384) = 0xE300000000000000;
  v61 = sub_2425583E8(v7);
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 32) = v7;
  *(_QWORD *)(v62 + 40) = v7;
  *(_QWORD *)(v62 + 48) = v7;
  *(_QWORD *)(v62 + 56) = v7;
  *(_QWORD *)(v62 + 64) = v7;
  *(_OWORD *)(v62 + 72) = 0u;
  *(_OWORD *)(v62 + 88) = 0u;
  *(_QWORD *)(v62 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v62 + 16) = 0x796E612E706ELL;
  *(_QWORD *)(v62 + 24) = 0xE600000000000000;
  *(_QWORD *)(v62 + 32) = &unk_2513535E0;
  *(_QWORD *)(v62 + 40) = v7;
  *(_QWORD *)(v62 + 48) = v7;
  *(_QWORD *)(v62 + 56) = v7;
  *(_QWORD *)(v62 + 64) = v7;
  *(_OWORD *)(v62 + 72) = 0u;
  *(_OWORD *)(v62 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v62 + 104) = v61;
  swift_bridgeObjectRelease();
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = sub_242579A48;
  *(_QWORD *)(v63 + 24) = 0;
  *(_QWORD *)(v62 + 112) = sub_242562F84;
  *(_QWORD *)(v62 + 120) = v63;
  *(_QWORD *)(v1 + 1416) = v4;
  *(_QWORD *)(v1 + 1392) = v62;
  *(_QWORD *)(v1 + 1424) = 7105633;
  *(_QWORD *)(v1 + 1432) = 0xE300000000000000;
  v64 = sub_2425583E8(v7);
  v65 = swift_allocObject();
  *(_QWORD *)(v65 + 32) = v7;
  *(_QWORD *)(v65 + 40) = v7;
  *(_QWORD *)(v65 + 48) = v7;
  *(_QWORD *)(v65 + 56) = v7;
  *(_QWORD *)(v65 + 64) = v7;
  *(_OWORD *)(v65 + 72) = 0u;
  *(_OWORD *)(v65 + 88) = 0u;
  *(_QWORD *)(v65 + 104) = sub_2425583E8(v7);
  *(_QWORD *)(v65 + 16) = 0x6C6C612E706ELL;
  *(_QWORD *)(v65 + 24) = 0xE600000000000000;
  *(_QWORD *)(v65 + 32) = &unk_251353610;
  *(_QWORD *)(v65 + 40) = v7;
  *(_QWORD *)(v65 + 48) = v7;
  *(_QWORD *)(v65 + 56) = v7;
  *(_QWORD *)(v65 + 64) = v7;
  *(_OWORD *)(v65 + 72) = 0u;
  *(_OWORD *)(v65 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(_QWORD *)(v65 + 104) = v64;
  swift_bridgeObjectRelease();
  v66 = swift_allocObject();
  *(_QWORD *)(v66 + 16) = sub_242579B84;
  *(_QWORD *)(v66 + 24) = 0;
  *(_QWORD *)(v65 + 112) = sub_242562F84;
  *(_QWORD *)(v65 + 120) = v66;
  *(_QWORD *)(v1 + 1464) = v4;
  *(_QWORD *)(v1 + 1440) = v65;
  v67 = sub_2425583E8(v1);
  v70[0] = v7;
  v70[1] = v7;
  v70[2] = v7;
  v70[3] = v7;
  v70[4] = v7;
  v71 = 0u;
  v72 = 0u;
  swift_allocObject();
  *(_QWORD *)(v69 + 48) = Function.init(name:arguments:attrs:body:)(28782, 0xE200000000000000, (uint64_t)v70, v67, 0, 0);
  result = sub_242558650(v69);
  qword_2571FFB38 = result;
  return result;
}

uint64_t sub_24257696C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *);
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  char v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  _QWORD *v85;
  _QWORD v86[4];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(0x7961727261, 0xE500000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v90);
  }
  else
  {
    v90 = 0u;
    v91 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v90);
  result = sub_2425264C4((uint64_t)&v90, &qword_2571FC790);
  if (!v2)
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(a1 + 16) <= 1uLL)
      goto LABEL_36;
    v10 = sub_24255A05C(1936291937, 0xE400000000000000);
    if ((v11 & 1) != 0)
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v86);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE448);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)&v88 + 1))
        {
          v84 = a2;
          v85 = v7;
          sub_24251DEC8(&v87, (uint64_t)&v90);
          v9 = (_QWORD *)*((_QWORD *)&v91 + 1);
          v12 = v92;
          v13 = __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
          v82 = &v72;
          v14 = (_QWORD *)*(v9 - 1);
          v15 = v14[8];
          MEMORY[0x24BDAC7A8](v13);
          v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
          v17 = (void (*)(char *))v14[2];
          v17(v16);
          v81 = *(uint64_t **)(v12 + 8);
          v18 = sub_24259FF00();
          LOBYTE(v12) = v18;
          v79 = &v72;
          v80 = v15;
          MEMORY[0x24BDAC7A8](v18);
          v83 = (uint64_t *)v16;
          v93 = (unint64_t)v17;
          ((void (*)(char *, char *, _QWORD *))v17)(v16, v16, v9);
          v78 = v14;
          if ((v12 & 1) != 0)
          {
            v19 = v81;
            v20 = sub_24259FEF4();
            v7 = (_QWORD *)v14[1];
            v21 = ((uint64_t (*)(char *, _QWORD *))v7)(v16, v9);
            if (v20 > 64)
            {
              v77 = &v72;
              v22 = v80;
              MEMORY[0x24BDAC7A8](v21);
              v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
              ((void (*)(char *, uint64_t *, _QWORD *))v93)(v23, v83, v9);
              *(_QWORD *)&v87 = 0x8000000000000000;
              v24 = v19;
              if ((sub_24259FF00() & 1) != 0)
              {
                v25 = sub_24259FEF4();
                if (v25 >= 64)
                {
                  MEMORY[0x24BDAC7A8](v25);
                  sub_24253B658();
                  sub_24259FEDC();
                  v55 = sub_24259FA50();
                  ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                  ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                  v27 = v83;
                  if ((v55 & 1) != 0)
                    goto LABEL_52;
                }
                else
                {
                  v26 = sub_24259FEE8();
                  ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                  v27 = v83;
                  if (v26 < (uint64_t)v87)
                    goto LABEL_52;
                }
              }
              else
              {
                v51 = sub_24259FF00();
                v52 = sub_24259FEF4();
                if ((v51 & 1) != 0)
                {
                  v76 = v7;
                  v27 = v83;
                  if (v52 <= 64)
                    goto LABEL_53;
                  MEMORY[0x24BDAC7A8](v52);
                  sub_24253B658();
                  sub_24259FEDC();
                  v53 = sub_24259FA50();
                  v54 = v76;
                  ((void (*)(char *, _QWORD *))v76)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                  ((void (*)(char *, _QWORD *))v54)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                  v7 = v54;
                  if ((v53 & 1) != 0)
                  {
LABEL_52:
                    do
                    {
                      __break(1u);
LABEL_53:
                      v74 = *(_QWORD *)(v24[3] + 16);
                      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                      v75 = &v72;
                      MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
                      swift_getAssociatedConformanceWitness();
                      v58 = sub_2425A0278();
                      v72 = (uint64_t)&v72;
                      MEMORY[0x24BDAC7A8](v58);
                      v73 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
                      v59 = (char *)&v72 - v73;
                      sub_2425A023C();
                      LODWORD(v74) = sub_24259FA50();
                      v7 = v76;
                      v60 = ((uint64_t (*)(char *, _QWORD *))v76)(v59, v9);
                      v75 = &v72;
                      MEMORY[0x24BDAC7A8](v60);
                      v35 = (uint64_t)&v72 - v73;
                      ((void (*)(char *, char *, _QWORD *))v78[4])((char *)&v72 - v73, v23, v9);
                      if ((v74 & 1) != 0)
                        goto LABEL_76;
                      v23 = (char *)v87;
                      v61 = sub_24259FEE8();
                      ((void (*)(uint64_t, _QWORD *))v7)(v35, v9);
                    }
                    while (v61 < (uint64_t)v23);
                  }
                }
                else
                {
                  v27 = v83;
                  if (v52 >= 64)
                  {
                    ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                  }
                  else
                  {
                    v56 = sub_24259FEE8();
                    ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                    if (v56 < (uint64_t)v87)
                      goto LABEL_52;
                  }
                }
              }
LABEL_57:
              v62 = sub_24259FEF4();
              MEMORY[0x24BDAC7A8](v62);
              ((void (*)(char *, uint64_t *, _QWORD *))v93)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v9);
              if (v62 < 65)
              {
                v64 = sub_24259FEF4();
                ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                if (v64 != 64)
                  goto LABEL_68;
                v63 = sub_24259FF00();
                if ((v63 & 1) != 0)
                  goto LABEL_68;
              }
              else
              {
                v63 = ((uint64_t (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
              }
              v83 = &v72;
              v81 = &v72;
              MEMORY[0x24BDAC7A8](v63);
              ((void (*)(char *, uint64_t *, _QWORD *))v93)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v9);
              *(_QWORD *)&v87 = 0x7FFFFFFFFFFFFFFFLL;
              v65 = sub_24259FF00();
              v66 = sub_24259FEF4();
              if ((v65 & 1) != 0)
              {
                if (v66 > 64)
                {
                  v93 = (unint64_t)&v72;
                  MEMORY[0x24BDAC7A8](v66);
                  sub_24253B658();
                  sub_24259FEDC();
                  v35 = sub_24259FA50();
                  ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
                  ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
LABEL_67:
                  if ((v35 & 1) == 0)
                    goto LABEL_68;
                  __break(1u);
                  goto LABEL_75;
                }
              }
              else if (v66 > 63)
              {
                v93 = (unint64_t)&v72;
                v86[0] = 0x7FFFFFFFFFFFFFFFLL;
                MEMORY[0x24BDAC7A8](v66);
                v67 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
                v68 = ((uint64_t (*)(char *, char *, _QWORD *))v78[4])(v67, v67, v9);
                MEMORY[0x24BDAC7A8](v68);
                sub_24253B658();
                sub_24259FEDC();
                v35 = sub_24259FA50();
                ((void (*)(char *, _QWORD *))v7)(v67, v9);
                ((void (*)(char *, _QWORD *))v7)(v67, v9);
                goto LABEL_67;
              }
              sub_24259FEE8();
              ((void (*)(char *, _QWORD *))v7)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
LABEL_68:
              v69 = sub_24259FEE8();
              ((void (*)(uint64_t *, _QWORD *))v7)(v27, v9);
              v9 = sub_24251BDB8(0, 1, 1, MEMORY[0x24BEE4AF8]);
              v71 = v9[2];
              v70 = v9[3];
              if (v71 >= v70 >> 1)
                v9 = sub_24251BDB8((_QWORD *)(v70 > 1), v71 + 1, 1, v9);
              a2 = v84;
              v9[2] = v71 + 1;
              v9[v71 + 4] = v69;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
              v7 = v85;
LABEL_36:
              result = (uint64_t)mlx_default_device();
              v44 = result;
              if (result)
              {
                result = mlx_default_stream(result);
                v45 = result;
                if (result)
                {
                  mlx_free(v44);
                  v46 = v7[2];
                  v47 = Array<A>.asInt32.getter((uint64_t)v9);
                  v48 = mlx_sum(v46, (const void *)(v47 + 32), v9[2], 0, v45);
                  result = swift_bridgeObjectRelease();
                  if (v48)
                  {
                    v49 = type metadata accessor for MLXArray();
                    v50 = swift_allocObject();
                    *(_QWORD *)(v50 + 16) = v48;
                    swift_bridgeObjectRelease();
                    mlx_free(v45);
                    a2[3] = v49;
                    result = swift_release();
                    *a2 = v50;
                    return result;
                  }
LABEL_79:
                  __break(1u);
                  return result;
                }
LABEL_78:
                __break(1u);
                goto LABEL_79;
              }
LABEL_77:
              __break(1u);
              goto LABEL_78;
            }
          }
          else
          {
            v7 = (_QWORD *)v14[1];
            ((void (*)(char *, _QWORD *))v7)(v16, v9);
          }
          v27 = v83;
          v22 = v80;
          goto LABEL_57;
        }
      }
      else
      {
        v89 = 0;
        v87 = 0u;
        v88 = 0u;
      }
    }
    else
    {
      v87 = 0u;
      v88 = 0u;
      v89 = 0;
    }
    sub_2425264C4((uint64_t)&v87, &qword_2571FE440);
    if (*(_QWORD *)(a1 + 16) && (v28 = sub_24255A05C(1936291937, 0xE400000000000000), (v29 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)v86);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)&v88 + 1))
        {
          sub_24251DEC8(&v87, (uint64_t)&v90);
          v30 = *((_QWORD *)&v91 + 1);
          v31 = v92;
          __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
          v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
          v33 = sub_2425814F4(v32);
          swift_bridgeObjectRelease();
          if (!v33)
            goto LABEL_73;
          v93 = v33;
          if (v33 >> 62)
          {
            swift_bridgeObjectRetain();
            v34 = sub_2425A0128();
            swift_bridgeObjectRelease();
            if (v34)
              goto LABEL_25;
          }
          else
          {
            v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v34)
            {
LABEL_25:
              v84 = a2;
              v85 = v7;
              *(_QWORD *)&v87 = v9;
              v35 = (uint64_t)&v87;
              sub_242509AE4(0, v34 & ~(v34 >> 63), 0);
              if (v34 < 0)
              {
LABEL_75:
                __break(1u);
LABEL_76:
                result = ((uint64_t (*)(uint64_t, _QWORD *))v7)(v35, v9);
                __break(1u);
                goto LABEL_77;
              }
              v36 = 0;
              v9 = (_QWORD *)v87;
              v37 = v93;
              v38 = v93 & 0xC000000000000001;
              do
              {
                if (v38)
                  v39 = (id)MEMORY[0x2426A7C70](v36, v37);
                else
                  v39 = *(id *)(v37 + 8 * v36 + 32);
                v40 = v39;
                v41 = objc_msgSend(v39, sel_integerValue);

                *(_QWORD *)&v87 = v9;
                v43 = v9[2];
                v42 = v9[3];
                if (v43 >= v42 >> 1)
                {
                  sub_242509AE4(v42 > 1, v43 + 1, 1);
                  v37 = v93;
                  v9 = (_QWORD *)v87;
                }
                ++v36;
                v9[2] = v43 + 1;
                v9[v43 + 4] = v41;
              }
              while (v34 != v36);
              swift_bridgeObjectRelease();
              a2 = v84;
              v7 = v85;
LABEL_73:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
              goto LABEL_36;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
      }
      else
      {
        v89 = 0;
        v87 = 0u;
        v88 = 0u;
      }
    }
    else
    {
      v87 = 0u;
      v88 = 0u;
      v89 = 0;
    }
    sub_2425264C4((uint64_t)&v87, &qword_2571FCCA0);
    goto LABEL_36;
  }
  return result;
}

uint64_t sub_242577668@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(12664, 0xE200000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v17);
  result = sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(12920, 0xE200000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v17);
    sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
    result = (uint64_t)mlx_default_device();
    v12 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v13 = result;
      if (result)
      {
        mlx_free(v12);
        result = (uint64_t)mlx_add(v7[2], v11[2], v13);
        v14 = result;
        if (result)
        {
          mlx_free(v13);
          v15 = type metadata accessor for MLXArray();
          v16 = swift_allocObject();
          *(_QWORD *)(v16 + 16) = v14;
          a2[3] = v15;
          swift_release();
          result = swift_release();
          *a2 = v16;
          return result;
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_242577810@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(12664, 0xE200000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v17);
  result = sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(12920, 0xE200000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v17);
    sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
    result = (uint64_t)mlx_default_device();
    v12 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v13 = result;
      if (result)
      {
        mlx_free(v12);
        result = (uint64_t)mlx_multiply(v7[2], v11[2], v13);
        v14 = result;
        if (result)
        {
          mlx_free(v13);
          v15 = type metadata accessor for MLXArray();
          v16 = swift_allocObject();
          *(_QWORD *)(v16 + 16) = v14;
          a2[3] = v15;
          swift_release();
          result = swift_release();
          *a2 = v16;
          return result;
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_2425779B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(12664, 0xE200000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v17);
  result = sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(12920, 0xE200000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v17);
    sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
    result = (uint64_t)mlx_default_device();
    v12 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v13 = result;
      if (result)
      {
        mlx_free(v12);
        result = (uint64_t)mlx_divide(v7[2], v11[2], v13);
        v14 = result;
        if (result)
        {
          mlx_free(v13);
          v15 = type metadata accessor for MLXArray();
          v16 = swift_allocObject();
          *(_QWORD *)(v16 + 16) = v14;
          a2[3] = v15;
          swift_release();
          result = swift_release();
          *a2 = v16;
          return result;
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_242577B60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _BYTE *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v31);
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v31);
  result = sub_2425264C4((uint64_t)&v31, &qword_2571FC790);
  if (v2)
    return result;
  if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(0x657061687377656ELL, 0xE800000000000000), (v10 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v27);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v29 + 1))
      {
        sub_24251DEC8(&v28, (uint64_t)&v31);
        v11 = *((_QWORD *)&v32 + 1);
        v12 = v33;
        __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
        v14 = sub_2425815EC(v13);
        swift_bridgeObjectRelease();
        if (v14)
        {
          result = (uint64_t)mlx_default_device();
          v15 = result;
          if (result)
          {
            result = mlx_default_stream(result);
            v16 = result;
            if (result)
            {
              mlx_free(v15);
              v17 = v7[2];
              v18 = Array<A>.asInt32.getter(v14);
              v19 = mlx_reshape(v17, (const void *)(v18 + 32), *(_QWORD *)(v14 + 16), v16);
              result = swift_bridgeObjectRelease();
              if (v19)
              {
                v20 = type metadata accessor for MLXArray();
                v21 = swift_allocObject();
                *(_QWORD *)(v21 + 16) = v19;
                swift_bridgeObjectRelease();
                mlx_free(v16);
                a2[3] = v20;
                swift_release();
                *a2 = v21;
                return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
              }
              goto LABEL_27;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
        goto LABEL_17;
      }
    }
    else
    {
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
    }
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
    v30 = 0;
  }
  sub_2425264C4((uint64_t)&v28, &qword_2571FCCA0);
LABEL_17:
  if (qword_2571FC5C8 != -1)
    swift_once();
  v22 = sub_24259F930();
  __swift_project_value_buffer(v22, (uint64_t)qword_2571FFB10);
  v23 = sub_24259F918();
  v24 = sub_24259FE70();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_2422E0000, v23, v24, "Invalid arg newshape for reshape", v25, 2u);
    MEMORY[0x2426A88B8](v25, -1, -1);
  }

  sub_242554B60();
  swift_allocError();
  *v26 = 50;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_242577E98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v15);
  else
    memset(v15, 0, sizeof(v15));
  v7 = sub_242579CC0((uint64_t)v15);
  result = sub_2425264C4((uint64_t)v15, &qword_2571FC790);
  if (!v2)
  {
    result = (uint64_t)mlx_default_device();
    v9 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v10 = result;
      if (result)
      {
        mlx_free(v9);
        result = (uint64_t)mlx_flatten(v7[2], 0, -1, v10);
        v11 = result;
        if (result)
        {
          mlx_free(v10);
          result = (uint64_t)mlx_default_device();
          v12 = result;
          if (result)
          {
            result = mlx_default_stream(result);
            v13 = result;
            if (result)
            {
              mlx_free(v12);
              result = (uint64_t)mlx_sort_all(v11, v13);
              v14 = result;
              if (result)
              {
                mlx_free(v13);
                a2[3] = type metadata accessor for MLXArray();
                mlx_free(v14);
                result = mlx_free(v11);
                *a2 = v7;
                return result;
              }
LABEL_19:
              __break(1u);
              return result;
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_242578024@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(12664, 0xE200000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v17);
  result = sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(12920, 0xE200000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v17);
    sub_2425264C4((uint64_t)&v17, &qword_2571FC790);
    result = (uint64_t)mlx_default_device();
    v12 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v13 = result;
      if (result)
      {
        mlx_free(v12);
        result = (uint64_t)mlx_equal(v7[2], v11[2], v13);
        v14 = result;
        if (result)
        {
          mlx_free(v13);
          v15 = type metadata accessor for MLXArray();
          v16 = swift_allocObject();
          *(_QWORD *)(v16 + 16) = v14;
          a2[3] = v15;
          swift_release();
          result = swift_release();
          *a2 = v16;
          return result;
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_2425781CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v14);
  else
    memset(v14, 0, sizeof(v14));
  v7 = sub_242579CC0((uint64_t)v14);
  result = sub_2425264C4((uint64_t)v14, &qword_2571FC790);
  if (!v2)
  {
    result = (uint64_t)mlx_default_device();
    v9 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v10 = result;
      if (result)
      {
        mlx_free(v9);
        result = (uint64_t)mlx_argsort_all(v7[2], v10);
        v11 = result;
        if (result)
        {
          v12 = type metadata accessor for MLXArray();
          v13 = swift_allocObject();
          *(_QWORD *)(v13 + 16) = v11;
          mlx_free(v10);
          a2[3] = v12;
          result = swift_release();
          *a2 = v13;
          return result;
        }
LABEL_13:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

void sub_242578300(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  mlx::core *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlx::core *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlx::core *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  id v32;
  uint64_t v33[6];
  uint64_t *v34;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v33);
  else
    memset(v33, 0, 32);
  v7 = (uint64_t)sub_242579CC0((uint64_t)v33);
  sub_2425264C4((uint64_t)v33, &qword_2571FC790);
  if (v2)
    return;
  v8 = *(_QWORD *)(a1 + 16);
  v34 = a2;
  if (v8 <= 1
    || (v9 = sub_24255A05C(110, 0xE100000000000000), (v10 & 1) == 0)
    || (sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)v33), sub_24252123C(), (swift_dynamicCast() & 1) == 0))
  {
    v11 = 1;
LABEL_13:
    swift_retain();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC868);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2425C4B60;
      *(_QWORD *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8D8);
      *(_QWORD *)(inited + 64) = &protocol witness table for <> PartialRangeFrom<A>;
      *(_QWORD *)(inited + 32) = 1;
      type metadata accessor for Stream();
      v13 = swift_initStackObject();
      v14 = mlx_default_device();
      v15 = (uint64_t)v14;
      if (!v14)
        goto LABEL_25;
      v16 = mlx_default_stream((uint64_t)v14);
      v17 = v16;
      if (!v16)
        goto LABEL_26;
      *(_QWORD *)(v13 + 16) = v16;
      mlx_free(v15);
      v33[0] = v13;
      v18 = MLXArray.subscript.getter(inited, v33);
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      mlx_free(v17);
      v19 = swift_initStackObject();
      *(_OWORD *)(v19 + 16) = xmmword_2425C4B60;
      *(_QWORD *)(v19 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8C8);
      *(_QWORD *)(v19 + 64) = &protocol witness table for <> PartialRangeUpTo<A>;
      *(_QWORD *)(v19 + 32) = -1;
      v20 = swift_initStackObject();
      v21 = mlx_default_device();
      v22 = (uint64_t)v21;
      if (!v21)
        goto LABEL_27;
      v23 = mlx_default_stream((uint64_t)v21);
      v24 = v23;
      if (!v23)
        goto LABEL_28;
      *(_QWORD *)(v20 + 16) = v23;
      mlx_free(v22);
      v33[0] = v20;
      v25 = MLXArray.subscript.getter(v19, v33);
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      mlx_free(v24);
      v26 = mlx_default_device();
      v27 = (uint64_t)v26;
      if (!v26)
        goto LABEL_29;
      v28 = mlx_default_stream((uint64_t)v26);
      if (!v28)
        goto LABEL_30;
      mlx_free(v27);
      v29 = mlx_subtract(*(_QWORD *)(v18 + 16), *(_QWORD *)(v25 + 16), v28);
      if (!v29)
        goto LABEL_31;
      mlx_free(v28);
      type metadata accessor for MLXArray();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v29;
      swift_release();
      swift_release();
      swift_release();
      if (!--v11)
        goto LABEL_22;
    }
  }
  v11 = (uint64_t)objc_msgSend(v32, sel_integerValue);

  if ((v11 & 0x8000000000000000) == 0)
  {
    if (!v11)
    {
      swift_retain();
LABEL_22:
      v30 = type metadata accessor for MLXArray();
      v31 = v34;
      v34[3] = v30;
      swift_release();
      *v31 = v7;
      return;
    }
    goto LABEL_13;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_2425786B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(0x6F697469646E6F63, 0xE90000000000006ELL), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v28);
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v28);
  result = sub_2425264C4((uint64_t)&v28, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) == 3)
    {
      v9 = sub_24255A05C(120, 0xE100000000000000);
      if ((v10 & 1) != 0)
      {
        sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v28);
      }
      else
      {
        v28 = 0u;
        v29 = 0u;
      }
      v16 = sub_242579CC0((uint64_t)&v28);
      sub_2425264C4((uint64_t)&v28, &qword_2571FC790);
      if (*(_QWORD *)(a1 + 16) && (v17 = sub_24255A05C(121, 0xE100000000000000), (v18 & 1) != 0))
      {
        sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v28);
      }
      else
      {
        v28 = 0u;
        v29 = 0u;
      }
      v19 = sub_242579CC0((uint64_t)&v28);
      sub_2425264C4((uint64_t)&v28, &qword_2571FC790);
      result = (uint64_t)mlx_default_device();
      v20 = result;
      if (result)
      {
        result = mlx_default_stream(result);
        v21 = result;
        if (result)
        {
          mlx_free(v20);
          v22 = v7[2];
          v23 = v16[2];
          v24 = v19[2];
          swift_retain();
          swift_retain();
          result = (uint64_t)mlx_where(v22, v23, v24, v21);
          v25 = result;
          if (result)
          {
            swift_release();
            swift_release();
            v26 = type metadata accessor for MLXArray();
            v27 = swift_allocObject();
            *(_QWORD *)(v27 + 16) = v25;
            mlx_free(v21);
            a2[3] = v26;
            swift_release();
            swift_release();
            result = swift_release();
            *a2 = v27;
            return result;
          }
          goto LABEL_27;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (qword_2571FC5C8 != -1)
      swift_once();
    v11 = sub_24259F930();
    __swift_project_value_buffer(v11, (uint64_t)qword_2571FFB10);
    v12 = sub_24259F918();
    v13 = sub_24259FE70();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2422E0000, v12, v13, "Unary where is not supported yet", v14, 2u);
      MEMORY[0x2426A88B8](v14, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v15 = 6;
    swift_willThrow();
    return swift_release();
  }
  return result;
}

uint64_t sub_242578A00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE *v19;
  uint64_t result;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25[4];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  char v32;

  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_24255A05C(0x737961727261, 0xE600000000000000), (v5 & 1) == 0))
  {
    v26 = 0u;
    v27 = 0u;
    v28 = 0;
    goto LABEL_11;
  }
  sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v25);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    goto LABEL_11;
  }
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_11:
    sub_2425264C4((uint64_t)&v26, &qword_2571FCCA0);
LABEL_12:
    if (qword_2571FC5C8 != -1)
      swift_once();
    v15 = sub_24259F930();
    __swift_project_value_buffer(v15, (uint64_t)qword_2571FFB10);
    v16 = sub_24259F918();
    v17 = sub_24259FE70();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_2422E0000, v16, v17, "Invalid arg arrays for concatenate", v18, 2u);
      MEMORY[0x2426A88B8](v18, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v19 = 51;
    return swift_willThrow();
  }
  sub_24251DEC8(&v26, (uint64_t)v29);
  v6 = v30;
  v7 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v9 = sub_242581728(v8);
  swift_bridgeObjectRelease();
  if (!v9)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v25[0] = MEMORY[0x24BEE4AF8];
    sub_2425A002C();
    v11 = v9 + 32;
    do
    {
      sub_24251DE5C(v11, (uint64_t)&v26);
      v12 = *((_QWORD *)&v27 + 1);
      v13 = v28;
      __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1));
      v32 = 7;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 8))(&v32, v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      sub_2425A0008();
      sub_2425A0038();
      sub_2425A0044();
      sub_2425A0014();
      v11 += 40;
      --v10;
    }
    while (v10);
    v14 = v25[0];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
  }
  type metadata accessor for Stream();
  inited = swift_initStackObject();
  result = (uint64_t)mlx_default_device();
  v22 = result;
  if (result)
  {
    result = mlx_default_stream(result);
    v23 = result;
    if (result)
    {
      *(_QWORD *)(inited + 16) = result;
      mlx_free(v22);
      *(_QWORD *)&v26 = inited;
      v24 = concatenated(_:axis:stream:)(v14, 0, (uint64_t *)&v26);
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      mlx_free(v23);
      a2[3] = type metadata accessor for MLXArray();
      *a2 = v24;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_242578D80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v15);
  else
    memset(v15, 0, sizeof(v15));
  v7 = sub_242579CC0((uint64_t)v15);
  result = sub_2425264C4((uint64_t)v15, &qword_2571FC790);
  if (!v2)
  {
    result = (uint64_t)mlx_default_device();
    v9 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v10 = result;
      if (result)
      {
        mlx_free(v9);
        result = mlx_reshape(v7[2], &unk_251353E20, 1uLL, v10);
        v11 = result;
        if (result)
        {
          result = (uint64_t)mlx_cumsum(result, 0, 0, 1, v10);
          v12 = result;
          if (result)
          {
            v13 = type metadata accessor for MLXArray();
            v14 = swift_allocObject();
            *(_QWORD *)(v14 + 16) = v12;
            mlx_free(v11);
            mlx_free(v10);
            a2[3] = v13;
            result = swift_release();
            *a2 = v14;
            return result;
          }
LABEL_15:
          __break(1u);
          return result;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_242578EF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(120, 0xE100000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v19);
  result = sub_2425264C4((uint64_t)&v19, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(121, 0xE100000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v19);
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v19);
    sub_2425264C4((uint64_t)&v19, &qword_2571FC790);
    swift_retain();
    swift_retain();
    result = (uint64_t)mlx_default_device();
    v12 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v13 = result;
      if (result)
      {
        mlx_free(v12);
        v14 = v7[2];
        v15 = v11[2];
        swift_retain();
        swift_retain();
        result = (uint64_t)mlx_logical_or(v14, v15, v13);
        v16 = result;
        if (result)
        {
          swift_release();
          swift_release();
          v17 = type metadata accessor for MLXArray();
          v18 = swift_allocObject();
          *(_QWORD *)(v18 + 16) = v16;
          mlx_free(v13);
          swift_release();
          swift_release();
          a2[3] = v17;
          swift_release();
          result = swift_release();
          *a2 = v18;
          return result;
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_2425790E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  sub_242579CC0((uint64_t)v10);
  result = sub_2425264C4((uint64_t)v10, &qword_2571FC790);
  if (!v2)
  {
    v8 = swift_retain();
    v9 = sub_242579E60(v8);
    a2[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC8A8);
    result = swift_release_n();
    *a2 = v9;
  }
  return result;
}

uint64_t sub_2425791A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(97, 0xE100000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v23);
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v23);
  result = sub_2425264C4((uint64_t)&v23, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(118, 0xE100000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v23);
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v23);
    sub_2425264C4((uint64_t)&v23, &qword_2571FC790);
    if (*(_QWORD *)(a1 + 16)
      && (v12 = sub_24255A05C(1701079411, 0xE400000000000000), (v13 & 1) != 0)
      && (sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v23), swift_dynamicCast()))
    {
      v15 = v21;
      v14 = v22;
    }
    else
    {
      v14 = 0xE400000000000000;
      v15 = 1952867692;
    }
    if (*(_QWORD *)(a1 + 16) == 3)
    {
      v16 = sub_24255A05C(1701079411, 0xE400000000000000);
      if ((v17 & 1) != 0)
      {
        sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v23);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v15 = v21;
          v14 = v22;
        }
      }
    }
    sub_242573D5C((uint64_t)v7, (uint64_t)v11, v15, v14, (uint64_t)&v23);
    swift_bridgeObjectRelease();
    v18 = *((_QWORD *)&v24 + 1);
    v19 = __swift_project_boxed_opaque_existential_1(&v23, *((uint64_t *)&v24 + 1));
    a2[3] = v18;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a2);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(boxed_opaque_existential_0, v19, v18);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  }
  return result;
}

uint64_t sub_24257940C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(120, 0xE100000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v15);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v15);
  result = sub_2425264C4((uint64_t)&v15, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(28792, 0xE200000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v15);
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v15);
    sub_2425264C4((uint64_t)&v15, &qword_2571FC790);
    if (*(_QWORD *)(a1 + 16) && (v12 = sub_24255A05C(28774, 0xE200000000000000), (v13 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v15);
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
    }
    sub_242579CC0((uint64_t)&v15);
    sub_2425264C4((uint64_t)&v15, &qword_2571FC790);
    v14 = sub_242574814((uint64_t)v7, (uint64_t)v11);
    a2[3] = type metadata accessor for MLXArray();
    swift_release();
    swift_release();
    result = swift_release();
    *a2 = v14;
  }
  return result;
}

uint64_t sub_2425795DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  uint64_t inited;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;

  if (*(_QWORD *)(a1 + 16) && (v5 = sub_24255A05C(7500385, 0xE300000000000000), (v6 & 1) != 0))
  {
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  v7 = sub_242579CC0((uint64_t)&v37);
  result = sub_2425264C4((uint64_t)&v37, &qword_2571FC790);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_24255A05C(0x7365756C6176, 0xE600000000000000), (v10 & 1) != 0))
    {
      sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v37);
    }
    else
    {
      v37 = 0u;
      v38 = 0u;
    }
    v11 = sub_242579CC0((uint64_t)&v37);
    sub_2425264C4((uint64_t)&v37, &qword_2571FC790);
    if (*(_QWORD *)(a1 + 16))
    {
      v12 = sub_24255A05C(1936291937, 0xE400000000000000);
      if ((v13 & 1) != 0)
      {
        sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v37);
        if ((swift_dynamicCast() & 1) != 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_2425C74D0;
          *(_QWORD *)(inited + 32) = v7;
          *(_QWORD *)(inited + 40) = v11;
          *(_QWORD *)&v37 = inited;
          sub_24259FCCC();
          v15 = v37;
          type metadata accessor for Stream();
          v16 = swift_initStackObject();
          swift_retain();
          swift_retain();
          result = (uint64_t)mlx_default_device();
          v17 = result;
          if (result)
          {
            result = mlx_default_stream(result);
            v18 = result;
            if (result)
            {
              *(_QWORD *)(v16 + 16) = result;
              mlx_free(v17);
              *(_QWORD *)&v37 = v16;
              v19 = concatenated(_:axis:stream:)(v15, v36, (uint64_t *)&v37);
              swift_bridgeObjectRelease();
              swift_setDeallocating();
              mlx_free(v18);
              a2[3] = type metadata accessor for MLXArray();
              swift_release();
              result = swift_release();
              *a2 = v19;
              return result;
            }
            goto LABEL_35;
          }
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
      }
    }
    result = (uint64_t)mlx_default_device();
    v20 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v21 = result;
      if (result)
      {
        mlx_free(v20);
        result = (uint64_t)mlx_flatten(v7[2], 0, -1, v21);
        v22 = result;
        if (result)
        {
          v23 = type metadata accessor for MLXArray();
          v24 = swift_allocObject();
          *(_QWORD *)(v24 + 16) = v22;
          mlx_free(v21);
          result = (uint64_t)mlx_default_device();
          v25 = result;
          if (result)
          {
            result = mlx_default_stream(result);
            v26 = result;
            if (result)
            {
              mlx_free(v25);
              result = (uint64_t)mlx_flatten(v11[2], 0, -1, v26);
              v27 = result;
              if (result)
              {
                v39 = v11;
                v35 = v23;
                v28 = swift_allocObject();
                *(_QWORD *)(v28 + 16) = v27;
                mlx_free(v26);
                __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
                v29 = swift_initStackObject();
                *(_OWORD *)(v29 + 16) = xmmword_2425C74D0;
                *(_QWORD *)(v29 + 32) = v24;
                *(_QWORD *)(v29 + 40) = v28;
                *(_QWORD *)&v37 = v29;
                sub_24259FCCC();
                v30 = v37;
                type metadata accessor for Stream();
                v31 = swift_initStackObject();
                swift_retain();
                swift_retain();
                result = (uint64_t)mlx_default_device();
                v32 = result;
                if (result)
                {
                  result = mlx_default_stream(result);
                  v33 = result;
                  if (result)
                  {
                    *(_QWORD *)(v31 + 16) = result;
                    mlx_free(v32);
                    *(_QWORD *)&v37 = v31;
                    v34 = concatenated(_:axis:stream:)(v30, 0, (uint64_t *)&v37);
                    swift_bridgeObjectRelease();
                    swift_setDeallocating();
                    mlx_free(v33);
                    a2[3] = v35;
                    swift_release();
                    swift_release();
                    swift_release();
                    result = swift_release();
                    *a2 = v34;
                    return result;
                  }
LABEL_33:
                  __break(1u);
                  goto LABEL_34;
                }
LABEL_32:
                __break(1u);
                goto LABEL_33;
              }
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_242579A48(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16) && (v3 = sub_24255A05C(97, 0xE100000000000000), (v4 & 1) != 0))
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v3, (uint64_t)v11);
  else
    memset(v11, 0, sizeof(v11));
  v5 = sub_242579CC0((uint64_t)v11);
  result = sub_2425264C4((uint64_t)v11, &qword_2571FC790);
  if (!v1)
  {
    result = (uint64_t)mlx_default_device();
    v7 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v8 = result;
      if (result)
      {
        mlx_free(v7);
        result = (uint64_t)mlx_any_all(v5[2], 0, v8);
        v9 = result;
        if (result)
        {
          mlx_free(v8);
          type metadata accessor for MLXArray();
          inited = swift_initStackObject();
          *(_QWORD *)(inited + 16) = v9;
          MLXArray.scalar()();
          swift_release();
          swift_setDeallocating();
          return mlx_free(*(_QWORD *)(inited + 16));
        }
LABEL_13:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_242579B84(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16) && (v3 = sub_24255A05C(97, 0xE100000000000000), (v4 & 1) != 0))
    sub_242526478(*(_QWORD *)(a1 + 56) + 32 * v3, (uint64_t)v11);
  else
    memset(v11, 0, sizeof(v11));
  v5 = sub_242579CC0((uint64_t)v11);
  result = sub_2425264C4((uint64_t)v11, &qword_2571FC790);
  if (!v1)
  {
    result = (uint64_t)mlx_default_device();
    v7 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v8 = result;
      if (result)
      {
        mlx_free(v7);
        result = (uint64_t)mlx_all_all(v5[2], 0, v8);
        v9 = result;
        if (result)
        {
          mlx_free(v8);
          type metadata accessor for MLXArray();
          inited = swift_initStackObject();
          *(_QWORD *)(inited + 16) = v9;
          MLXArray.scalar()();
          swift_release();
          swift_setDeallocating();
          return mlx_free(*(_QWORD *)(inited + 16));
        }
LABEL_13:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

_QWORD *sub_242579CC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _BYTE *v6;
  unsigned __int8 v8[24];
  uint64_t v9;
  _OWORD v10[2];

  sub_24256F0C4(a1, (uint64_t)v8);
  if (v9)
  {
    sub_2425264B4(v8, v10);
    v8[0] = 7;
    v1 = sub_24256BFA4((uint64_t)v10, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    sub_2425264C4((uint64_t)v8, &qword_2571FC790);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v2 = sub_24259F930();
    __swift_project_value_buffer(v2, (uint64_t)qword_2571FFB10);
    v3 = sub_24259F918();
    v4 = sub_24259FE70();
    v1 = (_QWORD *)v4;
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2422E0000, v3, (os_log_type_t)v1, "Failed to convert to MLXArray", v5, 2u);
      MEMORY[0x2426A88B8](v5, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v6 = 37;
    swift_willThrow();
  }
  return v1;
}

ValueMetadata *type metadata accessor for Numpy()
{
  return &type metadata for Numpy;
}

uint64_t sub_242579E3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_242579E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = MLXArray.shape.getter();
  v3 = swift_allocObject();
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v6 = v4;
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_24251C760(0, v6[2] + 1, 1, v6);
      v8 = v6[2];
      v7 = v6[3];
      if (v8 >= v7 >> 1)
        v6 = sub_24251C760((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
      v6[2] = v8 + 1;
      v6[v8 + 4] = v4;
      --v5;
    }
    while (v5);
    *(_QWORD *)(v3 + 16) = v6;
  }
  v9 = MEMORY[0x24BEE4AF8];
  sub_2425736A4(a1, MEMORY[0x24BEE4AF8], v3, v2);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_2425A002C();
    v11 = 0;
    do
    {
      v12 = v11 + 1;
      v13 = swift_bridgeObjectRetain();
      sub_2425407D0(v13, 0);
      swift_bridgeObjectRelease();
      sub_2425A0008();
      sub_2425A0038();
      sub_2425A0044();
      sub_2425A0014();
      v11 = v12;
    }
    while (v10 != v12);
    v14 = v9;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v14;
}

uint64_t sub_24257A050()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24257A0C0(char *a1, char *a2)
{
  return sub_24255DA2C(*a1, *a2);
}

uint64_t sub_24257A0CC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24257A13C()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24257A188()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24257A1F4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24257A250(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 28783;
  if (*v1)
    v2 = 0x7365756C6176;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24257A280()
{
  _BYTE *v0;

  if (*v0)
    return 0x7365756C6176;
  else
    return 28783;
}

uint64_t sub_24257A2AC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24257A30C()
{
  sub_24257AD78();
  return sub_2425A0344();
}

uint64_t sub_24257A334()
{
  sub_24257AD78();
  return sub_2425A0350();
}

uint64_t sub_24257A35C(_QWORD *a1)
{
  swift_allocObject();
  return sub_24257A3A4(a1);
}

uint64_t sub_24257A3A4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE578);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24257AD78();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for BoolOp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    v1[6] = sub_2425A01A0();
    v1[7] = v10;
    v1[5] = sub_242591C64((uint64_t)v8, 1);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24257A580@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48[5];
  uint64_t v49;

  v3 = v1;
  v4 = (_QWORD *)v1[5];
  if (v4[2] != 2)
  {
    if (qword_2571FC5C8 == -1)
    {
LABEL_10:
      v26 = sub_24259F930();
      __swift_project_value_buffer(v26, (uint64_t)qword_2571FFB10);
      swift_retain();
      v27 = sub_24259F918();
      v28 = sub_24259FE70();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc();
        *(_DWORD *)v29 = 134218240;
        v48[0] = *(_QWORD *)(v3[5] + 16);
        sub_24259FE94();
        *(_WORD *)(v29 + 12) = 2048;
        v48[0] = v3[2];
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v27, v28, "BoolOp> Only 2 values are supported, but got %ld. line %ld", (uint8_t *)v29, 0x16u);
        MEMORY[0x2426A88B8](v29, -1, -1);

      }
      else
      {

        swift_release();
      }
      sub_242554B60();
      swift_allocError();
      v31 = 31;
      goto LABEL_14;
    }
LABEL_35:
    swift_once();
    goto LABEL_10;
  }
  v5 = v2;
  v6 = v4[5];
  swift_bridgeObjectRetain();
  ObjectType = swift_getObjectType();
  v8 = MEMORY[0x2426A8918](v1 + 3);
  v9 = v1[4];
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  v11 = v4[7];
  v12 = swift_getObjectType();
  v13 = MEMORY[0x2426A8918](v1 + 3);
  v14 = v1[4];
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  v15(v13, v14, v12, v11);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v16 = v1[5];
  if (!*(_QWORD *)(v16 + 16))
  {
    __break(1u);
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v16 + 40);
  v18 = swift_getObjectType();
  v19 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v17 + 64);
  swift_unknownObjectRetain();
  v19(v48, v18, v17);
  result = swift_unknownObjectRelease();
  if (v5)
    return result;
  v21 = sub_2425917DC();
  sub_242557D30((uint64_t)v48);
  if (v21 == 2)
    goto LABEL_5;
  v32 = v1[5];
  if (*(_QWORD *)(v32 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v33 = *(_QWORD *)(v32 + 56);
    v34 = swift_getObjectType();
    v35 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v33 + 64);
    swift_unknownObjectRetain();
    v35(v48, v34, v33);
    swift_unknownObjectRelease();
    v36 = sub_2425917DC();
    result = sub_242557D30((uint64_t)v48);
    if (v36 == 2)
    {
LABEL_5:
      if (qword_2571FC5C8 != -1)
        swift_once();
      v22 = sub_24259F930();
      __swift_project_value_buffer(v22, (uint64_t)qword_2571FFB10);
      swift_retain();
      v23 = sub_24259F918();
      v24 = sub_24259FE70();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v25 = 134217984;
        v48[0] = v3[2];
        sub_24259FE94();
        swift_release();
        _os_log_impl(&dword_2422E0000, v23, v24, "BoolOp> Left or/add right operand are not Bool. line %ld", v25, 0xCu);
        MEMORY[0x2426A88B8](v25, -1, -1);

      }
      else
      {

        swift_release();
      }
      sub_242554B60();
      swift_allocError();
      v31 = 29;
      goto LABEL_14;
    }
    v37 = v3[6];
    v38 = v3[7];
    if (v37 == 29295 && v38 == 0xE200000000000000 || (result = sub_2425A0254(), (result & 1) != 0))
    {
      v39 = (v21 | v36) & 1;
LABEL_28:
      *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE1328];
      *(_BYTE *)a1 = v39 & 1;
      *(_BYTE *)(a1 + 32) = 0;
      return result;
    }
    if (v37 == 6579297 && v38 == 0xE300000000000000 || (result = sub_2425A0254(), (result & 1) != 0))
    {
      v39 = v21 & v36;
      goto LABEL_28;
    }
    if (qword_2571FC5C8 == -1)
      goto LABEL_30;
  }
  swift_once();
LABEL_30:
  v40 = sub_24259F930();
  __swift_project_value_buffer(v40, (uint64_t)qword_2571FFB10);
  swift_retain();
  v41 = sub_24259F918();
  v42 = sub_24259FE70();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v48[0] = v44;
    *(_DWORD *)v43 = 136315394;
    v45 = v3[6];
    v46 = v3[7];
    swift_bridgeObjectRetain();
    v49 = sub_24259B370(v45, v46, v48);
    sub_24259FE94();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2048;
    v49 = v3[2];
    sub_24259FE94();
    swift_release();
    _os_log_impl(&dword_2422E0000, v41, v42, "BoolOp> Op %s is not supported yet. line %ld", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2426A88B8](v44, -1, -1);
    MEMORY[0x2426A88B8](v43, -1, -1);

  }
  else
  {

    swift_release();
  }
  sub_242554B60();
  swift_allocError();
  v31 = 32;
LABEL_14:
  *v30 = v31;
  return swift_willThrow();
}

uint64_t sub_24257AC20()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16))
  {
    swift_getObjectType();
    sub_2425A0230();
    sub_24259FB70();
    swift_bridgeObjectRetain();
    sub_24259FB70();
    swift_bridgeObjectRelease();
    result = sub_24259FB70();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) >= 2uLL)
    {
      swift_getObjectType();
      sub_2425A0230();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24257AD08()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24257AD24()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BoolOp()
{
  return objc_opt_self();
}

unint64_t sub_24257AD78()
{
  unint64_t result;

  result = qword_2571FE580;
  if (!qword_2571FE580)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7624, &type metadata for BoolOp.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE580);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BoolOp.StrideCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24257AE08 + 4 * byte_2425C74F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24257AE3C + 4 * asc_2425C74F0[v4]))();
}

uint64_t sub_24257AE3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24257AE44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24257AE4CLL);
  return result;
}

uint64_t sub_24257AE58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24257AE60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24257AE64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24257AE6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BoolOp.StrideCodingKeys()
{
  return &type metadata for BoolOp.StrideCodingKeys;
}

unint64_t sub_24257AE8C()
{
  unint64_t result;

  result = qword_2571FE588;
  if (!qword_2571FE588)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C75FC, &type metadata for BoolOp.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE588);
  }
  return result;
}

unint64_t sub_24257AED4()
{
  unint64_t result;

  result = qword_2571FE590;
  if (!qword_2571FE590)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7534, &type metadata for BoolOp.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE590);
  }
  return result;
}

unint64_t sub_24257AF1C()
{
  unint64_t result;

  result = qword_2571FE598;
  if (!qword_2571FE598)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C755C, &type metadata for BoolOp.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE598);
  }
  return result;
}

void sub_24257AF60(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24257AFA8()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24257B078(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24257B0B4 + 4 * byte_2425C7681[a1]))(0x6E6F6974636E7566, 0xEC000000656D614ELL);
}

uint64_t sub_24257B0B4()
{
  return 1936159329;
}

uint64_t sub_24257B0C4()
{
  return 0x61796C6E6F736F70;
}

uint64_t sub_24257B0E4()
{
  return 0x7261796C6E6F776BLL;
}

uint64_t sub_24257B100()
{
  return 0x6C7561666544776BLL;
}

uint64_t sub_24257B120()
{
  return 0x73746C7561666564;
}

uint64_t sub_24257B138()
{
  return 2036625250;
}

uint64_t sub_24257B148()
{
  return 0x677261726176;
}

uint64_t sub_24257B15C()
{
  return 0x677261776BLL;
}

uint64_t sub_24257B170(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24257B1AC + 4 * byte_2425C768A[a1]))(0x6E6F6974636E7566, 0xEC000000656D614ELL);
}

uint64_t sub_24257B1AC()
{
  return 1936159329;
}

uint64_t sub_24257B1BC()
{
  return 0x61796C6E6F736F70;
}

uint64_t sub_24257B1DC()
{
  return 0x7261796C6E6F776BLL;
}

uint64_t sub_24257B1F8()
{
  return 0x6C7561666544776BLL;
}

uint64_t sub_24257B218()
{
  return 0x73746C7561666564;
}

uint64_t sub_24257B230()
{
  return 2036625250;
}

uint64_t sub_24257B240()
{
  return 0x677261726176;
}

uint64_t sub_24257B254()
{
  return 0x677261776BLL;
}

void sub_24257B268(char *a1)
{
  sub_24255E080(*a1);
}

uint64_t sub_24257B274()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2425A02D8();
  sub_24257AF60((uint64_t)v3, v1);
  return sub_2425A02F0();
}

void sub_24257B2B8(uint64_t a1)
{
  char *v1;

  sub_24257AF60(a1, *v1);
}

uint64_t sub_24257B2C0()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2425A02D8();
  sub_24257AF60((uint64_t)v3, v1);
  return sub_2425A02F0();
}

uint64_t sub_24257B300@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24257C2B4();
  *a1 = result;
  return result;
}

uint64_t sub_24257B32C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24257B078(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24257B354()
{
  unsigned __int8 *v0;

  return sub_24257B170(*v0);
}

uint64_t sub_24257B35C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24257C2B4();
  *a1 = result;
  return result;
}

void sub_24257B380(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_24257B38C()
{
  sub_24257BFE0();
  return sub_2425A0344();
}

uint64_t sub_24257B3B4()
{
  sub_24257BFE0();
  return sub_2425A0350();
}

uint64_t sub_24257B3DC(_QWORD *a1)
{
  swift_allocObject();
  return sub_24257B424(a1);
}

uint64_t sub_24257B424(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  char v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE7D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24257BFE0();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for FunctionDef();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v14[0]) = 0;
    *(_QWORD *)(v1 + 40) = sub_2425A01A0();
    *(_QWORD *)(v1 + 48) = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC9E0);
    v15 = 1;
    sub_24257C024();
    sub_2425A01D0();
    *(_QWORD *)(v1 + 56) = v14[0];
    v15 = 2;
    v13 = 0;
    sub_2425A01D0();
    *(_QWORD *)(v1 + 64) = v14[0];
    v15 = 3;
    sub_2425A01D0();
    *(_QWORD *)(v1 + 72) = v14[0];
    LOBYTE(v14[0]) = 7;
    *(_QWORD *)(v1 + 80) = sub_2425A01A0();
    *(_QWORD *)(v1 + 88) = v11;
    swift_bridgeObjectRelease();
    LOBYTE(v14[0]) = 8;
    *(_QWORD *)(v1 + 96) = sub_2425A01A0();
    *(_QWORD *)(v1 + 104) = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 112) = sub_242593E30((uint64_t)v8, 4);
    *(_QWORD *)(v1 + 120) = sub_242593E30((uint64_t)v8, 5);
    v15 = 6;
    type metadata accessor for LexicalBlock();
    sub_24256F18C();
    sub_2425A01D0();
    MEMORY[0x80] = v14[0];
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v14);
    v3 = sub_24259BC74(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24257B924@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[4];
  uint64_t v20;
  _QWORD v21[5];
  uint64_t ObjectType;

  v4 = v1[16];
  MEMORY[0x2426A8918](v1 + 3);
  *(_QWORD *)(v4 + 32) = v1[4];
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  result = MEMORY[0x2426A8918](v1 + 3);
  if (result)
  {
    v6 = v1[4];
    v7 = v1[5];
    v8 = v1[6];
    swift_bridgeObjectRetain_n();
    sub_24257BB48((uint64_t)v19);
    if (v2)
    {
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    ObjectType = swift_getObjectType();
    v14 = v19[3];
    v15 = v19[2];
    v13 = v20;
    swift_retain();
    v18 = v6;
    v9 = MEMORY[0x24BEE4AF8];
    v16 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
    v17 = type metadata accessor for Function();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 32) = v9;
    *(_QWORD *)(v10 + 40) = v9;
    *(_QWORD *)(v10 + 48) = v9;
    *(_QWORD *)(v10 + 56) = v9;
    *(_QWORD *)(v10 + 64) = v9;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_QWORD *)(v10 + 104) = sub_2425583E8(v9);
    *(_QWORD *)(v10 + 16) = v7;
    *(_QWORD *)(v10 + 24) = v8;
    v11 = v19[1];
    *(_OWORD *)(v10 + 32) = v19[0];
    *(_OWORD *)(v10 + 48) = v11;
    *(_OWORD *)(v10 + 64) = v15;
    *(_OWORD *)(v10 + 80) = v14;
    *(_QWORD *)(v10 + 96) = v13;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(_QWORD *)(v10 + 104) = v16;
    swift_bridgeObjectRelease();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_24257BFA4;
    *(_QWORD *)(v12 + 24) = v1;
    *(_QWORD *)(v10 + 112) = sub_242562F18;
    *(_QWORD *)(v10 + 120) = v12;
    v21[3] = v17;
    v21[0] = v10;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(v18 + 64))(v7, v8, v21, ObjectType);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_24257BB48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_242583418(v4, v1);
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v2)
  {
    swift_retain();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_242583418(v7, v1);
    swift_bridgeObjectRelease();
    swift_release();
    v9 = *(_QWORD *)(v1 + 56);
    v10 = *(_QWORD *)(v1 + 64);
    v11 = *(_QWORD *)(v1 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = sub_2425813C8(v5);
    swift_bridgeObjectRelease();
    v13 = sub_2425813C8(v8);
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v1 + 80);
    v15 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v14;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 88);
    *(_QWORD *)(a1 + 64) = v15;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24257BC80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _BYTE v8[40];
  uint64_t v9[4];

  v6 = *(_QWORD *)(v2 + 128);
  MEMORY[0x2426A8918](v2 + 24);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v2 + 32);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_retain();
  sub_242598FD4(a1);
  if (v3)
    return swift_release();
  sub_242598C7C((uint64_t)v8);
  swift_release();
  sub_24259BDDC(v9);
  sub_242557D30((uint64_t)v8);
  sub_242588900((uint64_t)v9, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

_OWORD *sub_24257BD5C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *result;
  _OWORD v5[2];

  result = (_OWORD *)sub_24257BC80(a1, (uint64_t *)v5);
  if (!v2)
    return sub_2425264B4(v5, a2);
  return result;
}

uint64_t sub_24257BDA4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_bridgeObjectRetain();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_retain();
  v0 = sub_242598E28();
  v2 = v1;
  swift_release();
  sub_242585A04(v0, v2);
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return 543581540;
}

uint64_t sub_24257BEAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_24257BF00()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_24257BF64()
{
  sub_24257BF00();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FunctionDef()
{
  return objc_opt_self();
}

_OWORD *sub_24257BFA4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_24257BD5C(a1, a2);
}

uint64_t sub_24257BFBC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_24257BFE0()
{
  unint64_t result;

  result = qword_2571FE7D8;
  if (!qword_2571FE7D8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C77F0, &type metadata for FunctionDef.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE7D8);
  }
  return result;
}

unint64_t sub_24257C024()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2571FE7E0;
  if (!qword_2571FE7E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2571FC9E0);
    v2 = MEMORY[0x24BEE0D38];
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2571FE7E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FunctionDef.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FunctionDef.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_24257C15C + 4 * byte_2425C7698[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_24257C190 + 4 * byte_2425C7693[v4]))();
}

uint64_t sub_24257C190(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24257C198(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24257C1A0);
  return result;
}

uint64_t sub_24257C1AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24257C1B4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_24257C1B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24257C1C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FunctionDef.CodingKeys()
{
  return &type metadata for FunctionDef.CodingKeys;
}

unint64_t sub_24257C1E0()
{
  unint64_t result;

  result = qword_2571FE7E8;
  if (!qword_2571FE7E8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C77C8, &type metadata for FunctionDef.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE7E8);
  }
  return result;
}

unint64_t sub_24257C228()
{
  unint64_t result;

  result = qword_2571FE7F0;
  if (!qword_2571FE7F0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7700, &type metadata for FunctionDef.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE7F0);
  }
  return result;
}

unint64_t sub_24257C270()
{
  unint64_t result;

  result = qword_2571FE7F8;
  if (!qword_2571FE7F8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7728, &type metadata for FunctionDef.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE7F8);
  }
  return result;
}

uint64_t sub_24257C2B4()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_24257C2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_0;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_0, v3, a1);
}

uint64_t sub_24257C334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *boxed_opaque_existential_0;
  int v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v22[5];

  v6 = v5;
  v10 = type metadata accessor for _ConcreteComparableBox(255, a2, a3, a4);
  v11 = sub_24259FE7C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22[-1] - v13;
  v22[3] = a1;
  v22[4] = (uint64_t)&off_251357BA0;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_0, v6, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE980);
  v16 = swift_dynamicCast();
  v17 = *(_QWORD *)(v10 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v16)
  {
    v18(v14, 0, 1, v10);
    v19 = *(_QWORD *)(a2 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(a5, v14, a2);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a5, 0, 1, a2);
  }
  else
  {
    v18(v14, 1, 1, v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a5, 1, 1, a2);
  }
}

uint64_t sub_24257C4A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_24259FE7C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 32))(v4, *(_QWORD *)(a2 + 24), v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v15 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
    v15 = sub_24259FAA4();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v4);
  }
  return v15 & 1;
}

uint64_t sub_24257C608(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_24259FE7C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 32))(v4, *(_QWORD *)(a2 + 24), v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v15 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
    v15 = sub_24259FA50();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v4);
  }
  return v15 & 1;
}

uint64_t sub_24257C778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_24257C334(a3, a1, a2, a4, a5);
}

uint64_t sub_24257C78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *boxed_opaque_existential_0;

  a5[3] = type metadata accessor for _ConcreteComparableBox(0, a2, a3, a4);
  a5[4] = (uint64_t)&off_251357BA0;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_0, a1, a2);
}

uint64_t sub_24257C7E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, v3, v4) & 1;
}

uint64_t sub_24257C830(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a2, v3, v4) & 1;
}

BOOL sub_24257C87C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  return ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4) & 1) == 0;
}

BOOL sub_24257C8D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a2, v3, v4) & 1) == 0;
}

uint64_t sub_24257C920(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4) & 1;
}

uint64_t sub_24257C970()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v4, v1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE980);
  return sub_24259FB10();
}

uint64_t static NSString.< infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_24259FAE0();
  v2 = v1;
  if (v0 == sub_24259FAE0() && v2 == v3)
    v4 = 0;
  else
    v4 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_24257CA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_24259FAE0();
  v2 = v1;
  if (v0 == sub_24259FAE0() && v2 == v3)
    v5 = 0;
  else
    v5 = sub_2425A0254();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL static NSNumber.< infix(_:_:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_compare_, a2) == (id)-1;
}

BOOL sub_24257CB20(id *a1, _QWORD *a2)
{
  return objc_msgSend(*a1, sel_compare_, *a2) == (id)-1;
}

uint64_t sub_24257CB50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255E450(*a1, *a2);
}

uint64_t sub_24257CB5C()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24257CBF4()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24257CC68()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24257CCFC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242580120();
  *a1 = result;
  return result;
}

void sub_24257CD28(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE300000000000000;
  v5 = 7565423;
  if (v2 != 1)
  {
    v5 = 0x74617261706D6F63;
    v4 = 0xEB0000000073726FLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1952867692;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_24257CD80()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 7565423;
  if (*v0 != 1)
    v1 = 0x74617261706D6F63;
  if (*v0)
    return v1;
  else
    return 1952867692;
}

uint64_t sub_24257CDD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242580120();
  *a1 = result;
  return result;
}

uint64_t sub_24257CDF8()
{
  sub_24257FAAC();
  return sub_2425A0344();
}

uint64_t sub_24257CE20()
{
  sub_24257FAAC();
  return sub_2425A0350();
}

uint64_t sub_24257CE48(_QWORD *a1)
{
  swift_allocObject();
  return sub_24257CE90(a1);
}

uint64_t sub_24257CE90(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE988);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24257FAAC();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Comparison();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_24258E8FC((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_242596000((uint64_t)v8, 1);
    v1[8] = sub_242596000((uint64_t)v8, 2);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_24257D090(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _UNKNOWN **v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  _UNKNOWN **v63;
  char v64;
  uint64_t v65;
  _UNKNOWN **v66;
  uint64_t v67;
  _UNKNOWN **v68;
  char v69;
  uint64_t v70;
  _UNKNOWN **v71;
  uint64_t v72;
  _UNKNOWN **v73;
  uint64_t v74;
  os_log_type_t v75;
  _DWORD *v76;
  _BYTE *v77;
  _BYTE *v78;
  _DWORD v79[76];
  uint64_t v80;
  uint64_t v81[3];
  uint64_t v82;
  _UNKNOWN **v83;
  __int128 v84;
  __int128 v85;
  _UNKNOWN **v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _QWORD v90[3];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  sub_242526478(a1, (uint64_t)&v84);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_24251DEC8(&v87, (uint64_t)v90);
    sub_242526478(a3, (uint64_t)v81);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_24251DEC8(&v84, (uint64_t)&v87);
      v6 = v91;
      v7 = v92;
      __swift_project_boxed_opaque_existential_1(v90, v91);
      LOBYTE(v84) = 7;
      v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v7 + 8))(&v84, v6, v7);
      v9 = *((_QWORD *)&v88 + 1);
      v10 = v89;
      __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
      LOBYTE(v84) = 7;
      v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v10 + 8))(&v84, v9, v10);
      switch(a2)
      {
        case 0:
          result = (uint64_t)mlx_default_device();
          v13 = result;
          if (result)
          {
            result = mlx_default_stream(result);
            v14 = result;
            if (result)
            {
              mlx_free(v13);
              result = (uint64_t)mlx_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v11 + 16), v14);
              v15 = result;
              if (result)
              {
                mlx_free(v14);
                type metadata accessor for MLXArray();
                *(_QWORD *)(swift_initStackObject() + 16) = v15;
                result = (uint64_t)mlx_default_device();
                v16 = result;
                if (result)
                {
                  result = mlx_default_stream(result);
                  v17 = result;
                  if (result)
                  {
                    mlx_free(v16);
                    result = (uint64_t)mlx_all_all(v15, 0, v17);
                    v18 = result;
                    if (result)
                    {
LABEL_54:
                      swift_release();
                      mlx_free(v17);
                      *(_QWORD *)(swift_initStackObject() + 16) = v18;
                      LOBYTE(v58) = sub_24256A5E0();
                      swift_release();
                      swift_release();
                      swift_setDeallocating();
                      mlx_free(v18);
                      goto LABEL_67;
                    }
LABEL_79:
                    __break(1u);
LABEL_80:
                    __break(1u);
LABEL_81:
                    __break(1u);
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
LABEL_88:
                    __break(1u);
LABEL_89:
                    __break(1u);
LABEL_90:
                    __break(1u);
LABEL_91:
                    __break(1u);
LABEL_92:
                    __break(1u);
LABEL_93:
                    __break(1u);
LABEL_94:
                    __break(1u);
LABEL_95:
                    __break(1u);
LABEL_96:
                    __break(1u);
LABEL_97:
                    __break(1u);
LABEL_98:
                    __break(1u);
LABEL_99:
                    __break(1u);
LABEL_100:
                    __break(1u);
LABEL_101:
                    __break(1u);
LABEL_102:
                    __break(1u);
LABEL_103:
                    __break(1u);
LABEL_104:
                    __break(1u);
LABEL_105:
                    __break(1u);
LABEL_106:
                    __break(1u);
LABEL_107:
                    __break(1u);
LABEL_108:
                    __break(1u);
LABEL_109:
                    __break(1u);
                    return result;
                  }
LABEL_78:
                  __break(1u);
                  goto LABEL_79;
                }
LABEL_77:
                __break(1u);
                goto LABEL_78;
              }
LABEL_76:
              __break(1u);
              goto LABEL_77;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          goto LABEL_76;
        case 1:
          result = (uint64_t)mlx_default_device();
          v38 = result;
          if (!result)
            goto LABEL_80;
          result = mlx_default_stream(result);
          v39 = result;
          if (!result)
            goto LABEL_81;
          mlx_free(v38);
          result = (uint64_t)mlx_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v11 + 16), v39);
          v40 = result;
          if (!result)
            goto LABEL_82;
          mlx_free(v39);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v40;
          result = (uint64_t)mlx_default_device();
          v41 = result;
          if (!result)
            goto LABEL_83;
          result = mlx_default_stream(result);
          v17 = result;
          if (!result)
            goto LABEL_84;
          mlx_free(v41);
          result = (uint64_t)mlx_all_all(v40, 0, v17);
          v18 = result;
          if (result)
            goto LABEL_54;
          goto LABEL_85;
        case 2:
          result = (uint64_t)mlx_default_device();
          v42 = result;
          if (!result)
            goto LABEL_86;
          result = mlx_default_stream(result);
          v43 = result;
          if (!result)
            goto LABEL_87;
          mlx_free(v42);
          result = (uint64_t)mlx_greater(*(_QWORD *)(v8 + 16), *(_QWORD *)(v11 + 16), v43);
          v44 = result;
          if (!result)
            goto LABEL_88;
          mlx_free(v43);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v44;
          result = (uint64_t)mlx_default_device();
          v45 = result;
          if (!result)
            goto LABEL_89;
          result = mlx_default_stream(result);
          v17 = result;
          if (!result)
            goto LABEL_90;
          mlx_free(v45);
          result = (uint64_t)mlx_all_all(v44, 0, v17);
          v18 = result;
          if (result)
            goto LABEL_54;
          goto LABEL_91;
        case 3:
          result = (uint64_t)mlx_default_device();
          v46 = result;
          if (!result)
            goto LABEL_92;
          result = mlx_default_stream(result);
          v47 = result;
          if (!result)
            goto LABEL_93;
          mlx_free(v46);
          result = (uint64_t)mlx_greater_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v11 + 16), v47);
          v48 = result;
          if (!result)
            goto LABEL_94;
          mlx_free(v47);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v48;
          result = (uint64_t)mlx_default_device();
          v49 = result;
          if (!result)
            goto LABEL_95;
          result = mlx_default_stream(result);
          v17 = result;
          if (!result)
            goto LABEL_96;
          mlx_free(v49);
          result = (uint64_t)mlx_all_all(v48, 0, v17);
          v18 = result;
          if (result)
            goto LABEL_54;
          goto LABEL_97;
        case 4:
          result = (uint64_t)mlx_default_device();
          v50 = result;
          if (!result)
            goto LABEL_98;
          result = mlx_default_stream(result);
          v51 = result;
          if (!result)
            goto LABEL_99;
          mlx_free(v50);
          result = (uint64_t)mlx_less(*(_QWORD *)(v8 + 16), *(_QWORD *)(v11 + 16), v51);
          v52 = result;
          if (!result)
            goto LABEL_100;
          mlx_free(v51);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v52;
          result = (uint64_t)mlx_default_device();
          v53 = result;
          if (!result)
            goto LABEL_101;
          result = mlx_default_stream(result);
          v17 = result;
          if (!result)
            goto LABEL_102;
          mlx_free(v53);
          result = (uint64_t)mlx_all_all(v52, 0, v17);
          v18 = result;
          if (result)
            goto LABEL_54;
          goto LABEL_103;
        case 5:
          result = (uint64_t)mlx_default_device();
          v54 = result;
          if (!result)
            goto LABEL_104;
          result = mlx_default_stream(result);
          v55 = result;
          if (!result)
            goto LABEL_105;
          mlx_free(v54);
          result = (uint64_t)mlx_less_equal(*(_QWORD *)(v8 + 16), *(_QWORD *)(v11 + 16), v55);
          v56 = result;
          if (!result)
            goto LABEL_106;
          mlx_free(v55);
          type metadata accessor for MLXArray();
          *(_QWORD *)(swift_initStackObject() + 16) = v56;
          result = (uint64_t)mlx_default_device();
          v57 = result;
          if (!result)
            goto LABEL_107;
          result = mlx_default_stream(result);
          v17 = result;
          if (!result)
            goto LABEL_108;
          mlx_free(v57);
          result = (uint64_t)mlx_all_all(v56, 0, v17);
          v18 = result;
          if (result)
            goto LABEL_54;
          goto LABEL_109;
        default:
          if (qword_2571FC5C8 != -1)
            swift_once();
          v59 = sub_24259F930();
          __swift_project_value_buffer(v59, (uint64_t)qword_2571FFB10);
          swift_retain_n();
          v58 = sub_24259F918();
          v60 = sub_24259FE70();
          if (os_log_type_enabled((os_log_t)v58, (os_log_type_t)v60))
          {
            v79[1] = v60;
            v61 = (_DWORD *)swift_slowAlloc();
            *(_QWORD *)&v84 = swift_slowAlloc();
            *v61 = 136315394;
            v93 = v11;
            __asm { BR              X10 }
          }

          swift_release_n();
          sub_242554B60();
          swift_allocError();
          *v77 = 16;
          swift_willThrow();
          swift_release();
          swift_release();
          goto LABEL_67;
      }
    }
    v86 = 0;
    v84 = 0u;
    v85 = 0u;
    sub_2425264C4((uint64_t)&v84, &qword_2571FDAD8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
  }
  else
  {
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    sub_2425264C4((uint64_t)&v87, &qword_2571FDAD8);
  }
  sub_242526478(a1, (uint64_t)&v84);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE998);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    sub_2425264C4((uint64_t)&v87, &qword_2571FE9A0);
    goto LABEL_19;
  }
  sub_24251DEC8(&v87, (uint64_t)v90);
  sub_242526478(a3, (uint64_t)v81);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v86 = 0;
    v84 = 0u;
    v85 = 0u;
    sub_2425264C4((uint64_t)&v84, &qword_2571FE9A0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
LABEL_19:
    __asm { BR              X10 }
  }
  sub_24251DEC8(&v84, (uint64_t)&v87);
  v19 = v91;
  v20 = v92;
  v21 = __swift_project_boxed_opaque_existential_1(v90, v91);
  v22 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v24);
  *((_QWORD *)&v85 + 1) = type metadata accessor for _ConcreteComparableBox(0, v19, v20, v25);
  v86 = &off_251357BA0;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v84);
  (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_0, v24, v19);
  v27 = *((_QWORD *)&v88 + 1);
  v28 = v89;
  v29 = __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
  v30 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v30 + 16))(v32);
  v82 = type metadata accessor for _ConcreteComparableBox(0, v27, v28, v33);
  v83 = &off_251357BA0;
  v34 = __swift_allocate_boxed_opaque_existential_0(v81);
  (*(void (**)(uint64_t *, char *, uint64_t))(v30 + 32))(v34, v32, v27);
  switch(a2)
  {
    case 0:
      v35 = *((_QWORD *)&v85 + 1);
      v36 = v86;
      __swift_project_boxed_opaque_existential_1(&v84, *((uint64_t *)&v85 + 1));
      v37 = ((uint64_t (*)(uint64_t *, uint64_t, _UNKNOWN **))v36[2])(v81, v35, v36);
      goto LABEL_63;
    case 1:
      v62 = *((_QWORD *)&v85 + 1);
      v63 = v86;
      __swift_project_boxed_opaque_existential_1(&v84, *((uint64_t *)&v85 + 1));
      v64 = ((uint64_t (*)(uint64_t *, uint64_t, _UNKNOWN **))v63[2])(v81, v62, v63);
      sub_24257FAF0((uint64_t)v81);
      sub_24257FAF0((uint64_t)&v84);
      LOBYTE(v58) = v64 ^ 1;
      break;
    case 2:
      v65 = v82;
      v66 = v83;
      __swift_project_boxed_opaque_existential_1(v81, v82);
      v37 = ((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v66[3])(&v84, v65, v66);
      goto LABEL_63;
    case 3:
      v67 = *((_QWORD *)&v85 + 1);
      v68 = v86;
      __swift_project_boxed_opaque_existential_1(&v84, *((uint64_t *)&v85 + 1));
      v69 = ((uint64_t (*)(uint64_t *, uint64_t, _UNKNOWN **))v68[3])(v81, v67, v68);
      goto LABEL_65;
    case 4:
      v70 = *((_QWORD *)&v85 + 1);
      v71 = v86;
      __swift_project_boxed_opaque_existential_1(&v84, *((uint64_t *)&v85 + 1));
      v37 = ((uint64_t (*)(uint64_t *, uint64_t, _UNKNOWN **))v71[3])(v81, v70, v71);
LABEL_63:
      LOBYTE(v58) = v37;
      goto LABEL_66;
    case 5:
      v72 = v82;
      v73 = v83;
      __swift_project_boxed_opaque_existential_1(v81, v82);
      v69 = ((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v73[3])(&v84, v72, v73);
LABEL_65:
      LOBYTE(v58) = v69 ^ 1;
LABEL_66:
      sub_24257FAF0((uint64_t)v81);
      sub_24257FAF0((uint64_t)&v84);
      break;
    default:
      if (qword_2571FC5C8 != -1)
        swift_once();
      v74 = sub_24259F930();
      __swift_project_value_buffer(v74, (uint64_t)qword_2571FFB10);
      swift_retain_n();
      v58 = sub_24259F918();
      v75 = sub_24259FE70();
      if (os_log_type_enabled((os_log_t)v58, v75))
      {
        v76 = (_DWORD *)swift_slowAlloc();
        v80 = swift_slowAlloc();
        *v76 = 136315394;
        __asm { BR              X10 }
      }

      swift_release_n();
      sub_242554B60();
      swift_allocError();
      *v78 = 16;
      swift_willThrow();
      sub_24257FAF0((uint64_t)v81);
      sub_24257FAF0((uint64_t)&v84);
      break;
  }
LABEL_67:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
  return v58 & 1;
}

uint64_t sub_24257E374(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  _BYTE *v18;
  __int128 v20[2];
  uint64_t v21;
  _QWORD v22[4];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  sub_242526478(a3, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE9A8);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(v20, (uint64_t)v23);
    if (a2 == 6)
    {
      v4 = v24;
      v13 = v25;
      __swift_project_boxed_opaque_existential_1(v23, v24);
      LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v4, v13) ^ 1;
      goto LABEL_12;
    }
    if (a2 == 7)
    {
      v4 = v24;
      v7 = v25;
      __swift_project_boxed_opaque_existential_1(v23, v24);
      LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v4, v7);
LABEL_12:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      return v4 & 1;
    }
    if (qword_2571FC5C8 != -1)
      swift_once();
    v14 = sub_24259F930();
    __swift_project_value_buffer(v14, (uint64_t)qword_2571FFB10);
    swift_retain_n();
    v15 = sub_24259F918();
    v16 = sub_24259FE70();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (_DWORD *)swift_slowAlloc();
      *(_QWORD *)&v20[0] = swift_slowAlloc();
      *v17 = 136315394;
      __asm { BR              X10 }
    }

    swift_release_n();
    sub_242554B60();
    swift_allocError();
    *v18 = 16;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_2425264C4((uint64_t)v20, qword_2571FE9B0);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v8 = sub_24259F930();
    __swift_project_value_buffer(v8, (uint64_t)qword_2571FFB10);
    swift_retain();
    v9 = sub_24259F918();
    v10 = sub_24259FE70();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v11 = 134217984;
      v23[0] = *(_QWORD *)(v4 + 16);
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v9, v10, "Comparison> Right operand is not MembershipTestable. line %ld", v11, 0xCu);
      MEMORY[0x2426A88B8](v11, -1, -1);

    }
    else
    {

      swift_release();
    }
    sub_242554B60();
    swift_allocError();
    *v12 = 18;
    swift_willThrow();
  }
  return v4 & 1;
}

uint64_t sub_24257E7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _UNKNOWN **v24;
  os_log_type_t v25;
  uint64_t v26;
  NSObject *v27;
  uint8_t *v28;
  _BYTE *v29;
  uint64_t v31[5];
  __int128 v32;
  __int128 v33;
  _UNKNOWN **v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  if ((_s8Morpheus0A5UtilsO5isNilySbypFZ_0(a2) & 1) != 0)
    return _s8Morpheus0A5UtilsO5isNilySbypFZ_0(a1) & 1;
  sub_242526478(a1, (uint64_t)&v32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE998);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    sub_2425264C4((uint64_t)&v35, &qword_2571FE9A0);
LABEL_8:
    if (qword_2571FC5C8 != -1)
      swift_once();
    v26 = sub_24259F930();
    __swift_project_value_buffer(v26, (uint64_t)qword_2571FFB10);
    swift_retain();
    v27 = sub_24259F918();
    v25 = sub_24259FE70();
    if (os_log_type_enabled(v27, v25))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v28 = 134217984;
      v38[0] = *(_QWORD *)(v3 + 16);
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v27, v25, "Comparison> Left or/add right operand are not Comparable. line %ld", v28, 0xCu);
      MEMORY[0x2426A88B8](v28, -1, -1);

    }
    else
    {

      swift_release();
    }
    sub_242554B60();
    swift_allocError();
    *v29 = 17;
    swift_willThrow();
    return v25 & 1;
  }
  sub_24251DEC8(&v35, (uint64_t)v38);
  sub_242526478(a2, (uint64_t)v31);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    sub_2425264C4((uint64_t)&v32, &qword_2571FE9A0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    goto LABEL_8;
  }
  sub_24251DEC8(&v32, (uint64_t)&v35);
  v7 = v39;
  v8 = v40;
  v9 = __swift_project_boxed_opaque_existential_1(v38, v39);
  v10 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v12);
  *((_QWORD *)&v33 + 1) = type metadata accessor for _ConcreteComparableBox(0, v7, v8, v13);
  v34 = &off_251357BA0;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v32);
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_0, v12, v7);
  v15 = *((_QWORD *)&v36 + 1);
  v16 = v37;
  v17 = __swift_project_boxed_opaque_existential_1(&v35, *((uint64_t *)&v36 + 1));
  v18 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v31[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v20);
  v31[3] = type metadata accessor for _ConcreteComparableBox(0, v15, v16, v21);
  v31[4] = (uint64_t)&off_251357BA0;
  v22 = __swift_allocate_boxed_opaque_existential_0(v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 32))(v22, v20, v15);
  v23 = *((_QWORD *)&v33 + 1);
  v24 = v34;
  __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
  v25 = ((unsigned __int8 (*)(uint64_t *, uint64_t, _UNKNOWN **))v24[2])(v31, v23, v24);
  sub_24257FAF0((uint64_t)v31);
  sub_24257FAF0((uint64_t)&v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return v25 & 1;
}

uint64_t sub_24257EBA8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _BYTE *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  _BYTE *v71;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _OWORD v77[2];
  char v78;
  _OWORD v79[2];
  uint64_t v80[3];
  uint64_t v81;
  uint64_t v82[5];
  uint64_t *v83;

  v2 = v1;
  v3 = v1[6];
  ObjectType = swift_getObjectType();
  v5 = v1 + 3;
  v6 = MEMORY[0x2426A8918](v1 + 3);
  v7 = v1[4];
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v8(v6, v7, ObjectType, v3);
  swift_unknownObjectRelease();
  v9 = *(_QWORD *)(v1[7] + 16);
  v10 = v1;
  if (v9)
  {
    v11 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v12 = *v11;
      v13 = swift_getObjectType();
      v14 = MEMORY[0x2426A8918](v5);
      v15 = v1[4];
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
      swift_unknownObjectRetain();
      v17 = v15;
      v2 = v1;
      v16(v14, v17, v13, v12);
      swift_unknownObjectRelease();
      v11 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  v18 = *(_QWORD *)(v2[8] + 16);
  if (v18)
  {
    v19 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v20 = *v19;
      v21 = swift_getObjectType();
      v22 = MEMORY[0x2426A8918](v5);
      v23 = v1[4];
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 48);
      swift_unknownObjectRetain();
      v25 = v23;
      v2 = v1;
      v24(v22, v25, v21, v20);
      swift_unknownObjectRelease();
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v1[8] + 16);
  }
  else
  {
    v26 = 0;
  }
  if (*(_QWORD *)(v2[7] + 16) == v26)
  {
    v27 = v2[6];
    v28 = swift_getObjectType();
    v29 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v27 + 64);
    swift_unknownObjectRetain();
    v30 = (uint64_t)v83;
    v29(v75, v28, v27);
    if (v30)
      return swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_24259BDDC(v82);
    sub_242557D30((uint64_t)v75);
    v37 = v2[7];
    v38 = *(_QWORD *)(v37 + 16);
    v39 = MEMORY[0x24BEE4AF8];
    if (v38)
    {
      v73 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_242509D28(0, v38, 0);
      v39 = v73;
      v83 = (uint64_t *)v37;
      v40 = (uint64_t *)(v37 + 40);
      do
      {
        v41 = *v40;
        v42 = swift_getObjectType();
        v43 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v41 + 64);
        swift_unknownObjectRetain();
        v43(v75, v42, v41);
        sub_24255F890((uint64_t)v75, (uint64_t)v77);
        if (v78 && (sub_242557D30((uint64_t)v77), sub_24255F890((uint64_t)v75, (uint64_t)v77), v78 != 1))
        {
          sub_242557D30((uint64_t)v77);
          v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
          v44 = swift_allocObject();
          v80[0] = v44;
          *(_OWORD *)(v44 + 16) = 0u;
          *(_OWORD *)(v44 + 32) = 0u;
        }
        else
        {
          sub_24255BAB4((uint64_t)v77, (uint64_t)v79);
          sub_242588D2C((uint64_t)v79, v80);
          sub_2425264C4((uint64_t)v79, &qword_2571FC790);
        }
        sub_242557D30((uint64_t)v75);
        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_242509D28(0, *(_QWORD *)(v39 + 16) + 1, 1);
          v39 = v73;
        }
        v46 = *(_QWORD *)(v39 + 16);
        v45 = *(_QWORD *)(v39 + 24);
        if (v46 >= v45 >> 1)
        {
          sub_242509D28(v45 > 1, v46 + 1, 1);
          v39 = v73;
        }
        *(_QWORD *)(v39 + 16) = v46 + 1;
        sub_2425264B4(v80, (_OWORD *)(v39 + 32 * v46 + 32));
        v40 += 2;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease();
      v2 = v1;
    }
    v47 = v2[8];
    v48 = *(_QWORD *)(v47 + 16);
    v49 = MEMORY[0x24BEE4AF8];
    if (v48)
    {
      v83 = (uint64_t *)v39;
      v74 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_242509D28(0, v48, 0);
      v49 = v74;
      v50 = (uint64_t *)(v47 + 40);
      do
      {
        v51 = *v50;
        v52 = swift_getObjectType();
        v53 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v51 + 64);
        swift_unknownObjectRetain();
        v53(v75, v52, v51);
        sub_24255F890((uint64_t)v75, (uint64_t)v77);
        if (v78 && (sub_242557D30((uint64_t)v77), sub_24255F890((uint64_t)v75, (uint64_t)v77), v78 != 1))
        {
          sub_242557D30((uint64_t)v77);
          v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
          v54 = swift_allocObject();
          v80[0] = v54;
          *(_OWORD *)(v54 + 16) = 0u;
          *(_OWORD *)(v54 + 32) = 0u;
        }
        else
        {
          sub_24255BAB4((uint64_t)v77, (uint64_t)v79);
          sub_242588D2C((uint64_t)v79, v80);
          sub_2425264C4((uint64_t)v79, &qword_2571FC790);
        }
        sub_242557D30((uint64_t)v75);
        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_242509D28(0, *(_QWORD *)(v49 + 16) + 1, 1);
          v49 = v74;
        }
        v56 = *(_QWORD *)(v49 + 16);
        v55 = *(_QWORD *)(v49 + 24);
        if (v56 >= v55 >> 1)
        {
          sub_242509D28(v55 > 1, v56 + 1, 1);
          v49 = v74;
        }
        *(_QWORD *)(v49 + 16) = v56 + 1;
        sub_2425264B4(v80, (_OWORD *)(v49 + 32 * v56 + 32));
        v50 += 2;
        --v48;
      }
      while (v48);
      swift_bridgeObjectRelease();
      v39 = (uint64_t)v83;
    }
    sub_242526478((uint64_t)v82, (uint64_t)v77);
    v57 = *(_QWORD *)(v39 + 16);
    if (v57)
    {
      v58 = 0;
      v83 = &v76;
      v59 = 1;
      v60 = 32;
      while (2)
      {
        if (v58 >= v57)
        {
          __break(1u);
          goto LABEL_76;
        }
        sub_242526478(v39 + v60, (uint64_t)v80);
        v61 = *(_QWORD *)(v49 + 16);
        if (v58 != v61)
        {
          if (v58 < v61)
          {
            sub_2425264B4(v80, v75);
            v62 = v83;
            sub_242526478(v49 + v60, (uint64_t)v83);
            sub_2425264B4(v62, v80);
            sub_2425264B4(v75, v79);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v63 = sub_2425A017C();
              swift_bridgeObjectRelease();
              v64 = 1;
              switch(v63)
              {
                case 0:
                  v64 = 0;
                  goto LABEL_57;
                case 1:
                  goto LABEL_57;
                case 2:
                  v64 = 2;
                  goto LABEL_57;
                case 3:
                  v64 = 3;
                  goto LABEL_57;
                case 4:
                  v64 = 4;
                  goto LABEL_57;
                case 5:
                  v64 = 5;
LABEL_57:
                  sub_242526478((uint64_t)v80, (uint64_t)v79);
                  if ((v59 & 1) == 0)
                    goto LABEL_45;
                  v65 = sub_24257D090((uint64_t)v77, v64, (uint64_t)v79);
                  goto LABEL_66;
                case 6:
                  sub_242526478((uint64_t)v80, (uint64_t)v79);
                  if ((v59 & 1) == 0)
                    goto LABEL_45;
                  v66 = 6;
                  goto LABEL_63;
                case 7:
                  sub_242526478((uint64_t)v80, (uint64_t)v79);
                  if ((v59 & 1) == 0)
                    goto LABEL_45;
                  v66 = 7;
LABEL_63:
                  v65 = sub_24257E374((uint64_t)v77, v66, (uint64_t)v79);
                  goto LABEL_66;
                case 8:
                  sub_242526478((uint64_t)v80, (uint64_t)v79);
                  if ((v59 & 1) != 0)
                  {
                    v65 = sub_24257E7EC((uint64_t)v77, (uint64_t)v79);
LABEL_66:
                    v59 = v65;
                  }
                  else
                  {
LABEL_45:
                    v59 = 0;
                  }
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
                  ++v58;
                  sub_2425264B4(v80, v77);
                  v57 = *(_QWORD *)(v39 + 16);
                  v60 += 32;
                  if (v58 != v57)
                    continue;
                  goto LABEL_72;
                default:
                  break;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (qword_2571FC5C8 == -1)
              goto LABEL_69;
            goto LABEL_77;
          }
LABEL_76:
          __break(1u);
LABEL_77:
          swift_once();
LABEL_69:
          v67 = sub_24259F930();
          __swift_project_value_buffer(v67, (uint64_t)qword_2571FFB10);
          swift_retain();
          v68 = sub_24259F918();
          v69 = sub_24259FE70();
          if (os_log_type_enabled(v68, v69))
          {
            v70 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v70 = 134217984;
            *(_QWORD *)&v79[0] = v10[2];
            sub_24259FE94();
            swift_release();
            _os_log_impl(&dword_2422E0000, v68, v69, "Comparison> Not supported comparison operator. line %ld", v70, 0xCu);
            MEMORY[0x2426A88B8](v70, -1, -1);

          }
          else
          {

            swift_release();
          }
          sub_242554B60();
          swift_allocError();
          *v71 = 16;
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
        }
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
    }
    else
    {
      v59 = 1;
    }
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE1328];
    *(_BYTE *)a1 = v59 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
    *(_BYTE *)(a1 + 32) = 0;
    return result;
  }
  if (qword_2571FC5C8 != -1)
    swift_once();
  v32 = sub_24259F930();
  __swift_project_value_buffer(v32, (uint64_t)qword_2571FFB10);
  swift_retain();
  v33 = sub_24259F918();
  v34 = sub_24259FE70();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v35 = 134217984;
    *(_QWORD *)&v75[0] = v2[2];
    sub_24259FE94();
    swift_release();
    _os_log_impl(&dword_2422E0000, v33, v34, "Comparison> ops and comparators do not match. line %ld", v35, 0xCu);
    MEMORY[0x2426A88B8](v35, -1, -1);

  }
  else
  {

    swift_release();
  }
  sub_242554B60();
  swift_allocError();
  *v36 = 19;
  return swift_willThrow();
}

uint64_t sub_24257F670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  swift_unknownObjectRetain();
  v5 = sub_24259FB1C();
  sub_24259FB70();
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC780);
  MEMORY[0x2426A7958](v1, v2);
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  v3 = swift_bridgeObjectRetain();
  MEMORY[0x2426A7958](v3, v2);
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_24257F78C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24257F7B0()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24257F7EC()
{
  return sub_24257F844(&qword_2571FE800, &qword_2571FE808);
}

uint64_t sub_24257F818()
{
  return sub_24257F844(&qword_2571FE810, (unint64_t *)&qword_2571FC888);
}

uint64_t sub_24257F844(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_24257F884(255, a2);
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE5BE0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24257F884(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for Comparison()
{
  return objc_opt_self();
}

uint64_t destroy for AnyComparable(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for AnyComparable(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyComparable(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyComparable(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyComparable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyComparable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyComparable()
{
  return &type metadata for AnyComparable;
}

unint64_t sub_24257FA3C()
{
  unint64_t result;

  result = qword_2571FE978;
  if (!qword_2571FE978)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C79DC, &type metadata for AnyComparable);
    atomic_store(result, (unint64_t *)&qword_2571FE978);
  }
  return result;
}

uint64_t sub_24257FA80()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

unint64_t sub_24257FAAC()
{
  unint64_t result;

  result = qword_2571FE990;
  if (!qword_2571FE990)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7B44, &type metadata for Comparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FE990);
  }
  return result;
}

uint64_t sub_24257FAF0(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t type metadata accessor for _ConcreteComparableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConcreteComparableBox);
}

uint64_t sub_24257FB20()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24257FB8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_24257FBFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_24257FC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_24257FC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_24257FC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_24257FC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_24257FCCC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_24257FD7C + 4 * byte_2425C784B[(v7 - 1)]))();
}

void sub_24257FDCC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t storeEnumTagSinglePayload for Comparison.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24257FFC8 + 4 * byte_2425C785E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24257FFFC + 4 * byte_2425C7859[v4]))();
}

uint64_t sub_24257FFFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242580004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24258000CLL);
  return result;
}

uint64_t sub_242580018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242580020);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_242580024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24258002C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Comparison.CodingKeys()
{
  return &type metadata for Comparison.CodingKeys;
}

unint64_t sub_24258004C()
{
  unint64_t result;

  result = qword_2571FEA38;
  if (!qword_2571FEA38)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7B0C, &type metadata for Comparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEA38);
  }
  return result;
}

unint64_t sub_242580094()
{
  unint64_t result;

  result = qword_2571FEA40;
  if (!qword_2571FEA40)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7A44, &type metadata for Comparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEA40);
  }
  return result;
}

unint64_t sub_2425800DC()
{
  unint64_t result;

  result = qword_2571FEA48;
  if (!qword_2571FEA48)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7A6C, &type metadata for Comparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEA48);
  }
  return result;
}

uint64_t sub_242580120()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

Morpheus::MorpheusError_optional __swiftcall MorpheusError.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;
  char v3;

  v2 = 0;
  v3 = 35;
  switch(rawValue)
  {
    case 9201:
      goto LABEL_37;
    case 9202:
      v2 = 1;
      goto LABEL_37;
    case 9203:
      v2 = 2;
      goto LABEL_37;
    case 9204:
      v2 = 3;
      goto LABEL_37;
    case 9205:
      v2 = 4;
      goto LABEL_37;
    case 9206:
      v2 = 5;
      goto LABEL_37;
    case 9207:
      v2 = 6;
      goto LABEL_37;
    case 9208:
      v2 = 7;
      goto LABEL_37;
    case 9209:
      v2 = 8;
      goto LABEL_37;
    case 9210:
      v2 = 9;
      goto LABEL_37;
    case 9211:
      v2 = 10;
      goto LABEL_37;
    case 9212:
      v2 = 11;
      goto LABEL_37;
    case 9213:
      v2 = 12;
      goto LABEL_37;
    case 9214:
      v2 = 13;
      goto LABEL_37;
    case 9215:
      v2 = 14;
      goto LABEL_37;
    case 9216:
      v2 = 15;
      goto LABEL_37;
    case 9217:
      v2 = 16;
      goto LABEL_37;
    case 9218:
      v2 = 17;
      goto LABEL_37;
    case 9219:
      v2 = 18;
      goto LABEL_37;
    case 9220:
      v2 = 19;
      goto LABEL_37;
    case 9221:
      v2 = 20;
      goto LABEL_37;
    case 9222:
      v2 = 21;
      goto LABEL_37;
    case 9223:
      v2 = 22;
      goto LABEL_37;
    case 9224:
      v2 = 23;
      goto LABEL_37;
    case 9225:
      v2 = 24;
      goto LABEL_37;
    case 9226:
      v2 = 25;
      goto LABEL_37;
    case 9227:
      v2 = 26;
      goto LABEL_37;
    case 9228:
      v2 = 27;
      goto LABEL_37;
    case 9229:
      v2 = 28;
      goto LABEL_37;
    case 9230:
      v2 = 29;
      goto LABEL_37;
    case 9231:
      v2 = 30;
      goto LABEL_37;
    case 9232:
      v2 = 31;
      goto LABEL_37;
    case 9233:
      v2 = 32;
      goto LABEL_37;
    case 9234:
      v2 = 33;
      goto LABEL_37;
    case 9235:
      v2 = 34;
LABEL_37:
      v3 = v2;
      goto LABEL_38;
    case 9236:
LABEL_38:
      *v1 = v3;
      break;
    case 9237:
      *v1 = 36;
      break;
    case 9238:
      *v1 = 37;
      break;
    case 9239:
      *v1 = 38;
      break;
    case 9240:
      *v1 = 39;
      break;
    case 9241:
      *v1 = 40;
      break;
    case 9242:
      *v1 = 41;
      break;
    case 9243:
      *v1 = 42;
      break;
    case 9244:
      *v1 = 43;
      break;
    case 9245:
      *v1 = 44;
      break;
    case 9246:
      *v1 = 45;
      break;
    case 9247:
      *v1 = 46;
      break;
    case 9248:
      *v1 = 47;
      break;
    case 9249:
      *v1 = 48;
      break;
    case 9250:
      *v1 = 49;
      break;
    case 9251:
      *v1 = 50;
      break;
    case 9252:
      *v1 = 51;
      break;
    case 9253:
      *v1 = 52;
      break;
    default:
      *v1 = 53;
      break;
  }
  return (Morpheus::MorpheusError_optional)rawValue;
}

uint64_t MorpheusError.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 9201;
}

unint64_t sub_24258039C()
{
  unint64_t result;

  result = qword_2571FEA50;
  if (!qword_2571FEA50)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for MorpheusError, &type metadata for MorpheusError);
    atomic_store(result, (unint64_t *)&qword_2571FEA50);
  }
  return result;
}

uint64_t sub_2425803E0()
{
  sub_2425A02D8();
  sub_2425A02E4();
  return sub_2425A02F0();
}

uint64_t sub_242580428()
{
  return sub_2425A02E4();
}

uint64_t sub_242580458()
{
  sub_2425A02D8();
  sub_2425A02E4();
  return sub_2425A02F0();
}

Morpheus::MorpheusError_optional sub_24258049C(Swift::Int *a1)
{
  return MorpheusError.init(rawValue:)(*a1);
}

void sub_2425804A4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 9201;
}

uint64_t sub_2425804B8()
{
  sub_242580658();
  sub_24258069C();
  return sub_2425A02CC();
}

uint64_t getEnumTagSinglePayload for MorpheusError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xCC)
    goto LABEL_17;
  if (a2 + 52 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 52) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 52;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 52;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 52;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x35;
  v8 = v6 - 53;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MorpheusError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 52 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 52) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xCC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xCB)
    return ((uint64_t (*)(void))((char *)&loc_2425805D8 + 4 * byte_2425C7BCE[v4]))();
  *a1 = a2 + 52;
  return ((uint64_t (*)(void))((char *)sub_24258060C + 4 * byte_2425C7BC9[v4]))();
}

uint64_t sub_24258060C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242580614(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24258061CLL);
  return result;
}

uint64_t sub_242580628(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242580630);
  *(_BYTE *)result = a2 + 52;
  return result;
}

uint64_t sub_242580634(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24258063C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MorpheusError()
{
  return &type metadata for MorpheusError;
}

unint64_t sub_242580658()
{
  unint64_t result;

  result = qword_2571FEA58;
  if (!qword_2571FEA58)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for MorpheusError, &type metadata for MorpheusError);
    atomic_store(result, (unint64_t *)&qword_2571FEA58);
  }
  return result;
}

unint64_t sub_24258069C()
{
  unint64_t result;

  result = qword_2571FEA60;
  if (!qword_2571FEA60)
  {
    result = MEMORY[0x2426A87E0](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2571FEA60);
  }
  return result;
}

uint64_t Int.add(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;

  if (a2 == (int)a2)
  {
    v2 = result;
    result = mlx_array_from_int(a2);
    v3 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v3;
      sub_242588564(0, inited, v2);
      swift_setDeallocating();
      return mlx_free(v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2425807A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = *v1;
  if (*v1 == (int)*v1)
  {
    result = mlx_array_from_int(result);
    v4 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v4;
      sub_242588564(0, inited, a1);
      swift_setDeallocating();
      return mlx_free(v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Int32.add(_:)(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(0, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242580914(uint64_t a1)
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_int(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(0, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t UInt32.add(_:)(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(0, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_242580AB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242580ABCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_242580AD4(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t inited;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = *v1;
  v3 = mlx_array_from_data((unsigned __int8 *)&v6, (char *)(MEMORY[0x24BEE4AF8] + 32), 0, 2);
  if (!v3)
    __break(1u);
  type metadata accessor for MLXArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v3;
  sub_242588564(0, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_242580BC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x242580BCCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t Float.add(_:)(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(a2);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(0, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242580C94(uint64_t a1)
{
  float *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  result = mlx_array_from_float(*v1);
  v4 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v4;
    sub_242588564(0, inited, a1);
    swift_setDeallocating();
    return mlx_free(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Double.add(_:)(uint64_t a1, double a2)
{
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = a2;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(0, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_242580DFC(uint64_t a1)
{
  double *v1;
  float v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  v3 = *v1;
  result = mlx_array_from_float(v3);
  v5 = result;
  if (result)
  {
    type metadata accessor for MLXArray();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    sub_242588564(0, inited, a1);
    swift_setDeallocating();
    return mlx_free(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLXArray.add(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v5 = *v2;
  v12 = 7;
  result = (uint64_t)sub_24256BFA4(a1, &v12);
  if (!v3)
  {
    v7 = result;
    result = (uint64_t)mlx_default_device();
    v8 = result;
    if (result)
    {
      result = mlx_default_stream(result);
      v9 = result;
      if (result)
      {
        mlx_free(v8);
        result = (uint64_t)mlx_add(v2[2], *(_QWORD *)(v7 + 16), v9);
        v10 = result;
        if (result)
        {
          mlx_free(v9);
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = v10;
          a2[3] = v5;
          result = swift_release();
          *a2 = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_242580F98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLXArray.add(_:)(a1, a2);
}

uint64_t SharedMutableArray.add(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v11;
  __int128 v12[2];
  uint64_t v13;
  _BYTE v14[32];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  sub_242526478(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_24251DEC8(v12, (uint64_t)v15);
    v3 = SharedMutableArray.anyArray.getter();
    v4 = v16;
    v5 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    *(_QWORD *)&v12[0] = v3;
    sub_24251A60C(v6);
    v7 = *(_QWORD *)&v12[0];
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v7;
    a2[3] = v8;
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    sub_242581370((uint64_t)v12);
    sub_242554B60();
    swift_allocError();
    *v11 = 15;
    return swift_willThrow();
  }
}

uint64_t sub_2425810EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return SharedMutableArray.add(_:)(a1, a2);
}

uint64_t Array.add(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v11;
  __int128 v12[2];
  uint64_t v13;
  _BYTE v14[32];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  sub_242526478(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_24251DEC8(v12, (uint64_t)v15);
    v3 = sub_2425A0080();
    v4 = v16;
    v5 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    *(_QWORD *)&v12[0] = v3;
    sub_24251A60C(v6);
    v7 = *(_QWORD *)&v12[0];
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v7;
    a2[3] = v8;
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    sub_242581370((uint64_t)v12);
    sub_242554B60();
    swift_allocError();
    *v11 = 15;
    return swift_willThrow();
  }
}

uint64_t sub_242581258@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Array.add(_:)(a1, a2);
}

uint64_t String.add(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  sub_242526478(a1, (uint64_t)&v12);
  v7 = MEMORY[0x24BEE0D00];
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = a2;
    v13 = a3;
    swift_bridgeObjectRetain();
    sub_24259FB70();
    result = swift_bridgeObjectRelease();
    v9 = v12;
    v10 = v13;
    a4[3] = v7;
    *a4 = v9;
    a4[1] = v10;
  }
  else
  {
    sub_242554B60();
    swift_allocError();
    *v11 = 15;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_242581358@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return String.add(_:)(a1, *v2, v2[1], a2);
}

uint64_t sub_242581370(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of Summable.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_2425813C8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v8[32];
  _BYTE v9[32];
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    sub_242509D60(0, v1, 0);
    v4 = a1 + 32;
    v2 = v10;
    do
    {
      sub_242526478(v4, (uint64_t)v8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509D60(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v10;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_242509D60(v5 > 1, v6 + 1, 1);
        v2 = v10;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_24255BAB4((uint64_t)v9, v2 + 32 * v6 + 32);
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2425814F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _BYTE v5[32];
  uint64_t v6;

  v6 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  sub_2425A002C();
  if (!v2)
    return v6;
  for (i = a1 + 32; ; i += 32)
  {
    sub_242526478(i, (uint64_t)v5);
    sub_24252123C();
    if (!swift_dynamicCast())
      break;
    sub_2425A0008();
    sub_2425A0038();
    sub_2425A0044();
    sub_2425A0014();
    if (!--v2)
      return v6;
  }
  swift_release();

  return 0;
}

uint64_t sub_2425815EC(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  sub_242509AE4(0, v2, 0);
  v3 = v10;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_242526478(i, (uint64_t)v9);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509AE4(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v10;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_242509AE4(v5 > 1, v6 + 1, 1);
        v3 = v10;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      *(_QWORD *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2)
        return v3;
    }
    swift_release();
    return 0;
  }
  return v3;
}

uint64_t sub_242581728(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  _BYTE v10[32];
  __int128 v11[2];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  sub_242509D98(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_242526478(i, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7C8);
      if (!swift_dynamicCast())
        break;
      sub_24251DEC8(v8, (uint64_t)v11);
      sub_24251DEC8(v11, (uint64_t)v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509D98(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_242509D98(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      sub_24251DEC8(v8, v3 + 40 * v6 + 32);
      if (!--v2)
        return v3;
    }
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_release();
    sub_2425264C4((uint64_t)v8, &qword_2571FDAD8);
    return 0;
  }
  return v3;
}

uint64_t sub_24258189C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  sub_2425A002C();
  if (!v2)
    return v5;
  v3 = a1 + 32;
  type metadata accessor for FunctionDef();
  while (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
    sub_2425A0008();
    sub_2425A0038();
    sub_2425A0044();
    sub_2425A0014();
    v3 += 16;
    if (!--v2)
      return v5;
  }
  swift_release();
  return 0;
}

uint64_t sub_242581974(char *a1, char *a2)
{
  return sub_24255D74C(*a1, *a2);
}

uint64_t sub_242581980()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425819FC()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242581A54()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242581ACC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_242581B28(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 2036625250;
  if (!*v1)
    v2 = 0x6D614E7373616C63;
  v3 = 0xE900000000000065;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_242581B64()
{
  _BYTE *v0;

  if (*v0)
    return 2036625250;
  else
    return 0x6D614E7373616C63;
}

uint64_t sub_242581B9C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_242581BFC()
{
  sub_242583720();
  return sub_2425A0344();
}

uint64_t sub_242581C24()
{
  sub_242583720();
  return sub_2425A0350();
}

uint64_t sub_242581C4C(_QWORD *a1)
{
  swift_allocObject();
  return sub_242581C94(a1);
}

uint64_t sub_242581C94(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FEB90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242583720();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for ClassDef();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    v1[5] = sub_2425A01A0();
    v1[6] = v10;
    v1[7] = sub_24259601C((uint64_t)v8, 1);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_242581E70@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[4];
  uint64_t v57;

  v2 = v1;
  v3 = *(_QWORD *)(v1[7] + 16);
  if (!v3)
    goto LABEL_39;
  v57 = swift_bridgeObjectRetain();
  v4 = (uint64_t *)(v57 + 40);
  do
  {
    v5 = *v4;
    ObjectType = swift_getObjectType();
    v7 = MEMORY[0x2426A8918](v1 + 3);
    v8 = v1[4];
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
    swift_unknownObjectRetain();
    v9(v7, v8, ObjectType, v5);
    swift_unknownObjectRelease();
    v4 += 2;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v1[7] + 16);
  v2 = v1;
  if (!v10)
  {
LABEL_39:
    v29 = 0;
    *(_QWORD *)&v54 = MEMORY[0x24BEE4AF8];
    *((_QWORD *)&v54 + 1) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v55 = MEMORY[0x24BEE4AF8];
    *((_QWORD *)&v55 + 1) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v56[0] = MEMORY[0x24BEE4AF8];
    memset((char *)v56 + 8, 0, 32);
    goto LABEL_40;
  }
  v45 = v1;
  v57 = type metadata accessor for FunctionDef();
  swift_bridgeObjectRetain_n();
  v11 = 32;
  while (1)
  {
    v12 = swift_dynamicCastClass();
    if (!v12)
      goto LABEL_7;
    v14 = *(_QWORD *)(v12 + 56);
    v13 = *(_QWORD **)(v12 + 64);
    v15 = *(_QWORD *)(v14 + 16);
    v16 = v13[2];
    v17 = v16 + v15;
    if (__OFADD__(v16, v15))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      result = sub_2425A0164();
      __break(1u);
      return result;
    }
    v18 = v12;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v17 <= v13[3] >> 1)
    {
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_26;
    }
    else
    {
      if (v16 <= v17)
        v26 = v16 + v15;
      else
        v26 = v16;
      v13 = sub_24251C540(isUniquelyReferenced_nonNull_native, v26, 1, v13);
      if (!*(_QWORD *)(v14 + 16))
      {
LABEL_26:
        if (v15)
          goto LABEL_50;
        goto LABEL_27;
      }
    }
    v20 = v13[2];
    if ((v13[3] >> 1) - v20 < v15)
      goto LABEL_51;
    v21 = (unint64_t)&v13[2 * v20 + 4];
    if (v14 + 32 < v21 + 16 * v15 && v21 < v14 + 32 + 16 * v15)
      goto LABEL_53;
    swift_arrayInitWithCopy();
    if (v15)
    {
      v23 = v13[2];
      v24 = __OFADD__(v23, v15);
      v25 = v23 + v15;
      if (v24)
        goto LABEL_52;
      v13[2] = v25;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    if (v13[2])
    {
      v28 = v13[4];
      v27 = v13[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v29 = v18;
      if (*(_QWORD *)(v18 + 40) == 0x5F5F74696E695F5FLL && *(_QWORD *)(v18 + 48) == 0xE800000000000000)
        break;
      if ((sub_2425A0254() & 1) != 0)
        break;
    }
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_7:
    v11 += 16;
    if (!--v10)
    {
      swift_bridgeObjectRelease_n();
      v2 = v45;
      goto LABEL_39;
    }
  }
  if (v28 == 1718379891 && v27 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    goto LABEL_46;
  }
  v31 = sub_2425A0254();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_46:
  swift_bridgeObjectRelease();
  swift_retain();
  sub_24257BB48((uint64_t)&v49);
  swift_release();
  v2 = v45;
  if (v47)
    return swift_release();
  v54 = v49;
  v55 = v50;
  *(_QWORD *)&v56[0] = v51;
  *(_OWORD *)((char *)v56 + 8) = v52;
  *(_OWORD *)((char *)&v56[1] + 8) = v53;
LABEL_40:
  sub_242565BCC();
  if (MEMORY[0x2426A8918](v2 + 3))
  {
    v48 = v2[4];
    v57 = swift_getObjectType();
    v32 = v2[5];
    v33 = v2[6];
    v43 = v56[1];
    v44 = v56[0];
    v42 = *(_QWORD *)&v56[2];
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = v2;
    *(_QWORD *)(v34 + 24) = v29;
    swift_retain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    v35 = MEMORY[0x24BEE4AF8];
    v36 = sub_2425583E8(MEMORY[0x24BEE4AF8]);
    v37 = type metadata accessor for Function();
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 32) = v35;
    *(_QWORD *)(v38 + 40) = v35;
    *(_QWORD *)(v38 + 48) = v35;
    *(_QWORD *)(v38 + 56) = v35;
    *(_QWORD *)(v38 + 64) = v35;
    *(_OWORD *)(v38 + 72) = 0u;
    *(_OWORD *)(v38 + 88) = 0u;
    *(_QWORD *)(v38 + 104) = sub_2425583E8(v35);
    *(_QWORD *)(v38 + 16) = v32;
    *(_QWORD *)(v38 + 24) = v33;
    v39 = v55;
    *(_OWORD *)(v38 + 32) = v54;
    *(_OWORD *)(v38 + 48) = v39;
    *(_OWORD *)(v38 + 64) = v44;
    *(_OWORD *)(v38 + 80) = v43;
    *(_QWORD *)(v38 + 96) = v42;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(_QWORD *)(v38 + 104) = v36;
    swift_bridgeObjectRelease();
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = sub_242583400;
    *(_QWORD *)(v40 + 24) = v34;
    *(_QWORD *)(v38 + 112) = sub_242562F18;
    *(_QWORD *)(v38 + 120) = v40;
    *((_QWORD *)&v50 + 1) = v37;
    *(_QWORD *)&v49 = v38;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t))(v48 + 64))(v32, v33, &v49, v57);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_242582480@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t ObjectType;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char isUniquelyReferenced_nonNull_native;
  char v80;
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v93;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  __int128 v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[4];
  char v108;
  _BYTE v109[32];
  _OWORD v110[2];
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _BYTE v116[24];
  uint64_t v117;
  uint64_t v118;

  v93 = type metadata accessor for LexicalContext();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0x6E776F6E6B6E55;
  v5[3] = 0xE700000000000000;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = sub_2425582A8(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE48);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  *(_QWORD *)(v8 + 16) = v7;
  swift_bridgeObjectRelease();
  v5[4] = v8;
  v5[5] = sub_242558650(v6);
  v9 = a2[6];
  v5[2] = a2[5];
  v5[3] = v9;
  v95 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)a2[7];
  v99 = v10[2];
  if (v99)
  {
    type metadata accessor for FunctionDef();
    swift_bridgeObjectRetain();
    v11 = 0;
    v96 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v102 = *(_OWORD *)&v10[2 * v11 + 4];
      v12 = swift_dynamicCastClass();
      if (!v12)
        goto LABEL_4;
      v13 = v12;
      v15 = *(_QWORD *)(v12 + 56);
      v14 = *(_QWORD **)(v12 + 64);
      v16 = *(_QWORD *)(v15 + 16);
      v17 = v14[2];
      v18 = v17 + v16;
      if (__OFADD__(v17, v16))
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        swift_bridgeObjectRetain();
        v34 = sub_2425A0128();
        swift_bridgeObjectRelease();
        if (!v34)
          goto LABEL_78;
LABEL_47:
        v35 = 0;
        v36 = v17 & 0xC000000000000001;
        v83 = v17 + 32;
        v98 = v17;
        v89 = v17 & 0xC000000000000001;
        v90 = v34;
        while (1)
        {
          if (v36)
          {
            v37 = (_QWORD *)MEMORY[0x2426A7C70](v35, v17);
            v24 = __OFADD__(v35, 1);
            v38 = v35 + 1;
            if (v24)
              goto LABEL_92;
          }
          else
          {
            v37 = *(_QWORD **)(v83 + 8 * v35);
            swift_retain();
            v24 = __OFADD__(v35, 1);
            v38 = v35 + 1;
            if (v24)
              goto LABEL_92;
          }
          v97 = v38;
          v39 = v37[14];
          v40 = *(_QWORD *)(v39 + 16);
          if (v40)
            break;
          v52 = MEMORY[0x24BEE4AF8];
          v41 = MEMORY[0x24BEE4AF8];
LABEL_65:
          v53 = v37[15];
          v54 = *(_QWORD *)(v53 + 16);
          if (v54)
          {
            v118 = v52;
            swift_retain();
            swift_bridgeObjectRetain();
            sub_242509D28(0, v54, 0);
            v55 = v37;
            v56 = v118;
            v104 = v55;
            v100 = v55 + 3;
            v57 = (uint64_t *)(v53 + 40);
            while (1)
            {
              v58 = *v57;
              ObjectType = swift_getObjectType();
              v60 = MEMORY[0x2426A8918](v100);
              v61 = v104[4];
              v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 48);
              swift_unknownObjectRetain();
              v62(v60, v61, ObjectType, v58);
              (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v58 + 64))(v110, ObjectType, v58);
              if (v106)
                break;
              sub_24255F890((uint64_t)v110, (uint64_t)v107);
              if (v108 && (sub_242557D30((uint64_t)v107), sub_24255F890((uint64_t)v110, (uint64_t)v107), v108 != 1))
              {
                sub_242557D30((uint64_t)v107);
                v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
                v63 = swift_allocObject();
                *(_QWORD *)&v111 = v63;
                *(_OWORD *)(v63 + 16) = 0u;
                *(_OWORD *)(v63 + 32) = 0u;
              }
              else
              {
                sub_24255BAB4((uint64_t)v107, (uint64_t)v109);
                sub_242588D2C((uint64_t)v109, (uint64_t *)&v111);
                sub_2425264C4((uint64_t)v109, &qword_2571FC790);
              }
              sub_242557D30((uint64_t)v110);
              swift_unknownObjectRelease();
              v118 = v56;
              v65 = *(_QWORD *)(v56 + 16);
              v64 = *(_QWORD *)(v56 + 24);
              if (v65 >= v64 >> 1)
              {
                sub_242509D28(v64 > 1, v65 + 1, 1);
                v56 = v118;
              }
              *(_QWORD *)(v56 + 16) = v65 + 1;
              sub_2425264B4(&v111, (_OWORD *)(v56 + 32 * v65 + 32));
              v57 += 2;
              if (!--v54)
              {
                swift_bridgeObjectRelease();
                v66 = v104;
                swift_release();
                v52 = MEMORY[0x24BEE4AF8];
                goto LABEL_77;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_unknownObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return swift_release();
          }
          v66 = v37;
          v56 = v52;
LABEL_77:
          v67 = v66[7];
          v68 = v66[8];
          v69 = v66[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v70 = sub_2425813C8(v41);
          swift_bridgeObjectRelease();
          v71 = sub_2425813C8(v56);
          swift_bridgeObjectRelease();
          v72 = v66[10];
          v73 = v66[13];
          *(_QWORD *)&v113 = v67;
          *((_QWORD *)&v113 + 1) = v68;
          *(_QWORD *)&v114 = v69;
          *((_QWORD *)&v114 + 1) = v70;
          v115 = v71;
          *(_QWORD *)v116 = v72;
          *(_OWORD *)&v116[8] = *(_OWORD *)(v66 + 11);
          v117 = v73;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_242565BCC();
          v74 = v66[5];
          v75 = v66[6];
          v88 = v115;
          v87 = *(_OWORD *)v116;
          v85 = v117;
          v86 = *(_QWORD *)&v116[16];
          v101 = swift_allocObject();
          swift_weakInit();
          v105 = swift_allocObject();
          *(_QWORD *)(v105 + 16) = v101;
          *(_QWORD *)(v105 + 24) = v66;
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_retain();
          v84 = sub_2425583E8(v52);
          type metadata accessor for Function();
          v76 = swift_allocObject();
          *(_QWORD *)(v76 + 32) = v52;
          *(_QWORD *)(v76 + 40) = v52;
          *(_QWORD *)(v76 + 48) = v52;
          *(_QWORD *)(v76 + 56) = v52;
          *(_QWORD *)(v76 + 64) = v52;
          *(_OWORD *)(v76 + 72) = 0u;
          *(_OWORD *)(v76 + 88) = 0u;
          *(_QWORD *)(v76 + 104) = sub_2425583E8(v52);
          *(_QWORD *)(v76 + 16) = v74;
          *(_QWORD *)(v76 + 24) = v75;
          v77 = v114;
          *(_OWORD *)(v76 + 32) = v113;
          *(_OWORD *)(v76 + 48) = v77;
          *(_QWORD *)(v76 + 64) = v88;
          *(_OWORD *)(v76 + 72) = v87;
          *(_QWORD *)(v76 + 88) = v86;
          *(_QWORD *)(v76 + 96) = v85;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v10 = v95;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_beginAccess();
          *(_QWORD *)(v76 + 104) = v84;
          swift_bridgeObjectRelease();
          v78 = swift_allocObject();
          *(_QWORD *)(v78 + 16) = sub_2425836E4;
          *(_QWORD *)(v78 + 24) = v105;
          *(_QWORD *)(v76 + 112) = sub_242562F84;
          *(_QWORD *)(v76 + 120) = v78;
          swift_release();
          swift_beginAccess();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v107[0] = v95[5];
          v95[5] = 0x8000000000000000;
          sub_24255A818(v76, v74, v75, isUniquelyReferenced_nonNull_native);
          v95[5] = v107[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_release();
          v36 = v89;
          v35 = v97;
          v17 = v98;
          if (v97 == v90)
            goto LABEL_78;
        }
        v118 = MEMORY[0x24BEE4AF8];
        swift_retain();
        swift_bridgeObjectRetain();
        sub_242509D28(0, v40, 0);
        v41 = v118;
        v103 = v37 + 3;
        v42 = (uint64_t *)(v39 + 40);
        while (1)
        {
          v43 = *v42;
          v44 = swift_getObjectType();
          v45 = MEMORY[0x2426A8918](v103);
          v46 = v37;
          v47 = v37[4];
          v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 48);
          swift_unknownObjectRetain();
          v48(v45, v47, v44, v43);
          (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v43 + 64))(v110, v44, v43);
          if (v106)
            break;
          sub_24255F890((uint64_t)v110, (uint64_t)v107);
          v37 = v46;
          if (v108 && (sub_242557D30((uint64_t)v107), sub_24255F890((uint64_t)v110, (uint64_t)v107), v108 != 1))
          {
            sub_242557D30((uint64_t)v107);
            v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
            v49 = swift_allocObject();
            *(_QWORD *)&v111 = v49;
            *(_OWORD *)(v49 + 16) = 0u;
            *(_OWORD *)(v49 + 32) = 0u;
          }
          else
          {
            sub_24255BAB4((uint64_t)v107, (uint64_t)v109);
            sub_242588D2C((uint64_t)v109, (uint64_t *)&v111);
            sub_2425264C4((uint64_t)v109, &qword_2571FC790);
          }
          sub_242557D30((uint64_t)v110);
          swift_unknownObjectRelease();
          v118 = v41;
          v51 = *(_QWORD *)(v41 + 16);
          v50 = *(_QWORD *)(v41 + 24);
          if (v51 >= v50 >> 1)
          {
            sub_242509D28(v50 > 1, v51 + 1, 1);
            v41 = v118;
          }
          *(_QWORD *)(v41 + 16) = v51 + 1;
          sub_2425264B4(&v111, (_OWORD *)(v41 + 32 * v51 + 32));
          v42 += 2;
          if (!--v40)
          {
            swift_bridgeObjectRelease();
            swift_release();
            v52 = MEMORY[0x24BEE4AF8];
            goto LABEL_65;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        return swift_release();
      }
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)v19 && v18 <= v14[3] >> 1)
      {
        if (!*(_QWORD *)(v15 + 16))
          goto LABEL_23;
      }
      else
      {
        if (v17 <= v18)
          v26 = v17 + v16;
        else
          v26 = v17;
        v14 = sub_24251C540(v19, v26, 1, v14);
        if (!*(_QWORD *)(v15 + 16))
        {
LABEL_23:
          if (v16)
            goto LABEL_89;
          goto LABEL_24;
        }
      }
      v20 = v14[2];
      if ((v14[3] >> 1) - v20 < v16)
        goto LABEL_90;
      v21 = (unint64_t)&v14[2 * v20 + 4];
      if (v15 + 32 < v21 + 16 * v16 && v21 < v15 + 32 + 16 * v16)
      {
        result = sub_2425A0164();
        __break(1u);
        return result;
      }
      swift_arrayInitWithCopy();
      if (v16)
      {
        v23 = v14[2];
        v24 = __OFADD__(v23, v16);
        v25 = v23 + v16;
        if (v24)
          goto LABEL_91;
        v14[2] = v25;
      }
LABEL_24:
      swift_bridgeObjectRelease();
      if (v14[2])
      {
        v28 = v14[4];
        v27 = v14[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v28 == 1718379891 && v27 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v30 = sub_2425A0254();
          swift_bridgeObjectRelease();
          if ((v30 & 1) == 0)
          {
LABEL_34:
            swift_unknownObjectRelease_n();
            goto LABEL_4;
          }
        }
        if (*(_QWORD *)(v13 + 40) != 0x5F5F74696E695F5FLL || *(_QWORD *)(v13 + 48) != 0xE800000000000000)
        {
          v31 = sub_2425A0254();
          swift_unknownObjectRelease();
          if ((v31 & 1) != 0)
          {
            swift_unknownObjectRelease();
          }
          else
          {
            *(_QWORD *)&v113 = v96;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_242509DB4(0, *(_QWORD *)(v96 + 16) + 1, 1);
              v96 = v113;
            }
            v33 = *(_QWORD *)(v96 + 16);
            v32 = *(_QWORD *)(v96 + 24);
            if (v33 >= v32 >> 1)
            {
              sub_242509DB4(v32 > 1, v33 + 1, 1);
              v96 = v113;
            }
            *(_QWORD *)(v96 + 16) = v33 + 1;
            *(_OWORD *)(v96 + 16 * v33 + 32) = v102;
          }
          goto LABEL_4;
        }
        goto LABEL_34;
      }
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
LABEL_4:
      if (v99 == ++v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
    }
  }
  v96 = v6;
LABEL_44:
  v17 = sub_24258189C(v96);
  result = swift_release();
  v10 = v95;
  if (v17)
  {
    if ((unint64_t)v17 >> 62)
      goto LABEL_93;
    v34 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v34)
      goto LABEL_47;
LABEL_78:
    result = swift_bridgeObjectRelease();
  }
  if (a3)
  {
    *((_QWORD *)&v114 + 1) = v93;
    *(_QWORD *)&v113 = v10;
    sub_2425264B4(&v113, v110);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v80 = swift_isUniquelyReferenced_nonNull_native();
    v107[0] = a1;
    sub_24255A5C4(v110, 1718379891, 0xE400000000000000, v80);
    v81 = v107[0];
    swift_bridgeObjectRelease();
    sub_24257BC80(v81, (uint64_t *)&v113);
    if (v106)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v113);
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  a4[3] = v93;
  *a4 = v10;
  return result;
}

uint64_t sub_24258312C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v9 = type metadata accessor for LexicalContext();
    *(_QWORD *)&v8 = v5;
    sub_2425264B4(&v8, v7);
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_24255A5C4(v7, 1718379891, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_24257BC80(a1, (uint64_t *)a2);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_24258322C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  swift_bridgeObjectRetain();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 40;
    do
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v4 = sub_2425A01E8();
      sub_242585A04(v4, v5);
      swift_bridgeObjectRelease();
      sub_24259FB70();
      swift_bridgeObjectRelease();
      sub_24259FB70();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  sub_24259FB70();
  return 0x207373616C63;
}

uint64_t sub_24258338C()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2425833A8()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClassDef()
{
  return objc_opt_self();
}

uint64_t sub_242583400@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_242582480(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_242583418(uint64_t a1, uint64_t a2)
{
  return sub_24258342C(a1, a2);
}

uint64_t sub_24258342C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int64_t v20;
  _BYTE v21[32];
  char v22;
  _BYTE v23[32];
  _QWORD v24[5];
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v27 = MEMORY[0x24BEE4AF8];
    sub_242509D28(0, v4, 0);
    v5 = v27;
    v19 = a2 + 24;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v20 = v4;
      v9 = *i;
      ObjectType = swift_getObjectType();
      v11 = MEMORY[0x2426A8918](v19);
      v12 = a2;
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v14(v11, v13, ObjectType, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v24, ObjectType, v9);
      if (v3)
        break;
      sub_24255F890((uint64_t)v24, (uint64_t)v21);
      if (v22)
      {
        sub_242557D30((uint64_t)v21);
        sub_24255F890((uint64_t)v24, (uint64_t)v21);
        a2 = v12;
        if (v22 == 1)
        {
          sub_24255BAB4((uint64_t)v21, (uint64_t)v23);
          sub_242588D2C((uint64_t)v23, v25);
          sub_2425264C4((uint64_t)v23, &qword_2571FC790);
        }
        else
        {
          sub_242557D30((uint64_t)v21);
          v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
          v15 = swift_allocObject();
          v25[0] = v15;
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
        }
      }
      else
      {
        sub_24255BAB4((uint64_t)v21, (uint64_t)v23);
        sub_242588D2C((uint64_t)v23, v25);
        sub_2425264C4((uint64_t)v23, &qword_2571FC790);
        a2 = v12;
      }
      sub_242557D30((uint64_t)v24);
      swift_unknownObjectRelease();
      v27 = v5;
      v17 = *(_QWORD *)(v5 + 16);
      v16 = *(_QWORD *)(v5 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_242509D28(v16 > 1, v17 + 1, 1);
        v5 = v27;
      }
      *(_QWORD *)(v5 + 16) = v17 + 1;
      sub_2425264B4(v25, (_OWORD *)(v5 + 32 * v17 + 32));
      v4 = v20 - 1;
      if (v20 == 1)
        return v5;
    }
    swift_release();
    swift_unknownObjectRelease();
  }
  return v5;
}

uint64_t sub_242583664()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_242583690()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2425836E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24258312C(a1, a2);
}

uint64_t sub_2425836FC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_242583720()
{
  unint64_t result;

  result = qword_2571FEB98;
  if (!qword_2571FEB98)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7F84, &type metadata for ClassDef.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEB98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClassDef.StrideCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2425837B0 + 4 * byte_2425C7E45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2425837E4 + 4 * byte_2425C7E40[v4]))();
}

uint64_t sub_2425837E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2425837EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2425837F4);
  return result;
}

uint64_t sub_242583800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242583808);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24258380C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242583814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassDef.StrideCodingKeys()
{
  return &type metadata for ClassDef.StrideCodingKeys;
}

unint64_t sub_242583834()
{
  unint64_t result;

  result = qword_2571FEBA0;
  if (!qword_2571FEBA0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7F5C, &type metadata for ClassDef.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEBA0);
  }
  return result;
}

unint64_t sub_24258387C()
{
  unint64_t result;

  result = qword_2571FEBA8;
  if (!qword_2571FEBA8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7E94, &type metadata for ClassDef.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEBA8);
  }
  return result;
}

unint64_t sub_2425838C4()
{
  unint64_t result;

  result = qword_2571FEBB0;
  if (!qword_2571FEBB0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C7EBC, &type metadata for ClassDef.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEBB0);
  }
  return result;
}

uint64_t sub_24258390C(char *a1, char *a2)
{
  return sub_24255DFDC(*a1, *a2);
}

uint64_t sub_242583918()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242583998()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2425839F4()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242583A70@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_242583ACC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65756C6176;
  if (*v1)
    v2 = 0x69737265766E6F63;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xEA00000000006E6FLL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_242583B0C()
{
  _BYTE *v0;

  if (*v0)
    return 0x69737265766E6F63;
  else
    return 0x65756C6176;
}

uint64_t sub_242583B48@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_242583BA8()
{
  sub_242583FC8();
  return sub_2425A0344();
}

uint64_t sub_242583BD0()
{
  sub_242583FC8();
  return sub_2425A0350();
}

uint64_t sub_242583BF8(_QWORD *a1)
{
  swift_allocObject();
  return sub_242583C40(a1);
}

uint64_t sub_242583C40(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FECE0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242583FC8();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for FormattedValue();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_24258E918((uint64_t)v8, 0);
    v1[6] = v10;
    LOBYTE(v12[0]) = 1;
    v1[7] = sub_2425A01C4();
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_242583E20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v14[5];

  v3 = v2;
  v5 = *(_QWORD *)(v1 + 48);
  ObjectType = swift_getObjectType();
  v7 = MEMORY[0x2426A8918](v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  v10 = *(_QWORD *)(v1 + 48);
  v11 = swift_getObjectType();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  v12(v14, v11, v10);
  result = swift_unknownObjectRelease();
  if (!v3)
  {
    sub_24259BDDC((uint64_t *)a1);
    result = sub_242557D30((uint64_t)v14);
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_242583F0C()
{
  swift_getObjectType();
  sub_2425A01E8();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  return 123;
}

uint64_t sub_242583F7C()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormattedValue()
{
  return objc_opt_self();
}

unint64_t sub_242583FC8()
{
  unint64_t result;

  result = qword_2571FECE8;
  if (!qword_2571FECE8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8124, &type metadata for FormattedValue.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FECE8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormattedValue.StrideCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_242584058 + 4 * byte_2425C7FE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24258408C + 4 * byte_2425C7FE0[v4]))();
}

uint64_t sub_24258408C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242584094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24258409CLL);
  return result;
}

uint64_t sub_2425840A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2425840B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2425840B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2425840BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormattedValue.StrideCodingKeys()
{
  return &type metadata for FormattedValue.StrideCodingKeys;
}

unint64_t sub_2425840DC()
{
  unint64_t result;

  result = qword_2571FECF0;
  if (!qword_2571FECF0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C80FC, &type metadata for FormattedValue.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FECF0);
  }
  return result;
}

unint64_t sub_242584124()
{
  unint64_t result;

  result = qword_2571FECF8;
  if (!qword_2571FECF8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8034, &type metadata for FormattedValue.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FECF8);
  }
  return result;
}

unint64_t sub_24258416C()
{
  unint64_t result;

  result = qword_2571FED00;
  if (!qword_2571FED00)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C805C, &type metadata for FormattedValue.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FED00);
  }
  return result;
}

uint64_t sub_2425841B0()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_2425841F8()
{
  return sub_24259FB40();
}

uint64_t sub_242584208()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_24258424C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_24258429C(_QWORD *a1@<X8>)
{
  *a1 = 6518885;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_2425842B0()
{
  return 6518885;
}

uint64_t sub_2425842C0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_242584314()
{
  sub_242584854();
  return sub_2425A0344();
}

uint64_t sub_24258433C()
{
  sub_242584854();
  return sub_2425A0350();
}

uint64_t sub_242584364(_QWORD *a1)
{
  swift_allocObject();
  return sub_2425843AC(a1);
}

uint64_t sub_2425843AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[5];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FEE10);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242584854();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Raise();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v3 + 40) = sub_24258E934((uint64_t)v8);
    *(_QWORD *)(v3 + 48) = v11;
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v13);
    v9 = sub_24259BC74(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_242584534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  char *v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD v19[5];
  uint64_t v20[4];

  v2 = v1;
  v3 = v0;
  v4 = *(_QWORD *)(v0 + 48);
  ObjectType = swift_getObjectType();
  v6 = MEMORY[0x2426A8918](v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  v8(v6, v7, ObjectType, v4);
  swift_unknownObjectRelease();
  v9 = *(_QWORD *)(v0 + 48);
  v10 = swift_getObjectType();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 64);
  swift_unknownObjectRetain();
  v11(v19, v10, v9);
  result = swift_unknownObjectRelease();
  if (!v2)
  {
    sub_24259BDDC(v20);
    sub_242557D30((uint64_t)v19);
    sub_242526478((uint64_t)v20, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC9D8);
    if (!swift_dynamicCast())
    {
      if ((_s8Morpheus0A5UtilsO5isNilySbypFZ_0((uint64_t)v20) & 1) != 0)
      {
        sub_242554B60();
        swift_allocError();
        v14 = 22;
      }
      else
      {
        if (qword_2571FC5C8 != -1)
          swift_once();
        v15 = sub_24259F930();
        __swift_project_value_buffer(v15, (uint64_t)qword_2571FFB10);
        swift_retain();
        v16 = sub_24259F918();
        v17 = sub_24259FE70();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v18 = 134217984;
          v19[0] = *(_QWORD *)(v3 + 16);
          sub_24259FE94();
          swift_release();
          _os_log_impl(&dword_2422E0000, v16, v17, "Raise> Invalid exc. lino %ld", v18, 0xCu);
          MEMORY[0x2426A88B8](v18, -1, -1);

        }
        else
        {

          swift_release();
        }
        sub_242554B60();
        swift_allocError();
        v14 = 23;
      }
      *v13 = v14;
    }
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  return result;
}

uint64_t sub_2425847C8()
{
  sub_24259FB70();
  swift_getObjectType();
  sub_2425A0230();
  return 0;
}

uint64_t type metadata accessor for Raise()
{
  return objc_opt_self();
}

unint64_t sub_242584854()
{
  unint64_t result;

  result = qword_2571FEE18;
  if (!qword_2571FEE18)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C82B4, &type metadata for Raise.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEE18);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Raise.StrideCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2425848D8 + 4 * byte_2425C8180[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2425848F8 + 4 * byte_2425C8185[v4]))();
}

_BYTE *sub_2425848D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2425848F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_242584900(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_242584908(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_242584910(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_242584918(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Raise.StrideCodingKeys()
{
  return &type metadata for Raise.StrideCodingKeys;
}

unint64_t sub_242584938()
{
  unint64_t result;

  result = qword_2571FEE20;
  if (!qword_2571FEE20)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C828C, &type metadata for Raise.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEE20);
  }
  return result;
}

unint64_t sub_242584980()
{
  unint64_t result;

  result = qword_2571FEE28;
  if (!qword_2571FEE28)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C81C4, &type metadata for Raise.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEE28);
  }
  return result;
}

unint64_t sub_2425849C8()
{
  unint64_t result;

  result = qword_2571FEE30;
  if (!qword_2571FEE30)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C81EC, &type metadata for Raise.StrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEE30);
  }
  return result;
}

uint64_t SharedMutableArray<A>.isIn(value:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[5];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  sub_242526478(a1, (uint64_t)&v25);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE998);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    sub_2425264C4((uint64_t)&v28, &qword_2571FE9A0);
    goto LABEL_9;
  }
  sub_24251DEC8(&v28, (uint64_t)v31);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
LABEL_9:
    v5 = 0;
    return v5 & 1;
  }
  v4 = v2 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_242526478(v4, (uint64_t)v24);
    if (swift_dynamicCast())
      break;
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    sub_2425264C4((uint64_t)&v25, &qword_2571FE9A0);
    v4 += 32;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  sub_24251DEC8(&v25, (uint64_t)&v28);
  v7 = v32;
  v8 = v33;
  v9 = __swift_project_boxed_opaque_existential_1(v31, v32);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  sub_24257C78C((uint64_t)v11, v7, v8, v13, (uint64_t *)&v25);
  v14 = *((_QWORD *)&v29 + 1);
  v15 = v30;
  v16 = __swift_project_boxed_opaque_existential_1(&v28, *((uint64_t *)&v29 + 1));
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  sub_24257C78C((uint64_t)v18, v14, v15, v20, v24);
  v21 = *((_QWORD *)&v26 + 1);
  v22 = v27;
  __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1));
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(v24, v21, v22);
  sub_24257FAF0((uint64_t)v24);
  sub_24257FAF0((uint64_t)&v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return v5 & 1;
}

uint64_t sub_242584C84(uint64_t a1)
{
  return SharedMutableArray<A>.isIn(value:)(a1) & 1;
}

uint64_t String.isIn(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  _QWORD v7[4];

  sub_242526478(a1, (uint64_t)v7);
  if (swift_dynamicCast())
  {
    v7[0] = a2;
    v7[1] = a3;
    sub_24253B194();
    v5 = sub_24259FED0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_242584D50(uint64_t a1)
{
  uint64_t *v1;

  return String.isIn(value:)(a1, *v1, v1[1]);
}

uint64_t SharedMutableDict<A>.isIn(value:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _BYTE v8[32];
  _OWORD v9[2];
  uint64_t v10;

  sub_242526478(a1, (uint64_t)v8);
  if (swift_dynamicCast())
  {
    v9[0] = v5;
    v9[1] = v6;
    v10 = v7;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    {
      swift_bridgeObjectRetain();
      sub_24255A0C0((uint64_t)v9);
      v3 = v2;
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = 0;
    }
    sub_24255BA80((uint64_t)v9);
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    sub_2425264C4((uint64_t)&v5, &qword_2571FC7A0);
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_242584E2C(uint64_t a1)
{
  return SharedMutableDict<A>.isIn(value:)(a1) & 1;
}

uint64_t dispatch thunk of MembershipTestable.isIn(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t SharedMutableDict.anyDict.getter()
{
  uint64_t v0;

  sub_24255CAB8();
  swift_bridgeObjectRetain();
  v0 = sub_2425A00EC();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_242584EC8()
{
  return SharedMutableDict.anyDict.getter();
}

uint64_t Dictionary.anyDict.getter()
{
  return sub_2425A00EC();
}

uint64_t sub_242584F0C()
{
  return Dictionary.anyDict.getter();
}

uint64_t dispatch thunk of AnyDictContainer.anyDict.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

Swift::Int __swiftcall Int.negation()()
{
  uint64_t v0;
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(0, v0);
  result = -v0;
  if (v1)
    __break(1u);
  return result;
}

void sub_242584F38(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  if (__OFSUB__(0, *v1))
    __break(1u);
  else
    *a1 = -*v1;
}

Swift::Float __swiftcall Float.negation()()
{
  float v0;

  return 0.0 - v0;
}

float sub_242584F5C@<S0>(float *a1@<X8>)
{
  float *v1;
  float result;

  result = 0.0 - *v1;
  *a1 = result;
  return result;
}

Swift::Int32 __swiftcall Int32.negation()()
{
  int v0;
  BOOL v1;
  Swift::Int32 result;

  v1 = __OFSUB__(0, v0);
  result = -v0;
  if (v1)
    __break(1u);
  return result;
}

void sub_242584F80(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  if (__OFSUB__(0, *v1))
    __break(1u);
  else
    *a1 = -*v1;
}

uint64_t dispatch thunk of Negatable.negation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_242584FA0(char *a1, char *a2)
{
  return sub_24255E780(*a1, *a2);
}

uint64_t sub_242584FAC()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242585020()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242585070()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425850E0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24258513C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7894115;
  if (!*v1)
    v2 = 0x7961727261;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_242585170()
{
  _BYTE *v0;

  if (*v0)
    return 7894115;
  else
    return 0x7961727261;
}

uint64_t sub_2425851A0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_242585200()
{
  sub_24258581C();
  return sub_2425A0344();
}

uint64_t sub_242585228()
{
  sub_24258581C();
  return sub_2425A0350();
}

uint64_t sub_242585250(_QWORD *a1)
{
  swift_allocObject();
  return sub_242585298(a1);
}

uint64_t sub_242585298(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v11[5];
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FEF60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24258581C();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for MorpheusArray();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = sub_242596038((uint64_t)v8, 0);
    v12 = 1;
    sub_242561984();
    sub_2425A01D0();
    *(_BYTE *)(v1 + 48) = v11[0];
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v11);
    v3 = sub_24259BC74(v11);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_242585494@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_2425855B4(v4, v1);
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v2)
  {
    if (*(_BYTE *)(v1 + 48))
    {
      if (*(_BYTE *)(v1 + 48) == 1)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC900);
        *(_QWORD *)(a1 + 24) = result;
        *(_QWORD *)a1 = v5;
      }
      else
      {
        result = swift_bridgeObjectRelease();
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
      }
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCCB0);
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v5;
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)a1 = result;
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_242585568()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MorpheusArray()
{
  return objc_opt_self();
}

uint64_t sub_2425855B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int64_t v20;
  _BYTE v21[32];
  char v22;
  _BYTE v23[32];
  _QWORD v24[5];
  uint64_t v25[4];
  uint64_t v26[5];
  uint64_t v27;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v27 = MEMORY[0x24BEE4AF8];
    sub_242509D28(0, v4, 0);
    v5 = v27;
    v19 = a2 + 24;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v20 = v4;
      v9 = *i;
      ObjectType = swift_getObjectType();
      v11 = MEMORY[0x2426A8918](v19);
      v12 = a2;
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v14(v11, v13, ObjectType, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v24, ObjectType, v9);
      if (v3)
        break;
      sub_24255F890((uint64_t)v24, (uint64_t)v21);
      if (v22)
      {
        sub_242557D30((uint64_t)v21);
        sub_24255F890((uint64_t)v24, (uint64_t)v21);
        a2 = v12;
        if (v22 == 1)
        {
          sub_24255BAB4((uint64_t)v21, (uint64_t)v23);
          sub_242588D2C((uint64_t)v23, v25);
          sub_24256FB04((uint64_t)v23);
        }
        else
        {
          sub_242557D30((uint64_t)v21);
          v25[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
          v15 = swift_allocObject();
          v25[0] = v15;
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
        }
      }
      else
      {
        sub_24255BAB4((uint64_t)v21, (uint64_t)v23);
        sub_242588D2C((uint64_t)v23, v25);
        sub_24256FB04((uint64_t)v23);
        a2 = v12;
      }
      sub_242557D30((uint64_t)v24);
      sub_242588900((uint64_t)v25, v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      swift_unknownObjectRelease();
      v27 = v5;
      v17 = *(_QWORD *)(v5 + 16);
      v16 = *(_QWORD *)(v5 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_242509D28(v16 > 1, v17 + 1, 1);
        v5 = v27;
      }
      *(_QWORD *)(v5 + 16) = v17 + 1;
      sub_2425264B4(v26, (_OWORD *)(v5 + 32 * v17 + 32));
      v4 = v20 - 1;
      if (v20 == 1)
        return v5;
    }
    swift_release();
    swift_unknownObjectRelease();
  }
  return v5;
}

uint64_t sub_2425857F0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

unint64_t sub_24258581C()
{
  unint64_t result;

  result = qword_2571FEF68;
  if (!qword_2571FEF68)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C852C, &type metadata for MorpheusArray.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEF68);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MorpheusArray.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2425858AC + 4 * byte_2425C8405[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2425858E0 + 4 * byte_2425C8400[v4]))();
}

uint64_t sub_2425858E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2425858E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2425858F0);
  return result;
}

uint64_t sub_2425858FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242585904);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_242585908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242585910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MorpheusArray.CodingKeys()
{
  return &type metadata for MorpheusArray.CodingKeys;
}

unint64_t sub_242585930()
{
  unint64_t result;

  result = qword_2571FEF70;
  if (!qword_2571FEF70)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8504, &type metadata for MorpheusArray.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEF70);
  }
  return result;
}

unint64_t sub_242585978()
{
  unint64_t result;

  result = qword_2571FEF78;
  if (!qword_2571FEF78)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C843C, &type metadata for MorpheusArray.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FEF78);
  }
  return result;
}

unint64_t sub_2425859C0()
{
  unint64_t result;

  result = qword_2571FEF80[0];
  if (!qword_2571FEF80[0])
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8464, &type metadata for MorpheusArray.CodingKeys);
    atomic_store(result, qword_2571FEF80);
  }
  return result;
}

uint64_t sub_242585A04(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  swift_bridgeObjectRetain();
  v4 = sub_242585BA8(0x7FFFFFFFFFFFFFFFLL, 1, a1, a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_242509BCC(0, v5, 0);
    v6 = (uint64_t *)(v4 + 56);
    do
    {
      v7 = *(v6 - 3);
      v8 = *(v6 - 2);
      v9 = *(v6 - 1);
      v10 = *v6;
      swift_bridgeObjectRetain();
      MEMORY[0x2426A77C0](v7, v8, v9, v10);
      sub_24259FB70();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v16 + 16);
      v11 = *(_QWORD *)(v16 + 24);
      if (v12 >= v11 >> 1)
        sub_242509BCC(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v16 + 16) = v12 + 1;
      v13 = v16 + 16 * v12;
      *(_QWORD *)(v13 + 32) = 9;
      *(_QWORD *)(v13 + 40) = 0xE100000000000000;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC9E0);
  sub_24254FA58();
  v14 = sub_24259FA38();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_242585BA8(uint64_t a1, char a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t result;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v45;

  if (a1 < 0)
  {
LABEL_50:
    result = sub_2425A00D4();
    __break(1u);
  }
  else
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = MEMORY[0x24BEE4AF8];
    v9 = swift_allocObject();
    v10 = v9;
    *(_QWORD *)(v9 + 16) = 15;
    v11 = HIBYTE(a4) & 0xF;
    if (a1)
    {
      v12 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        v41 = a1;
        v45 = 4 * v12;
        v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v14 = 15;
        v15 = 15;
        v42 = (_QWORD *)a3;
        v43 = v9;
        while (1)
        {
          v16 = sub_24259FBE8();
          v18 = v17;
          if (!((v17 & 0x2000000000000000) != 0 ? HIBYTE(v17) & 0xF : v16 & 0xFFFFFFFFFFFFLL))
            break;
          if ((v17 & 0x1000000000000000) != 0)
          {
            v20 = sub_24259FF78();
          }
          else
          {
            if ((v17 & 0x2000000000000000) == 0 && (v16 & 0x1000000000000000) == 0)
              sub_24259FFF0();
            v20 = sub_24259FFFC();
          }
          v4 = v20;
          swift_bridgeObjectRelease();
          if ((v4 - 14) > 0xFFFFFFFB || (v4 - 8232) < 2 || (_DWORD)v4 == 133)
          {
            if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
            {
              v14 = sub_24259FB58();
              *(_QWORD *)(v10 + 16) = v14;
              v15 = v14;
            }
            else
            {
              if (v14 >> 14 < v15 >> 14)
                goto LABEL_49;
              v21 = a4;
              v22 = sub_24259FC00();
              v24 = v23;
              v26 = v25;
              v4 = v27;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v13 = sub_24251BCA8(0, v13[2] + 1, 1, v13);
              v28 = v13;
              v29 = v13[2];
              v30 = v28;
              v31 = v28[3];
              if (v29 >= v31 >> 1)
                v30 = sub_24251BCA8((_QWORD *)(v31 > 1), v29 + 1, 1, v30);
              v30[2] = v29 + 1;
              v32 = &v30[4 * v29];
              v13 = v30;
              v32[4] = v22;
              v32[5] = v24;
              v32[6] = v26;
              v32[7] = v4;
              *(_QWORD *)(v8 + 16) = v30;
              a4 = v21;
              a3 = (unint64_t)v42;
              v15 = sub_24259FB58();
              v10 = v43;
              *(_QWORD *)(v43 + 16) = v15;
              v14 = v15;
              if (v13[2] == v41)
              {
LABEL_38:
                if (v45 == v15 >> 14 && (a2 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_46;
                }
                if (v45 < v15 >> 14)
                {
LABEL_49:
                  sub_2425A00D4();
                  __break(1u);
                  goto LABEL_50;
                }
                a3 = (unint64_t)v13;
                v15 = sub_24259FC00();
                v18 = v34;
                v13 = v35;
                v4 = v36;
                swift_bridgeObjectRelease();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
LABEL_43:
                  v38 = *(_QWORD *)(a3 + 16);
                  v37 = *(_QWORD *)(a3 + 24);
                  if (v38 >= v37 >> 1)
                    a3 = (unint64_t)sub_24251BCA8((_QWORD *)(v37 > 1), v38 + 1, 1, (_QWORD *)a3);
                  *(_QWORD *)(a3 + 16) = v38 + 1;
                  v39 = (_QWORD *)(a3 + 32 * v38);
                  v39[4] = v15;
                  v39[5] = v18;
                  v39[6] = v13;
                  v39[7] = v4;
                  v13 = (_QWORD *)a3;
                  *(_QWORD *)(v8 + 16) = a3;
                  goto LABEL_46;
                }
LABEL_48:
                a3 = (unint64_t)sub_24251BCA8(0, *(_QWORD *)(a3 + 16) + 1, 1, (_QWORD *)a3);
                goto LABEL_43;
              }
            }
          }
          else
          {
            v14 = sub_24259FB58();
          }
          if (v45 == v14 >> 14)
            goto LABEL_38;
        }
        __break(1u);
        goto LABEL_48;
      }
    }
    if ((a4 & 0x2000000000000000) == 0)
      v11 = a3 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_242586078(v33 | (v11 << 16), v9, a2 & 1, v8);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v8 + 16);
LABEL_46:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_242586078(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_24259FC00();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_24251BCA8(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_24251BCA8((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_2425A00D4();
  __break(1u);
  return result;
}

uint64_t sub_2425861D0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2425861F4()
{
  return swift_deallocObject();
}

uint64_t SharedMutableDict.__allocating_init(dict:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SharedMutableDict.init(dict:)(a1);
  return v2;
}

uint64_t SharedMutableDict.init(dict:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = sub_24259F93C();
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  return v1;
}

double sub_2425862B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;
  _BYTE v7[40];

  sub_242587794(v5);
  v2 = sub_24259F9CC();
  (*(void (**)(_BYTE *, _OWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v7, v5, v2);
  sub_242587804((uint64_t)v7);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_242586338()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = sub_24259F9F0();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE04E8], v0);
  return sub_24259FDF8();
}

uint64_t _s8Morpheus17SharedMutableDictC3lenSiyF_0()
{
  uint64_t v0;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0 = _sSD8MorpheusE3lenSiyF_0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_242586430()
{
  uint64_t v0;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0 = sub_24259F9B4();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2425864DC()
{
  return sub_2425864F4(MEMORY[0x24BEE0268]);
}

uint64_t sub_2425864E8()
{
  return sub_2425864F4(MEMORY[0x24BEE0438]);
}

uint64_t sub_2425864F4(uint64_t (*a1)(uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 80);
  v5 = swift_bridgeObjectRetain();
  v6 = a1(v5, MEMORY[0x24BEE23D0], v4, MEMORY[0x24BEE23D8]);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_242586580()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_24259FA20();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242586630()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  nullsub_1(*(_QWORD *)(v0 + 16));
  v1 = sub_24259F99C();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE0310], v1);
  return sub_24259FC90() & 1;
}

uint64_t sub_2425866E8()
{
  swift_beginAccess();
  sub_24259F9F0();
  sub_24259F9E4();
  return swift_endAccess();
}

uint64_t sub_242586750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_beginAccess();
  v4 = v1[2];
  v5 = *(_QWORD *)(v3 + 80);
  swift_bridgeObjectRetain();
  MEMORY[0x2426A76A0](a1, v4, MEMORY[0x24BEE23D0], v5, MEMORY[0x24BEE23D8]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2425867D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_2425879C8(a1, a2);
  v3 = sub_24259FE7C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

void (*sub_24258681C(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[5] = v2;
  v6 = sub_24259FE7C();
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[8] = malloc(v8);
  v5[9] = malloc(v8);
  sub_24255BA44(a2, (uint64_t)v5);
  sub_242586750(a2);
  return sub_2425868B8;
}

void sub_2425868B8(uint64_t a1, char a2)
{
  _OWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void (*v8)(void *, uint64_t);
  _OWORD v9[2];
  uint64_t v10;

  v2 = *(_OWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  v4 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), v4, v5);
    v7 = v2[1];
    v9[0] = *v2;
    v9[1] = v7;
    v10 = *((_QWORD *)v2 + 4);
    sub_2425879C8((uint64_t)v3, (uint64_t)v9);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_2425879C8(*(_QWORD *)(*(_QWORD *)a1 + 72), (uint64_t)v2);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t SharedMutableDict.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedMutableDict.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2425869B0@<X0>(uint64_t a1@<X8>)
{
  return sub_2425869C8(sub_2425864DC, a1);
}

uint64_t sub_2425869BC@<X0>(uint64_t a1@<X8>)
{
  return sub_2425869C8(sub_2425864E8, a1);
}

uint64_t sub_2425869C8@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  return result;
}

void (*sub_2425869F8(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  char *v9;
  void (*v10)(_QWORD *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = (uint64_t *)malloc(0x40uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a3 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[4] = TupleTypeMetadata2;
  v8 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v5[5] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v5[6] = (uint64_t)v9;
  v10 = sub_242586AD0(v5);
  v12 = v11;
  v5[7] = (uint64_t)v10;
  sub_24255BA44(v13, (uint64_t)v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v12, v6);
  return sub_24254F330;
}

void (*sub_242586AD0(uint64_t *a1))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v3;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v3 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v3 + 64));
  sub_242586580();
  return sub_24254F448;
}

uint64_t sub_242586B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a2 + 80), a3, a4);
  return sub_24259FE40();
}

uint64_t sub_242586BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a1 + 80), a3, a4);
  return sub_24259FE34();
}

uint64_t sub_242586C04()
{
  return _s8Morpheus17SharedMutableDictC3lenSiyF_0();
}

uint64_t sub_242586C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_24259FE10();
}

uint64_t sub_242586C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a4 + 80), a3, a4);
  return sub_24259FE04();
}

uint64_t sub_242586CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_24259FE28();
}

uint64_t sub_242586D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_2425875E8(a1, a2, v7, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_242586D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_2425875E8(a1, a2, v7, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_242586DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a3 + 80), a3, a4);
  return sub_242587840(a1, a2);
}

uint64_t sub_242586E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = sub_242586430();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_242586E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = sub_242586430();
  v7 = v6;
  v9 = v8;
  result = sub_242550F58(v2, v3, v4);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v9 & 1;
  return result;
}

double sub_242586ED8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;
  _BYTE v7[40];

  sub_242587794(v5);
  v2 = sub_24259F9CC();
  (*(void (**)(_BYTE *, _OWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v7, v5, v2);
  sub_242587804((uint64_t)v7);
  swift_release();
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_242586F68()
{
  return sub_242586338();
}

uint64_t sub_242586F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a1 + 80), a3, a4);
  MEMORY[0x2426A87E0](&protocol conformance descriptor for SharedMutableDict<A>, v4);
  v5 = sub_24258783C();
  swift_release();
  return v5;
}

void sub_242586FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a4 + 80), a3, a4);
  JUMPOUT(0x2426A78D4);
}

uint64_t sub_242587038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SharedMutableDict(0, *(_QWORD *)(a4 + 80), a3, a4);
  return sub_24259FC48();
}

uint64_t SharedMutableDict<A>.attribute(for:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _BYTE v7[40];

  swift_bridgeObjectRetain();
  sub_24259FF48();
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_24255A0C0((uint64_t)v7);
    if ((v5 & 1) != 0)
    {
      sub_242526478(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)a1);
    }
    else
    {
      *a1 = 0u;
      a1[1] = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  return sub_24255BA80((uint64_t)v7);
}

BOOL SharedMutableDict<A>.has(attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _BOOL8 v6;
  __int128 v8;
  __int128 v9;
  _BYTE v10[40];

  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_24259FF48();
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_24255A0C0((uint64_t)v10);
    if ((v5 & 1) != 0)
    {
      sub_242526478(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
    }
    else
    {
      v8 = 0u;
      v9 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  sub_24255BA80((uint64_t)v10);
  v6 = *((_QWORD *)&v9 + 1) != 0;
  sub_2425264C4((uint64_t)&v8, &qword_2571FC790);
  return v6;
}

uint64_t sub_242587230@<X0>(_OWORD *a1@<X8>)
{
  return SharedMutableDict<A>.attribute(for:)(a1);
}

BOOL sub_242587250(uint64_t a1, uint64_t a2)
{
  return SharedMutableDict<A>.has(attribute:)(a1, a2);
}

uint64_t SharedMutableDict<A>.store(key:obj:)(uint64_t a1, uint64_t a2)
{
  _BYTE v4[32];
  _BYTE v5[40];
  _BYTE v6[32];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  sub_242526478(a1, (uint64_t)v5);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10[0] = v7;
    v10[1] = v8;
    v11 = v9;
    sub_24255BA44((uint64_t)v10, (uint64_t)&v7);
    sub_242526478(a2, (uint64_t)v6);
    sub_24255BA44((uint64_t)&v7, (uint64_t)v5);
    sub_24256F0C4((uint64_t)v6, (uint64_t)v4);
    swift_beginAccess();
    sub_242558040((uint64_t)v4, (uint64_t)v5);
    swift_endAccess();
    sub_24255BA80((uint64_t)&v7);
    sub_2425264C4((uint64_t)v6, &qword_2571FC790);
    return sub_24255BA80((uint64_t)v10);
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    return sub_2425264C4((uint64_t)&v7, &qword_2571FC7A0);
  }
}

uint64_t sub_24258737C(uint64_t a1, uint64_t a2)
{
  return SharedMutableDict<A>.store(key:obj:)(a1, a2);
}

uint64_t SharedMutableDict<A>.description.getter()
{
  uint64_t v0;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0 = sub_24259F96C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_242587424()
{
  uint64_t v0;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0 = sub_24259F96C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedMutableDict<A>.get(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[32];
  _OWORD v12[2];
  uint64_t v13;

  sub_242526478(a1, (uint64_t)v11);
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    v13 = v10;
    swift_beginAccess();
    v4 = *(_QWORD *)(v2 + 16);
    if (*(_QWORD *)(v4 + 16))
    {
      swift_bridgeObjectRetain();
      v5 = sub_24255A0C0((uint64_t)v12);
      if ((v6 & 1) != 0)
      {
        sub_242526478(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)a2);
      }
      else
      {
        *a2 = 0u;
        a2[1] = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      *a2 = 0u;
      a2[1] = 0u;
    }
    return sub_24255BA80((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    result = sub_2425264C4((uint64_t)&v8, &qword_2571FC7A0);
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_2425875A0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return SharedMutableDict<A>.get(_:)(a1, a2);
}

uint64_t sub_2425875C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2425875E8(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_2425875D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2425875E8(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_2425875E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_24259FA68();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_242587794@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  *a1 = v4;
  v9 = *(_QWORD *)(v4 + 64);
  v7 = v4 + 64;
  v8 = v9;
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  a1[1] = v7;
  a1[2] = ~v6;
  a1[3] = 0;
  a1[4] = v5 & v8;
  return result;
}

uint64_t sub_242587804(uint64_t a1)
{
  sub_242587834();
  return a1;
}

uint64_t sub_242587834()
{
  return swift_retain();
}

uint64_t sub_242587840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_24259FE58();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_24259FA68();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_24259FA68();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_2425879C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[24];
  _BYTE v10[40];

  v4 = sub_24259FE7C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v9[-v6];
  sub_24255BA44(a2, (uint64_t)v10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_beginAccess();
  sub_24259F9F0();
  sub_24259FA14();
  swift_endAccess();
  return sub_24255BA80(a2);
}

void sub_242587AB8()
{
  JUMPOUT(0x2426A87E0);
}

void sub_242587AC8()
{
  JUMPOUT(0x2426A87E0);
}

uint64_t sub_242587AD8@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_24255CAB8();
  return swift_bridgeObjectRetain();
}

uint64_t sub_242587B00()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_24255BC7C(v0);
}

uint64_t sub_242587B28()
{
  return 8;
}

_QWORD *sub_242587B34(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_242587B40(uint64_t a1, uint64_t a2)
{
  return sub_242586750(a2);
}

uint64_t sub_242587B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[40];

  sub_24255BA44(a3, (uint64_t)v5);
  return sub_2425879C8(a1, (uint64_t)v5);
}

uint64_t sub_242587BB0()
{
  return 8;
}

uint64_t type metadata accessor for SharedMutableDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedMutableDict);
}

uint64_t method lookup function for SharedMutableDict()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedMutableDict.dict.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SharedMutableDict.__allocating_init(dict:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SharedMutableDict.makeIterator()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SharedMutableDict.underestimatedCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SharedMutableDict.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SharedMutableDict.index(after:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of SharedMutableDict.startIndex.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SharedMutableDict.endIndex.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 176))(a1, a2, a3, a4, a5 & 1);
}

uint64_t dispatch thunk of SharedMutableDict.contains(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SharedMutableDict.clear()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t sub_242587CD8(char *a1, char *a2)
{
  return sub_24255D7EC(*a1, *a2);
}

uint64_t sub_242587CE4()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242587D58()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242587DA8()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242587E18@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_242587E74(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7894115;
  if (!*v1)
    v2 = 0x65756C6176;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_242587EA8()
{
  _BYTE *v0;

  if (*v0)
    return 7894115;
  else
    return 0x65756C6176;
}

uint64_t sub_242587ED8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_242587F38()
{
  sub_24258837C();
  return sub_2425A0344();
}

uint64_t sub_242587F60()
{
  sub_24258837C();
  return sub_2425A0350();
}

uint64_t sub_242587F88(_QWORD *a1)
{
  swift_allocObject();
  return sub_242587FD0(a1);
}

uint64_t sub_242587FD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];
  char v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF130);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24258837C();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Starred();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = sub_24259003C((uint64_t)v8, 0);
    *(_QWORD *)(v1 + 48) = v10;
    v13 = 1;
    sub_242561984();
    sub_2425A01D0();
    *(_BYTE *)(v1 + 56) = v12[0];
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_2425881CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v14[5];
  _OWORD v15[2];

  v3 = v2;
  v5 = *(_QWORD *)(v1 + 48);
  ObjectType = swift_getObjectType();
  v7 = MEMORY[0x2426A8918](v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  v10 = *(_QWORD *)(v1 + 48);
  v11 = swift_getObjectType();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  v12(v14, v11, v10);
  result = swift_unknownObjectRelease();
  if (!v3)
  {
    sub_242591630(v15);
    sub_242557D30((uint64_t)v14);
    sub_242588D2C((uint64_t)v15, (uint64_t *)a1);
    result = sub_24256FB04((uint64_t)v15);
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_2425882CC()
{
  sub_24259FB70();
  swift_getObjectType();
  sub_2425A0230();
  return 0;
}

uint64_t sub_242588330()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Starred()
{
  return objc_opt_self();
}

unint64_t sub_24258837C()
{
  unint64_t result;

  result = qword_2571FF138;
  if (!qword_2571FF138)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C88D4, &type metadata for Starred.StarredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF138);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Starred.StarredCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24258840C + 4 * byte_2425C8795[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_242588440 + 4 * asc_2425C8790[v4]))();
}

uint64_t sub_242588440(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242588448(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242588450);
  return result;
}

uint64_t sub_24258845C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242588464);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_242588468(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242588470(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Starred.StarredCodingKeys()
{
  return &type metadata for Starred.StarredCodingKeys;
}

unint64_t sub_242588490()
{
  unint64_t result;

  result = qword_2571FF140;
  if (!qword_2571FF140)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C88AC, &type metadata for Starred.StarredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF140);
  }
  return result;
}

unint64_t sub_2425884D8()
{
  unint64_t result;

  result = qword_2571FF148;
  if (!qword_2571FF148)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C87E4, &type metadata for Starred.StarredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF148);
  }
  return result;
}

unint64_t sub_242588520()
{
  unint64_t result;

  result = qword_2571FF150;
  if (!qword_2571FF150)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C880C, &type metadata for Starred.StarredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF150);
  }
  return result;
}

_QWORD *sub_242588564(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  unsigned __int8 v6[32];

  v6[0] = 7;
  result = sub_24256BFA4(a3, v6);
  if (!v3)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_242588900@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t *v23;
  __int128 *v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  _OWORD v41[2];

  v36 = a2;
  v3 = sub_2425A0308();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF158);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF160);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v31 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v31 - v16;
  v18 = sub_2425A032C();
  v34 = *(_QWORD *)(v18 - 8);
  v35 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v41[0] + 1) = MEMORY[0x24BEE4AD8] + 8;
  *(_QWORD *)&v40 = swift_allocObject();
  v33 = a1;
  sub_242526478(a1, v40 + 16);
  sub_2425A02FC();
  sub_2425A0314();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v15, *MEMORY[0x24BEE4390], v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
  v21 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_24255BB44((uint64_t)v17, (uint64_t)v8, &qword_2571FF160);
  sub_24255BB44((uint64_t)v15, v21, &qword_2571FF160);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v8, 1, v3) == 1)
  {
    sub_2425264C4((uint64_t)v15, &qword_2571FF160);
    sub_2425264C4((uint64_t)v17, &qword_2571FF160);
    if (v22(v21, 1, v3) == 1)
    {
      sub_2425264C4((uint64_t)v8, &qword_2571FF160);
      goto LABEL_8;
    }
LABEL_6:
    v23 = &qword_2571FF158;
    v24 = (__int128 *)v8;
LABEL_11:
    sub_2425264C4((uint64_t)v24, v23);
    goto LABEL_12;
  }
  sub_24255BB44((uint64_t)v8, (uint64_t)v12, &qword_2571FF160);
  if (v22(v21, 1, v3) == 1)
  {
    sub_2425264C4((uint64_t)v15, &qword_2571FF160);
    sub_2425264C4((uint64_t)v17, &qword_2571FF160);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    goto LABEL_6;
  }
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v32, v21, v3);
  v26 = sub_24259FAA4();
  v27 = *(void (**)(char *, uint64_t))(v4 + 8);
  v27(v25, v3);
  sub_2425264C4((uint64_t)v15, &qword_2571FF160);
  sub_2425264C4((uint64_t)v17, &qword_2571FF160);
  v27(v12, v3);
  sub_2425264C4((uint64_t)v8, &qword_2571FF160);
  if ((v26 & 1) == 0)
  {
LABEL_12:
    v28 = v36;
    v36[3] = MEMORY[0x24BEE4AD8] + 8;
    v29 = swift_allocObject();
    *v28 = v29;
    sub_242526478(v33, v29 + 16);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v20, v35);
  }
LABEL_8:
  sub_2425A0320();
  sub_24258A584(&v37);
  swift_release();
  if (!v39)
  {
    v23 = (uint64_t *)&unk_2571FF168;
    v24 = &v37;
    goto LABEL_11;
  }
  v40 = v37;
  sub_2425264B4(&v38, v41);
  sub_242588900(v41);
  sub_2425264C4((uint64_t)&v40, &qword_2571FF170);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v20, v35);
}

uint64_t sub_242588D2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t *v23;
  __int128 *v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  _OWORD v41[2];

  v36 = a2;
  v3 = sub_2425A0308();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF158);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF160);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v31 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v31 - v16;
  v18 = sub_2425A032C();
  v34 = *(_QWORD *)(v18 - 8);
  v35 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  *((_QWORD *)&v41[0] + 1) = v32;
  *(_QWORD *)&v40 = swift_allocObject();
  v33 = a1;
  sub_24255BB44(a1, v40 + 16, &qword_2571FC790);
  sub_2425A02FC();
  sub_2425A0314();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v15, *MEMORY[0x24BEE4390], v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
  v21 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_24255BB44((uint64_t)v17, (uint64_t)v8, &qword_2571FF160);
  sub_24255BB44((uint64_t)v15, v21, &qword_2571FF160);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v8, 1, v3) == 1)
  {
    sub_2425264C4((uint64_t)v15, &qword_2571FF160);
    sub_2425264C4((uint64_t)v17, &qword_2571FF160);
    if (v22(v21, 1, v3) == 1)
    {
      sub_2425264C4((uint64_t)v8, &qword_2571FF160);
      goto LABEL_8;
    }
LABEL_6:
    v23 = &qword_2571FF158;
    v24 = (__int128 *)v8;
LABEL_11:
    sub_2425264C4((uint64_t)v24, v23);
    goto LABEL_12;
  }
  sub_24255BB44((uint64_t)v8, (uint64_t)v12, &qword_2571FF160);
  if (v22(v21, 1, v3) == 1)
  {
    sub_2425264C4((uint64_t)v15, &qword_2571FF160);
    sub_2425264C4((uint64_t)v17, &qword_2571FF160);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    goto LABEL_6;
  }
  v25 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v31, v21, v3);
  v26 = sub_24259FAA4();
  v27 = *(void (**)(char *, uint64_t))(v4 + 8);
  v27(v25, v3);
  sub_2425264C4((uint64_t)v15, &qword_2571FF160);
  sub_2425264C4((uint64_t)v17, &qword_2571FF160);
  v27(v12, v3);
  sub_2425264C4((uint64_t)v8, &qword_2571FF160);
  if ((v26 & 1) == 0)
  {
LABEL_12:
    v28 = v36;
    v36[3] = v32;
    v29 = swift_allocObject();
    *v28 = v29;
    sub_24255BB44(v33, v29 + 16, &qword_2571FC790);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v20, v35);
  }
LABEL_8:
  sub_2425A0320();
  sub_24258A584(&v37);
  swift_release();
  if (!v39)
  {
    v23 = (uint64_t *)&unk_2571FF168;
    v24 = &v37;
    goto LABEL_11;
  }
  v40 = v37;
  sub_2425264B4(&v38, v41);
  sub_242588900((uint64_t)v41, v36);
  sub_2425264C4((uint64_t)&v40, &qword_2571FF170);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v20, v35);
}

uint64_t sub_242589160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t *v23;
  __int128 *v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  _OWORD v42[2];

  v37 = a2;
  v3 = sub_2425A0308();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF158);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF160);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v32 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - v16;
  v18 = sub_2425A032C();
  v35 = *(_QWORD *)(v18 - 8);
  v36 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF180);
  v34 = a1;
  *((_QWORD *)&v42[0] + 1) = v33;
  *(_QWORD *)&v41 = a1;
  swift_retain();
  sub_2425A02FC();
  sub_2425A0314();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v15, *MEMORY[0x24BEE4390], v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
  v21 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_24255BB44((uint64_t)v17, (uint64_t)v8, &qword_2571FF160);
  sub_24255BB44((uint64_t)v15, v21, &qword_2571FF160);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v8, 1, v3) == 1)
  {
    sub_2425264C4((uint64_t)v15, &qword_2571FF160);
    sub_2425264C4((uint64_t)v17, &qword_2571FF160);
    if (v22(v21, 1, v3) == 1)
    {
      sub_2425264C4((uint64_t)v8, &qword_2571FF160);
LABEL_8:
      sub_2425A0320();
      sub_24258A584(&v38);
      swift_release();
      if (v40)
      {
        v41 = v38;
        sub_2425264B4(&v39, v42);
        sub_242588900((uint64_t)v42, v37);
        sub_2425264C4((uint64_t)&v41, &qword_2571FF170);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v20, v36);
      }
      v23 = (uint64_t *)&unk_2571FF168;
      v24 = &v38;
      goto LABEL_11;
    }
LABEL_6:
    v23 = &qword_2571FF158;
    v24 = (__int128 *)v8;
LABEL_11:
    sub_2425264C4((uint64_t)v24, v23);
    goto LABEL_12;
  }
  sub_24255BB44((uint64_t)v8, (uint64_t)v12, &qword_2571FF160);
  if (v22(v21, 1, v3) == 1)
  {
    sub_2425264C4((uint64_t)v15, &qword_2571FF160);
    sub_2425264C4((uint64_t)v17, &qword_2571FF160);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    goto LABEL_6;
  }
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v32, v21, v3);
  v26 = sub_24259FAA4();
  v27 = *(void (**)(char *, uint64_t))(v4 + 8);
  v27(v25, v3);
  sub_2425264C4((uint64_t)v15, &qword_2571FF160);
  sub_2425264C4((uint64_t)v17, &qword_2571FF160);
  v27(v12, v3);
  sub_2425264C4((uint64_t)v8, &qword_2571FF160);
  if ((v26 & 1) != 0)
    goto LABEL_8;
LABEL_12:
  v29 = v37;
  v30 = v34;
  v37[3] = v33;
  *v29 = v30;
  v31 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
  swift_retain();
  return v31(v20, v36);
}

uint64_t static MorpheusUtils.unwrap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t *v25;
  __int128 *v26;
  char *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  _OWORD v46[3];

  v41 = a3;
  v5 = sub_2425A0308();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF158);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF160);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v38 = (uint64_t)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v34 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v34 - v17;
  v19 = sub_2425A032C();
  v39 = *(_QWORD *)(v19 - 8);
  v40 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v46[0] + 1) = a2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v45);
  v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16);
  v37 = a1;
  v36(boxed_opaque_existential_0, a1, a2);
  sub_2425A02FC();
  sub_2425A0314();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v16, *MEMORY[0x24BEE4390], v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
  v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_24255BB44((uint64_t)v18, (uint64_t)v10, &qword_2571FF160);
  sub_24255BB44((uint64_t)v16, v23, &qword_2571FF160);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v24((uint64_t)v10, 1, v5) == 1)
  {
    sub_2425264C4((uint64_t)v16, &qword_2571FF160);
    sub_2425264C4((uint64_t)v18, &qword_2571FF160);
    if (v24(v23, 1, v5) == 1)
    {
      sub_2425264C4((uint64_t)v10, &qword_2571FF160);
      goto LABEL_8;
    }
LABEL_6:
    v25 = &qword_2571FF158;
    v26 = (__int128 *)v10;
LABEL_11:
    sub_2425264C4((uint64_t)v26, v25);
    goto LABEL_12;
  }
  sub_24255BB44((uint64_t)v10, v38, &qword_2571FF160);
  if (v24(v23, 1, v5) == 1)
  {
    sub_2425264C4((uint64_t)v16, &qword_2571FF160);
    sub_2425264C4((uint64_t)v18, &qword_2571FF160);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v38, v5);
    goto LABEL_6;
  }
  v27 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v35, v23, v5);
  v28 = v38;
  v29 = sub_24259FAA4();
  v30 = *(void (**)(char *, uint64_t))(v6 + 8);
  v30(v27, v5);
  sub_2425264C4((uint64_t)v16, &qword_2571FF160);
  sub_2425264C4((uint64_t)v18, &qword_2571FF160);
  v30((char *)v28, v5);
  sub_2425264C4((uint64_t)v10, &qword_2571FF160);
  if ((v29 & 1) == 0)
  {
LABEL_12:
    v31 = v41;
    v41[3] = a2;
    v32 = __swift_allocate_boxed_opaque_existential_0(v31);
    v36(v32, v37, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v21, v40);
  }
LABEL_8:
  sub_2425A0320();
  sub_24258A584(&v42);
  swift_release();
  if (!v44)
  {
    v25 = (uint64_t *)&unk_2571FF168;
    v26 = &v42;
    goto LABEL_11;
  }
  v45 = v42;
  sub_2425264B4(&v43, v46);
  sub_242588900((uint64_t)v46, v41);
  sub_2425264C4((uint64_t)&v45, &qword_2571FF170);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v21, v40);
}

uint64_t static MorpheusUtils.getShape(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _BYTE *v33;
  __int128 v34[2];
  uint64_t v35;
  _QWORD *v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  sub_242526478(a1, (uint64_t)&v36);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if (!swift_dynamicCast())
  {
    v35 = 0;
    memset(v34, 0, sizeof(v34));
    sub_2425264C4((uint64_t)v34, &qword_2571FCCA0);
    return MEMORY[0x24BEE4AF8];
  }
  sub_24251DEC8(v34, (uint64_t)v37);
  v2 = v38;
  v3 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_242509C44(0, v5, 0);
    v6 = v4 + 32;
    v7 = v5;
    while (1)
    {
      sub_242526478(v6, (uint64_t)v34);
      v8 = static MorpheusUtils.getShape(_:)(v34);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      if (v1)
        break;
      v9 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_242509C44(0, v9[2] + 1, 1);
        v9 = v36;
      }
      v11 = v9[2];
      v10 = v9[3];
      v12 = v11 + 1;
      if (v11 >= v10 >> 1)
      {
        sub_242509C44(v10 > 1, v11 + 1, 1);
        v9 = v36;
      }
      v9[2] = v12;
      v9[v11 + 4] = v8;
      v6 += 32;
      if (!--v7)
        goto LABEL_13;
    }
    v13 = v36;
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_36;
  }
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_13:
  v14 = v12 != 0;
  if (v12 != v14)
  {
    v18 = v9 + 4;
    while (1)
    {
      if (v14 >= v12)
      {
        __break(1u);
        goto LABEL_41;
      }
      v19 = (_QWORD *)v18[v14];
      v20 = (_QWORD *)*v18;
      v21 = v19[2];
      if (v21 != *(_QWORD *)(*v18 + 16))
        break;
      if (v21)
        v22 = v19 == v20;
      else
        v22 = 1;
      if (!v22)
      {
        if (v19[4] != v20[4])
          break;
        v23 = v21 - 1;
        if (v23)
        {
          v24 = v19 + 5;
          v25 = v20 + 5;
          do
          {
            v27 = *v24++;
            v26 = v27;
            v28 = *v25++;
            if (v26 != v28)
              goto LABEL_32;
          }
          while (--v23);
        }
      }
      if (++v14 == v12)
        goto LABEL_14;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_2571FC5C8 == -1)
      goto LABEL_33;
LABEL_41:
    swift_once();
LABEL_33:
    v29 = sub_24259F930();
    __swift_project_value_buffer(v29, (uint64_t)qword_2571FFB10);
    v30 = sub_24259F918();
    v31 = sub_24259FE70();
    v13 = (_QWORD *)v31;
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_2422E0000, v30, (os_log_type_t)v13, "Inhomogeneous shape", v32, 2u);
      MEMORY[0x2426A88B8](v32, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v33 = 35;
    swift_willThrow();
LABEL_36:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    return (uint64_t)v13;
  }
LABEL_14:
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC840);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2425C4B60;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 32) = v5;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
    goto LABEL_38;
  }
  if (v9[2])
  {
    v17 = v9[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_38:
    *(_QWORD *)&v34[0] = v15;
    sub_242519B90(v17);
    v13 = *(_QWORD **)&v34[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    return (uint64_t)v13;
  }
  __break(1u);
  return result;
}

uint64_t static MorpheusUtils.flattenNumericArray(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _BYTE *v15;
  __int128 v16[2];
  uint64_t v17;
  _BYTE v18[32];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = MEMORY[0x24BEE4AF8];
  sub_242526478(a1, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if (swift_dynamicCast())
  {
    sub_24251DEC8(v16, (uint64_t)v19);
    v3 = v20;
    v4 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = v5 + 32;
      while (1)
      {
        sub_242526478(v7, (uint64_t)v16);
        v8 = static MorpheusUtils.flattenNumericArray(_:)(v16);
        if (v1)
          break;
        sub_24251A134(v8);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        v7 += 32;
        if (!--v6)
          goto LABEL_6;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return v22;
    }
  }
  else
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    sub_2425264C4((uint64_t)v16, &qword_2571FCCA0);
    sub_242526478(a1, (uint64_t)v19);
    sub_24252123C();
    if (swift_dynamicCast())
    {
      v10 = *(id *)&v16[0];
      MEMORY[0x2426A794C]();
      if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_24259FCF0();
      sub_24259FD38();
      sub_24259FCCC();

      return v22;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_2571FC5C8 != -1)
        swift_once();
      v11 = sub_24259F930();
      __swift_project_value_buffer(v11, (uint64_t)qword_2571FFB10);
      v12 = sub_24259F918();
      v13 = sub_24259FE70();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_2422E0000, v12, v13, "Array contains non NSNumber", v14, 2u);
        MEMORY[0x2426A88B8](v14, -1, -1);
      }

      sub_242554B60();
      swift_allocError();
      *v15 = 12;
      return swift_willThrow();
    }
  }
}

uint64_t static MorpheusUtils.getType(of:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _BYTE *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8x16_t v29;
  uint8x16_t *v30;
  unint64_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x8_t v34;
  uint8x8_t *v35;
  uint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  char *v39;
  char v40;
  unsigned int v41;
  __int128 v42[2];
  uint64_t v43;
  _QWORD v44[4];
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  sub_242526478(a1, (uint64_t)v45);
  result = swift_dynamicCast();
  if ((_DWORD)result || (sub_242526478(a1, (uint64_t)v45), result = swift_dynamicCast(), (_DWORD)result))
  {
    *a2 = 6;
    return result;
  }
  sub_242526478(a1, (uint64_t)v45);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = 5;
    return result;
  }
  sub_242526478(a1, (uint64_t)v45);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = 0;
    return result;
  }
  sub_242526478(a1, (uint64_t)v45);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = 1;
    return result;
  }
  sub_242526478(a1, (uint64_t)v45);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = 2;
    return result;
  }
  sub_242526478(a1, (uint64_t)v45);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = 3;
    return result;
  }
  sub_242526478(a1, (uint64_t)v45);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = 4;
    return result;
  }
  sub_242526478(a1, (uint64_t)v44);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCC98);
  if (!swift_dynamicCast())
  {
    v43 = 0;
    memset(v42, 0, sizeof(v42));
    sub_2425264C4((uint64_t)v42, &qword_2571FCCA0);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v19 = sub_24259F930();
    __swift_project_value_buffer(v19, (uint64_t)qword_2571FFB10);
    v20 = sub_24259F918();
    v21 = sub_24259FE70();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_2422E0000, v20, v21, "Invalid numeric type", v22, 2u);
      MEMORY[0x2426A88B8](v22, -1, -1);
    }

    sub_242554B60();
    swift_allocError();
    *v23 = 36;
    return swift_willThrow();
  }
  sub_24251DEC8(v42, (uint64_t)v45);
  v6 = v46;
  v7 = v47;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 32;
    v11 = (char *)MEMORY[0x24BEE4AF8];
    do
    {
      sub_242526478(v10, (uint64_t)v42);
      static MorpheusUtils.getType(of:)(v44, v42);
      if (v2)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      v12 = v44[0];
      if (LOBYTE(v44[0]) != 7)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_24251C0E8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        v13 = *((_QWORD *)v11 + 2);
        v14 = *((_QWORD *)v11 + 3);
        v15 = v13 + 1;
        if (v13 >= v14 >> 1)
        {
          v48 = v13 + 1;
          v16 = v11;
          v17 = v13;
          v18 = sub_24251C0E8((char *)(v14 > 1), v13 + 1, 1, v16);
          v13 = v17;
          v15 = v48;
          v11 = v18;
        }
        *((_QWORD *)v11 + 2) = v15;
        v11[v13 + 32] = v12;
      }
      v10 += 32;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v24 = *((_QWORD *)v11 + 2);
  if (!v24)
  {
    LOBYTE(v25) = 7;
    goto LABEL_55;
  }
  v25 = v11[32];
  v26 = v24 - 1;
  if (v24 == 1)
    goto LABEL_55;
  if (v24 < 9)
  {
    v27 = 1;
    goto LABEL_51;
  }
  if (v24 < 0x21)
  {
    v28 = 0;
LABEL_46:
    v27 = v26 & 0xFFFFFFFFFFFFFFF8 | 1;
    v34 = (uint8x8_t)vdup_n_s8(v25);
    v35 = (uint8x8_t *)&v11[v28 + 33];
    v36 = v28 - (v26 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *v35++;
      v34 = vmax_u8(v34, v37);
      v36 += 8;
    }
    while (v36);
    LOBYTE(v25) = vmaxv_u8(v34);
    if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_55;
    goto LABEL_51;
  }
  v28 = v26 & 0xFFFFFFFFFFFFFFE0;
  v29 = (uint8x16_t)vdupq_n_s8(v25);
  v30 = (uint8x16_t *)(v11 + 49);
  v31 = v26 & 0xFFFFFFFFFFFFFFE0;
  v32 = v29;
  do
  {
    v29 = vmaxq_u8(v29, v30[-1]);
    v32 = vmaxq_u8(v32, *v30);
    v30 += 2;
    v31 -= 32;
  }
  while (v31);
  v33 = vmaxq_u8(v29, v32);
  v33.i8[0] = vmaxvq_u8(v33);
  v25 = v33.i32[0];
  if (v26 == v28)
    goto LABEL_55;
  if ((v26 & 0x18) != 0)
    goto LABEL_46;
  v27 = v28 | 1;
LABEL_51:
  v38 = v24 - v27;
  v39 = &v11[v27 + 32];
  do
  {
    v41 = *v39++;
    v40 = v41;
    if (v25 <= v41)
      LOBYTE(v25) = v40;
    --v38;
  }
  while (v38);
LABEL_55:
  *a2 = v25;
LABEL_56:
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
}

uint64_t sub_24258A584@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v2 = sub_24259FFA8();
  swift_getObjectType();
  result = sub_24259FFA8();
  if (v2 == result)
  {
    v4 = sub_24259FFB4();
    swift_unknownObjectRelease();
    if ((v4 & 1) != 0)
    {
      result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      sub_2425A00A4();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL static NumericType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NumericType.hash(into:)()
{
  return sub_2425A02E4();
}

BOOL static NumericType.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t NumericType.hashValue.getter()
{
  sub_2425A02D8();
  sub_2425A02E4();
  return sub_2425A02F0();
}

BOOL sub_24258A720(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_24258A734(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_24258A748(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_24258A75C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t _s8Morpheus0A5UtilsO5isNilySbypFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t result;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37[32];

  v2 = sub_2425A0308();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v33 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF158);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF160);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v33 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v33 - v15;
  v36 = sub_2425A032C();
  v34 = *(_QWORD *)(v36 - 8);
  v17 = MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v33 - v19;
  sub_242526478(a1, (uint64_t)v37);
  sub_2425A02FC();
  sub_2425A0314();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v14, *MEMORY[0x24BEE4390], v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  v21 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_24255BB44((uint64_t)v16, (uint64_t)v7, &qword_2571FF160);
  sub_24255BB44((uint64_t)v14, v21, &qword_2571FF160);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v22((uint64_t)v7, 1, v2) == 1)
  {
    sub_2425264C4((uint64_t)v14, &qword_2571FF160);
    sub_2425264C4((uint64_t)v16, &qword_2571FF160);
    if (v22(v21, 1, v2) == 1)
    {
      sub_2425264C4((uint64_t)v7, &qword_2571FF160);
      v23 = v34;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v35, v20, v36);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_24255BB44((uint64_t)v7, (uint64_t)v11, &qword_2571FF160);
  if (v22(v21, 1, v2) == 1)
  {
    sub_2425264C4((uint64_t)v14, &qword_2571FF160);
    sub_2425264C4((uint64_t)v16, &qword_2571FF160);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
LABEL_6:
    sub_2425264C4((uint64_t)v7, &qword_2571FF158);
    v23 = v34;
    v24 = v35;
    v25 = v36;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v35, v20, v36);
LABEL_10:
    v31 = 0;
    goto LABEL_11;
  }
  v26 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v33, v21, v2);
  v27 = sub_24259FAA4();
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v26, v2);
  sub_2425264C4((uint64_t)v14, &qword_2571FF160);
  sub_2425264C4((uint64_t)v16, &qword_2571FF160);
  v28(v11, v2);
  sub_2425264C4((uint64_t)v7, &qword_2571FF160);
  v23 = v34;
  v24 = v35;
  v25 = v36;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v35, v20, v36);
  if ((v27 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  sub_2425A0320();
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v29 = sub_24259FFA8();
  swift_getObjectType();
  result = sub_24259FFA8();
  if (v29 == result)
  {
    v31 = sub_24259FFB4();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v24 = v35;
    v25 = v36;
LABEL_11:
    v32 = *(void (**)(char *, uint64_t))(v23 + 8);
    v32(v24, v25);
    v32(v20, v25);
    return v31 & 1;
  }
  __break(1u);
  return result;
}

unint64_t sub_24258ABE8()
{
  unint64_t result;

  result = qword_2571FF178;
  if (!qword_2571FF178)
  {
    result = MEMORY[0x2426A87E0](&protocol conformance descriptor for NumericType, &type metadata for NumericType);
    atomic_store(result, (unint64_t *)&qword_2571FF178);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NumericType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24258AC78 + 4 * byte_2425C8929[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24258ACAC + 4 * byte_2425C8924[v4]))();
}

uint64_t sub_24258ACAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24258ACB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24258ACBCLL);
  return result;
}

uint64_t sub_24258ACC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24258ACD0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24258ACD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24258ACDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NumericType()
{
  return &type metadata for NumericType;
}

ValueMetadata *type metadata accessor for MorpheusUtils()
{
  return &type metadata for MorpheusUtils;
}

uint64_t sub_24258AD08()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_24258AD34()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_24258AD58(char *a1, char *a2)
{
  return sub_24255DC40(*a1, *a2);
}

uint64_t sub_24258AD64()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24258ADD0()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24258AE18()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24258AE80@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24258AEDC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 25705;
  if (*v1)
    v2 = 7894115;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24258AF08()
{
  _BYTE *v0;

  if (*v0)
    return 7894115;
  else
    return 25705;
}

uint64_t sub_24258AF30@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24258AF90()
{
  sub_24258B72C();
  return sub_2425A0344();
}

uint64_t sub_24258AFB8()
{
  sub_24258B72C();
  return sub_2425A0350();
}

uint64_t sub_24258AFE0(_QWORD *a1)
{
  swift_allocObject();
  return sub_24258B028(a1);
}

uint64_t sub_24258B028(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v12[5];
  char v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF2B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24258B72C();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Name();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    *(_QWORD *)(v1 + 40) = sub_2425A01A0();
    *(_QWORD *)(v1 + 48) = v10;
    v13 = 1;
    sub_242561984();
    sub_2425A01D0();
    *(_BYTE *)(v1 + 56) = v12[0];
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v12);
    v3 = sub_24259BC74(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

void sub_24258B22C(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  v2 = (_QWORD *)v1;
  if (*(_BYTE *)(v1 + 56))
  {
    if (*(_BYTE *)(v1 + 56) != 1)
    {
      *(_BYTE *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return;
    }
    if (MEMORY[0x2426A8918](v1 + 24))
    {
      v4 = *(_QWORD *)(v1 + 32);
      ObjectType = swift_getObjectType();
      v6 = *(_QWORD *)(v1 + 40);
      v7 = *(_QWORD *)(v1 + 48);
      v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 40);
      swift_bridgeObjectRetain();
      v9 = v8(v6, v7, ObjectType, v4);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = &type metadata for Store;
      v10 = (_QWORD *)swift_allocObject();
      *(_QWORD *)a1 = v10;
      v10[5] = type metadata accessor for LexicalContext();
      v10[6] = &off_251358E28;
      v10[2] = v9;
      v12 = *(_QWORD *)(v1 + 40);
      v11 = *(_QWORD *)(v1 + 48);
      v10[10] = MEMORY[0x24BEE0D00];
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      v10[7] = v12;
      v10[8] = v11;
LABEL_8:
      *(_BYTE *)(a1 + 32) = 0;
      return;
    }
    if (qword_2571FC5C8 != -1)
      swift_once();
    v18 = sub_24259F930();
    __swift_project_value_buffer(v18, (uint64_t)qword_2571FFB10);
    swift_retain();
    v19 = sub_24259F918();
    v20 = sub_24259FE70();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v21 = 134217984;
      *(_QWORD *)&v33[0] = v2[2];
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v19, v20, "Name> ParentBlock not found. line %ld", v21, 0xCu);
      MEMORY[0x2426A88B8](v21, -1, -1);

    }
    else
    {

      swift_release();
    }
    v29 = 21;
  }
  else
  {
    if (MEMORY[0x2426A8918](v1 + 24))
    {
      v13 = *(_QWORD *)(v1 + 32);
      v14 = swift_getObjectType();
      v15 = *(_QWORD *)(v1 + 40);
      v16 = *(_QWORD *)(v1 + 48);
      v17 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
      swift_bridgeObjectRetain();
      v17(&v31, v15, v16, v14, v13);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v32 + 1))
      {
        sub_2425264B4(&v31, v33);
        sub_2425264B4(v33, (_OWORD *)a1);
        goto LABEL_8;
      }
    }
    else
    {
      v31 = 0u;
      v32 = 0u;
    }
    sub_24256FB04((uint64_t)&v31);
    if (qword_2571FC5C8 != -1)
      swift_once();
    v22 = sub_24259F930();
    __swift_project_value_buffer(v22, (uint64_t)qword_2571FFB10);
    swift_retain();
    v23 = sub_24259F918();
    v24 = sub_24259FE70();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      *(_QWORD *)&v33[0] = v26;
      *(_DWORD *)v25 = 136315394;
      v27 = v2[5];
      v28 = v2[6];
      swift_bridgeObjectRetain();
      *(_QWORD *)&v31 = sub_24259B370(v27, v28, (uint64_t *)v33);
      sub_24259FE94();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2048;
      *(_QWORD *)&v31 = v2[2];
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v23, v24, "Name> Id %s not found. line %ld", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v26, -1, -1);
      MEMORY[0x2426A88B8](v25, -1, -1);

    }
    else
    {

      swift_release();
    }
    v29 = 20;
  }
  sub_242554B60();
  swift_allocError();
  *v30 = v29;
  swift_willThrow();
}

uint64_t sub_24258B680()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24258B6AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24258B6B4()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Name()
{
  return objc_opt_self();
}

uint64_t sub_24258B700()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

unint64_t sub_24258B72C()
{
  unint64_t result;

  result = qword_2571FF2B8;
  if (!qword_2571FF2B8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8B48, &type metadata for Name.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF2B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Name.NameCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24258B7BC + 4 * byte_2425C8A25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24258B7F0 + 4 * asc_2425C8A20[v4]))();
}

uint64_t sub_24258B7F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24258B7F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24258B800);
  return result;
}

uint64_t sub_24258B80C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24258B814);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24258B818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24258B820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Name.NameCodingKeys()
{
  return &type metadata for Name.NameCodingKeys;
}

unint64_t sub_24258B840()
{
  unint64_t result;

  result = qword_2571FF2C0;
  if (!qword_2571FF2C0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8B20, &type metadata for Name.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF2C0);
  }
  return result;
}

unint64_t sub_24258B888()
{
  unint64_t result;

  result = qword_2571FF2C8;
  if (!qword_2571FF2C8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8A58, &type metadata for Name.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF2C8);
  }
  return result;
}

unint64_t sub_24258B8D0()
{
  unint64_t result;

  result = qword_2571FF2D0;
  if (!qword_2571FF2D0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8A80, &type metadata for Name.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF2D0);
  }
  return result;
}

uint64_t sub_24258B914(uint64_t a1, char a2)
{
  return sub_24258B968(a1, a2, &qword_2571FCE08);
}

uint64_t sub_24258B930(uint64_t a1)
{
  return sub_24258E950(a1, &qword_2571FD398);
}

uint64_t sub_24258B94C(uint64_t a1, char a2)
{
  return sub_24258B968(a1, a2, &qword_2571FD608);
}

uint64_t sub_24258B968(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t *v24;
  uint64_t (*v25)();
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v6 = sub_24259F930();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF438);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = a2;
  v14 = __swift_instantiateConcreteTypeFromMangledName(a3);
  sub_242590F50();
  v15 = a1;
  v16 = v45;
  sub_2425A0194();
  if (!v16)
  {
    v40 = v9;
    v41 = v6;
    v42 = v7;
    v43 = v14;
    v44 = a1;
    v45 = v11;
    LOBYTE(v47) = 0;
    v18 = sub_2425A01A0();
    v19 = v17;
    v39 = v10;
    if (v18 == 0x656D6E6769737341 && v17 == 0xEA0000000000746ELL)
    {
      swift_bridgeObjectRelease();
      v22 = v45;
      goto LABEL_9;
    }
    v21 = sub_2425A0254();
    v22 = v45;
    if ((v21 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      type metadata accessor for Assignment();
      sub_24255B800(&qword_2571FF5A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Assignment, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF5A8;
      v25 = type metadata accessor for Assignment;
LABEL_11:
      v26 = 255;
LABEL_12:
      sub_24255B800(v24, v26, (uint64_t (*)(uint64_t))v25, (uint64_t)&unk_2425C9138);
      return v15;
    }
    v27 = v18 == 0x7069726373627553 && v19 == 0xE900000000000074;
    if (v27 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Subscript();
      sub_24255B800(&qword_2571FF590, 255, (uint64_t (*)(uint64_t))type metadata accessor for Subscript, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF598;
      v25 = type metadata accessor for Subscript;
      goto LABEL_11;
    }
    v28 = v18 == 0x6563696F6843 && v19 == 0xE600000000000000;
    if (v28 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Choice();
      sub_24255B800(&qword_2571FF580, 255, (uint64_t (*)(uint64_t))type metadata accessor for Choice, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF588;
      v25 = type metadata accessor for Choice;
      goto LABEL_11;
    }
    v29 = v18 == 0x746E6174736E6F43 && v19 == 0xE800000000000000;
    if (v29 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Constant();
      sub_24255B800(&qword_2571FF570, 255, (uint64_t (*)(uint64_t))type metadata accessor for Constant, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF578;
      v25 = type metadata accessor for Constant;
      goto LABEL_11;
    }
    if (v18 == 1751343429 && v19 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Each();
      sub_24255B800(&qword_2571FF560, v30, (uint64_t (*)(uint64_t))type metadata accessor for Each, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF568;
      v25 = type metadata accessor for Each;
      goto LABEL_12;
    }
    if (v18 == 0x426C61636978654CLL && v19 == 0xEC0000006B636F6CLL || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for LexicalBlock();
      sub_24255B800((unint64_t *)&qword_2571FCE40, 255, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF558;
      v25 = type metadata accessor for LexicalBlock;
      goto LABEL_11;
    }
    if (v18 == 0x6E7275746552 && v19 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Return();
      sub_24255B800(&qword_2571FF548, 255, (uint64_t (*)(uint64_t))type metadata accessor for Return, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF550;
      v25 = type metadata accessor for Return;
      goto LABEL_11;
    }
    if (v18 == 0x73697261706D6F43 && v19 == 0xEA00000000006E6FLL || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comparison();
      sub_24255B800(&qword_2571FF538, 255, (uint64_t (*)(uint64_t))type metadata accessor for Comparison, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF540;
      v25 = type metadata accessor for Comparison;
      goto LABEL_11;
    }
    if (v18 == 0x704F6E6942 && v19 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BinOp();
      sub_24255B800(&qword_2571FF528, 255, (uint64_t (*)(uint64_t))type metadata accessor for BinOp, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF530;
      v25 = type metadata accessor for BinOp;
      goto LABEL_11;
    }
    if (v18 == 1819042115 && v19 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Call();
      sub_24255B800(&qword_2571FF518, 255, (uint64_t (*)(uint64_t))type metadata accessor for Call, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF520;
      v25 = type metadata accessor for Call;
      goto LABEL_11;
    }
    if (v18 == 1701667150 && v19 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Name();
      sub_24255B800(&qword_2571FF508, 255, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF510;
      v25 = type metadata accessor for Name;
      goto LABEL_11;
    }
    if (v18 == 0x7475626972747441 && v19 == 0xE900000000000065 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Attribute();
      sub_24255B800(&qword_2571FF4F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF500;
      v25 = type metadata accessor for Attribute;
      goto LABEL_11;
    }
    if (v18 == 0x64726F7779654BLL && v19 == 0xE700000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Keyword();
      sub_24255B800(&qword_2571FF4E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Keyword, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4F0;
      v25 = type metadata accessor for Keyword;
      goto LABEL_11;
    }
    if (v18 == 0x7375656870726F4DLL && v19 == 0xED00007961727241 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusArray();
      sub_24255B800(&qword_2571FF4D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusArray, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4E0;
      v25 = type metadata accessor for MorpheusArray;
      goto LABEL_11;
    }
    if (v18 == 0x7375656870726F4DLL && v19 == 0xEC00000074636944 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusDict();
      sub_24255B800(&qword_2571FF4C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusDict, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4D0;
      v25 = type metadata accessor for MorpheusDict;
      goto LABEL_11;
    }
    if (v18 == 0x7375656870726F4DLL && v19 == 0xED00006563696C53 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusSlice();
      sub_24255B800(&qword_2571FF4B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusSlice, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4C0;
      v25 = type metadata accessor for MorpheusSlice;
      goto LABEL_11;
    }
    if (v18 == 0x6E6F6974636E7546 && v19 == 0xEB00000000666544 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FunctionDef();
      sub_24255B800(&qword_2571FF4A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FunctionDef, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4B0;
      v25 = type metadata accessor for FunctionDef;
      goto LABEL_11;
    }
    if (v18 == 0x6665447373616C43 && v19 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ClassDef();
      sub_24255B800(&qword_2571FF498, 255, (uint64_t (*)(uint64_t))type metadata accessor for ClassDef, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4A0;
      v25 = type metadata accessor for ClassDef;
      goto LABEL_11;
    }
    if (v18 == 0x7972616E55 && v19 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Unary();
      sub_24255B800(&qword_2571FF488, 255, (uint64_t (*)(uint64_t))type metadata accessor for Unary, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF490;
      v25 = type metadata accessor for Unary;
      goto LABEL_11;
    }
    if (v18 == 0x6573696152 && v19 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Raise();
      sub_24255B800(&qword_2571FF478, 255, (uint64_t (*)(uint64_t))type metadata accessor for Raise, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF480;
      v25 = type metadata accessor for Raise;
      goto LABEL_11;
    }
    if (v18 == 0x745364656E696F4ALL && v19 == 0xE900000000000072 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for JoinedStr();
      sub_24255B800(&qword_2571FF468, 255, (uint64_t (*)(uint64_t))type metadata accessor for JoinedStr, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF470;
      v25 = type metadata accessor for JoinedStr;
      goto LABEL_11;
    }
    if (v18 == 0x657474616D726F46 && v19 == 0xEE0065756C615664 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FormattedValue();
      sub_24255B800(&qword_2571FF458, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormattedValue, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF460;
      v25 = type metadata accessor for FormattedValue;
      goto LABEL_11;
    }
    if (v18 == 0x704F6C6F6F42 && v19 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BoolOp();
      sub_24255B800(&qword_2571FF448, 255, (uint64_t (*)(uint64_t))type metadata accessor for BoolOp, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF450;
      v25 = type metadata accessor for BoolOp;
      goto LABEL_11;
    }
    if (qword_2571FC5C8 != -1)
      swift_once();
    v31 = v41;
    v32 = __swift_project_value_buffer(v41, (uint64_t)qword_2571FFB10);
    v15 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v40, v32, v31);
    swift_bridgeObjectRetain();
    v33 = sub_24259F918();
    v34 = sub_24259FE70();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v47 = v36;
      *(_DWORD *)v35 = 136315138;
      v15 = (uint64_t)(v35 + 12);
      swift_bridgeObjectRetain();
      v46 = sub_24259B370(v18, v19, &v47);
      sub_24259FE94();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2422E0000, v33, v34, "Operation %s not supported yet", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v36, -1, -1);
      MEMORY[0x2426A88B8](v35, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
    sub_242554B60();
    swift_allocError();
    *v37 = 43;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
  }
  return v15;
}

uint64_t sub_24258D0D0(uint64_t a1, char a2)
{
  return sub_24258D15C(a1, a2, &qword_2571FD798);
}

uint64_t sub_24258D0EC(uint64_t a1, char a2)
{
  return sub_24258B968(a1, a2, &qword_2571FDAA8);
}

uint64_t sub_24258D108(uint64_t a1, char a2)
{
  return sub_24258B968(a1, a2, &qword_2571FDD40);
}

uint64_t sub_24258D124(uint64_t a1, char a2)
{
  return sub_24258B968(a1, a2, &qword_2571FDEB8);
}

uint64_t sub_24258D140(uint64_t a1, char a2)
{
  return sub_24258D15C(a1, a2, &qword_2571FE018);
}

uint64_t sub_24258D15C(uint64_t a1, char a2, uint64_t *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t *v24;
  uint64_t (*v25)();
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v5 = a2 & 1;
  v6 = sub_24259F930();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF438);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v5;
  v14 = __swift_instantiateConcreteTypeFromMangledName(a3);
  sub_242590F50();
  v15 = a1;
  v16 = v45;
  sub_2425A0194();
  if (!v16)
  {
    v40 = v9;
    v41 = v6;
    v42 = v7;
    v43 = v14;
    v44 = a1;
    v45 = v11;
    LOBYTE(v47) = 0;
    v18 = sub_2425A01A0();
    v19 = v17;
    v39 = v10;
    if (v18 == 0x656D6E6769737341 && v17 == 0xEA0000000000746ELL)
    {
      swift_bridgeObjectRelease();
      v22 = v45;
      goto LABEL_9;
    }
    v21 = sub_2425A0254();
    v22 = v45;
    if ((v21 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      type metadata accessor for Assignment();
      sub_24255B800(&qword_2571FF5A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Assignment, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF5A8;
      v25 = type metadata accessor for Assignment;
LABEL_11:
      v26 = 255;
LABEL_12:
      sub_24255B800(v24, v26, (uint64_t (*)(uint64_t))v25, (uint64_t)&unk_2425C9138);
      return v15;
    }
    v27 = v18 == 0x7069726373627553 && v19 == 0xE900000000000074;
    if (v27 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Subscript();
      sub_24255B800(&qword_2571FF590, 255, (uint64_t (*)(uint64_t))type metadata accessor for Subscript, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF598;
      v25 = type metadata accessor for Subscript;
      goto LABEL_11;
    }
    v28 = v18 == 0x6563696F6843 && v19 == 0xE600000000000000;
    if (v28 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Choice();
      sub_24255B800(&qword_2571FF580, 255, (uint64_t (*)(uint64_t))type metadata accessor for Choice, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF588;
      v25 = type metadata accessor for Choice;
      goto LABEL_11;
    }
    v29 = v18 == 0x746E6174736E6F43 && v19 == 0xE800000000000000;
    if (v29 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Constant();
      sub_24255B800(&qword_2571FF570, 255, (uint64_t (*)(uint64_t))type metadata accessor for Constant, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF578;
      v25 = type metadata accessor for Constant;
      goto LABEL_11;
    }
    if (v18 == 1751343429 && v19 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Each();
      sub_24255B800(&qword_2571FF560, v30, (uint64_t (*)(uint64_t))type metadata accessor for Each, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF568;
      v25 = type metadata accessor for Each;
      goto LABEL_12;
    }
    if (v18 == 0x426C61636978654CLL && v19 == 0xEC0000006B636F6CLL || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for LexicalBlock();
      sub_24255B800((unint64_t *)&qword_2571FCE40, 255, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF558;
      v25 = type metadata accessor for LexicalBlock;
      goto LABEL_11;
    }
    if (v18 == 0x6E7275746552 && v19 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Return();
      sub_24255B800(&qword_2571FF548, 255, (uint64_t (*)(uint64_t))type metadata accessor for Return, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF550;
      v25 = type metadata accessor for Return;
      goto LABEL_11;
    }
    if (v18 == 0x73697261706D6F43 && v19 == 0xEA00000000006E6FLL || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comparison();
      sub_24255B800(&qword_2571FF538, 255, (uint64_t (*)(uint64_t))type metadata accessor for Comparison, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF540;
      v25 = type metadata accessor for Comparison;
      goto LABEL_11;
    }
    if (v18 == 0x704F6E6942 && v19 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BinOp();
      sub_24255B800(&qword_2571FF528, 255, (uint64_t (*)(uint64_t))type metadata accessor for BinOp, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF530;
      v25 = type metadata accessor for BinOp;
      goto LABEL_11;
    }
    if (v18 == 1819042115 && v19 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Call();
      sub_24255B800(&qword_2571FF518, 255, (uint64_t (*)(uint64_t))type metadata accessor for Call, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF520;
      v25 = type metadata accessor for Call;
      goto LABEL_11;
    }
    if (v18 == 1701667150 && v19 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Name();
      sub_24255B800(&qword_2571FF508, 255, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF510;
      v25 = type metadata accessor for Name;
      goto LABEL_11;
    }
    if (v18 == 0x7475626972747441 && v19 == 0xE900000000000065 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Attribute();
      sub_24255B800(&qword_2571FF4F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF500;
      v25 = type metadata accessor for Attribute;
      goto LABEL_11;
    }
    if (v18 == 0x64726F7779654BLL && v19 == 0xE700000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Keyword();
      sub_24255B800(&qword_2571FF4E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Keyword, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4F0;
      v25 = type metadata accessor for Keyword;
      goto LABEL_11;
    }
    if (v18 == 0x7375656870726F4DLL && v19 == 0xED00007961727241 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusArray();
      sub_24255B800(&qword_2571FF4D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusArray, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4E0;
      v25 = type metadata accessor for MorpheusArray;
      goto LABEL_11;
    }
    if (v18 == 0x7375656870726F4DLL && v19 == 0xEC00000074636944 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusDict();
      sub_24255B800(&qword_2571FF4C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusDict, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4D0;
      v25 = type metadata accessor for MorpheusDict;
      goto LABEL_11;
    }
    if (v18 == 0x7375656870726F4DLL && v19 == 0xED00006563696C53 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusSlice();
      sub_24255B800(&qword_2571FF4B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusSlice, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4C0;
      v25 = type metadata accessor for MorpheusSlice;
      goto LABEL_11;
    }
    if (v18 == 0x6E6F6974636E7546 && v19 == 0xEB00000000666544 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FunctionDef();
      sub_24255B800(&qword_2571FF4A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FunctionDef, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4B0;
      v25 = type metadata accessor for FunctionDef;
      goto LABEL_11;
    }
    if (v18 == 0x6665447373616C43 && v19 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ClassDef();
      sub_24255B800(&qword_2571FF498, 255, (uint64_t (*)(uint64_t))type metadata accessor for ClassDef, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF4A0;
      v25 = type metadata accessor for ClassDef;
      goto LABEL_11;
    }
    if (v18 == 0x7972616E55 && v19 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Unary();
      sub_24255B800(&qword_2571FF488, 255, (uint64_t (*)(uint64_t))type metadata accessor for Unary, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF490;
      v25 = type metadata accessor for Unary;
      goto LABEL_11;
    }
    if (v18 == 0x6573696152 && v19 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Raise();
      sub_24255B800(&qword_2571FF478, 255, (uint64_t (*)(uint64_t))type metadata accessor for Raise, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF480;
      v25 = type metadata accessor for Raise;
      goto LABEL_11;
    }
    if (v18 == 0x745364656E696F4ALL && v19 == 0xE900000000000072 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for JoinedStr();
      sub_24255B800(&qword_2571FF468, 255, (uint64_t (*)(uint64_t))type metadata accessor for JoinedStr, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF470;
      v25 = type metadata accessor for JoinedStr;
      goto LABEL_11;
    }
    if (v18 == 0x657474616D726F46 && v19 == 0xEE0065756C615664 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FormattedValue();
      sub_24255B800(&qword_2571FF458, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormattedValue, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF460;
      v25 = type metadata accessor for FormattedValue;
      goto LABEL_11;
    }
    if (v18 == 0x704F6C6F6F42 && v19 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BoolOp();
      sub_24255B800(&qword_2571FF448, 255, (uint64_t (*)(uint64_t))type metadata accessor for BoolOp, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
      v15 = v47;
      v24 = (unint64_t *)&unk_2571FF450;
      v25 = type metadata accessor for BoolOp;
      goto LABEL_11;
    }
    if (qword_2571FC5C8 != -1)
      swift_once();
    v31 = v41;
    v32 = __swift_project_value_buffer(v41, (uint64_t)qword_2571FFB10);
    v15 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v40, v32, v31);
    swift_bridgeObjectRetain();
    v33 = sub_24259F918();
    v34 = sub_24259FE70();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v47 = v36;
      *(_DWORD *)v35 = 136315138;
      v15 = (uint64_t)(v35 + 12);
      swift_bridgeObjectRetain();
      v46 = sub_24259B370(v18, v19, &v47);
      sub_24259FE94();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2422E0000, v33, v34, "Operation %s not supported yet", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v36, -1, -1);
      MEMORY[0x2426A88B8](v35, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
    sub_242554B60();
    swift_allocError();
    *v37 = 43;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
  }
  return v15;
}

uint64_t sub_24258E8C4(uint64_t a1, char a2)
{
  return sub_24258D15C(a1, a2, &qword_2571FE170);
}

uint64_t sub_24258E8E0(uint64_t a1, char a2)
{
  return sub_24258B968(a1, a2, &qword_2571FE418);
}

uint64_t sub_24258E8FC(uint64_t a1, char a2)
{
  return sub_24258B968(a1, a2, &qword_2571FE988);
}

uint64_t sub_24258E918(uint64_t a1, char a2)
{
  return sub_24258D15C(a1, a2, &qword_2571FECE0);
}

uint64_t sub_24258E934(uint64_t a1)
{
  return sub_24258E950(a1, &qword_2571FEE10);
}

uint64_t sub_24258E950(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint8_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v18;
  uint64_t v19;
  unint64_t *v21;
  uint64_t (*v22)();
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint8_t *v33;
  _BYTE *v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = sub_24259F930();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF438);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(a2);
  sub_242590F50();
  sub_2425A0194();
  if (!v2)
  {
    v37 = v13;
    v38 = a1;
    v39 = v10;
    LOBYTE(v41) = 0;
    v15 = sub_2425A01A0();
    v16 = v14;
    v36 = v9;
    if (v15 == 0x656D6E6769737341 && v14 == 0xEA0000000000746ELL)
    {
      swift_bridgeObjectRelease();
      v19 = v39;
      goto LABEL_9;
    }
    v18 = sub_2425A0254();
    v19 = v39;
    if ((v18 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      type metadata accessor for Assignment();
      sub_24255B800(&qword_2571FF5A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Assignment, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF5A8;
      v22 = type metadata accessor for Assignment;
LABEL_11:
      v23 = 255;
LABEL_12:
      sub_24255B800(v21, v23, (uint64_t (*)(uint64_t))v22, (uint64_t)&unk_2425C9138);
      return a1;
    }
    v24 = v15 == 0x7069726373627553 && v16 == 0xE900000000000074;
    if (v24 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Subscript();
      sub_24255B800(&qword_2571FF590, 255, (uint64_t (*)(uint64_t))type metadata accessor for Subscript, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF598;
      v22 = type metadata accessor for Subscript;
      goto LABEL_11;
    }
    v25 = v15 == 0x6563696F6843 && v16 == 0xE600000000000000;
    if (v25 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Choice();
      sub_24255B800(&qword_2571FF580, 255, (uint64_t (*)(uint64_t))type metadata accessor for Choice, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF588;
      v22 = type metadata accessor for Choice;
      goto LABEL_11;
    }
    v26 = v15 == 0x746E6174736E6F43 && v16 == 0xE800000000000000;
    if (v26 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Constant();
      sub_24255B800(&qword_2571FF570, 255, (uint64_t (*)(uint64_t))type metadata accessor for Constant, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF578;
      v22 = type metadata accessor for Constant;
      goto LABEL_11;
    }
    if (v15 == 1751343429 && v16 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Each();
      sub_24255B800(&qword_2571FF560, v27, (uint64_t (*)(uint64_t))type metadata accessor for Each, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF568;
      v22 = type metadata accessor for Each;
      goto LABEL_12;
    }
    if (v15 == 0x426C61636978654CLL && v16 == 0xEC0000006B636F6CLL || (v28 = v16, (sub_2425A0254() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for LexicalBlock();
      sub_24255B800((unint64_t *)&qword_2571FCE40, 255, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF558;
      v22 = type metadata accessor for LexicalBlock;
      goto LABEL_11;
    }
    if (v15 == 0x6E7275746552 && v16 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Return();
      sub_24255B800(&qword_2571FF548, 255, (uint64_t (*)(uint64_t))type metadata accessor for Return, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF550;
      v22 = type metadata accessor for Return;
      goto LABEL_11;
    }
    if (v15 == 0x73697261706D6F43 && v16 == 0xEA00000000006E6FLL || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comparison();
      sub_24255B800(&qword_2571FF538, 255, (uint64_t (*)(uint64_t))type metadata accessor for Comparison, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF540;
      v22 = type metadata accessor for Comparison;
      goto LABEL_11;
    }
    if (v15 == 0x704F6E6942 && v16 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BinOp();
      sub_24255B800(&qword_2571FF528, 255, (uint64_t (*)(uint64_t))type metadata accessor for BinOp, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF530;
      v22 = type metadata accessor for BinOp;
      goto LABEL_11;
    }
    if (v15 == 1819042115 && v16 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Call();
      sub_24255B800(&qword_2571FF518, 255, (uint64_t (*)(uint64_t))type metadata accessor for Call, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF520;
      v22 = type metadata accessor for Call;
      goto LABEL_11;
    }
    if (v15 == 1701667150 && v16 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Name();
      sub_24255B800(&qword_2571FF508, 255, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF510;
      v22 = type metadata accessor for Name;
      goto LABEL_11;
    }
    if (v15 == 0x7475626972747441 && v16 == 0xE900000000000065 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Attribute();
      sub_24255B800(&qword_2571FF4F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF500;
      v22 = type metadata accessor for Attribute;
      goto LABEL_11;
    }
    if (v15 == 0x64726F7779654BLL && v16 == 0xE700000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Keyword();
      sub_24255B800(&qword_2571FF4E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Keyword, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF4F0;
      v22 = type metadata accessor for Keyword;
      goto LABEL_11;
    }
    if (v15 == 0x7375656870726F4DLL && v16 == 0xED00007961727241 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusArray();
      sub_24255B800(&qword_2571FF4D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusArray, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF4E0;
      v22 = type metadata accessor for MorpheusArray;
      goto LABEL_11;
    }
    if (v15 == 0x7375656870726F4DLL && v16 == 0xEC00000074636944 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusDict();
      sub_24255B800(&qword_2571FF4C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusDict, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF4D0;
      v22 = type metadata accessor for MorpheusDict;
      goto LABEL_11;
    }
    if (v15 == 0x7375656870726F4DLL && v16 == 0xED00006563696C53 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusSlice();
      sub_24255B800(&qword_2571FF4B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusSlice, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF4C0;
      v22 = type metadata accessor for MorpheusSlice;
      goto LABEL_11;
    }
    if (v15 == 0x6E6F6974636E7546 && v16 == 0xEB00000000666544 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FunctionDef();
      sub_24255B800(&qword_2571FF4A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FunctionDef, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF4B0;
      v22 = type metadata accessor for FunctionDef;
      goto LABEL_11;
    }
    if (v15 == 0x6665447373616C43 && v16 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ClassDef();
      sub_24255B800(&qword_2571FF498, 255, (uint64_t (*)(uint64_t))type metadata accessor for ClassDef, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF4A0;
      v22 = type metadata accessor for ClassDef;
      goto LABEL_11;
    }
    if (v15 == 0x7972616E55 && v16 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Unary();
      sub_24255B800(&qword_2571FF488, 255, (uint64_t (*)(uint64_t))type metadata accessor for Unary, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF490;
      v22 = type metadata accessor for Unary;
      goto LABEL_11;
    }
    if (v15 == 0x6573696152 && v16 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Raise();
      sub_24255B800(&qword_2571FF478, 255, (uint64_t (*)(uint64_t))type metadata accessor for Raise, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF480;
      v22 = type metadata accessor for Raise;
      goto LABEL_11;
    }
    if (v15 == 0x745364656E696F4ALL && v16 == 0xE900000000000072 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for JoinedStr();
      sub_24255B800(&qword_2571FF468, 255, (uint64_t (*)(uint64_t))type metadata accessor for JoinedStr, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF470;
      v22 = type metadata accessor for JoinedStr;
      goto LABEL_11;
    }
    if (v15 == 0x657474616D726F46 && v16 == 0xEE0065756C615664 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FormattedValue();
      sub_24255B800(&qword_2571FF458, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormattedValue, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF460;
      v22 = type metadata accessor for FormattedValue;
      goto LABEL_11;
    }
    if (v15 == 0x704F6C6F6F42 && v16 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BoolOp();
      sub_24255B800(&qword_2571FF448, 255, (uint64_t (*)(uint64_t))type metadata accessor for BoolOp, (uint64_t)&unk_2425C9154);
      sub_2425A01D0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
      a1 = v41;
      v21 = (unint64_t *)&unk_2571FF450;
      v22 = type metadata accessor for BoolOp;
      goto LABEL_11;
    }
    if (qword_2571FC5C8 != -1)
      swift_once();
    v29 = __swift_project_value_buffer(v5, (uint64_t)qword_2571FFB10);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v5);
    swift_bridgeObjectRetain();
    a1 = (uint64_t)v8;
    v30 = sub_24259F918();
    v31 = sub_24259FE70();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v41 = v38;
      v37 = v32;
      *(_DWORD *)v32 = 136315138;
      v35 = v32 + 4;
      swift_bridgeObjectRetain();
      v40 = sub_24259B370(v15, v28, &v41);
      sub_24259FE94();
      swift_bridgeObjectRelease_n();
      v33 = v37;
      _os_log_impl(&dword_2422E0000, v30, v31, "Operation %s not supported yet", v37, 0xCu);
      a1 = v38;
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](a1, -1, -1);
      MEMORY[0x2426A88B8](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_242554B60();
    swift_allocError();
    *v34 = 43;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v36);
  }
  return a1;
}

uint64_t sub_24259003C(uint64_t a1, char a2)
{
  return sub_24258D15C(a1, a2, &qword_2571FF130);
}

uint64_t sub_242590058(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24255DCD0(*a1, *a2);
}

uint64_t sub_242590064()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_2425900FC()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_242590170()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_242590204@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242591138();
  *a1 = result;
  return result;
}

void sub_242590230(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x656D614E6D657469;
  if (v2 != 1)
  {
    v5 = 2036625250;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x65636E6575716573;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_242590288()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656D614E6D657469;
  if (*v0 != 1)
    v1 = 2036625250;
  if (*v0)
    return v1;
  else
    return 0x65636E6575716573;
}

uint64_t sub_2425902DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_242591138();
  *a1 = result;
  return result;
}

uint64_t sub_242590300()
{
  sub_242590F0C();
  return sub_2425A0344();
}

uint64_t sub_242590328()
{
  sub_242590F0C();
  return sub_2425A0350();
}

uint64_t sub_242590350(_QWORD *a1)
{
  swift_allocObject();
  return sub_242590398(a1);
}

uint64_t sub_242590398(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;

  v3 = (uint64_t)v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF428);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242590F0C();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Each();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_24258B968((uint64_t)v8, 0, &qword_2571FF428);
    v1[6] = v10;
    v1[7] = sub_24258B968((uint64_t)v8, 1, &qword_2571FF428);
    v1[8] = v11;
    v14 = 2;
    type metadata accessor for LexicalBlock();
    sub_24255B800((unint64_t *)&qword_2571FCE40, 255, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
    sub_2425A01D0();
    v1[9] = v13[0];
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v13);
    v3 = sub_24259BC74(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_242590600@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *boxed_opaque_existential_0;
  uint64_t inited;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _OWORD *v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  _QWORD v61[5];
  __int128 v62;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v65[4];
  uint64_t v66;

  v3 = v2;
  v4 = v1;
  v57 = a1;
  v5 = v1[6];
  ObjectType = swift_getObjectType();
  v7 = MEMORY[0x2426A8918](v1 + 3);
  v8 = v1[4];
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  v10 = v1[8];
  v11 = swift_getObjectType();
  v12 = MEMORY[0x2426A8918](v1 + 3);
  v13 = v1[4];
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  v14(v12, v13, v11, v10);
  swift_unknownObjectRelease();
  v15 = v1[9];
  MEMORY[0x2426A8918](v4 + 3);
  *(_QWORD *)(v15 + 32) = v4[4];
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  v16 = v4[6];
  v17 = swift_getObjectType();
  v18 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v16 + 64);
  swift_unknownObjectRetain();
  v18(v61, v17, v16);
  if (v3)
    return swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_2425918A4((uint64_t)&v62);
  sub_242557D30((uint64_t)v61);
  if (!AssociatedTypeWitness)
  {
    sub_242590ECC((uint64_t)&v62);
LABEL_6:
    if (qword_2571FC5C8 != -1)
      swift_once();
    v23 = sub_24259F930();
    __swift_project_value_buffer(v23, (uint64_t)qword_2571FFB10);
    swift_retain_n();
    v24 = sub_24259F918();
    v25 = sub_24259FE70();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v65[0] = v66;
      *(_DWORD *)v26 = 136315650;
      v27 = v4[5];
      swift_getObjectType();
      *(_QWORD *)&v62 = v27;
      v28 = sub_2425A01E8();
      *(_QWORD *)&v62 = sub_24259B370(v28, v29, v65);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      v30 = v4[7];
      swift_getObjectType();
      *(_QWORD *)&v62 = v30;
      v31 = sub_2425A01E8();
      *(_QWORD *)&v62 = sub_24259B370(v31, v32, v65);
      sub_24259FE94();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 22) = 2048;
      v33 = v4[2];
      swift_release();
      *(_QWORD *)&v62 = v33;
      sub_24259FE94();
      swift_release();
      _os_log_impl(&dword_2422E0000, v24, v25, "Each> %s did not return Sequence or %s did not return String. line %ld", (uint8_t *)v26, 0x20u);
      v34 = v66;
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v34, -1, -1);
      MEMORY[0x2426A88B8](v26, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_242554B60();
    swift_allocError();
    *v51 = 40;
    return swift_willThrow();
  }
  sub_24251DEC8(&v62, (uint64_t)v65);
  v20 = v4[8];
  v21 = swift_getObjectType();
  v22 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v20 + 64);
  swift_unknownObjectRetain();
  v22(&v62, v21, v20);
  swift_unknownObjectRelease();
  v55 = sub_2425918B0();
  v36 = v35;
  sub_242557D30((uint64_t)&v62);
  v56 = v36;
  if (!v36)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    goto LABEL_6;
  }
  v66 = 0;
  v54 = v4;
  v37 = __swift_project_boxed_opaque_existential_1(v65, v65[3]);
  MEMORY[0x24BDAC7A8](v37);
  (*(void (**)(char *))(v39 + 16))((char *)&v53 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v62);
  sub_24259FC0C();
  v53 = xmmword_2425C4B60;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v62, AssociatedTypeWitness);
    v40 = swift_getAssociatedTypeWitness();
    v41 = sub_24259FE7C();
    v42 = *(_QWORD *)(v41 - 8);
    MEMORY[0x24BDAC7A8](v41);
    v44 = (char *)&v53 - v43;
    sub_24259FE88();
    v45 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v44, 1, v40) == 1)
      break;
    *((_QWORD *)&v60 + 1) = v40;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v59);
    (*(void (**)(uint64_t *, char *, uint64_t))(v45 + 32))(boxed_opaque_existential_0, v44, v40);
    sub_2425264B4(&v59, v58);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FE008);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v53;
    v48 = v56;
    *(_QWORD *)(inited + 32) = v55;
    *(_QWORD *)(inited + 40) = v48;
    sub_242526478((uint64_t)v58, inited + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v49 = sub_2425583E8(inited);
    v50 = v66;
    sub_242598FD4(v49);
    if (v50)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    }
    sub_242598C7C((uint64_t)v61);
    v66 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    sub_242557D30((uint64_t)v61);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  v59 = 0u;
  v60 = 0u;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  v52 = (_OWORD *)v57;
  *(_BYTE *)(v57 + 32) = 0;
  *v52 = 0u;
  v52[1] = 0u;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
}

uint64_t sub_242590D04()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_24259FF84();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  sub_2425A01E8();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_getObjectType();
  sub_2425A01E8();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_retain();
  v0 = sub_242598E28();
  v2 = v1;
  swift_release();
  sub_242585A04(v0, v2);
  swift_bridgeObjectRelease();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  sub_24259FB70();
  return 544370534;
}

uint64_t sub_242590E4C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_242590E70()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Each()
{
  return objc_opt_self();
}

uint64_t sub_242590ECC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF420);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_242590F0C()
{
  unint64_t result;

  result = qword_2571FF430;
  if (!qword_2571FF430)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8CC8, &type metadata for Each.EachCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF430);
  }
  return result;
}

unint64_t sub_242590F50()
{
  unint64_t result;

  result = qword_2571FF440;
  if (!qword_2571FF440)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C9294, &type metadata for MetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF440);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Each.EachCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_242590FE0 + 4 * byte_2425C8B9D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_242591014 + 4 * byte_2425C8B98[v4]))();
}

uint64_t sub_242591014(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24259101C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242591024);
  return result;
}

uint64_t sub_242591030(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242591038);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24259103C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242591044(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Each.EachCodingKeys()
{
  return &type metadata for Each.EachCodingKeys;
}

unint64_t sub_242591064()
{
  unint64_t result;

  result = qword_2571FF5B0;
  if (!qword_2571FF5B0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8CA0, &type metadata for Each.EachCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF5B0);
  }
  return result;
}

unint64_t sub_2425910AC()
{
  unint64_t result;

  result = qword_2571FF5B8;
  if (!qword_2571FF5B8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8BD8, &type metadata for Each.EachCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF5B8);
  }
  return result;
}

unint64_t sub_2425910F4()
{
  unint64_t result;

  result = qword_2571FF5C0;
  if (!qword_2571FF5C0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8C00, &type metadata for Each.EachCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF5C0);
  }
  return result;
}

uint64_t sub_242591138()
{
  unint64_t v0;

  v0 = sub_2425A017C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

_OWORD *sub_242591180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[40];

  v4 = v3;
  v8 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24259FF48();
  swift_beginAccess();
  v9 = *(_QWORD *)(v8 + 16);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = sub_24255A0C0((uint64_t)v19);
    if ((v11 & 1) != 0)
    {
      sub_242526478(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    swift_release();
  }
  sub_24255BA80((uint64_t)v19);
  if (*((_QWORD *)&v18 + 1))
    return sub_2425264B4(&v17, (_OWORD *)a3);
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 40);
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_24255A05C(a1, a2);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return (_OWORD *)sub_24256FB04((uint64_t)&v17);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 24) = type metadata accessor for Function();
  *(_QWORD *)a3 = v16;
  return (_OWORD *)sub_24256FB04((uint64_t)&v17);
}

uint64_t sub_24259131C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v14;
  __int128 v15;
  _BYTE v16[40];

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24259FF48();
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 16);
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = sub_24255A0C0((uint64_t)v16);
    if ((v9 & 1) != 0)
    {
      sub_242526478(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v14);
    }
    else
    {
      v14 = 0u;
      v15 = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    swift_release();
  }
  sub_24255BA80((uint64_t)v16);
  v10 = *((_QWORD *)&v15 + 1);
  sub_24256FB04((uint64_t)&v14);
  if (v10)
  {
    v11 = 1;
  }
  else
  {
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24255A05C(a1, a2);
      v11 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = 0;
    }
  }
  return v11 & 1;
}

uint64_t sub_24259147C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[32];
  uint64_t v5;
  _BYTE v6[32];
  _BYTE v7[40];

  sub_242526478(a1, (uint64_t)v7);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    swift_retain();
    sub_24259FF48();
    sub_242526478(a2, (uint64_t)v6);
    sub_24255BA44((uint64_t)v7, (uint64_t)&v5);
    sub_24256F0C4((uint64_t)v6, (uint64_t)v4);
    swift_beginAccess();
    sub_242558040((uint64_t)v4, (uint64_t)&v5);
    swift_endAccess();
    sub_24255BA80((uint64_t)v7);
    sub_24256FB04((uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_242591570()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LexicalContext()
{
  return objc_opt_self();
}

uint64_t sub_2425915C4(uint64_t a1, uint64_t a2)
{
  return sub_24259147C(a1, a2);
}

_OWORD *sub_2425915EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_242591180(a1, a2, a3);
}

uint64_t sub_24259160C(uint64_t a1, uint64_t a2)
{
  return sub_24259131C(a1, a2) & 1;
}

double sub_242591630@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  _BYTE v4[32];
  char v5;
  _BYTE v6[32];

  sub_24255F890(v1, (uint64_t)v4);
  if (v5)
  {
    sub_242557D30((uint64_t)v4);
    sub_24255F890(v1, (uint64_t)v4);
    if (v5 != 1)
    {
      sub_242557D30((uint64_t)v4);
      goto LABEL_6;
    }
  }
  sub_24255F8CC((uint64_t)v4, (uint64_t)v6, &qword_2571FC790);
  sub_24255F8CC((uint64_t)v6, (uint64_t)v4, &qword_2571FC790);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double sub_2425916F0@<D0>(uint64_t a1@<X8>)
{
  return sub_242591708(&qword_2571FF848, a1);
}

double sub_2425916FC@<D0>(uint64_t a1@<X8>)
{
  return sub_242591708(&qword_2571FF840, a1);
}

double sub_242591708@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  _BYTE v6[32];
  char v7;
  _BYTE v8[32];

  sub_24255F890(v2, (uint64_t)v6);
  if (v7)
  {
    sub_242557D30((uint64_t)v6);
    sub_24255F890(v2, (uint64_t)v6);
    if (v7 != 1)
    {
      sub_242557D30((uint64_t)v6);
      goto LABEL_6;
    }
  }
  sub_24255F8CC((uint64_t)v6, (uint64_t)v8, &qword_2571FC790);
  sub_24255F8CC((uint64_t)v8, (uint64_t)v6, &qword_2571FC790);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_2425917DC()
{
  uint64_t v0;
  _BYTE v2[32];
  char v3;
  _BYTE v4[39];
  unsigned __int8 v5;

  sub_24255F890(v0, (uint64_t)v2);
  if (v3 && (sub_242557D30((uint64_t)v2), sub_24255F890(v0, (uint64_t)v2), v3 != 1))
  {
    sub_242557D30((uint64_t)v2);
  }
  else
  {
    sub_24255F8CC((uint64_t)v2, (uint64_t)v4, &qword_2571FC790);
    sub_24255F8CC((uint64_t)v4, (uint64_t)v2, &qword_2571FC790);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    if ((swift_dynamicCast() & 1) != 0)
      return v5;
  }
  return 2;
}

double sub_242591898@<D0>(uint64_t a1@<X8>)
{
  return sub_242591708(&qword_2571FF858, a1);
}

double sub_2425918A4@<D0>(uint64_t a1@<X8>)
{
  return sub_242591708(&qword_2571FF838, a1);
}

uint64_t sub_2425918B0()
{
  uint64_t v0;
  _BYTE v2[32];
  char v3;
  _BYTE v4[32];
  uint64_t v5;
  uint64_t v6;

  sub_24255F890(v0, (uint64_t)v2);
  if (v3 && (sub_242557D30((uint64_t)v2), sub_24255F890(v0, (uint64_t)v2), v3 != 1))
  {
    sub_242557D30((uint64_t)v2);
  }
  else
  {
    sub_24255F8CC((uint64_t)v2, (uint64_t)v4, &qword_2571FC790);
    sub_24255F8CC((uint64_t)v4, (uint64_t)v2, &qword_2571FC790);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    if ((swift_dynamicCast() & 1) != 0)
      return v5;
  }
  v5 = 0;
  v6 = 0;
  return v5;
}

uint64_t sub_242591968()
{
  uint64_t v0;
  _BYTE v2[32];
  char v3;
  _BYTE v4[32];
  uint64_t v5;

  sub_24255F890(v0, (uint64_t)v2);
  if (v3 && (sub_242557D30((uint64_t)v2), sub_24255F890(v0, (uint64_t)v2), v3 != 1))
  {
    sub_242557D30((uint64_t)v2);
  }
  else
  {
    sub_24255F8CC((uint64_t)v2, (uint64_t)v4, &qword_2571FC790);
    sub_24255F8CC((uint64_t)v4, (uint64_t)v2, &qword_2571FC790);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    type metadata accessor for Function();
    if ((swift_dynamicCast() & 1) != 0)
      return v5;
  }
  return 0;
}

double sub_242591A28@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  _BYTE v4[32];
  char v5;
  _BYTE v6[32];

  sub_24255F890(v1, (uint64_t)v4);
  if (v5)
  {
    sub_242557D30((uint64_t)v4);
    sub_24255F890(v1, (uint64_t)v4);
    if (v5 != 1)
    {
      sub_242557D30((uint64_t)v4);
      goto LABEL_6;
    }
  }
  sub_24255F8CC((uint64_t)v4, (uint64_t)v6, &qword_2571FC790);
  sub_24255F8CC((uint64_t)v6, (uint64_t)v4, &qword_2571FC790);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    *(_QWORD *)(a1 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_242591AEC()
{
  uint64_t v0;
  _BYTE v2[32];
  char v3;
  _BYTE v4[32];
  uint64_t v5;

  sub_24255F890(v0, (uint64_t)v2);
  if (v3 && (sub_242557D30((uint64_t)v2), sub_24255F890(v0, (uint64_t)v2), v3 != 1))
  {
    sub_242557D30((uint64_t)v2);
  }
  else
  {
    sub_24255F8CC((uint64_t)v2, (uint64_t)v4, &qword_2571FC790);
    sub_24255F8CC((uint64_t)v4, (uint64_t)v2, &qword_2571FC790);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF850);
    if ((swift_dynamicCast() & 1) != 0)
      return v5;
  }
  return 0;
}

double sub_242591BB0@<D0>(uint64_t a1@<X8>)
{
  return sub_242591708(&qword_2571FD640, a1);
}

uint64_t sub_242591BBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_5:
      sub_24259FB64();
      return sub_24259FB7C();
    }
    __break(1u);
  }
  if ((v1 & 0xF00000000000000) != 0)
    goto LABEL_5;
  __break(1u);
  return result;
}

uint64_t sub_242591C10(uint64_t a1, char a2)
{
  return sub_242591C80(a1, a2, &qword_2571FD268);
}

uint64_t sub_242591C2C(uint64_t a1, char a2)
{
  return sub_242593E4C(a1, a2, &qword_2571FDD40);
}

_QWORD *sub_242591C48(uint64_t a1)
{
  return sub_242596054(a1, &qword_2571FE2A0);
}

uint64_t sub_242591C64(uint64_t a1, char a2)
{
  return sub_242591C80(a1, a2, &qword_2571FE578);
}

uint64_t sub_242591C80(uint64_t a1, char a2, uint64_t *a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t (*v44)();
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint8_t *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  uint64_t v78;
  _QWORD v79[3];
  uint64_t v80;
  char v81;

  v4 = a2 & 1;
  v5 = sub_24259F930();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF438);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = v74;
  sub_2425A0188();
  if (!v13)
  {
    v73 = (uint8_t *)v9;
    v74 = v12;
    v71 = v8;
    v72 = v5;
    sub_24251DE5C((uint64_t)v79, (uint64_t)v77);
    __swift_project_boxed_opaque_existential_1(v79, v80);
    v14 = sub_2425A0218();
    v9 = MEMORY[0x24BEE4AF8];
    if ((v14 & 1) != 0)
    {
LABEL_3:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
      return v9;
    }
    v16 = v10;
    v17 = v73;
    v70 = v6;
    while (1)
    {
      v18 = v16;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      if ((sub_2425A0218() & 1) != 0)
        goto LABEL_3;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v77, v78);
      sub_242590F50();
      sub_2425A0200();
      LOBYTE(v76) = 0;
      v20 = sub_2425A01A0();
      v21 = v19;
      v22 = v20 == 0x656D6E6769737341 && v19 == 0xEA0000000000746ELL;
      if (v22 || (sub_2425A0254() & 1) != 0)
        break;
      if (v20 == 0x7069726373627553 && v21 == 0xE900000000000074 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Subscript();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF590, 255, (uint64_t (*)(uint64_t))type metadata accessor for Subscript, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v25 = *(_QWORD *)(v9 + 16);
        v32 = *(_QWORD *)(v9 + 24);
        v26 = v25 + 1;
        if (v25 >= v32 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v32 > 1), v25 + 1, 1, (_QWORD *)v9);
        v27 = (unint64_t *)&unk_2571FF598;
        v28 = 255;
        v29 = type metadata accessor for Subscript;
        goto LABEL_17;
      }
      if (v20 == 0x6563696F6843 && v21 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Choice();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF580, 255, (uint64_t (*)(uint64_t))type metadata accessor for Choice, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v25 = *(_QWORD *)(v9 + 16);
        v33 = *(_QWORD *)(v9 + 24);
        v26 = v25 + 1;
        if (v25 >= v33 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v33 > 1), v25 + 1, 1, (_QWORD *)v9);
        v27 = (unint64_t *)&unk_2571FF588;
        v28 = 255;
        v29 = type metadata accessor for Choice;
        goto LABEL_17;
      }
      if (v20 == 0x746E6174736E6F43 && v21 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Constant();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF570, 255, (uint64_t (*)(uint64_t))type metadata accessor for Constant, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v25 = *(_QWORD *)(v9 + 16);
        v34 = *(_QWORD *)(v9 + 24);
        v26 = v25 + 1;
        if (v25 >= v34 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v34 > 1), v25 + 1, 1, (_QWORD *)v9);
        v27 = (unint64_t *)&unk_2571FF578;
        v28 = 255;
        v29 = type metadata accessor for Constant;
        goto LABEL_17;
      }
      if (v20 == 1751343429 && v21 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Each();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF560, 255, (uint64_t (*)(uint64_t))type metadata accessor for Each, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v25 = *(_QWORD *)(v9 + 16);
        v35 = *(_QWORD *)(v9 + 24);
        v26 = v25 + 1;
        if (v25 >= v35 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v35 > 1), v25 + 1, 1, (_QWORD *)v9);
        v27 = (unint64_t *)&unk_2571FF568;
        v28 = 255;
        v29 = type metadata accessor for Each;
        goto LABEL_17;
      }
      if (v20 == 0x426C61636978654CLL && v21 == 0xEC0000006B636F6CLL || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for LexicalBlock();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800((unint64_t *)&qword_2571FCE40, v36, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v25 = *(_QWORD *)(v9 + 16);
        v37 = *(_QWORD *)(v9 + 24);
        v26 = v25 + 1;
        if (v25 >= v37 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v37 > 1), v25 + 1, 1, (_QWORD *)v9);
        v27 = (unint64_t *)&unk_2571FF558;
        v29 = type metadata accessor for LexicalBlock;
        goto LABEL_17;
      }
      if (v20 == 0x6E7275746552 && v21 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Return();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF548, 255, (uint64_t (*)(uint64_t))type metadata accessor for Return, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v25 = *(_QWORD *)(v9 + 16);
        v38 = *(_QWORD *)(v9 + 24);
        v26 = v25 + 1;
        if (v25 >= v38 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v38 > 1), v25 + 1, 1, (_QWORD *)v9);
        v27 = (unint64_t *)&unk_2571FF550;
        v28 = 255;
        v29 = type metadata accessor for Return;
        goto LABEL_17;
      }
      if (v20 == 0x73697261706D6F43 && v21 == 0xEA00000000006E6FLL || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Comparison();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF538, 255, (uint64_t (*)(uint64_t))type metadata accessor for Comparison, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v40 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v40 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v40 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF540;
        v44 = type metadata accessor for Comparison;
      }
      else if (v20 == 0x704F6E6942 && v21 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for BinOp();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF528, 255, (uint64_t (*)(uint64_t))type metadata accessor for BinOp, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v47 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v47 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v47 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF530;
        v44 = type metadata accessor for BinOp;
      }
      else if (v20 == 1819042115 && v21 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Call();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF518, 255, (uint64_t (*)(uint64_t))type metadata accessor for Call, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v48 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v48 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v48 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF520;
        v44 = type metadata accessor for Call;
      }
      else if (v20 == 1701667150 && v21 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Name();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF508, 255, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v49 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v49 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v49 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF510;
        v44 = type metadata accessor for Name;
      }
      else if (v20 == 0x7475626972747441 && v21 == 0xE900000000000065 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Attribute();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v50 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v50 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v50 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF500;
        v44 = type metadata accessor for Attribute;
      }
      else if (v20 == 0x64726F7779654BLL && v21 == 0xE700000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Keyword();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Keyword, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v51 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v51 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v51 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF4F0;
        v44 = type metadata accessor for Keyword;
      }
      else if (v20 == 0x7375656870726F4DLL && v21 == 0xED00007961727241 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MorpheusArray();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusArray, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v52 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v52 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v52 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF4E0;
        v44 = type metadata accessor for MorpheusArray;
      }
      else if (v20 == 0x7375656870726F4DLL && v21 == 0xEC00000074636944 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MorpheusDict();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusDict, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v53 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v53 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v53 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF4D0;
        v44 = type metadata accessor for MorpheusDict;
      }
      else if (v20 == 0x7375656870726F4DLL && v21 == 0xED00006563696C53 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MorpheusSlice();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusSlice, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v54 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v54 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v54 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF4C0;
        v44 = type metadata accessor for MorpheusSlice;
      }
      else if (v20 == 0x6E6F6974636E7546 && v21 == 0xEB00000000666544 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for FunctionDef();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FunctionDef, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v55 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v55 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v55 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF4B0;
        v44 = type metadata accessor for FunctionDef;
      }
      else if (v20 == 0x6665447373616C43 && v21 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for ClassDef();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF498, 255, (uint64_t (*)(uint64_t))type metadata accessor for ClassDef, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v56 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v56 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v56 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF4A0;
        v44 = type metadata accessor for ClassDef;
      }
      else if (v20 == 0x7972616E55 && v21 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Unary();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF488, 255, (uint64_t (*)(uint64_t))type metadata accessor for Unary, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v57 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v57 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v57 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF490;
        v44 = type metadata accessor for Unary;
      }
      else if (v20 == 0x6573696152 && v21 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Raise();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF478, 255, (uint64_t (*)(uint64_t))type metadata accessor for Raise, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v58 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v58 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v58 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF480;
        v44 = type metadata accessor for Raise;
      }
      else if (v20 == 0x745364656E696F4ALL && v21 == 0xE900000000000072 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for JoinedStr();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF468, 255, (uint64_t (*)(uint64_t))type metadata accessor for JoinedStr, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v59 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v59 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v59 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF470;
        v44 = type metadata accessor for JoinedStr;
      }
      else if (v20 == 0x657474616D726F46 && v21 == 0xEE0065756C615664 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for FormattedValue();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF458, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormattedValue, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v60 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v60 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v60 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF460;
        v44 = type metadata accessor for FormattedValue;
      }
      else
      {
        if ((v20 != 0x704F6C6F6F42 || v21 != 0xE600000000000000) && (sub_2425A0254() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          if (qword_2571FC5C8 != -1)
            swift_once();
          v62 = v72;
          v63 = __swift_project_value_buffer(v72, (uint64_t)qword_2571FFB10);
          (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v71, v63, v62);
          swift_bridgeObjectRetain();
          v64 = sub_24259F918();
          v65 = sub_24259FE70();
          v9 = v65;
          if (os_log_type_enabled(v64, v65))
          {
            v66 = (uint8_t *)swift_slowAlloc();
            v67 = swift_slowAlloc();
            v76 = v67;
            *(_DWORD *)v66 = 136315138;
            v73 = v66 + 4;
            swift_bridgeObjectRetain();
            v75 = sub_24259B370(v20, v21, &v76);
            sub_24259FE94();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_2422E0000, v64, (os_log_type_t)v9, "Operation %s not supported yet", v66, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2426A88B8](v67, -1, -1);
            MEMORY[0x2426A88B8](v66, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
          sub_242554B60();
          swift_allocError();
          *v68 = 43;
          swift_willThrow();
          (*(void (**)(char *, uint8_t *))(v18 + 8))(v74, v17);
          goto LABEL_3;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for BoolOp();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF448, 255, (uint64_t (*)(uint64_t))type metadata accessor for BoolOp, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
        v41 = *(_QWORD *)(v9 + 16);
        v61 = *(_QWORD *)(v9 + 24);
        v42 = v41 + 1;
        if (v41 >= v61 >> 1)
          v9 = (uint64_t)sub_24251C650((_QWORD *)(v61 > 1), v41 + 1, 1, (_QWORD *)v9);
        v43 = (unint64_t *)&unk_2571FF450;
        v44 = type metadata accessor for BoolOp;
      }
      v45 = sub_24255B800(v43, 255, (uint64_t (*)(uint64_t))v44, (uint64_t)&unk_2425C9138);
      *(_QWORD *)(v9 + 16) = v42;
      v46 = v9 + 16 * v41;
      *(_QWORD *)(v46 + 32) = v39;
      *(_QWORD *)(v46 + 40) = v45;
      v16 = v18;
      (*(void (**)(char *, uint8_t *))(v18 + 8))(v74, v17);
LABEL_18:
      __swift_project_boxed_opaque_existential_1(v79, v80);
      if ((sub_2425A0218() & 1) != 0)
        goto LABEL_3;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Assignment();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
    sub_24255B800(&qword_2571FF5A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Assignment, (uint64_t)&unk_2425C9154);
    sub_2425A020C();
    v23 = v76;
    v16 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
    v25 = *(_QWORD *)(v9 + 16);
    v24 = *(_QWORD *)(v9 + 24);
    v26 = v25 + 1;
    if (v25 >= v24 >> 1)
      v9 = (uint64_t)sub_24251C650((_QWORD *)(v24 > 1), v25 + 1, 1, (_QWORD *)v9);
    v27 = (unint64_t *)&unk_2571FF5A8;
    v28 = 255;
    v29 = type metadata accessor for Assignment;
LABEL_17:
    v30 = sub_24255B800(v27, v28, (uint64_t (*)(uint64_t))v29, (uint64_t)&unk_2425C9138);
    *(_QWORD *)(v9 + 16) = v26;
    v31 = v9 + 16 * v25;
    *(_QWORD *)(v31 + 32) = v23;
    *(_QWORD *)(v31 + 40) = v30;
    (*(void (**)(char *, uint8_t *))(v16 + 8))(v74, v17);
    goto LABEL_18;
  }
  return v9;
}

uint64_t sub_242593E30(uint64_t a1, char a2)
{
  return sub_242593E4C(a1, a2, &qword_2571FE7D0);
}

uint64_t sub_242593E4C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t (*v44)();
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint8_t *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  uint64_t v78;
  _QWORD v79[3];
  uint64_t v80;
  char v81;

  v5 = sub_24259F930();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF438);
  v10 = *(uint8_t **)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = a2;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = v74;
  sub_2425A0188();
  if (!v13)
  {
    v72 = v5;
    v73 = v10;
    v70 = v6;
    v71 = v8;
    v74 = v12;
    sub_24251DE5C((uint64_t)v79, (uint64_t)v77);
    __swift_project_boxed_opaque_existential_1(v79, v80);
    v14 = sub_2425A0218();
    v5 = MEMORY[0x24BEE4AF8];
    if ((v14 & 1) != 0)
    {
LABEL_3:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
      return v5;
    }
    v16 = v73;
    v17 = v9;
    while (1)
    {
      v18 = v16;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      if ((sub_2425A0218() & 1) != 0)
        goto LABEL_3;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v77, v78);
      sub_242590F50();
      sub_2425A0200();
      LOBYTE(v76) = 0;
      v20 = sub_2425A01A0();
      v21 = v19;
      v22 = v20 == 0x656D6E6769737341 && v19 == 0xEA0000000000746ELL;
      if (v22 || (sub_2425A0254() & 1) != 0)
        break;
      if (v20 == 0x7069726373627553 && v21 == 0xE900000000000074 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Subscript();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF590, 255, (uint64_t (*)(uint64_t))type metadata accessor for Subscript, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v25 = *(_QWORD *)(v5 + 16);
        v32 = *(_QWORD *)(v5 + 24);
        v26 = v25 + 1;
        if (v25 >= v32 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v32 > 1), v25 + 1, 1, (_QWORD *)v5);
        v27 = (unint64_t *)&unk_2571FF598;
        v28 = 255;
        v29 = type metadata accessor for Subscript;
        goto LABEL_17;
      }
      if (v20 == 0x6563696F6843 && v21 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Choice();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF580, 255, (uint64_t (*)(uint64_t))type metadata accessor for Choice, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v25 = *(_QWORD *)(v5 + 16);
        v33 = *(_QWORD *)(v5 + 24);
        v26 = v25 + 1;
        if (v25 >= v33 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v33 > 1), v25 + 1, 1, (_QWORD *)v5);
        v27 = (unint64_t *)&unk_2571FF588;
        v28 = 255;
        v29 = type metadata accessor for Choice;
        goto LABEL_17;
      }
      if (v20 == 0x746E6174736E6F43 && v21 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Constant();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF570, 255, (uint64_t (*)(uint64_t))type metadata accessor for Constant, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v25 = *(_QWORD *)(v5 + 16);
        v34 = *(_QWORD *)(v5 + 24);
        v26 = v25 + 1;
        if (v25 >= v34 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v34 > 1), v25 + 1, 1, (_QWORD *)v5);
        v27 = (unint64_t *)&unk_2571FF578;
        v28 = 255;
        v29 = type metadata accessor for Constant;
        goto LABEL_17;
      }
      if (v20 == 1751343429 && v21 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Each();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF560, 255, (uint64_t (*)(uint64_t))type metadata accessor for Each, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v25 = *(_QWORD *)(v5 + 16);
        v35 = *(_QWORD *)(v5 + 24);
        v26 = v25 + 1;
        if (v25 >= v35 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v35 > 1), v25 + 1, 1, (_QWORD *)v5);
        v27 = (unint64_t *)&unk_2571FF568;
        v28 = 255;
        v29 = type metadata accessor for Each;
        goto LABEL_17;
      }
      if (v20 == 0x426C61636978654CLL && v21 == 0xEC0000006B636F6CLL || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for LexicalBlock();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800((unint64_t *)&qword_2571FCE40, v36, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v25 = *(_QWORD *)(v5 + 16);
        v37 = *(_QWORD *)(v5 + 24);
        v26 = v25 + 1;
        if (v25 >= v37 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v37 > 1), v25 + 1, 1, (_QWORD *)v5);
        v27 = (unint64_t *)&unk_2571FF558;
        v29 = type metadata accessor for LexicalBlock;
        goto LABEL_17;
      }
      if (v20 == 0x6E7275746552 && v21 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Return();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF548, 255, (uint64_t (*)(uint64_t))type metadata accessor for Return, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v23 = v76;
        v16 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v25 = *(_QWORD *)(v5 + 16);
        v38 = *(_QWORD *)(v5 + 24);
        v26 = v25 + 1;
        if (v25 >= v38 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v38 > 1), v25 + 1, 1, (_QWORD *)v5);
        v27 = (unint64_t *)&unk_2571FF550;
        v28 = 255;
        v29 = type metadata accessor for Return;
        goto LABEL_17;
      }
      if (v20 == 0x73697261706D6F43 && v21 == 0xEA00000000006E6FLL || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Comparison();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF538, 255, (uint64_t (*)(uint64_t))type metadata accessor for Comparison, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v40 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v40 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v40 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF540;
        v44 = type metadata accessor for Comparison;
      }
      else if (v20 == 0x704F6E6942 && v21 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for BinOp();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF528, 255, (uint64_t (*)(uint64_t))type metadata accessor for BinOp, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v47 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v47 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v47 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF530;
        v44 = type metadata accessor for BinOp;
      }
      else if (v20 == 1819042115 && v21 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Call();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF518, 255, (uint64_t (*)(uint64_t))type metadata accessor for Call, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v48 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v48 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v48 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF520;
        v44 = type metadata accessor for Call;
      }
      else if (v20 == 1701667150 && v21 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Name();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF508, 255, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v49 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v49 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v49 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF510;
        v44 = type metadata accessor for Name;
      }
      else if (v20 == 0x7475626972747441 && v21 == 0xE900000000000065 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Attribute();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v50 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v50 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v50 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF500;
        v44 = type metadata accessor for Attribute;
      }
      else if (v20 == 0x64726F7779654BLL && v21 == 0xE700000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Keyword();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Keyword, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v51 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v51 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v51 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF4F0;
        v44 = type metadata accessor for Keyword;
      }
      else if (v20 == 0x7375656870726F4DLL && v21 == 0xED00007961727241 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MorpheusArray();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusArray, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v52 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v52 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v52 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF4E0;
        v44 = type metadata accessor for MorpheusArray;
      }
      else if (v20 == 0x7375656870726F4DLL && v21 == 0xEC00000074636944 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MorpheusDict();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusDict, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v53 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v53 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v53 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF4D0;
        v44 = type metadata accessor for MorpheusDict;
      }
      else if (v20 == 0x7375656870726F4DLL && v21 == 0xED00006563696C53 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MorpheusSlice();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusSlice, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v54 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v54 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v54 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF4C0;
        v44 = type metadata accessor for MorpheusSlice;
      }
      else if (v20 == 0x6E6F6974636E7546 && v21 == 0xEB00000000666544 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for FunctionDef();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF4A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FunctionDef, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v55 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v55 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v55 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF4B0;
        v44 = type metadata accessor for FunctionDef;
      }
      else if (v20 == 0x6665447373616C43 && v21 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for ClassDef();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF498, 255, (uint64_t (*)(uint64_t))type metadata accessor for ClassDef, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v56 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v56 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v56 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF4A0;
        v44 = type metadata accessor for ClassDef;
      }
      else if (v20 == 0x7972616E55 && v21 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Unary();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF488, 255, (uint64_t (*)(uint64_t))type metadata accessor for Unary, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v57 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v57 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v57 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF490;
        v44 = type metadata accessor for Unary;
      }
      else if (v20 == 0x6573696152 && v21 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Raise();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF478, 255, (uint64_t (*)(uint64_t))type metadata accessor for Raise, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v58 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v58 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v58 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF480;
        v44 = type metadata accessor for Raise;
      }
      else if (v20 == 0x745364656E696F4ALL && v21 == 0xE900000000000072 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for JoinedStr();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF468, 255, (uint64_t (*)(uint64_t))type metadata accessor for JoinedStr, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v59 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v59 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v59 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF470;
        v44 = type metadata accessor for JoinedStr;
      }
      else if (v20 == 0x657474616D726F46 && v21 == 0xEE0065756C615664 || (sub_2425A0254() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for FormattedValue();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF458, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormattedValue, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v60 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v60 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v60 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF460;
        v44 = type metadata accessor for FormattedValue;
      }
      else
      {
        if ((v20 != 0x704F6C6F6F42 || v21 != 0xE600000000000000) && (sub_2425A0254() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          if (qword_2571FC5C8 != -1)
            swift_once();
          v62 = v72;
          v63 = __swift_project_value_buffer(v72, (uint64_t)qword_2571FFB10);
          (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v71, v63, v62);
          swift_bridgeObjectRetain();
          v64 = sub_24259F918();
          v65 = sub_24259FE70();
          v5 = v65;
          if (os_log_type_enabled(v64, v65))
          {
            v66 = (uint8_t *)swift_slowAlloc();
            v67 = swift_slowAlloc();
            v76 = v67;
            *(_DWORD *)v66 = 136315138;
            v73 = v66 + 4;
            swift_bridgeObjectRetain();
            v75 = sub_24259B370(v20, v21, &v76);
            sub_24259FE94();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_2422E0000, v64, (os_log_type_t)v5, "Operation %s not supported yet", v66, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2426A88B8](v67, -1, -1);
            MEMORY[0x2426A88B8](v66, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
          sub_242554B60();
          swift_allocError();
          *v68 = 43;
          swift_willThrow();
          (*((void (**)(char *, uint64_t))v18 + 1))(v74, v17);
          goto LABEL_3;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for BoolOp();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
        sub_24255B800(&qword_2571FF448, 255, (uint64_t (*)(uint64_t))type metadata accessor for BoolOp, (uint64_t)&unk_2425C9154);
        sub_2425A020C();
        v39 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        v41 = *(_QWORD *)(v5 + 16);
        v61 = *(_QWORD *)(v5 + 24);
        v42 = v41 + 1;
        if (v41 >= v61 >> 1)
          v5 = (uint64_t)sub_24251C650((_QWORD *)(v61 > 1), v41 + 1, 1, (_QWORD *)v5);
        v43 = (unint64_t *)&unk_2571FF450;
        v44 = type metadata accessor for BoolOp;
      }
      v45 = sub_24255B800(v43, 255, (uint64_t (*)(uint64_t))v44, (uint64_t)&unk_2425C9138);
      *(_QWORD *)(v5 + 16) = v42;
      v46 = v5 + 16 * v41;
      *(_QWORD *)(v46 + 32) = v39;
      *(_QWORD *)(v46 + 40) = v45;
      v16 = v18;
      (*((void (**)(char *, uint64_t))v18 + 1))(v74, v17);
LABEL_18:
      __swift_project_boxed_opaque_existential_1(v79, v80);
      if ((sub_2425A0218() & 1) != 0)
        goto LABEL_3;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Assignment();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v79, v80);
    sub_24255B800(&qword_2571FF5A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Assignment, (uint64_t)&unk_2425C9154);
    sub_2425A020C();
    v23 = v76;
    v16 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = (uint64_t)sub_24251C650(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
    v25 = *(_QWORD *)(v5 + 16);
    v24 = *(_QWORD *)(v5 + 24);
    v26 = v25 + 1;
    if (v25 >= v24 >> 1)
      v5 = (uint64_t)sub_24251C650((_QWORD *)(v24 > 1), v25 + 1, 1, (_QWORD *)v5);
    v27 = (unint64_t *)&unk_2571FF5A8;
    v28 = 255;
    v29 = type metadata accessor for Assignment;
LABEL_17:
    v30 = sub_24255B800(v27, v28, (uint64_t (*)(uint64_t))v29, (uint64_t)&unk_2425C9138);
    *(_QWORD *)(v5 + 16) = v26;
    v31 = v5 + 16 * v25;
    *(_QWORD *)(v31 + 32) = v23;
    *(_QWORD *)(v31 + 40) = v30;
    (*((void (**)(char *, uint64_t))v16 + 1))(v74, v17);
    goto LABEL_18;
  }
  return v5;
}

uint64_t sub_242596000(uint64_t a1, char a2)
{
  return sub_242593E4C(a1, a2, &qword_2571FE988);
}

uint64_t sub_24259601C(uint64_t a1, char a2)
{
  return sub_242591C80(a1, a2, &qword_2571FEB90);
}

uint64_t sub_242596038(uint64_t a1, char a2)
{
  return sub_242591C80(a1, a2, &qword_2571FEF60);
}

_QWORD *sub_242596054(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  _BYTE *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;

  v4 = v2;
  v5 = sub_24259F930();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF438);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  sub_2425A0188();
  if (!v2)
  {
    v61 = v5;
    v62 = v12;
    v60 = v6;
    sub_24251DE5C((uint64_t)v66, (uint64_t)v64);
    __swift_project_boxed_opaque_existential_1(v66, v67);
    v13 = sub_2425A0218();
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((v13 & 1) == 0)
    {
      do
      {
        __swift_project_boxed_opaque_existential_1(v64, v65);
        if ((sub_2425A0218() & 1) != 0)
          break;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v64, v65);
        sub_242590F50();
        sub_2425A0200();
        LOBYTE(v68) = 0;
        v16 = sub_2425A01A0();
        v17 = v15;
        v18 = v16 == 0x656D6E6769737341 && v15 == 0xEA0000000000746ELL;
        if (v18 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Assignment();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF5A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Assignment, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v20 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v20 >> 1)
            v4 = sub_24251C650((_QWORD *)(v20 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF5A8;
          v24 = 255;
          v25 = type metadata accessor for Assignment;
        }
        else if (v16 == 0x7069726373627553 && v17 == 0xE900000000000074 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Subscript();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF590, 255, (uint64_t (*)(uint64_t))type metadata accessor for Subscript, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v28 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v28 >> 1)
            v4 = sub_24251C650((_QWORD *)(v28 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF598;
          v24 = 255;
          v25 = type metadata accessor for Subscript;
        }
        else if (v16 == 0x6563696F6843 && v17 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Choice();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF580, 255, (uint64_t (*)(uint64_t))type metadata accessor for Choice, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v29 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v29 >> 1)
            v4 = sub_24251C650((_QWORD *)(v29 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF588;
          v24 = 255;
          v25 = type metadata accessor for Choice;
        }
        else if (v16 == 0x746E6174736E6F43 && v17 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Constant();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF570, 255, (uint64_t (*)(uint64_t))type metadata accessor for Constant, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v30 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v30 >> 1)
            v4 = sub_24251C650((_QWORD *)(v30 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF578;
          v24 = 255;
          v25 = type metadata accessor for Constant;
        }
        else if (v16 == 1751343429 && v17 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Each();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF560, 255, (uint64_t (*)(uint64_t))type metadata accessor for Each, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v31 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v31 >> 1)
            v4 = sub_24251C650((_QWORD *)(v31 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF568;
          v24 = 255;
          v25 = type metadata accessor for Each;
        }
        else if (v16 == 0x426C61636978654CLL && v17 == 0xEC0000006B636F6CLL || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for LexicalBlock();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800((unint64_t *)&qword_2571FCE40, v32, (uint64_t (*)(uint64_t))type metadata accessor for LexicalBlock, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v33 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v33 >> 1)
            v4 = sub_24251C650((_QWORD *)(v33 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF558;
          v25 = type metadata accessor for LexicalBlock;
        }
        else if (v16 == 0x6E7275746552 && v17 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Return();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF548, 255, (uint64_t (*)(uint64_t))type metadata accessor for Return, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v34 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v34 >> 1)
            v4 = sub_24251C650((_QWORD *)(v34 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF550;
          v24 = 255;
          v25 = type metadata accessor for Return;
        }
        else if (v16 == 0x73697261706D6F43 && v17 == 0xEA00000000006E6FLL || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Comparison();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF538, 255, (uint64_t (*)(uint64_t))type metadata accessor for Comparison, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v35 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v35 >> 1)
            v4 = sub_24251C650((_QWORD *)(v35 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF540;
          v24 = 255;
          v25 = type metadata accessor for Comparison;
        }
        else if (v16 == 0x704F6E6942 && v17 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for BinOp();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF528, 255, (uint64_t (*)(uint64_t))type metadata accessor for BinOp, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v36 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v36 >> 1)
            v4 = sub_24251C650((_QWORD *)(v36 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF530;
          v24 = 255;
          v25 = type metadata accessor for BinOp;
        }
        else if (v16 == 1819042115 && v17 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Call();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF518, 255, (uint64_t (*)(uint64_t))type metadata accessor for Call, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v37 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v37 >> 1)
            v4 = sub_24251C650((_QWORD *)(v37 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF520;
          v24 = 255;
          v25 = type metadata accessor for Call;
        }
        else if (v16 == 1701667150 && v17 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Name();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF508, 255, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v38 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v38 >> 1)
            v4 = sub_24251C650((_QWORD *)(v38 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF510;
          v24 = 255;
          v25 = type metadata accessor for Name;
        }
        else if (v16 == 0x7475626972747441 && v17 == 0xE900000000000065 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Attribute();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF4F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v39 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v39 >> 1)
            v4 = sub_24251C650((_QWORD *)(v39 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF500;
          v24 = 255;
          v25 = type metadata accessor for Attribute;
        }
        else if (v16 == 0x64726F7779654BLL && v17 == 0xE700000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Keyword();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF4E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Keyword, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v40 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v40 >> 1)
            v4 = sub_24251C650((_QWORD *)(v40 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF4F0;
          v24 = 255;
          v25 = type metadata accessor for Keyword;
        }
        else if (v16 == 0x7375656870726F4DLL && v17 == 0xED00007961727241 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for MorpheusArray();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF4D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusArray, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v41 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v41 >> 1)
            v4 = sub_24251C650((_QWORD *)(v41 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF4E0;
          v24 = 255;
          v25 = type metadata accessor for MorpheusArray;
        }
        else if (v16 == 0x7375656870726F4DLL && v17 == 0xEC00000074636944 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for MorpheusDict();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF4C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusDict, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v42 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v42 >> 1)
            v4 = sub_24251C650((_QWORD *)(v42 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF4D0;
          v24 = 255;
          v25 = type metadata accessor for MorpheusDict;
        }
        else if (v16 == 0x7375656870726F4DLL && v17 == 0xED00006563696C53 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for MorpheusSlice();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF4B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MorpheusSlice, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v43 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v43 >> 1)
            v4 = sub_24251C650((_QWORD *)(v43 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF4C0;
          v24 = 255;
          v25 = type metadata accessor for MorpheusSlice;
        }
        else if (v16 == 0x6E6F6974636E7546 && v17 == 0xEB00000000666544 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for FunctionDef();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF4A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FunctionDef, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v44 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v44 >> 1)
            v4 = sub_24251C650((_QWORD *)(v44 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF4B0;
          v24 = 255;
          v25 = type metadata accessor for FunctionDef;
        }
        else if (v16 == 0x6665447373616C43 && v17 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for ClassDef();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF498, 255, (uint64_t (*)(uint64_t))type metadata accessor for ClassDef, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v45 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v45 >> 1)
            v4 = sub_24251C650((_QWORD *)(v45 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF4A0;
          v24 = 255;
          v25 = type metadata accessor for ClassDef;
        }
        else if (v16 == 0x7972616E55 && v17 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Unary();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF488, 255, (uint64_t (*)(uint64_t))type metadata accessor for Unary, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v46 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v46 >> 1)
            v4 = sub_24251C650((_QWORD *)(v46 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF490;
          v24 = 255;
          v25 = type metadata accessor for Unary;
        }
        else if (v16 == 0x6573696152 && v17 == 0xE500000000000000 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for Raise();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF478, 255, (uint64_t (*)(uint64_t))type metadata accessor for Raise, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v47 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v47 >> 1)
            v4 = sub_24251C650((_QWORD *)(v47 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF480;
          v24 = 255;
          v25 = type metadata accessor for Raise;
        }
        else if (v16 == 0x745364656E696F4ALL && v17 == 0xE900000000000072 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for JoinedStr();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF468, 255, (uint64_t (*)(uint64_t))type metadata accessor for JoinedStr, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v48 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v48 >> 1)
            v4 = sub_24251C650((_QWORD *)(v48 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF470;
          v24 = 255;
          v25 = type metadata accessor for JoinedStr;
        }
        else if (v16 == 0x657474616D726F46 && v17 == 0xEE0065756C615664 || (sub_2425A0254() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for FormattedValue();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF458, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormattedValue, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v49 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v49 >> 1)
            v4 = sub_24251C650((_QWORD *)(v49 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF460;
          v24 = 255;
          v25 = type metadata accessor for FormattedValue;
        }
        else
        {
          if ((v16 != 0x704F6C6F6F42 || v17 != 0xE600000000000000) && (sub_2425A0254() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            if (qword_2571FC5C8 != -1)
              swift_once();
            v51 = v61;
            v52 = __swift_project_value_buffer(v61, (uint64_t)qword_2571FFB10);
            (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v8, v52, v51);
            swift_bridgeObjectRetain();
            v53 = sub_24259F918();
            v54 = sub_24259FE70();
            v4 = (_QWORD *)v54;
            if (os_log_type_enabled(v53, v54))
            {
              v55 = (uint8_t *)swift_slowAlloc();
              v59 = swift_slowAlloc();
              v68 = v59;
              *(_DWORD *)v55 = 136315138;
              v58 = v55 + 4;
              swift_bridgeObjectRetain();
              v63 = sub_24259B370(v16, v17, &v68);
              sub_24259FE94();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_2422E0000, v53, (os_log_type_t)v4, "Operation %s not supported yet", v55, 0xCu);
              v56 = v59;
              swift_arrayDestroy();
              MEMORY[0x2426A88B8](v56, -1, -1);
              MEMORY[0x2426A88B8](v55, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v61);
            sub_242554B60();
            swift_allocError();
            *v57 = 43;
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v10 + 8))(v62, v9);
            break;
          }
          swift_bridgeObjectRelease();
          type metadata accessor for BoolOp();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
          sub_24255B800(&qword_2571FF448, 255, (uint64_t (*)(uint64_t))type metadata accessor for BoolOp, (uint64_t)&unk_2425C9154);
          sub_2425A020C();
          v19 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_24251C650(0, v4[2] + 1, 1, v4);
          v21 = v4[2];
          v50 = v4[3];
          v22 = v21 + 1;
          if (v21 >= v50 >> 1)
            v4 = sub_24251C650((_QWORD *)(v50 > 1), v21 + 1, 1, v4);
          v23 = (unint64_t *)&unk_2571FF450;
          v24 = 255;
          v25 = type metadata accessor for BoolOp;
        }
        v26 = sub_24255B800(v23, v24, (uint64_t (*)(uint64_t))v25, (uint64_t)&unk_2425C9138);
        v4[2] = v22;
        v27 = &v4[2 * v21];
        v27[4] = v19;
        v27[5] = v26;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v62, v9);
        __swift_project_boxed_opaque_existential_1(v66, v67);
      }
      while ((sub_2425A0218() & 1) == 0);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  }
  return v4;
}

uint64_t sub_2425981B4()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_2425981FC()
{
  return sub_24259FB40();
}

uint64_t sub_24259820C()
{
  sub_2425A02D8();
  sub_24259FB40();
  return sub_2425A02F0();
}

uint64_t sub_242598250@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_2425982A0(_QWORD *a1@<X8>)
{
  *a1 = 7565423;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_2425982B4()
{
  return 7565423;
}

uint64_t sub_2425982C4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_242598318()
{
  sub_242599904();
  return sub_2425A0344();
}

uint64_t sub_242598340()
{
  sub_242599904();
  return sub_2425A0350();
}

uint64_t sub_242598368(_QWORD *a1)
{
  swift_allocObject();
  return sub_2425983B0(a1);
}

uint64_t sub_2425983B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t ObjectType;
  void (*v20)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v2 = v1;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF828);
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LexicalContext();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0x6E776F6E6B6E55;
  v7[3] = 0xE700000000000000;
  swift_retain();
  v8 = MEMORY[0x24BEE4AF8];
  v9 = sub_2425582A8(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FCE48);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v9;
  v11 = (uint64_t)a1;
  swift_bridgeObjectRelease();
  v7[4] = v10;
  v7[5] = sub_242558650(v8);
  *(_QWORD *)(v2 + 48) = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242599904();
  v12 = v24;
  sub_2425A0338();
  if (v12)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
    type metadata accessor for LexicalBlock();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v2 + 40) = sub_242596054((uint64_t)v6, &qword_2571FF828);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v23);
    v14 = sub_24259BC74(v23);
    v2 = v14;
    v15 = *(_QWORD *)(v14 + 40);
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v24 = a1;
      swift_bridgeObjectRetain_n();
      swift_retain();
      v21 = v15;
      v17 = (uint64_t *)(v15 + 40);
      do
      {
        v18 = *v17;
        ObjectType = swift_getObjectType();
        v20 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v18 + 48);
        swift_retain();
        swift_unknownObjectRetain();
        v20(v2, &off_251358E48, ObjectType, v18);
        swift_unknownObjectRelease();
        v17 += 2;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease_n();
      v11 = (uint64_t)v24;
    }
    else
    {
      swift_retain();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
    __swift_destroy_boxed_opaque_existential_1(v11);
    swift_release();
  }
  return v2;
}

double sub_2425986A8@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  double result;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;

  swift_retain();
  sub_242591180(a1, a2, (uint64_t)v15);
  swift_release();
  if (v16)
  {
    sub_2425264B4(v15, a3);
  }
  else
  {
    sub_24256FB04((uint64_t)v15);
    if (MEMORY[0x2426A8918](v3 + 24))
    {
      v8 = *(_QWORD *)(v3 + 32);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, ObjectType, v8);
      swift_unknownObjectRelease();
    }
    else
    {
      if (qword_2571FC5C8 != -1)
        swift_once();
      v10 = sub_24259F930();
      __swift_project_value_buffer(v10, (uint64_t)qword_2571FFB10);
      swift_bridgeObjectRetain_n();
      v11 = sub_24259F918();
      v12 = sub_24259FE70();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        v14 = swift_slowAlloc();
        v15[0] = v14;
        *(_DWORD *)v13 = 136315138;
        swift_bridgeObjectRetain();
        sub_24259B370(a1, a2, v15);
        sub_24259FE94();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2422E0000, v11, v12, "LexicalBlock> Can't locate name %s", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v14, -1, -1);
        MEMORY[0x2426A88B8](v13, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      result = 0.0;
      *a3 = 0u;
      a3[1] = 0u;
    }
  }
  return result;
}

uint64_t sub_2425988E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[32];
  uint64_t v6;
  _BYTE v7[32];
  _BYTE v8[40];
  _QWORD v9[4];

  v9[3] = MEMORY[0x24BEE0D00];
  v9[0] = a1;
  v9[1] = a2;
  sub_242526478((uint64_t)v9, (uint64_t)v8);
  swift_retain();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_24259FF48();
    sub_242526478(a3, (uint64_t)v7);
    sub_24255BA44((uint64_t)v8, (uint64_t)&v6);
    sub_24256F0C4((uint64_t)v7, (uint64_t)v5);
    swift_beginAccess();
    sub_242558040((uint64_t)v5, (uint64_t)&v6);
    swift_endAccess();
    sub_24255BA80((uint64_t)v8);
    sub_24256FB04((uint64_t)v7);
    swift_release();
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_242598A1C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  _UNKNOWN **v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  void (*v10)(uint64_t, _UNKNOWN **);
  char v11;
  uint64_t v12;

  swift_retain_n();
  ObjectType = swift_getObjectType();
  v5 = &off_251358E48;
  sub_2425998F0();
  v6 = sub_24259131C(a1, a2);
  swift_release();
  if ((v6 & 1) != 0)
  {
    v7 = ((uint64_t (*)(uint64_t, _UNKNOWN **))sub_2425998F0)(ObjectType, &off_251358E48);
LABEL_6:
    v12 = v7;
    swift_unknownObjectRelease_n();
    return v12;
  }
  else
  {
    while (1)
    {
      v8 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v5[2])(ObjectType, v5);
      v5 = v9;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!v8)
        return swift_retain();
      swift_unknownObjectRetain();
      ObjectType = swift_getObjectType();
      v10 = (void (*)(uint64_t, _UNKNOWN **))v5[1];
      v10(ObjectType, v5);
      v11 = sub_24259131C(a1, a2);
      swift_release();
      if ((v11 & 1) != 0)
      {
        v7 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v10)(ObjectType, v5);
        goto LABEL_6;
      }
    }
  }
}

void sub_242598B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _BYTE v8[40];
  _QWORD v9[5];

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = (uint64_t *)(v2 + 40); ; i += 2)
    {
      v5 = *i;
      ObjectType = swift_getObjectType();
      v7 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 64);
      swift_unknownObjectRetain();
      v7(v9, ObjectType, v5);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
      sub_24256F10C((uint64_t)v9, (uint64_t)v8);
      if (v8[32])
        break;
      sub_242557D30((uint64_t)v8);
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_bridgeObjectRelease();
    sub_242557D30((uint64_t)v8);
  }
}

uint64_t sub_242598C7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  char v14;
  _OWORD v15[2];
  char v16;
  uint64_t v17;

  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v17 = a1;
    swift_bridgeObjectRetain();
    v5 = (uint64_t *)(v3 + 40);
    while (1)
    {
      v6 = *v5;
      ObjectType = swift_getObjectType();
      v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 64);
      swift_unknownObjectRetain();
      v8(v13, ObjectType, v6);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return sub_242557D30((uint64_t)v15);
      }
      swift_unknownObjectRelease();
      sub_242557D30((uint64_t)v15);
      sub_24256F10C((uint64_t)v13, (uint64_t)v15);
      sub_24255F890((uint64_t)v15, (uint64_t)v13);
      if (v14)
        break;
      sub_242557D30((uint64_t)v13);
      v5 += 2;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        a1 = v17;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_242557D30((uint64_t)v13);
    return sub_24256F10C((uint64_t)v15, v17);
  }
  else
  {
LABEL_7:
    sub_24255F890((uint64_t)v15, a1);
    v9 = *(_QWORD *)(v1 + 48);
    v10 = *(_QWORD *)(v9 + 32);
    swift_beginAccess();
    v11 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4B00];
    swift_retain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v9 + 40) = v11;
    swift_release();
    swift_bridgeObjectRelease();
    return sub_242557D30((uint64_t)v15);
  }
}

uint64_t sub_242598E28()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v15 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_242509BCC(0, v2, 0);
    v3 = v15;
    v4 = v1 + 40;
    do
    {
      swift_getObjectType();
      v5 = sub_2425A01E8();
      v7 = v6;
      v9 = *(_QWORD *)(v15 + 16);
      v8 = *(_QWORD *)(v15 + 24);
      if (v9 >= v8 >> 1)
        sub_242509BCC(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v15 + 16) = v9 + 1;
      v10 = v15 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
      v4 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v11 = *(_QWORD *)(v3 + 16);
  if (v11)
  {
    v12 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_24259FB70();
      swift_bridgeObjectRelease();
      sub_24259FB70();
      swift_bridgeObjectRelease();
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13 = _sSS8MorpheusE3lenSiyF_0();
  swift_bridgeObjectRelease();
  if (v13 >= 1)
  {
    sub_242591BBC();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_242598FD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  int64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  uint64_t v60;
  _QWORD v61[4];
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  _BYTE v69[32];
  uint64_t v70;
  unint64_t v71;
  __int128 v72[3];
  unint64_t v73;

  v2 = v1;
  v51 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v52 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = MEMORY[0x24BEE0D00];
  if (!v5)
    goto LABEL_6;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v6 << 6);
LABEL_5:
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9);
  v12 = v11[1];
  *(_QWORD *)&v68 = *v11;
  *((_QWORD *)&v68 + 1) = v12;
  sub_242526478(v10 + 32 * v9, (uint64_t)v69);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_24255F8CC((uint64_t)&v68, (uint64_t)&v70, &qword_2571FDD28);
    v15 = v71;
    if (!v71)
      return swift_release();
    v16 = v70;
    sub_2425264B4(v72, v67);
    sub_242526478((uint64_t)v67, (uint64_t)&v68);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC780);
    if (!swift_dynamicCast())
    {
      v19 = *(_QWORD *)(v54 + 48);
      v66 = v7;
      *(_QWORD *)&v65 = v16;
      *((_QWORD *)&v65 + 1) = v15;
      sub_242526478((uint64_t)&v65, (uint64_t)&v68);
      swift_bridgeObjectRetain();
      swift_retain();
      if (swift_dynamicCast())
      {
        v73 = v5;
        v53 = v2;
        v20 = *(_QWORD *)(v19 + 32);
        swift_retain();
        sub_24259FF48();
        sub_242526478((uint64_t)v67, (uint64_t)&v63);
        sub_24255BA44((uint64_t)&v68, (uint64_t)v61);
        sub_24256F0C4((uint64_t)&v63, (uint64_t)&v59);
        v21 = (uint64_t *)(v20 + 16);
        swift_beginAccess();
        if (v60)
        {
          sub_2425264B4(&v59, v58);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = (_QWORD *)*v21;
          v56 = (_QWORD *)*v21;
          *v21 = 0x8000000000000000;
          v25 = sub_24255A0C0((uint64_t)v61);
          v26 = v23[2];
          v27 = (v24 & 1) == 0;
          v28 = v26 + v27;
          if (__OFADD__(v26, v27))
            goto LABEL_71;
          v29 = v24;
          if (v23[3] >= v28)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_24255AAE8();
          }
          else
          {
            sub_242599948(v28, isUniquelyReferenced_nonNull_native);
            v30 = sub_24255A0C0((uint64_t)v61);
            if ((v29 & 1) != (v31 & 1))
              goto LABEL_74;
            v25 = v30;
          }
          v7 = MEMORY[0x24BEE0D00];
          if ((v29 & 1) != 0)
          {
            v44 = (_OWORD *)(v56[7] + 32 * v25);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
            sub_2425264B4(v58, v44);
          }
          else
          {
            v56[(v25 >> 6) + 8] |= 1 << v25;
            sub_24255BA44((uint64_t)v61, v56[6] + 40 * v25);
            sub_2425264B4(v58, (_OWORD *)(v56[7] + 32 * v25));
            v45 = v56[2];
            v46 = __OFADD__(v45, 1);
            v47 = v45 + 1;
            if (v46)
              goto LABEL_72;
            v56[2] = v47;
          }
          *v21 = (uint64_t)v56;
          swift_bridgeObjectRelease();
          sub_24255BA80((uint64_t)v61);
          v2 = v53;
        }
        else
        {
          sub_24256FB04((uint64_t)&v59);
          swift_bridgeObjectRetain();
          v39 = sub_24255A0C0((uint64_t)v61);
          v41 = v40;
          swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
          {
            v42 = swift_isUniquelyReferenced_nonNull_native();
            v43 = *v21;
            v57 = *v21;
            *v21 = 0x8000000000000000;
            if ((v42 & 1) == 0)
            {
              sub_24255AAE8();
              v43 = v57;
            }
            sub_24255BA80(*(_QWORD *)(v43 + 48) + 40 * v39);
            sub_2425264B4((_OWORD *)(*(_QWORD *)(v43 + 56) + 32 * v39), v58);
            sub_24255A0F0(v39, v43);
            *v21 = v43;
            swift_bridgeObjectRelease();
          }
          else
          {
            memset(v58, 0, sizeof(v58));
          }
          v2 = v53;
          sub_24255BA80((uint64_t)v61);
          sub_24256FB04((uint64_t)v58);
        }
        v5 = v73;
        swift_endAccess();
        sub_24255BA80((uint64_t)&v68);
        sub_24256FB04((uint64_t)&v63);
        swift_release();
      }
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
      if (v5)
        goto LABEL_4;
      goto LABEL_6;
    }
    v73 = v5;
    v18 = v61[0];
    v17 = v61[1];
    swift_getObjectType();
    (*(void (**)(__int128 *__return_ptr))(v17 + 64))(&v68);
    if (v2)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
      return swift_release();
    }
    sub_24255F890((uint64_t)&v68, (uint64_t)v61);
    if (!v62 || (sub_242557D30((uint64_t)v61), sub_24255F890((uint64_t)&v68, (uint64_t)v61), v62 == 1))
    {
      sub_24255F8CC((uint64_t)v61, (uint64_t)&v59, &qword_2571FC790);
      sub_24255F8CC((uint64_t)&v59, (uint64_t)v61, &qword_2571FC790);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
      if ((swift_dynamicCast() & 1) != 0)
        goto LABEL_30;
    }
    else
    {
      sub_242557D30((uint64_t)v61);
    }
    v63 = 0u;
    v64 = 0u;
LABEL_30:
    sub_242557D30((uint64_t)&v68);
    if (*((_QWORD *)&v64 + 1))
    {
      sub_2425264B4(&v63, &v65);
      sub_242588900((uint64_t)&v65, (uint64_t *)&v68);
      sub_2425988E0(v16, v15, (uint64_t)&v68);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
    }
    else
    {
      sub_24256FB04((uint64_t)&v63);
      if (qword_2571FC5C8 != -1)
        swift_once();
      v32 = sub_24259F930();
      __swift_project_value_buffer(v32, (uint64_t)qword_2571FFB10);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      v33 = sub_24259F918();
      v34 = sub_24259FE70();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc();
        v50 = swift_slowAlloc();
        *(_QWORD *)&v68 = v50;
        *(_DWORD *)v35 = 136315394;
        v61[0] = v18;
        v36 = sub_2425A01E8();
        *(_QWORD *)(v35 + 4) = sub_24259B370(v36, v37, (uint64_t *)&v68);
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v35 + 14) = sub_24259B370(v16, v15, (uint64_t *)&v68);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2422E0000, v33, v34, "Operation: %s did not return value type, ignore the input %s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2426A88B8](v50, -1, -1);
        v38 = v35;
        v2 = 0;
        MEMORY[0x2426A88B8](v38, -1, -1);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    v7 = MEMORY[0x24BEE0D00];
    v5 = v73;
    if (v73)
      goto LABEL_4;
LABEL_6:
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    if (v13 < v52)
    {
      v14 = *(_QWORD *)(v51 + 8 * v13);
      if (v14)
        goto LABEL_9;
      v6 += 2;
      if (v13 + 1 >= v52)
      {
        v6 = v13;
        goto LABEL_14;
      }
      v14 = *(_QWORD *)(v51 + 8 * v6);
      if (v14)
      {
        ++v13;
LABEL_9:
        v5 = (v14 - 1) & v14;
        v9 = __clz(__rbit64(v14)) + (v13 << 6);
        v6 = v13;
        goto LABEL_5;
      }
      if (v13 + 2 < v52)
        break;
    }
LABEL_14:
    v5 = 0;
    memset(v69, 0, sizeof(v69));
    v68 = 0u;
  }
  v14 = *(_QWORD *)(v51 + 8 * (v13 + 2));
  if (v14)
  {
    v13 += 2;
    goto LABEL_9;
  }
  v48 = v13 + 3;
  if (v13 + 3 >= v52)
  {
    v6 = v13 + 2;
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(v51 + 8 * v48);
  if (v14)
  {
    v13 += 3;
    goto LABEL_9;
  }
  while (1)
  {
    v13 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v13 >= v52)
    {
      v6 = v52 - 1;
      goto LABEL_14;
    }
    v14 = *(_QWORD *)(v51 + 8 * v13);
    ++v48;
    if (v14)
      goto LABEL_9;
  }
LABEL_73:
  __break(1u);
LABEL_74:
  result = sub_2425A0290();
  __break(1u);
  return result;
}

uint64_t sub_242599880()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_24259989C()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LexicalBlock()
{
  return objc_opt_self();
}

uint64_t sub_2425998F0()
{
  return swift_retain();
}

unint64_t sub_242599904()
{
  unint64_t result;

  result = qword_2571FF830;
  if (!qword_2571FF830)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8EA0, &type metadata for LexicalBlock.BlockCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF830);
  }
  return result;
}

uint64_t sub_242599948(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD070);
  v6 = sub_2425A014C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_2425264B4((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_24255BA44(v25, (uint64_t)&v38);
      sub_242526478(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = sub_24259FF30();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_2425264B4(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_242599C5C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD080);
  v6 = sub_2425A014C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_2425264B4(v24, v35);
      }
      else
      {
        sub_242526478((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_2425A02D8();
      sub_24259FB40();
      result = sub_2425A02F0();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_2425264B4(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_242599F58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _BYTE v36[32];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD090);
  v6 = sub_2425A014C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v35 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_34;
      v20 = *(_QWORD *)(v35 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v34)
              goto LABEL_34;
            v20 = *(_QWORD *)(v35 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v5 + 56) + 32 * v17;
    if ((a2 & 1) != 0)
    {
      sub_24255F8CC(v25, (uint64_t)v36, &qword_2571FC790);
    }
    else
    {
      sub_24256F0C4(v25, (uint64_t)v36);
      swift_bridgeObjectRetain();
    }
    sub_2425A02D8();
    sub_24259FB40();
    result = sub_2425A02F0();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = sub_24255F8CC((uint64_t)v36, *(_QWORD *)(v7 + 56) + 32 * v14, &qword_2571FC790);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24259A278(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FD078);
  v36 = a2;
  v6 = sub_2425A014C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_2425A02D8();
    sub_24259FB40();
    result = sub_2425A02F0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

_OWORD *sub_24259A58C(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_2425264B4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_24259A604(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_2425264B4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_24259A66C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_24255F8CC(a4, a5[7] + 32 * a1, &qword_2571FC790);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_24259A6DC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t storeEnumTagSinglePayload for LexicalBlock.BlockCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24259A764 + 4 * byte_2425C8D60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24259A784 + 4 * byte_2425C8D65[v4]))();
}

_BYTE *sub_24259A764(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24259A784(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24259A78C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24259A794(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24259A79C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24259A7A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LexicalBlock.BlockCodingKeys()
{
  return &type metadata for LexicalBlock.BlockCodingKeys;
}

unint64_t sub_24259A7C4()
{
  unint64_t result;

  result = qword_2571FF860;
  if (!qword_2571FF860)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8E78, &type metadata for LexicalBlock.BlockCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF860);
  }
  return result;
}

unint64_t sub_24259A80C()
{
  unint64_t result;

  result = qword_2571FF868;
  if (!qword_2571FF868)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8DB0, &type metadata for LexicalBlock.BlockCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF868);
  }
  return result;
}

unint64_t sub_24259A854()
{
  unint64_t result;

  result = qword_2571FF870;
  if (!qword_2571FF870)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8DD8, &type metadata for LexicalBlock.BlockCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF870);
  }
  return result;
}

void sub_24259A898(char a1@<W1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;

  v20 = a1 & 1;
  if (a2 == 1819047278 && a3 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else if (a2 == 7630441 && a3 == 0xE300000000000000 || (sub_2425A0254() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF980);
    v8 = sub_2425A01C4();
    if (!v4)
    {
      *(_QWORD *)(a4 + 24) = MEMORY[0x24BEE1768];
      *(_QWORD *)a4 = v8;
    }
  }
  else if (a2 == 1819242338 && a3 == 0xE400000000000000 || (sub_2425A0254() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF980);
    v9 = sub_2425A01AC();
    if (!v4)
    {
      *(_QWORD *)(a4 + 24) = MEMORY[0x24BEE1328];
      *(_BYTE *)a4 = v9 & 1;
    }
  }
  else if (a2 == 7500915 && a3 == 0xE300000000000000 || (sub_2425A0254() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF980);
    v10 = sub_2425A01A0();
    if (!v4)
    {
      *(_QWORD *)(a4 + 24) = MEMORY[0x24BEE0D00];
      *(_QWORD *)a4 = v10;
      *(_QWORD *)(a4 + 8) = v11;
    }
  }
  else if (a2 == 0x73697370696C6C65 && a3 == 0xE800000000000000 || (sub_2425A0254() & 1) != 0)
  {
    *(_QWORD *)(a4 + 24) = &type metadata for Ellipsis;
  }
  else if (a2 == 0x656C62756F64 && a3 == 0xE600000000000000 || (sub_2425A0254() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF980);
    sub_2425A01B8();
    if (!v4)
    {
      *(_QWORD *)(a4 + 24) = MEMORY[0x24BEE13C8];
      *(_QWORD *)a4 = v12;
    }
  }
  else
  {
    if (qword_2571FC5C8 != -1)
      swift_once();
    v13 = sub_24259F930();
    __swift_project_value_buffer(v13, (uint64_t)qword_2571FFB10);
    swift_bridgeObjectRetain_n();
    v14 = sub_24259F918();
    v15 = sub_24259FE70();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v19 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain();
      sub_24259B370(a2, a3, &v19);
      sub_24259FE94();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2422E0000, v14, v15, "Constant type %s not supported yet", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2426A88B8](v17, -1, -1);
      MEMORY[0x2426A88B8](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_242554B60();
    swift_allocError();
    *v18 = 42;
    swift_willThrow();
  }
}

uint64_t sub_24259ACFC(char *a1, char *a2)
{
  return sub_24255D6A8(*a1, *a2);
}

uint64_t sub_24259AD08()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24259AD88()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24259ADE4()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24259AE60@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24259AEBC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65756C6176;
  if (*v1)
    v2 = 0x70795465756C6176;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE900000000000065;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24259AEFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x70795465756C6176;
  else
    return 0x65756C6176;
}

uint64_t sub_24259AF38@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24259AF98()
{
  sub_24259B32C();
  return sub_2425A0344();
}

uint64_t sub_24259AFC0()
{
  sub_24259B32C();
  return sub_2425A0350();
}

uint64_t sub_24259AFE8(_QWORD *a1)
{
  swift_allocObject();
  return sub_24259B030(a1);
}

uint64_t sub_24259B030(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v14[5];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF980);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24259B32C();
  swift_retain();
  sub_2425A0338();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Constant();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v14[0]) = 1;
    v10 = sub_2425A01A0();
    sub_24259A898(0, v10, v11, (uint64_t)v14);
    swift_bridgeObjectRelease();
    sub_24255BAB4((uint64_t)v14, v3 + 40);
    swift_release();
    sub_24251DE5C((uint64_t)a1, (uint64_t)v14);
    v9 = sub_24259BC74(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_24259B214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_24256F0C4(v1 + 40, a1);
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_24259B248()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  _OWORD v5[2];

  sub_24256F0C4(v0 + 40, (uint64_t)&v3);
  if (v4)
  {
    sub_2425264B4(&v3, v5);
    sub_242526478((uint64_t)v5, (uint64_t)&v3);
    v1 = sub_24259FB10();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    sub_24256FB04((uint64_t)&v3);
    return 7104878;
  }
  return v1;
}

uint64_t sub_24259B2D8()
{
  uint64_t v0;

  return sub_24256FB04(v0 + 40);
}

uint64_t sub_24259B2E0()
{
  uint64_t v0;

  sub_242557E30(v0 + 24);
  sub_24256FB04(v0 + 40);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Constant()
{
  return objc_opt_self();
}

unint64_t sub_24259B32C()
{
  unint64_t result;

  result = qword_2571FF988;
  if (!qword_2571FF988)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C9024, &type metadata for Constant.ConstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF988);
  }
  return result;
}

uint64_t sub_24259B370(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_24259B440(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_242526478((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_242526478((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_24259B440(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_24259FEA0();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_24259B5F8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_24259FFF0();
  if (!v8)
  {
    sub_2425A00D4();
    __break(1u);
LABEL_17:
    result = sub_2425A0164();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_24259B5F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_24259B68C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24259B8E0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_24259B8E0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24259B68C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_24259B800(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_24259FF90();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2425A00D4();
      __break(1u);
LABEL_10:
      v2 = sub_24259FB94();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2425A0164();
    __break(1u);
LABEL_14:
    result = sub_2425A00D4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_24259B800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7F8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_24259B868(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_24259FBD0();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x2426A7844](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_24259B8E0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC7F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2425A0164();
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for Constant.ConstantCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24259BA7C + 4 * byte_2425C8EF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24259BAB0 + 4 * byte_2425C8EF0[v4]))();
}

uint64_t sub_24259BAB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24259BAB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24259BAC0);
  return result;
}

uint64_t sub_24259BACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24259BAD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24259BAD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24259BAE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Constant.ConstantCodingKeys()
{
  return &type metadata for Constant.ConstantCodingKeys;
}

unint64_t sub_24259BB00()
{
  unint64_t result;

  result = qword_2571FF990;
  if (!qword_2571FF990)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8FFC, &type metadata for Constant.ConstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF990);
  }
  return result;
}

unint64_t sub_24259BB48()
{
  unint64_t result;

  result = qword_2571FF998;
  if (!qword_2571FF998)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8F34, &type metadata for Constant.ConstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF998);
  }
  return result;
}

unint64_t sub_24259BB90()
{
  unint64_t result;

  result = qword_2571FF9A0;
  if (!qword_2571FF9A0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C8F5C, &type metadata for Constant.ConstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FF9A0);
  }
  return result;
}

uint64_t SharedMutableArray.anyArray.getter()
{
  uint64_t v0;

  sub_24255CAB8();
  swift_bridgeObjectRetain();
  v0 = sub_2425A0080();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Array.anyArray.getter()
{
  return sub_2425A0080();
}

uint64_t sub_24259BC3C()
{
  return SharedMutableArray.anyArray.getter();
}

uint64_t sub_24259BC5C()
{
  return Array.anyArray.getter();
}

uint64_t dispatch thunk of AnyArrayContainer.anyArray.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_24259BC74(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = v1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FF438);
  v5 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_242590F50();
  sub_2425A0338();
  if (v2)
  {
    sub_242557E30(v1 + 24);
    type metadata accessor for BaseOp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = 1;
    v8 = v12;
    v9 = sub_2425A01C4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v8);
    *(_QWORD *)(v3 + 16) = v9;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

double sub_24259BDDC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  _BYTE v5[32];
  char v6;
  _BYTE v7[32];

  sub_24255F890(v1, (uint64_t)v5);
  if (v6 && (sub_242557D30((uint64_t)v5), sub_24255F890(v1, (uint64_t)v5), v6 != 1))
  {
    sub_242557D30((uint64_t)v5);
    a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC790);
    v4 = swift_allocObject();
    *a1 = v4;
    result = 0.0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
  }
  else
  {
    sub_24255BAB4((uint64_t)v5, (uint64_t)v7);
    sub_242588D2C((uint64_t)v7, a1);
    sub_24256FB04((uint64_t)v7);
  }
  return result;
}

uint64_t sub_24259BE90()
{
  uint64_t v0;

  return MEMORY[0x2426A8918](v0 + 24);
}

uint64_t sub_24259BEAC(char *a1, char *a2)
{
  return sub_24255DEE0(*a1, *a2);
}

uint64_t sub_24259BEB8()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24259BF2C()
{
  sub_24259FB40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24259BF7C()
{
  sub_2425A02D8();
  sub_24259FB40();
  swift_bridgeObjectRelease();
  return sub_2425A02F0();
}

uint64_t sub_24259BFEC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24259C048(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (*v1)
    v2 = 0x6F6E656E696CLL;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24259C07C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F6E656E696CLL;
  else
    return 1701869940;
}

uint64_t sub_24259C0AC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2425A017C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24259C10C()
{
  sub_242590F50();
  return sub_2425A0344();
}

uint64_t sub_24259C134()
{
  sub_242590F50();
  return sub_2425A0350();
}

uint64_t sub_24259C15C(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_24259BC74(a1);
  return v2;
}

double sub_24259C1A8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t type metadata accessor for BaseOp()
{
  return objc_opt_self();
}

uint64_t sub_24259C1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t sub_24259C208()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t sub_24259C224()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_24259C24C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_24259C298(&qword_2571FFAD8, (uint64_t)&unk_2425C9110);
  result = sub_24259C298(&qword_2571FFAE0, (uint64_t)&unk_2425C9154);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24259C298(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for BaseOp();
    result = MEMORY[0x2426A87E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24259C2D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 144))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24259C300()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t destroy for OpResult(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 32);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
  {
    if (*(_QWORD *)(result + 24) < 0xFFFFFFFFuLL)
      return result;
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  if (!v1 && *(_QWORD *)(result + 24) > 0xFFFFFFFEuLL)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for OpResult(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;

  v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (v5 < 0xFFFFFFFF)
    {
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
    }
    v7 = 1;
    goto LABEL_13;
  }
  if (v3)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_BYTE *)(a2 + 32);
LABEL_13:
    *(_BYTE *)(a1 + 32) = v7;
    return a1;
  }
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 < 0xFFFFFFFF)
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for OpResult(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if ((__int128 *)a1 == a2)
    return a1;
  v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
      goto LABEL_8;
  }
  else if (v4 || *(_QWORD *)(a1 + 24) <= 0xFFFFFFFEuLL)
  {
    goto LABEL_8;
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
LABEL_8:
  v5 = *((unsigned __int8 *)a2 + 32);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    v7 = *((_QWORD *)a2 + 3);
    if (v7 < 0xFFFFFFFF)
    {
      v11 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v11;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v7;
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  else if (v5)
  {
    v8 = *a2;
    v9 = a2[1];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    v6 = *((_QWORD *)a2 + 3);
    if (v6 < 0xFFFFFFFF)
    {
      v10 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OpResult(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
        goto LABEL_10;
    }
    else if (v4 || *(_QWORD *)(a1 + 24) <= 0xFFFFFFFEuLL)
    {
LABEL_10:
      v5 = *(unsigned __int8 *)(a2 + 32);
      if (v5 >= 2)
        v5 = *(_DWORD *)a2 + 2;
      if (v5 == 1)
      {
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
      }
      else
      {
        if (!v5)
        {
          v6 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v6;
          *(_BYTE *)(a1 + 32) = 0;
          return a1;
        }
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        LOBYTE(v5) = *(_BYTE *)(a2 + 32);
      }
      *(_BYTE *)(a1 + 32) = v5;
      return a1;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_10;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for OpResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OpResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_24259C6D0(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_24259C6EC(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OpResult()
{
  return &type metadata for OpResult;
}

uint64_t storeEnumTagSinglePayload for MetadataCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24259C76C + 4 * byte_2425C90D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24259C7A0 + 4 * byte_2425C90D0[v4]))();
}

uint64_t sub_24259C7A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24259C7A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24259C7B0);
  return result;
}

uint64_t sub_24259C7BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24259C7C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24259C7C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24259C7D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetadataCodingKeys()
{
  return &type metadata for MetadataCodingKeys;
}

unint64_t sub_24259C7F0()
{
  unint64_t result;

  result = qword_2571FFAE8;
  if (!qword_2571FFAE8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C926C, &type metadata for MetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FFAE8);
  }
  return result;
}

unint64_t sub_24259C838()
{
  unint64_t result;

  result = qword_2571FFAF0;
  if (!qword_2571FFAF0)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C91A4, &type metadata for MetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FFAF0);
  }
  return result;
}

unint64_t sub_24259C880()
{
  unint64_t result;

  result = qword_2571FFAF8;
  if (!qword_2571FFAF8)
  {
    result = MEMORY[0x2426A87E0](&unk_2425C91CC, &type metadata for MetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2571FFAF8);
  }
  return result;
}

void mlx::core::arange()
{
  __assert_rtn("arange", "arange.h", 29, "inputs.size() == 0");
}

void mlx::core::Abs::eval()
{
  __assert_rtn("eval", "primitives.cpp", 23, "inputs.size() == 1");
}

void mlx::core::ArcCos::eval()
{
  __assert_rtn("eval", "primitives.cpp", 38, "inputs.size() == 1");
}

void mlx::core::ArcCosh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 50, "inputs.size() == 1");
}

void mlx::core::ArcSin::eval()
{
  __assert_rtn("eval", "primitives.cpp", 62, "inputs.size() == 1");
}

void mlx::core::ArcSinh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 74, "inputs.size() == 1");
}

void mlx::core::ArcTan::eval()
{
  __assert_rtn("eval", "primitives.cpp", 86, "inputs.size() == 1");
}

void mlx::core::ArcTanh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 98, "inputs.size() == 1");
}

void mlx::core::AsType::eval()
{
  __assert_rtn("eval", "primitives.cpp", 110, "inputs.size() == 1");
}

void mlx::core::Ceil::eval()
{
  __assert_rtn("eval", "primitives.cpp", 117, "inputs.size() == 1");
}

void mlx::core::Cos::eval()
{
  __assert_rtn("eval", "primitives.cpp", 165, "inputs.size() == 1");
}

void mlx::core::Cosh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 177, "inputs.size() == 1");
}

void mlx::core::Erf::eval()
{
  __assert_rtn("eval", "primitives.cpp", 189, "inputs.size() == 1");
}

void mlx::core::ErfInv::eval()
{
  __assert_rtn("eval", "primitives.cpp", 209, "inputs.size() == 1");
}

void mlx::core::Exp::eval()
{
  __assert_rtn("eval", "primitives.cpp", 229, "inputs.size() == 1");
}

void mlx::core::Expm1::eval()
{
  __assert_rtn("eval", "primitives.cpp", 241, "inputs.size() == 1");
}

void mlx::core::Floor::eval()
{
  __assert_rtn("eval", "primitives.cpp", 253, "inputs.size() == 1");
}

void mlx::core::Full::eval()
{
  __assert_rtn("eval", "primitives.cpp", 266, "in.dtype() == out.dtype()");
}

{
  __assert_rtn("eval", "primitives.cpp", 264, "inputs.size() == 1");
}

void mlx::core::Log::eval()
{
  __assert_rtn("eval", "primitives.cpp", 279, "inputs.size() == 1");
}

void mlx::core::Log1p::eval()
{
  __assert_rtn("eval", "primitives.cpp", 301, "inputs.size() == 1");
}

void mlx::core::LogicalNot::eval()
{
  __assert_rtn("eval", "primitives.cpp", 313, "inputs.size() == 1");
}

void mlx::core::LogicalAnd::eval()
{
  __assert_rtn("eval", "primitives.cpp", 319, "inputs.size() == 2");
}

void mlx::core::LogicalOr::eval()
{
  __assert_rtn("eval", "primitives.cpp", 326, "inputs.size() == 2");
}

void mlx::core::Negative::eval()
{
  __assert_rtn("eval", "primitives.cpp", 333, "inputs.size() == 1");
}

void mlx::core::Pad::eval()
{
  __assert_rtn("eval", "primitives.cpp", 348, "val.dtype() == in.dtype() && in.dtype() == out.dtype()");
}

{
  __assert_rtn("eval", "primitives.cpp", 345, "val.size() == 1");
}

{
  __assert_rtn("eval", "primitives.cpp", 340, "inputs.size() == 2");
}

void mlx::core::RandomBits::eval()
{
  __assert_rtn("eval", "primitives.cpp", 370, "inputs.size() == 1");
}

void mlx::core::Reshape::eval()
{
  __assert_rtn("eval", "primitives.cpp", 418, "inputs.size() == 1");
}

void mlx::core::Round::eval()
{
  __assert_rtn("eval", "primitives.cpp", 431, "inputs.size() == 1");
}

void mlx::core::Sigmoid::eval()
{
  __assert_rtn("eval", "primitives.cpp", 442, "inputs.size() == 1");
}

void mlx::core::Sign::eval()
{
  __assert_rtn("eval", "primitives.cpp", 454, "inputs.size() == 1");
}

void mlx::core::Sin::eval()
{
  __assert_rtn("eval", "primitives.cpp", 464, "inputs.size() == 1");
}

void mlx::core::Sinh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 476, "inputs.size() == 1");
}

void mlx::core::Slice::eval()
{
  __assert_rtn("eval", "primitives.cpp", 488, "inputs.size() == 1");
}

void mlx::core::SliceUpdate::eval()
{
  __assert_rtn("eval", "primitives.cpp", 519, "inputs.size() == 2");
}

void mlx::core::Square::eval()
{
  __assert_rtn("eval", "primitives.cpp", 556, "inputs.size() == 1");
}

void mlx::core::Sqrt::eval()
{
  __assert_rtn("eval", "primitives.cpp", 562, "inputs.size() == 1");
}

void mlx::core::Tan::eval()
{
  __assert_rtn("eval", "primitives.cpp", 572, "inputs.size() == 1");
}

void mlx::core::Tanh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 584, "inputs.size() == 1");
}

void mlx::core::`anonymous namespace'::set_unary_output_data(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void mlx::core::AsStrided::eval()
{
  __assert_rtn("eval", "common.cpp", 10, "inputs.size() == 1");
}

void mlx::core::Broadcast::eval()
{
  __assert_rtn("eval", "common.cpp", 46, "inputs.size() == 1");
}

void mlx::core::Copy::eval()
{
  __assert_rtn("eval", "common.cpp", 65, "inputs.size() == 1");
}

void mlx::core::CustomVJP::eval()
{
  __assert_rtn("eval", "common.cpp", 72, "inputs.size() > outputs.size()");
}

void mlx::core::Depends::eval()
{
  __assert_rtn("eval", "common.cpp", 82, "inputs.size() > outputs.size()");
}

void mlx::core::NumberOfElements::eval()
{
  __assert_rtn("eval", "common.cpp", 89, "inputs.size() == 1");
}

void mlx::core::Split::eval()
{
  __assert_rtn("eval", "common.cpp", 204, "inputs.size() == 1");
}

void mlx::core::StopGradient::eval()
{
  __assert_rtn("eval", "common.cpp", 309, "inputs.size() == 1");
}

void mlx::core::Transpose::eval()
{
  __assert_rtn("eval", "common.cpp", 314, "inputs.size() == 1");
}

void mlx::core::ArgSort::eval()
{
  __assert_rtn("eval", "sort.cpp", 261, "inputs.size() == 1");
}

void mlx::core::Sort::eval()
{
  __assert_rtn("eval", "sort.cpp", 295, "inputs.size() == 1");
}

void mlx::core::ArgPartition::eval()
{
  __assert_rtn("eval", "sort.cpp", 329, "inputs.size() == 1");
}

void mlx::core::Partition::eval()
{
  __assert_rtn("eval", "sort.cpp", 363, "inputs.size() == 1");
}

void mlx::core::Reduce::eval_cpu()
{
  __assert_rtn("eval_cpu", "reduce.cpp", 75, "inputs.size() == 1");
}

void mlx::core::Scan::eval()
{
  __assert_rtn("eval", "scan.cpp", 249, "inputs.size() == 1");
}

void mlx::core::Reduce::eval()
{
  __assert_rtn("eval", "reduce.cpp", 172, "inputs.size() == 1");
}

void mlx::core::Select::eval()
{
  __assert_rtn("eval", "select.cpp", 65, "inputs.size() == 3");
}

void mlx::core::Add::eval()
{
  __assert_rtn("eval", "binary.cpp", 74, "inputs.size() == 2");
}

void mlx::core::DivMod::eval()
{
  __assert_rtn("eval", "binary.cpp", 83, "inputs.size() == 2");
}

void mlx::core::Divide::eval()
{
  __assert_rtn("eval", "binary.cpp", 136, "inputs.size() == 2");
}

void mlx::core::Remainder::eval()
{
  __assert_rtn("eval", "binary.cpp", 143, "inputs.size() == 2");
}

void mlx::core::Equal::eval()
{
  __assert_rtn("eval", "binary.cpp", 150, "inputs.size() == 2");
}

void mlx::core::Greater::eval()
{
  __assert_rtn("eval", "binary.cpp", 159, "inputs.size() == 2");
}

void mlx::core::GreaterEqual::eval()
{
  __assert_rtn("eval", "binary.cpp", 164, "inputs.size() == 2");
}

void mlx::core::Less::eval()
{
  __assert_rtn("eval", "binary.cpp", 169, "inputs.size() == 2");
}

void mlx::core::LessEqual::eval()
{
  __assert_rtn("eval", "binary.cpp", 174, "inputs.size() == 2");
}

void mlx::core::LogAddExp::eval()
{
  __assert_rtn("eval", "binary.cpp", 179, "inputs.size() == 2");
}

void mlx::core::Maximum::eval()
{
  __assert_rtn("eval", "binary.cpp", 200, "inputs.size() == 2");
}

void mlx::core::Minimum::eval()
{
  __assert_rtn("eval", "binary.cpp", 207, "inputs.size() == 2");
}

void mlx::core::Multiply::eval()
{
  __assert_rtn("eval", "binary.cpp", 214, "inputs.size() == 2");
}

void mlx::core::NotEqual::eval()
{
  __assert_rtn("eval", "binary.cpp", 221, "inputs.size() == 2");
}

void mlx::core::Power::eval()
{
  __assert_rtn("eval", "binary.cpp", 226, "inputs.size() == 2");
}

void mlx::core::Subtract::eval()
{
  __assert_rtn("eval", "binary.cpp", 233, "inputs.size() == 2");
}

void mlx::core::BitwiseBinary::eval_cpu()
{
  __assert_rtn("eval_cpu", "binary.cpp", 240, "inputs.size() == 2");
}

void mlx::core::ArcTan2::eval()
{
  __assert_rtn("eval", "binary.cpp", 297, "inputs.size() == 2");
}

void mlx::core::Scatter::eval()
{
  __assert_rtn("eval", "indexing.cpp", 327, "inputs.size() >= 2");
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(std::__shared_weak_count **a1, uint64_t a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v7 = *a1;
  if (*a1)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void mlx::core::ArgReduce::eval()
{
  __assert_rtn("eval", "arg_reduce.cpp", 65, "inputs.size() == 1");
}

void mlx::core::Abs::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 165, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 164, "primals.size() == 1");
}

void mlx::core::Abs::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 173, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 172, "inputs.size() == 1");
}

void mlx::core::`anonymous namespace'::vmap_binary_op()
{
  __assert_rtn("vmap_binary_op", "primitives.cpp", 25, "axes.size() == 2");
}

{
  __assert_rtn("vmap_binary_op", "primitives.cpp", 24, "inputs.size() == 2");
}

void mlx::core::ArcCos::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 283, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 282, "primals.size() == 1");
}

void mlx::core::ArcCos::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 294, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 293, "inputs.size() == 1");
}

void mlx::core::ArcCosh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 311, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 310, "primals.size() == 1");
}

void mlx::core::ArcCosh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 321, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 320, "inputs.size() == 1");
}

void mlx::core::ArcSin::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 338, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 337, "primals.size() == 1");
}

void mlx::core::ArcSin::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 348, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 347, "inputs.size() == 1");
}

void mlx::core::ArcSinh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 365, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 364, "primals.size() == 1");
}

void mlx::core::ArcSinh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 375, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 374, "inputs.size() == 1");
}

void mlx::core::ArcTan::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 392, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 391, "primals.size() == 1");
}

void mlx::core::ArcTan::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 402, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 401, "inputs.size() == 1");
}

void mlx::core::ArcTan2::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 419, "argnums.size() == 2");
}

{
  __assert_rtn("jvp", "primitives.cpp", 418, "primals.size() == 2");
}

void mlx::core::ArcTan2::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 431, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 430, "inputs.size() == 2");
}

void mlx::core::ArcTanh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 449, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 448, "primals.size() == 1");
}

void mlx::core::ArcTanh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 459, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 458, "inputs.size() == 1");
}

void mlx::core::ArgPartition::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 467, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 466, "inputs.size() == 1");
}

void mlx::core::ArgSort::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 501, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 500, "inputs.size() == 1");
}

void mlx::core::AsStrided::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 554, "argnums.size() == 1");
}

void mlx::core::AsStrided::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 583, "primals.size() == 1");
}

void mlx::core::Broadcast::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 637, "argnums.size() == 1");
}

void mlx::core::Broadcast::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 658, "argnums.size() == 1");
}

void mlx::core::Broadcast::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 666, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 665, "inputs.size() == 1");
}

void mlx::core::Ceil::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 699, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 698, "primals.size() == 1");
}

void mlx::core::Ceil::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 707, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 706, "inputs.size() == 1");
}

void mlx::core::Copy::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1028, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 1027, "primals.size() == 1");
}

void mlx::core::Copy::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1037, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1036, "primals.size() == 1");
}

void mlx::core::Copy::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1045, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1044, "inputs.size() == 1");
}

void mlx::core::Cos::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1062, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1061, "primals.size() == 1");
}

void mlx::core::Cos::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1071, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1070, "inputs.size() == 1");
}

void mlx::core::Cosh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1088, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1087, "primals.size() == 1");
}

void mlx::core::Cosh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1096, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1095, "inputs.size() == 1");
}

void mlx::core::Erf::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1302, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1301, "primals.size() == 1");
}

void mlx::core::Erf::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1315, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1314, "inputs.size() == 1");
}

void mlx::core::ErfInv::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1336, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1335, "primals.size() == 1");
}

void mlx::core::ErfInv::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1349, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1348, "inputs.size() == 1");
}

void mlx::core::Exp::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1366, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1365, "primals.size() == 1");
}

void mlx::core::Exp::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1374, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1373, "inputs.size() == 1");
}

void mlx::core::Expm1::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1394, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1393, "primals.size() == 1");
}

void mlx::core::Expm1::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1402, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1401, "inputs.size() == 1");
}

void mlx::core::Floor::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1508, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1507, "primals.size() == 1");
}

void mlx::core::Floor::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1516, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1515, "inputs.size() == 1");
}

void mlx::core::Full::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1526, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 1525, "primals.size() == 1");
}

void mlx::core::Full::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1535, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1534, "primals.size() == 1");
}

void mlx::core::Full::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1543, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1542, "inputs.size() == 1");
}

void mlx::core::Log::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1754, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1753, "primals.size() == 1");
}

void mlx::core::Log::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1767, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1766, "inputs.size() == 1");
}

void mlx::core::Log1p::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1791, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1790, "primals.size() == 1");
}

void mlx::core::Log1p::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1801, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1800, "inputs.size() == 1");
}

void mlx::core::LogicalNot::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1818, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1817, "primals.size() == 1");
}

void mlx::core::LogicalNot::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1826, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1825, "inputs.size() == 1");
}

void mlx::core::LogicalAnd::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1835, "primals.size() == 2");
}

void mlx::core::LogicalAnd::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1848, "argnums.size() <= 2");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1847, "primals.size() == 2");
}

void mlx::core::LogicalAnd::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1856, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1855, "inputs.size() == 2");
}

void mlx::core::LogicalOr::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1867, "primals.size() == 2");
}

void mlx::core::LogicalOr::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1880, "argnums.size() <= 2");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1879, "primals.size() == 2");
}

void mlx::core::LogicalOr::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1889, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1888, "inputs.size() == 2");
}

void mlx::core::Select::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2097, "tangents.size() == 3");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2096, "primals.size() == 3");
}

void mlx::core::Select::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2131, "cotangents.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2130, "primals.size() == 3");
}

void mlx::core::Select::vmap()
{
  __assert_rtn("vmap_ternary_op", "primitives.cpp", 61, "axes.size() == 3");
}

{
  __assert_rtn("vmap_ternary_op", "primitives.cpp", 60, "inputs.size() == 3");
}

void mlx::core::Negative::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2175, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2174, "primals.size() == 1");
}

void mlx::core::Negative::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2183, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2182, "inputs.size() == 1");
}

void mlx::core::Pad::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2219, "argnums.size() == 1 && argnums[0] == 0");
}

void mlx::core::Pad::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2239, "argnums.size() == 1 && argnums[0] == 0");
}

void mlx::core::Partition::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2276, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2275, "primals.size() == 1");
}

void mlx::core::Partition::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2286, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2285, "inputs.size() == 1");
}

void mlx::core::RandomBits::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2476, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2475, "inputs.size() == 1");
}

void mlx::core::Reshape::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2546, "argnums[0] == 0");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2545, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2544, "primals.size() == 1");
}

void mlx::core::Reshape::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2556, "argnums[0] == 0");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2555, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2554, "primals.size() == 1");
}

void mlx::core::Round::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2719, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2718, "primals.size() == 1");
}

void mlx::core::Round::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2727, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2726, "inputs.size() == 1");
}

void mlx::core::Scan::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2754, "argnums[0] == 0");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2753, "primals.size() == 1");
}

void mlx::core::Scan::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2776, "argnums[0] == 0");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2775, "tangents.size() == 1");
}

void mlx::core::Sigmoid::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2913, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2912, "primals.size() == 1");
}

void mlx::core::Sigmoid::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2924, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2923, "inputs.size() == 1");
}

void mlx::core::Sign::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2941, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2940, "primals.size() == 1");
}

void mlx::core::Sign::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2949, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2948, "inputs.size() == 1");
}

void mlx::core::Sin::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2966, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2965, "primals.size() == 1");
}

void mlx::core::Sin::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2974, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2973, "inputs.size() == 1");
}

void mlx::core::Sinh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2991, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2990, "primals.size() == 1");
}

void mlx::core::Sinh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2999, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2998, "inputs.size() == 1");
}

void mlx::core::Slice::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3025, "primals.size() == 1");
}

void mlx::core::Slice::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3090, "primals.size() == 1");
}

void mlx::core::SliceUpdate::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3105, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3104, "inputs.size() == 2");
}

void mlx::core::SliceUpdate::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3154, "primals.size() == 2");
}

void mlx::core::SliceUpdate::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3192, "primals.size() == 2");
}

void mlx::core::Sort::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3265, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3264, "inputs.size() == 1");
}

void mlx::core::Sort::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3284, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3283, "primals.size() == 1");
}

void mlx::core::Square::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3335, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3334, "primals.size() == 1");
}

void mlx::core::Square::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3346, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3345, "inputs.size() == 1");
}

void mlx::core::Sqrt::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3356, "cotangents.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 3355, "primals.size() == 1");
}

void mlx::core::Sqrt::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3387, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3386, "inputs.size() == 1");
}

void mlx::core::Tan::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3456, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3455, "primals.size() == 1");
}

void mlx::core::Tan::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3465, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3464, "inputs.size() == 1");
}

void mlx::core::Tanh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3482, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3481, "primals.size() == 1");
}

void mlx::core::Tanh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3491, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3490, "inputs.size() == 1");
}

void mlx::core::Transpose::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3817, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 3816, "primals.size() == 1");
}

void mlx::core::Transpose::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3830, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3829, "primals.size() == 1");
}

void mlx::core::Transpose::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3838, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3837, "inputs.size() == 1");
}

void mlx::core::NumberOfElements::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3860, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3859, "inputs.size() == 1");
}

void mlx::core::Abs::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 95, "inputs.size() == 1");
}

void mlx::core::Add::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 109, "inputs.size() == 2");
}

void mlx::core::ArcCos::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 149, "inputs.size() == 1");
}

void mlx::core::ArcCosh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 161, "inputs.size() == 1");
}

void mlx::core::ArcSin::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 173, "inputs.size() == 1");
}

void mlx::core::ArcSinh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 185, "inputs.size() == 1");
}

void mlx::core::ArcTan::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 197, "inputs.size() == 1");
}

void mlx::core::ArcTan2::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 209, "inputs.size() == 2");
}

void mlx::core::ArcTanh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 229, "inputs.size() == 1");
}

void mlx::core::AsType::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 241, "inputs.size() == 1");
}

void mlx::core::Cos::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 270, "inputs.size() == 1");
}

void mlx::core::Cosh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 282, "inputs.size() == 1");
}

void mlx::core::Divide::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 294, "inputs.size() == 2");
}

void mlx::core::Exp::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 332, "inputs.size() == 1");
}

void mlx::core::Expm1::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 348, "inputs.size() == 1");
}

void mlx::core::Full::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 363, "in.dtype() == out.dtype()");
}

{
  __assert_rtn("eval_cpu", "primitives.cpp", 361, "inputs.size() == 1");
}

void mlx::core::Log::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 373, "inputs.size() == 1");
}

void mlx::core::Log1p::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 398, "inputs.size() == 1");
}

void mlx::core::Multiply::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 415, "inputs.size() == 2");
}

void mlx::core::Negative::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 440, "inputs.size() == 1");
}

void mlx::core::Power::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 451, "inputs.size() == 2");
}

void mlx::core::Scan::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 471, "inputs.size() == 1");
}

void mlx::core::Sin::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 502, "inputs.size() == 1");
}

void mlx::core::Sinh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 514, "inputs.size() == 1");
}

void mlx::core::Square::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 526, "inputs.size() == 1");
}

void mlx::core::Sqrt::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 538, "inputs.size() == 1");
}

void mlx::core::Subtract::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 554, "inputs.size() == 2");
}

void mlx::core::Tan::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 594, "inputs.size() == 1");
}

void mlx::core::Tanh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 606, "inputs.size() == 1");
}

uint64_t sub_24259F888()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_24259F894()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_24259F8A0()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_24259F8AC()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_24259F8B8()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_24259F8C4()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_24259F8D0()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_24259F8DC()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_24259F8E8()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_24259F8F4()
{
  return MEMORY[0x24BDCDB80]();
}

uint64_t sub_24259F900()
{
  return MEMORY[0x24BDCDBB0]();
}

uint64_t sub_24259F90C()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_24259F918()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_24259F924()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_24259F930()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_24259F93C()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t sub_24259F948()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t sub_24259F954()
{
  return MEMORY[0x24BEE0228]();
}

uint64_t sub_24259F960()
{
  return MEMORY[0x24BEE0240]();
}

uint64_t sub_24259F96C()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_24259F978()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_24259F984()
{
  return MEMORY[0x24BEE02B8]();
}

uint64_t sub_24259F990()
{
  return MEMORY[0x24BEE02C0]();
}

uint64_t sub_24259F99C()
{
  return MEMORY[0x24BEE0300]();
}

uint64_t _sSD8MorpheusE3lenSiyF_0()
{
  return MEMORY[0x24BEE0370]();
}

uint64_t sub_24259F9B4()
{
  return MEMORY[0x24BEE0378]();
}

uint64_t sub_24259F9C0()
{
  return MEMORY[0x24BEE03E8]();
}

uint64_t sub_24259F9CC()
{
  return MEMORY[0x24BEE03F8]();
}

uint64_t sub_24259F9D8()
{
  return MEMORY[0x24BEE0450]();
}

uint64_t sub_24259F9E4()
{
  return MEMORY[0x24BEE0458]();
}

uint64_t sub_24259F9F0()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_24259F9FC()
{
  return MEMORY[0x24BEE0490]();
}

uint64_t sub_24259FA08()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_24259FA14()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_24259FA20()
{
  return MEMORY[0x24BEE04B8]();
}

uint64_t sub_24259FA2C()
{
  return MEMORY[0x24BEE05A0]();
}

uint64_t sub_24259FA38()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_24259FA44()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t sub_24259FA50()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_24259FA5C()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_24259FA68()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_24259FA74()
{
  return MEMORY[0x24BEE07F8]();
}

uint64_t sub_24259FA80()
{
  return MEMORY[0x24BEE0800]();
}

uint64_t sub_24259FA8C()
{
  return MEMORY[0x24BEE0808]();
}

uint64_t sub_24259FA98()
{
  return MEMORY[0x24BEE0960]();
}

uint64_t sub_24259FAA4()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_24259FAB0()
{
  return MEMORY[0x24BEE0990]();
}

uint64_t sub_24259FABC()
{
  return MEMORY[0x24BEE0998]();
}

uint64_t sub_24259FAC8()
{
  return MEMORY[0x24BEE09B0]();
}

uint64_t sub_24259FAD4()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_24259FAE0()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_24259FAEC()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_24259FAF8()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_24259FB04()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_24259FB10()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_24259FB1C()
{
  return MEMORY[0x24BEE09F8]();
}

uint64_t sub_24259FB28()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_24259FB34()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_24259FB40()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t _sSS8MorpheusE3lenSiyF_0()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_24259FB58()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_24259FB64()
{
  return MEMORY[0x24BEE0B78]();
}

uint64_t sub_24259FB70()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_24259FB7C()
{
  return MEMORY[0x24BEE0BE0]();
}

uint64_t sub_24259FB88()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_24259FB94()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_24259FBA0()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_24259FBAC()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_24259FBB8()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_24259FBC4()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_24259FBD0()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_24259FBDC()
{
  return MEMORY[0x24BEE0CE8]();
}

uint64_t sub_24259FBE8()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_24259FBF4()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_24259FC00()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_24259FC0C()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_24259FC18()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_24259FC24()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t sub_24259FC30()
{
  return MEMORY[0x24BEE0E48]();
}

uint64_t sub_24259FC3C()
{
  return MEMORY[0x24BEE0E50]();
}

uint64_t sub_24259FC48()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t sub_24259FC54()
{
  return MEMORY[0x24BEE0E90]();
}

uint64_t sub_24259FC60()
{
  return MEMORY[0x24BEE0EC0]();
}

uint64_t sub_24259FC6C()
{
  return MEMORY[0x24BEE0ED0]();
}

uint64_t sub_24259FC78()
{
  return MEMORY[0x24BEE0ED8]();
}

uint64_t sub_24259FC84()
{
  return MEMORY[0x24BEE0F08]();
}

uint64_t sub_24259FC90()
{
  return MEMORY[0x24BEE0F30]();
}

uint64_t sub_24259FC9C()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_24259FCA8()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_24259FCB4()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_24259FCC0()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_24259FCCC()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_24259FCD8()
{
  return MEMORY[0x24BEE1138]();
}

uint64_t sub_24259FCE4()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t sub_24259FCF0()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_24259FCFC()
{
  return MEMORY[0x24BEE1178]();
}

uint64_t sub_24259FD08()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_24259FD14()
{
  return MEMORY[0x24BEE1188]();
}

uint64_t sub_24259FD20()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_24259FD2C()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t sub_24259FD38()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_24259FD44()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_24259FD50()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_24259FD5C()
{
  return MEMORY[0x24BEE1220]();
}

uint64_t sub_24259FD68()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_24259FD74()
{
  return MEMORY[0x24BEE1278]();
}

uint64_t sub_24259FD80()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_24259FD8C()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_24259FD98()
{
  return MEMORY[0x24BDCFC00]();
}

uint64_t sub_24259FDA4()
{
  return MEMORY[0x24BEE14A8]();
}

uint64_t sub_24259FDB0()
{
  return MEMORY[0x24BEE14D0]();
}

uint64_t sub_24259FDBC()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_24259FDC8()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_24259FDD4()
{
  return MEMORY[0x24BEE7608]();
}

uint64_t sub_24259FDE0()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_24259FDEC()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_24259FDF8()
{
  return MEMORY[0x24BEE1950]();
}

uint64_t sub_24259FE04()
{
  return MEMORY[0x24BEE1988]();
}

uint64_t sub_24259FE10()
{
  return MEMORY[0x24BEE1990]();
}

uint64_t sub_24259FE1C()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_24259FE28()
{
  return MEMORY[0x24BEE19C0]();
}

uint64_t sub_24259FE34()
{
  return MEMORY[0x24BEE19F8]();
}

uint64_t sub_24259FE40()
{
  return MEMORY[0x24BEE1A18]();
}

uint64_t sub_24259FE4C()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_24259FE58()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t sub_24259FE64()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_24259FE70()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_24259FE7C()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_24259FE88()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_24259FE94()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_24259FEA0()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_24259FEAC()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_24259FEB8()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_24259FEC4()
{
  return MEMORY[0x24BDD0618]();
}

uint64_t sub_24259FED0()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_24259FEDC()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t sub_24259FEE8()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t sub_24259FEF4()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t sub_24259FF00()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t sub_24259FF0C()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t sub_24259FF18()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_24259FF24()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_24259FF30()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_24259FF3C()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_24259FF48()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_24259FF54()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_24259FF60()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_24259FF6C()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_24259FF78()
{
  return MEMORY[0x24BEE2508]();
}

uint64_t sub_24259FF84()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_24259FF90()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_24259FF9C()
{
  return MEMORY[0x24BEE2588]();
}

uint64_t sub_24259FFA8()
{
  return MEMORY[0x24BEE2628]();
}

uint64_t sub_24259FFB4()
{
  return MEMORY[0x24BEE2630]();
}

uint64_t sub_24259FFC0()
{
  return MEMORY[0x24BEE2648]();
}

uint64_t sub_24259FFCC()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t sub_24259FFD8()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_24259FFE4()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_24259FFF0()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_24259FFFC()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t sub_2425A0008()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_2425A0014()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_2425A0020()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_2425A002C()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_2425A0038()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_2425A0044()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_2425A0050()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_2425A005C()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_2425A0068()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_2425A0074()
{
  return MEMORY[0x24BEE2B20]();
}

uint64_t sub_2425A0080()
{
  return MEMORY[0x24BEE2BD8]();
}

uint64_t sub_2425A008C()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_2425A0098()
{
  return MEMORY[0x24BEE2DE0]();
}

uint64_t sub_2425A00A4()
{
  return MEMORY[0x24BEE2E38]();
}

uint64_t sub_2425A00B0()
{
  return MEMORY[0x24BEE2E58]();
}

uint64_t sub_2425A00BC()
{
  return MEMORY[0x24BEE2E78]();
}

uint64_t sub_2425A00C8()
{
  return MEMORY[0x24BEE2E90]();
}

uint64_t sub_2425A00D4()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_2425A00E0()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_2425A00EC()
{
  return MEMORY[0x24BEE2F60]();
}

uint64_t sub_2425A00F8()
{
  return MEMORY[0x24BEE2F90]();
}

uint64_t sub_2425A0104()
{
  return MEMORY[0x24BEE2F98]();
}

uint64_t sub_2425A0110()
{
  return MEMORY[0x24BEE2FA0]();
}

uint64_t sub_2425A011C()
{
  return MEMORY[0x24BEE2FB0]();
}

uint64_t sub_2425A0128()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_2425A0134()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t sub_2425A0140()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_2425A014C()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_2425A0158()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_2425A0164()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_2425A0170()
{
  return MEMORY[0x24BEE3168]();
}

uint64_t sub_2425A017C()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_2425A0188()
{
  return MEMORY[0x24BEE32B0]();
}

uint64_t sub_2425A0194()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_2425A01A0()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_2425A01AC()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_2425A01B8()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_2425A01C4()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_2425A01D0()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_2425A01DC()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_2425A01E8()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_2425A01F4()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_2425A0200()
{
  return MEMORY[0x24BEE35C8]();
}

uint64_t sub_2425A020C()
{
  return MEMORY[0x24BEE3638]();
}

uint64_t sub_2425A0218()
{
  return MEMORY[0x24BEE3668]();
}

uint64_t sub_2425A0224()
{
  return MEMORY[0x24BEE3930]();
}

uint64_t sub_2425A0230()
{
  return MEMORY[0x24BEE3938]();
}

uint64_t sub_2425A023C()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t sub_2425A0248()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_2425A0254()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_2425A0260()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_2425A026C()
{
  return MEMORY[0x24BEE3D90]();
}

uint64_t sub_2425A0278()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t sub_2425A0284()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_2425A0290()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_2425A029C()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_2425A02A8()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_2425A02B4()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_2425A02C0()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_2425A02CC()
{
  return MEMORY[0x24BEE3F18]();
}

uint64_t sub_2425A02D8()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_2425A02E4()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_2425A02F0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_2425A02FC()
{
  return MEMORY[0x24BEE4358]();
}

uint64_t sub_2425A0308()
{
  return MEMORY[0x24BEE4398]();
}

uint64_t sub_2425A0314()
{
  return MEMORY[0x24BEE43B0]();
}

uint64_t sub_2425A0320()
{
  return MEMORY[0x24BEE43D0]();
}

uint64_t sub_2425A032C()
{
  return MEMORY[0x24BEE43D8]();
}

uint64_t sub_2425A0338()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_2425A0344()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_2425A0350()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_2425A035C()
{
  return MEMORY[0x24BEE4A98]();
}

int BNNSFilterApplyTwoInput(void *filter, const void *inA, const void *inB, void *out)
{
  return MEMORY[0x24BDB2830](filter, inA, inB, out);
}

void *__cdecl BNNSFilterCreateLayerBroadcastMatMul(const BNNSLayerParametersBroadcastMatMul *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2850](layer_params, filter_params);
}

void BNNSFilterDestroy(void *filter)
{
  MEMORY[0x24BDB2878](filter);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x24BDE8D48](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D70](allocator);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF78]();
}

void std::shared_future<void>::~shared_future(std::shared_future<void> *this)
{
  MEMORY[0x24BEDAFF0](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0D8](this);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  MEMORY[0x24BEDB100](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB110](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

void std::future<void>::~future(std::future<void> *this)
{
  MEMORY[0x24BEDB410](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x24BEDB468](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return (std::future<void>)MEMORY[0x24BEDB4C0](this);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
  MEMORY[0x24BEDB4D0](this);
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return (std::promise<void> *)MEMORY[0x24BEDB4D8](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
  MEMORY[0x24BEDB4E0](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_251345D80(__p);
}

uint64_t operator delete()
{
  return off_251345D88();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_251345D90(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_251345D98(__sz, a2);
}

uint64_t operator new()
{
  return off_251345DA0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x24BEE4B28]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float acoshf(float a1)
{
  float result;

  MEMORY[0x24BDAD120](a1);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

float asinhf(float a1)
{
  float result;

  MEMORY[0x24BDAD1A0](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x24BDAD230](a1);
  return result;
}

float atanhf(float a1)
{
  float result;

  MEMORY[0x24BDAD240](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

uint64_t cblas_sgemm_NEWLAPACK()
{
  return MEMORY[0x24BDB2BD0]();
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

float coshf(float a1)
{
  float result;

  MEMORY[0x24BDADBF8](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

float expm1f(float a1)
{
  float result;

  MEMORY[0x24BDAE298](a1);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  ldiv_t result;

  v2 = MEMORY[0x24BDAEA40](a1, a2);
  result.rem = v3;
  result.quot = v2;
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x24BDAEAB8](a1);
  return result;
}

float log1pf(float a1)
{
  float result;

  MEMORY[0x24BDAEAC8](a1);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

float nextafterf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF118](a1, a2);
  return result;
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

uint64_t sgeqrf_NEWLAPACK()
{
  return MEMORY[0x24BDB2F58]();
}

uint64_t sgesvdx_NEWLAPACK()
{
  return MEMORY[0x24BDB2FA8]();
}

uint64_t sgetrf_NEWLAPACK()
{
  return MEMORY[0x24BDB2FB0]();
}

uint64_t sgetri_NEWLAPACK()
{
  return MEMORY[0x24BDB2FC0]();
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

float sinhf(float a1)
{
  float result;

  MEMORY[0x24BDAFE30](a1);
  return result;
}

uint64_t sorgqr_NEWLAPACK()
{
  return MEMORY[0x24BDB3008]();
}

uint64_t spotrf_NEWLAPACK()
{
  return MEMORY[0x24BDB30A0]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocBox()
{
  return MEMORY[0x24BEE4BF8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x24BEE4C20]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x24BEE4E88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

float tanf(float a1)
{
  float result;

  MEMORY[0x24BDB0140](a1);
  return result;
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x24BDB0150](a1);
  return result;
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3220](__A, __IA, __C, __N);
}

void vDSP_minv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3260](__A, __IA, __C, __N);
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB32C8](__A, __B, __IB, __C, __IC, __N);
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32D0](__A, __I, __C, __N);
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB32F8](__A, __IA, __C, __IC, __N);
}

void vDSP_vabsi(const int *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3300](__A, __IA, __C, __IC, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3308](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vaddi(const int *__A, vDSP_Stride __IA, const int *__B, vDSP_Stride __IB, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3318](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vdiv(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3350](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_vdivi(const int *__B, vDSP_Stride __IB, const int *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3358](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3368](__A, __C, __IC, __N);
}

void vDSP_vfix32(const float *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3380](__A, __IA, __C, __IC, __N);
}

void vDSP_vfixu32(const float *__A, vDSP_Stride __IA, unsigned int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3390](__A, __IA, __C, __IC, __N);
}

void vDSP_vflt32(const int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB33A8](__A, __IA, __C, __IC, __N);
}

void vDSP_vfltu32(const unsigned int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB33D8](__A, __IA, __C, __IC, __N);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3430](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vneg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3440](__A, __IA, __C, __IC, __N);
}

void vDSP_vrsum(const float *__A, vDSP_Stride __IA, const float *__S, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3488](__A, __IA, __S, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3498](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsaddi(const int *__A, vDSP_Stride __IA, const int *__B, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34A8](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34C0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsdivi(const int *__A, vDSP_Stride __IA, const int *__B, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34D0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsmsa(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x24BDB34E0](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34F0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3528](__A, __IA, __C, __IC, __N);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3530](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vvacosf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3AE0](a1, a2, a3);
}

void vvacoshf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3AE8](a1, a2, a3);
}

void vvasinf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3AF0](a1, a2, a3);
}

void vvasinhf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3AF8](a1, a2, a3);
}

void vvatan2f(float *a1, const float *a2, const float *a3, const int *a4)
{
  MEMORY[0x24BDB3B00](a1, a2, a3, a4);
}

void vvatanf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B08](a1, a2, a3);
}

void vvatanhf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B10](a1, a2, a3);
}

void vvcosf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B18](a1, a2, a3);
}

void vvcoshf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B20](a1, a2, a3);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B30](a1, a2, a3);
}

void vvexpm1f(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B38](a1, a2, a3);
}

void vvlog10f(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B40](a1, a2, a3);
}

void vvlog1pf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B48](a1, a2, a3);
}

void vvlog2f(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B50](a1, a2, a3);
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B58](a1, a2, a3);
}

void vvpowf(float *a1, const float *a2, const float *a3, const int *a4)
{
  MEMORY[0x24BDB3B60](a1, a2, a3, a4);
}

void vvrsqrtf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B70](a1, a2, a3);
}

void vvsinf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B80](a1, a2, a3);
}

void vvsinhf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B88](a1, a2, a3);
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B90](a1, a2, a3);
}

void vvtanf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B98](a1, a2, a3);
}

