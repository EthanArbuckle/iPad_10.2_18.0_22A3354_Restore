void mlx::core::`anonymous namespace'::binary<mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_5,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_6,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_7>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int **v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int **v85;
  int *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int **v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int **v100;
  int *v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int **v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int **v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int **v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  vDSP_Length v169;
  int *v170;
  uint64_t v171;
  _BYTE *v172;
  int *v173;
  BOOL *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  int v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  vDSP_Length v187;
  int *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  vDSP_Length v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  _DWORD *v209;
  int *v210;
  _DWORD *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  int v216;
  int v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int *v223;
  vDSP_Length v224;
  int *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  int v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int *v241;
  vDSP_Length v242;
  uint64_t v243;
  int *v244;
  uint64_t v245;
  _DWORD *v246;
  int *v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  int v252;
  int v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  vDSP_Length v261;
  uint64_t v262;
  int *v263;
  uint64_t v264;
  _QWORD *v265;
  int *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  int v271;
  int v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int *v279;
  vDSP_Length v280;
  uint64_t v281;
  int *v282;
  uint64_t v283;
  float *v284;
  float *v285;
  float *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  ldiv_t v294;
  uint64_t v295;
  int *v296;
  uint64_t v297;
  int v298;
  ldiv_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  BOOL *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int *v327;
  uint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  int *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int *v349;
  uint64_t v350;
  unint64_t v351;
  _QWORD *v352;
  int *v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  ldiv_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  ldiv_t v383;
  int v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int *v390;
  uint64_t v391;
  unint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int *v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  int *v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  ldiv_t v439;
  uint64_t v440;
  int *v441;
  uint64_t v442;
  int v443;
  ldiv_t v444;
  int v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  int *v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  unint64_t i;
  uint64_t v461;
  int v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int *v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  int *v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  int v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  unint64_t j;
  uint64_t v483;
  uint64_t v484;
  int v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int *v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  int *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  int v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  int v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  unint64_t k;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  ldiv_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  ldiv_t v529;
  int v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int *v536;
  uint64_t v537;
  unint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  int *v541;
  uint64_t v542;
  unint64_t v543;
  int v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int *v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  _QWORD *v554;
  uint64_t v555;
  int *v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t v560;
  int v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  int *v567;
  uint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  int *v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  int v584;
  ldiv_t v585;
  uint64_t v586;
  int *v587;
  uint64_t v588;
  int v589;
  ldiv_t v590;
  int v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int *v597;
  uint64_t v598;
  uint64_t *v599;
  uint64_t v600;
  uint64_t v601;
  int *v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  unint64_t m;
  uint64_t v607;
  int v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int *v614;
  uint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t v618;
  int *v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  int v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  unint64_t n;
  uint64_t v629;
  uint64_t v630;
  int v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int *v637;
  uint64_t v638;
  uint64_t *v639;
  uint64_t v640;
  uint64_t v641;
  int *v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  int v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  int v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  unint64_t ii;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  ldiv_t v665;
  uint64_t v666;
  int *v667;
  uint64_t v668;
  int v669;
  ldiv_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int *v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  uint64_t v682;
  int *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  _QWORD *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int *v698;
  uint64_t v699;
  unint64_t v700;
  _QWORD *v701;
  uint64_t v702;
  int *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int *v720;
  uint64_t v721;
  unint64_t v722;
  _QWORD *v723;
  int *v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  ldiv_t v744;
  uint64_t v745;
  int *v746;
  uint64_t v747;
  int v748;
  ldiv_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int *v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  uint64_t v761;
  int *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  float *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  int *v777;
  uint64_t v778;
  unint64_t v779;
  _QWORD *v780;
  uint64_t v781;
  int *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  int *v799;
  uint64_t v800;
  unint64_t v801;
  _QWORD *v802;
  int *v803;
  uint64_t v804;
  unint64_t v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  unint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  int *v823;
  vDSP_Length v824;
  int *v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int *v830;
  vDSP_Length v831;
  int *v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  int *v837;
  vDSP_Length v838;
  int *v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int *v844;
  vDSP_Length v845;
  int *v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int *v851;
  vDSP_Length v852;
  uint64_t v853;
  int *v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int *v859;
  vDSP_Length v860;
  uint64_t v861;
  int *v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  int *v867;
  vDSP_Length v868;
  int *v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int *v874;
  vDSP_Length v875;
  int *v876;
  unint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int *v881;
  vDSP_Length v882;
  uint64_t v883;
  int *v884;
  unint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int *v889;
  vDSP_Length v890;
  uint64_t v891;
  int *v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  int *v897;
  vDSP_Length v898;
  uint64_t v899;
  int *v900;
  unint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  int *v905;
  vDSP_Length v906;
  uint64_t v907;
  int *v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  int *v913;
  vDSP_Length v914;
  uint64_t v915;
  int *v916;
  unint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int *v921;
  vDSP_Length v922;
  uint64_t v923;
  int *v924;
  int v925;
  uint64_t v926;
  uint64_t v927;
  int *v928;
  int *v929;
  unint64_t v930;
  _QWORD *v931;
  uint64_t v932;
  int *v933;
  uint64_t v934;
  unint64_t v935;
  unint64_t v936;
  int *v937;
  uint64_t v938;
  unint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  ldiv_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  ldiv_t v951;
  int v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  int *v957;
  vDSP_Length v958;
  int *v959;
  unint64_t v960;
  _QWORD *v961;
  uint64_t v962;
  int *v963;
  uint64_t v964;
  unint64_t v965;
  unint64_t v966;
  int *v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  int v973;
  ldiv_t v974;
  uint64_t v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  ldiv_t v981;
  int v982;
  uint64_t v983;
  uint64_t v984;
  int *v985;
  uint64_t v986;
  unint64_t v987;
  _QWORD *v988;
  uint64_t v989;
  int *v990;
  uint64_t v991;
  unint64_t v992;
  unint64_t v993;
  int *v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int v1000;
  ldiv_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int v1007;
  ldiv_t v1008;
  int v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int *v1014;
  vDSP_Length v1015;
  int *v1016;
  unint64_t v1017;
  _QWORD *v1018;
  uint64_t v1019;
  int *v1020;
  uint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  int *v1024;
  uint64_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  int v1030;
  ldiv_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  ldiv_t v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  int *v1042;
  uint64_t v1043;
  unint64_t v1044;
  _QWORD *v1045;
  uint64_t v1046;
  int *v1047;
  uint64_t v1048;
  unint64_t v1049;
  unint64_t v1050;
  int *v1051;
  uint64_t v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  ldiv_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064;
  ldiv_t v1065;
  int v1066;
  uint64_t v1067;
  uint64_t v1068;
  int *v1069;
  uint64_t v1070;
  unint64_t v1071;
  _QWORD *v1072;
  uint64_t v1073;
  int *v1074;
  uint64_t v1075;
  unint64_t v1076;
  unint64_t v1077;
  int *v1078;
  uint64_t v1079;
  unint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  ldiv_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  ldiv_t v1092;
  int v1093;
  uint64_t v1094;
  uint64_t v1095;
  int *v1096;
  uint64_t v1097;
  unint64_t v1098;
  _QWORD *v1099;
  uint64_t v1100;
  int *v1101;
  uint64_t v1102;
  unint64_t v1103;
  unint64_t v1104;
  int *v1105;
  uint64_t v1106;
  unint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  int v1111;
  ldiv_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  ldiv_t v1119;
  int v1120;
  uint64_t v1121;
  uint64_t v1122;
  int *v1123;
  int *v1124;
  unint64_t v1125;
  _QWORD *v1126;
  uint64_t v1127;
  int *v1128;
  uint64_t v1129;
  unint64_t v1130;
  unint64_t v1131;
  int *v1132;
  uint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  int quot;
  ldiv_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  int v1145;
  ldiv_t v1146;
  int v1147;
  uint64_t v1148;
  uint64_t v1149;
  int *v1150;
  int *v1151;
  unint64_t v1152;
  _QWORD *v1153;
  uint64_t v1154;
  int *v1155;
  uint64_t v1156;
  unint64_t v1157;
  unint64_t v1158;
  int *v1159;
  uint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  ldiv_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  ldiv_t v1173;
  int v1174;
  unint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  int *v1179;
  vDSP_Length v1180;
  int *v1181;
  unint64_t v1182;
  _QWORD *v1183;
  uint64_t v1184;
  int *v1185;
  uint64_t v1186;
  unint64_t v1187;
  unint64_t v1188;
  int *v1189;
  uint64_t v1190;
  unint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  int v1195;
  ldiv_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  int v1202;
  ldiv_t v1203;
  int v1204;
  unint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  int *v1209;
  vDSP_Length v1210;
  int *v1211;
  unint64_t v1212;
  _QWORD *v1213;
  uint64_t v1214;
  int *v1215;
  uint64_t v1216;
  unint64_t v1217;
  unint64_t v1218;
  int *v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  int v1225;
  ldiv_t v1226;
  uint64_t v1227;
  unint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  int v1232;
  ldiv_t v1233;
  int v1234;
  uint64_t v1235;
  uint64_t v1236;
  int *v1237;
  uint64_t v1238;
  unint64_t v1239;
  _QWORD *v1240;
  uint64_t v1241;
  int *v1242;
  uint64_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  int *v1246;
  uint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  int v1252;
  ldiv_t v1253;
  uint64_t v1254;
  unint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  int v1259;
  ldiv_t v1260;
  int v1261;
  uint64_t v1262;
  uint64_t v1263;
  int *v1264;
  uint64_t v1265;
  unint64_t v1266;
  _QWORD *v1267;
  uint64_t v1268;
  int *v1269;
  uint64_t v1270;
  unint64_t v1271;
  unint64_t v1272;
  int *v1273;
  uint64_t v1274;
  unint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  int v1279;
  ldiv_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  int v1286;
  ldiv_t v1287;
  int v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int *v1293;
  vDSP_Length v1294;
  int *v1295;
  unint64_t v1296;
  _QWORD *v1297;
  uint64_t v1298;
  int *v1299;
  uint64_t v1300;
  unint64_t v1301;
  unint64_t v1302;
  int *v1303;
  uint64_t v1304;
  unint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  int v1309;
  ldiv_t v1310;
  uint64_t v1311;
  unint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  ldiv_t v1317;
  int v1318;
  unint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  int *v1323;
  vDSP_Length v1324;
  int *v1325;
  unint64_t v1326;
  _QWORD *v1327;
  uint64_t v1328;
  int *v1329;
  uint64_t v1330;
  unint64_t v1331;
  unint64_t v1332;
  int *v1333;
  uint64_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  int v1339;
  ldiv_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  ldiv_t v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  int *v1351;
  uint64_t v1352;
  unint64_t v1353;
  _QWORD *v1354;
  uint64_t v1355;
  int *v1356;
  uint64_t v1357;
  unint64_t v1358;
  unint64_t v1359;
  int *v1360;
  uint64_t v1361;
  unint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  int v1366;
  ldiv_t v1367;
  uint64_t v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int v1373;
  ldiv_t v1374;
  int v1375;
  uint64_t v1376;
  uint64_t v1377;
  int *v1378;
  uint64_t v1379;
  unint64_t v1380;
  _QWORD *v1381;
  uint64_t v1382;
  int *v1383;
  uint64_t v1384;
  unint64_t v1385;
  unint64_t v1386;
  int *v1387;
  uint64_t v1388;
  unint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  int v1393;
  ldiv_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  int v1400;
  ldiv_t v1401;
  int v1402;
  uint64_t v1403;
  uint64_t v1404;
  int *v1405;
  uint64_t v1406;
  unint64_t v1407;
  _QWORD *v1408;
  uint64_t v1409;
  int *v1410;
  uint64_t v1411;
  unint64_t v1412;
  unint64_t v1413;
  int *v1414;
  uint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  ldiv_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  ldiv_t v1428;
  int v1429;
  uint64_t v1430;
  uint64_t v1431;
  int *v1432;
  uint64_t v1433;
  unint64_t v1434;
  _QWORD *v1435;
  uint64_t v1436;
  int *v1437;
  uint64_t v1438;
  unint64_t v1439;
  unint64_t v1440;
  int *v1441;
  uint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  int v1447;
  ldiv_t v1448;
  uint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  int v1454;
  ldiv_t v1455;
  int v1456;
  uint64_t v1457;
  uint64_t v1458;
  int *v1459;
  uint64_t v1460;
  unint64_t v1461;
  _QWORD *v1462;
  uint64_t v1463;
  int *v1464;
  uint64_t v1465;
  unint64_t v1466;
  unint64_t v1467;
  int *v1468;
  uint64_t v1469;
  unint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  int v1474;
  ldiv_t v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  ldiv_t v1482;
  int v1483;
  uint64_t v1484;
  uint64_t v1485;
  int *v1486;
  uint64_t v1487;
  unint64_t v1488;
  _QWORD *v1489;
  uint64_t v1490;
  int *v1491;
  uint64_t v1492;
  unint64_t v1493;
  unint64_t v1494;
  int *v1495;
  uint64_t v1496;
  unint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  int v1501;
  ldiv_t v1502;
  uint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  int v1508;
  ldiv_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  int *v1519;
  unint64_t v1520;
  int *v1521;
  int *v1522;
  int *v1523;
  unint64_t v1524;
  int *v1525;
  uint64_t v1526;
  unint64_t v1527;
  unint64_t v1528;
  unint64_t v1529;
  unint64_t v1530;
  unint64_t v1531;
  unint64_t v1532;
  unint64_t v1533;
  unint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  unint64_t v1537;
  unint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  vDSP_Length v1548;
  vDSP_Length v1549;
  vDSP_Length v1550;
  vDSP_Length v1551;
  vDSP_Length v1552;
  vDSP_Length v1553;
  vDSP_Length v1554;
  vDSP_Length v1555;
  vDSP_Length v1556;
  vDSP_Length v1557;
  vDSP_Length v1558;
  unint64_t v1559;
  vDSP_Length v1560;
  unint64_t v1561;
  vDSP_Length v1562;
  vDSP_Length v1563;
  vDSP_Length v1564;
  vDSP_Length v1565;
  vDSP_Length v1566;
  vDSP_Length v1567;
  vDSP_Length v1568;
  vDSP_Length v1569;
  vDSP_Length v1570;
  vDSP_Length v1571;
  vDSP_Length v1572;
  vDSP_Length v1573;
  vDSP_Length v1574;
  vDSP_Length v1575;
  vDSP_Length v1576;
  vDSP_Length v1577;
  vDSP_Length v1578;
  vDSP_Length v1579;
  vDSP_Length v1580;
  vDSP_Length v1581;
  vDSP_Length v1582;
  uint64_t v1583;
  int v1584;
  int *v1585;
  uint64_t v1586;
  int *v1587;
  uint64_t v1588;
  uint64_t v1589;
  int v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  int *v1594;
  int *v1595;
  int *v1596;
  int *v1597;
  int *v1598;
  int *v1599;
  int *v1600;
  int *v1601;
  int *v1602;
  int *v1603;
  int *v1604;
  uint64_t v1605;
  int *v1606;
  uint64_t v1607;
  int *v1608;
  int *v1609;
  int *v1610;
  int *v1611;
  int *v1612;
  int *v1613;
  int *v1614;
  int *v1615;
  int *v1616;
  int *v1617;
  int *v1618;
  int *v1619;
  int *v1620;
  int *v1621;
  int *v1622;
  int *v1623;
  int *v1624;
  int *v1625;
  int *v1626;
  int *v1627;
  int *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  vDSP_Length v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  vDSP_Length v1651;
  uint64_t v1652;
  vDSP_Length v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(unsigned __int8 **)(*a2 + 152) != -**(_BYTE **)(*a1 + 152);
          goto LABEL_8;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v16 = *(_QWORD **)a3;
          v17 = *a1;
          v18 = *(int **)*a1;
          v19 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v18) >> 2;
          v20 = (v19 - 1);
          if ((int)v20 >= -1)
            v21 = -1;
          else
            v21 = v19 - 1;
          v22 = v21 + 1;
          v23 = v19 + 1;
          break;
      }
      while (1)
      {
        v24 = v23 - 2;
        if (v23 - 2 < 0)
          break;
        --v23;
        if (*(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * v24) != *(_QWORD *)(v16[3] + 8 * v24))
          goto LABEL_68;
      }
      v23 = v22;
LABEL_68:
      v77 = (int **)*a2;
      v78 = *(int **)*a2;
      v79 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v78) >> 2;
      v80 = (v79 - 1);
      if ((int)v80 >= -1)
        v81 = -1;
      else
        v81 = v79 - 1;
      v82 = v81 + 1;
      v83 = v79 + 1;
      while (1)
      {
        v84 = v83 - 2;
        if (v83 - 2 < 0)
          break;
        --v83;
        if (*(_QWORD *)&v77[3][2 * v84] != *(_QWORD *)(v16[3] + 8 * v84))
          goto LABEL_122;
      }
      v83 = v82;
LABEL_122:
      v131 = v19 + 1;
      while (1)
      {
        v132 = v131 - 2;
        if (v131 - 2 < 0)
          break;
        --v131;
        if (*(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * v132))
          goto LABEL_157;
      }
      v131 = v22;
LABEL_157:
      v145 = v79 + 1;
      while (1)
      {
        v146 = v145 - 2;
        if (v145 - 2 < 0)
          break;
        --v145;
        if (*(_QWORD *)&v77[3][2 * v146])
          goto LABEL_192;
      }
      v145 = v82;
LABEL_192:
      v159 = (uint64_t)(v16[1] - *v16) >> 2;
      if (v23 <= v83)
        v160 = v83;
      else
        v160 = v23;
      if (v23 <= v145)
        v23 = v145;
      if (v131 > v83)
        v83 = v131;
      if (v159 > v83)
        v161 = 1;
      else
        v161 = 4;
      if (v159 <= v83)
        v83 = (uint64_t)(v16[1] - *v16) >> 2;
      if (v159 <= v23)
        v23 = v83;
      else
        v161 = 2;
      if (v159 <= v160)
      {
        v162 = v23;
      }
      else
      {
        v161 = 3;
        v162 = v160;
      }
      if (!v162)
        goto LABEL_221;
      v163 = *(_QWORD *)(v16[3] + 8 * (v162 - 1));
      if (v163 < 0x10)
        goto LABEL_221;
      switch(v161)
      {
        case 1:
          if (v162 == 2)
          {
            v1120 = *v18;
            if (*v18)
            {
              v1121 = 0;
              v1122 = 0;
              v1559 = 0;
              v1605 = *(_QWORD *)(v17 + 152);
              v1651 = (int)v163;
              v1123 = (int *)v16[19];
              v1124 = v77[19];
              do
              {
                if (v18[1])
                {
                  v1125 = 0;
                  do
                  {
                    vDSP_vsaddi((int *)((char *)v1124 + v1121), 1, (const int *)(v1605 + v1122), v1123, 1, v1651);
                    v17 = *a1;
                    v1126 = *(_QWORD **)(*a1 + 24);
                    v1127 = v1126[1];
                    v1122 += v1127;
                    v77 = (int **)*a2;
                    v1128 = *(int **)(*a2 + 24);
                    v1129 = *((_QWORD *)v1128 + 1);
                    v1121 += v1129;
                    v1123 = (int *)((char *)v1123 + v1651);
                    ++v1125;
                    v18 = *(int **)*a1;
                    v1130 = v18[1];
                  }
                  while (v1125 < v1130);
                  v1120 = *v18;
                  v78 = *v77;
                }
                else
                {
                  v1130 = 0;
                  v1126 = *(_QWORD **)(v17 + 24);
                  v1127 = v1126[1];
                  v1128 = v77[3];
                  v1129 = *((_QWORD *)v1128 + 1);
                }
                v1122 = *v1126 + v1122 - v1130 * v1127;
                v1121 = *(_QWORD *)v1128 + v1121 - v1129 * v78[1];
                ++v1559;
              }
              while (v1559 < v1120);
            }
          }
          else if (v162 == 1)
          {
            if (*v18)
            {
              v819 = 0;
              v820 = 0;
              v821 = 0;
              v822 = *(_QWORD *)(v17 + 152);
              v823 = v77[19];
              v824 = (int)v163;
              v825 = (int *)v16[19];
              do
              {
                vDSP_vsaddi((int *)((char *)v823 + v820), 1, (const int *)(v822 + v821), v825, 1, v824);
                v821 += **(_QWORD **)(*a1 + 24);
                v820 += **(_QWORD **)(*a2 + 24);
                v825 = (int *)((char *)v825 + v824);
                ++v819;
              }
              while (v819 < **(int **)*a1);
            }
          }
          else if (v16[6])
          {
            v1131 = 0;
            v1606 = v77[19];
            v1652 = *(_QWORD *)(v17 + 152);
            v1560 = (int)v163;
            v1132 = (int *)v16[19];
            do
            {
              v1133 = *(_QWORD *)*a1;
              v1134 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1133) >> 2;
              v1135 = 0;
              v1136 = (v1134 - 1);
              if ((int)v1134 - 1 >= 0)
              {
                v1137 = *(_QWORD *)(*a1 + 24);
                quot = v1131;
                do
                {
                  v1139 = ldiv(quot, *(int *)(v1133 + 4 * v1136));
                  quot = v1139.quot;
                  v1135 += *(_QWORD *)(v1137 + 8 * v1136--) * v1139.rem;
                }
                while (v1136 != -1);
              }
              v1140 = *(_QWORD *)*a2;
              v1141 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1140) >> 2;
              v1142 = 0;
              v1143 = (v1141 - 1);
              if ((int)v1141 - 1 >= 0)
              {
                v1144 = *(_QWORD *)(*a2 + 24);
                v1145 = v1131;
                do
                {
                  v1146 = ldiv(v1145, *(int *)(v1140 + 4 * v1143));
                  v1145 = v1146.quot;
                  v1142 += *(_QWORD *)(v1144 + 8 * v1143--) * v1146.rem;
                }
                while (v1143 != -1);
              }
              vDSP_vsaddi((int *)((char *)v1606 + (int)v1142), 1, (const int *)(v1652 + (int)v1135), v1132, 1, v1560);
              v1132 = (int *)((char *)v1132 + v1560);
              v1131 += v1560;
            }
            while (v1131 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v162 == 2)
          {
            v1147 = *v18;
            if (*v18)
            {
              v1148 = 0;
              v1149 = 0;
              v1561 = 0;
              v1607 = *(_QWORD *)(v17 + 152);
              v1653 = (int)v163;
              v1150 = (int *)v16[19];
              v1151 = v77[19];
              do
              {
                if (v18[1])
                {
                  v1152 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1607 + v1149), 1, (int *)((char *)v1151 + v1148), v1150, 1, v1653);
                    v17 = *a1;
                    v1153 = *(_QWORD **)(*a1 + 24);
                    v1154 = v1153[1];
                    v1149 += v1154;
                    v77 = (int **)*a2;
                    v1155 = *(int **)(*a2 + 24);
                    v1156 = *((_QWORD *)v1155 + 1);
                    v1148 += v1156;
                    v1150 = (int *)((char *)v1150 + v1653);
                    ++v1152;
                    v18 = *(int **)*a1;
                    v1157 = v18[1];
                  }
                  while (v1152 < v1157);
                  v1147 = *v18;
                  v78 = *v77;
                }
                else
                {
                  v1157 = 0;
                  v1153 = *(_QWORD **)(v17 + 24);
                  v1154 = v1153[1];
                  v1155 = v77[3];
                  v1156 = *((_QWORD *)v1155 + 1);
                }
                v1149 = *v1153 + v1149 - v1157 * v1154;
                v1148 = *(_QWORD *)v1155 + v1148 - v1156 * v78[1];
                ++v1561;
              }
              while (v1561 < v1147);
            }
          }
          else if (v162 == 1)
          {
            if (*v18)
            {
              v826 = 0;
              v827 = 0;
              v828 = 0;
              v829 = *(_QWORD *)(v17 + 152);
              v830 = v77[19];
              v831 = (int)v163;
              v832 = (int *)v16[19];
              do
              {
                vDSP_vsaddi((const int *)(v829 + v828), 1, (int *)((char *)v830 + v827), v832, 1, v831);
                v828 += **(_QWORD **)(*a1 + 24);
                v827 += **(_QWORD **)(*a2 + 24);
                v832 = (int *)((char *)v832 + v831);
                ++v826;
              }
              while (v826 < **(int **)*a1);
            }
          }
          else if (v16[6])
          {
            v1158 = 0;
            v1608 = v77[19];
            v1654 = *(_QWORD *)(v17 + 152);
            v1562 = (int)v163;
            v1159 = (int *)v16[19];
            do
            {
              v1160 = *(_QWORD *)*a1;
              v1161 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1160) >> 2;
              v1162 = 0;
              v1163 = (v1161 - 1);
              if ((int)v1161 - 1 >= 0)
              {
                v1164 = *(_QWORD *)(*a1 + 24);
                v1165 = v1158;
                do
                {
                  v1166 = ldiv(v1165, *(int *)(v1160 + 4 * v1163));
                  v1165 = v1166.quot;
                  v1162 += *(_QWORD *)(v1164 + 8 * v1163--) * v1166.rem;
                }
                while (v1163 != -1);
              }
              v1167 = *(_QWORD *)*a2;
              v1168 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1167) >> 2;
              v1169 = 0;
              v1170 = (v1168 - 1);
              if ((int)v1168 - 1 >= 0)
              {
                v1171 = *(_QWORD *)(*a2 + 24);
                v1172 = v1158;
                do
                {
                  v1173 = ldiv(v1172, *(int *)(v1167 + 4 * v1170));
                  v1172 = v1173.quot;
                  v1169 += *(_QWORD *)(v1171 + 8 * v1170--) * v1173.rem;
                }
                while (v1170 != -1);
              }
              vDSP_vsaddi((const int *)(v1654 + (int)v1162), 1, (int *)((char *)v1608 + (int)v1169), v1159, 1, v1562);
              v1159 = (int *)((char *)v1159 + v1562);
              v1158 += v1562;
            }
            while (v1158 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v162 == 2)
          {
            v925 = *v18;
            if (*v18)
            {
              v926 = 0;
              v927 = 0;
              v1547 = 0;
              v1593 = *(_QWORD *)(v17 + 152);
              v1639 = (int)v163;
              v928 = (int *)v16[19];
              v929 = v77[19];
              do
              {
                if (v18[1])
                {
                  v930 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1593 + v927), 1, (int *)((char *)v929 + v926), 1, v928, 1, v1639);
                    v17 = *a1;
                    v931 = *(_QWORD **)(*a1 + 24);
                    v932 = v931[1];
                    v927 += v932;
                    v77 = (int **)*a2;
                    v933 = *(int **)(*a2 + 24);
                    v934 = *((_QWORD *)v933 + 1);
                    v926 += v934;
                    v928 = (int *)((char *)v928 + v1639);
                    ++v930;
                    v18 = *(int **)*a1;
                    v935 = v18[1];
                  }
                  while (v930 < v935);
                  v925 = *v18;
                  v78 = *v77;
                }
                else
                {
                  v935 = 0;
                  v931 = *(_QWORD **)(v17 + 24);
                  v932 = v931[1];
                  v933 = v77[3];
                  v934 = *((_QWORD *)v933 + 1);
                }
                v927 = *v931 + v927 - v935 * v932;
                v926 = *(_QWORD *)v933 + v926 - v934 * v78[1];
                ++v1547;
              }
              while (v1547 < v925);
            }
          }
          else if (v162 == 1)
          {
            if (*v18)
            {
              v164 = 0;
              v165 = 0;
              v166 = 0;
              v167 = *(_QWORD *)(v17 + 152);
              v168 = v77[19];
              v169 = (int)v163;
              v170 = (int *)v16[19];
              do
              {
                vDSP_vaddi((const int *)(v167 + v166), 1, (int *)((char *)v168 + v165), 1, v170, 1, v169);
                v166 += **(_QWORD **)(*a1 + 24);
                v165 += **(_QWORD **)(*a2 + 24);
                v170 = (int *)((char *)v170 + v169);
                ++v164;
              }
              while (v164 < **(int **)*a1);
            }
          }
          else if (v16[6])
          {
            v936 = 0;
            v1594 = v77[19];
            v1640 = *(_QWORD *)(v17 + 152);
            v1548 = (int)v163;
            v937 = (int *)v16[19];
            do
            {
              v938 = *(_QWORD *)*a1;
              v939 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v938) >> 2;
              v940 = 0;
              v941 = (v939 - 1);
              if ((int)v939 - 1 >= 0)
              {
                v942 = *(_QWORD *)(*a1 + 24);
                v943 = v936;
                do
                {
                  v944 = ldiv(v943, *(int *)(v938 + 4 * v941));
                  v943 = v944.quot;
                  v940 += *(_QWORD *)(v942 + 8 * v941--) * v944.rem;
                }
                while (v941 != -1);
              }
              v945 = *(_QWORD *)*a2;
              v946 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v945) >> 2;
              v947 = 0;
              v948 = (v946 - 1);
              if ((int)v946 - 1 >= 0)
              {
                v949 = *(_QWORD *)(*a2 + 24);
                v950 = v936;
                do
                {
                  v951 = ldiv(v950, *(int *)(v945 + 4 * v948));
                  v950 = v951.quot;
                  v947 += *(_QWORD *)(v949 + 8 * v948--) * v951.rem;
                }
                while (v948 != -1);
              }
              vDSP_vaddi((const int *)(v1640 + (int)v940), 1, (int *)((char *)v1594 + (int)v947), 1, v937, 1, v1548);
              v937 = (int *)((char *)v937 + v1548);
              v936 += v1548;
            }
            while (v936 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_221:
          switch(v159)
          {
            case 1uLL:
              v171 = v16[6];
              if (v171)
              {
                v172 = *(_BYTE **)(v17 + 152);
                v173 = v77[19];
                v174 = (BOOL *)v16[19];
                v175 = **(_QWORD **)(v17 + 24);
                v176 = *(_QWORD *)v77[3];
                do
                {
                  *v174++ = *(unsigned __int8 *)v173 != -*v172;
                  v173 = (int *)((char *)v173 + v176);
                  v172 += v175;
                  --v171;
                }
                while (v171);
              }
              break;
            case 2uLL:
              v300 = *v18;
              if ((_DWORD)v300)
              {
                v301 = 0;
                v302 = 0;
                v303 = 0;
                v304 = 0;
                v305 = *(_QWORD *)(v17 + 152);
                v306 = v77[19];
                v307 = v16[19];
                v308 = v18[1];
                v309 = *(uint64_t **)(v17 + 24);
                v310 = *v309;
                v311 = v309[1];
                v312 = v77[3];
                v313 = *(_QWORD *)v312;
                v314 = *((_QWORD *)v312 + 1);
                v315 = v313 - v314 * v78[1];
                if (v308 <= 1)
                  v316 = 1;
                else
                  v316 = v18[1];
                v317 = v310 - v311 * v308;
                do
                {
                  if ((_DWORD)v308)
                  {
                    v318 = v302 + v316;
                    v319 = (BOOL *)(v307 + v302);
                    v320 = v316;
                    do
                    {
                      *v319++ = *((unsigned __int8 *)v306 + v303) != -*(_BYTE *)(v305 + v304);
                      v304 += v311;
                      v303 += v314;
                      --v320;
                    }
                    while (v320);
                    v302 = v318;
                  }
                  v304 += v317;
                  v303 += v315;
                  ++v301;
                }
                while (v301 != v300);
              }
              break;
            case 3uLL:
              v321 = *v18;
              if ((_DWORD)v321)
              {
                v322 = 0;
                v323 = 0;
                v324 = 0;
                v325 = 0;
                v326 = *(_QWORD *)(v17 + 152);
                v327 = v77[19];
                v328 = v16[19];
                v329 = v18[1];
                v330 = *(_QWORD **)(v17 + 24);
                v331 = v330[1];
                v332 = v77[3];
                v333 = *((_QWORD *)v332 + 1);
                v334 = *(_QWORD *)v332 - v333 * v78[1];
                if (v329 <= 1)
                  v335 = 1;
                else
                  v335 = v18[1];
                v336 = *v330 - v331 * v329;
                do
                {
                  if ((_DWORD)v329)
                  {
                    v337 = 0;
                    v338 = v18[2];
                    v339 = v330[2];
                    v340 = *((_QWORD *)v332 + 2);
                    if (v338 <= 1)
                      v341 = 1;
                    else
                      v341 = v18[2];
                    v342 = v333 - v340 * v78[2];
                    do
                    {
                      v343 = v341;
                      if ((_DWORD)v338)
                      {
                        do
                        {
                          *(_BYTE *)(v328 + v323++) = *((unsigned __int8 *)v327 + v324) != -*(_BYTE *)(v326 + v325);
                          v325 += v339;
                          v324 += v340;
                          --v343;
                        }
                        while (v343);
                      }
                      v325 += v331 - v339 * v338;
                      v324 += v342;
                      ++v337;
                    }
                    while (v337 != v335);
                  }
                  v325 += v336;
                  v324 += v334;
                  ++v322;
                }
                while (v322 != v321);
              }
              break;
            case 4uLL:
              v1630 = *v18;
              if ((_DWORD)v1630)
              {
                v344 = 0;
                v345 = 0;
                v346 = 0;
                v347 = 0;
                v348 = *(_QWORD *)(v17 + 152);
                v349 = v77[19];
                v350 = v16[19];
                v351 = v18[1];
                v352 = *(_QWORD **)(v17 + 24);
                v353 = v77[3];
                v1510 = *((_QWORD *)v353 + 1);
                v1513 = v352[1];
                v1540 = *(_QWORD *)v353 - v1510 * v78[1];
                v1584 = v18[1];
                if (v351 <= 1)
                  v354 = 1;
                else
                  v354 = v18[1];
                v1520 = *v352 - v352[1] * v351;
                do
                {
                  if (v1584)
                  {
                    v355 = 0;
                    v356 = v18[2];
                    v357 = v352[2];
                    v358 = *((_QWORD *)v353 + 2);
                    if (v356 <= 1)
                      v359 = 1;
                    else
                      v359 = v18[2];
                    v360 = v1510 - v358 * v78[2];
                    do
                    {
                      if ((_DWORD)v356)
                      {
                        v361 = 0;
                        v362 = v18[3];
                        v363 = v352[3];
                        v364 = *((_QWORD *)v353 + 3);
                        if (v362 <= 1)
                          v365 = 1;
                        else
                          v365 = v18[3];
                        v366 = v358 - v364 * v78[3];
                        do
                        {
                          v367 = v365;
                          if ((_DWORD)v362)
                          {
                            do
                            {
                              *(_BYTE *)(v350 + v345++) = *((unsigned __int8 *)v349 + v346) != -*(_BYTE *)(v348 + v347);
                              v347 += v363;
                              v346 += v364;
                              --v367;
                            }
                            while (v367);
                          }
                          v347 += v357 - v363 * v362;
                          v346 += v366;
                          ++v361;
                        }
                        while (v361 != v359);
                      }
                      v347 += v1513 - v357 * v356;
                      v346 += v360;
                      ++v355;
                    }
                    while (v355 != v354);
                  }
                  v347 += v1520;
                  v346 += v1540;
                  ++v344;
                }
                while (v344 != v1630);
              }
              break;
            default:
              v1583 = v16[6];
              v1629 = v20;
              if (v1583)
              {
                v289 = 0;
                v1519 = v77[19];
                v1539 = *(_QWORD *)(v17 + 152);
                v1512 = v16[19];
                do
                {
                  v290 = v1629;
                  if ((v1629 & 0x80000000) != 0)
                  {
                    LODWORD(v291) = 0;
                  }
                  else
                  {
                    v291 = 0;
                    v292 = *(_QWORD *)(v17 + 24);
                    v293 = v289;
                    do
                    {
                      v294 = ldiv(v293, v18[v290]);
                      v293 = v294.quot;
                      v291 += *(_QWORD *)(v292 + 8 * v290--) * v294.rem;
                    }
                    while (v290 != -1);
                  }
                  v295 = 0;
                  if ((v80 & 0x80000000) == 0)
                  {
                    v296 = v77[3];
                    v297 = v80;
                    v298 = v289;
                    do
                    {
                      v299 = ldiv(v298, v78[v297]);
                      v298 = v299.quot;
                      v295 += *(_QWORD *)&v296[2 * v297--] * v299.rem;
                    }
                    while (v297 != -1);
                  }
                  *(_BYTE *)(v1512 + v289++) = *((unsigned __int8 *)v1519 + (int)v295) != -*(_BYTE *)(v1539 + (int)v291);
                }
                while (v289 != v1583);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_7;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v25 = *(_QWORD **)a3;
          v26 = *a1;
          v27 = *(int **)*a1;
          v28 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v27) >> 2;
          v29 = v28 - 1;
          if ((int)v28 - 1 >= -1)
            v29 = -1;
          v30 = v29 + 1;
          v31 = v28 + 1;
          break;
      }
      while (1)
      {
        v32 = v31 - 2;
        if (v31 - 2 < 0)
          break;
        --v31;
        if (*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v32) != *(_QWORD *)(v25[3] + 8 * v32))
          goto LABEL_76;
      }
      v31 = v30;
LABEL_76:
      v85 = (int **)*a2;
      v86 = *(int **)*a2;
      v87 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v86) >> 2;
      v88 = v87 - 1;
      if ((int)v87 - 1 >= -1)
        v88 = -1;
      v89 = v88 + 1;
      v90 = v87 + 1;
      while (1)
      {
        v91 = v90 - 2;
        if (v90 - 2 < 0)
          break;
        --v90;
        if (*(_QWORD *)&v85[3][2 * v91] != *(_QWORD *)(v25[3] + 8 * v91))
          goto LABEL_127;
      }
      v90 = v89;
LABEL_127:
      v133 = v28 + 1;
      while (1)
      {
        v134 = v133 - 2;
        if (v133 - 2 < 0)
          break;
        --v133;
        if (*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v134))
          goto LABEL_162;
      }
      v133 = v30;
LABEL_162:
      v147 = v87 + 1;
      while (1)
      {
        v148 = v147 - 2;
        if (v147 - 2 < 0)
          break;
        --v147;
        if (*(_QWORD *)&v85[3][2 * v148])
          goto LABEL_227;
      }
      v147 = v89;
LABEL_227:
      v177 = (uint64_t)(v25[1] - *v25) >> 2;
      if (v31 <= v90)
        v178 = v90;
      else
        v178 = v31;
      if (v31 <= v147)
        v31 = v147;
      if (v133 > v90)
        v90 = v133;
      if (v177 > v90)
        v179 = 1;
      else
        v179 = 4;
      if (v177 <= v90)
        v90 = (uint64_t)(v25[1] - *v25) >> 2;
      if (v177 <= v31)
        v31 = v90;
      else
        v179 = 2;
      if (v177 <= v178)
      {
        v180 = v31;
      }
      else
      {
        v179 = 3;
        v180 = v178;
      }
      if (!v180)
        goto LABEL_256;
      v181 = *(_QWORD *)(v25[3] + 8 * (v180 - 1));
      if (v181 < 0x10)
        goto LABEL_256;
      switch(v179)
      {
        case 1:
          if (v180 == 2)
          {
            v1174 = *v27;
            if (*v27)
            {
              v1175 = 0;
              v1176 = 0;
              v1177 = 0;
              v1178 = *(_QWORD *)(v26 + 152);
              v1179 = v85[19];
              v1180 = (int)v181;
              v1181 = (int *)v25[19];
              do
              {
                if (v27[1])
                {
                  v1182 = 0;
                  do
                  {
                    vDSP_vsaddi((int *)((char *)v1179 + v1176), 1, (const int *)(v1178 + v1177), v1181, 1, v1180);
                    v26 = *a1;
                    v1183 = *(_QWORD **)(*a1 + 24);
                    v1184 = v1183[1];
                    v1177 += v1184;
                    v85 = (int **)*a2;
                    v1185 = *(int **)(*a2 + 24);
                    v1186 = *((_QWORD *)v1185 + 1);
                    v1176 += v1186;
                    v1181 = (int *)((char *)v1181 + v1180);
                    ++v1182;
                    v27 = *(int **)*a1;
                    v1187 = v27[1];
                  }
                  while (v1182 < v1187);
                  v1174 = *v27;
                  v86 = *v85;
                }
                else
                {
                  v1187 = 0;
                  v1183 = *(_QWORD **)(v26 + 24);
                  v1184 = v1183[1];
                  v1185 = v85[3];
                  v1186 = *((_QWORD *)v1185 + 1);
                }
                v1177 = *v1183 + v1177 - v1187 * v1184;
                v1176 = *(_QWORD *)v1185 + v1176 - v1186 * v86[1];
                ++v1175;
              }
              while (v1175 < v1174);
            }
          }
          else if (v180 == 1)
          {
            if (*v27)
            {
              v833 = 0;
              v834 = 0;
              v835 = 0;
              v836 = *(_QWORD *)(v26 + 152);
              v837 = v85[19];
              v838 = (int)v181;
              v839 = (int *)v25[19];
              do
              {
                vDSP_vsaddi((int *)((char *)v837 + v834), 1, (const int *)(v836 + v835), v839, 1, v838);
                v835 += **(_QWORD **)(*a1 + 24);
                v834 += **(_QWORD **)(*a2 + 24);
                v839 = (int *)((char *)v839 + v838);
                ++v833;
              }
              while (v833 < **(int **)*a1);
            }
          }
          else if (v25[6])
          {
            v1188 = 0;
            v1609 = v85[19];
            v1655 = *(_QWORD *)(v26 + 152);
            v1563 = (int)v181;
            v1189 = (int *)v25[19];
            do
            {
              v1190 = *(_QWORD *)*a1;
              v1191 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1190) >> 2;
              v1192 = 0;
              v1193 = (v1191 - 1);
              if ((int)v1191 - 1 >= 0)
              {
                v1194 = *(_QWORD *)(*a1 + 24);
                v1195 = v1188;
                do
                {
                  v1196 = ldiv(v1195, *(int *)(v1190 + 4 * v1193));
                  v1195 = v1196.quot;
                  v1192 += *(_QWORD *)(v1194 + 8 * v1193--) * v1196.rem;
                }
                while (v1193 != -1);
              }
              v1197 = *(_QWORD *)*a2;
              v1198 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1197) >> 2;
              v1199 = 0;
              v1200 = (v1198 - 1);
              if ((int)v1198 - 1 >= 0)
              {
                v1201 = *(_QWORD *)(*a2 + 24);
                v1202 = v1188;
                do
                {
                  v1203 = ldiv(v1202, *(int *)(v1197 + 4 * v1200));
                  v1202 = v1203.quot;
                  v1199 += *(_QWORD *)(v1201 + 8 * v1200--) * v1203.rem;
                }
                while (v1200 != -1);
              }
              vDSP_vsaddi((int *)((char *)v1609 + (int)v1199), 1, (const int *)(v1655 + (int)v1192), v1189, 1, v1563);
              v1189 = (int *)((char *)v1189 + v1563);
              v1188 += v1563;
            }
            while (v1188 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v180 == 2)
          {
            v1204 = *v27;
            if (*v27)
            {
              v1205 = 0;
              v1206 = 0;
              v1207 = 0;
              v1208 = *(_QWORD *)(v26 + 152);
              v1209 = v85[19];
              v1210 = (int)v181;
              v1211 = (int *)v25[19];
              do
              {
                if (v27[1])
                {
                  v1212 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1208 + v1207), 1, (int *)((char *)v1209 + v1206), v1211, 1, v1210);
                    v26 = *a1;
                    v1213 = *(_QWORD **)(*a1 + 24);
                    v1214 = v1213[1];
                    v1207 += v1214;
                    v85 = (int **)*a2;
                    v1215 = *(int **)(*a2 + 24);
                    v1216 = *((_QWORD *)v1215 + 1);
                    v1206 += v1216;
                    v1211 = (int *)((char *)v1211 + v1210);
                    ++v1212;
                    v27 = *(int **)*a1;
                    v1217 = v27[1];
                  }
                  while (v1212 < v1217);
                  v1204 = *v27;
                  v86 = *v85;
                }
                else
                {
                  v1217 = 0;
                  v1213 = *(_QWORD **)(v26 + 24);
                  v1214 = v1213[1];
                  v1215 = v85[3];
                  v1216 = *((_QWORD *)v1215 + 1);
                }
                v1207 = *v1213 + v1207 - v1217 * v1214;
                v1206 = *(_QWORD *)v1215 + v1206 - v1216 * v86[1];
                ++v1205;
              }
              while (v1205 < v1204);
            }
          }
          else if (v180 == 1)
          {
            if (*v27)
            {
              v840 = 0;
              v841 = 0;
              v842 = 0;
              v843 = *(_QWORD *)(v26 + 152);
              v844 = v85[19];
              v845 = (int)v181;
              v846 = (int *)v25[19];
              do
              {
                vDSP_vsaddi((const int *)(v843 + v842), 1, (int *)((char *)v844 + v841), v846, 1, v845);
                v842 += **(_QWORD **)(*a1 + 24);
                v841 += **(_QWORD **)(*a2 + 24);
                v846 = (int *)((char *)v846 + v845);
                ++v840;
              }
              while (v840 < **(int **)*a1);
            }
          }
          else if (v25[6])
          {
            v1218 = 0;
            v1610 = v85[19];
            v1656 = *(_QWORD *)(v26 + 152);
            v1564 = (int)v181;
            v1219 = (int *)v25[19];
            do
            {
              v1220 = *(_QWORD *)*a1;
              v1221 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1220) >> 2;
              v1222 = 0;
              v1223 = (v1221 - 1);
              if ((int)v1221 - 1 >= 0)
              {
                v1224 = *(_QWORD *)(*a1 + 24);
                v1225 = v1218;
                do
                {
                  v1226 = ldiv(v1225, *(int *)(v1220 + 4 * v1223));
                  v1225 = v1226.quot;
                  v1222 += *(_QWORD *)(v1224 + 8 * v1223--) * v1226.rem;
                }
                while (v1223 != -1);
              }
              v1227 = *(_QWORD *)*a2;
              v1228 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1227) >> 2;
              v1229 = 0;
              v1230 = (v1228 - 1);
              if ((int)v1228 - 1 >= 0)
              {
                v1231 = *(_QWORD *)(*a2 + 24);
                v1232 = v1218;
                do
                {
                  v1233 = ldiv(v1232, *(int *)(v1227 + 4 * v1230));
                  v1232 = v1233.quot;
                  v1229 += *(_QWORD *)(v1231 + 8 * v1230--) * v1233.rem;
                }
                while (v1230 != -1);
              }
              vDSP_vsaddi((const int *)(v1656 + (int)v1222), 1, (int *)((char *)v1610 + (int)v1229), v1219, 1, v1564);
              v1219 = (int *)((char *)v1219 + v1564);
              v1218 += v1564;
            }
            while (v1218 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v180 == 2)
          {
            v952 = *v27;
            if (*v27)
            {
              v953 = 0;
              v954 = 0;
              v955 = 0;
              v956 = *(_QWORD *)(v26 + 152);
              v957 = v85[19];
              v958 = (int)v181;
              v959 = (int *)v25[19];
              do
              {
                if (v27[1])
                {
                  v960 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v956 + v955), 1, (int *)((char *)v957 + v954), 1, v959, 1, v958);
                    v26 = *a1;
                    v961 = *(_QWORD **)(*a1 + 24);
                    v962 = v961[1];
                    v955 += v962;
                    v85 = (int **)*a2;
                    v963 = *(int **)(*a2 + 24);
                    v964 = *((_QWORD *)v963 + 1);
                    v954 += v964;
                    v959 = (int *)((char *)v959 + v958);
                    ++v960;
                    v27 = *(int **)*a1;
                    v965 = v27[1];
                  }
                  while (v960 < v965);
                  v952 = *v27;
                  v86 = *v85;
                }
                else
                {
                  v965 = 0;
                  v961 = *(_QWORD **)(v26 + 24);
                  v962 = v961[1];
                  v963 = v85[3];
                  v964 = *((_QWORD *)v963 + 1);
                }
                v955 = *v961 + v955 - v965 * v962;
                v954 = *(_QWORD *)v963 + v954 - v964 * v86[1];
                ++v953;
              }
              while (v953 < v952);
            }
          }
          else if (v180 == 1)
          {
            if (*v27)
            {
              v182 = 0;
              v183 = 0;
              v184 = 0;
              v185 = *(_QWORD *)(v26 + 152);
              v186 = v85[19];
              v187 = (int)v181;
              v188 = (int *)v25[19];
              do
              {
                vDSP_vaddi((const int *)(v185 + v184), 1, (int *)((char *)v186 + v183), 1, v188, 1, v187);
                v184 += **(_QWORD **)(*a1 + 24);
                v183 += **(_QWORD **)(*a2 + 24);
                v188 = (int *)((char *)v188 + v187);
                ++v182;
              }
              while (v182 < **(int **)*a1);
            }
          }
          else if (v25[6])
          {
            v966 = 0;
            v1595 = v85[19];
            v1641 = *(_QWORD *)(v26 + 152);
            v1549 = (int)v181;
            v967 = (int *)v25[19];
            do
            {
              v968 = *(_QWORD *)*a1;
              v969 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v968) >> 2;
              v970 = 0;
              v971 = (v969 - 1);
              if ((int)v969 - 1 >= 0)
              {
                v972 = *(_QWORD *)(*a1 + 24);
                v973 = v966;
                do
                {
                  v974 = ldiv(v973, *(int *)(v968 + 4 * v971));
                  v973 = v974.quot;
                  v970 += *(_QWORD *)(v972 + 8 * v971--) * v974.rem;
                }
                while (v971 != -1);
              }
              v975 = *(_QWORD *)*a2;
              v976 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v975) >> 2;
              v977 = 0;
              v978 = (v976 - 1);
              if ((int)v976 - 1 >= 0)
              {
                v979 = *(_QWORD *)(*a2 + 24);
                v980 = v966;
                do
                {
                  v981 = ldiv(v980, *(int *)(v975 + 4 * v978));
                  v980 = v981.quot;
                  v977 += *(_QWORD *)(v979 + 8 * v978--) * v981.rem;
                }
                while (v978 != -1);
              }
              vDSP_vaddi((const int *)(v1641 + (int)v970), 1, (int *)((char *)v1595 + (int)v977), 1, v967, 1, v1549);
              v967 = (int *)((char *)v967 + v1549);
              v966 += v1549;
            }
            while (v966 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_256:
          switch(v177)
          {
            case 1uLL:
              if (v25[6])
              {
                v189 = 0;
                v190 = 0;
                v191 = 0;
                v192 = *(_QWORD *)(v26 + 152);
                v193 = v85[19];
                v194 = v25[19];
                do
                {
                  *(_BYTE *)(v194 + v189) = *((_BYTE *)v193 + v190) + *(_BYTE *)(v192 + v191);
                  v191 += **(_QWORD **)(*a1 + 24);
                  v190 += **(_QWORD **)(*a2 + 24);
                  ++v189;
                }
                while (v189 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v384 = *v27;
              if (*v27)
              {
                v385 = 0;
                v386 = 0;
                v387 = 0;
                v388 = 0;
                v389 = *(_QWORD *)(v26 + 152);
                v390 = v85[19];
                v391 = v25[19];
                do
                {
                  if (v27[1])
                  {
                    v392 = 0;
                    do
                    {
                      *(_BYTE *)(v391 + v386 + v392) = *((_BYTE *)v390 + v387) + *(_BYTE *)(v389 + v388);
                      v26 = *a1;
                      v393 = *(_QWORD **)(*a1 + 24);
                      v394 = v393[1];
                      v388 += v394;
                      v85 = (int **)*a2;
                      v395 = *(int **)(*a2 + 24);
                      v396 = *((_QWORD *)v395 + 1);
                      v387 += v396;
                      ++v392;
                      v27 = *(int **)*a1;
                      v397 = v27[1];
                    }
                    while (v392 < v397);
                    v384 = *v27;
                    v86 = *v85;
                    v386 += v392;
                  }
                  else
                  {
                    v397 = 0;
                    v393 = *(_QWORD **)(v26 + 24);
                    v394 = v393[1];
                    v395 = v85[3];
                    v396 = *((_QWORD *)v395 + 1);
                  }
                  v388 = *v393 + v388 - v397 * v394;
                  v387 = *(_QWORD *)v395 + v387 - v396 * v86[1];
                  ++v385;
                }
                while (v385 < v384);
              }
              break;
            case 3uLL:
              v398 = *v27;
              if (*v27)
              {
                v399 = 0;
                v400 = 0;
                v401 = 0;
                v402 = 0;
                v403 = *(_QWORD *)(v26 + 152);
                v404 = v85[19];
                v405 = v25[19];
                do
                {
                  if (v27[1])
                  {
                    v406 = 0;
                    do
                    {
                      if (v27[2])
                      {
                        v407 = 0;
                        do
                        {
                          *(_BYTE *)(v405 + v400 + v407) = *((_BYTE *)v404 + v401) + *(_BYTE *)(v403 + v402);
                          v26 = *a1;
                          v408 = *(_QWORD **)(*a1 + 24);
                          v409 = v408[2];
                          v402 += v409;
                          v85 = (int **)*a2;
                          v410 = *(int **)(*a2 + 24);
                          v411 = *((_QWORD *)v410 + 2);
                          v401 += v411;
                          ++v407;
                          v27 = *(int **)*a1;
                          v412 = v27[2];
                        }
                        while (v407 < v412);
                        v86 = *v85;
                        v400 += v407;
                      }
                      else
                      {
                        v412 = 0;
                        v408 = *(_QWORD **)(v26 + 24);
                        v409 = v408[2];
                        v410 = v85[3];
                        v411 = *((_QWORD *)v410 + 2);
                      }
                      v413 = v408[1];
                      v402 = v413 + v402 - v412 * v409;
                      v401 = *((_QWORD *)v410 + 1) + v401 - v411 * v86[2];
                      ++v406;
                      v414 = v27[1];
                    }
                    while (v406 < v414);
                    v398 = *v27;
                  }
                  else
                  {
                    v414 = 0;
                    v408 = *(_QWORD **)(v26 + 24);
                    v413 = v408[1];
                  }
                  v402 = *v408 + v402 - v414 * v413;
                  v401 = *(_QWORD *)v85[3] + v401 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v399;
                }
                while (v399 < v398);
              }
              break;
            case 4uLL:
              v415 = *v27;
              if (*v27)
              {
                v416 = 0;
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = *(_QWORD *)(v26 + 152);
                v421 = v85[19];
                v422 = v25[19];
                do
                {
                  if (v27[1])
                  {
                    v423 = 0;
                    do
                    {
                      if (v27[2])
                      {
                        v424 = 0;
                        do
                        {
                          if (v27[3])
                          {
                            v425 = 0;
                            do
                            {
                              *(_BYTE *)(v422 + v417 + v425) = *((_BYTE *)v421 + v418) + *(_BYTE *)(v420 + v419);
                              v26 = *a1;
                              v426 = *(_QWORD **)(*a1 + 24);
                              v427 = v426[3];
                              v419 += v427;
                              v85 = (int **)*a2;
                              v428 = *(int **)(*a2 + 24);
                              v429 = *((_QWORD *)v428 + 3);
                              v418 += v429;
                              ++v425;
                              v27 = *(int **)*a1;
                              v430 = v27[3];
                            }
                            while (v425 < v430);
                            v86 = *v85;
                            v417 += v425;
                          }
                          else
                          {
                            v430 = 0;
                            v426 = *(_QWORD **)(v26 + 24);
                            v427 = v426[3];
                            v428 = v85[3];
                            v429 = *((_QWORD *)v428 + 3);
                          }
                          v431 = v426[2];
                          v419 = v431 + v419 - v430 * v427;
                          v418 = *((_QWORD *)v428 + 2) + v418 - v429 * v86[3];
                          ++v424;
                          v432 = v27[2];
                        }
                        while (v424 < v432);
                      }
                      else
                      {
                        v432 = 0;
                        v426 = *(_QWORD **)(v26 + 24);
                        v431 = v426[2];
                      }
                      v419 = v426[1] + v419 - v432 * v431;
                      v418 = *((_QWORD *)v85[3] + 1) + v418 - *((_QWORD *)v85[3] + 2) * v86[2];
                      ++v423;
                      v433 = v27[1];
                    }
                    while (v423 < v433);
                    v415 = *v27;
                  }
                  else
                  {
                    v433 = 0;
                  }
                  v419 = **(_QWORD **)(v26 + 24) + v419 - *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) * v433;
                  v418 = *(_QWORD *)v85[3] + v418 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            default:
              if (v25[6])
              {
                v368 = 0;
                v1585 = v85[19];
                v1631 = *(_QWORD *)(v26 + 152);
                v369 = v25[19];
                do
                {
                  v370 = *(_QWORD *)*a1;
                  v371 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v370) >> 2;
                  v372 = 0;
                  v373 = (v371 - 1);
                  if ((int)v371 - 1 >= 0)
                  {
                    v374 = *(_QWORD *)(*a1 + 24);
                    v375 = v368;
                    do
                    {
                      v376 = ldiv(v375, *(int *)(v370 + 4 * v373));
                      v375 = v376.quot;
                      v372 += *(_QWORD *)(v374 + 8 * v373--) * v376.rem;
                    }
                    while (v373 != -1);
                  }
                  v377 = *(_QWORD *)*a2;
                  v378 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v377) >> 2;
                  v379 = 0;
                  v380 = (v378 - 1);
                  if ((int)v378 - 1 >= 0)
                  {
                    v381 = *(_QWORD *)(*a2 + 24);
                    v382 = v368;
                    do
                    {
                      v383 = ldiv(v382, *(int *)(v377 + 4 * v380));
                      v382 = v383.quot;
                      v379 += *(_QWORD *)(v381 + 8 * v380--) * v383.rem;
                    }
                    while (v380 != -1);
                  }
                  *(_BYTE *)(v369 + v368++) = *((_BYTE *)v1585 + (int)v379) + *(_BYTE *)(v1631 + (int)v372);
                }
                while (v368 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          goto LABEL_10;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v33 = *(_QWORD **)a3;
          v34 = *a1;
          v35 = *(int **)*a1;
          v36 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v35) >> 2;
          v37 = (v36 - 1);
          if ((int)v37 >= -1)
            v38 = -1;
          else
            v38 = v36 - 1;
          v39 = v38 + 1;
          v40 = v36 + 1;
          break;
      }
      while (1)
      {
        v41 = v40 - 2;
        if (v40 - 2 < 0)
          break;
        --v40;
        if (*(_QWORD *)(*(_QWORD *)(v34 + 24) + 8 * v41) != *(_QWORD *)(v33[3] + 8 * v41))
          goto LABEL_83;
      }
      v40 = v39;
LABEL_83:
      v92 = (int **)*a2;
      v93 = *(int **)*a2;
      v94 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v93) >> 2;
      v95 = (v94 - 1);
      if ((int)v95 >= -1)
        v96 = -1;
      else
        v96 = v94 - 1;
      v97 = v96 + 1;
      v98 = v94 + 1;
      while (1)
      {
        v99 = v98 - 2;
        if (v98 - 2 < 0)
          break;
        --v98;
        if (*(_QWORD *)&v92[3][2 * v99] != *(_QWORD *)(v33[3] + 8 * v99))
          goto LABEL_132;
      }
      v98 = v97;
LABEL_132:
      v135 = v36 + 1;
      while (1)
      {
        v136 = v135 - 2;
        if (v135 - 2 < 0)
          break;
        --v135;
        if (*(_QWORD *)(*(_QWORD *)(v34 + 24) + 8 * v136))
          goto LABEL_167;
      }
      v135 = v39;
LABEL_167:
      v149 = v94 + 1;
      while (1)
      {
        v150 = v149 - 2;
        if (v149 - 2 < 0)
          break;
        --v149;
        if (*(_QWORD *)&v92[3][2 * v150])
          goto LABEL_262;
      }
      v149 = v97;
LABEL_262:
      v195 = (uint64_t)(v33[1] - *v33) >> 2;
      if (v40 <= v98)
        v196 = v98;
      else
        v196 = v40;
      if (v40 <= v149)
        v40 = v149;
      if (v135 > v98)
        v98 = v135;
      if (v195 > v98)
        v197 = 1;
      else
        v197 = 4;
      if (v195 <= v98)
        v98 = (uint64_t)(v33[1] - *v33) >> 2;
      if (v195 <= v40)
        v40 = v98;
      else
        v197 = 2;
      if (v195 <= v196)
      {
        v198 = v40;
      }
      else
      {
        v197 = 3;
        v198 = v196;
      }
      if (!v198)
        goto LABEL_291;
      v199 = *(_QWORD *)(v33[3] + 8 * (v198 - 1));
      if (v199 < 0x10)
        goto LABEL_291;
      switch(v197)
      {
        case 1:
          if (v198 == 2)
          {
            v1234 = *v35;
            if (*v35)
            {
              v1235 = 0;
              v1236 = 0;
              v1657 = *(_QWORD *)(v34 + 152);
              v1611 = v92[19];
              v1237 = (int *)v33[19];
              v1531 = 0;
              v1565 = (int)v199;
              v1238 = 4 * (int)v199;
              do
              {
                if (v35[1])
                {
                  v1239 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1611[v1235], 1, (const int *)(v1657 + 4 * v1236), v1237, 1, v1565);
                    v34 = *a1;
                    v1240 = *(_QWORD **)(*a1 + 24);
                    v1241 = v1240[1];
                    v1236 += v1241;
                    v92 = (int **)*a2;
                    v1242 = *(int **)(*a2 + 24);
                    v1243 = *((_QWORD *)v1242 + 1);
                    v1235 += v1243;
                    ++v1239;
                    v35 = *(int **)*a1;
                    v1244 = v35[1];
                    v1237 = (int *)((char *)v1237 + v1238);
                  }
                  while (v1239 < v1244);
                  v1234 = *v35;
                  v93 = *v92;
                }
                else
                {
                  v1244 = 0;
                  v1240 = *(_QWORD **)(v34 + 24);
                  v1241 = v1240[1];
                  v1242 = v92[3];
                  v1243 = *((_QWORD *)v1242 + 1);
                }
                v1236 = *v1240 + v1236 - v1244 * v1241;
                v1235 = *(_QWORD *)v1242 + v1235 - v1243 * v93[1];
                ++v1531;
              }
              while (v1531 < v1234);
            }
          }
          else if (v198 == 1)
          {
            if (*v35)
            {
              v847 = 0;
              v848 = 0;
              v849 = 0;
              v850 = *(_QWORD *)(v34 + 152);
              v851 = v92[19];
              v852 = (int)v199;
              v853 = 4 * (int)v199;
              v854 = (int *)v33[19];
              do
              {
                vDSP_vsaddi(&v851[v848], 1, (const int *)(v850 + 4 * v849), v854, 1, v852);
                v849 += **(_QWORD **)(*a1 + 24);
                v848 += **(_QWORD **)(*a2 + 24);
                ++v847;
                v854 = (int *)((char *)v854 + v853);
              }
              while (v847 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            v1245 = 0;
            v1612 = v92[19];
            v1658 = *(_QWORD *)(v34 + 152);
            v1566 = (int)v199;
            v1246 = (int *)v33[19];
            do
            {
              v1247 = *(_QWORD *)*a1;
              v1248 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1247) >> 2;
              v1249 = 0;
              v1250 = (v1248 - 1);
              if ((int)v1248 - 1 >= 0)
              {
                v1251 = *(_QWORD *)(*a1 + 24);
                v1252 = v1245;
                do
                {
                  v1253 = ldiv(v1252, *(int *)(v1247 + 4 * v1250));
                  v1252 = v1253.quot;
                  v1249 += *(_QWORD *)(v1251 + 8 * v1250--) * v1253.rem;
                }
                while (v1250 != -1);
              }
              v1254 = *(_QWORD *)*a2;
              v1255 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1254) >> 2;
              v1256 = 0;
              v1257 = (v1255 - 1);
              if ((int)v1255 - 1 >= 0)
              {
                v1258 = *(_QWORD *)(*a2 + 24);
                v1259 = v1245;
                do
                {
                  v1260 = ldiv(v1259, *(int *)(v1254 + 4 * v1257));
                  v1259 = v1260.quot;
                  v1256 += *(_QWORD *)(v1258 + 8 * v1257--) * v1260.rem;
                }
                while (v1257 != -1);
              }
              vDSP_vsaddi(&v1612[(int)v1256], 1, (const int *)(v1658 + 4 * (int)v1249), v1246, 1, v1566);
              v1246 += v1566;
              v1245 += v1566;
            }
            while (v1245 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v198 == 2)
          {
            v1261 = *v35;
            if (*v35)
            {
              v1262 = 0;
              v1263 = 0;
              v1659 = *(_QWORD *)(v34 + 152);
              v1613 = v92[19];
              v1264 = (int *)v33[19];
              v1532 = 0;
              v1567 = (int)v199;
              v1265 = 4 * (int)v199;
              do
              {
                if (v35[1])
                {
                  v1266 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1659 + 4 * v1263), 1, &v1613[v1262], v1264, 1, v1567);
                    v34 = *a1;
                    v1267 = *(_QWORD **)(*a1 + 24);
                    v1268 = v1267[1];
                    v1263 += v1268;
                    v92 = (int **)*a2;
                    v1269 = *(int **)(*a2 + 24);
                    v1270 = *((_QWORD *)v1269 + 1);
                    v1262 += v1270;
                    ++v1266;
                    v35 = *(int **)*a1;
                    v1271 = v35[1];
                    v1264 = (int *)((char *)v1264 + v1265);
                  }
                  while (v1266 < v1271);
                  v1261 = *v35;
                  v93 = *v92;
                }
                else
                {
                  v1271 = 0;
                  v1267 = *(_QWORD **)(v34 + 24);
                  v1268 = v1267[1];
                  v1269 = v92[3];
                  v1270 = *((_QWORD *)v1269 + 1);
                }
                v1263 = *v1267 + v1263 - v1271 * v1268;
                v1262 = *(_QWORD *)v1269 + v1262 - v1270 * v93[1];
                ++v1532;
              }
              while (v1532 < v1261);
            }
          }
          else if (v198 == 1)
          {
            if (*v35)
            {
              v855 = 0;
              v856 = 0;
              v857 = 0;
              v858 = *(_QWORD *)(v34 + 152);
              v859 = v92[19];
              v860 = (int)v199;
              v861 = 4 * (int)v199;
              v862 = (int *)v33[19];
              do
              {
                vDSP_vsaddi((const int *)(v858 + 4 * v857), 1, &v859[v856], v862, 1, v860);
                v857 += **(_QWORD **)(*a1 + 24);
                v856 += **(_QWORD **)(*a2 + 24);
                ++v855;
                v862 = (int *)((char *)v862 + v861);
              }
              while (v855 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            v1272 = 0;
            v1614 = v92[19];
            v1660 = *(_QWORD *)(v34 + 152);
            v1568 = (int)v199;
            v1273 = (int *)v33[19];
            do
            {
              v1274 = *(_QWORD *)*a1;
              v1275 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1274) >> 2;
              v1276 = 0;
              v1277 = (v1275 - 1);
              if ((int)v1275 - 1 >= 0)
              {
                v1278 = *(_QWORD *)(*a1 + 24);
                v1279 = v1272;
                do
                {
                  v1280 = ldiv(v1279, *(int *)(v1274 + 4 * v1277));
                  v1279 = v1280.quot;
                  v1276 += *(_QWORD *)(v1278 + 8 * v1277--) * v1280.rem;
                }
                while (v1277 != -1);
              }
              v1281 = *(_QWORD *)*a2;
              v1282 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1281) >> 2;
              v1283 = 0;
              v1284 = (v1282 - 1);
              if ((int)v1282 - 1 >= 0)
              {
                v1285 = *(_QWORD *)(*a2 + 24);
                v1286 = v1272;
                do
                {
                  v1287 = ldiv(v1286, *(int *)(v1281 + 4 * v1284));
                  v1286 = v1287.quot;
                  v1283 += *(_QWORD *)(v1285 + 8 * v1284--) * v1287.rem;
                }
                while (v1284 != -1);
              }
              vDSP_vsaddi((const int *)(v1660 + 4 * (int)v1276), 1, &v1614[(int)v1283], v1273, 1, v1568);
              v1273 += v1568;
              v1272 += v1568;
            }
            while (v1272 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v198 == 2)
          {
            v982 = *v35;
            if (*v35)
            {
              v983 = 0;
              v984 = 0;
              v1642 = *(_QWORD *)(v34 + 152);
              v1596 = v92[19];
              v985 = (int *)v33[19];
              v1527 = 0;
              v1550 = (int)v199;
              v986 = 4 * (int)v199;
              do
              {
                if (v35[1])
                {
                  v987 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1642 + 4 * v984), 1, &v1596[v983], 1, v985, 1, v1550);
                    v34 = *a1;
                    v988 = *(_QWORD **)(*a1 + 24);
                    v989 = v988[1];
                    v984 += v989;
                    v92 = (int **)*a2;
                    v990 = *(int **)(*a2 + 24);
                    v991 = *((_QWORD *)v990 + 1);
                    v983 += v991;
                    ++v987;
                    v35 = *(int **)*a1;
                    v992 = v35[1];
                    v985 = (int *)((char *)v985 + v986);
                  }
                  while (v987 < v992);
                  v982 = *v35;
                  v93 = *v92;
                }
                else
                {
                  v992 = 0;
                  v988 = *(_QWORD **)(v34 + 24);
                  v989 = v988[1];
                  v990 = v92[3];
                  v991 = *((_QWORD *)v990 + 1);
                }
                v984 = *v988 + v984 - v992 * v989;
                v983 = *(_QWORD *)v990 + v983 - v991 * v93[1];
                ++v1527;
              }
              while (v1527 < v982);
            }
          }
          else if (v198 == 1)
          {
            if (*v35)
            {
              v200 = 0;
              v201 = 0;
              v202 = 0;
              v203 = *(_QWORD *)(v34 + 152);
              v204 = v92[19];
              v205 = (int)v199;
              v206 = 4 * (int)v199;
              v207 = (int *)v33[19];
              do
              {
                vDSP_vaddi((const int *)(v203 + 4 * v202), 1, &v204[v201], 1, v207, 1, v205);
                v202 += **(_QWORD **)(*a1 + 24);
                v201 += **(_QWORD **)(*a2 + 24);
                ++v200;
                v207 = (int *)((char *)v207 + v206);
              }
              while (v200 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            v993 = 0;
            v1597 = v92[19];
            v1643 = *(_QWORD *)(v34 + 152);
            v1551 = (int)v199;
            v994 = (int *)v33[19];
            do
            {
              v995 = *(_QWORD *)*a1;
              v996 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v995) >> 2;
              v997 = 0;
              v998 = (v996 - 1);
              if ((int)v996 - 1 >= 0)
              {
                v999 = *(_QWORD *)(*a1 + 24);
                v1000 = v993;
                do
                {
                  v1001 = ldiv(v1000, *(int *)(v995 + 4 * v998));
                  v1000 = v1001.quot;
                  v997 += *(_QWORD *)(v999 + 8 * v998--) * v1001.rem;
                }
                while (v998 != -1);
              }
              v1002 = *(_QWORD *)*a2;
              v1003 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1002) >> 2;
              v1004 = 0;
              v1005 = (v1003 - 1);
              if ((int)v1003 - 1 >= 0)
              {
                v1006 = *(_QWORD *)(*a2 + 24);
                v1007 = v993;
                do
                {
                  v1008 = ldiv(v1007, *(int *)(v1002 + 4 * v1005));
                  v1007 = v1008.quot;
                  v1004 += *(_QWORD *)(v1006 + 8 * v1005--) * v1008.rem;
                }
                while (v1005 != -1);
              }
              vDSP_vaddi((const int *)(v1643 + 4 * (int)v997), 1, &v1597[(int)v1004], 1, v994, 1, v1551);
              v994 += v1551;
              v993 += v1551;
            }
            while (v993 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_291:
          switch(v195)
          {
            case 1uLL:
              v208 = v33[6];
              if (v208)
              {
                v209 = *(_DWORD **)(v34 + 152);
                v210 = v92[19];
                v211 = (_DWORD *)v33[19];
                v212 = 4 * *(_QWORD *)v92[3];
                v213 = 4 * **(_QWORD **)(v34 + 24);
                do
                {
                  *v211++ = *v210 + *v209;
                  v210 = (int *)((char *)v210 + v212);
                  v209 = (_DWORD *)((char *)v209 + v213);
                  --v208;
                }
                while (v208);
              }
              break;
            case 2uLL:
              v445 = *v35;
              if (*v35)
              {
                v446 = 0;
                v447 = 0;
                v448 = 0;
                v449 = 0;
                v450 = *(_QWORD *)(v34 + 152);
                v451 = v92[19];
                v452 = v33[19];
                v453 = *(uint64_t **)(v34 + 24);
                v454 = *v453;
                v455 = v453[1];
                v456 = v92[3];
                v458 = *(_QWORD *)v456;
                v457 = *((_QWORD *)v456 + 1);
                v459 = v35[1];
                do
                {
                  if (v459)
                  {
                    for (i = 0; i < v459; ++i)
                    {
                      *(_DWORD *)(v452 + 4 * v447 + 4 * i) = v451[v448] + *(_DWORD *)(v450 + 4 * v449);
                      v449 += v455;
                      v448 += v457;
                      v459 = v35[1];
                    }
                    v461 = v459;
                    v445 = *v35;
                    v447 += i;
                  }
                  else
                  {
                    v461 = 0;
                  }
                  v449 = v449 + v454 - v461 * v455;
                  v448 = v448 + v458 - v457 * v93[1];
                  ++v446;
                }
                while (v446 < v445);
              }
              break;
            case 3uLL:
              v462 = *v35;
              if (*v35)
              {
                v463 = 0;
                v464 = 0;
                v465 = 0;
                v466 = 0;
                v467 = *(_QWORD *)(v34 + 152);
                v468 = v92[19];
                v469 = v33[19];
                v470 = *(uint64_t **)(v34 + 24);
                v471 = *v470;
                v472 = v470[1];
                v473 = v92[3];
                v474 = *(_QWORD *)v473;
                v475 = *((_QWORD *)v473 + 1);
                v476 = v35[1];
                v477 = v476;
                do
                {
                  if (v477)
                  {
                    v478 = 0;
                    v479 = v470[2];
                    v480 = *((_QWORD *)v473 + 2);
                    v481 = v35[2];
                    do
                    {
                      if (v481)
                      {
                        for (j = 0; j < v481; ++j)
                        {
                          *(_DWORD *)(v469 + 4 * v464 + 4 * j) = v468[v465] + *(_DWORD *)(v467 + 4 * v466);
                          v466 += v479;
                          v465 += v480;
                          v481 = v35[2];
                        }
                        v483 = v481;
                        v476 = v35[1];
                        v464 += j;
                      }
                      else
                      {
                        v483 = 0;
                      }
                      v466 = v466 + v472 - v483 * v479;
                      v465 = v465 + v475 - v480 * v93[2];
                      ++v478;
                    }
                    while (v478 < v476);
                    v484 = v476;
                    v462 = *v35;
                    v477 = v476;
                  }
                  else
                  {
                    v484 = 0;
                  }
                  v466 = v466 + v471 - v484 * v472;
                  v465 = v465 + v474 - v475 * v93[1];
                  ++v463;
                }
                while (v463 < v462);
              }
              break;
            case 4uLL:
              v485 = *v35;
              if (*v35)
              {
                v486 = 0;
                v487 = 0;
                v488 = 0;
                v489 = 0;
                v490 = *(_QWORD *)(v34 + 152);
                v491 = v92[19];
                v492 = v33[19];
                v493 = *(uint64_t **)(v34 + 24);
                v494 = *v493;
                v495 = v493[1];
                v496 = v92[3];
                v497 = *(_QWORD *)v496;
                v498 = *((_QWORD *)v496 + 1);
                v499 = v35[1];
                v500 = v499;
                do
                {
                  if (v500)
                  {
                    v501 = 0;
                    v502 = v493[2];
                    v503 = *((_QWORD *)v496 + 2);
                    v504 = v35[2];
                    v505 = v504;
                    do
                    {
                      if (v505)
                      {
                        v506 = 0;
                        v507 = v493[3];
                        v508 = *((_QWORD *)v496 + 3);
                        v509 = v35[3];
                        do
                        {
                          if (v509)
                          {
                            for (k = 0; k < v509; ++k)
                            {
                              *(_DWORD *)(v492 + 4 * v487 + 4 * k) = v491[v488] + *(_DWORD *)(v490 + 4 * v489);
                              v489 += v507;
                              v488 += v508;
                              v509 = v35[3];
                            }
                            v511 = v509;
                            v504 = v35[2];
                            v487 += k;
                          }
                          else
                          {
                            v511 = 0;
                          }
                          v489 = v489 + v502 - v511 * v507;
                          v488 = v488 + v503 - v508 * v93[3];
                          ++v506;
                        }
                        while (v506 < v504);
                        v512 = v504;
                        v499 = v35[1];
                        v505 = v504;
                      }
                      else
                      {
                        v512 = 0;
                      }
                      v489 = v489 + v495 - v512 * v502;
                      v488 = v488 + v498 - v503 * v93[2];
                      ++v501;
                    }
                    while (v501 < v499);
                    v513 = v499;
                    v485 = *v35;
                    v500 = v499;
                  }
                  else
                  {
                    v513 = 0;
                  }
                  v489 = v489 + v494 - v513 * v495;
                  v488 = v488 + v497 - v498 * v93[1];
                  ++v486;
                }
                while (v486 < v485);
              }
              break;
            default:
              v1586 = v33[6];
              v1632 = v37;
              if (v1586)
              {
                v434 = 0;
                v1521 = v92[19];
                v1541 = *(_QWORD *)(v34 + 152);
                v1514 = v33[19];
                do
                {
                  v435 = v1632;
                  if ((v1632 & 0x80000000) != 0)
                  {
                    LODWORD(v436) = 0;
                  }
                  else
                  {
                    v436 = 0;
                    v437 = *(_QWORD *)(v34 + 24);
                    v438 = v434;
                    do
                    {
                      v439 = ldiv(v438, v35[v435]);
                      v438 = v439.quot;
                      v436 += *(_QWORD *)(v437 + 8 * v435--) * v439.rem;
                    }
                    while (v435 != -1);
                  }
                  v440 = 0;
                  if ((v95 & 0x80000000) == 0)
                  {
                    v441 = v92[3];
                    v442 = v95;
                    v443 = v434;
                    do
                    {
                      v444 = ldiv(v443, v93[v442]);
                      v443 = v444.quot;
                      v440 += *(_QWORD *)&v441[2 * v442--] * v444.rem;
                    }
                    while (v442 != -1);
                  }
                  *(_DWORD *)(v1514 + 4 * v434++) = v1521[(int)v440] + *(_DWORD *)(v1541 + 4 * (int)v436);
                }
                while (v434 != v1586);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v10)
      {
        case 0:
LABEL_7:
          v7 = **(_BYTE **)(*a2 + 152) + **(_BYTE **)(*a1 + 152);
LABEL_8:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v42 = *(_QWORD **)a3;
          v43 = *a1;
          v44 = *(int **)*a1;
          v45 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v44) >> 2;
          v46 = v45 - 1;
          if ((int)v45 - 1 >= -1)
            v46 = -1;
          v47 = v46 + 1;
          v48 = v45 + 1;
          break;
      }
      while (1)
      {
        v49 = v48 - 2;
        if (v48 - 2 < 0)
          break;
        --v48;
        if (*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8 * v49) != *(_QWORD *)(v42[3] + 8 * v49))
          goto LABEL_91;
      }
      v48 = v47;
LABEL_91:
      v100 = (int **)*a2;
      v101 = *(int **)*a2;
      v102 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v101) >> 2;
      v103 = v102 - 1;
      if ((int)v102 - 1 >= -1)
        v103 = -1;
      v104 = v103 + 1;
      v105 = v102 + 1;
      while (1)
      {
        v106 = v105 - 2;
        if (v105 - 2 < 0)
          break;
        --v105;
        if (*(_QWORD *)&v100[3][2 * v106] != *(_QWORD *)(v42[3] + 8 * v106))
          goto LABEL_137;
      }
      v105 = v104;
LABEL_137:
      v137 = v45 + 1;
      while (1)
      {
        v138 = v137 - 2;
        if (v137 - 2 < 0)
          break;
        --v137;
        if (*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8 * v138))
          goto LABEL_172;
      }
      v137 = v47;
LABEL_172:
      v151 = v102 + 1;
      while (1)
      {
        v152 = v151 - 2;
        if (v151 - 2 < 0)
          break;
        --v151;
        if (*(_QWORD *)&v100[3][2 * v152])
          goto LABEL_297;
      }
      v151 = v104;
LABEL_297:
      v214 = (uint64_t)(v42[1] - *v42) >> 2;
      if (v48 <= v105)
        v215 = v105;
      else
        v215 = v48;
      if (v48 <= v151)
        v48 = v151;
      if (v137 > v105)
        v105 = v137;
      if (v214 > v105)
        v216 = 1;
      else
        v216 = 4;
      if (v214 <= v105)
        v105 = (uint64_t)(v42[1] - *v42) >> 2;
      if (v214 <= v48)
        v48 = v105;
      else
        v216 = 2;
      if (v214 <= v215)
      {
        v217 = v48;
      }
      else
      {
        v216 = 3;
        v217 = v215;
      }
      if (!v217)
        goto LABEL_326;
      v218 = *(_QWORD *)(v42[3] + 8 * (v217 - 1));
      if (v218 < 0x10)
        goto LABEL_326;
      switch(v216)
      {
        case 1:
          if (v217 == 2)
          {
            v1288 = *v44;
            if (*v44)
            {
              v1289 = 0;
              v1290 = 0;
              v1291 = 0;
              v1292 = *(_QWORD *)(v43 + 152);
              v1293 = v100[19];
              v1294 = (int)v218;
              v1295 = (int *)v42[19];
              do
              {
                if (v44[1])
                {
                  v1296 = 0;
                  do
                  {
                    vDSP_vsaddi((int *)((char *)v1293 + v1290), 1, (const int *)(v1292 + v1291), v1295, 1, v1294);
                    v43 = *a1;
                    v1297 = *(_QWORD **)(*a1 + 24);
                    v1298 = v1297[1];
                    v1291 += v1298;
                    v100 = (int **)*a2;
                    v1299 = *(int **)(*a2 + 24);
                    v1300 = *((_QWORD *)v1299 + 1);
                    v1290 += v1300;
                    v1295 = (int *)((char *)v1295 + v1294);
                    ++v1296;
                    v44 = *(int **)*a1;
                    v1301 = v44[1];
                  }
                  while (v1296 < v1301);
                  v1288 = *v44;
                  v101 = *v100;
                }
                else
                {
                  v1301 = 0;
                  v1297 = *(_QWORD **)(v43 + 24);
                  v1298 = v1297[1];
                  v1299 = v100[3];
                  v1300 = *((_QWORD *)v1299 + 1);
                }
                v1291 = *v1297 + v1291 - v1301 * v1298;
                v1290 = *(_QWORD *)v1299 + v1290 - v1300 * v101[1];
                ++v1289;
              }
              while (v1289 < v1288);
            }
          }
          else if (v217 == 1)
          {
            if (*v44)
            {
              v863 = 0;
              v864 = 0;
              v865 = 0;
              v866 = *(_QWORD *)(v43 + 152);
              v867 = v100[19];
              v868 = (int)v218;
              v869 = (int *)v42[19];
              do
              {
                vDSP_vsaddi((int *)((char *)v867 + v864), 1, (const int *)(v866 + v865), v869, 1, v868);
                v865 += **(_QWORD **)(*a1 + 24);
                v864 += **(_QWORD **)(*a2 + 24);
                v869 = (int *)((char *)v869 + v868);
                ++v863;
              }
              while (v863 < **(int **)*a1);
            }
          }
          else if (v42[6])
          {
            v1302 = 0;
            v1615 = v100[19];
            v1661 = *(_QWORD *)(v43 + 152);
            v1569 = (int)v218;
            v1303 = (int *)v42[19];
            do
            {
              v1304 = *(_QWORD *)*a1;
              v1305 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1304) >> 2;
              v1306 = 0;
              v1307 = (v1305 - 1);
              if ((int)v1305 - 1 >= 0)
              {
                v1308 = *(_QWORD *)(*a1 + 24);
                v1309 = v1302;
                do
                {
                  v1310 = ldiv(v1309, *(int *)(v1304 + 4 * v1307));
                  v1309 = v1310.quot;
                  v1306 += *(_QWORD *)(v1308 + 8 * v1307--) * v1310.rem;
                }
                while (v1307 != -1);
              }
              v1311 = *(_QWORD *)*a2;
              v1312 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1311) >> 2;
              v1313 = 0;
              v1314 = (v1312 - 1);
              if ((int)v1312 - 1 >= 0)
              {
                v1315 = *(_QWORD *)(*a2 + 24);
                v1316 = v1302;
                do
                {
                  v1317 = ldiv(v1316, *(int *)(v1311 + 4 * v1314));
                  v1316 = v1317.quot;
                  v1313 += *(_QWORD *)(v1315 + 8 * v1314--) * v1317.rem;
                }
                while (v1314 != -1);
              }
              vDSP_vsaddi((int *)((char *)v1615 + (int)v1313), 1, (const int *)(v1661 + (int)v1306), v1303, 1, v1569);
              v1303 = (int *)((char *)v1303 + v1569);
              v1302 += v1569;
            }
            while (v1302 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v217 == 2)
          {
            v1318 = *v44;
            if (*v44)
            {
              v1319 = 0;
              v1320 = 0;
              v1321 = 0;
              v1322 = *(_QWORD *)(v43 + 152);
              v1323 = v100[19];
              v1324 = (int)v218;
              v1325 = (int *)v42[19];
              do
              {
                if (v44[1])
                {
                  v1326 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1322 + v1321), 1, (int *)((char *)v1323 + v1320), v1325, 1, v1324);
                    v43 = *a1;
                    v1327 = *(_QWORD **)(*a1 + 24);
                    v1328 = v1327[1];
                    v1321 += v1328;
                    v100 = (int **)*a2;
                    v1329 = *(int **)(*a2 + 24);
                    v1330 = *((_QWORD *)v1329 + 1);
                    v1320 += v1330;
                    v1325 = (int *)((char *)v1325 + v1324);
                    ++v1326;
                    v44 = *(int **)*a1;
                    v1331 = v44[1];
                  }
                  while (v1326 < v1331);
                  v1318 = *v44;
                  v101 = *v100;
                }
                else
                {
                  v1331 = 0;
                  v1327 = *(_QWORD **)(v43 + 24);
                  v1328 = v1327[1];
                  v1329 = v100[3];
                  v1330 = *((_QWORD *)v1329 + 1);
                }
                v1321 = *v1327 + v1321 - v1331 * v1328;
                v1320 = *(_QWORD *)v1329 + v1320 - v1330 * v101[1];
                ++v1319;
              }
              while (v1319 < v1318);
            }
          }
          else if (v217 == 1)
          {
            if (*v44)
            {
              v870 = 0;
              v871 = 0;
              v872 = 0;
              v873 = *(_QWORD *)(v43 + 152);
              v874 = v100[19];
              v875 = (int)v218;
              v876 = (int *)v42[19];
              do
              {
                vDSP_vsaddi((const int *)(v873 + v872), 1, (int *)((char *)v874 + v871), v876, 1, v875);
                v872 += **(_QWORD **)(*a1 + 24);
                v871 += **(_QWORD **)(*a2 + 24);
                v876 = (int *)((char *)v876 + v875);
                ++v870;
              }
              while (v870 < **(int **)*a1);
            }
          }
          else if (v42[6])
          {
            v1332 = 0;
            v1616 = v100[19];
            v1662 = *(_QWORD *)(v43 + 152);
            v1570 = (int)v218;
            v1333 = (int *)v42[19];
            do
            {
              v1334 = *(_QWORD *)*a1;
              v1335 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1334) >> 2;
              v1336 = 0;
              v1337 = (v1335 - 1);
              if ((int)v1335 - 1 >= 0)
              {
                v1338 = *(_QWORD *)(*a1 + 24);
                v1339 = v1332;
                do
                {
                  v1340 = ldiv(v1339, *(int *)(v1334 + 4 * v1337));
                  v1339 = v1340.quot;
                  v1336 += *(_QWORD *)(v1338 + 8 * v1337--) * v1340.rem;
                }
                while (v1337 != -1);
              }
              v1341 = *(_QWORD *)*a2;
              v1342 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1341) >> 2;
              v1343 = 0;
              v1344 = (v1342 - 1);
              if ((int)v1342 - 1 >= 0)
              {
                v1345 = *(_QWORD *)(*a2 + 24);
                v1346 = v1332;
                do
                {
                  v1347 = ldiv(v1346, *(int *)(v1341 + 4 * v1344));
                  v1346 = v1347.quot;
                  v1343 += *(_QWORD *)(v1345 + 8 * v1344--) * v1347.rem;
                }
                while (v1344 != -1);
              }
              vDSP_vsaddi((const int *)(v1662 + (int)v1336), 1, (int *)((char *)v1616 + (int)v1343), v1333, 1, v1570);
              v1333 = (int *)((char *)v1333 + v1570);
              v1332 += v1570;
            }
            while (v1332 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v217 == 2)
          {
            v1009 = *v44;
            if (*v44)
            {
              v1010 = 0;
              v1011 = 0;
              v1012 = 0;
              v1013 = *(_QWORD *)(v43 + 152);
              v1014 = v100[19];
              v1015 = (int)v218;
              v1016 = (int *)v42[19];
              do
              {
                if (v44[1])
                {
                  v1017 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1013 + v1012), 1, (int *)((char *)v1014 + v1011), 1, v1016, 1, v1015);
                    v43 = *a1;
                    v1018 = *(_QWORD **)(*a1 + 24);
                    v1019 = v1018[1];
                    v1012 += v1019;
                    v100 = (int **)*a2;
                    v1020 = *(int **)(*a2 + 24);
                    v1021 = *((_QWORD *)v1020 + 1);
                    v1011 += v1021;
                    v1016 = (int *)((char *)v1016 + v1015);
                    ++v1017;
                    v44 = *(int **)*a1;
                    v1022 = v44[1];
                  }
                  while (v1017 < v1022);
                  v1009 = *v44;
                  v101 = *v100;
                }
                else
                {
                  v1022 = 0;
                  v1018 = *(_QWORD **)(v43 + 24);
                  v1019 = v1018[1];
                  v1020 = v100[3];
                  v1021 = *((_QWORD *)v1020 + 1);
                }
                v1012 = *v1018 + v1012 - v1022 * v1019;
                v1011 = *(_QWORD *)v1020 + v1011 - v1021 * v101[1];
                ++v1010;
              }
              while (v1010 < v1009);
            }
          }
          else if (v217 == 1)
          {
            if (*v44)
            {
              v219 = 0;
              v220 = 0;
              v221 = 0;
              v222 = *(_QWORD *)(v43 + 152);
              v223 = v100[19];
              v224 = (int)v218;
              v225 = (int *)v42[19];
              do
              {
                vDSP_vaddi((const int *)(v222 + v221), 1, (int *)((char *)v223 + v220), 1, v225, 1, v224);
                v221 += **(_QWORD **)(*a1 + 24);
                v220 += **(_QWORD **)(*a2 + 24);
                v225 = (int *)((char *)v225 + v224);
                ++v219;
              }
              while (v219 < **(int **)*a1);
            }
          }
          else if (v42[6])
          {
            v1023 = 0;
            v1598 = v100[19];
            v1644 = *(_QWORD *)(v43 + 152);
            v1552 = (int)v218;
            v1024 = (int *)v42[19];
            do
            {
              v1025 = *(_QWORD *)*a1;
              v1026 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1025) >> 2;
              v1027 = 0;
              v1028 = (v1026 - 1);
              if ((int)v1026 - 1 >= 0)
              {
                v1029 = *(_QWORD *)(*a1 + 24);
                v1030 = v1023;
                do
                {
                  v1031 = ldiv(v1030, *(int *)(v1025 + 4 * v1028));
                  v1030 = v1031.quot;
                  v1027 += *(_QWORD *)(v1029 + 8 * v1028--) * v1031.rem;
                }
                while (v1028 != -1);
              }
              v1032 = *(_QWORD *)*a2;
              v1033 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1032) >> 2;
              v1034 = 0;
              v1035 = (v1033 - 1);
              if ((int)v1033 - 1 >= 0)
              {
                v1036 = *(_QWORD *)(*a2 + 24);
                v1037 = v1023;
                do
                {
                  v1038 = ldiv(v1037, *(int *)(v1032 + 4 * v1035));
                  v1037 = v1038.quot;
                  v1034 += *(_QWORD *)(v1036 + 8 * v1035--) * v1038.rem;
                }
                while (v1035 != -1);
              }
              vDSP_vaddi((const int *)(v1644 + (int)v1027), 1, (int *)((char *)v1598 + (int)v1034), 1, v1024, 1, v1552);
              v1024 = (int *)((char *)v1024 + v1552);
              v1023 += v1552;
            }
            while (v1023 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_326:
          switch(v214)
          {
            case 1uLL:
              if (v42[6])
              {
                v226 = 0;
                v227 = 0;
                v228 = 0;
                v229 = *(_QWORD *)(v43 + 152);
                v230 = v100[19];
                v231 = v42[19];
                do
                {
                  *(_BYTE *)(v231 + v226) = *((_BYTE *)v230 + v227) + *(_BYTE *)(v229 + v228);
                  v228 += **(_QWORD **)(*a1 + 24);
                  v227 += **(_QWORD **)(*a2 + 24);
                  ++v226;
                }
                while (v226 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v530 = *v44;
              if (*v44)
              {
                v531 = 0;
                v532 = 0;
                v533 = 0;
                v534 = 0;
                v535 = *(_QWORD *)(v43 + 152);
                v536 = v100[19];
                v537 = v42[19];
                do
                {
                  if (v44[1])
                  {
                    v538 = 0;
                    do
                    {
                      *(_BYTE *)(v537 + v532 + v538) = *((_BYTE *)v536 + v533) + *(_BYTE *)(v535 + v534);
                      v43 = *a1;
                      v539 = *(_QWORD **)(*a1 + 24);
                      v540 = v539[1];
                      v534 += v540;
                      v100 = (int **)*a2;
                      v541 = *(int **)(*a2 + 24);
                      v542 = *((_QWORD *)v541 + 1);
                      v533 += v542;
                      ++v538;
                      v44 = *(int **)*a1;
                      v543 = v44[1];
                    }
                    while (v538 < v543);
                    v530 = *v44;
                    v101 = *v100;
                    v532 += v538;
                  }
                  else
                  {
                    v543 = 0;
                    v539 = *(_QWORD **)(v43 + 24);
                    v540 = v539[1];
                    v541 = v100[3];
                    v542 = *((_QWORD *)v541 + 1);
                  }
                  v534 = *v539 + v534 - v543 * v540;
                  v533 = *(_QWORD *)v541 + v533 - v542 * v101[1];
                  ++v531;
                }
                while (v531 < v530);
              }
              break;
            case 3uLL:
              v544 = *v44;
              if (*v44)
              {
                v545 = 0;
                v546 = 0;
                v547 = 0;
                v548 = 0;
                v549 = *(_QWORD *)(v43 + 152);
                v550 = v100[19];
                v551 = v42[19];
                do
                {
                  if (v44[1])
                  {
                    v552 = 0;
                    do
                    {
                      if (v44[2])
                      {
                        v553 = 0;
                        do
                        {
                          *(_BYTE *)(v551 + v546 + v553) = *((_BYTE *)v550 + v547) + *(_BYTE *)(v549 + v548);
                          v43 = *a1;
                          v554 = *(_QWORD **)(*a1 + 24);
                          v555 = v554[2];
                          v548 += v555;
                          v100 = (int **)*a2;
                          v556 = *(int **)(*a2 + 24);
                          v557 = *((_QWORD *)v556 + 2);
                          v547 += v557;
                          ++v553;
                          v44 = *(int **)*a1;
                          v558 = v44[2];
                        }
                        while (v553 < v558);
                        v101 = *v100;
                        v546 += v553;
                      }
                      else
                      {
                        v558 = 0;
                        v554 = *(_QWORD **)(v43 + 24);
                        v555 = v554[2];
                        v556 = v100[3];
                        v557 = *((_QWORD *)v556 + 2);
                      }
                      v559 = v554[1];
                      v548 = v559 + v548 - v558 * v555;
                      v547 = *((_QWORD *)v556 + 1) + v547 - v557 * v101[2];
                      ++v552;
                      v560 = v44[1];
                    }
                    while (v552 < v560);
                    v544 = *v44;
                  }
                  else
                  {
                    v560 = 0;
                    v554 = *(_QWORD **)(v43 + 24);
                    v559 = v554[1];
                  }
                  v548 = *v554 + v548 - v560 * v559;
                  v547 = *(_QWORD *)v100[3] + v547 - *((_QWORD *)v100[3] + 1) * v101[1];
                  ++v545;
                }
                while (v545 < v544);
              }
              break;
            case 4uLL:
              v561 = *v44;
              if (*v44)
              {
                v562 = 0;
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v566 = *(_QWORD *)(v43 + 152);
                v567 = v100[19];
                v568 = v42[19];
                do
                {
                  if (v44[1])
                  {
                    v569 = 0;
                    do
                    {
                      if (v44[2])
                      {
                        v570 = 0;
                        do
                        {
                          if (v44[3])
                          {
                            v571 = 0;
                            do
                            {
                              *(_BYTE *)(v568 + v563 + v571) = *((_BYTE *)v567 + v564) + *(_BYTE *)(v566 + v565);
                              v43 = *a1;
                              v572 = *(_QWORD **)(*a1 + 24);
                              v573 = v572[3];
                              v565 += v573;
                              v100 = (int **)*a2;
                              v574 = *(int **)(*a2 + 24);
                              v575 = *((_QWORD *)v574 + 3);
                              v564 += v575;
                              ++v571;
                              v44 = *(int **)*a1;
                              v576 = v44[3];
                            }
                            while (v571 < v576);
                            v101 = *v100;
                            v563 += v571;
                          }
                          else
                          {
                            v576 = 0;
                            v572 = *(_QWORD **)(v43 + 24);
                            v573 = v572[3];
                            v574 = v100[3];
                            v575 = *((_QWORD *)v574 + 3);
                          }
                          v577 = v572[2];
                          v565 = v577 + v565 - v576 * v573;
                          v564 = *((_QWORD *)v574 + 2) + v564 - v575 * v101[3];
                          ++v570;
                          v578 = v44[2];
                        }
                        while (v570 < v578);
                      }
                      else
                      {
                        v578 = 0;
                        v572 = *(_QWORD **)(v43 + 24);
                        v577 = v572[2];
                      }
                      v565 = v572[1] + v565 - v578 * v577;
                      v564 = *((_QWORD *)v100[3] + 1) + v564 - *((_QWORD *)v100[3] + 2) * v101[2];
                      ++v569;
                      v579 = v44[1];
                    }
                    while (v569 < v579);
                    v561 = *v44;
                  }
                  else
                  {
                    v579 = 0;
                  }
                  v565 = **(_QWORD **)(v43 + 24) + v565 - *(_QWORD *)(*(_QWORD *)(v43 + 24) + 8) * v579;
                  v564 = *(_QWORD *)v100[3] + v564 - *((_QWORD *)v100[3] + 1) * v101[1];
                  ++v562;
                }
                while (v562 < v561);
              }
              break;
            default:
              if (v42[6])
              {
                v514 = 0;
                v1587 = v100[19];
                v1633 = *(_QWORD *)(v43 + 152);
                v515 = v42[19];
                do
                {
                  v516 = *(_QWORD *)*a1;
                  v517 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v516) >> 2;
                  v518 = 0;
                  v519 = (v517 - 1);
                  if ((int)v517 - 1 >= 0)
                  {
                    v520 = *(_QWORD *)(*a1 + 24);
                    v521 = v514;
                    do
                    {
                      v522 = ldiv(v521, *(int *)(v516 + 4 * v519));
                      v521 = v522.quot;
                      v518 += *(_QWORD *)(v520 + 8 * v519--) * v522.rem;
                    }
                    while (v519 != -1);
                  }
                  v523 = *(_QWORD *)*a2;
                  v524 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v523) >> 2;
                  v525 = 0;
                  v526 = (v524 - 1);
                  if ((int)v524 - 1 >= 0)
                  {
                    v527 = *(_QWORD *)(*a2 + 24);
                    v528 = v514;
                    do
                    {
                      v529 = ldiv(v528, *(int *)(v523 + 4 * v526));
                      v528 = v529.quot;
                      v525 += *(_QWORD *)(v527 + 8 * v526--) * v529.rem;
                    }
                    while (v526 != -1);
                  }
                  *(_BYTE *)(v515 + v514++) = *((_BYTE *)v1587 + (int)v525) + *(_BYTE *)(v1633 + (int)v518);
                }
                while (v514 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v11)
      {
        case 0:
LABEL_10:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a2 + 152) + **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v50 = *(_QWORD **)a3;
          v51 = *a1;
          v52 = *(int **)*a1;
          v53 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v52) >> 2;
          v54 = (v53 - 1);
          if ((int)v54 >= -1)
            v55 = -1;
          else
            v55 = v53 - 1;
          v56 = v55 + 1;
          v57 = v53 + 1;
          break;
      }
      while (1)
      {
        v58 = v57 - 2;
        if (v57 - 2 < 0)
          break;
        --v57;
        if (*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8 * v58) != *(_QWORD *)(v50[3] + 8 * v58))
          goto LABEL_98;
      }
      v57 = v56;
LABEL_98:
      v107 = (int **)*a2;
      v108 = *(int **)*a2;
      v109 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v108) >> 2;
      v110 = (v109 - 1);
      if ((int)v110 >= -1)
        v111 = -1;
      else
        v111 = v109 - 1;
      v112 = v111 + 1;
      v113 = v109 + 1;
      while (1)
      {
        v114 = v113 - 2;
        if (v113 - 2 < 0)
          break;
        --v113;
        if (*(_QWORD *)&v107[3][2 * v114] != *(_QWORD *)(v50[3] + 8 * v114))
          goto LABEL_142;
      }
      v113 = v112;
LABEL_142:
      v139 = v53 + 1;
      while (1)
      {
        v140 = v139 - 2;
        if (v139 - 2 < 0)
          break;
        --v139;
        if (*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8 * v140))
          goto LABEL_177;
      }
      v139 = v56;
LABEL_177:
      v153 = v109 + 1;
      while (1)
      {
        v154 = v153 - 2;
        if (v153 - 2 < 0)
          break;
        --v153;
        if (*(_QWORD *)&v107[3][2 * v154])
          goto LABEL_332;
      }
      v153 = v112;
LABEL_332:
      v232 = (uint64_t)(v50[1] - *v50) >> 2;
      if (v57 <= v113)
        v233 = v113;
      else
        v233 = v57;
      if (v57 <= v153)
        v57 = v153;
      if (v139 > v113)
        v113 = v139;
      if (v232 > v113)
        v234 = 1;
      else
        v234 = 4;
      if (v232 <= v113)
        v113 = (uint64_t)(v50[1] - *v50) >> 2;
      if (v232 <= v57)
        v57 = v113;
      else
        v234 = 2;
      if (v232 <= v233)
      {
        v235 = v57;
      }
      else
      {
        v234 = 3;
        v235 = v233;
      }
      if (!v235)
        goto LABEL_361;
      v236 = *(_QWORD *)(v50[3] + 8 * (v235 - 1));
      if (v236 < 0x10)
        goto LABEL_361;
      switch(v234)
      {
        case 1:
          if (v235 == 2)
          {
            v1348 = *v52;
            if (*v52)
            {
              v1349 = 0;
              v1350 = 0;
              v1663 = *(_QWORD *)(v51 + 152);
              v1617 = v107[19];
              v1351 = (int *)v50[19];
              v1533 = 0;
              v1571 = (int)v236;
              v1352 = 4 * (int)v236;
              do
              {
                if (v52[1])
                {
                  v1353 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1617[v1349], 1, (const int *)(v1663 + 4 * v1350), v1351, 1, v1571);
                    v51 = *a1;
                    v1354 = *(_QWORD **)(*a1 + 24);
                    v1355 = v1354[1];
                    v1350 += v1355;
                    v107 = (int **)*a2;
                    v1356 = *(int **)(*a2 + 24);
                    v1357 = *((_QWORD *)v1356 + 1);
                    v1349 += v1357;
                    ++v1353;
                    v52 = *(int **)*a1;
                    v1358 = v52[1];
                    v1351 = (int *)((char *)v1351 + v1352);
                  }
                  while (v1353 < v1358);
                  v1348 = *v52;
                  v108 = *v107;
                }
                else
                {
                  v1358 = 0;
                  v1354 = *(_QWORD **)(v51 + 24);
                  v1355 = v1354[1];
                  v1356 = v107[3];
                  v1357 = *((_QWORD *)v1356 + 1);
                }
                v1350 = *v1354 + v1350 - v1358 * v1355;
                v1349 = *(_QWORD *)v1356 + v1349 - v1357 * v108[1];
                ++v1533;
              }
              while (v1533 < v1348);
            }
          }
          else if (v235 == 1)
          {
            if (*v52)
            {
              v877 = 0;
              v878 = 0;
              v879 = 0;
              v880 = *(_QWORD *)(v51 + 152);
              v881 = v107[19];
              v882 = (int)v236;
              v883 = 4 * (int)v236;
              v884 = (int *)v50[19];
              do
              {
                vDSP_vsaddi(&v881[v878], 1, (const int *)(v880 + 4 * v879), v884, 1, v882);
                v879 += **(_QWORD **)(*a1 + 24);
                v878 += **(_QWORD **)(*a2 + 24);
                ++v877;
                v884 = (int *)((char *)v884 + v883);
              }
              while (v877 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            v1359 = 0;
            v1618 = v107[19];
            v1664 = *(_QWORD *)(v51 + 152);
            v1572 = (int)v236;
            v1360 = (int *)v50[19];
            do
            {
              v1361 = *(_QWORD *)*a1;
              v1362 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1361) >> 2;
              v1363 = 0;
              v1364 = (v1362 - 1);
              if ((int)v1362 - 1 >= 0)
              {
                v1365 = *(_QWORD *)(*a1 + 24);
                v1366 = v1359;
                do
                {
                  v1367 = ldiv(v1366, *(int *)(v1361 + 4 * v1364));
                  v1366 = v1367.quot;
                  v1363 += *(_QWORD *)(v1365 + 8 * v1364--) * v1367.rem;
                }
                while (v1364 != -1);
              }
              v1368 = *(_QWORD *)*a2;
              v1369 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1368) >> 2;
              v1370 = 0;
              v1371 = (v1369 - 1);
              if ((int)v1369 - 1 >= 0)
              {
                v1372 = *(_QWORD *)(*a2 + 24);
                v1373 = v1359;
                do
                {
                  v1374 = ldiv(v1373, *(int *)(v1368 + 4 * v1371));
                  v1373 = v1374.quot;
                  v1370 += *(_QWORD *)(v1372 + 8 * v1371--) * v1374.rem;
                }
                while (v1371 != -1);
              }
              vDSP_vsaddi(&v1618[(int)v1370], 1, (const int *)(v1664 + 4 * (int)v1363), v1360, 1, v1572);
              v1360 += v1572;
              v1359 += v1572;
            }
            while (v1359 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v235 == 2)
          {
            v1375 = *v52;
            if (*v52)
            {
              v1376 = 0;
              v1377 = 0;
              v1665 = *(_QWORD *)(v51 + 152);
              v1619 = v107[19];
              v1378 = (int *)v50[19];
              v1534 = 0;
              v1573 = (int)v236;
              v1379 = 4 * (int)v236;
              do
              {
                if (v52[1])
                {
                  v1380 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1665 + 4 * v1377), 1, &v1619[v1376], v1378, 1, v1573);
                    v51 = *a1;
                    v1381 = *(_QWORD **)(*a1 + 24);
                    v1382 = v1381[1];
                    v1377 += v1382;
                    v107 = (int **)*a2;
                    v1383 = *(int **)(*a2 + 24);
                    v1384 = *((_QWORD *)v1383 + 1);
                    v1376 += v1384;
                    ++v1380;
                    v52 = *(int **)*a1;
                    v1385 = v52[1];
                    v1378 = (int *)((char *)v1378 + v1379);
                  }
                  while (v1380 < v1385);
                  v1375 = *v52;
                  v108 = *v107;
                }
                else
                {
                  v1385 = 0;
                  v1381 = *(_QWORD **)(v51 + 24);
                  v1382 = v1381[1];
                  v1383 = v107[3];
                  v1384 = *((_QWORD *)v1383 + 1);
                }
                v1377 = *v1381 + v1377 - v1385 * v1382;
                v1376 = *(_QWORD *)v1383 + v1376 - v1384 * v108[1];
                ++v1534;
              }
              while (v1534 < v1375);
            }
          }
          else if (v235 == 1)
          {
            if (*v52)
            {
              v885 = 0;
              v886 = 0;
              v887 = 0;
              v888 = *(_QWORD *)(v51 + 152);
              v889 = v107[19];
              v890 = (int)v236;
              v891 = 4 * (int)v236;
              v892 = (int *)v50[19];
              do
              {
                vDSP_vsaddi((const int *)(v888 + 4 * v887), 1, &v889[v886], v892, 1, v890);
                v887 += **(_QWORD **)(*a1 + 24);
                v886 += **(_QWORD **)(*a2 + 24);
                ++v885;
                v892 = (int *)((char *)v892 + v891);
              }
              while (v885 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            v1386 = 0;
            v1620 = v107[19];
            v1666 = *(_QWORD *)(v51 + 152);
            v1574 = (int)v236;
            v1387 = (int *)v50[19];
            do
            {
              v1388 = *(_QWORD *)*a1;
              v1389 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1388) >> 2;
              v1390 = 0;
              v1391 = (v1389 - 1);
              if ((int)v1389 - 1 >= 0)
              {
                v1392 = *(_QWORD *)(*a1 + 24);
                v1393 = v1386;
                do
                {
                  v1394 = ldiv(v1393, *(int *)(v1388 + 4 * v1391));
                  v1393 = v1394.quot;
                  v1390 += *(_QWORD *)(v1392 + 8 * v1391--) * v1394.rem;
                }
                while (v1391 != -1);
              }
              v1395 = *(_QWORD *)*a2;
              v1396 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1395) >> 2;
              v1397 = 0;
              v1398 = (v1396 - 1);
              if ((int)v1396 - 1 >= 0)
              {
                v1399 = *(_QWORD *)(*a2 + 24);
                v1400 = v1386;
                do
                {
                  v1401 = ldiv(v1400, *(int *)(v1395 + 4 * v1398));
                  v1400 = v1401.quot;
                  v1397 += *(_QWORD *)(v1399 + 8 * v1398--) * v1401.rem;
                }
                while (v1398 != -1);
              }
              vDSP_vsaddi((const int *)(v1666 + 4 * (int)v1390), 1, &v1620[(int)v1397], v1387, 1, v1574);
              v1387 += v1574;
              v1386 += v1574;
            }
            while (v1386 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v235 == 2)
          {
            v1039 = *v52;
            if (*v52)
            {
              v1040 = 0;
              v1041 = 0;
              v1645 = *(_QWORD *)(v51 + 152);
              v1599 = v107[19];
              v1042 = (int *)v50[19];
              v1528 = 0;
              v1553 = (int)v236;
              v1043 = 4 * (int)v236;
              do
              {
                if (v52[1])
                {
                  v1044 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1645 + 4 * v1041), 1, &v1599[v1040], 1, v1042, 1, v1553);
                    v51 = *a1;
                    v1045 = *(_QWORD **)(*a1 + 24);
                    v1046 = v1045[1];
                    v1041 += v1046;
                    v107 = (int **)*a2;
                    v1047 = *(int **)(*a2 + 24);
                    v1048 = *((_QWORD *)v1047 + 1);
                    v1040 += v1048;
                    ++v1044;
                    v52 = *(int **)*a1;
                    v1049 = v52[1];
                    v1042 = (int *)((char *)v1042 + v1043);
                  }
                  while (v1044 < v1049);
                  v1039 = *v52;
                  v108 = *v107;
                }
                else
                {
                  v1049 = 0;
                  v1045 = *(_QWORD **)(v51 + 24);
                  v1046 = v1045[1];
                  v1047 = v107[3];
                  v1048 = *((_QWORD *)v1047 + 1);
                }
                v1041 = *v1045 + v1041 - v1049 * v1046;
                v1040 = *(_QWORD *)v1047 + v1040 - v1048 * v108[1];
                ++v1528;
              }
              while (v1528 < v1039);
            }
          }
          else if (v235 == 1)
          {
            if (*v52)
            {
              v237 = 0;
              v238 = 0;
              v239 = 0;
              v240 = *(_QWORD *)(v51 + 152);
              v241 = v107[19];
              v242 = (int)v236;
              v243 = 4 * (int)v236;
              v244 = (int *)v50[19];
              do
              {
                vDSP_vaddi((const int *)(v240 + 4 * v239), 1, &v241[v238], 1, v244, 1, v242);
                v239 += **(_QWORD **)(*a1 + 24);
                v238 += **(_QWORD **)(*a2 + 24);
                ++v237;
                v244 = (int *)((char *)v244 + v243);
              }
              while (v237 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            v1050 = 0;
            v1600 = v107[19];
            v1646 = *(_QWORD *)(v51 + 152);
            v1554 = (int)v236;
            v1051 = (int *)v50[19];
            do
            {
              v1052 = *(_QWORD *)*a1;
              v1053 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1052) >> 2;
              v1054 = 0;
              v1055 = (v1053 - 1);
              if ((int)v1053 - 1 >= 0)
              {
                v1056 = *(_QWORD *)(*a1 + 24);
                v1057 = v1050;
                do
                {
                  v1058 = ldiv(v1057, *(int *)(v1052 + 4 * v1055));
                  v1057 = v1058.quot;
                  v1054 += *(_QWORD *)(v1056 + 8 * v1055--) * v1058.rem;
                }
                while (v1055 != -1);
              }
              v1059 = *(_QWORD *)*a2;
              v1060 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1059) >> 2;
              v1061 = 0;
              v1062 = (v1060 - 1);
              if ((int)v1060 - 1 >= 0)
              {
                v1063 = *(_QWORD *)(*a2 + 24);
                v1064 = v1050;
                do
                {
                  v1065 = ldiv(v1064, *(int *)(v1059 + 4 * v1062));
                  v1064 = v1065.quot;
                  v1061 += *(_QWORD *)(v1063 + 8 * v1062--) * v1065.rem;
                }
                while (v1062 != -1);
              }
              vDSP_vaddi((const int *)(v1646 + 4 * (int)v1054), 1, &v1600[(int)v1061], 1, v1051, 1, v1554);
              v1051 += v1554;
              v1050 += v1554;
            }
            while (v1050 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_361:
          switch(v232)
          {
            case 1uLL:
              v245 = v50[6];
              if (v245)
              {
                v246 = *(_DWORD **)(v51 + 152);
                v247 = v107[19];
                v248 = (_DWORD *)v50[19];
                v249 = 4 * *(_QWORD *)v107[3];
                v250 = 4 * **(_QWORD **)(v51 + 24);
                do
                {
                  *v248++ = *v247 + *v246;
                  v247 = (int *)((char *)v247 + v249);
                  v246 = (_DWORD *)((char *)v246 + v250);
                  --v245;
                }
                while (v245);
              }
              break;
            case 2uLL:
              v591 = *v52;
              if (*v52)
              {
                v592 = 0;
                v593 = 0;
                v594 = 0;
                v595 = 0;
                v596 = *(_QWORD *)(v51 + 152);
                v597 = v107[19];
                v598 = v50[19];
                v599 = *(uint64_t **)(v51 + 24);
                v600 = *v599;
                v601 = v599[1];
                v602 = v107[3];
                v604 = *(_QWORD *)v602;
                v603 = *((_QWORD *)v602 + 1);
                v605 = v52[1];
                do
                {
                  if (v605)
                  {
                    for (m = 0; m < v605; ++m)
                    {
                      *(_DWORD *)(v598 + 4 * v593 + 4 * m) = v597[v594] + *(_DWORD *)(v596 + 4 * v595);
                      v595 += v601;
                      v594 += v603;
                      v605 = v52[1];
                    }
                    v607 = v605;
                    v591 = *v52;
                    v593 += m;
                  }
                  else
                  {
                    v607 = 0;
                  }
                  v595 = v595 + v600 - v607 * v601;
                  v594 = v594 + v604 - v603 * v108[1];
                  ++v592;
                }
                while (v592 < v591);
              }
              break;
            case 3uLL:
              v608 = *v52;
              if (*v52)
              {
                v609 = 0;
                v610 = 0;
                v611 = 0;
                v612 = 0;
                v613 = *(_QWORD *)(v51 + 152);
                v614 = v107[19];
                v615 = v50[19];
                v616 = *(uint64_t **)(v51 + 24);
                v617 = *v616;
                v618 = v616[1];
                v619 = v107[3];
                v620 = *(_QWORD *)v619;
                v621 = *((_QWORD *)v619 + 1);
                v622 = v52[1];
                v623 = v622;
                do
                {
                  if (v623)
                  {
                    v624 = 0;
                    v625 = v616[2];
                    v626 = *((_QWORD *)v619 + 2);
                    v627 = v52[2];
                    do
                    {
                      if (v627)
                      {
                        for (n = 0; n < v627; ++n)
                        {
                          *(_DWORD *)(v615 + 4 * v610 + 4 * n) = v614[v611] + *(_DWORD *)(v613 + 4 * v612);
                          v612 += v625;
                          v611 += v626;
                          v627 = v52[2];
                        }
                        v629 = v627;
                        v622 = v52[1];
                        v610 += n;
                      }
                      else
                      {
                        v629 = 0;
                      }
                      v612 = v612 + v618 - v629 * v625;
                      v611 = v611 + v621 - v626 * v108[2];
                      ++v624;
                    }
                    while (v624 < v622);
                    v630 = v622;
                    v608 = *v52;
                    v623 = v622;
                  }
                  else
                  {
                    v630 = 0;
                  }
                  v612 = v612 + v617 - v630 * v618;
                  v611 = v611 + v620 - v621 * v108[1];
                  ++v609;
                }
                while (v609 < v608);
              }
              break;
            case 4uLL:
              v631 = *v52;
              if (*v52)
              {
                v632 = 0;
                v633 = 0;
                v634 = 0;
                v635 = 0;
                v636 = *(_QWORD *)(v51 + 152);
                v637 = v107[19];
                v638 = v50[19];
                v639 = *(uint64_t **)(v51 + 24);
                v640 = *v639;
                v641 = v639[1];
                v642 = v107[3];
                v643 = *(_QWORD *)v642;
                v644 = *((_QWORD *)v642 + 1);
                v645 = v52[1];
                v646 = v645;
                do
                {
                  if (v646)
                  {
                    v647 = 0;
                    v648 = v639[2];
                    v649 = *((_QWORD *)v642 + 2);
                    v650 = v52[2];
                    v651 = v650;
                    do
                    {
                      if (v651)
                      {
                        v652 = 0;
                        v653 = v639[3];
                        v654 = *((_QWORD *)v642 + 3);
                        v655 = v52[3];
                        do
                        {
                          if (v655)
                          {
                            for (ii = 0; ii < v655; ++ii)
                            {
                              *(_DWORD *)(v638 + 4 * v633 + 4 * ii) = v637[v634] + *(_DWORD *)(v636 + 4 * v635);
                              v635 += v653;
                              v634 += v654;
                              v655 = v52[3];
                            }
                            v657 = v655;
                            v650 = v52[2];
                            v633 += ii;
                          }
                          else
                          {
                            v657 = 0;
                          }
                          v635 = v635 + v648 - v657 * v653;
                          v634 = v634 + v649 - v654 * v108[3];
                          ++v652;
                        }
                        while (v652 < v650);
                        v658 = v650;
                        v645 = v52[1];
                        v651 = v650;
                      }
                      else
                      {
                        v658 = 0;
                      }
                      v635 = v635 + v641 - v658 * v648;
                      v634 = v634 + v644 - v649 * v108[2];
                      ++v647;
                    }
                    while (v647 < v645);
                    v659 = v645;
                    v631 = *v52;
                    v646 = v645;
                  }
                  else
                  {
                    v659 = 0;
                  }
                  v635 = v635 + v640 - v659 * v641;
                  v634 = v634 + v643 - v644 * v108[1];
                  ++v632;
                }
                while (v632 < v631);
              }
              break;
            default:
              v1588 = v50[6];
              v1634 = v54;
              if (v1588)
              {
                v580 = 0;
                v1522 = v107[19];
                v1542 = *(_QWORD *)(v51 + 152);
                v1515 = v50[19];
                do
                {
                  v581 = v1634;
                  if ((v1634 & 0x80000000) != 0)
                  {
                    LODWORD(v582) = 0;
                  }
                  else
                  {
                    v582 = 0;
                    v583 = *(_QWORD *)(v51 + 24);
                    v584 = v580;
                    do
                    {
                      v585 = ldiv(v584, v52[v581]);
                      v584 = v585.quot;
                      v582 += *(_QWORD *)(v583 + 8 * v581--) * v585.rem;
                    }
                    while (v581 != -1);
                  }
                  v586 = 0;
                  if ((v110 & 0x80000000) == 0)
                  {
                    v587 = v107[3];
                    v588 = v110;
                    v589 = v580;
                    do
                    {
                      v590 = ldiv(v589, v108[v588]);
                      v589 = v590.quot;
                      v586 += *(_QWORD *)&v587[2 * v588--] * v590.rem;
                    }
                    while (v588 != -1);
                  }
                  *(_DWORD *)(v1515 + 4 * v580++) = v1522[(int)v586] + *(_DWORD *)(v1542 + 4 * (int)v582);
                }
                while (v580 != v1588);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v12)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a2 + 152) + **(_QWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v59 = *(_QWORD **)a3;
          v60 = *a1;
          v61 = *(int **)*a1;
          v62 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v61) >> 2;
          v63 = (v62 - 1);
          if ((int)v63 >= -1)
            v64 = -1;
          else
            v64 = v62 - 1;
          v65 = v64 + 1;
          v66 = v62 + 1;
          break;
      }
      while (1)
      {
        v67 = v66 - 2;
        if (v66 - 2 < 0)
          break;
        --v66;
        if (*(_QWORD *)(*(_QWORD *)(v60 + 24) + 8 * v67) != *(_QWORD *)(v59[3] + 8 * v67))
          goto LABEL_106;
      }
      v66 = v65;
LABEL_106:
      v115 = (int **)*a2;
      v116 = *(int **)*a2;
      v117 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v116) >> 2;
      v118 = (v117 - 1);
      if ((int)v118 >= -1)
        v119 = -1;
      else
        v119 = v117 - 1;
      v120 = v119 + 1;
      v121 = v117 + 1;
      while (1)
      {
        v122 = v121 - 2;
        if (v121 - 2 < 0)
          break;
        --v121;
        if (*(_QWORD *)&v115[3][2 * v122] != *(_QWORD *)(v59[3] + 8 * v122))
          goto LABEL_147;
      }
      v121 = v120;
LABEL_147:
      v141 = v62 + 1;
      while (1)
      {
        v142 = v141 - 2;
        if (v141 - 2 < 0)
          break;
        --v141;
        if (*(_QWORD *)(*(_QWORD *)(v60 + 24) + 8 * v142))
          goto LABEL_182;
      }
      v141 = v65;
LABEL_182:
      v155 = v117 + 1;
      while (1)
      {
        v156 = v155 - 2;
        if (v155 - 2 < 0)
          break;
        --v155;
        if (*(_QWORD *)&v115[3][2 * v156])
          goto LABEL_367;
      }
      v155 = v120;
LABEL_367:
      v251 = (uint64_t)(v59[1] - *v59) >> 2;
      if (v66 <= v121)
        v252 = v121;
      else
        v252 = v66;
      if (v66 <= v155)
        v66 = v155;
      if (v141 > v121)
        v121 = v141;
      if (v251 > v121)
        v253 = 1;
      else
        v253 = 4;
      if (v251 <= v121)
        v121 = (uint64_t)(v59[1] - *v59) >> 2;
      if (v251 <= v66)
        v66 = v121;
      else
        v253 = 2;
      if (v251 <= v252)
      {
        v254 = v66;
      }
      else
      {
        v253 = 3;
        v254 = v252;
      }
      if (!v254)
        goto LABEL_396;
      v255 = *(_QWORD *)(v59[3] + 8 * (v254 - 1));
      if (v255 < 0x10)
        goto LABEL_396;
      switch(v253)
      {
        case 1:
          if (v254 == 2)
          {
            v1402 = *v61;
            if (*v61)
            {
              v1403 = 0;
              v1404 = 0;
              v1667 = *(_QWORD *)(v60 + 152);
              v1621 = v115[19];
              v1405 = (int *)v59[19];
              v1535 = 0;
              v1575 = (int)v255;
              v1406 = 8 * (int)v255;
              do
              {
                if (v61[1])
                {
                  v1407 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1621[2 * v1403], 1, (const int *)(v1667 + 8 * v1404), v1405, 1, v1575);
                    v60 = *a1;
                    v1408 = *(_QWORD **)(*a1 + 24);
                    v1409 = v1408[1];
                    v1404 += v1409;
                    v115 = (int **)*a2;
                    v1410 = *(int **)(*a2 + 24);
                    v1411 = *((_QWORD *)v1410 + 1);
                    v1403 += v1411;
                    ++v1407;
                    v61 = *(int **)*a1;
                    v1412 = v61[1];
                    v1405 = (int *)((char *)v1405 + v1406);
                  }
                  while (v1407 < v1412);
                  v1402 = *v61;
                  v116 = *v115;
                }
                else
                {
                  v1412 = 0;
                  v1408 = *(_QWORD **)(v60 + 24);
                  v1409 = v1408[1];
                  v1410 = v115[3];
                  v1411 = *((_QWORD *)v1410 + 1);
                }
                v1404 = *v1408 + v1404 - v1412 * v1409;
                v1403 = *(_QWORD *)v1410 + v1403 - v1411 * v116[1];
                ++v1535;
              }
              while (v1535 < v1402);
            }
          }
          else if (v254 == 1)
          {
            if (*v61)
            {
              v893 = 0;
              v894 = 0;
              v895 = 0;
              v896 = *(_QWORD *)(v60 + 152);
              v897 = v115[19];
              v898 = (int)v255;
              v899 = 8 * (int)v255;
              v900 = (int *)v59[19];
              do
              {
                vDSP_vsaddi(&v897[2 * v894], 1, (const int *)(v896 + 8 * v895), v900, 1, v898);
                v895 += **(_QWORD **)(*a1 + 24);
                v894 += **(_QWORD **)(*a2 + 24);
                ++v893;
                v900 = (int *)((char *)v900 + v899);
              }
              while (v893 < **(int **)*a1);
            }
          }
          else if (v59[6])
          {
            v1413 = 0;
            v1622 = v115[19];
            v1668 = *(_QWORD *)(v60 + 152);
            v1576 = (int)v255;
            v1414 = (int *)v59[19];
            do
            {
              v1415 = *(_QWORD *)*a1;
              v1416 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1415) >> 2;
              v1417 = 0;
              v1418 = (v1416 - 1);
              if ((int)v1416 - 1 >= 0)
              {
                v1419 = *(_QWORD *)(*a1 + 24);
                v1420 = v1413;
                do
                {
                  v1421 = ldiv(v1420, *(int *)(v1415 + 4 * v1418));
                  v1420 = v1421.quot;
                  v1417 += *(_QWORD *)(v1419 + 8 * v1418--) * v1421.rem;
                }
                while (v1418 != -1);
              }
              v1422 = *(_QWORD *)*a2;
              v1423 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1422) >> 2;
              v1424 = 0;
              v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                v1426 = *(_QWORD *)(*a2 + 24);
                v1427 = v1413;
                do
                {
                  v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  v1427 = v1428.quot;
                  v1424 += *(_QWORD *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              vDSP_vsaddi(&v1622[2 * (int)v1424], 1, (const int *)(v1668 + 8 * (int)v1417), v1414, 1, v1576);
              v1414 += 2 * v1576;
              v1413 += v1576;
            }
            while (v1413 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v254 == 2)
          {
            v1429 = *v61;
            if (*v61)
            {
              v1430 = 0;
              v1431 = 0;
              v1669 = *(_QWORD *)(v60 + 152);
              v1623 = v115[19];
              v1432 = (int *)v59[19];
              v1536 = 0;
              v1577 = (int)v255;
              v1433 = 8 * (int)v255;
              do
              {
                if (v61[1])
                {
                  v1434 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1669 + 8 * v1431), 1, &v1623[2 * v1430], v1432, 1, v1577);
                    v60 = *a1;
                    v1435 = *(_QWORD **)(*a1 + 24);
                    v1436 = v1435[1];
                    v1431 += v1436;
                    v115 = (int **)*a2;
                    v1437 = *(int **)(*a2 + 24);
                    v1438 = *((_QWORD *)v1437 + 1);
                    v1430 += v1438;
                    ++v1434;
                    v61 = *(int **)*a1;
                    v1439 = v61[1];
                    v1432 = (int *)((char *)v1432 + v1433);
                  }
                  while (v1434 < v1439);
                  v1429 = *v61;
                  v116 = *v115;
                }
                else
                {
                  v1439 = 0;
                  v1435 = *(_QWORD **)(v60 + 24);
                  v1436 = v1435[1];
                  v1437 = v115[3];
                  v1438 = *((_QWORD *)v1437 + 1);
                }
                v1431 = *v1435 + v1431 - v1439 * v1436;
                v1430 = *(_QWORD *)v1437 + v1430 - v1438 * v116[1];
                ++v1536;
              }
              while (v1536 < v1429);
            }
          }
          else if (v254 == 1)
          {
            if (*v61)
            {
              v901 = 0;
              v902 = 0;
              v903 = 0;
              v904 = *(_QWORD *)(v60 + 152);
              v905 = v115[19];
              v906 = (int)v255;
              v907 = 8 * (int)v255;
              v908 = (int *)v59[19];
              do
              {
                vDSP_vsaddi((const int *)(v904 + 8 * v903), 1, &v905[2 * v902], v908, 1, v906);
                v903 += **(_QWORD **)(*a1 + 24);
                v902 += **(_QWORD **)(*a2 + 24);
                ++v901;
                v908 = (int *)((char *)v908 + v907);
              }
              while (v901 < **(int **)*a1);
            }
          }
          else if (v59[6])
          {
            v1440 = 0;
            v1624 = v115[19];
            v1670 = *(_QWORD *)(v60 + 152);
            v1578 = (int)v255;
            v1441 = (int *)v59[19];
            do
            {
              v1442 = *(_QWORD *)*a1;
              v1443 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1442) >> 2;
              v1444 = 0;
              v1445 = (v1443 - 1);
              if ((int)v1443 - 1 >= 0)
              {
                v1446 = *(_QWORD *)(*a1 + 24);
                v1447 = v1440;
                do
                {
                  v1448 = ldiv(v1447, *(int *)(v1442 + 4 * v1445));
                  v1447 = v1448.quot;
                  v1444 += *(_QWORD *)(v1446 + 8 * v1445--) * v1448.rem;
                }
                while (v1445 != -1);
              }
              v1449 = *(_QWORD *)*a2;
              v1450 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1449) >> 2;
              v1451 = 0;
              v1452 = (v1450 - 1);
              if ((int)v1450 - 1 >= 0)
              {
                v1453 = *(_QWORD *)(*a2 + 24);
                v1454 = v1440;
                do
                {
                  v1455 = ldiv(v1454, *(int *)(v1449 + 4 * v1452));
                  v1454 = v1455.quot;
                  v1451 += *(_QWORD *)(v1453 + 8 * v1452--) * v1455.rem;
                }
                while (v1452 != -1);
              }
              vDSP_vsaddi((const int *)(v1670 + 8 * (int)v1444), 1, &v1624[2 * (int)v1451], v1441, 1, v1578);
              v1441 += 2 * v1578;
              v1440 += v1578;
            }
            while (v1440 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v254 == 2)
          {
            v1066 = *v61;
            if (*v61)
            {
              v1067 = 0;
              v1068 = 0;
              v1647 = *(_QWORD *)(v60 + 152);
              v1601 = v115[19];
              v1069 = (int *)v59[19];
              v1529 = 0;
              v1555 = (int)v255;
              v1070 = 8 * (int)v255;
              do
              {
                if (v61[1])
                {
                  v1071 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1647 + 8 * v1068), 1, &v1601[2 * v1067], 1, v1069, 1, v1555);
                    v60 = *a1;
                    v1072 = *(_QWORD **)(*a1 + 24);
                    v1073 = v1072[1];
                    v1068 += v1073;
                    v115 = (int **)*a2;
                    v1074 = *(int **)(*a2 + 24);
                    v1075 = *((_QWORD *)v1074 + 1);
                    v1067 += v1075;
                    ++v1071;
                    v61 = *(int **)*a1;
                    v1076 = v61[1];
                    v1069 = (int *)((char *)v1069 + v1070);
                  }
                  while (v1071 < v1076);
                  v1066 = *v61;
                  v116 = *v115;
                }
                else
                {
                  v1076 = 0;
                  v1072 = *(_QWORD **)(v60 + 24);
                  v1073 = v1072[1];
                  v1074 = v115[3];
                  v1075 = *((_QWORD *)v1074 + 1);
                }
                v1068 = *v1072 + v1068 - v1076 * v1073;
                v1067 = *(_QWORD *)v1074 + v1067 - v1075 * v116[1];
                ++v1529;
              }
              while (v1529 < v1066);
            }
          }
          else if (v254 == 1)
          {
            if (*v61)
            {
              v256 = 0;
              v257 = 0;
              v258 = 0;
              v259 = *(_QWORD *)(v60 + 152);
              v260 = v115[19];
              v261 = (int)v255;
              v262 = 8 * (int)v255;
              v263 = (int *)v59[19];
              do
              {
                vDSP_vaddi((const int *)(v259 + 8 * v258), 1, &v260[2 * v257], 1, v263, 1, v261);
                v258 += **(_QWORD **)(*a1 + 24);
                v257 += **(_QWORD **)(*a2 + 24);
                ++v256;
                v263 = (int *)((char *)v263 + v262);
              }
              while (v256 < **(int **)*a1);
            }
          }
          else if (v59[6])
          {
            v1077 = 0;
            v1602 = v115[19];
            v1648 = *(_QWORD *)(v60 + 152);
            v1556 = (int)v255;
            v1078 = (int *)v59[19];
            do
            {
              v1079 = *(_QWORD *)*a1;
              v1080 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1079) >> 2;
              v1081 = 0;
              v1082 = (v1080 - 1);
              if ((int)v1080 - 1 >= 0)
              {
                v1083 = *(_QWORD *)(*a1 + 24);
                v1084 = v1077;
                do
                {
                  v1085 = ldiv(v1084, *(int *)(v1079 + 4 * v1082));
                  v1084 = v1085.quot;
                  v1081 += *(_QWORD *)(v1083 + 8 * v1082--) * v1085.rem;
                }
                while (v1082 != -1);
              }
              v1086 = *(_QWORD *)*a2;
              v1087 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1086) >> 2;
              v1088 = 0;
              v1089 = (v1087 - 1);
              if ((int)v1087 - 1 >= 0)
              {
                v1090 = *(_QWORD *)(*a2 + 24);
                v1091 = v1077;
                do
                {
                  v1092 = ldiv(v1091, *(int *)(v1086 + 4 * v1089));
                  v1091 = v1092.quot;
                  v1088 += *(_QWORD *)(v1090 + 8 * v1089--) * v1092.rem;
                }
                while (v1089 != -1);
              }
              vDSP_vaddi((const int *)(v1648 + 8 * (int)v1081), 1, &v1602[2 * (int)v1088], 1, v1078, 1, v1556);
              v1078 += 2 * v1556;
              v1077 += v1556;
            }
            while (v1077 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_396:
          switch(v251)
          {
            case 1uLL:
              v264 = v59[6];
              if (v264)
              {
                v265 = *(_QWORD **)(v60 + 152);
                v266 = v115[19];
                v267 = (_QWORD *)v59[19];
                v268 = 8 * *(_QWORD *)v115[3];
                v269 = 8 * **(_QWORD **)(v60 + 24);
                do
                {
                  *v267++ = *(_QWORD *)v266 + *v265;
                  v266 = (int *)((char *)v266 + v268);
                  v265 = (_QWORD *)((char *)v265 + v269);
                  --v264;
                }
                while (v264);
              }
              break;
            case 2uLL:
              v671 = *v61;
              if ((_DWORD)v671)
              {
                v672 = 0;
                v673 = 0;
                v674 = 0;
                v675 = 0;
                v676 = *(_QWORD *)(v60 + 152);
                v677 = v115[19];
                v678 = v59[19];
                v679 = v61[1];
                v680 = *(uint64_t **)(v60 + 24);
                v681 = *v680;
                v682 = v680[1];
                v683 = v115[3];
                v684 = *(_QWORD *)v683;
                v685 = *((_QWORD *)v683 + 1);
                v686 = v684 - v685 * v116[1];
                if (v679 <= 1)
                  v687 = 1;
                else
                  v687 = v61[1];
                v688 = v681 - v682 * v679;
                do
                {
                  if ((_DWORD)v679)
                  {
                    v689 = v673 + v687;
                    v690 = (_QWORD *)(v678 + 8 * v673);
                    v691 = v687;
                    do
                    {
                      *v690++ = *(_QWORD *)&v677[2 * v674] + *(_QWORD *)(v676 + 8 * v675);
                      v675 += v682;
                      v674 += v685;
                      --v691;
                    }
                    while (v691);
                    v673 = v689;
                  }
                  v675 += v688;
                  v674 += v686;
                  ++v672;
                }
                while (v672 != v671);
              }
              break;
            case 3uLL:
              v692 = *v61;
              if ((_DWORD)v692)
              {
                v693 = 0;
                v694 = 0;
                v695 = 0;
                v696 = 0;
                v697 = *(_QWORD *)(v60 + 152);
                v698 = v115[19];
                v699 = v59[19];
                v700 = v61[1];
                v701 = *(_QWORD **)(v60 + 24);
                v702 = v701[1];
                v703 = v115[3];
                v704 = *((_QWORD *)v703 + 1);
                v705 = *(_QWORD *)v703 - v704 * v116[1];
                if (v700 <= 1)
                  v706 = 1;
                else
                  v706 = v61[1];
                v707 = *v701 - v702 * v700;
                do
                {
                  if ((_DWORD)v700)
                  {
                    v708 = 0;
                    v709 = v61[2];
                    v710 = v701[2];
                    v711 = *((_QWORD *)v703 + 2);
                    if (v709 <= 1)
                      v712 = 1;
                    else
                      v712 = v61[2];
                    v713 = v704 - v711 * v116[2];
                    do
                    {
                      v714 = v712;
                      if ((_DWORD)v709)
                      {
                        do
                        {
                          *(_QWORD *)(v699 + 8 * v694++) = *(_QWORD *)&v698[2 * v695] + *(_QWORD *)(v697 + 8 * v696);
                          v696 += v710;
                          v695 += v711;
                          --v714;
                        }
                        while (v714);
                      }
                      v696 += v702 - v710 * v709;
                      v695 += v713;
                      ++v708;
                    }
                    while (v708 != v706);
                  }
                  v696 += v707;
                  v695 += v705;
                  ++v693;
                }
                while (v693 != v692);
              }
              break;
            case 4uLL:
              v1636 = *v61;
              if ((_DWORD)v1636)
              {
                v715 = 0;
                v716 = 0;
                v717 = 0;
                v718 = 0;
                v719 = *(_QWORD *)(v60 + 152);
                v720 = v115[19];
                v721 = v59[19];
                v722 = v61[1];
                v723 = *(_QWORD **)(v60 + 24);
                v724 = v115[3];
                v1511 = *((_QWORD *)v724 + 1);
                v1517 = v723[1];
                v1544 = *(_QWORD *)v724 - v1511 * v116[1];
                v1590 = v61[1];
                if (v722 <= 1)
                  v725 = 1;
                else
                  v725 = v61[1];
                v1524 = *v723 - v723[1] * v722;
                do
                {
                  if (v1590)
                  {
                    v726 = 0;
                    v727 = v61[2];
                    v728 = v723[2];
                    v729 = *((_QWORD *)v724 + 2);
                    if (v727 <= 1)
                      v730 = 1;
                    else
                      v730 = v61[2];
                    v731 = v1511 - v729 * v116[2];
                    do
                    {
                      if ((_DWORD)v727)
                      {
                        v732 = 0;
                        v733 = v61[3];
                        v734 = v723[3];
                        v735 = *((_QWORD *)v724 + 3);
                        if (v733 <= 1)
                          v736 = 1;
                        else
                          v736 = v61[3];
                        v737 = v729 - v735 * v116[3];
                        do
                        {
                          v738 = v736;
                          if ((_DWORD)v733)
                          {
                            do
                            {
                              *(_QWORD *)(v721 + 8 * v716++) = *(_QWORD *)&v720[2 * v717] + *(_QWORD *)(v719 + 8 * v718);
                              v718 += v734;
                              v717 += v735;
                              --v738;
                            }
                            while (v738);
                          }
                          v718 += v728 - v734 * v733;
                          v717 += v737;
                          ++v732;
                        }
                        while (v732 != v730);
                      }
                      v718 += v1517 - v728 * v727;
                      v717 += v731;
                      ++v726;
                    }
                    while (v726 != v725);
                  }
                  v718 += v1524;
                  v717 += v1544;
                  ++v715;
                }
                while (v715 != v1636);
              }
              break;
            default:
              v1589 = v59[6];
              v1635 = v63;
              if (v1589)
              {
                v660 = 0;
                v1523 = v115[19];
                v1543 = *(_QWORD *)(v60 + 152);
                v1516 = v59[19];
                do
                {
                  v661 = v1635;
                  if ((v1635 & 0x80000000) != 0)
                  {
                    LODWORD(v662) = 0;
                  }
                  else
                  {
                    v662 = 0;
                    v663 = *(_QWORD *)(v60 + 24);
                    v664 = v660;
                    do
                    {
                      v665 = ldiv(v664, v61[v661]);
                      v664 = v665.quot;
                      v662 += *(_QWORD *)(v663 + 8 * v661--) * v665.rem;
                    }
                    while (v661 != -1);
                  }
                  v666 = 0;
                  if ((v118 & 0x80000000) == 0)
                  {
                    v667 = v115[3];
                    v668 = v118;
                    v669 = v660;
                    do
                    {
                      v670 = ldiv(v669, v116[v668]);
                      v669 = v670.quot;
                      v666 += *(_QWORD *)&v667[2 * v668--] * v670.rem;
                    }
                    while (v668 != -1);
                  }
                  *(_QWORD *)(v1516 + 8 * v660++) = *(_QWORD *)&v1523[2 * (int)v666]
                                                  + *(_QWORD *)(v1543 + 8 * (int)v662);
                }
                while (v660 != v1589);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v13)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) + **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_16:
          v14 = *(const int **)(*a1 + 152);
          v15 = *a2;
          goto LABEL_18;
        case 2:
LABEL_17:
          v15 = *a1;
          v14 = *(const int **)(*a2 + 152);
LABEL_18:
          vDSP_vsaddi(*(const int **)(v15 + 152), 1, v14, *(int **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(v15 + 160));
          return;
        case 3:
LABEL_19:
          vDSP_vaddi(*(const int **)(*a1 + 152), 1, *(const int **)(*a2 + 152), 1, *(int **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)a3 + 48));
          return;
        default:
          v68 = *(_QWORD **)a3;
          v69 = *a1;
          v70 = *(int **)*a1;
          v71 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v70) >> 2;
          v72 = (v71 - 1);
          if ((int)v72 >= -1)
            v73 = -1;
          else
            v73 = v71 - 1;
          v74 = v73 + 1;
          v75 = v71 + 1;
          break;
      }
      while (1)
      {
        v76 = v75 - 2;
        if (v75 - 2 < 0)
          break;
        --v75;
        if (*(_QWORD *)(*(_QWORD *)(v69 + 24) + 8 * v76) != *(_QWORD *)(v68[3] + 8 * v76))
          goto LABEL_114;
      }
      v75 = v74;
LABEL_114:
      v123 = (int **)*a2;
      v124 = *(int **)*a2;
      v125 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v124) >> 2;
      v126 = (v125 - 1);
      if ((int)v126 >= -1)
        v127 = -1;
      else
        v127 = v125 - 1;
      v128 = v127 + 1;
      v129 = v125 + 1;
      while (1)
      {
        v130 = v129 - 2;
        if (v129 - 2 < 0)
          break;
        --v129;
        if (*(_QWORD *)&v123[3][2 * v130] != *(_QWORD *)(v68[3] + 8 * v130))
          goto LABEL_152;
      }
      v129 = v128;
LABEL_152:
      v143 = v71 + 1;
      while (1)
      {
        v144 = v143 - 2;
        if (v143 - 2 < 0)
          break;
        --v143;
        if (*(_QWORD *)(*(_QWORD *)(v69 + 24) + 8 * v144))
          goto LABEL_187;
      }
      v143 = v74;
LABEL_187:
      v157 = v125 + 1;
      while (1)
      {
        v158 = v157 - 2;
        if (v157 - 2 < 0)
          break;
        --v157;
        if (*(_QWORD *)&v123[3][2 * v158])
          goto LABEL_402;
      }
      v157 = v128;
LABEL_402:
      v270 = (uint64_t)(v68[1] - *v68) >> 2;
      if (v75 <= v129)
        v271 = v129;
      else
        v271 = v75;
      if (v75 <= v157)
        v75 = v157;
      if (v143 > v129)
        v129 = v143;
      if (v270 > v129)
        v272 = 1;
      else
        v272 = 4;
      if (v270 <= v129)
        v129 = (uint64_t)(v68[1] - *v68) >> 2;
      if (v270 <= v75)
        v75 = v129;
      else
        v272 = 2;
      if (v270 <= v271)
      {
        v273 = v75;
      }
      else
      {
        v272 = 3;
        v273 = v271;
      }
      if (!v273)
        goto LABEL_431;
      v274 = *(_QWORD *)(v68[3] + 8 * (v273 - 1));
      if (v274 < 0x10)
        goto LABEL_431;
      switch(v272)
      {
        case 1:
          if (v273 == 2)
          {
            v1456 = *v70;
            if (*v70)
            {
              v1457 = 0;
              v1458 = 0;
              v1671 = *(_QWORD *)(v69 + 152);
              v1625 = v123[19];
              v1459 = (int *)v68[19];
              v1537 = 0;
              v1579 = (int)v274;
              v1460 = 4 * (int)v274;
              do
              {
                if (v70[1])
                {
                  v1461 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1625[v1457], 1, (const int *)(v1671 + 4 * v1458), v1459, 1, v1579);
                    v69 = *a1;
                    v1462 = *(_QWORD **)(*a1 + 24);
                    v1463 = v1462[1];
                    v1458 += v1463;
                    v123 = (int **)*a2;
                    v1464 = *(int **)(*a2 + 24);
                    v1465 = *((_QWORD *)v1464 + 1);
                    v1457 += v1465;
                    ++v1461;
                    v70 = *(int **)*a1;
                    v1466 = v70[1];
                    v1459 = (int *)((char *)v1459 + v1460);
                  }
                  while (v1461 < v1466);
                  v1456 = *v70;
                  v124 = *v123;
                }
                else
                {
                  v1466 = 0;
                  v1462 = *(_QWORD **)(v69 + 24);
                  v1463 = v1462[1];
                  v1464 = v123[3];
                  v1465 = *((_QWORD *)v1464 + 1);
                }
                v1458 = *v1462 + v1458 - v1466 * v1463;
                v1457 = *(_QWORD *)v1464 + v1457 - v1465 * v124[1];
                ++v1537;
              }
              while (v1537 < v1456);
            }
          }
          else if (v273 == 1)
          {
            if (*v70)
            {
              v909 = 0;
              v910 = 0;
              v911 = 0;
              v912 = *(_QWORD *)(v69 + 152);
              v913 = v123[19];
              v914 = (int)v274;
              v915 = 4 * (int)v274;
              v916 = (int *)v68[19];
              do
              {
                vDSP_vsaddi(&v913[v910], 1, (const int *)(v912 + 4 * v911), v916, 1, v914);
                v911 += **(_QWORD **)(*a1 + 24);
                v910 += **(_QWORD **)(*a2 + 24);
                ++v909;
                v916 = (int *)((char *)v916 + v915);
              }
              while (v909 < **(int **)*a1);
            }
          }
          else if (v68[6])
          {
            v1467 = 0;
            v1626 = v123[19];
            v1672 = *(_QWORD *)(v69 + 152);
            v1580 = (int)v274;
            v1468 = (int *)v68[19];
            do
            {
              v1469 = *(_QWORD *)*a1;
              v1470 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1469) >> 2;
              v1471 = 0;
              v1472 = (v1470 - 1);
              if ((int)v1470 - 1 >= 0)
              {
                v1473 = *(_QWORD *)(*a1 + 24);
                v1474 = v1467;
                do
                {
                  v1475 = ldiv(v1474, *(int *)(v1469 + 4 * v1472));
                  v1474 = v1475.quot;
                  v1471 += *(_QWORD *)(v1473 + 8 * v1472--) * v1475.rem;
                }
                while (v1472 != -1);
              }
              v1476 = *(_QWORD *)*a2;
              v1477 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1476) >> 2;
              v1478 = 0;
              v1479 = (v1477 - 1);
              if ((int)v1477 - 1 >= 0)
              {
                v1480 = *(_QWORD *)(*a2 + 24);
                v1481 = v1467;
                do
                {
                  v1482 = ldiv(v1481, *(int *)(v1476 + 4 * v1479));
                  v1481 = v1482.quot;
                  v1478 += *(_QWORD *)(v1480 + 8 * v1479--) * v1482.rem;
                }
                while (v1479 != -1);
              }
              vDSP_vsaddi(&v1626[(int)v1478], 1, (const int *)(v1672 + 4 * (int)v1471), v1468, 1, v1580);
              v1468 += v1580;
              v1467 += v1580;
            }
            while (v1467 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v273 == 2)
          {
            v1483 = *v70;
            if (*v70)
            {
              v1484 = 0;
              v1485 = 0;
              v1673 = *(_QWORD *)(v69 + 152);
              v1627 = v123[19];
              v1486 = (int *)v68[19];
              v1538 = 0;
              v1581 = (int)v274;
              v1487 = 4 * (int)v274;
              do
              {
                if (v70[1])
                {
                  v1488 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1673 + 4 * v1485), 1, &v1627[v1484], v1486, 1, v1581);
                    v69 = *a1;
                    v1489 = *(_QWORD **)(*a1 + 24);
                    v1490 = v1489[1];
                    v1485 += v1490;
                    v123 = (int **)*a2;
                    v1491 = *(int **)(*a2 + 24);
                    v1492 = *((_QWORD *)v1491 + 1);
                    v1484 += v1492;
                    ++v1488;
                    v70 = *(int **)*a1;
                    v1493 = v70[1];
                    v1486 = (int *)((char *)v1486 + v1487);
                  }
                  while (v1488 < v1493);
                  v1483 = *v70;
                  v124 = *v123;
                }
                else
                {
                  v1493 = 0;
                  v1489 = *(_QWORD **)(v69 + 24);
                  v1490 = v1489[1];
                  v1491 = v123[3];
                  v1492 = *((_QWORD *)v1491 + 1);
                }
                v1485 = *v1489 + v1485 - v1493 * v1490;
                v1484 = *(_QWORD *)v1491 + v1484 - v1492 * v124[1];
                ++v1538;
              }
              while (v1538 < v1483);
            }
          }
          else if (v273 == 1)
          {
            if (*v70)
            {
              v917 = 0;
              v918 = 0;
              v919 = 0;
              v920 = *(_QWORD *)(v69 + 152);
              v921 = v123[19];
              v922 = (int)v274;
              v923 = 4 * (int)v274;
              v924 = (int *)v68[19];
              do
              {
                vDSP_vsaddi((const int *)(v920 + 4 * v919), 1, &v921[v918], v924, 1, v922);
                v919 += **(_QWORD **)(*a1 + 24);
                v918 += **(_QWORD **)(*a2 + 24);
                ++v917;
                v924 = (int *)((char *)v924 + v923);
              }
              while (v917 < **(int **)*a1);
            }
          }
          else if (v68[6])
          {
            v1494 = 0;
            v1628 = v123[19];
            v1674 = *(_QWORD *)(v69 + 152);
            v1582 = (int)v274;
            v1495 = (int *)v68[19];
            do
            {
              v1496 = *(_QWORD *)*a1;
              v1497 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1496) >> 2;
              v1498 = 0;
              v1499 = (v1497 - 1);
              if ((int)v1497 - 1 >= 0)
              {
                v1500 = *(_QWORD *)(*a1 + 24);
                v1501 = v1494;
                do
                {
                  v1502 = ldiv(v1501, *(int *)(v1496 + 4 * v1499));
                  v1501 = v1502.quot;
                  v1498 += *(_QWORD *)(v1500 + 8 * v1499--) * v1502.rem;
                }
                while (v1499 != -1);
              }
              v1503 = *(_QWORD *)*a2;
              v1504 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1503) >> 2;
              v1505 = 0;
              v1506 = (v1504 - 1);
              if ((int)v1504 - 1 >= 0)
              {
                v1507 = *(_QWORD *)(*a2 + 24);
                v1508 = v1494;
                do
                {
                  v1509 = ldiv(v1508, *(int *)(v1503 + 4 * v1506));
                  v1508 = v1509.quot;
                  v1505 += *(_QWORD *)(v1507 + 8 * v1506--) * v1509.rem;
                }
                while (v1506 != -1);
              }
              vDSP_vsaddi((const int *)(v1674 + 4 * (int)v1498), 1, &v1628[(int)v1505], v1495, 1, v1582);
              v1495 += v1582;
              v1494 += v1582;
            }
            while (v1494 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v273 == 2)
          {
            v1093 = *v70;
            if (*v70)
            {
              v1094 = 0;
              v1095 = 0;
              v1649 = *(_QWORD *)(v69 + 152);
              v1603 = v123[19];
              v1096 = (int *)v68[19];
              v1530 = 0;
              v1557 = (int)v274;
              v1097 = 4 * (int)v274;
              do
              {
                if (v70[1])
                {
                  v1098 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1649 + 4 * v1095), 1, &v1603[v1094], 1, v1096, 1, v1557);
                    v69 = *a1;
                    v1099 = *(_QWORD **)(*a1 + 24);
                    v1100 = v1099[1];
                    v1095 += v1100;
                    v123 = (int **)*a2;
                    v1101 = *(int **)(*a2 + 24);
                    v1102 = *((_QWORD *)v1101 + 1);
                    v1094 += v1102;
                    ++v1098;
                    v70 = *(int **)*a1;
                    v1103 = v70[1];
                    v1096 = (int *)((char *)v1096 + v1097);
                  }
                  while (v1098 < v1103);
                  v1093 = *v70;
                  v124 = *v123;
                }
                else
                {
                  v1103 = 0;
                  v1099 = *(_QWORD **)(v69 + 24);
                  v1100 = v1099[1];
                  v1101 = v123[3];
                  v1102 = *((_QWORD *)v1101 + 1);
                }
                v1095 = *v1099 + v1095 - v1103 * v1100;
                v1094 = *(_QWORD *)v1101 + v1094 - v1102 * v124[1];
                ++v1530;
              }
              while (v1530 < v1093);
            }
          }
          else if (v273 == 1)
          {
            if (*v70)
            {
              v275 = 0;
              v276 = 0;
              v277 = 0;
              v278 = *(_QWORD *)(v69 + 152);
              v279 = v123[19];
              v280 = (int)v274;
              v281 = 4 * (int)v274;
              v282 = (int *)v68[19];
              do
              {
                vDSP_vaddi((const int *)(v278 + 4 * v277), 1, &v279[v276], 1, v282, 1, v280);
                v277 += **(_QWORD **)(*a1 + 24);
                v276 += **(_QWORD **)(*a2 + 24);
                ++v275;
                v282 = (int *)((char *)v282 + v281);
              }
              while (v275 < **(int **)*a1);
            }
          }
          else if (v68[6])
          {
            v1104 = 0;
            v1604 = v123[19];
            v1650 = *(_QWORD *)(v69 + 152);
            v1558 = (int)v274;
            v1105 = (int *)v68[19];
            do
            {
              v1106 = *(_QWORD *)*a1;
              v1107 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1106) >> 2;
              v1108 = 0;
              v1109 = (v1107 - 1);
              if ((int)v1107 - 1 >= 0)
              {
                v1110 = *(_QWORD *)(*a1 + 24);
                v1111 = v1104;
                do
                {
                  v1112 = ldiv(v1111, *(int *)(v1106 + 4 * v1109));
                  v1111 = v1112.quot;
                  v1108 += *(_QWORD *)(v1110 + 8 * v1109--) * v1112.rem;
                }
                while (v1109 != -1);
              }
              v1113 = *(_QWORD *)*a2;
              v1114 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1113) >> 2;
              v1115 = 0;
              v1116 = (v1114 - 1);
              if ((int)v1114 - 1 >= 0)
              {
                v1117 = *(_QWORD *)(*a2 + 24);
                v1118 = v1104;
                do
                {
                  v1119 = ldiv(v1118, *(int *)(v1113 + 4 * v1116));
                  v1118 = v1119.quot;
                  v1115 += *(_QWORD *)(v1117 + 8 * v1116--) * v1119.rem;
                }
                while (v1116 != -1);
              }
              vDSP_vaddi((const int *)(v1650 + 4 * (int)v1108), 1, &v1604[(int)v1115], 1, v1105, 1, v1558);
              v1105 += v1558;
              v1104 += v1558;
            }
            while (v1104 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_431:
          switch(v270)
          {
            case 1uLL:
              v283 = v68[6];
              if (v283)
              {
                v284 = *(float **)(v69 + 152);
                v285 = (float *)v123[19];
                v286 = (float *)v68[19];
                v287 = 4 * *(_QWORD *)v123[3];
                v288 = 4 * **(_QWORD **)(v69 + 24);
                do
                {
                  *v286++ = *v284 + *v285;
                  v285 = (float *)((char *)v285 + v287);
                  v284 = (float *)((char *)v284 + v288);
                  --v283;
                }
                while (v283);
              }
              break;
            case 2uLL:
              v750 = *v70;
              if ((_DWORD)v750)
              {
                v751 = 0;
                v752 = 0;
                v753 = 0;
                v754 = 0;
                v755 = *(_QWORD *)(v69 + 152);
                v756 = v123[19];
                v757 = v68[19];
                v758 = v70[1];
                v759 = *(uint64_t **)(v69 + 24);
                v760 = *v759;
                v761 = v759[1];
                v762 = v123[3];
                v763 = *(_QWORD *)v762;
                v764 = *((_QWORD *)v762 + 1);
                v765 = v763 - v764 * v124[1];
                if (v758 <= 1)
                  v766 = 1;
                else
                  v766 = v70[1];
                v767 = v760 - v761 * v758;
                do
                {
                  if ((_DWORD)v758)
                  {
                    v768 = v752 + v766;
                    v769 = (float *)(v757 + 4 * v752);
                    v770 = v766;
                    do
                    {
                      *v769++ = *(float *)(v755 + 4 * v754) + *(float *)&v756[v753];
                      v754 += v761;
                      v753 += v764;
                      --v770;
                    }
                    while (v770);
                    v752 = v768;
                  }
                  v754 += v767;
                  v753 += v765;
                  ++v751;
                }
                while (v751 != v750);
              }
              break;
            case 3uLL:
              v771 = *v70;
              if ((_DWORD)v771)
              {
                v772 = 0;
                v773 = 0;
                v774 = 0;
                v775 = 0;
                v776 = *(_QWORD *)(v69 + 152);
                v777 = v123[19];
                v778 = v68[19];
                v779 = v70[1];
                v780 = *(_QWORD **)(v69 + 24);
                v781 = v780[1];
                v782 = v123[3];
                v783 = *((_QWORD *)v782 + 1);
                v784 = *(_QWORD *)v782 - v783 * v124[1];
                if (v779 <= 1)
                  v785 = 1;
                else
                  v785 = v70[1];
                v786 = *v780 - v781 * v779;
                do
                {
                  if ((_DWORD)v779)
                  {
                    v787 = 0;
                    v788 = v70[2];
                    v789 = v780[2];
                    v790 = *((_QWORD *)v782 + 2);
                    if (v788 <= 1)
                      v791 = 1;
                    else
                      v791 = v70[2];
                    v792 = v783 - v790 * v124[2];
                    do
                    {
                      v793 = v791;
                      if ((_DWORD)v788)
                      {
                        do
                        {
                          *(float *)(v778 + 4 * v773++) = *(float *)(v776 + 4 * v775) + *(float *)&v777[v774];
                          v775 += v789;
                          v774 += v790;
                          --v793;
                        }
                        while (v793);
                      }
                      v775 += v781 - v789 * v788;
                      v774 += v792;
                      ++v787;
                    }
                    while (v787 != v785);
                  }
                  v775 += v786;
                  v774 += v784;
                  ++v772;
                }
                while (v772 != v771);
              }
              break;
            case 4uLL:
              v1638 = *v70;
              if ((_DWORD)v1638)
              {
                v794 = 0;
                v795 = 0;
                v796 = 0;
                v797 = 0;
                v798 = *(_QWORD *)(v69 + 152);
                v799 = v123[19];
                v800 = v68[19];
                v801 = v70[1];
                v802 = *(_QWORD **)(v69 + 24);
                v803 = v123[3];
                v1526 = *((_QWORD *)v803 + 1);
                v1546 = v802[1];
                v1592 = *(_QWORD *)v803 - v1526 * v124[1];
                if (v801 <= 1)
                  v804 = 1;
                else
                  v804 = v70[1];
                v805 = *v802 - v802[1] * v801;
                do
                {
                  if ((_DWORD)v801)
                  {
                    v806 = 0;
                    v807 = v70[2];
                    v808 = v802[2];
                    v809 = *((_QWORD *)v803 + 2);
                    if (v807 <= 1)
                      v810 = 1;
                    else
                      v810 = v70[2];
                    v811 = v1526 - v809 * v124[2];
                    do
                    {
                      if ((_DWORD)v807)
                      {
                        v812 = 0;
                        v813 = v70[3];
                        v814 = v802[3];
                        v815 = *((_QWORD *)v803 + 3);
                        if (v813 <= 1)
                          v816 = 1;
                        else
                          v816 = v70[3];
                        v817 = v809 - v815 * v124[3];
                        do
                        {
                          v818 = v816;
                          if ((_DWORD)v813)
                          {
                            do
                            {
                              *(float *)(v800 + 4 * v795++) = *(float *)(v798 + 4 * v797) + *(float *)&v799[v796];
                              v797 += v814;
                              v796 += v815;
                              --v818;
                            }
                            while (v818);
                          }
                          v797 += v808 - v814 * v813;
                          v796 += v817;
                          ++v812;
                        }
                        while (v812 != v810);
                      }
                      v797 += v1546 - v808 * v807;
                      v796 += v811;
                      ++v806;
                    }
                    while (v806 != v804);
                  }
                  v797 += v805;
                  v796 += v1592;
                  ++v794;
                }
                while (v794 != v1638);
              }
              break;
            default:
              v1591 = v68[6];
              v1637 = v72;
              if (v1591)
              {
                v739 = 0;
                v1525 = v123[19];
                v1545 = *(_QWORD *)(v69 + 152);
                v1518 = v68[19];
                do
                {
                  v740 = v1637;
                  if ((v1637 & 0x80000000) != 0)
                  {
                    LODWORD(v741) = 0;
                  }
                  else
                  {
                    v741 = 0;
                    v742 = *(_QWORD *)(v69 + 24);
                    v743 = v739;
                    do
                    {
                      v744 = ldiv(v743, v70[v740]);
                      v743 = v744.quot;
                      v741 += *(_QWORD *)(v742 + 8 * v740--) * v744.rem;
                    }
                    while (v740 != -1);
                  }
                  v745 = 0;
                  if ((v126 & 0x80000000) == 0)
                  {
                    v746 = v123[3];
                    v747 = v126;
                    v748 = v739;
                    do
                    {
                      v749 = ldiv(v748, v124[v747]);
                      v748 = v749.quot;
                      v745 += *(_QWORD *)&v746[2 * v747--] * v749.rem;
                    }
                    while (v747 != -1);
                  }
                  *(float *)(v1518 + 4 * v739++) = *(float *)(v1545 + 4 * (int)v741) + *(float *)&v1525[(int)v745];
                }
                while (v739 != v1591);
              }
              break;
          }
          break;
      }
      break;
    default:
      return;
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_8>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  char v10;
  _BYTE *v11;
  char *v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  int *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  BOOL *v36;
  unsigned __int8 *v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  BOOL *v43;
  char *v44;
  unsigned int v45;
  char v46;
  int v47;
  BOOL *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned int v51;
  char v52;
  char v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  char v64;
  _BYTE *v65;
  char *v66;
  unsigned int v67;
  char v68;
  int v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  unsigned int v73;
  char v74;
  char v75;
  char v76;
  _QWORD *v77;
  _QWORD *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  _DWORD *v88;
  int *v89;
  unsigned int v90;
  int v91;
  int v92;
  _DWORD *v93;
  int *v94;
  int *v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  char v109;
  _BYTE *v110;
  char *v111;
  unsigned int v112;
  char v113;
  int v114;
  char v115;
  _BYTE *v116;
  char *v117;
  unsigned int v118;
  char v119;
  int v120;
  _BYTE *v121;
  char *v122;
  char *v123;
  unsigned int v124;
  char v125;
  char v126;
  char v127;
  _QWORD *v128;
  _QWORD *v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  _DWORD *v139;
  int *v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  _DWORD *v145;
  int *v146;
  unsigned int v147;
  int v148;
  int v149;
  _DWORD *v150;
  int *v151;
  int *v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  _QWORD *v157;
  _QWORD *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  float v196;
  float *v197;
  float *v198;
  unsigned int v199;
  float v200;
  int v201;
  float v202;
  float *v203;
  float *v204;
  unsigned int v205;
  float v206;
  int v207;
  float *v208;
  float *v209;
  float *v210;
  unsigned int v211;
  float v212;
  float v213;
  float v214;
  _QWORD *v215;
  int *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int **v223;
  int *v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  _QWORD *v230;
  int *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  int **v238;
  int *v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  unsigned int v244;
  _QWORD *v245;
  int *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  int v251;
  unsigned int v252;
  _QWORD *v253;
  int *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  _QWORD *v261;
  int *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  unint64_t v297;
  int v298;
  int v299;
  int v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  _BYTE *v312;
  unsigned __int8 *v313;
  BOOL *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  int v320;
  unint64_t v321;
  int v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int *v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int *v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  int v339;
  int v340;
  unint64_t v341;
  int v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  _DWORD *v352;
  _DWORD *v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  int v358;
  int v359;
  int v360;
  unint64_t v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  unint64_t v377;
  int v378;
  int v379;
  int v380;
  unint64_t v381;
  int v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  _DWORD *v392;
  _DWORD *v393;
  _DWORD *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  int v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  int v418;
  int v419;
  int v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  float *v432;
  float *v433;
  float *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  ldiv_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  ldiv_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  BOOL *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  ldiv_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  ldiv_t v531;
  int v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  unint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  int *v543;
  uint64_t v544;
  unint64_t v545;
  int v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int *v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  int *v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  int v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int *v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  int *v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  ldiv_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  ldiv_t v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  unint64_t i;
  uint64_t v610;
  int v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  int v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  unint64_t j;
  uint64_t v632;
  uint64_t v633;
  int v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  int v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  int v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  unint64_t k;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  ldiv_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  ldiv_t v678;
  int v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int *v685;
  uint64_t v686;
  unint64_t v687;
  _QWORD *v688;
  uint64_t v689;
  int *v690;
  uint64_t v691;
  unint64_t v692;
  int v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  int *v699;
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  _QWORD *v703;
  uint64_t v704;
  int *v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  int v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int *v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  _QWORD *v721;
  uint64_t v722;
  int *v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  unint64_t v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  ldiv_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  ldiv_t v740;
  int v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t *v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  unint64_t m;
  uint64_t v757;
  int v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  unint64_t v774;
  uint64_t v775;
  uint64_t v776;
  int v777;
  unint64_t n;
  uint64_t v779;
  uint64_t v780;
  int v781;
  unint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t *v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  int v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  unint64_t ii;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  int v815;
  ldiv_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  ldiv_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  _QWORD *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  _QWORD *v852;
  uint64_t v853;
  _QWORD *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  _QWORD *v874;
  _QWORD *v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  ldiv_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  ldiv_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  float *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  _QWORD *v932;
  uint64_t v933;
  _QWORD *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  _QWORD *v954;
  _QWORD *v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  unsigned int v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int v991;
  unsigned int v992;
  int v993;
  unint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  int *v998;
  uint64_t v999;
  uint64_t v1000;
  char v1001;
  unsigned int v1002;
  int v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int *v1008;
  uint64_t v1009;
  uint64_t v1010;
  char v1011;
  unsigned int v1012;
  int v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  int v1022;
  unsigned int v1023;
  int v1024;
  unint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int v1033;
  unsigned int v1034;
  int v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int *v1040;
  uint64_t v1041;
  uint64_t v1042;
  char v1043;
  unsigned int v1044;
  int v1045;
  unint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  int *v1050;
  uint64_t v1051;
  uint64_t v1052;
  char v1053;
  unsigned int v1054;
  int v1055;
  unint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064;
  unsigned int v1065;
  int v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int v1075;
  unsigned int v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unsigned int v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  unsigned int v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  float v1108;
  unsigned int v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  float v1119;
  unsigned int v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  uint64_t *v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t *v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  unsigned int v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  int v1146;
  ldiv_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  int v1151;
  ldiv_t v1152;
  uint64_t v1153;
  unsigned int v1154;
  int v1155;
  unint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  int *v1160;
  uint64_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  unsigned int v1164;
  _QWORD *v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int v1174;
  ldiv_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  int v1181;
  ldiv_t v1182;
  uint64_t v1183;
  unsigned int v1184;
  int v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t *v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t *v1195;
  uint64_t v1196;
  uint64_t v1197;
  int v1198;
  int v1199;
  unint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  unsigned int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int v1210;
  ldiv_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  int v1215;
  ldiv_t v1216;
  uint64_t v1217;
  unsigned int v1218;
  int v1219;
  unint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  int *v1224;
  uint64_t v1225;
  unint64_t v1226;
  uint64_t v1227;
  unsigned int v1228;
  _QWORD *v1229;
  uint64_t v1230;
  unint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  ldiv_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  int v1245;
  ldiv_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  int v1249;
  unint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t *v1259;
  uint64_t v1260;
  uint64_t v1261;
  int v1262;
  int v1263;
  unint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  unsigned int v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  int v1274;
  ldiv_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  int v1279;
  ldiv_t v1280;
  uint64_t v1281;
  unsigned int v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  uint64_t *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t *v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unsigned int v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  int v1309;
  ldiv_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  int v1314;
  ldiv_t v1315;
  uint64_t v1316;
  unsigned int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  unsigned int v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  int v1344;
  ldiv_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  int v1349;
  ldiv_t v1350;
  uint64_t v1351;
  unsigned int v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  uint64_t *v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int v1373;
  unsigned int v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  int quot;
  ldiv_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  int v1383;
  ldiv_t v1384;
  uint64_t v1385;
  int v1386;
  unsigned int v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  uint64_t *v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t *v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  int v1408;
  unsigned int v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  int v1413;
  ldiv_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  int v1418;
  ldiv_t v1419;
  uint64_t v1420;
  int v1421;
  unsigned int v1422;
  int v1423;
  unint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  int *v1428;
  uint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  char v1432;
  unsigned int v1433;
  _QWORD *v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  int v1443;
  ldiv_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  ldiv_t v1451;
  uint64_t v1452;
  char v1453;
  unsigned int v1454;
  int v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  int *v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  char v1464;
  unsigned int v1465;
  _QWORD *v1466;
  uint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  int v1475;
  ldiv_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  int v1482;
  ldiv_t v1483;
  uint64_t v1484;
  char v1485;
  unsigned int v1486;
  int v1487;
  unint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t *v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t *v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  int v1501;
  unint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  int v1505;
  unsigned int v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  int v1512;
  ldiv_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  int v1517;
  ldiv_t v1518;
  uint64_t v1519;
  int v1520;
  unsigned int v1521;
  int v1522;
  unint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t *v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t *v1532;
  uint64_t v1533;
  uint64_t v1534;
  int v1535;
  int v1536;
  unint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  int v1540;
  unsigned int v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  int v1547;
  ldiv_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  int v1552;
  ldiv_t v1553;
  uint64_t v1554;
  int v1555;
  unsigned int v1556;
  int v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  int *v1562;
  uint64_t v1563;
  unint64_t v1564;
  uint64_t v1565;
  char v1566;
  unsigned int v1567;
  _QWORD *v1568;
  uint64_t v1569;
  unint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  int v1577;
  ldiv_t v1578;
  uint64_t v1579;
  unint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  int v1584;
  ldiv_t v1585;
  uint64_t v1586;
  char v1587;
  unsigned int v1588;
  int v1589;
  unint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  int *v1594;
  uint64_t v1595;
  unint64_t v1596;
  uint64_t v1597;
  char v1598;
  unsigned int v1599;
  _QWORD *v1600;
  uint64_t v1601;
  unint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  unint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  int v1609;
  ldiv_t v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  int v1616;
  ldiv_t v1617;
  uint64_t v1618;
  char v1619;
  unsigned int v1620;
  int v1621;
  unint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t *v1631;
  uint64_t v1632;
  uint64_t v1633;
  int v1634;
  int v1635;
  unint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  int v1639;
  unsigned int v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  int v1646;
  ldiv_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  int v1651;
  ldiv_t v1652;
  uint64_t v1653;
  int v1654;
  unsigned int v1655;
  int v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t *v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t *v1666;
  uint64_t v1667;
  uint64_t v1668;
  int v1669;
  int v1670;
  unint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  int v1674;
  unsigned int v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  int v1681;
  ldiv_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  int v1686;
  ldiv_t v1687;
  uint64_t v1688;
  int v1689;
  unsigned int v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  uint64_t *v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t *v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  unsigned int v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  int v1717;
  ldiv_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  int v1722;
  ldiv_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  unsigned int v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  unint64_t v1734;
  uint64_t *v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t *v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  unsigned int v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  int v1753;
  ldiv_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  int v1758;
  ldiv_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  unsigned int v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  unint64_t v1770;
  uint64_t *v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t *v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  float v1783;
  unsigned int v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  int v1789;
  ldiv_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  int v1794;
  ldiv_t v1795;
  uint64_t v1796;
  float v1797;
  unsigned int v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  unint64_t v1806;
  uint64_t *v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t *v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  float v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  int v1825;
  ldiv_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  int v1830;
  ldiv_t v1831;
  uint64_t v1832;
  float v1833;
  unsigned int v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  unsigned int v1865;
  unsigned int v1866;
  uint64_t v1867;
  uint64_t v1868;
  unsigned int v1869;
  unsigned int v1870;
  unsigned int v1871;
  unsigned int v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  int *v1880;
  int *v1881;
  int *v1882;
  int *v1883;
  int *v1884;
  int *v1885;
  uint64_t v1886;
  unint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  unint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  unint64_t v1894;
  uint64_t v1895;
  unint64_t v1896;
  uint64_t v1897;
  unint64_t v1898;
  unint64_t v1899;
  unint64_t v1900;
  unint64_t v1901;
  unint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  unint64_t v1905;
  unint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  unint64_t v1909;
  unint64_t v1910;
  unint64_t v1911;
  unint64_t v1912;
  unint64_t v1913;
  unint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  uint64_t v1924;
  unint64_t v1925;
  uint64_t v1926;
  unint64_t v1927;
  unint64_t v1928;
  unint64_t v1929;
  unint64_t v1930;
  unint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  unint64_t v1934;
  unint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  unint64_t v1938;
  unint64_t v1939;
  unint64_t v1940;
  unint64_t v1941;
  unint64_t v1942;
  unint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  int v1949;
  int *v1950;
  int *v1951;
  int v1952;
  uint64_t v1953;
  unint64_t v1954;
  unint64_t v1955;
  unint64_t v1956;
  unint64_t v1957;
  unint64_t v1958;
  unint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(unsigned __int8 **)(*a2 + 152) != -**(_BYTE **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          v35 = *(_DWORD *)(*a2 + 160);
          if (v35 >= 1)
          {
            v36 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v37 = *(unsigned __int8 **)(*a2 + 152);
            v38 = -**(unsigned __int8 **)(*a1 + 152);
            v39 = v35 + 1;
            do
            {
              v40 = *v37++;
              *v36++ = v40 != v38;
              --v39;
            }
            while (v39 > 1);
          }
          return;
        case 2:
          v41 = *(_DWORD *)(*a1 + 160);
          if (v41 >= 1)
          {
            v42 = **(unsigned __int8 **)(*a2 + 152);
            v43 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v44 = *(char **)(*a1 + 152);
            v45 = v41 + 1;
            do
            {
              v46 = *v44++;
              *v43++ = v42 != -v46;
              --v45;
            }
            while (v45 > 1);
          }
          return;
        case 3:
          v47 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v47 >= 1)
          {
            v48 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v49 = *(unsigned __int8 **)(*a2 + 152);
            v50 = *(char **)(*a1 + 152);
            v51 = v47 + 1;
            do
            {
              v53 = *v50++;
              v52 = v53;
              v54 = *v49++;
              *v48++ = v54 != -v52;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          v26 = *(_QWORD **)a3;
          v27 = (_QWORD *)*a1;
          v28 = *(int **)*a1;
          v29 = (v27[1] - (_QWORD)v28) >> 2;
          v30 = (v29 - 1);
          if ((int)v30 >= -1)
            v31 = -1;
          else
            v31 = v29 - 1;
          v32 = v31 + 1;
          v33 = v29 + 1;
          break;
      }
      while (1)
      {
        v34 = v33 - 2;
        if (v33 - 2 < 0)
          break;
        --v33;
        if (*(_QWORD *)(v27[3] + 8 * v34) != *(_QWORD *)(v26[3] + 8 * v34))
          goto LABEL_147;
      }
      v33 = v32;
LABEL_147:
      v215 = (_QWORD *)*a2;
      v216 = *(int **)*a2;
      v217 = (v215[1] - (_QWORD)v216) >> 2;
      v218 = (v217 - 1);
      if ((int)v218 >= -1)
        v219 = -1;
      else
        v219 = v217 - 1;
      v220 = v219 + 1;
      v221 = v217 + 1;
      while (1)
      {
        v222 = v221 - 2;
        if (v221 - 2 < 0)
          break;
        --v221;
        if (*(_QWORD *)(v215[3] + 8 * v222) != *(_QWORD *)(v26[3] + 8 * v222))
          goto LABEL_201;
      }
      v221 = v220;
LABEL_201:
      v269 = v29 + 1;
      while (1)
      {
        v270 = v269 - 2;
        if (v269 - 2 < 0)
          break;
        --v269;
        if (*(_QWORD *)(v27[3] + 8 * v270))
          goto LABEL_236;
      }
      v269 = v32;
LABEL_236:
      v283 = v217 + 1;
      while (1)
      {
        v284 = v283 - 2;
        if (v283 - 2 < 0)
          break;
        --v283;
        if (*(_QWORD *)(v215[3] + 8 * v284))
          goto LABEL_271;
      }
      v283 = v220;
LABEL_271:
      v297 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v33 <= v221)
        v298 = v221;
      else
        v298 = v33;
      if (v33 <= v283)
        v33 = v283;
      if (v269 > v221)
        v221 = v269;
      if (v297 > v221)
      {
        v299 = 1;
      }
      else
      {
        v221 = (uint64_t)(v26[1] - *v26) >> 2;
        v299 = 4;
      }
      if (v297 > v33)
      {
        v300 = 2;
      }
      else
      {
        v33 = v221;
        v300 = v299;
      }
      if (v297 > v298)
      {
        v33 = v298;
        v300 = 3;
      }
      v1944 = v218;
      v1960 = v30;
      if (!v33)
        goto LABEL_300;
      v301 = *(_QWORD *)(v26[3] + 8 * (v33 - 1));
      if (v301 < 0x10)
        goto LABEL_300;
      switch(v300)
      {
        case 1:
          if (v33 == 2)
          {
            v1353 = *v28;
            if ((_DWORD)v1353)
            {
              v1354 = 0;
              v1355 = 0;
              v1356 = 0;
              v1357 = v27[19];
              v1358 = v215[19];
              v1359 = v26[19];
              v1360 = v28[1];
              v1361 = (uint64_t *)v27[3];
              v1362 = *v1361;
              v1363 = v1361[1];
              v1364 = (uint64_t *)v215[3];
              v1366 = *v1364;
              v1365 = v1364[1];
              if (v1360 <= 1)
                v1367 = 1;
              else
                v1367 = v28[1];
              v1368 = v1362 - v1363 * v1360;
              v1369 = v1366 - v1365 * v216[1];
              do
              {
                if ((_DWORD)v1360)
                {
                  v1370 = 0;
                  v1371 = v1358 + v1355;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1372 = 0;
                      v1373 = -*(unsigned __int8 *)(v1357 + v1356);
                      v1374 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1359 + v1372) = *(unsigned __int8 *)(v1371 + v1372) != v1373;
                        --v1374;
                        ++v1372;
                      }
                      while (v1374 > 1);
                    }
                    v1356 += v1363;
                    v1355 += v1365;
                    v1359 += (int)v301;
                    ++v1370;
                    v1371 += v1365;
                  }
                  while (v1370 != v1367);
                }
                v1356 += v1368;
                v1355 += v1369;
                ++v1354;
              }
              while (v1354 != v1353);
            }
          }
          else if (v33 == 1)
          {
            v971 = *v28;
            if ((_DWORD)v971)
            {
              v972 = 0;
              v973 = 0;
              v974 = v27[19];
              v975 = v215[19];
              v976 = v26[19];
              v977 = *(_QWORD *)v27[3];
              v978 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v979 = 0;
                  v980 = -*(unsigned __int8 *)(v974 + v973);
                  v981 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v976 + v979) = *(unsigned __int8 *)(v975 + v979) != v980;
                    --v981;
                    ++v979;
                  }
                  while (v981 > 1);
                }
                v973 += v977;
                v976 += (int)v301;
                ++v972;
                v975 += v978;
              }
              while (v972 != v971);
            }
          }
          else
          {
            v1901 = v26[6];
            if (v1901)
            {
              v1930 = 0;
              v1852 = v215[19];
              v1867 = v27[19];
              v1375 = v26[19];
              do
              {
                v1376 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1377 = v27[3];
                  quot = v1930;
                  do
                  {
                    v1379 = ldiv(quot, v28[v30]);
                    quot = v1379.quot;
                    v1376 += *(_QWORD *)(v1377 + 8 * v30--) * v1379.rem;
                  }
                  while (v30 != -1);
                }
                v1380 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1381) = 0;
                }
                else
                {
                  v1381 = 0;
                  v1382 = v215[3];
                  v1383 = v1930;
                  do
                  {
                    v1384 = ldiv(v1383, v216[v1380]);
                    v1383 = v1384.quot;
                    v1381 += *(_QWORD *)(v1382 + 8 * v1380--) * v1384.rem;
                  }
                  while (v1380 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1385 = 0;
                  v1386 = -*(unsigned __int8 *)(v1867 + (int)v1376);
                  v1387 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1375 + v1385) = *(unsigned __int8 *)(v1852 + (int)v1381 + v1385) != v1386;
                    --v1387;
                    ++v1385;
                  }
                  while (v1387 > 1);
                }
                v1375 += (int)v301;
                v1930 += (int)v301;
              }
              while (v1930 < v1901);
            }
          }
          break;
        case 2:
          if (v33 == 2)
          {
            v1388 = *v28;
            if ((_DWORD)v1388)
            {
              v1389 = 0;
              v1390 = 0;
              v1391 = 0;
              v1392 = v27[19];
              v1393 = v215[19];
              v1394 = v26[19];
              v1395 = v28[1];
              v1396 = (uint64_t *)v27[3];
              v1397 = *v1396;
              v1398 = v1396[1];
              v1399 = (uint64_t *)v215[3];
              v1401 = *v1399;
              v1400 = v1399[1];
              if (v1395 <= 1)
                v1402 = 1;
              else
                v1402 = v28[1];
              v1403 = v1397 - v1398 * v1395;
              v1404 = v1401 - v1400 * v216[1];
              do
              {
                if ((_DWORD)v1395)
                {
                  v1405 = 0;
                  v1406 = v1392 + v1391;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1407 = 0;
                      v1408 = *(unsigned __int8 *)(v1393 + v1390);
                      v1409 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1394 + v1407) = v1408 != -*(_BYTE *)(v1406 + v1407);
                        --v1409;
                        ++v1407;
                      }
                      while (v1409 > 1);
                    }
                    v1391 += v1398;
                    v1390 += v1400;
                    v1394 += (int)v301;
                    ++v1405;
                    v1406 += v1398;
                  }
                  while (v1405 != v1402);
                }
                v1391 += v1403;
                v1390 += v1404;
                ++v1389;
              }
              while (v1389 != v1388);
            }
          }
          else if (v33 == 1)
          {
            v982 = *v28;
            if ((_DWORD)v982)
            {
              v983 = 0;
              v984 = 0;
              v985 = v27[19];
              v986 = v215[19];
              v987 = v26[19];
              v988 = *(_QWORD *)v27[3];
              v989 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v990 = 0;
                  v991 = *(unsigned __int8 *)(v986 + v984);
                  v992 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v987 + v990) = v991 != -*(_BYTE *)(v985 + v990);
                    --v992;
                    ++v990;
                  }
                  while (v992 > 1);
                }
                v984 += v989;
                v987 += (int)v301;
                ++v983;
                v985 += v988;
              }
              while (v983 != v982);
            }
          }
          else
          {
            v1902 = v26[6];
            if (v1902)
            {
              v1931 = 0;
              v1853 = v215[19];
              v1868 = v27[19];
              v1410 = v26[19];
              do
              {
                v1411 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1412 = v27[3];
                  v1413 = v1931;
                  do
                  {
                    v1414 = ldiv(v1413, v28[v30]);
                    v1413 = v1414.quot;
                    v1411 += *(_QWORD *)(v1412 + 8 * v30--) * v1414.rem;
                  }
                  while (v30 != -1);
                }
                v1415 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1416) = 0;
                }
                else
                {
                  v1416 = 0;
                  v1417 = v215[3];
                  v1418 = v1931;
                  do
                  {
                    v1419 = ldiv(v1418, v216[v1415]);
                    v1418 = v1419.quot;
                    v1416 += *(_QWORD *)(v1417 + 8 * v1415--) * v1419.rem;
                  }
                  while (v1415 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1420 = 0;
                  v1421 = *(unsigned __int8 *)(v1853 + (int)v1416);
                  v1422 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1410 + v1420) = v1421 != -*(_BYTE *)(v1868 + (int)v1411 + v1420);
                    --v1422;
                    ++v1420;
                  }
                  while (v1422 > 1);
                }
                v1410 += (int)v301;
                v1931 += (int)v301;
              }
              while (v1931 < v1902);
            }
          }
          break;
        case 3:
          if (v33 == 2)
          {
            v1121 = *v28;
            if ((_DWORD)v1121)
            {
              v1122 = 0;
              v1123 = 0;
              v1124 = 0;
              v1125 = v27[19];
              v1126 = v215[19];
              v1127 = v26[19];
              v1128 = v28[1];
              v1129 = (uint64_t *)v27[3];
              v1130 = *v1129;
              v1131 = v1129[1];
              v1132 = (uint64_t *)v215[3];
              v1134 = *v1132;
              v1133 = v1132[1];
              if (v1128 <= 1)
                v1135 = 1;
              else
                v1135 = v28[1];
              v1136 = v1130 - v1131 * v1128;
              v1137 = v1134 - v1133 * v216[1];
              do
              {
                if ((_DWORD)v1128)
                {
                  v1138 = 0;
                  v1139 = v1126 + v1123;
                  v1140 = v1125 + v1124;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1141 = 0;
                      v1142 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1127 + v1141) = *(unsigned __int8 *)(v1139 + v1141) != -*(_BYTE *)(v1140 + v1141);
                        --v1142;
                        ++v1141;
                      }
                      while (v1142 > 1);
                    }
                    v1124 += v1131;
                    v1123 += v1133;
                    v1127 += (int)v301;
                    ++v1138;
                    v1139 += v1133;
                    v1140 += v1131;
                  }
                  while (v1138 != v1135);
                }
                v1124 += v1136;
                v1123 += v1137;
                ++v1122;
              }
              while (v1122 != v1121);
            }
          }
          else if (v33 == 1)
          {
            v302 = *v28;
            if ((_DWORD)v302)
            {
              v303 = 0;
              v304 = v27[19];
              v305 = v215[19];
              v306 = v26[19];
              v307 = *(_QWORD *)v27[3];
              v308 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v309 = 0;
                  v310 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v306 + v309) = *(unsigned __int8 *)(v305 + v309) != -*(_BYTE *)(v304 + v309);
                    --v310;
                    ++v309;
                  }
                  while (v310 > 1);
                }
                v306 += (int)v301;
                ++v303;
                v305 += v308;
                v304 += v307;
              }
              while (v303 != v302);
            }
          }
          else
          {
            v1894 = v26[6];
            if (v1894)
            {
              v1923 = 0;
              v1847 = v215[19];
              v1864 = v27[19];
              v1143 = v26[19];
              do
              {
                v1144 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1145 = v27[3];
                  v1146 = v1923;
                  do
                  {
                    v1147 = ldiv(v1146, v28[v30]);
                    v1146 = v1147.quot;
                    v1144 += *(_QWORD *)(v1145 + 8 * v30--) * v1147.rem;
                  }
                  while (v30 != -1);
                }
                v1148 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1149) = 0;
                }
                else
                {
                  v1149 = 0;
                  v1150 = v215[3];
                  v1151 = v1923;
                  do
                  {
                    v1152 = ldiv(v1151, v216[v1148]);
                    v1151 = v1152.quot;
                    v1149 += *(_QWORD *)(v1150 + 8 * v1148--) * v1152.rem;
                  }
                  while (v1148 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1153 = 0;
                  v1154 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1143 + v1153) = *(unsigned __int8 *)(v1847 + (int)v1149 + v1153) != -*(_BYTE *)(v1864 + (int)v1144 + v1153);
                    --v1154;
                    ++v1153;
                  }
                  while (v1154 > 1);
                }
                v1143 += (int)v301;
                v1923 += (int)v301;
              }
              while (v1923 < v1894);
            }
          }
          break;
        default:
LABEL_300:
          switch(v297)
          {
            case 1uLL:
              v311 = v26[6];
              if (v311)
              {
                v312 = (_BYTE *)v27[19];
                v313 = (unsigned __int8 *)v215[19];
                v314 = (BOOL *)v26[19];
                v315 = *(_QWORD *)v27[3];
                v316 = *(_QWORD *)v215[3];
                do
                {
                  *v314++ = *v313 != -*v312;
                  v313 += v316;
                  v312 += v315;
                  --v311;
                }
                while (v311);
              }
              break;
            case 2uLL:
              v448 = *v28;
              if ((_DWORD)v448)
              {
                v449 = 0;
                v450 = 0;
                v451 = 0;
                v452 = 0;
                v453 = v27[19];
                v454 = v215[19];
                v455 = v26[19];
                v456 = v28[1];
                v457 = (uint64_t *)v27[3];
                v458 = *v457;
                v459 = v457[1];
                v460 = (uint64_t *)v215[3];
                v461 = *v460;
                v462 = v460[1];
                v463 = v461 - v462 * v216[1];
                if (v456 <= 1)
                  v464 = 1;
                else
                  v464 = v28[1];
                v465 = v458 - v459 * v456;
                do
                {
                  if ((_DWORD)v456)
                  {
                    v466 = v450 + v464;
                    v467 = (BOOL *)(v455 + v450);
                    v468 = v464;
                    do
                    {
                      *v467++ = *(unsigned __int8 *)(v454 + v451) != -*(_BYTE *)(v453 + v452);
                      v452 += v459;
                      v451 += v462;
                      --v468;
                    }
                    while (v468);
                    v450 = v466;
                  }
                  v452 += v465;
                  v451 += v463;
                  ++v449;
                }
                while (v449 != v448);
              }
              break;
            case 3uLL:
              v469 = *v28;
              if ((_DWORD)v469)
              {
                v470 = 0;
                v471 = 0;
                v472 = 0;
                v473 = 0;
                v474 = v27[19];
                v475 = v215[19];
                v476 = v26[19];
                v477 = v28[1];
                v478 = (_QWORD *)v27[3];
                v479 = v478[1];
                v480 = (_QWORD *)v215[3];
                v481 = v480[1];
                v482 = *v480 - v481 * v216[1];
                if (v477 <= 1)
                  v483 = 1;
                else
                  v483 = v28[1];
                v484 = *v478 - v479 * v477;
                do
                {
                  if ((_DWORD)v477)
                  {
                    v485 = 0;
                    v486 = v28[2];
                    v487 = v478[2];
                    v488 = v480[2];
                    if (v486 <= 1)
                      v489 = 1;
                    else
                      v489 = v28[2];
                    v490 = v481 - v488 * v216[2];
                    do
                    {
                      v491 = v489;
                      if ((_DWORD)v486)
                      {
                        do
                        {
                          *(_BYTE *)(v476 + v471++) = *(unsigned __int8 *)(v475 + v472) != -*(_BYTE *)(v474 + v473);
                          v473 += v487;
                          v472 += v488;
                          --v491;
                        }
                        while (v491);
                      }
                      v473 += v479 - v487 * v486;
                      v472 += v490;
                      ++v485;
                    }
                    while (v485 != v483);
                  }
                  v473 += v484;
                  v472 += v482;
                  ++v470;
                }
                while (v470 != v469);
              }
              break;
            case 4uLL:
              v1967 = *v28;
              if ((_DWORD)v1967)
              {
                v492 = 0;
                v493 = 0;
                v494 = 0;
                v495 = 0;
                v496 = v27[19];
                v497 = v215[19];
                v498 = v26[19];
                v499 = v28[1];
                v500 = (_QWORD *)v27[3];
                v501 = (_QWORD *)v215[3];
                v1862 = v501[1];
                v1874 = v500[1];
                v1916 = *v501 - v1862 * v216[1];
                v1949 = v28[1];
                if (v499 <= 1)
                  v502 = 1;
                else
                  v502 = v28[1];
                v1887 = *v500 - v500[1] * v499;
                do
                {
                  if (v1949)
                  {
                    v503 = 0;
                    v504 = v28[2];
                    v505 = v500[2];
                    v506 = v501[2];
                    if (v504 <= 1)
                      v507 = 1;
                    else
                      v507 = v28[2];
                    v508 = v1862 - v506 * v216[2];
                    do
                    {
                      if ((_DWORD)v504)
                      {
                        v509 = 0;
                        v510 = v28[3];
                        v511 = v500[3];
                        v512 = v501[3];
                        if (v510 <= 1)
                          v513 = 1;
                        else
                          v513 = v28[3];
                        v514 = v506 - v512 * v216[3];
                        do
                        {
                          v515 = v513;
                          if ((_DWORD)v510)
                          {
                            do
                            {
                              *(_BYTE *)(v498 + v493++) = *(unsigned __int8 *)(v497 + v494) != -*(_BYTE *)(v496 + v495);
                              v495 += v511;
                              v494 += v512;
                              --v515;
                            }
                            while (v515);
                          }
                          v495 += v505 - v511 * v510;
                          v494 += v514;
                          ++v509;
                        }
                        while (v509 != v507);
                      }
                      v495 += v1874 - v505 * v504;
                      v494 += v508;
                      ++v503;
                    }
                    while (v503 != v502);
                  }
                  v495 += v1887;
                  v494 += v1916;
                  ++v492;
                }
                while (v492 != v1967);
              }
              break;
            default:
              v437 = v26[6];
              if (v437)
              {
                v438 = 0;
                v1886 = v215[19];
                v1915 = v27[19];
                v1873 = v26[19];
                do
                {
                  v439 = 0;
                  if ((v30 & 0x80000000) == 0)
                  {
                    v440 = v27[3];
                    v441 = v438;
                    do
                    {
                      v442 = ldiv(v441, v28[v30]);
                      v441 = v442.quot;
                      v439 += *(_QWORD *)(v440 + 8 * v30--) * v442.rem;
                    }
                    while (v30 != -1);
                  }
                  v443 = v1944;
                  if ((v1944 & 0x80000000) != 0)
                  {
                    LODWORD(v444) = 0;
                  }
                  else
                  {
                    v444 = 0;
                    v445 = v215[3];
                    v446 = v438;
                    do
                    {
                      v447 = ldiv(v446, v216[v443]);
                      v446 = v447.quot;
                      v444 += *(_QWORD *)(v445 + 8 * v443--) * v447.rem;
                    }
                    while (v443 != -1);
                  }
                  *(_BYTE *)(v1873 + v438++) = *(unsigned __int8 *)(v1886 + (int)v444) != -*(_BYTE *)(v1915 + (int)v439);
                  v30 = v1960;
                }
                while (v438 != v437);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            v10 = **(_BYTE **)(*a1 + 152);
            v11 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v12 = *(char **)(*a2 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = v14 + v10;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v63 = *(_DWORD *)(*a1 + 160);
          if (v63 >= 1)
          {
            v64 = **(_BYTE **)(*a2 + 152);
            v65 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v66 = *(char **)(*a1 + 152);
            v67 = v63 + 1;
            do
            {
              v68 = *v66++;
              *v65++ = v68 + v64;
              --v67;
            }
            while (v67 > 1);
          }
          return;
        case 3:
          v69 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v69 >= 1)
          {
            v70 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v71 = *(char **)(*a2 + 152);
            v72 = *(char **)(*a1 + 152);
            v73 = v69 + 1;
            do
            {
              v75 = *v72++;
              v74 = v75;
              v76 = *v71++;
              *v70++ = v76 + v74;
              --v73;
            }
            while (v73 > 1);
          }
          return;
        default:
          v55 = *(_QWORD **)a3;
          v56 = *a1;
          v57 = *(int **)*a1;
          v58 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v57) >> 2;
          v59 = v58 - 1;
          if ((int)v58 - 1 >= -1)
            v59 = -1;
          v60 = v59 + 1;
          v61 = v58 + 1;
          break;
      }
      while (1)
      {
        v62 = v61 - 2;
        if (v61 - 2 < 0)
          break;
        --v61;
        if (*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v62) != *(_QWORD *)(v55[3] + 8 * v62))
          goto LABEL_155;
      }
      v61 = v60;
LABEL_155:
      v223 = (int **)*a2;
      v224 = *(int **)*a2;
      v225 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v224) >> 2;
      v226 = v225 - 1;
      if ((int)v225 - 1 >= -1)
        v226 = -1;
      v227 = v226 + 1;
      v228 = v225 + 1;
      while (1)
      {
        v229 = v228 - 2;
        if (v228 - 2 < 0)
          break;
        --v228;
        if (*(_QWORD *)&v223[3][2 * v229] != *(_QWORD *)(v55[3] + 8 * v229))
          goto LABEL_206;
      }
      v228 = v227;
LABEL_206:
      v271 = v58 + 1;
      while (1)
      {
        v272 = v271 - 2;
        if (v271 - 2 < 0)
          break;
        --v271;
        if (*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v272))
          goto LABEL_241;
      }
      v271 = v60;
LABEL_241:
      v285 = v225 + 1;
      while (1)
      {
        v286 = v285 - 2;
        if (v285 - 2 < 0)
          break;
        --v285;
        if (*(_QWORD *)&v223[3][2 * v286])
          goto LABEL_306;
      }
      v285 = v227;
LABEL_306:
      v317 = (uint64_t)(v55[1] - *v55) >> 2;
      if (v61 <= v228)
        v318 = v228;
      else
        v318 = v61;
      if (v61 <= v285)
        v61 = v285;
      if (v271 > v228)
        v228 = v271;
      if (v317 > v228)
      {
        v319 = 1;
      }
      else
      {
        v228 = (uint64_t)(v55[1] - *v55) >> 2;
        v319 = 4;
      }
      if (v317 > v61)
      {
        v320 = 2;
      }
      else
      {
        v61 = v228;
        v320 = v319;
      }
      if (v317 > v318)
      {
        v61 = v318;
        v320 = 3;
      }
      if (!v61)
        goto LABEL_336;
      v321 = *(_QWORD *)(v55[3] + 8 * (v61 - 1));
      if (v321 < 0x10)
        goto LABEL_336;
      v1961 = *(_QWORD *)(v55[3] + 8 * (v61 - 1));
      switch(v320)
      {
        case 1:
          if (v61 == 2)
          {
            v1423 = *v57;
            if (*v57)
            {
              v1424 = 0;
              v1425 = 0;
              v1426 = 0;
              v1427 = *(_QWORD *)(v56 + 152);
              v1428 = v223[19];
              v1429 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1430 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1431 = 0;
                      v1432 = *(_BYTE *)(v1427 + v1426);
                      v1433 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1429 + v1431) = *((_BYTE *)v1428 + v1425 + v1431) + v1432;
                        --v1433;
                        ++v1431;
                      }
                      while (v1433 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1434 = *(_QWORD **)(v56 + 24);
                    v1435 = v1434[1];
                    v1426 += v1435;
                    v1425 += *((_QWORD *)v223[3] + 1);
                    v1429 += (int)v321;
                    ++v1430;
                    v1436 = v57[1];
                  }
                  while (v1430 < v1436);
                  v1423 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1436 = 0;
                  v1434 = *(_QWORD **)(v56 + 24);
                  v1435 = v1434[1];
                }
                v1426 = *v1434 + v1426 - v1436 * v1435;
                v1425 = *(_QWORD *)v223[3] + v1425 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1424;
              }
              while (v1424 < v1423);
            }
          }
          else if (v61 == 1)
          {
            v993 = *v57;
            if (*v57)
            {
              v994 = 0;
              v995 = 0;
              v996 = 0;
              v997 = *(_QWORD *)(v56 + 152);
              v998 = v223[19];
              v999 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v1000 = 0;
                  v1001 = *(_BYTE *)(v997 + v996);
                  v1002 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v999 + v1000) = *((_BYTE *)v998 + v995 + v1000) + v1001;
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v993 = **(_DWORD **)*a1;
                }
                v996 += **(_QWORD **)(v56 + 24);
                v995 += *(_QWORD *)v223[3];
                v999 += (int)v321;
                ++v994;
              }
              while (v994 < v993);
            }
          }
          else if (v55[6])
          {
            v1882 = v223[19];
            v1903 = *(_QWORD *)(v56 + 152);
            v1932 = (int)v321;
            v1956 = 0;
            v1869 = v321 + 1;
            v1437 = v55[19];
            do
            {
              v1438 = *(_QWORD *)*a1;
              v1439 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1438) >> 2;
              v1440 = 0;
              v1441 = (v1439 - 1);
              if ((int)v1439 - 1 >= 0)
              {
                v1442 = *(_QWORD *)(*a1 + 24);
                v1443 = v1956;
                do
                {
                  v1444 = ldiv(v1443, *(int *)(v1438 + 4 * v1441));
                  v1443 = v1444.quot;
                  v1440 += *(_QWORD *)(v1442 + 8 * v1441--) * v1444.rem;
                }
                while (v1441 != -1);
              }
              v1445 = *(_QWORD *)*a2;
              v1446 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1445) >> 2;
              v1447 = 0;
              v1448 = (v1446 - 1);
              if ((int)v1446 - 1 >= 0)
              {
                v1449 = *(_QWORD *)(*a2 + 24);
                v1450 = v1956;
                do
                {
                  v1451 = ldiv(v1450, *(int *)(v1445 + 4 * v1448));
                  v1450 = v1451.quot;
                  v1447 += *(_QWORD *)(v1449 + 8 * v1448--) * v1451.rem;
                }
                while (v1448 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1452 = 0;
                v1453 = *(_BYTE *)(v1903 + (int)v1440);
                v1454 = v1869;
                do
                {
                  *(_BYTE *)(v1437 + v1452) = *((_BYTE *)v1882 + (int)v1447 + v1452) + v1453;
                  --v1454;
                  ++v1452;
                }
                while (v1454 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1437 += v1932;
              v1956 += v1932;
            }
            while (v1956 < v55[6]);
          }
          break;
        case 2:
          if (v61 == 2)
          {
            v1455 = *v57;
            if (*v57)
            {
              v1456 = 0;
              v1457 = 0;
              v1458 = 0;
              v1459 = *(_QWORD *)(v56 + 152);
              v1460 = v223[19];
              v1461 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1462 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1463 = 0;
                      v1464 = *((_BYTE *)v1460 + v1457);
                      v1465 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1461 + v1463) = *(_BYTE *)(v1459 + v1458 + v1463) + v1464;
                        --v1465;
                        ++v1463;
                      }
                      while (v1465 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1466 = *(_QWORD **)(v56 + 24);
                    v1467 = v1466[1];
                    v1458 += v1467;
                    v1457 += *((_QWORD *)v223[3] + 1);
                    v1461 += (int)v321;
                    ++v1462;
                    v1468 = v57[1];
                  }
                  while (v1462 < v1468);
                  v1455 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1468 = 0;
                  v1466 = *(_QWORD **)(v56 + 24);
                  v1467 = v1466[1];
                }
                v1458 = *v1466 + v1458 - v1468 * v1467;
                v1457 = *(_QWORD *)v223[3] + v1457 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1456;
              }
              while (v1456 < v1455);
            }
          }
          else if (v61 == 1)
          {
            v1003 = *v57;
            if (*v57)
            {
              v1004 = 0;
              v1005 = 0;
              v1006 = 0;
              v1007 = *(_QWORD *)(v56 + 152);
              v1008 = v223[19];
              v1009 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v1010 = 0;
                  v1011 = *((_BYTE *)v1008 + v1005);
                  v1012 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v1009 + v1010) = *(_BYTE *)(v1007 + v1006 + v1010) + v1011;
                    --v1012;
                    ++v1010;
                  }
                  while (v1012 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v1003 = **(_DWORD **)*a1;
                }
                v1006 += **(_QWORD **)(v56 + 24);
                v1005 += *(_QWORD *)v223[3];
                v1009 += (int)v321;
                ++v1004;
              }
              while (v1004 < v1003);
            }
          }
          else if (v55[6])
          {
            v1883 = v223[19];
            v1904 = *(_QWORD *)(v56 + 152);
            v1933 = (int)v321;
            v1957 = 0;
            v1870 = v321 + 1;
            v1469 = v55[19];
            do
            {
              v1470 = *(_QWORD *)*a1;
              v1471 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1470) >> 2;
              v1472 = 0;
              v1473 = (v1471 - 1);
              if ((int)v1471 - 1 >= 0)
              {
                v1474 = *(_QWORD *)(*a1 + 24);
                v1475 = v1957;
                do
                {
                  v1476 = ldiv(v1475, *(int *)(v1470 + 4 * v1473));
                  v1475 = v1476.quot;
                  v1472 += *(_QWORD *)(v1474 + 8 * v1473--) * v1476.rem;
                }
                while (v1473 != -1);
              }
              v1477 = *(_QWORD *)*a2;
              v1478 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1477) >> 2;
              v1479 = 0;
              v1480 = (v1478 - 1);
              if ((int)v1478 - 1 >= 0)
              {
                v1481 = *(_QWORD *)(*a2 + 24);
                v1482 = v1957;
                do
                {
                  v1483 = ldiv(v1482, *(int *)(v1477 + 4 * v1480));
                  v1482 = v1483.quot;
                  v1479 += *(_QWORD *)(v1481 + 8 * v1480--) * v1483.rem;
                }
                while (v1480 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1484 = 0;
                v1485 = *((_BYTE *)v1883 + (int)v1479);
                v1486 = v1870;
                do
                {
                  *(_BYTE *)(v1469 + v1484) = *(_BYTE *)(v1904 + (int)v1472 + v1484) + v1485;
                  --v1486;
                  ++v1484;
                }
                while (v1486 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1469 += v1933;
              v1957 += v1933;
            }
            while (v1957 < v55[6]);
          }
          break;
        case 3:
          if (v61 == 2)
          {
            v1155 = *v57;
            if (*v57)
            {
              v1156 = 0;
              v1157 = 0;
              v1158 = 0;
              v1159 = *(_QWORD *)(v56 + 152);
              v1160 = v223[19];
              v1161 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1162 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1163 = 0;
                      v1164 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1161 + v1163) = *((_BYTE *)v1160 + v1157 + v1163)
                                                  + *(_BYTE *)(v1159 + v1158 + v1163);
                        --v1164;
                        ++v1163;
                      }
                      while (v1164 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1165 = *(_QWORD **)(v56 + 24);
                    v1166 = v1165[1];
                    v1158 += v1166;
                    v1157 += *((_QWORD *)v223[3] + 1);
                    v1161 += (int)v321;
                    ++v1162;
                    v1167 = v57[1];
                  }
                  while (v1162 < v1167);
                  v1155 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1167 = 0;
                  v1165 = *(_QWORD **)(v56 + 24);
                  v1166 = v1165[1];
                }
                v1158 = *v1165 + v1158 - v1167 * v1166;
                v1157 = *(_QWORD *)v223[3] + v1157 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1156;
              }
              while (v1156 < v1155);
            }
          }
          else if (v61 == 1)
          {
            v322 = *v57;
            if (*v57)
            {
              v323 = 0;
              v324 = 0;
              v325 = 0;
              v326 = *(_QWORD *)(v56 + 152);
              v327 = v223[19];
              v328 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v329 = 0;
                  v330 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v328 + v329) = *((_BYTE *)v327 + v324 + v329) + *(_BYTE *)(v326 + v325 + v329);
                    --v330;
                    ++v329;
                  }
                  while (v330 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v322 = **(_DWORD **)*a1;
                }
                v325 += **(_QWORD **)(v56 + 24);
                v324 += *(_QWORD *)v223[3];
                v328 += (int)v321;
                ++v323;
              }
              while (v323 < v322);
            }
          }
          else if (v55[6])
          {
            v1880 = v223[19];
            v1895 = *(_QWORD *)(v56 + 152);
            v1924 = (int)v321;
            v1954 = 0;
            v1865 = v321 + 1;
            v1168 = v55[19];
            do
            {
              v1169 = *(_QWORD *)*a1;
              v1170 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1169) >> 2;
              v1171 = 0;
              v1172 = (v1170 - 1);
              if ((int)v1170 - 1 >= 0)
              {
                v1173 = *(_QWORD *)(*a1 + 24);
                v1174 = v1954;
                do
                {
                  v1175 = ldiv(v1174, *(int *)(v1169 + 4 * v1172));
                  v1174 = v1175.quot;
                  v1171 += *(_QWORD *)(v1173 + 8 * v1172--) * v1175.rem;
                }
                while (v1172 != -1);
              }
              v1176 = *(_QWORD *)*a2;
              v1177 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1176) >> 2;
              v1178 = 0;
              v1179 = (v1177 - 1);
              if ((int)v1177 - 1 >= 0)
              {
                v1180 = *(_QWORD *)(*a2 + 24);
                v1181 = v1954;
                do
                {
                  v1182 = ldiv(v1181, *(int *)(v1176 + 4 * v1179));
                  v1181 = v1182.quot;
                  v1178 += *(_QWORD *)(v1180 + 8 * v1179--) * v1182.rem;
                }
                while (v1179 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1183 = 0;
                v1184 = v1865;
                do
                {
                  *(_BYTE *)(v1168 + v1183) = *((_BYTE *)v1880 + (int)v1178 + v1183)
                                            + *(_BYTE *)(v1895 + (int)v1171 + v1183);
                  --v1184;
                  ++v1183;
                }
                while (v1184 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1168 += v1924;
              v1954 += v1924;
            }
            while (v1954 < v55[6]);
          }
          break;
        default:
LABEL_336:
          switch(v317)
          {
            case 1uLL:
              if (v55[6])
              {
                v331 = 0;
                v332 = 0;
                v333 = 0;
                v334 = *(_QWORD *)(v56 + 152);
                v335 = v223[19];
                v336 = v55[19];
                do
                {
                  *(_BYTE *)(v336 + v331) = *((_BYTE *)v335 + v332) + *(_BYTE *)(v334 + v333);
                  v333 += **(_QWORD **)(*a1 + 24);
                  v332 += **(_QWORD **)(*a2 + 24);
                  ++v331;
                }
                while (v331 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v532 = *v57;
              if (*v57)
              {
                v533 = 0;
                v534 = 0;
                v535 = 0;
                v536 = 0;
                v537 = *(_QWORD *)(v56 + 152);
                v538 = v223[19];
                v539 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v540 = 0;
                    do
                    {
                      *(_BYTE *)(v539 + v534 + v540) = *((_BYTE *)v538 + v535) + *(_BYTE *)(v537 + v536);
                      v56 = *a1;
                      v541 = *(_QWORD **)(*a1 + 24);
                      v542 = v541[1];
                      v536 += v542;
                      v223 = (int **)*a2;
                      v543 = *(int **)(*a2 + 24);
                      v544 = *((_QWORD *)v543 + 1);
                      v535 += v544;
                      ++v540;
                      v57 = *(int **)*a1;
                      v545 = v57[1];
                    }
                    while (v540 < v545);
                    v532 = *v57;
                    v224 = *v223;
                    v534 += v540;
                  }
                  else
                  {
                    v545 = 0;
                    v541 = *(_QWORD **)(v56 + 24);
                    v542 = v541[1];
                    v543 = v223[3];
                    v544 = *((_QWORD *)v543 + 1);
                  }
                  v536 = *v541 + v536 - v545 * v542;
                  v535 = *(_QWORD *)v543 + v535 - v544 * v224[1];
                  ++v533;
                }
                while (v533 < v532);
              }
              break;
            case 3uLL:
              v546 = *v57;
              if (*v57)
              {
                v547 = 0;
                v548 = 0;
                v549 = 0;
                v550 = 0;
                v551 = *(_QWORD *)(v56 + 152);
                v552 = v223[19];
                v553 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v554 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        v555 = 0;
                        do
                        {
                          *(_BYTE *)(v553 + v548 + v555) = *((_BYTE *)v552 + v549) + *(_BYTE *)(v551 + v550);
                          v56 = *a1;
                          v556 = *(_QWORD **)(*a1 + 24);
                          v557 = v556[2];
                          v550 += v557;
                          v223 = (int **)*a2;
                          v558 = *(int **)(*a2 + 24);
                          v559 = *((_QWORD *)v558 + 2);
                          v549 += v559;
                          ++v555;
                          v57 = *(int **)*a1;
                          v560 = v57[2];
                        }
                        while (v555 < v560);
                        v224 = *v223;
                        v548 += v555;
                      }
                      else
                      {
                        v560 = 0;
                        v556 = *(_QWORD **)(v56 + 24);
                        v557 = v556[2];
                        v558 = v223[3];
                        v559 = *((_QWORD *)v558 + 2);
                      }
                      v561 = v556[1];
                      v550 = v561 + v550 - v560 * v557;
                      v549 = *((_QWORD *)v558 + 1) + v549 - v559 * v224[2];
                      ++v554;
                      v562 = v57[1];
                    }
                    while (v554 < v562);
                    v546 = *v57;
                  }
                  else
                  {
                    v562 = 0;
                    v556 = *(_QWORD **)(v56 + 24);
                    v561 = v556[1];
                  }
                  v550 = *v556 + v550 - v562 * v561;
                  v549 = *(_QWORD *)v223[3] + v549 - *((_QWORD *)v223[3] + 1) * v224[1];
                  ++v547;
                }
                while (v547 < v546);
              }
              break;
            case 4uLL:
              v563 = *v57;
              if (*v57)
              {
                v564 = 0;
                v565 = 0;
                v566 = 0;
                v567 = 0;
                v568 = *(_QWORD *)(v56 + 152);
                v569 = v223[19];
                v570 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v571 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        v572 = 0;
                        do
                        {
                          if (v57[3])
                          {
                            v573 = 0;
                            do
                            {
                              *(_BYTE *)(v570 + v565 + v573) = *((_BYTE *)v569 + v566) + *(_BYTE *)(v568 + v567);
                              v56 = *a1;
                              v574 = *(_QWORD **)(*a1 + 24);
                              v575 = v574[3];
                              v567 += v575;
                              v223 = (int **)*a2;
                              v576 = *(int **)(*a2 + 24);
                              v577 = *((_QWORD *)v576 + 3);
                              v566 += v577;
                              ++v573;
                              v57 = *(int **)*a1;
                              v578 = v57[3];
                            }
                            while (v573 < v578);
                            v224 = *v223;
                            v565 += v573;
                          }
                          else
                          {
                            v578 = 0;
                            v574 = *(_QWORD **)(v56 + 24);
                            v575 = v574[3];
                            v576 = v223[3];
                            v577 = *((_QWORD *)v576 + 3);
                          }
                          v579 = v574[2];
                          v567 = v579 + v567 - v578 * v575;
                          v566 = *((_QWORD *)v576 + 2) + v566 - v577 * v224[3];
                          ++v572;
                          v580 = v57[2];
                        }
                        while (v572 < v580);
                      }
                      else
                      {
                        v580 = 0;
                        v574 = *(_QWORD **)(v56 + 24);
                        v579 = v574[2];
                      }
                      v567 = v574[1] + v567 - v580 * v579;
                      v566 = *((_QWORD *)v223[3] + 1) + v566 - *((_QWORD *)v223[3] + 2) * v224[2];
                      ++v571;
                      v581 = v57[1];
                    }
                    while (v571 < v581);
                    v563 = *v57;
                  }
                  else
                  {
                    v581 = 0;
                  }
                  v567 = **(_QWORD **)(v56 + 24) + v567 - *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8) * v581;
                  v566 = *(_QWORD *)v223[3] + v566 - *((_QWORD *)v223[3] + 1) * v224[1];
                  ++v564;
                }
                while (v564 < v563);
              }
              break;
            default:
              if (v55[6])
              {
                v516 = 0;
                v1950 = v223[19];
                v1968 = *(_QWORD *)(v56 + 152);
                v517 = v55[19];
                do
                {
                  v518 = *(_QWORD *)*a1;
                  v519 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v518) >> 2;
                  v520 = 0;
                  v521 = (v519 - 1);
                  if ((int)v519 - 1 >= 0)
                  {
                    v522 = *(_QWORD *)(*a1 + 24);
                    v523 = v516;
                    do
                    {
                      v524 = ldiv(v523, *(int *)(v518 + 4 * v521));
                      v523 = v524.quot;
                      v520 += *(_QWORD *)(v522 + 8 * v521--) * v524.rem;
                    }
                    while (v521 != -1);
                  }
                  v525 = *(_QWORD *)*a2;
                  v526 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v525) >> 2;
                  v527 = 0;
                  v528 = (v526 - 1);
                  if ((int)v526 - 1 >= 0)
                  {
                    v529 = *(_QWORD *)(*a2 + 24);
                    v530 = v516;
                    do
                    {
                      v531 = ldiv(v530, *(int *)(v525 + 4 * v528));
                      v530 = v531.quot;
                      v527 += *(_QWORD *)(v529 + 8 * v528--) * v531.rem;
                    }
                    while (v528 != -1);
                  }
                  *(_BYTE *)(v517 + v516++) = *((_BYTE *)v1950 + (int)v527) + *(_BYTE *)(v1968 + (int)v520);
                }
                while (v516 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            v17 = **(_DWORD **)(*a1 + 152);
            v18 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v19 = *(int **)(*a2 + 152);
            v20 = v16 + 1;
            do
            {
              v21 = *v19++;
              *v18++ = v21 + v17;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          v86 = *(_DWORD *)(*a1 + 160);
          if (v86 >= 1)
          {
            v87 = **(_DWORD **)(*a2 + 152);
            v88 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v89 = *(int **)(*a1 + 152);
            v90 = v86 + 1;
            do
            {
              v91 = *v89++;
              *v88++ = v91 + v87;
              --v90;
            }
            while (v90 > 1);
          }
          return;
        case 3:
          v92 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v92 >= 1)
          {
            v93 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v94 = *(int **)(*a2 + 152);
            v95 = *(int **)(*a1 + 152);
            v96 = v92 + 1;
            do
            {
              v98 = *v95++;
              v97 = v98;
              v99 = *v94++;
              *v93++ = v99 + v97;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          v77 = *(_QWORD **)a3;
          v78 = (_QWORD *)*a1;
          v79 = *(int **)*a1;
          v80 = (v78[1] - (_QWORD)v79) >> 2;
          v81 = (v80 - 1);
          if ((int)v81 >= -1)
            v82 = -1;
          else
            v82 = v80 - 1;
          v83 = v82 + 1;
          v84 = v80 + 1;
          break;
      }
      while (1)
      {
        v85 = v84 - 2;
        if (v84 - 2 < 0)
          break;
        --v84;
        if (*(_QWORD *)(v78[3] + 8 * v85) != *(_QWORD *)(v77[3] + 8 * v85))
          goto LABEL_162;
      }
      v84 = v83;
LABEL_162:
      v230 = (_QWORD *)*a2;
      v231 = *(int **)*a2;
      v232 = (v230[1] - (_QWORD)v231) >> 2;
      v233 = (v232 - 1);
      if ((int)v233 >= -1)
        v234 = -1;
      else
        v234 = v232 - 1;
      v235 = v234 + 1;
      v236 = v232 + 1;
      while (1)
      {
        v237 = v236 - 2;
        if (v236 - 2 < 0)
          break;
        --v236;
        if (*(_QWORD *)(v230[3] + 8 * v237) != *(_QWORD *)(v77[3] + 8 * v237))
          goto LABEL_211;
      }
      v236 = v235;
LABEL_211:
      v273 = v80 + 1;
      while (1)
      {
        v274 = v273 - 2;
        if (v273 - 2 < 0)
          break;
        --v273;
        if (*(_QWORD *)(v78[3] + 8 * v274))
          goto LABEL_246;
      }
      v273 = v83;
LABEL_246:
      v287 = v232 + 1;
      while (1)
      {
        v288 = v287 - 2;
        if (v287 - 2 < 0)
          break;
        --v287;
        if (*(_QWORD *)(v230[3] + 8 * v288))
          goto LABEL_342;
      }
      v287 = v235;
LABEL_342:
      v337 = (uint64_t)(v77[1] - *v77) >> 2;
      if (v84 <= v236)
        v338 = v236;
      else
        v338 = v84;
      if (v84 <= v287)
        v84 = v287;
      if (v273 > v236)
        v236 = v273;
      if (v337 > v236)
      {
        v339 = 1;
      }
      else
      {
        v236 = (uint64_t)(v77[1] - *v77) >> 2;
        v339 = 4;
      }
      if (v337 > v84)
      {
        v340 = 2;
      }
      else
      {
        v84 = v236;
        v340 = v339;
      }
      if (v337 > v338)
      {
        v84 = v338;
        v340 = 3;
      }
      v1945 = v233;
      v1962 = v81;
      if (!v84)
        goto LABEL_372;
      v341 = *(_QWORD *)(v77[3] + 8 * (v84 - 1));
      if (v341 < 0x10)
        goto LABEL_372;
      switch(v340)
      {
        case 1:
          if (v84 == 2)
          {
            v1487 = *v79;
            if (*v79)
            {
              v1488 = 0;
              v1489 = 0;
              v1490 = 0;
              v1491 = v78[19];
              v1492 = v230[19];
              v1493 = v77[19];
              v1494 = (uint64_t *)v78[3];
              v1495 = *v1494;
              v1496 = v1494[1];
              v1497 = (uint64_t *)v230[3];
              v1498 = *v1497;
              v1499 = v1497[1];
              v1500 = v79[1];
              v1501 = v1500;
              do
              {
                if (v1501)
                {
                  v1502 = 0;
                  v1503 = v1492 + 4 * v1489;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1504 = 0;
                      v1505 = *(_DWORD *)(v1491 + 4 * v1490);
                      v1506 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1493 + v1504) = *(_DWORD *)(v1503 + v1504) + v1505;
                        --v1506;
                        v1504 += 4;
                      }
                      while (v1506 > 1);
                      v1500 = v79[1];
                    }
                    v1490 += v1496;
                    v1489 += v1499;
                    v1493 += 4 * (int)v341;
                    ++v1502;
                    v1503 += 4 * v1499;
                  }
                  while (v1502 < v1500);
                  v1507 = v1500;
                  v1487 = *v79;
                  v1501 = v1500;
                }
                else
                {
                  v1507 = 0;
                }
                v1490 = v1490 + v1495 - v1507 * v1496;
                v1489 = v1489 + v1498 - v1499 * v231[1];
                ++v1488;
              }
              while (v1488 < v1487);
            }
          }
          else if (v84 == 1)
          {
            v1013 = *v79;
            if (*v79)
            {
              v1014 = 0;
              v1015 = 0;
              v1016 = v78[19];
              v1017 = v230[19];
              v1018 = v77[19];
              v1019 = *(_QWORD *)v78[3];
              v1020 = 4 * *(_QWORD *)v230[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v1021 = 0;
                  v1022 = *(_DWORD *)(v1016 + 4 * v1015);
                  v1023 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1018 + v1021) = *(_DWORD *)(v1017 + v1021) + v1022;
                    --v1023;
                    v1021 += 4;
                  }
                  while (v1023 > 1);
                  v1013 = *v79;
                }
                v1015 += v1019;
                ++v1014;
                v1018 += 4 * (int)v341;
                v1017 += v1020;
              }
              while (v1014 < v1013);
            }
          }
          else
          {
            v1905 = v77[6];
            if (v1905)
            {
              v1934 = 0;
              v1839 = v230[19];
              v1854 = v78[19];
              v1508 = v77[19];
              do
              {
                v1509 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1510 = v78[3];
                  v1511 = v81;
                  v1512 = v1934;
                  do
                  {
                    v1513 = ldiv(v1512, v79[v1511]);
                    v1512 = v1513.quot;
                    v1509 += *(_QWORD *)(v1510 + 8 * v1511--) * v1513.rem;
                  }
                  while (v1511 != -1);
                }
                v1514 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1515) = 0;
                }
                else
                {
                  v1515 = 0;
                  v1516 = v230[3];
                  v1517 = v1934;
                  do
                  {
                    v1518 = ldiv(v1517, v231[v1514]);
                    v1517 = v1518.quot;
                    v1515 += *(_QWORD *)(v1516 + 8 * v1514--) * v1518.rem;
                  }
                  while (v1514 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1519 = 0;
                  v1520 = *(_DWORD *)(v1854 + 4 * (int)v1509);
                  v1521 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1508 + v1519) = *(_DWORD *)(v1839 + 4 * (int)v1515 + v1519) + v1520;
                    --v1521;
                    v1519 += 4;
                  }
                  while (v1521 > 1);
                }
                v1508 += 4 * (int)v341;
                v1934 += (int)v341;
              }
              while (v1934 < v1905);
            }
          }
          break;
        case 2:
          if (v84 == 2)
          {
            v1522 = *v79;
            if (*v79)
            {
              v1523 = 0;
              v1524 = 0;
              v1525 = 0;
              v1526 = v78[19];
              v1527 = v230[19];
              v1528 = v77[19];
              v1529 = (uint64_t *)v78[3];
              v1530 = *v1529;
              v1531 = v1529[1];
              v1532 = (uint64_t *)v230[3];
              v1533 = *v1532;
              v1534 = v1532[1];
              v1535 = v79[1];
              v1536 = v1535;
              do
              {
                if (v1536)
                {
                  v1537 = 0;
                  v1538 = v1526 + 4 * v1525;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1539 = 0;
                      v1540 = *(_DWORD *)(v1527 + 4 * v1524);
                      v1541 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1528 + v1539) = *(_DWORD *)(v1538 + v1539) + v1540;
                        --v1541;
                        v1539 += 4;
                      }
                      while (v1541 > 1);
                      v1535 = v79[1];
                    }
                    v1525 += v1531;
                    v1524 += v1534;
                    v1528 += 4 * (int)v341;
                    ++v1537;
                    v1538 += 4 * v1531;
                  }
                  while (v1537 < v1535);
                  v1542 = v1535;
                  v1522 = *v79;
                  v1536 = v1535;
                }
                else
                {
                  v1542 = 0;
                }
                v1525 = v1525 + v1530 - v1542 * v1531;
                v1524 = v1524 + v1533 - v1534 * v231[1];
                ++v1523;
              }
              while (v1523 < v1522);
            }
          }
          else if (v84 == 1)
          {
            v1024 = *v79;
            if (*v79)
            {
              v1025 = 0;
              v1026 = 0;
              v1027 = v78[19];
              v1028 = v230[19];
              v1029 = v77[19];
              v1030 = *(_QWORD *)v230[3];
              v1031 = 4 * *(_QWORD *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v1032 = 0;
                  v1033 = *(_DWORD *)(v1028 + 4 * v1026);
                  v1034 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1029 + v1032) = *(_DWORD *)(v1027 + v1032) + v1033;
                    --v1034;
                    v1032 += 4;
                  }
                  while (v1034 > 1);
                  v1024 = *v79;
                }
                v1026 += v1030;
                ++v1025;
                v1029 += 4 * (int)v341;
                v1027 += v1031;
              }
              while (v1025 < v1024);
            }
          }
          else
          {
            v1906 = v77[6];
            if (v1906)
            {
              v1935 = 0;
              v1840 = v230[19];
              v1855 = v78[19];
              v1543 = v77[19];
              do
              {
                v1544 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1545 = v78[3];
                  v1546 = v81;
                  v1547 = v1935;
                  do
                  {
                    v1548 = ldiv(v1547, v79[v1546]);
                    v1547 = v1548.quot;
                    v1544 += *(_QWORD *)(v1545 + 8 * v1546--) * v1548.rem;
                  }
                  while (v1546 != -1);
                }
                v1549 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1550) = 0;
                }
                else
                {
                  v1550 = 0;
                  v1551 = v230[3];
                  v1552 = v1935;
                  do
                  {
                    v1553 = ldiv(v1552, v231[v1549]);
                    v1552 = v1553.quot;
                    v1550 += *(_QWORD *)(v1551 + 8 * v1549--) * v1553.rem;
                  }
                  while (v1549 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1554 = 0;
                  v1555 = *(_DWORD *)(v1840 + 4 * (int)v1550);
                  v1556 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1543 + v1554) = *(_DWORD *)(v1855 + 4 * (int)v1544 + v1554) + v1555;
                    --v1556;
                    v1554 += 4;
                  }
                  while (v1556 > 1);
                }
                v1543 += 4 * (int)v341;
                v1935 += (int)v341;
              }
              while (v1935 < v1906);
            }
          }
          break;
        case 3:
          if (v84 == 2)
          {
            v1185 = *v79;
            if (*v79)
            {
              v1186 = 0;
              v1187 = 0;
              v1188 = 0;
              v1189 = v78[19];
              v1190 = v230[19];
              v1191 = v77[19];
              v1192 = (uint64_t *)v78[3];
              v1193 = *v1192;
              v1194 = v1192[1];
              v1195 = (uint64_t *)v230[3];
              v1196 = *v1195;
              v1197 = v1195[1];
              v1198 = v79[1];
              v1199 = v1198;
              do
              {
                if (v1199)
                {
                  v1200 = 0;
                  v1201 = v1190 + 4 * v1187;
                  v1202 = v1189 + 4 * v1188;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1203 = 0;
                      v1204 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1191 + v1203) = *(_DWORD *)(v1201 + v1203) + *(_DWORD *)(v1202 + v1203);
                        --v1204;
                        v1203 += 4;
                      }
                      while (v1204 > 1);
                      v1198 = v79[1];
                    }
                    v1188 += v1194;
                    v1187 += v1197;
                    v1191 += 4 * (int)v341;
                    ++v1200;
                    v1201 += 4 * v1197;
                    v1202 += 4 * v1194;
                  }
                  while (v1200 < v1198);
                  v1205 = v1198;
                  v1185 = *v79;
                  v1199 = v1198;
                }
                else
                {
                  v1205 = 0;
                }
                v1188 = v1188 + v1193 - v1205 * v1194;
                v1187 = v1187 + v1196 - v1197 * v231[1];
                ++v1186;
              }
              while (v1186 < v1185);
            }
          }
          else if (v84 == 1)
          {
            v342 = *v79;
            if (*v79)
            {
              v343 = 0;
              v344 = v78[19];
              v345 = v230[19];
              v346 = v77[19];
              v347 = 4 * *(_QWORD *)v230[3];
              v348 = 4 * *(_QWORD *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v349 = 0;
                  v350 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v346 + v349) = *(_DWORD *)(v345 + v349) + *(_DWORD *)(v344 + v349);
                    --v350;
                    v349 += 4;
                  }
                  while (v350 > 1);
                  v342 = *v79;
                }
                ++v343;
                v346 += 4 * (int)v341;
                v345 += v347;
                v344 += v348;
              }
              while (v343 < v342);
            }
          }
          else
          {
            v1896 = v77[6];
            if (v1896)
            {
              v1925 = 0;
              v1835 = v230[19];
              v1848 = v78[19];
              v1206 = v77[19];
              do
              {
                v1207 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1208 = v78[3];
                  v1209 = v81;
                  v1210 = v1925;
                  do
                  {
                    v1211 = ldiv(v1210, v79[v1209]);
                    v1210 = v1211.quot;
                    v1207 += *(_QWORD *)(v1208 + 8 * v1209--) * v1211.rem;
                  }
                  while (v1209 != -1);
                }
                v1212 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1213) = 0;
                }
                else
                {
                  v1213 = 0;
                  v1214 = v230[3];
                  v1215 = v1925;
                  do
                  {
                    v1216 = ldiv(v1215, v231[v1212]);
                    v1215 = v1216.quot;
                    v1213 += *(_QWORD *)(v1214 + 8 * v1212--) * v1216.rem;
                  }
                  while (v1212 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1217 = 0;
                  v1218 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1206 + v1217) = *(_DWORD *)(v1835 + 4 * (int)v1213 + v1217)
                                               + *(_DWORD *)(v1848 + 4 * (int)v1207 + v1217);
                    --v1218;
                    v1217 += 4;
                  }
                  while (v1218 > 1);
                }
                v1206 += 4 * (int)v341;
                v1925 += (int)v341;
              }
              while (v1925 < v1896);
            }
          }
          break;
        default:
LABEL_372:
          switch(v337)
          {
            case 1uLL:
              v351 = v77[6];
              if (v351)
              {
                v352 = (_DWORD *)v78[19];
                v353 = (_DWORD *)v230[19];
                v354 = (_DWORD *)v77[19];
                v355 = 4 * *(_QWORD *)v230[3];
                v356 = 4 * *(_QWORD *)v78[3];
                do
                {
                  *v354++ = *v353 + *v352;
                  v353 = (_DWORD *)((char *)v353 + v355);
                  v352 = (_DWORD *)((char *)v352 + v356);
                  --v351;
                }
                while (v351);
              }
              break;
            case 2uLL:
              v594 = *v79;
              if (*v79)
              {
                v595 = 0;
                v596 = 0;
                v597 = 0;
                v598 = 0;
                v599 = v78[19];
                v600 = v230[19];
                v601 = v77[19];
                v602 = (uint64_t *)v78[3];
                v603 = *v602;
                v604 = v602[1];
                v605 = (uint64_t *)v230[3];
                v607 = *v605;
                v606 = v605[1];
                v608 = v79[1];
                do
                {
                  if (v608)
                  {
                    for (i = 0; i < v608; ++i)
                    {
                      *(_DWORD *)(v601 + 4 * v596 + 4 * i) = *(_DWORD *)(v600 + 4 * v597) + *(_DWORD *)(v599 + 4 * v598);
                      v598 += v604;
                      v597 += v606;
                      v608 = v79[1];
                    }
                    v610 = v608;
                    v594 = *v79;
                    v596 += i;
                  }
                  else
                  {
                    v610 = 0;
                  }
                  v598 = v598 + v603 - v610 * v604;
                  v597 = v597 + v607 - v606 * v231[1];
                  ++v595;
                }
                while (v595 < v594);
              }
              break;
            case 3uLL:
              v611 = *v79;
              if (*v79)
              {
                v612 = 0;
                v613 = 0;
                v614 = 0;
                v615 = 0;
                v616 = v78[19];
                v617 = v230[19];
                v618 = v77[19];
                v619 = (uint64_t *)v78[3];
                v620 = *v619;
                v621 = v619[1];
                v622 = (uint64_t *)v230[3];
                v623 = *v622;
                v624 = v622[1];
                v625 = v79[1];
                v626 = v625;
                do
                {
                  if (v626)
                  {
                    v627 = 0;
                    v628 = v619[2];
                    v629 = v622[2];
                    v630 = v79[2];
                    do
                    {
                      if (v630)
                      {
                        for (j = 0; j < v630; ++j)
                        {
                          *(_DWORD *)(v618 + 4 * v613 + 4 * j) = *(_DWORD *)(v617 + 4 * v614)
                                                               + *(_DWORD *)(v616 + 4 * v615);
                          v615 += v628;
                          v614 += v629;
                          v630 = v79[2];
                        }
                        v632 = v630;
                        v625 = v79[1];
                        v613 += j;
                      }
                      else
                      {
                        v632 = 0;
                      }
                      v615 = v615 + v621 - v632 * v628;
                      v614 = v614 + v624 - v629 * v231[2];
                      ++v627;
                    }
                    while (v627 < v625);
                    v633 = v625;
                    v611 = *v79;
                    v626 = v625;
                  }
                  else
                  {
                    v633 = 0;
                  }
                  v615 = v615 + v620 - v633 * v621;
                  v614 = v614 + v623 - v624 * v231[1];
                  ++v612;
                }
                while (v612 < v611);
              }
              break;
            case 4uLL:
              v634 = *v79;
              if (*v79)
              {
                v635 = 0;
                v636 = 0;
                v637 = 0;
                v638 = 0;
                v639 = v78[19];
                v640 = v230[19];
                v641 = v77[19];
                v642 = (uint64_t *)v78[3];
                v643 = *v642;
                v644 = v642[1];
                v645 = (uint64_t *)v230[3];
                v646 = *v645;
                v647 = v645[1];
                v648 = v79[1];
                v649 = v648;
                do
                {
                  if (v649)
                  {
                    v650 = 0;
                    v651 = v642[2];
                    v652 = v645[2];
                    v653 = v79[2];
                    v654 = v653;
                    do
                    {
                      if (v654)
                      {
                        v655 = 0;
                        v656 = v642[3];
                        v657 = v645[3];
                        v658 = v79[3];
                        do
                        {
                          if (v658)
                          {
                            for (k = 0; k < v658; ++k)
                            {
                              *(_DWORD *)(v641 + 4 * v636 + 4 * k) = *(_DWORD *)(v640 + 4 * v637)
                                                                   + *(_DWORD *)(v639 + 4 * v638);
                              v638 += v656;
                              v637 += v657;
                              v658 = v79[3];
                            }
                            v660 = v658;
                            v653 = v79[2];
                            v636 += k;
                          }
                          else
                          {
                            v660 = 0;
                          }
                          v638 = v638 + v651 - v660 * v656;
                          v637 = v637 + v652 - v657 * v231[3];
                          ++v655;
                        }
                        while (v655 < v653);
                        v661 = v653;
                        v648 = v79[1];
                        v654 = v653;
                      }
                      else
                      {
                        v661 = 0;
                      }
                      v638 = v638 + v644 - v661 * v651;
                      v637 = v637 + v647 - v652 * v231[2];
                      ++v650;
                    }
                    while (v650 < v648);
                    v662 = v648;
                    v634 = *v79;
                    v649 = v648;
                  }
                  else
                  {
                    v662 = 0;
                  }
                  v638 = v638 + v643 - v662 * v644;
                  v637 = v637 + v646 - v647 * v231[1];
                  ++v635;
                }
                while (v635 < v634);
              }
              break;
            default:
              v582 = v77[6];
              if (v582)
              {
                v583 = 0;
                v1888 = v230[19];
                v1917 = v78[19];
                v1875 = v77[19];
                do
                {
                  v584 = 0;
                  if ((v81 & 0x80000000) == 0)
                  {
                    v585 = v78[3];
                    v586 = v81;
                    v587 = v583;
                    do
                    {
                      v588 = ldiv(v587, v79[v586]);
                      v587 = v588.quot;
                      v584 += *(_QWORD *)(v585 + 8 * v586--) * v588.rem;
                    }
                    while (v586 != -1);
                  }
                  v589 = v1945;
                  if ((v1945 & 0x80000000) != 0)
                  {
                    LODWORD(v590) = 0;
                  }
                  else
                  {
                    v590 = 0;
                    v591 = v230[3];
                    v592 = v583;
                    do
                    {
                      v593 = ldiv(v592, v231[v589]);
                      v592 = v593.quot;
                      v590 += *(_QWORD *)(v591 + 8 * v589--) * v593.rem;
                    }
                    while (v589 != -1);
                  }
                  *(_DWORD *)(v1875 + 4 * v583++) = *(_DWORD *)(v1888 + 4 * (int)v590)
                                                  + *(_DWORD *)(v1917 + 4 * (int)v584);
                  v81 = v1962;
                }
                while (v583 != v582);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          v7 = **(_BYTE **)(*a2 + 152) + **(_BYTE **)(*a1 + 152);
LABEL_16:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          v108 = *(_DWORD *)(*a2 + 160);
          if (v108 >= 1)
          {
            v109 = **(_BYTE **)(*a1 + 152);
            v110 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v111 = *(char **)(*a2 + 152);
            v112 = v108 + 1;
            do
            {
              v113 = *v111++;
              *v110++ = v113 + v109;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        case 2:
          v114 = *(_DWORD *)(*a1 + 160);
          if (v114 >= 1)
          {
            v115 = **(_BYTE **)(*a2 + 152);
            v116 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v117 = *(char **)(*a1 + 152);
            v118 = v114 + 1;
            do
            {
              v119 = *v117++;
              *v116++ = v119 + v115;
              --v118;
            }
            while (v118 > 1);
          }
          return;
        case 3:
          v120 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v120 >= 1)
          {
            v121 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v122 = *(char **)(*a2 + 152);
            v123 = *(char **)(*a1 + 152);
            v124 = v120 + 1;
            do
            {
              v126 = *v123++;
              v125 = v126;
              v127 = *v122++;
              *v121++ = v127 + v125;
              --v124;
            }
            while (v124 > 1);
          }
          return;
        default:
          v100 = *(_QWORD **)a3;
          v101 = *a1;
          v102 = *(int **)*a1;
          v103 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v102) >> 2;
          v104 = v103 - 1;
          if ((int)v103 - 1 >= -1)
            v104 = -1;
          v105 = v104 + 1;
          v106 = v103 + 1;
          while (1)
          {
            v107 = v106 - 2;
            if (v106 - 2 < 0)
              break;
            --v106;
            if (*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v107) != *(_QWORD *)(v100[3] + 8 * v107))
              goto LABEL_170;
          }
          v106 = v105;
LABEL_170:
          v238 = (int **)*a2;
          v239 = *(int **)*a2;
          v240 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v239) >> 2;
          v241 = v240 - 1;
          if ((int)v240 - 1 >= -1)
            v241 = -1;
          v242 = v241 + 1;
          v243 = v240 + 1;
          while (1)
          {
            v244 = v243 - 2;
            if (v243 - 2 < 0)
              break;
            --v243;
            if (*(_QWORD *)&v238[3][2 * v244] != *(_QWORD *)(v100[3] + 8 * v244))
              goto LABEL_216;
          }
          v243 = v242;
LABEL_216:
          v275 = v103 + 1;
          while (1)
          {
            v276 = v275 - 2;
            if (v275 - 2 < 0)
              break;
            --v275;
            if (*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v276))
              goto LABEL_251;
          }
          v275 = v105;
LABEL_251:
          v289 = v240 + 1;
          while (1)
          {
            v290 = v289 - 2;
            if (v289 - 2 < 0)
              break;
            --v289;
            if (*(_QWORD *)&v238[3][2 * v290])
              goto LABEL_378;
          }
          v289 = v242;
LABEL_378:
          v357 = (uint64_t)(v100[1] - *v100) >> 2;
          if (v106 <= v243)
            v358 = v243;
          else
            v358 = v106;
          if (v106 <= v289)
            v106 = v289;
          if (v275 > v243)
            v243 = v275;
          if (v357 > v243)
          {
            v359 = 1;
          }
          else
          {
            v243 = (uint64_t)(v100[1] - *v100) >> 2;
            v359 = 4;
          }
          if (v357 > v106)
          {
            v360 = 2;
          }
          else
          {
            v106 = v243;
            v360 = v359;
          }
          if (v357 > v358)
          {
            v106 = v358;
            v360 = 3;
          }
          if (!v106)
            goto LABEL_408;
          v361 = *(_QWORD *)(v100[3] + 8 * (v106 - 1));
          if (v361 < 0x10)
            goto LABEL_408;
          v1963 = *(_QWORD *)(v100[3] + 8 * (v106 - 1));
          switch(v360)
          {
            case 1:
              if (v106 == 2)
              {
                v1557 = *v102;
                if (*v102)
                {
                  v1558 = 0;
                  v1559 = 0;
                  v1560 = 0;
                  v1561 = *(_QWORD *)(v101 + 152);
                  v1562 = v238[19];
                  v1563 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1564 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1565 = 0;
                          v1566 = *(_BYTE *)(v1561 + v1560);
                          v1567 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1563 + v1565) = *((_BYTE *)v1562 + v1559 + v1565) + v1566;
                            --v1567;
                            ++v1565;
                          }
                          while (v1567 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1568 = *(_QWORD **)(v101 + 24);
                        v1569 = v1568[1];
                        v1560 += v1569;
                        v1559 += *((_QWORD *)v238[3] + 1);
                        v1563 += (int)v361;
                        ++v1564;
                        v1570 = v102[1];
                      }
                      while (v1564 < v1570);
                      v1557 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1570 = 0;
                      v1568 = *(_QWORD **)(v101 + 24);
                      v1569 = v1568[1];
                    }
                    v1560 = *v1568 + v1560 - v1570 * v1569;
                    v1559 = *(_QWORD *)v238[3] + v1559 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1558;
                  }
                  while (v1558 < v1557);
                }
              }
              else if (v106 == 1)
              {
                v1035 = *v102;
                if (*v102)
                {
                  v1036 = 0;
                  v1037 = 0;
                  v1038 = 0;
                  v1039 = *(_QWORD *)(v101 + 152);
                  v1040 = v238[19];
                  v1041 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v1042 = 0;
                      v1043 = *(_BYTE *)(v1039 + v1038);
                      v1044 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v1041 + v1042) = *((_BYTE *)v1040 + v1037 + v1042) + v1043;
                        --v1044;
                        ++v1042;
                      }
                      while (v1044 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v1035 = **(_DWORD **)*a1;
                    }
                    v1038 += **(_QWORD **)(v101 + 24);
                    v1037 += *(_QWORD *)v238[3];
                    v1041 += (int)v361;
                    ++v1036;
                  }
                  while (v1036 < v1035);
                }
              }
              else if (v100[6])
              {
                v1884 = v238[19];
                v1907 = *(_QWORD *)(v101 + 152);
                v1936 = (int)v361;
                v1958 = 0;
                v1871 = v361 + 1;
                v1571 = v100[19];
                do
                {
                  v1572 = *(_QWORD *)*a1;
                  v1573 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1572) >> 2;
                  v1574 = 0;
                  v1575 = (v1573 - 1);
                  if ((int)v1573 - 1 >= 0)
                  {
                    v1576 = *(_QWORD *)(*a1 + 24);
                    v1577 = v1958;
                    do
                    {
                      v1578 = ldiv(v1577, *(int *)(v1572 + 4 * v1575));
                      v1577 = v1578.quot;
                      v1574 += *(_QWORD *)(v1576 + 8 * v1575--) * v1578.rem;
                    }
                    while (v1575 != -1);
                  }
                  v1579 = *(_QWORD *)*a2;
                  v1580 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1579) >> 2;
                  v1581 = 0;
                  v1582 = (v1580 - 1);
                  if ((int)v1580 - 1 >= 0)
                  {
                    v1583 = *(_QWORD *)(*a2 + 24);
                    v1584 = v1958;
                    do
                    {
                      v1585 = ldiv(v1584, *(int *)(v1579 + 4 * v1582));
                      v1584 = v1585.quot;
                      v1581 += *(_QWORD *)(v1583 + 8 * v1582--) * v1585.rem;
                    }
                    while (v1582 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1586 = 0;
                    v1587 = *(_BYTE *)(v1907 + (int)v1574);
                    v1588 = v1871;
                    do
                    {
                      *(_BYTE *)(v1571 + v1586) = *((_BYTE *)v1884 + (int)v1581 + v1586) + v1587;
                      --v1588;
                      ++v1586;
                    }
                    while (v1588 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1571 += v1936;
                  v1958 += v1936;
                }
                while (v1958 < v100[6]);
              }
              break;
            case 2:
              if (v106 == 2)
              {
                v1589 = *v102;
                if (*v102)
                {
                  v1590 = 0;
                  v1591 = 0;
                  v1592 = 0;
                  v1593 = *(_QWORD *)(v101 + 152);
                  v1594 = v238[19];
                  v1595 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1596 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1597 = 0;
                          v1598 = *((_BYTE *)v1594 + v1591);
                          v1599 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1595 + v1597) = *(_BYTE *)(v1593 + v1592 + v1597) + v1598;
                            --v1599;
                            ++v1597;
                          }
                          while (v1599 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1600 = *(_QWORD **)(v101 + 24);
                        v1601 = v1600[1];
                        v1592 += v1601;
                        v1591 += *((_QWORD *)v238[3] + 1);
                        v1595 += (int)v361;
                        ++v1596;
                        v1602 = v102[1];
                      }
                      while (v1596 < v1602);
                      v1589 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1602 = 0;
                      v1600 = *(_QWORD **)(v101 + 24);
                      v1601 = v1600[1];
                    }
                    v1592 = *v1600 + v1592 - v1602 * v1601;
                    v1591 = *(_QWORD *)v238[3] + v1591 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1590;
                  }
                  while (v1590 < v1589);
                }
              }
              else if (v106 == 1)
              {
                v1045 = *v102;
                if (*v102)
                {
                  v1046 = 0;
                  v1047 = 0;
                  v1048 = 0;
                  v1049 = *(_QWORD *)(v101 + 152);
                  v1050 = v238[19];
                  v1051 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v1052 = 0;
                      v1053 = *((_BYTE *)v1050 + v1047);
                      v1054 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v1051 + v1052) = *(_BYTE *)(v1049 + v1048 + v1052) + v1053;
                        --v1054;
                        ++v1052;
                      }
                      while (v1054 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v1045 = **(_DWORD **)*a1;
                    }
                    v1048 += **(_QWORD **)(v101 + 24);
                    v1047 += *(_QWORD *)v238[3];
                    v1051 += (int)v361;
                    ++v1046;
                  }
                  while (v1046 < v1045);
                }
              }
              else if (v100[6])
              {
                v1885 = v238[19];
                v1908 = *(_QWORD *)(v101 + 152);
                v1937 = (int)v361;
                v1959 = 0;
                v1872 = v361 + 1;
                v1603 = v100[19];
                do
                {
                  v1604 = *(_QWORD *)*a1;
                  v1605 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1604) >> 2;
                  v1606 = 0;
                  v1607 = (v1605 - 1);
                  if ((int)v1605 - 1 >= 0)
                  {
                    v1608 = *(_QWORD *)(*a1 + 24);
                    v1609 = v1959;
                    do
                    {
                      v1610 = ldiv(v1609, *(int *)(v1604 + 4 * v1607));
                      v1609 = v1610.quot;
                      v1606 += *(_QWORD *)(v1608 + 8 * v1607--) * v1610.rem;
                    }
                    while (v1607 != -1);
                  }
                  v1611 = *(_QWORD *)*a2;
                  v1612 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1611) >> 2;
                  v1613 = 0;
                  v1614 = (v1612 - 1);
                  if ((int)v1612 - 1 >= 0)
                  {
                    v1615 = *(_QWORD *)(*a2 + 24);
                    v1616 = v1959;
                    do
                    {
                      v1617 = ldiv(v1616, *(int *)(v1611 + 4 * v1614));
                      v1616 = v1617.quot;
                      v1613 += *(_QWORD *)(v1615 + 8 * v1614--) * v1617.rem;
                    }
                    while (v1614 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1618 = 0;
                    v1619 = *((_BYTE *)v1885 + (int)v1613);
                    v1620 = v1872;
                    do
                    {
                      *(_BYTE *)(v1603 + v1618) = *(_BYTE *)(v1908 + (int)v1606 + v1618) + v1619;
                      --v1620;
                      ++v1618;
                    }
                    while (v1620 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1603 += v1937;
                  v1959 += v1937;
                }
                while (v1959 < v100[6]);
              }
              break;
            case 3:
              if (v106 == 2)
              {
                v1219 = *v102;
                if (*v102)
                {
                  v1220 = 0;
                  v1221 = 0;
                  v1222 = 0;
                  v1223 = *(_QWORD *)(v101 + 152);
                  v1224 = v238[19];
                  v1225 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1226 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1227 = 0;
                          v1228 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1225 + v1227) = *((_BYTE *)v1224 + v1221 + v1227)
                                                      + *(_BYTE *)(v1223 + v1222 + v1227);
                            --v1228;
                            ++v1227;
                          }
                          while (v1228 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1229 = *(_QWORD **)(v101 + 24);
                        v1230 = v1229[1];
                        v1222 += v1230;
                        v1221 += *((_QWORD *)v238[3] + 1);
                        v1225 += (int)v361;
                        ++v1226;
                        v1231 = v102[1];
                      }
                      while (v1226 < v1231);
                      v1219 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1231 = 0;
                      v1229 = *(_QWORD **)(v101 + 24);
                      v1230 = v1229[1];
                    }
                    v1222 = *v1229 + v1222 - v1231 * v1230;
                    v1221 = *(_QWORD *)v238[3] + v1221 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1220;
                  }
                  while (v1220 < v1219);
                }
              }
              else if (v106 == 1)
              {
                v362 = *v102;
                if (*v102)
                {
                  v363 = 0;
                  v364 = 0;
                  v365 = 0;
                  v366 = *(_QWORD *)(v101 + 152);
                  v367 = v238[19];
                  v368 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v369 = 0;
                      v370 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v368 + v369) = *((_BYTE *)v367 + v364 + v369) + *(_BYTE *)(v366 + v365 + v369);
                        --v370;
                        ++v369;
                      }
                      while (v370 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v362 = **(_DWORD **)*a1;
                    }
                    v365 += **(_QWORD **)(v101 + 24);
                    v364 += *(_QWORD *)v238[3];
                    v368 += (int)v361;
                    ++v363;
                  }
                  while (v363 < v362);
                }
              }
              else if (v100[6])
              {
                v1881 = v238[19];
                v1897 = *(_QWORD *)(v101 + 152);
                v1926 = (int)v361;
                v1955 = 0;
                v1866 = v361 + 1;
                v1232 = v100[19];
                do
                {
                  v1233 = *(_QWORD *)*a1;
                  v1234 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1233) >> 2;
                  v1235 = 0;
                  v1236 = (v1234 - 1);
                  if ((int)v1234 - 1 >= 0)
                  {
                    v1237 = *(_QWORD *)(*a1 + 24);
                    v1238 = v1955;
                    do
                    {
                      v1239 = ldiv(v1238, *(int *)(v1233 + 4 * v1236));
                      v1238 = v1239.quot;
                      v1235 += *(_QWORD *)(v1237 + 8 * v1236--) * v1239.rem;
                    }
                    while (v1236 != -1);
                  }
                  v1240 = *(_QWORD *)*a2;
                  v1241 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1240) >> 2;
                  v1242 = 0;
                  v1243 = (v1241 - 1);
                  if ((int)v1241 - 1 >= 0)
                  {
                    v1244 = *(_QWORD *)(*a2 + 24);
                    v1245 = v1955;
                    do
                    {
                      v1246 = ldiv(v1245, *(int *)(v1240 + 4 * v1243));
                      v1245 = v1246.quot;
                      v1242 += *(_QWORD *)(v1244 + 8 * v1243--) * v1246.rem;
                    }
                    while (v1243 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1247 = 0;
                    v1248 = v1866;
                    do
                    {
                      *(_BYTE *)(v1232 + v1247) = *((_BYTE *)v1881 + (int)v1242 + v1247)
                                                + *(_BYTE *)(v1897 + (int)v1235 + v1247);
                      --v1248;
                      ++v1247;
                    }
                    while (v1248 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1232 += v1926;
                  v1955 += v1926;
                }
                while (v1955 < v100[6]);
              }
              break;
            default:
LABEL_408:
              switch(v357)
              {
                case 1uLL:
                  if (v100[6])
                  {
                    v371 = 0;
                    v372 = 0;
                    v373 = 0;
                    v374 = *(_QWORD *)(v101 + 152);
                    v375 = v238[19];
                    v376 = v100[19];
                    do
                    {
                      *(_BYTE *)(v376 + v371) = *((_BYTE *)v375 + v372) + *(_BYTE *)(v374 + v373);
                      v373 += **(_QWORD **)(*a1 + 24);
                      v372 += **(_QWORD **)(*a2 + 24);
                      ++v371;
                    }
                    while (v371 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  v679 = *v102;
                  if (*v102)
                  {
                    v680 = 0;
                    v681 = 0;
                    v682 = 0;
                    v683 = 0;
                    v684 = *(_QWORD *)(v101 + 152);
                    v685 = v238[19];
                    v686 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v687 = 0;
                        do
                        {
                          *(_BYTE *)(v686 + v681 + v687) = *((_BYTE *)v685 + v682) + *(_BYTE *)(v684 + v683);
                          v101 = *a1;
                          v688 = *(_QWORD **)(*a1 + 24);
                          v689 = v688[1];
                          v683 += v689;
                          v238 = (int **)*a2;
                          v690 = *(int **)(*a2 + 24);
                          v691 = *((_QWORD *)v690 + 1);
                          v682 += v691;
                          ++v687;
                          v102 = *(int **)*a1;
                          v692 = v102[1];
                        }
                        while (v687 < v692);
                        v679 = *v102;
                        v239 = *v238;
                        v681 += v687;
                      }
                      else
                      {
                        v692 = 0;
                        v688 = *(_QWORD **)(v101 + 24);
                        v689 = v688[1];
                        v690 = v238[3];
                        v691 = *((_QWORD *)v690 + 1);
                      }
                      v683 = *v688 + v683 - v692 * v689;
                      v682 = *(_QWORD *)v690 + v682 - v691 * v239[1];
                      ++v680;
                    }
                    while (v680 < v679);
                  }
                  break;
                case 3uLL:
                  v693 = *v102;
                  if (*v102)
                  {
                    v694 = 0;
                    v695 = 0;
                    v696 = 0;
                    v697 = 0;
                    v698 = *(_QWORD *)(v101 + 152);
                    v699 = v238[19];
                    v700 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v701 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            v702 = 0;
                            do
                            {
                              *(_BYTE *)(v700 + v695 + v702) = *((_BYTE *)v699 + v696) + *(_BYTE *)(v698 + v697);
                              v101 = *a1;
                              v703 = *(_QWORD **)(*a1 + 24);
                              v704 = v703[2];
                              v697 += v704;
                              v238 = (int **)*a2;
                              v705 = *(int **)(*a2 + 24);
                              v706 = *((_QWORD *)v705 + 2);
                              v696 += v706;
                              ++v702;
                              v102 = *(int **)*a1;
                              v707 = v102[2];
                            }
                            while (v702 < v707);
                            v239 = *v238;
                            v695 += v702;
                          }
                          else
                          {
                            v707 = 0;
                            v703 = *(_QWORD **)(v101 + 24);
                            v704 = v703[2];
                            v705 = v238[3];
                            v706 = *((_QWORD *)v705 + 2);
                          }
                          v708 = v703[1];
                          v697 = v708 + v697 - v707 * v704;
                          v696 = *((_QWORD *)v705 + 1) + v696 - v706 * v239[2];
                          ++v701;
                          v709 = v102[1];
                        }
                        while (v701 < v709);
                        v693 = *v102;
                      }
                      else
                      {
                        v709 = 0;
                        v703 = *(_QWORD **)(v101 + 24);
                        v708 = v703[1];
                      }
                      v697 = *v703 + v697 - v709 * v708;
                      v696 = *(_QWORD *)v238[3] + v696 - *((_QWORD *)v238[3] + 1) * v239[1];
                      ++v694;
                    }
                    while (v694 < v693);
                  }
                  break;
                case 4uLL:
                  v710 = *v102;
                  if (*v102)
                  {
                    v711 = 0;
                    v712 = 0;
                    v713 = 0;
                    v714 = 0;
                    v715 = *(_QWORD *)(v101 + 152);
                    v716 = v238[19];
                    v717 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v718 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            v719 = 0;
                            do
                            {
                              if (v102[3])
                              {
                                v720 = 0;
                                do
                                {
                                  *(_BYTE *)(v717 + v712 + v720) = *((_BYTE *)v716 + v713) + *(_BYTE *)(v715 + v714);
                                  v101 = *a1;
                                  v721 = *(_QWORD **)(*a1 + 24);
                                  v722 = v721[3];
                                  v714 += v722;
                                  v238 = (int **)*a2;
                                  v723 = *(int **)(*a2 + 24);
                                  v724 = *((_QWORD *)v723 + 3);
                                  v713 += v724;
                                  ++v720;
                                  v102 = *(int **)*a1;
                                  v725 = v102[3];
                                }
                                while (v720 < v725);
                                v239 = *v238;
                                v712 += v720;
                              }
                              else
                              {
                                v725 = 0;
                                v721 = *(_QWORD **)(v101 + 24);
                                v722 = v721[3];
                                v723 = v238[3];
                                v724 = *((_QWORD *)v723 + 3);
                              }
                              v726 = v721[2];
                              v714 = v726 + v714 - v725 * v722;
                              v713 = *((_QWORD *)v723 + 2) + v713 - v724 * v239[3];
                              ++v719;
                              v727 = v102[2];
                            }
                            while (v719 < v727);
                          }
                          else
                          {
                            v727 = 0;
                            v721 = *(_QWORD **)(v101 + 24);
                            v726 = v721[2];
                          }
                          v714 = v721[1] + v714 - v727 * v726;
                          v713 = *((_QWORD *)v238[3] + 1) + v713 - *((_QWORD *)v238[3] + 2) * v239[2];
                          ++v718;
                          v728 = v102[1];
                        }
                        while (v718 < v728);
                        v710 = *v102;
                      }
                      else
                      {
                        v728 = 0;
                      }
                      v714 = **(_QWORD **)(v101 + 24) + v714 - *(_QWORD *)(*(_QWORD *)(v101 + 24) + 8) * v728;
                      v713 = *(_QWORD *)v238[3] + v713 - *((_QWORD *)v238[3] + 1) * v239[1];
                      ++v711;
                    }
                    while (v711 < v710);
                  }
                  break;
                default:
                  if (v100[6])
                  {
                    v663 = 0;
                    v1951 = v238[19];
                    v1969 = *(_QWORD *)(v101 + 152);
                    v664 = v100[19];
                    do
                    {
                      v665 = *(_QWORD *)*a1;
                      v666 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v665) >> 2;
                      v667 = 0;
                      v668 = (v666 - 1);
                      if ((int)v666 - 1 >= 0)
                      {
                        v669 = *(_QWORD *)(*a1 + 24);
                        v670 = v663;
                        do
                        {
                          v671 = ldiv(v670, *(int *)(v665 + 4 * v668));
                          v670 = v671.quot;
                          v667 += *(_QWORD *)(v669 + 8 * v668--) * v671.rem;
                        }
                        while (v668 != -1);
                      }
                      v672 = *(_QWORD *)*a2;
                      v673 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v672) >> 2;
                      v674 = 0;
                      v675 = (v673 - 1);
                      if ((int)v673 - 1 >= 0)
                      {
                        v676 = *(_QWORD *)(*a2 + 24);
                        v677 = v663;
                        do
                        {
                          v678 = ldiv(v677, *(int *)(v672 + 4 * v675));
                          v677 = v678.quot;
                          v674 += *(_QWORD *)(v676 + 8 * v675--) * v678.rem;
                        }
                        while (v675 != -1);
                      }
                      *(_BYTE *)(v664 + v663++) = *((_BYTE *)v1951 + (int)v674) + *(_BYTE *)(v1969 + (int)v667);
                    }
                    while (v663 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a2 + 152) + **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          v137 = *(_DWORD *)(*a2 + 160);
          if (v137 >= 1)
          {
            v138 = **(_DWORD **)(*a1 + 152);
            v139 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v140 = *(int **)(*a2 + 152);
            v141 = v137 + 1;
            do
            {
              v142 = *v140++;
              *v139++ = v142 + v138;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        case 2:
          v143 = *(_DWORD *)(*a1 + 160);
          if (v143 >= 1)
          {
            v144 = **(_DWORD **)(*a2 + 152);
            v145 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v146 = *(int **)(*a1 + 152);
            v147 = v143 + 1;
            do
            {
              v148 = *v146++;
              *v145++ = v148 + v144;
              --v147;
            }
            while (v147 > 1);
          }
          return;
        case 3:
          v149 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v149 >= 1)
          {
            v150 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v151 = *(int **)(*a2 + 152);
            v152 = *(int **)(*a1 + 152);
            v153 = v149 + 1;
            do
            {
              v155 = *v152++;
              v154 = v155;
              v156 = *v151++;
              *v150++ = v156 + v154;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        default:
          v128 = *(_QWORD **)a3;
          v129 = (_QWORD *)*a1;
          v130 = *(int **)*a1;
          v131 = (v129[1] - (_QWORD)v130) >> 2;
          v132 = (v131 - 1);
          if ((int)v132 >= -1)
            v133 = -1;
          else
            v133 = v131 - 1;
          v134 = v133 + 1;
          v135 = v131 + 1;
          while (1)
          {
            v136 = v135 - 2;
            if (v135 - 2 < 0)
              break;
            --v135;
            if (*(_QWORD *)(v129[3] + 8 * v136) != *(_QWORD *)(v128[3] + 8 * v136))
              goto LABEL_177;
          }
          v135 = v134;
LABEL_177:
          v245 = (_QWORD *)*a2;
          v246 = *(int **)*a2;
          v247 = (v245[1] - (_QWORD)v246) >> 2;
          v248 = (v247 - 1);
          if ((int)v248 >= -1)
            v249 = -1;
          else
            v249 = v247 - 1;
          v250 = v249 + 1;
          v251 = v247 + 1;
          while (1)
          {
            v252 = v251 - 2;
            if (v251 - 2 < 0)
              break;
            --v251;
            if (*(_QWORD *)(v245[3] + 8 * v252) != *(_QWORD *)(v128[3] + 8 * v252))
              goto LABEL_221;
          }
          v251 = v250;
LABEL_221:
          v277 = v131 + 1;
          while (1)
          {
            v278 = v277 - 2;
            if (v277 - 2 < 0)
              break;
            --v277;
            if (*(_QWORD *)(v129[3] + 8 * v278))
              goto LABEL_256;
          }
          v277 = v134;
LABEL_256:
          v291 = v247 + 1;
          while (1)
          {
            v292 = v291 - 2;
            if (v291 - 2 < 0)
              break;
            --v291;
            if (*(_QWORD *)(v245[3] + 8 * v292))
              goto LABEL_414;
          }
          v291 = v250;
LABEL_414:
          v377 = (uint64_t)(v128[1] - *v128) >> 2;
          if (v135 <= v251)
            v378 = v251;
          else
            v378 = v135;
          if (v135 <= v291)
            v135 = v291;
          if (v277 > v251)
            v251 = v277;
          if (v377 > v251)
          {
            v379 = 1;
          }
          else
          {
            v251 = (uint64_t)(v128[1] - *v128) >> 2;
            v379 = 4;
          }
          if (v377 > v135)
          {
            v380 = 2;
          }
          else
          {
            v135 = v251;
            v380 = v379;
          }
          if (v377 > v378)
          {
            v135 = v378;
            v380 = 3;
          }
          v1946 = v248;
          v1964 = v132;
          if (!v135)
            goto LABEL_444;
          v381 = *(_QWORD *)(v128[3] + 8 * (v135 - 1));
          if (v381 < 0x10)
            goto LABEL_444;
          switch(v380)
          {
            case 1:
              if (v135 == 2)
              {
                v1621 = *v130;
                if (*v130)
                {
                  v1622 = 0;
                  v1623 = 0;
                  v1624 = 0;
                  v1625 = v129[19];
                  v1626 = v245[19];
                  v1627 = v128[19];
                  v1628 = (uint64_t *)v129[3];
                  v1629 = *v1628;
                  v1630 = v1628[1];
                  v1631 = (uint64_t *)v245[3];
                  v1632 = *v1631;
                  v1633 = v1631[1];
                  v1634 = v130[1];
                  v1635 = v1634;
                  do
                  {
                    if (v1635)
                    {
                      v1636 = 0;
                      v1637 = v1626 + 4 * v1623;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1638 = 0;
                          v1639 = *(_DWORD *)(v1625 + 4 * v1624);
                          v1640 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1627 + v1638) = *(_DWORD *)(v1637 + v1638) + v1639;
                            --v1640;
                            v1638 += 4;
                          }
                          while (v1640 > 1);
                          v1634 = v130[1];
                        }
                        v1624 += v1630;
                        v1623 += v1633;
                        v1627 += 4 * (int)v381;
                        ++v1636;
                        v1637 += 4 * v1633;
                      }
                      while (v1636 < v1634);
                      v1641 = v1634;
                      v1621 = *v130;
                      v1635 = v1634;
                    }
                    else
                    {
                      v1641 = 0;
                    }
                    v1624 = v1624 + v1629 - v1641 * v1630;
                    v1623 = v1623 + v1632 - v1633 * v246[1];
                    ++v1622;
                  }
                  while (v1622 < v1621);
                }
              }
              else if (v135 == 1)
              {
                v1055 = *v130;
                if (*v130)
                {
                  v1056 = 0;
                  v1057 = 0;
                  v1058 = v129[19];
                  v1059 = v245[19];
                  v1060 = v128[19];
                  v1061 = *(_QWORD *)v129[3];
                  v1062 = 4 * *(_QWORD *)v245[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v1063 = 0;
                      v1064 = *(_DWORD *)(v1058 + 4 * v1057);
                      v1065 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1060 + v1063) = *(_DWORD *)(v1059 + v1063) + v1064;
                        --v1065;
                        v1063 += 4;
                      }
                      while (v1065 > 1);
                      v1055 = *v130;
                    }
                    v1057 += v1061;
                    ++v1056;
                    v1060 += 4 * (int)v381;
                    v1059 += v1062;
                  }
                  while (v1056 < v1055);
                }
              }
              else
              {
                v1909 = v128[6];
                if (v1909)
                {
                  v1938 = 0;
                  v1841 = v245[19];
                  v1856 = v129[19];
                  v1642 = v128[19];
                  do
                  {
                    v1643 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1644 = v129[3];
                      v1645 = v132;
                      v1646 = v1938;
                      do
                      {
                        v1647 = ldiv(v1646, v130[v1645]);
                        v1646 = v1647.quot;
                        v1643 += *(_QWORD *)(v1644 + 8 * v1645--) * v1647.rem;
                      }
                      while (v1645 != -1);
                    }
                    v1648 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1649) = 0;
                    }
                    else
                    {
                      v1649 = 0;
                      v1650 = v245[3];
                      v1651 = v1938;
                      do
                      {
                        v1652 = ldiv(v1651, v246[v1648]);
                        v1651 = v1652.quot;
                        v1649 += *(_QWORD *)(v1650 + 8 * v1648--) * v1652.rem;
                      }
                      while (v1648 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1653 = 0;
                      v1654 = *(_DWORD *)(v1856 + 4 * (int)v1643);
                      v1655 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1642 + v1653) = *(_DWORD *)(v1841 + 4 * (int)v1649 + v1653) + v1654;
                        --v1655;
                        v1653 += 4;
                      }
                      while (v1655 > 1);
                    }
                    v1642 += 4 * (int)v381;
                    v1938 += (int)v381;
                  }
                  while (v1938 < v1909);
                }
              }
              break;
            case 2:
              if (v135 == 2)
              {
                v1656 = *v130;
                if (*v130)
                {
                  v1657 = 0;
                  v1658 = 0;
                  v1659 = 0;
                  v1660 = v129[19];
                  v1661 = v245[19];
                  v1662 = v128[19];
                  v1663 = (uint64_t *)v129[3];
                  v1664 = *v1663;
                  v1665 = v1663[1];
                  v1666 = (uint64_t *)v245[3];
                  v1667 = *v1666;
                  v1668 = v1666[1];
                  v1669 = v130[1];
                  v1670 = v1669;
                  do
                  {
                    if (v1670)
                    {
                      v1671 = 0;
                      v1672 = v1660 + 4 * v1659;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1673 = 0;
                          v1674 = *(_DWORD *)(v1661 + 4 * v1658);
                          v1675 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1662 + v1673) = *(_DWORD *)(v1672 + v1673) + v1674;
                            --v1675;
                            v1673 += 4;
                          }
                          while (v1675 > 1);
                          v1669 = v130[1];
                        }
                        v1659 += v1665;
                        v1658 += v1668;
                        v1662 += 4 * (int)v381;
                        ++v1671;
                        v1672 += 4 * v1665;
                      }
                      while (v1671 < v1669);
                      v1676 = v1669;
                      v1656 = *v130;
                      v1670 = v1669;
                    }
                    else
                    {
                      v1676 = 0;
                    }
                    v1659 = v1659 + v1664 - v1676 * v1665;
                    v1658 = v1658 + v1667 - v1668 * v246[1];
                    ++v1657;
                  }
                  while (v1657 < v1656);
                }
              }
              else if (v135 == 1)
              {
                v1066 = *v130;
                if (*v130)
                {
                  v1067 = 0;
                  v1068 = 0;
                  v1069 = v129[19];
                  v1070 = v245[19];
                  v1071 = v128[19];
                  v1072 = *(_QWORD *)v245[3];
                  v1073 = 4 * *(_QWORD *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v1074 = 0;
                      v1075 = *(_DWORD *)(v1070 + 4 * v1068);
                      v1076 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1071 + v1074) = *(_DWORD *)(v1069 + v1074) + v1075;
                        --v1076;
                        v1074 += 4;
                      }
                      while (v1076 > 1);
                      v1066 = *v130;
                    }
                    v1068 += v1072;
                    ++v1067;
                    v1071 += 4 * (int)v381;
                    v1069 += v1073;
                  }
                  while (v1067 < v1066);
                }
              }
              else
              {
                v1910 = v128[6];
                if (v1910)
                {
                  v1939 = 0;
                  v1842 = v245[19];
                  v1857 = v129[19];
                  v1677 = v128[19];
                  do
                  {
                    v1678 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1679 = v129[3];
                      v1680 = v132;
                      v1681 = v1939;
                      do
                      {
                        v1682 = ldiv(v1681, v130[v1680]);
                        v1681 = v1682.quot;
                        v1678 += *(_QWORD *)(v1679 + 8 * v1680--) * v1682.rem;
                      }
                      while (v1680 != -1);
                    }
                    v1683 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1684) = 0;
                    }
                    else
                    {
                      v1684 = 0;
                      v1685 = v245[3];
                      v1686 = v1939;
                      do
                      {
                        v1687 = ldiv(v1686, v246[v1683]);
                        v1686 = v1687.quot;
                        v1684 += *(_QWORD *)(v1685 + 8 * v1683--) * v1687.rem;
                      }
                      while (v1683 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1688 = 0;
                      v1689 = *(_DWORD *)(v1842 + 4 * (int)v1684);
                      v1690 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1677 + v1688) = *(_DWORD *)(v1857 + 4 * (int)v1678 + v1688) + v1689;
                        --v1690;
                        v1688 += 4;
                      }
                      while (v1690 > 1);
                    }
                    v1677 += 4 * (int)v381;
                    v1939 += (int)v381;
                  }
                  while (v1939 < v1910);
                }
              }
              break;
            case 3:
              if (v135 == 2)
              {
                v1249 = *v130;
                if (*v130)
                {
                  v1250 = 0;
                  v1251 = 0;
                  v1252 = 0;
                  v1253 = v129[19];
                  v1254 = v245[19];
                  v1255 = v128[19];
                  v1256 = (uint64_t *)v129[3];
                  v1257 = *v1256;
                  v1258 = v1256[1];
                  v1259 = (uint64_t *)v245[3];
                  v1260 = *v1259;
                  v1261 = v1259[1];
                  v1262 = v130[1];
                  v1263 = v1262;
                  do
                  {
                    if (v1263)
                    {
                      v1264 = 0;
                      v1265 = v1254 + 4 * v1251;
                      v1266 = v1253 + 4 * v1252;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1267 = 0;
                          v1268 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1255 + v1267) = *(_DWORD *)(v1265 + v1267) + *(_DWORD *)(v1266 + v1267);
                            --v1268;
                            v1267 += 4;
                          }
                          while (v1268 > 1);
                          v1262 = v130[1];
                        }
                        v1252 += v1258;
                        v1251 += v1261;
                        v1255 += 4 * (int)v381;
                        ++v1264;
                        v1265 += 4 * v1261;
                        v1266 += 4 * v1258;
                      }
                      while (v1264 < v1262);
                      v1269 = v1262;
                      v1249 = *v130;
                      v1263 = v1262;
                    }
                    else
                    {
                      v1269 = 0;
                    }
                    v1252 = v1252 + v1257 - v1269 * v1258;
                    v1251 = v1251 + v1260 - v1261 * v246[1];
                    ++v1250;
                  }
                  while (v1250 < v1249);
                }
              }
              else if (v135 == 1)
              {
                v382 = *v130;
                if (*v130)
                {
                  v383 = 0;
                  v384 = v129[19];
                  v385 = v245[19];
                  v386 = v128[19];
                  v387 = 4 * *(_QWORD *)v245[3];
                  v388 = 4 * *(_QWORD *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v389 = 0;
                      v390 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v386 + v389) = *(_DWORD *)(v385 + v389) + *(_DWORD *)(v384 + v389);
                        --v390;
                        v389 += 4;
                      }
                      while (v390 > 1);
                      v382 = *v130;
                    }
                    ++v383;
                    v386 += 4 * (int)v381;
                    v385 += v387;
                    v384 += v388;
                  }
                  while (v383 < v382);
                }
              }
              else
              {
                v1898 = v128[6];
                if (v1898)
                {
                  v1927 = 0;
                  v1836 = v245[19];
                  v1849 = v129[19];
                  v1270 = v128[19];
                  do
                  {
                    v1271 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1272 = v129[3];
                      v1273 = v132;
                      v1274 = v1927;
                      do
                      {
                        v1275 = ldiv(v1274, v130[v1273]);
                        v1274 = v1275.quot;
                        v1271 += *(_QWORD *)(v1272 + 8 * v1273--) * v1275.rem;
                      }
                      while (v1273 != -1);
                    }
                    v1276 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1277) = 0;
                    }
                    else
                    {
                      v1277 = 0;
                      v1278 = v245[3];
                      v1279 = v1927;
                      do
                      {
                        v1280 = ldiv(v1279, v246[v1276]);
                        v1279 = v1280.quot;
                        v1277 += *(_QWORD *)(v1278 + 8 * v1276--) * v1280.rem;
                      }
                      while (v1276 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1281 = 0;
                      v1282 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1270 + v1281) = *(_DWORD *)(v1836 + 4 * (int)v1277 + v1281)
                                                   + *(_DWORD *)(v1849 + 4 * (int)v1271 + v1281);
                        --v1282;
                        v1281 += 4;
                      }
                      while (v1282 > 1);
                    }
                    v1270 += 4 * (int)v381;
                    v1927 += (int)v381;
                  }
                  while (v1927 < v1898);
                }
              }
              break;
            default:
LABEL_444:
              switch(v377)
              {
                case 1uLL:
                  v391 = v128[6];
                  if (v391)
                  {
                    v392 = (_DWORD *)v129[19];
                    v393 = (_DWORD *)v245[19];
                    v394 = (_DWORD *)v128[19];
                    v395 = 4 * *(_QWORD *)v245[3];
                    v396 = 4 * *(_QWORD *)v129[3];
                    do
                    {
                      *v394++ = *v393 + *v392;
                      v393 = (_DWORD *)((char *)v393 + v395);
                      v392 = (_DWORD *)((char *)v392 + v396);
                      --v391;
                    }
                    while (v391);
                  }
                  break;
                case 2uLL:
                  v741 = *v130;
                  if (*v130)
                  {
                    v742 = 0;
                    v743 = 0;
                    v744 = 0;
                    v745 = 0;
                    v746 = v129[19];
                    v747 = v245[19];
                    v748 = v128[19];
                    v749 = (uint64_t *)v129[3];
                    v750 = *v749;
                    v751 = v749[1];
                    v752 = (uint64_t *)v245[3];
                    v754 = *v752;
                    v753 = v752[1];
                    v755 = v130[1];
                    do
                    {
                      if (v755)
                      {
                        for (m = 0; m < v755; ++m)
                        {
                          *(_DWORD *)(v748 + 4 * v743 + 4 * m) = *(_DWORD *)(v747 + 4 * v744)
                                                               + *(_DWORD *)(v746 + 4 * v745);
                          v745 += v751;
                          v744 += v753;
                          v755 = v130[1];
                        }
                        v757 = v755;
                        v741 = *v130;
                        v743 += m;
                      }
                      else
                      {
                        v757 = 0;
                      }
                      v745 = v745 + v750 - v757 * v751;
                      v744 = v744 + v754 - v753 * v246[1];
                      ++v742;
                    }
                    while (v742 < v741);
                  }
                  break;
                case 3uLL:
                  v758 = *v130;
                  if (*v130)
                  {
                    v759 = 0;
                    v760 = 0;
                    v761 = 0;
                    v762 = 0;
                    v763 = v129[19];
                    v764 = v245[19];
                    v765 = v128[19];
                    v766 = (uint64_t *)v129[3];
                    v767 = *v766;
                    v768 = v766[1];
                    v769 = (uint64_t *)v245[3];
                    v770 = *v769;
                    v771 = v769[1];
                    v772 = v130[1];
                    v773 = v772;
                    do
                    {
                      if (v773)
                      {
                        v774 = 0;
                        v775 = v766[2];
                        v776 = v769[2];
                        v777 = v130[2];
                        do
                        {
                          if (v777)
                          {
                            for (n = 0; n < v777; ++n)
                            {
                              *(_DWORD *)(v765 + 4 * v760 + 4 * n) = *(_DWORD *)(v764 + 4 * v761)
                                                                   + *(_DWORD *)(v763 + 4 * v762);
                              v762 += v775;
                              v761 += v776;
                              v777 = v130[2];
                            }
                            v779 = v777;
                            v772 = v130[1];
                            v760 += n;
                          }
                          else
                          {
                            v779 = 0;
                          }
                          v762 = v762 + v768 - v779 * v775;
                          v761 = v761 + v771 - v776 * v246[2];
                          ++v774;
                        }
                        while (v774 < v772);
                        v780 = v772;
                        v758 = *v130;
                        v773 = v772;
                      }
                      else
                      {
                        v780 = 0;
                      }
                      v762 = v762 + v767 - v780 * v768;
                      v761 = v761 + v770 - v771 * v246[1];
                      ++v759;
                    }
                    while (v759 < v758);
                  }
                  break;
                case 4uLL:
                  v781 = *v130;
                  if (*v130)
                  {
                    v782 = 0;
                    v783 = 0;
                    v784 = 0;
                    v785 = 0;
                    v786 = v129[19];
                    v787 = v245[19];
                    v788 = v128[19];
                    v789 = (uint64_t *)v129[3];
                    v790 = *v789;
                    v791 = v789[1];
                    v792 = (uint64_t *)v245[3];
                    v793 = *v792;
                    v794 = v792[1];
                    v795 = v130[1];
                    v796 = v795;
                    do
                    {
                      if (v796)
                      {
                        v797 = 0;
                        v798 = v789[2];
                        v799 = v792[2];
                        v800 = v130[2];
                        v801 = v800;
                        do
                        {
                          if (v801)
                          {
                            v802 = 0;
                            v803 = v789[3];
                            v804 = v792[3];
                            v805 = v130[3];
                            do
                            {
                              if (v805)
                              {
                                for (ii = 0; ii < v805; ++ii)
                                {
                                  *(_DWORD *)(v788 + 4 * v783 + 4 * ii) = *(_DWORD *)(v787 + 4 * v784)
                                                                        + *(_DWORD *)(v786 + 4 * v785);
                                  v785 += v803;
                                  v784 += v804;
                                  v805 = v130[3];
                                }
                                v807 = v805;
                                v800 = v130[2];
                                v783 += ii;
                              }
                              else
                              {
                                v807 = 0;
                              }
                              v785 = v785 + v798 - v807 * v803;
                              v784 = v784 + v799 - v804 * v246[3];
                              ++v802;
                            }
                            while (v802 < v800);
                            v808 = v800;
                            v795 = v130[1];
                            v801 = v800;
                          }
                          else
                          {
                            v808 = 0;
                          }
                          v785 = v785 + v791 - v808 * v798;
                          v784 = v784 + v794 - v799 * v246[2];
                          ++v797;
                        }
                        while (v797 < v795);
                        v809 = v795;
                        v781 = *v130;
                        v796 = v795;
                      }
                      else
                      {
                        v809 = 0;
                      }
                      v785 = v785 + v790 - v809 * v791;
                      v784 = v784 + v793 - v794 * v246[1];
                      ++v782;
                    }
                    while (v782 < v781);
                  }
                  break;
                default:
                  v729 = v128[6];
                  if (v729)
                  {
                    v730 = 0;
                    v1889 = v245[19];
                    v1918 = v129[19];
                    v1876 = v128[19];
                    do
                    {
                      v731 = 0;
                      if ((v132 & 0x80000000) == 0)
                      {
                        v732 = v129[3];
                        v733 = v132;
                        v734 = v730;
                        do
                        {
                          v735 = ldiv(v734, v130[v733]);
                          v734 = v735.quot;
                          v731 += *(_QWORD *)(v732 + 8 * v733--) * v735.rem;
                        }
                        while (v733 != -1);
                      }
                      v736 = v1946;
                      if ((v1946 & 0x80000000) != 0)
                      {
                        LODWORD(v737) = 0;
                      }
                      else
                      {
                        v737 = 0;
                        v738 = v245[3];
                        v739 = v730;
                        do
                        {
                          v740 = ldiv(v739, v246[v736]);
                          v739 = v740.quot;
                          v737 += *(_QWORD *)(v738 + 8 * v736--) * v740.rem;
                        }
                        while (v736 != -1);
                      }
                      *(_DWORD *)(v1876 + 4 * v730++) = *(_DWORD *)(v1889 + 4 * (int)v737)
                                                      + *(_DWORD *)(v1918 + 4 * (int)v731);
                      v132 = v1964;
                    }
                    while (v730 != v729);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v24)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a2 + 152) + **(_QWORD **)(*a1 + 152);
          return;
        case 1:
          v166 = *(_DWORD *)(*a2 + 160);
          if (v166 >= 1)
          {
            v167 = **(_QWORD **)(*a1 + 152);
            v168 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v169 = *(uint64_t **)(*a2 + 152);
            v170 = v166 + 1;
            do
            {
              v171 = *v169++;
              *v168++ = v171 + v167;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 2:
          v172 = *(_DWORD *)(*a1 + 160);
          if (v172 >= 1)
          {
            v173 = **(_QWORD **)(*a2 + 152);
            v174 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v175 = *(uint64_t **)(*a1 + 152);
            v176 = v172 + 1;
            do
            {
              v177 = *v175++;
              *v174++ = v177 + v173;
              --v176;
            }
            while (v176 > 1);
          }
          return;
        case 3:
          v178 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v178 >= 1)
          {
            v179 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v180 = *(uint64_t **)(*a2 + 152);
            v181 = *(uint64_t **)(*a1 + 152);
            v182 = v178 + 1;
            do
            {
              v184 = *v181++;
              v183 = v184;
              v185 = *v180++;
              *v179++ = v185 + v183;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        default:
          v157 = *(_QWORD **)a3;
          v158 = (_QWORD *)*a1;
          v159 = *(int **)*a1;
          v160 = (v158[1] - (_QWORD)v159) >> 2;
          v161 = (v160 - 1);
          if ((int)v161 >= -1)
            v162 = -1;
          else
            v162 = v160 - 1;
          v163 = v162 + 1;
          v164 = v160 + 1;
          while (1)
          {
            v165 = v164 - 2;
            if (v164 - 2 < 0)
              break;
            --v164;
            if (*(_QWORD *)(v158[3] + 8 * v165) != *(_QWORD *)(v157[3] + 8 * v165))
              goto LABEL_185;
          }
          v164 = v163;
LABEL_185:
          v253 = (_QWORD *)*a2;
          v254 = *(int **)*a2;
          v255 = (v253[1] - (_QWORD)v254) >> 2;
          v256 = (v255 - 1);
          if ((int)v256 >= -1)
            v257 = -1;
          else
            v257 = v255 - 1;
          v258 = v257 + 1;
          v259 = v255 + 1;
          while (1)
          {
            v260 = v259 - 2;
            if (v259 - 2 < 0)
              break;
            --v259;
            if (*(_QWORD *)(v253[3] + 8 * v260) != *(_QWORD *)(v157[3] + 8 * v260))
              goto LABEL_226;
          }
          v259 = v258;
LABEL_226:
          v279 = v160 + 1;
          while (1)
          {
            v280 = v279 - 2;
            if (v279 - 2 < 0)
              break;
            --v279;
            if (*(_QWORD *)(v158[3] + 8 * v280))
              goto LABEL_261;
          }
          v279 = v163;
LABEL_261:
          v293 = v255 + 1;
          while (1)
          {
            v294 = v293 - 2;
            if (v293 - 2 < 0)
              break;
            --v293;
            if (*(_QWORD *)(v253[3] + 8 * v294))
              goto LABEL_450;
          }
          v293 = v258;
LABEL_450:
          v397 = (uint64_t)(v157[1] - *v157) >> 2;
          if (v164 <= v259)
            v398 = v259;
          else
            v398 = v164;
          if (v164 <= v293)
            v164 = v293;
          if (v279 > v259)
            v259 = v279;
          if (v397 > v259)
          {
            v399 = 1;
          }
          else
          {
            v259 = (uint64_t)(v157[1] - *v157) >> 2;
            v399 = 4;
          }
          if (v397 > v164)
          {
            v400 = 2;
          }
          else
          {
            v164 = v259;
            v400 = v399;
          }
          if (v397 > v398)
          {
            v164 = v398;
            v400 = 3;
          }
          v1947 = v256;
          v1965 = v161;
          if (!v164)
            goto LABEL_479;
          v401 = *(_QWORD *)(v157[3] + 8 * (v164 - 1));
          if (v401 < 0x10)
            goto LABEL_479;
          switch(v400)
          {
            case 1:
              if (v164 == 2)
              {
                v1691 = *v159;
                if ((_DWORD)v1691)
                {
                  v1692 = 0;
                  v1693 = 0;
                  v1694 = 0;
                  v1695 = v158[19];
                  v1696 = v253[19];
                  v1697 = v157[19];
                  v1698 = v159[1];
                  v1699 = (uint64_t *)v158[3];
                  v1700 = *v1699;
                  v1701 = v1699[1];
                  v1702 = (uint64_t *)v253[3];
                  v1703 = *v1702;
                  v1704 = v1702[1];
                  if (v1698 <= 1)
                    v1705 = 1;
                  else
                    v1705 = v159[1];
                  v1706 = v1700 - v1701 * v1698;
                  v1707 = v1703 - v1704 * v254[1];
                  do
                  {
                    if ((_DWORD)v1698)
                    {
                      v1708 = 0;
                      v1709 = v1696 + 8 * v1693;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1710 = 0;
                          v1711 = *(_QWORD *)(v1695 + 8 * v1694);
                          v1712 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1697 + v1710) = *(_QWORD *)(v1709 + v1710) + v1711;
                            --v1712;
                            v1710 += 8;
                          }
                          while (v1712 > 1);
                        }
                        v1694 += v1701;
                        v1693 += v1704;
                        v1697 += 8 * (int)v401;
                        ++v1708;
                        v1709 += 8 * v1704;
                      }
                      while (v1708 != v1705);
                    }
                    v1694 += v1706;
                    v1693 += v1707;
                    ++v1692;
                  }
                  while (v1692 != v1691);
                }
              }
              else if (v164 == 1)
              {
                v1077 = *v159;
                if ((_DWORD)v1077)
                {
                  v1078 = 0;
                  v1079 = 0;
                  v1080 = v158[19];
                  v1081 = v253[19];
                  v1082 = v157[19];
                  v1083 = *(_QWORD *)v158[3];
                  v1084 = 8 * *(_QWORD *)v253[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v1085 = 0;
                      v1086 = *(_QWORD *)(v1080 + 8 * v1079);
                      v1087 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1082 + v1085) = *(_QWORD *)(v1081 + v1085) + v1086;
                        --v1087;
                        v1085 += 8;
                      }
                      while (v1087 > 1);
                    }
                    v1079 += v1083;
                    ++v1078;
                    v1082 += 8 * (int)v401;
                    v1081 += v1084;
                  }
                  while (v1078 != v1077);
                }
              }
              else
              {
                v1911 = v157[6];
                if (v1911)
                {
                  v1940 = 0;
                  v1843 = v253[19];
                  v1858 = v158[19];
                  v1713 = v157[19];
                  do
                  {
                    v1714 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1715 = v158[3];
                      v1716 = v161;
                      v1717 = v1940;
                      do
                      {
                        v1718 = ldiv(v1717, v159[v1716]);
                        v1717 = v1718.quot;
                        v1714 += *(_QWORD *)(v1715 + 8 * v1716--) * v1718.rem;
                      }
                      while (v1716 != -1);
                    }
                    v1719 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1720) = 0;
                    }
                    else
                    {
                      v1720 = 0;
                      v1721 = v253[3];
                      v1722 = v1940;
                      do
                      {
                        v1723 = ldiv(v1722, v254[v1719]);
                        v1722 = v1723.quot;
                        v1720 += *(_QWORD *)(v1721 + 8 * v1719--) * v1723.rem;
                      }
                      while (v1719 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1724 = 0;
                      v1725 = *(_QWORD *)(v1858 + 8 * (int)v1714);
                      v1726 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1713 + v1724) = *(_QWORD *)(v1843 + 8 * (int)v1720 + v1724) + v1725;
                        --v1726;
                        v1724 += 8;
                      }
                      while (v1726 > 1);
                    }
                    v1713 += 8 * (int)v401;
                    v1940 += (int)v401;
                  }
                  while (v1940 < v1911);
                }
              }
              break;
            case 2:
              if (v164 == 2)
              {
                v1727 = *v159;
                if ((_DWORD)v1727)
                {
                  v1728 = 0;
                  v1729 = 0;
                  v1730 = 0;
                  v1731 = v158[19];
                  v1732 = v253[19];
                  v1733 = v157[19];
                  v1734 = v159[1];
                  v1735 = (uint64_t *)v158[3];
                  v1736 = *v1735;
                  v1737 = v1735[1];
                  v1738 = (uint64_t *)v253[3];
                  v1739 = *v1738;
                  v1740 = v1738[1];
                  if (v1734 <= 1)
                    v1741 = 1;
                  else
                    v1741 = v159[1];
                  v1742 = v1736 - v1737 * v1734;
                  v1743 = v1739 - v1740 * v254[1];
                  do
                  {
                    if ((_DWORD)v1734)
                    {
                      v1744 = 0;
                      v1745 = v1731 + 8 * v1730;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1746 = 0;
                          v1747 = *(_QWORD *)(v1732 + 8 * v1729);
                          v1748 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1733 + v1746) = *(_QWORD *)(v1745 + v1746) + v1747;
                            --v1748;
                            v1746 += 8;
                          }
                          while (v1748 > 1);
                        }
                        v1730 += v1737;
                        v1729 += v1740;
                        v1733 += 8 * (int)v401;
                        ++v1744;
                        v1745 += 8 * v1737;
                      }
                      while (v1744 != v1741);
                    }
                    v1730 += v1742;
                    v1729 += v1743;
                    ++v1728;
                  }
                  while (v1728 != v1727);
                }
              }
              else if (v164 == 1)
              {
                v1088 = *v159;
                if ((_DWORD)v1088)
                {
                  v1089 = 0;
                  v1090 = 0;
                  v1091 = v158[19];
                  v1092 = v253[19];
                  v1093 = v157[19];
                  v1094 = *(_QWORD *)v253[3];
                  v1095 = 8 * *(_QWORD *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v1096 = 0;
                      v1097 = *(_QWORD *)(v1092 + 8 * v1090);
                      v1098 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1093 + v1096) = *(_QWORD *)(v1091 + v1096) + v1097;
                        --v1098;
                        v1096 += 8;
                      }
                      while (v1098 > 1);
                    }
                    v1090 += v1094;
                    ++v1089;
                    v1093 += 8 * (int)v401;
                    v1091 += v1095;
                  }
                  while (v1089 != v1088);
                }
              }
              else
              {
                v1912 = v157[6];
                if (v1912)
                {
                  v1941 = 0;
                  v1844 = v253[19];
                  v1859 = v158[19];
                  v1749 = v157[19];
                  do
                  {
                    v1750 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1751 = v158[3];
                      v1752 = v161;
                      v1753 = v1941;
                      do
                      {
                        v1754 = ldiv(v1753, v159[v1752]);
                        v1753 = v1754.quot;
                        v1750 += *(_QWORD *)(v1751 + 8 * v1752--) * v1754.rem;
                      }
                      while (v1752 != -1);
                    }
                    v1755 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1756) = 0;
                    }
                    else
                    {
                      v1756 = 0;
                      v1757 = v253[3];
                      v1758 = v1941;
                      do
                      {
                        v1759 = ldiv(v1758, v254[v1755]);
                        v1758 = v1759.quot;
                        v1756 += *(_QWORD *)(v1757 + 8 * v1755--) * v1759.rem;
                      }
                      while (v1755 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1760 = 0;
                      v1761 = *(_QWORD *)(v1844 + 8 * (int)v1756);
                      v1762 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1749 + v1760) = *(_QWORD *)(v1859 + 8 * (int)v1750 + v1760) + v1761;
                        --v1762;
                        v1760 += 8;
                      }
                      while (v1762 > 1);
                    }
                    v1749 += 8 * (int)v401;
                    v1941 += (int)v401;
                  }
                  while (v1941 < v1912);
                }
              }
              break;
            case 3:
              if (v164 == 2)
              {
                v1283 = *v159;
                if ((_DWORD)v1283)
                {
                  v1284 = 0;
                  v1285 = 0;
                  v1286 = 0;
                  v1287 = v158[19];
                  v1288 = v253[19];
                  v1289 = v157[19];
                  v1290 = v159[1];
                  v1291 = (uint64_t *)v158[3];
                  v1292 = *v1291;
                  v1293 = v1291[1];
                  v1294 = (uint64_t *)v253[3];
                  v1295 = *v1294;
                  v1296 = v1294[1];
                  if (v1290 <= 1)
                    v1297 = 1;
                  else
                    v1297 = v159[1];
                  v1298 = v1292 - v1293 * v1290;
                  v1299 = v1295 - v1296 * v254[1];
                  do
                  {
                    if ((_DWORD)v1290)
                    {
                      v1300 = 0;
                      v1301 = v1288 + 8 * v1285;
                      v1302 = v1287 + 8 * v1286;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1303 = 0;
                          v1304 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1289 + v1303) = *(_QWORD *)(v1301 + v1303) + *(_QWORD *)(v1302 + v1303);
                            --v1304;
                            v1303 += 8;
                          }
                          while (v1304 > 1);
                        }
                        v1286 += v1293;
                        v1285 += v1296;
                        v1289 += 8 * (int)v401;
                        ++v1300;
                        v1301 += 8 * v1296;
                        v1302 += 8 * v1293;
                      }
                      while (v1300 != v1297);
                    }
                    v1286 += v1298;
                    v1285 += v1299;
                    ++v1284;
                  }
                  while (v1284 != v1283);
                }
              }
              else if (v164 == 1)
              {
                v402 = *v159;
                if ((_DWORD)v402)
                {
                  v403 = 0;
                  v404 = v158[19];
                  v405 = v253[19];
                  v406 = v157[19];
                  v407 = 8 * *(_QWORD *)v253[3];
                  v408 = 8 * *(_QWORD *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v409 = 0;
                      v410 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v406 + v409) = *(_QWORD *)(v405 + v409) + *(_QWORD *)(v404 + v409);
                        --v410;
                        v409 += 8;
                      }
                      while (v410 > 1);
                    }
                    ++v403;
                    v406 += 8 * (int)v401;
                    v405 += v407;
                    v404 += v408;
                  }
                  while (v403 != v402);
                }
              }
              else
              {
                v1899 = v157[6];
                if (v1899)
                {
                  v1928 = 0;
                  v1837 = v253[19];
                  v1850 = v158[19];
                  v1305 = v157[19];
                  do
                  {
                    v1306 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1307 = v158[3];
                      v1308 = v161;
                      v1309 = v1928;
                      do
                      {
                        v1310 = ldiv(v1309, v159[v1308]);
                        v1309 = v1310.quot;
                        v1306 += *(_QWORD *)(v1307 + 8 * v1308--) * v1310.rem;
                      }
                      while (v1308 != -1);
                    }
                    v1311 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1312) = 0;
                    }
                    else
                    {
                      v1312 = 0;
                      v1313 = v253[3];
                      v1314 = v1928;
                      do
                      {
                        v1315 = ldiv(v1314, v254[v1311]);
                        v1314 = v1315.quot;
                        v1312 += *(_QWORD *)(v1313 + 8 * v1311--) * v1315.rem;
                      }
                      while (v1311 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1316 = 0;
                      v1317 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1305 + v1316) = *(_QWORD *)(v1837 + 8 * (int)v1312 + v1316)
                                                   + *(_QWORD *)(v1850 + 8 * (int)v1306 + v1316);
                        --v1317;
                        v1316 += 8;
                      }
                      while (v1317 > 1);
                    }
                    v1305 += 8 * (int)v401;
                    v1928 += (int)v401;
                  }
                  while (v1928 < v1899);
                }
              }
              break;
            default:
LABEL_479:
              switch(v397)
              {
                case 1uLL:
                  v411 = v157[6];
                  if (v411)
                  {
                    v412 = (_QWORD *)v158[19];
                    v413 = (_QWORD *)v253[19];
                    v414 = (_QWORD *)v157[19];
                    v415 = 8 * *(_QWORD *)v253[3];
                    v416 = 8 * *(_QWORD *)v158[3];
                    do
                    {
                      *v414++ = *v413 + *v412;
                      v413 = (_QWORD *)((char *)v413 + v415);
                      v412 = (_QWORD *)((char *)v412 + v416);
                      --v411;
                    }
                    while (v411);
                  }
                  break;
                case 2uLL:
                  v822 = *v159;
                  if ((_DWORD)v822)
                  {
                    v823 = 0;
                    v824 = 0;
                    v825 = 0;
                    v826 = 0;
                    v827 = v158[19];
                    v828 = v253[19];
                    v829 = v157[19];
                    v830 = v159[1];
                    v831 = (uint64_t *)v158[3];
                    v832 = *v831;
                    v833 = v831[1];
                    v834 = (uint64_t *)v253[3];
                    v835 = *v834;
                    v836 = v834[1];
                    v837 = v835 - v836 * v254[1];
                    if (v830 <= 1)
                      v838 = 1;
                    else
                      v838 = v159[1];
                    v839 = v832 - v833 * v830;
                    do
                    {
                      if ((_DWORD)v830)
                      {
                        v840 = v824 + v838;
                        v841 = (_QWORD *)(v829 + 8 * v824);
                        v842 = v838;
                        do
                        {
                          *v841++ = *(_QWORD *)(v828 + 8 * v825) + *(_QWORD *)(v827 + 8 * v826);
                          v826 += v833;
                          v825 += v836;
                          --v842;
                        }
                        while (v842);
                        v824 = v840;
                      }
                      v826 += v839;
                      v825 += v837;
                      ++v823;
                    }
                    while (v823 != v822);
                  }
                  break;
                case 3uLL:
                  v843 = *v159;
                  if ((_DWORD)v843)
                  {
                    v844 = 0;
                    v845 = 0;
                    v846 = 0;
                    v847 = 0;
                    v848 = v158[19];
                    v849 = v253[19];
                    v850 = v157[19];
                    v851 = v159[1];
                    v852 = (_QWORD *)v158[3];
                    v853 = v852[1];
                    v854 = (_QWORD *)v253[3];
                    v855 = v854[1];
                    v856 = *v854 - v855 * v254[1];
                    if (v851 <= 1)
                      v857 = 1;
                    else
                      v857 = v159[1];
                    v858 = *v852 - v853 * v851;
                    do
                    {
                      if ((_DWORD)v851)
                      {
                        v859 = 0;
                        v860 = v159[2];
                        v861 = v852[2];
                        v862 = v854[2];
                        if (v860 <= 1)
                          v863 = 1;
                        else
                          v863 = v159[2];
                        v864 = v855 - v862 * v254[2];
                        do
                        {
                          v865 = v863;
                          if ((_DWORD)v860)
                          {
                            do
                            {
                              *(_QWORD *)(v850 + 8 * v845++) = *(_QWORD *)(v849 + 8 * v846)
                                                             + *(_QWORD *)(v848 + 8 * v847);
                              v847 += v861;
                              v846 += v862;
                              --v865;
                            }
                            while (v865);
                          }
                          v847 += v853 - v861 * v860;
                          v846 += v864;
                          ++v859;
                        }
                        while (v859 != v857);
                      }
                      v847 += v858;
                      v846 += v856;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 4uLL:
                  v1970 = *v159;
                  if ((_DWORD)v1970)
                  {
                    v866 = 0;
                    v867 = 0;
                    v868 = 0;
                    v869 = 0;
                    v870 = v158[19];
                    v871 = v253[19];
                    v872 = v157[19];
                    v873 = v159[1];
                    v874 = (_QWORD *)v158[3];
                    v875 = (_QWORD *)v253[3];
                    v1863 = v875[1];
                    v1878 = v874[1];
                    v1920 = *v875 - v1863 * v254[1];
                    v1952 = v159[1];
                    if (v873 <= 1)
                      v876 = 1;
                    else
                      v876 = v159[1];
                    v1891 = *v874 - v874[1] * v873;
                    do
                    {
                      if (v1952)
                      {
                        v877 = 0;
                        v878 = v159[2];
                        v879 = v874[2];
                        v880 = v875[2];
                        if (v878 <= 1)
                          v881 = 1;
                        else
                          v881 = v159[2];
                        v882 = v1863 - v880 * v254[2];
                        do
                        {
                          if ((_DWORD)v878)
                          {
                            v883 = 0;
                            v884 = v159[3];
                            v885 = v874[3];
                            v886 = v875[3];
                            if (v884 <= 1)
                              v887 = 1;
                            else
                              v887 = v159[3];
                            v888 = v880 - v886 * v254[3];
                            do
                            {
                              v889 = v887;
                              if ((_DWORD)v884)
                              {
                                do
                                {
                                  *(_QWORD *)(v872 + 8 * v867++) = *(_QWORD *)(v871 + 8 * v868)
                                                                 + *(_QWORD *)(v870 + 8 * v869);
                                  v869 += v885;
                                  v868 += v886;
                                  --v889;
                                }
                                while (v889);
                              }
                              v869 += v879 - v885 * v884;
                              v868 += v888;
                              ++v883;
                            }
                            while (v883 != v881);
                          }
                          v869 += v1878 - v879 * v878;
                          v868 += v882;
                          ++v877;
                        }
                        while (v877 != v876);
                      }
                      v869 += v1891;
                      v868 += v1920;
                      ++v866;
                    }
                    while (v866 != v1970);
                  }
                  break;
                default:
                  v810 = v157[6];
                  if (v810)
                  {
                    v811 = 0;
                    v1890 = v253[19];
                    v1919 = v158[19];
                    v1877 = v157[19];
                    do
                    {
                      v812 = 0;
                      if ((v161 & 0x80000000) == 0)
                      {
                        v813 = v158[3];
                        v814 = v161;
                        v815 = v811;
                        do
                        {
                          v816 = ldiv(v815, v159[v814]);
                          v815 = v816.quot;
                          v812 += *(_QWORD *)(v813 + 8 * v814--) * v816.rem;
                        }
                        while (v814 != -1);
                      }
                      v817 = v1947;
                      if ((v1947 & 0x80000000) != 0)
                      {
                        LODWORD(v818) = 0;
                      }
                      else
                      {
                        v818 = 0;
                        v819 = v253[3];
                        v820 = v811;
                        do
                        {
                          v821 = ldiv(v820, v254[v817]);
                          v820 = v821.quot;
                          v818 += *(_QWORD *)(v819 + 8 * v817--) * v821.rem;
                        }
                        while (v817 != -1);
                      }
                      *(_QWORD *)(v1877 + 8 * v811++) = *(_QWORD *)(v1890 + 8 * (int)v818)
                                                      + *(_QWORD *)(v1919 + 8 * (int)v812);
                      v161 = v1965;
                    }
                    while (v811 != v810);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) + **(float **)(*a2 + 152);
          return;
        case 1:
          v195 = *(_DWORD *)(*a2 + 160);
          if (v195 >= 1)
          {
            v196 = **(float **)(*a1 + 152);
            v197 = *(float **)(*(_QWORD *)a3 + 152);
            v198 = *(float **)(*a2 + 152);
            v199 = v195 + 1;
            do
            {
              v200 = *v198++;
              *v197++ = v196 + v200;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 2:
          v201 = *(_DWORD *)(*a1 + 160);
          if (v201 >= 1)
          {
            v202 = **(float **)(*a2 + 152);
            v203 = *(float **)(*(_QWORD *)a3 + 152);
            v204 = *(float **)(*a1 + 152);
            v205 = v201 + 1;
            do
            {
              v206 = *v204++;
              *v203++ = v202 + v206;
              --v205;
            }
            while (v205 > 1);
          }
          return;
        case 3:
          v207 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v207 >= 1)
          {
            v208 = *(float **)(*(_QWORD *)a3 + 152);
            v209 = *(float **)(*a2 + 152);
            v210 = *(float **)(*a1 + 152);
            v211 = v207 + 1;
            do
            {
              v212 = *v210++;
              v213 = v212;
              v214 = *v209++;
              *v208++ = v213 + v214;
              --v211;
            }
            while (v211 > 1);
          }
          return;
        default:
          v186 = *(_QWORD **)a3;
          v187 = (_QWORD *)*a1;
          v188 = *(int **)*a1;
          v189 = (v187[1] - (_QWORD)v188) >> 2;
          v190 = (v189 - 1);
          if ((int)v190 >= -1)
            v191 = -1;
          else
            v191 = v189 - 1;
          v192 = v191 + 1;
          v193 = v189 + 1;
          while (1)
          {
            v194 = v193 - 2;
            if (v193 - 2 < 0)
              break;
            --v193;
            if (*(_QWORD *)(v187[3] + 8 * v194) != *(_QWORD *)(v186[3] + 8 * v194))
              goto LABEL_193;
          }
          v193 = v192;
LABEL_193:
          v261 = (_QWORD *)*a2;
          v262 = *(int **)*a2;
          v263 = (v261[1] - (_QWORD)v262) >> 2;
          v264 = (v263 - 1);
          if ((int)v264 >= -1)
            v265 = -1;
          else
            v265 = v263 - 1;
          v266 = v265 + 1;
          v267 = v263 + 1;
          while (1)
          {
            v268 = v267 - 2;
            if (v267 - 2 < 0)
              break;
            --v267;
            if (*(_QWORD *)(v261[3] + 8 * v268) != *(_QWORD *)(v186[3] + 8 * v268))
              goto LABEL_231;
          }
          v267 = v266;
LABEL_231:
          v281 = v189 + 1;
          while (1)
          {
            v282 = v281 - 2;
            if (v281 - 2 < 0)
              break;
            --v281;
            if (*(_QWORD *)(v187[3] + 8 * v282))
              goto LABEL_266;
          }
          v281 = v192;
LABEL_266:
          v295 = v263 + 1;
          while (1)
          {
            v296 = v295 - 2;
            if (v295 - 2 < 0)
              break;
            --v295;
            if (*(_QWORD *)(v261[3] + 8 * v296))
              goto LABEL_485;
          }
          v295 = v266;
LABEL_485:
          v417 = (uint64_t)(v186[1] - *v186) >> 2;
          if (v193 <= v267)
            v418 = v267;
          else
            v418 = v193;
          if (v193 <= v295)
            v193 = v295;
          if (v281 > v267)
            v267 = v281;
          if (v417 > v267)
          {
            v419 = 1;
          }
          else
          {
            v267 = (uint64_t)(v186[1] - *v186) >> 2;
            v419 = v25;
          }
          if (v417 > v193)
          {
            v420 = 2;
          }
          else
          {
            v193 = v267;
            v420 = v419;
          }
          if (v417 > v418)
          {
            v193 = v418;
            v420 = 3;
          }
          v1948 = v264;
          v1966 = v190;
          if (!v193)
            goto LABEL_514;
          v421 = *(_QWORD *)(v186[3] + 8 * (v193 - 1));
          if (v421 < 0x10)
            goto LABEL_514;
          switch(v420)
          {
            case 1:
              if (v193 == 2)
              {
                v1763 = *v188;
                if ((_DWORD)v1763)
                {
                  v1764 = 0;
                  v1765 = 0;
                  v1766 = 0;
                  v1767 = v187[19];
                  v1768 = v261[19];
                  v1769 = v186[19];
                  v1770 = v188[1];
                  v1771 = (uint64_t *)v187[3];
                  v1772 = *v1771;
                  v1773 = v1771[1];
                  v1774 = (uint64_t *)v261[3];
                  v1775 = *v1774;
                  v1776 = v1774[1];
                  if (v1770 <= 1)
                    v1777 = 1;
                  else
                    v1777 = v188[1];
                  v1778 = v1772 - v1773 * v1770;
                  v1779 = v1775 - v1776 * v262[1];
                  do
                  {
                    if ((_DWORD)v1770)
                    {
                      v1780 = 0;
                      v1781 = v1768 + 4 * v1765;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1782 = 0;
                          v1783 = *(float *)(v1767 + 4 * v1766);
                          v1784 = v421 + 1;
                          do
                          {
                            *(float *)(v1769 + v1782) = v1783 + *(float *)(v1781 + v1782);
                            --v1784;
                            v1782 += 4;
                          }
                          while (v1784 > 1);
                        }
                        v1766 += v1773;
                        v1765 += v1776;
                        v1769 += 4 * (int)v421;
                        ++v1780;
                        v1781 += 4 * v1776;
                      }
                      while (v1780 != v1777);
                    }
                    v1766 += v1778;
                    v1765 += v1779;
                    ++v1764;
                  }
                  while (v1764 != v1763);
                }
              }
              else if (v193 == 1)
              {
                v1099 = *v188;
                if ((_DWORD)v1099)
                {
                  v1100 = 0;
                  v1101 = 0;
                  v1102 = v187[19];
                  v1103 = v261[19];
                  v1104 = v186[19];
                  v1105 = *(_QWORD *)v187[3];
                  v1106 = 4 * *(_QWORD *)v261[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v1107 = 0;
                      v1108 = *(float *)(v1102 + 4 * v1101);
                      v1109 = v421 + 1;
                      do
                      {
                        *(float *)(v1104 + v1107) = v1108 + *(float *)(v1103 + v1107);
                        --v1109;
                        v1107 += 4;
                      }
                      while (v1109 > 1);
                    }
                    v1101 += v1105;
                    ++v1100;
                    v1104 += 4 * (int)v421;
                    v1103 += v1106;
                  }
                  while (v1100 != v1099);
                }
              }
              else
              {
                v1913 = v186[6];
                if (v1913)
                {
                  v1942 = 0;
                  v1845 = v261[19];
                  v1860 = v187[19];
                  v1785 = v186[19];
                  do
                  {
                    v1786 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1787 = v187[3];
                      v1788 = v190;
                      v1789 = v1942;
                      do
                      {
                        v1790 = ldiv(v1789, v188[v1788]);
                        v1789 = v1790.quot;
                        v1786 += *(_QWORD *)(v1787 + 8 * v1788--) * v1790.rem;
                      }
                      while (v1788 != -1);
                    }
                    v1791 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1792) = 0;
                    }
                    else
                    {
                      v1792 = 0;
                      v1793 = v261[3];
                      v1794 = v1942;
                      do
                      {
                        v1795 = ldiv(v1794, v262[v1791]);
                        v1794 = v1795.quot;
                        v1792 += *(_QWORD *)(v1793 + 8 * v1791--) * v1795.rem;
                      }
                      while (v1791 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1796 = 0;
                      v1797 = *(float *)(v1860 + 4 * (int)v1786);
                      v1798 = v421 + 1;
                      do
                      {
                        *(float *)(v1785 + v1796) = v1797 + *(float *)(v1845 + 4 * (int)v1792 + v1796);
                        --v1798;
                        v1796 += 4;
                      }
                      while (v1798 > 1);
                    }
                    v1785 += 4 * (int)v421;
                    v1942 += (int)v421;
                  }
                  while (v1942 < v1913);
                }
              }
              break;
            case 2:
              if (v193 == 2)
              {
                v1799 = *v188;
                if ((_DWORD)v1799)
                {
                  v1800 = 0;
                  v1801 = 0;
                  v1802 = 0;
                  v1803 = v187[19];
                  v1804 = v261[19];
                  v1805 = v186[19];
                  v1806 = v188[1];
                  v1807 = (uint64_t *)v187[3];
                  v1808 = *v1807;
                  v1809 = v1807[1];
                  v1810 = (uint64_t *)v261[3];
                  v1811 = *v1810;
                  v1812 = v1810[1];
                  if (v1806 <= 1)
                    v1813 = 1;
                  else
                    v1813 = v188[1];
                  v1814 = v1808 - v1809 * v1806;
                  v1815 = v1811 - v1812 * v262[1];
                  do
                  {
                    if ((_DWORD)v1806)
                    {
                      v1816 = 0;
                      v1817 = v1803 + 4 * v1802;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1818 = 0;
                          v1819 = *(float *)(v1804 + 4 * v1801);
                          v1820 = v421 + 1;
                          do
                          {
                            *(float *)(v1805 + v1818) = v1819 + *(float *)(v1817 + v1818);
                            --v1820;
                            v1818 += 4;
                          }
                          while (v1820 > 1);
                        }
                        v1802 += v1809;
                        v1801 += v1812;
                        v1805 += 4 * (int)v421;
                        ++v1816;
                        v1817 += 4 * v1809;
                      }
                      while (v1816 != v1813);
                    }
                    v1802 += v1814;
                    v1801 += v1815;
                    ++v1800;
                  }
                  while (v1800 != v1799);
                }
              }
              else if (v193 == 1)
              {
                v1110 = *v188;
                if ((_DWORD)v1110)
                {
                  v1111 = 0;
                  v1112 = 0;
                  v1113 = v187[19];
                  v1114 = v261[19];
                  v1115 = v186[19];
                  v1116 = *(_QWORD *)v261[3];
                  v1117 = 4 * *(_QWORD *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v1118 = 0;
                      v1119 = *(float *)(v1114 + 4 * v1112);
                      v1120 = v421 + 1;
                      do
                      {
                        *(float *)(v1115 + v1118) = v1119 + *(float *)(v1113 + v1118);
                        --v1120;
                        v1118 += 4;
                      }
                      while (v1120 > 1);
                    }
                    v1112 += v1116;
                    ++v1111;
                    v1115 += 4 * (int)v421;
                    v1113 += v1117;
                  }
                  while (v1111 != v1110);
                }
              }
              else
              {
                v1914 = v186[6];
                if (v1914)
                {
                  v1943 = 0;
                  v1846 = v261[19];
                  v1861 = v187[19];
                  v1821 = v186[19];
                  do
                  {
                    v1822 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1823 = v187[3];
                      v1824 = v190;
                      v1825 = v1943;
                      do
                      {
                        v1826 = ldiv(v1825, v188[v1824]);
                        v1825 = v1826.quot;
                        v1822 += *(_QWORD *)(v1823 + 8 * v1824--) * v1826.rem;
                      }
                      while (v1824 != -1);
                    }
                    v1827 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1828) = 0;
                    }
                    else
                    {
                      v1828 = 0;
                      v1829 = v261[3];
                      v1830 = v1943;
                      do
                      {
                        v1831 = ldiv(v1830, v262[v1827]);
                        v1830 = v1831.quot;
                        v1828 += *(_QWORD *)(v1829 + 8 * v1827--) * v1831.rem;
                      }
                      while (v1827 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1832 = 0;
                      v1833 = *(float *)(v1846 + 4 * (int)v1828);
                      v1834 = v421 + 1;
                      do
                      {
                        *(float *)(v1821 + v1832) = v1833 + *(float *)(v1861 + 4 * (int)v1822 + v1832);
                        --v1834;
                        v1832 += 4;
                      }
                      while (v1834 > 1);
                    }
                    v1821 += 4 * (int)v421;
                    v1943 += (int)v421;
                  }
                  while (v1943 < v1914);
                }
              }
              break;
            case 3:
              if (v193 == 2)
              {
                v1318 = *v188;
                if ((_DWORD)v1318)
                {
                  v1319 = 0;
                  v1320 = 0;
                  v1321 = 0;
                  v1322 = v187[19];
                  v1323 = v261[19];
                  v1324 = v186[19];
                  v1325 = v188[1];
                  v1326 = (uint64_t *)v187[3];
                  v1327 = *v1326;
                  v1328 = v1326[1];
                  v1329 = (uint64_t *)v261[3];
                  v1330 = *v1329;
                  v1331 = v1329[1];
                  if (v1325 <= 1)
                    v1332 = 1;
                  else
                    v1332 = v188[1];
                  v1333 = v1327 - v1328 * v1325;
                  v1334 = v1330 - v1331 * v262[1];
                  do
                  {
                    if ((_DWORD)v1325)
                    {
                      v1335 = 0;
                      v1336 = v1323 + 4 * v1320;
                      v1337 = v1322 + 4 * v1321;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1338 = 0;
                          v1339 = v421 + 1;
                          do
                          {
                            *(float *)(v1324 + v1338) = *(float *)(v1337 + v1338) + *(float *)(v1336 + v1338);
                            --v1339;
                            v1338 += 4;
                          }
                          while (v1339 > 1);
                        }
                        v1321 += v1328;
                        v1320 += v1331;
                        v1324 += 4 * (int)v421;
                        ++v1335;
                        v1336 += 4 * v1331;
                        v1337 += 4 * v1328;
                      }
                      while (v1335 != v1332);
                    }
                    v1321 += v1333;
                    v1320 += v1334;
                    ++v1319;
                  }
                  while (v1319 != v1318);
                }
              }
              else if (v193 == 1)
              {
                v422 = *v188;
                if ((_DWORD)v422)
                {
                  v423 = 0;
                  v424 = v187[19];
                  v425 = v261[19];
                  v426 = v186[19];
                  v427 = 4 * *(_QWORD *)v261[3];
                  v428 = 4 * *(_QWORD *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v429 = 0;
                      v430 = v421 + 1;
                      do
                      {
                        *(float *)(v426 + v429) = *(float *)(v424 + v429) + *(float *)(v425 + v429);
                        --v430;
                        v429 += 4;
                      }
                      while (v430 > 1);
                    }
                    ++v423;
                    v426 += 4 * (int)v421;
                    v425 += v427;
                    v424 += v428;
                  }
                  while (v423 != v422);
                }
              }
              else
              {
                v1900 = v186[6];
                if (v1900)
                {
                  v1929 = 0;
                  v1838 = v261[19];
                  v1851 = v187[19];
                  v1340 = v186[19];
                  do
                  {
                    v1341 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1342 = v187[3];
                      v1343 = v190;
                      v1344 = v1929;
                      do
                      {
                        v1345 = ldiv(v1344, v188[v1343]);
                        v1344 = v1345.quot;
                        v1341 += *(_QWORD *)(v1342 + 8 * v1343--) * v1345.rem;
                      }
                      while (v1343 != -1);
                    }
                    v1346 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1347) = 0;
                    }
                    else
                    {
                      v1347 = 0;
                      v1348 = v261[3];
                      v1349 = v1929;
                      do
                      {
                        v1350 = ldiv(v1349, v262[v1346]);
                        v1349 = v1350.quot;
                        v1347 += *(_QWORD *)(v1348 + 8 * v1346--) * v1350.rem;
                      }
                      while (v1346 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1351 = 0;
                      v1352 = v421 + 1;
                      do
                      {
                        *(float *)(v1340 + v1351) = *(float *)(v1851 + 4 * (int)v1341 + v1351)
                                                  + *(float *)(v1838 + 4 * (int)v1347 + v1351);
                        --v1352;
                        v1351 += 4;
                      }
                      while (v1352 > 1);
                    }
                    v1340 += 4 * (int)v421;
                    v1929 += (int)v421;
                  }
                  while (v1929 < v1900);
                }
              }
              break;
            default:
LABEL_514:
              switch(v417)
              {
                case 1uLL:
                  v431 = v186[6];
                  if (v431)
                  {
                    v432 = (float *)v187[19];
                    v433 = (float *)v261[19];
                    v434 = (float *)v186[19];
                    v435 = 4 * *(_QWORD *)v261[3];
                    v436 = 4 * *(_QWORD *)v187[3];
                    do
                    {
                      *v434++ = *v432 + *v433;
                      v433 = (float *)((char *)v433 + v435);
                      v432 = (float *)((char *)v432 + v436);
                      --v431;
                    }
                    while (v431);
                  }
                  break;
                case 2uLL:
                  v902 = *v188;
                  if ((_DWORD)v902)
                  {
                    v903 = 0;
                    v904 = 0;
                    v905 = 0;
                    v906 = 0;
                    v907 = v187[19];
                    v908 = v261[19];
                    v909 = v186[19];
                    v910 = v188[1];
                    v911 = (uint64_t *)v187[3];
                    v912 = *v911;
                    v913 = v911[1];
                    v914 = (uint64_t *)v261[3];
                    v915 = *v914;
                    v916 = v914[1];
                    v917 = v915 - v916 * v262[1];
                    if (v910 <= 1)
                      v918 = 1;
                    else
                      v918 = v188[1];
                    v919 = v912 - v913 * v910;
                    do
                    {
                      if ((_DWORD)v910)
                      {
                        v920 = v904 + v918;
                        v921 = (float *)(v909 + 4 * v904);
                        v922 = v918;
                        do
                        {
                          *v921++ = *(float *)(v907 + 4 * v906) + *(float *)(v908 + 4 * v905);
                          v906 += v913;
                          v905 += v916;
                          --v922;
                        }
                        while (v922);
                        v904 = v920;
                      }
                      v906 += v919;
                      v905 += v917;
                      ++v903;
                    }
                    while (v903 != v902);
                  }
                  break;
                case 3uLL:
                  v923 = *v188;
                  if ((_DWORD)v923)
                  {
                    v924 = 0;
                    v925 = 0;
                    v926 = 0;
                    v927 = 0;
                    v928 = v187[19];
                    v929 = v261[19];
                    v930 = v186[19];
                    v931 = v188[1];
                    v932 = (_QWORD *)v187[3];
                    v933 = v932[1];
                    v934 = (_QWORD *)v261[3];
                    v935 = v934[1];
                    v936 = *v934 - v935 * v262[1];
                    if (v931 <= 1)
                      v937 = 1;
                    else
                      v937 = v188[1];
                    v938 = *v932 - v933 * v931;
                    do
                    {
                      if ((_DWORD)v931)
                      {
                        v939 = 0;
                        v940 = v188[2];
                        v941 = v932[2];
                        v942 = v934[2];
                        if (v940 <= 1)
                          v943 = 1;
                        else
                          v943 = v188[2];
                        v944 = v935 - v942 * v262[2];
                        do
                        {
                          v945 = v943;
                          if ((_DWORD)v940)
                          {
                            do
                            {
                              *(float *)(v930 + 4 * v925++) = *(float *)(v928 + 4 * v927) + *(float *)(v929 + 4 * v926);
                              v927 += v941;
                              v926 += v942;
                              --v945;
                            }
                            while (v945);
                          }
                          v927 += v933 - v941 * v940;
                          v926 += v944;
                          ++v939;
                        }
                        while (v939 != v937);
                      }
                      v927 += v938;
                      v926 += v936;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 4uLL:
                  v1971 = *v188;
                  if ((_DWORD)v1971)
                  {
                    v946 = 0;
                    v947 = 0;
                    v948 = 0;
                    v949 = 0;
                    v950 = v187[19];
                    v951 = v261[19];
                    v952 = v186[19];
                    v953 = v188[1];
                    v954 = (_QWORD *)v187[3];
                    v955 = (_QWORD *)v261[3];
                    v1893 = v955[1];
                    v1922 = v954[1];
                    v1953 = *v955 - v1893 * v262[1];
                    if (v953 <= 1)
                      v956 = 1;
                    else
                      v956 = v188[1];
                    v957 = *v954 - v954[1] * v953;
                    do
                    {
                      if ((_DWORD)v953)
                      {
                        v958 = 0;
                        v959 = v188[2];
                        v960 = v954[2];
                        v961 = v955[2];
                        if (v959 <= 1)
                          v962 = 1;
                        else
                          v962 = v188[2];
                        v963 = v1893 - v961 * v262[2];
                        do
                        {
                          if ((_DWORD)v959)
                          {
                            v964 = 0;
                            v965 = v188[3];
                            v966 = v954[3];
                            v967 = v955[3];
                            if (v965 <= 1)
                              v968 = 1;
                            else
                              v968 = v188[3];
                            v969 = v961 - v967 * v262[3];
                            do
                            {
                              v970 = v968;
                              if ((_DWORD)v965)
                              {
                                do
                                {
                                  *(float *)(v952 + 4 * v947++) = *(float *)(v950 + 4 * v949)
                                                                + *(float *)(v951 + 4 * v948);
                                  v949 += v966;
                                  v948 += v967;
                                  --v970;
                                }
                                while (v970);
                              }
                              v949 += v960 - v966 * v965;
                              v948 += v969;
                              ++v964;
                            }
                            while (v964 != v962);
                          }
                          v949 += v1922 - v960 * v959;
                          v948 += v963;
                          ++v958;
                        }
                        while (v958 != v956);
                      }
                      v949 += v957;
                      v948 += v1953;
                      ++v946;
                    }
                    while (v946 != v1971);
                  }
                  break;
                default:
                  v890 = v186[6];
                  if (v890)
                  {
                    v891 = 0;
                    v1892 = v261[19];
                    v1921 = v187[19];
                    v1879 = v186[19];
                    do
                    {
                      v892 = 0;
                      if ((v190 & 0x80000000) == 0)
                      {
                        v893 = v187[3];
                        v894 = v190;
                        v895 = v891;
                        do
                        {
                          v896 = ldiv(v895, v188[v894]);
                          v895 = v896.quot;
                          v892 += *(_QWORD *)(v893 + 8 * v894--) * v896.rem;
                        }
                        while (v894 != -1);
                      }
                      v897 = v1948;
                      if ((v1948 & 0x80000000) != 0)
                      {
                        LODWORD(v898) = 0;
                      }
                      else
                      {
                        v898 = 0;
                        v899 = v261[3];
                        v900 = v891;
                        do
                        {
                          v901 = ldiv(v900, v262[v897]);
                          v900 = v901.quot;
                          v898 += *(_QWORD *)(v899 + 8 * v897--) * v901.rem;
                        }
                        while (v897 != -1);
                      }
                      *(float *)(v1879 + 4 * v891++) = *(float *)(v1921 + 4 * (int)v892)
                                                     + *(float *)(v1892 + 4 * (int)v898);
                      v190 = v1966;
                    }
                    while (v891 != v890);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::ArcCos::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcCos::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvacosf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcCos::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::ArcCosh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcCosh::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvacoshf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcCosh::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::ArcSin::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcSin::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvasinf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcSin::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::ArcSinh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcSinh::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvasinhf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcSinh::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::ArcTan::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcTan::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvatanf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcTan::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::ArcTan2::eval_cpu(uint64_t a1, const mlx::core::array **a2, mlx::core::array *this)
{
  const mlx::core::array *v3;
  uint64_t v6;
  const mlx::core::array *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlx::core::scheduler *v11;
  _QWORD *v12;
  uint64_t v13;
  const float *v14;
  uint64_t v15;
  mlx::core::array *v16;
  uint64_t v17;
  int v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (a2[1] - *a2 != 32)
    mlx::core::ArcTan2::eval_cpu();
  v6 = *(_QWORD *)(*(_QWORD *)this + 56);
  if ((_DWORD)v6 != 6
    || (*(_BYTE *)(*(_QWORD *)v3 + 168) & 2) == 0
    || (v7 = (const mlx::core::array *)((char *)v3 + 16), v8 = *((_QWORD *)v3 + 2), (*(_BYTE *)(v8 + 168) & 2) == 0))
  {
    mlx::core::ArcTan2::eval(a1, (uint64_t)a2, this);
    return;
  }
  v9 = *((_QWORD *)v3 + 1);
  if (v9)
  {
    if (!*(_QWORD *)(v9 + 8))
    {
      v15 = *(_QWORD *)(*(_QWORD *)v3 + 144);
      if (v15)
      {
        if (!*(_QWORD *)(v15 + 8))
        {
          v16 = this;
          v7 = v3;
LABEL_22:
          mlx::core::array::copy_shared_buffer(v16, v7);
          goto LABEL_15;
        }
      }
    }
  }
  v10 = *((_QWORD *)v3 + 3);
  if (v10)
  {
    if (!*(_QWORD *)(v10 + 8))
    {
      v17 = *(_QWORD *)(v8 + 144);
      if (v17)
      {
        if (!*(_QWORD *)(v17 + 8))
        {
          v16 = this;
          goto LABEL_22;
        }
      }
    }
  }
  v11 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)this + 48) * BYTE4(v6)));
  v19[0] = &unk_2513463C8;
  v19[1] = mlx::core::allocator::free;
  v20 = v19;
  mlx::core::array::set_data((int ***)this, (uint64_t)v11, (uint64_t)v19);
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
    goto LABEL_14;
  }
  if (v20)
  {
    v13 = 5;
LABEL_14:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
LABEL_15:
  v14 = *(const float **)(*(_QWORD *)v3 + 152);
  v18 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  vvatan2f(*(float **)(*(_QWORD *)this + 152), v14, *(const float **)(*((_QWORD *)v3 + 2) + 152), &v18);
}

void sub_2424CF2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::ArcTanh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcTanh::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvatanhf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcTanh::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::AsType::eval_cpu(int a1, uint64_t a2, mlx::core::array *this, float a4)
{
  mlx::core::_anonymous_namespace_ *v4;
  int v6;
  int v7;

  v4 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::AsType::eval_cpu();
  if ((*(_BYTE *)(*(_QWORD *)v4 + 168) & 1) == 0)
    goto LABEL_3;
  v6 = *(_DWORD *)(*(_QWORD *)v4 + 56);
  switch(v6)
  {
    case 2:
      if (*(_DWORD *)(*(_QWORD *)this + 56) != 6)
        goto LABEL_3;
      vDSP_vfltu32(*(const unsigned int **)(*(_QWORD *)v4 + 152), 1, *(float **)(*(_QWORD *)this + 152), 1, *(_QWORD *)(*(_QWORD *)v4 + 160));
      break;
    case 4:
      if (*(_DWORD *)(*(_QWORD *)this + 56) != 6)
        goto LABEL_3;
      vDSP_vflt32(*(const int **)(*(_QWORD *)v4 + 152), 1, *(float **)(*(_QWORD *)this + 152), 1, *(_QWORD *)(*(_QWORD *)v4 + 160));
      break;
    case 6:
      v7 = *(_DWORD *)(*(_QWORD *)this + 56);
      if (v7 != 4)
      {
        if (v7 == 2)
        {
          vDSP_vfixu32(*(const float **)(*(_QWORD *)v4 + 152), 1, *(unsigned int **)(*(_QWORD *)this + 152), 1, *(_QWORD *)(*(_QWORD *)v4 + 160));
          return;
        }
LABEL_3:
        mlx::core::AsType::eval(a1, a2, this, a4);
        return;
      }
      vDSP_vfix32(*(const float **)(*(_QWORD *)v4 + 152), 1, *(int **)(*(_QWORD *)this + 152), 1, *(_QWORD *)(*(_QWORD *)v4 + 160));
      break;
    default:
      goto LABEL_3;
  }
}

void mlx::core::Cos::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cos::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvcosf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Cos::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::Cosh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cosh::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvcoshf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Cosh::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::Divide::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::Divide::eval_cpu();
  v4 = v3 + 2;
  v5 = *(_DWORD *)(*v3 + 56);
  if (v5 == 6)
  {
  }
  else if (v5 == 4)
  {
  }
  else
  {
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::`anonymous namespace'::UseDefaultBinaryOp,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  vDSP_Length v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  _BYTE *v62;
  char *v63;
  int v64;
  unsigned int v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  vDSP_Length v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int *v78;
  int *v79;
  unsigned int v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  vDSP_Length v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  unsigned int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  vDSP_Length v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  float v107;
  float *v108;
  float *v109;
  unsigned int v110;
  float v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  int **v119;
  int *v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  int **v134;
  int *v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  int v195;
  int v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  vDSP_Length v203;
  int *v204;
  uint64_t v205;
  _BYTE *v206;
  _BYTE *v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  int v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int *v218;
  vDSP_Length v219;
  int *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int *v225;
  uint64_t v226;
  unint64_t v227;
  int v228;
  int v229;
  int v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  uint64_t v237;
  _DWORD *v238;
  _DWORD *v239;
  int *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  int v245;
  int v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int *v252;
  vDSP_Length v253;
  int *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int *v259;
  uint64_t v260;
  unint64_t v261;
  int v262;
  int v263;
  int v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD *v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  int v279;
  int v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  vDSP_Length v287;
  uint64_t v288;
  int *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  int v297;
  int v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  vDSP_Length v306;
  uint64_t v307;
  int *v308;
  uint64_t v309;
  float *v310;
  float *v311;
  float *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  ldiv_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _BYTE *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  ldiv_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  ldiv_t v390;
  int v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int *v397;
  uint64_t v398;
  unint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  int *v402;
  uint64_t v403;
  unint64_t v404;
  int v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int *v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  int *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  int v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  int *v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  vDSP_Length v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  ldiv_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  ldiv_t v453;
  int v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  unint64_t i;
  uint64_t v470;
  int v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  int v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  unint64_t j;
  uint64_t v492;
  uint64_t v493;
  int v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  int v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int v513;
  int v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  unint64_t k;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  ldiv_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  ldiv_t v538;
  int v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int *v545;
  uint64_t v546;
  unint64_t v547;
  _QWORD *v548;
  uint64_t v549;
  int *v550;
  uint64_t v551;
  unint64_t v552;
  int v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int *v559;
  uint64_t v560;
  unint64_t v561;
  unint64_t v562;
  _QWORD *v563;
  uint64_t v564;
  int *v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  int v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  int *v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  int *v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  unint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  vDSP_Length v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  ldiv_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  ldiv_t v601;
  int v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  unint64_t m;
  uint64_t v618;
  int v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  int v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  unint64_t n;
  uint64_t v640;
  uint64_t v641;
  int v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  int v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  int v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  unint64_t ii;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  vDSP_Length v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  ldiv_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  ldiv_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  _QWORD *v714;
  uint64_t v715;
  _QWORD *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unint64_t v735;
  _QWORD *v736;
  _QWORD *v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  vDSP_Length v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  ldiv_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  ldiv_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  unint64_t v773;
  uint64_t *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  float *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  unint64_t v794;
  _QWORD *v795;
  uint64_t v796;
  _QWORD *v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unint64_t v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  _QWORD *v817;
  _QWORD *v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  vDSP_Length v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unsigned __int8 *v835;
  char *v836;
  uint64_t v837;
  unint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  vDSP_Length v843;
  int *v844;
  int v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  int *v850;
  uint64_t v851;
  uint64_t v852;
  unsigned int v853;
  unsigned int v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int *v859;
  vDSP_Length v860;
  int *v861;
  int v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unsigned int v871;
  unsigned int v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  int *v878;
  int v879;
  unint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int *v884;
  uint64_t v885;
  uint64_t v886;
  int v887;
  unsigned int v888;
  unint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  int *v893;
  vDSP_Length v894;
  int *v895;
  int v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  int v905;
  unsigned int v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  unsigned int v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  vDSP_Length v929;
  uint64_t v930;
  int *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  float v941;
  unsigned int v942;
  unint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  vDSP_Length v948;
  uint64_t v949;
  int *v950;
  int v951;
  uint64_t v952;
  uint64_t v953;
  int *v954;
  uint64_t v955;
  uint64_t v956;
  unint64_t v957;
  _QWORD *v958;
  uint64_t v959;
  _QWORD *v960;
  uint64_t v961;
  unint64_t v962;
  unint64_t v963;
  int *v964;
  uint64_t v965;
  unint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  int v970;
  ldiv_t v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  ldiv_t v978;
  int v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int *v984;
  vDSP_Length v985;
  int *v986;
  unint64_t v987;
  _QWORD *v988;
  uint64_t v989;
  int *v990;
  uint64_t v991;
  unint64_t v992;
  unint64_t v993;
  int *v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int v1000;
  ldiv_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int v1007;
  ldiv_t v1008;
  int v1009;
  uint64_t v1010;
  uint64_t v1011;
  int *v1012;
  unint64_t v1013;
  _QWORD *v1014;
  uint64_t v1015;
  _QWORD *v1016;
  uint64_t v1017;
  unint64_t v1018;
  unint64_t v1019;
  int *v1020;
  uint64_t v1021;
  unint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  int v1026;
  ldiv_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int v1033;
  ldiv_t v1034;
  int v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int *v1040;
  vDSP_Length v1041;
  int *v1042;
  unint64_t v1043;
  _QWORD *v1044;
  uint64_t v1045;
  int *v1046;
  uint64_t v1047;
  unint64_t v1048;
  unint64_t v1049;
  int *v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  int v1056;
  ldiv_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  int v1063;
  ldiv_t v1064;
  int v1065;
  uint64_t v1066;
  uint64_t v1067;
  int *v1068;
  unint64_t v1069;
  _QWORD *v1070;
  uint64_t v1071;
  _QWORD *v1072;
  uint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  int *v1076;
  uint64_t v1077;
  unint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  int v1082;
  ldiv_t v1083;
  uint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  int v1089;
  ldiv_t v1090;
  int v1091;
  uint64_t v1092;
  uint64_t v1093;
  int *v1094;
  vDSP_Length v1095;
  uint64_t v1096;
  unint64_t v1097;
  _QWORD *v1098;
  uint64_t v1099;
  _QWORD *v1100;
  uint64_t v1101;
  unint64_t v1102;
  unint64_t v1103;
  int *v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  int v1110;
  ldiv_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  int v1117;
  ldiv_t v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  int *v1122;
  vDSP_Length v1123;
  uint64_t v1124;
  unint64_t v1125;
  _QWORD *v1126;
  uint64_t v1127;
  _QWORD *v1128;
  uint64_t v1129;
  unint64_t v1130;
  unint64_t v1131;
  int *v1132;
  uint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  int v1138;
  ldiv_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  int v1145;
  ldiv_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  char *v1150;
  unint64_t v1151;
  uint64_t *v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  vDSP_Length v1157;
  vDSP_Length v1158;
  char *v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  int quot;
  ldiv_t v1164;
  int v1165;
  uint64_t v1166;
  uint64_t v1167;
  int *v1168;
  uint64_t v1169;
  uint64_t v1170;
  unint64_t v1171;
  _QWORD *v1172;
  uint64_t v1173;
  _QWORD *v1174;
  uint64_t v1175;
  unint64_t v1176;
  unint64_t v1177;
  int *v1178;
  uint64_t v1179;
  unint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  int v1184;
  ldiv_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  ldiv_t v1192;
  int v1193;
  unint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  int *v1198;
  uint64_t v1199;
  unint64_t v1200;
  uint64_t v1201;
  unsigned int v1202;
  unsigned int v1203;
  _QWORD *v1204;
  uint64_t v1205;
  unint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  int v1213;
  ldiv_t v1214;
  uint64_t v1215;
  unint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  int v1220;
  ldiv_t v1221;
  uint64_t v1222;
  unsigned int v1223;
  unsigned int v1224;
  int v1225;
  unint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  int *v1230;
  vDSP_Length v1231;
  int *v1232;
  unint64_t v1233;
  _QWORD *v1234;
  uint64_t v1235;
  int *v1236;
  uint64_t v1237;
  unint64_t v1238;
  unint64_t v1239;
  int *v1240;
  uint64_t v1241;
  unint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  int v1246;
  ldiv_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  int v1253;
  ldiv_t v1254;
  int v1255;
  unint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t *v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t *v1265;
  uint64_t v1266;
  uint64_t v1267;
  int v1268;
  int v1269;
  unint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  unsigned int v1273;
  unsigned int v1274;
  uint64_t v1275;
  unint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  vDSP_Length v1279;
  uint64_t v1280;
  uint64_t v1281;
  int v1282;
  ldiv_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  int v1287;
  ldiv_t v1288;
  uint64_t v1289;
  unsigned int v1290;
  unsigned int v1291;
  int v1292;
  uint64_t v1293;
  uint64_t v1294;
  int *v1295;
  uint64_t v1296;
  unint64_t v1297;
  _QWORD *v1298;
  uint64_t v1299;
  _QWORD *v1300;
  uint64_t v1301;
  unint64_t v1302;
  unint64_t v1303;
  int *v1304;
  uint64_t v1305;
  unint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  int v1310;
  ldiv_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  int v1317;
  ldiv_t v1318;
  int v1319;
  unint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  int *v1324;
  uint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  int v1328;
  unsigned int v1329;
  _QWORD *v1330;
  uint64_t v1331;
  unint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  int v1339;
  ldiv_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  ldiv_t v1347;
  uint64_t v1348;
  int v1349;
  unsigned int v1350;
  int v1351;
  unint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  int *v1356;
  vDSP_Length v1357;
  int *v1358;
  unint64_t v1359;
  _QWORD *v1360;
  uint64_t v1361;
  int *v1362;
  uint64_t v1363;
  unint64_t v1364;
  unint64_t v1365;
  int *v1366;
  uint64_t v1367;
  unint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  int v1372;
  ldiv_t v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  int v1379;
  ldiv_t v1380;
  int v1381;
  unint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t *v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t *v1391;
  uint64_t v1392;
  uint64_t v1393;
  int v1394;
  int v1395;
  unint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  int v1399;
  unsigned int v1400;
  uint64_t v1401;
  unint64_t v1402;
  unint64_t v1403;
  uint64_t v1404;
  vDSP_Length v1405;
  uint64_t v1406;
  uint64_t v1407;
  int v1408;
  ldiv_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  int v1413;
  ldiv_t v1414;
  uint64_t v1415;
  int v1416;
  unsigned int v1417;
  int v1418;
  uint64_t v1419;
  uint64_t v1420;
  int *v1421;
  uint64_t v1422;
  unint64_t v1423;
  _QWORD *v1424;
  uint64_t v1425;
  _QWORD *v1426;
  uint64_t v1427;
  unint64_t v1428;
  unint64_t v1429;
  int *v1430;
  uint64_t v1431;
  unint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  int v1436;
  ldiv_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  int v1443;
  ldiv_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  unint64_t v1452;
  uint64_t *v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t *v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  unsigned int v1466;
  vDSP_Length v1467;
  uint64_t v1468;
  vDSP_Length v1469;
  uint64_t v1470;
  uint64_t v1471;
  int v1472;
  ldiv_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  int v1477;
  ldiv_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  unsigned int v1481;
  int v1482;
  uint64_t v1483;
  uint64_t v1484;
  int *v1485;
  uint64_t v1486;
  unint64_t v1487;
  _QWORD *v1488;
  uint64_t v1489;
  _QWORD *v1490;
  uint64_t v1491;
  unint64_t v1492;
  unint64_t v1493;
  int *v1494;
  uint64_t v1495;
  unint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  ldiv_t v1501;
  uint64_t v1502;
  unint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  int v1507;
  ldiv_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  unint64_t v1516;
  uint64_t *v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t *v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  float v1529;
  unsigned int v1530;
  vDSP_Length v1531;
  uint64_t v1532;
  vDSP_Length v1533;
  uint64_t v1534;
  uint64_t v1535;
  int v1536;
  ldiv_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  int v1541;
  ldiv_t v1542;
  uint64_t v1543;
  float v1544;
  unsigned int v1545;
  int v1546;
  uint64_t v1547;
  uint64_t v1548;
  int *v1549;
  uint64_t v1550;
  unint64_t v1551;
  _QWORD *v1552;
  uint64_t v1553;
  _QWORD *v1554;
  uint64_t v1555;
  unint64_t v1556;
  unint64_t v1557;
  int *v1558;
  uint64_t v1559;
  unint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  int v1564;
  ldiv_t v1565;
  uint64_t v1566;
  unint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  int v1571;
  ldiv_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  unsigned int v1584;
  unsigned int v1585;
  vDSP_Length v1586;
  vDSP_Length v1587;
  vDSP_Length v1588;
  vDSP_Length v1589;
  vDSP_Length v1590;
  vDSP_Length v1591;
  vDSP_Length v1592;
  vDSP_Length v1593;
  vDSP_Length v1594;
  vDSP_Length v1595;
  vDSP_Length v1596;
  vDSP_Length v1597;
  vDSP_Length v1598;
  vDSP_Length v1599;
  vDSP_Length v1600;
  vDSP_Length v1601;
  vDSP_Length v1602;
  vDSP_Length v1603;
  vDSP_Length v1604;
  vDSP_Length v1605;
  vDSP_Length v1606;
  vDSP_Length v1607;
  vDSP_Length v1608;
  vDSP_Length v1609;
  vDSP_Length v1610;
  vDSP_Length v1611;
  vDSP_Length v1612;
  vDSP_Length v1613;
  vDSP_Length v1614;
  vDSP_Length v1615;
  vDSP_Length v1616;
  vDSP_Length v1617;
  vDSP_Length v1618;
  vDSP_Length v1619;
  vDSP_Length v1620;
  vDSP_Length v1621;
  vDSP_Length v1622;
  vDSP_Length v1623;
  vDSP_Length v1624;
  vDSP_Length v1625;
  vDSP_Length v1626;
  vDSP_Length v1627;
  vDSP_Length v1628;
  vDSP_Length v1629;
  vDSP_Length v1630;
  vDSP_Length v1631;
  vDSP_Length v1632;
  vDSP_Length v1633;
  vDSP_Length v1634;
  vDSP_Length v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  int *v1640;
  int *v1641;
  int v1642;
  vDSP_Length v1643;
  unint64_t v1644;
  uint64_t v1645;
  int *v1646;
  unint64_t v1647;
  uint64_t v1648;
  int *v1649;
  unint64_t v1650;
  uint64_t v1651;
  unint64_t v1652;
  uint64_t v1653;
  unint64_t v1654;
  uint64_t v1655;
  int v1656;
  uint64_t v1657;
  unint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  int *v1661;
  unint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  int *v1665;
  unint64_t v1666;
  uint64_t v1667;
  unint64_t v1668;
  uint64_t v1669;
  unint64_t v1670;
  uint64_t v1671;
  vDSP_Length __N;
  vDSP_Length __Na;
  vDSP_Length __Nb;
  vDSP_Length __Nc;
  vDSP_Length __Nd;
  vDSP_Length __Ne;
  vDSP_Length __Nf;
  vDSP_Length __Ng;
  vDSP_Length __Nh;
  vDSP_Length __Ni;
  vDSP_Length __Nj;
  vDSP_Length __Nk;
  vDSP_Length __Nl;
  vDSP_Length __Nm;
  vDSP_Length __Nn;
  vDSP_Length __No;
  vDSP_Length __Np;
  vDSP_Length __Nq;
  vDSP_Length __Nr;
  vDSP_Length __Ns;
  vDSP_Length __Nt;
  vDSP_Length __Nu;
  vDSP_Length __Nv;
  vDSP_Length __Nw;
  vDSP_Length __Nx;
  vDSP_Length __Ny;
  vDSP_Length __Nz;
  vDSP_Length __Nba;
  vDSP_Length __Nbb;
  vDSP_Length __Nbc;
  vDSP_Length __Nbd;
  vDSP_Length __Nbe;
  vDSP_Length __Nbf;
  vDSP_Length __Nbg;
  vDSP_Length __Nbh;
  vDSP_Length __Nbi;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(_BYTE **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          if ((int)*(_QWORD *)(*a2 + 160) >= 1)
            memset(*(void **)(*(_QWORD *)a3 + 152), **(unsigned __int8 **)(*a1 + 152), *(_QWORD *)(*a2 + 160));
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        default:
          v15 = *(_QWORD **)a3;
          v16 = *a1;
          v17 = *(int **)*a1;
          v18 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v17) >> 2;
          v19 = (v18 - 1);
          if ((int)v19 >= -1)
            v20 = -1;
          else
            v20 = v18 - 1;
          v21 = v20 + 1;
          v22 = v18 + 1;
          break;
      }
      while (1)
      {
        v23 = v22 - 2;
        if (v22 - 2 < 0)
          break;
        --v22;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v23) != *(_QWORD *)(v15[3] + 8 * v23))
          goto LABEL_94;
      }
      v22 = v21;
LABEL_94:
      v112 = (uint64_t *)*a2;
      v113 = *(_QWORD *)*a2;
      v114 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v113) >> 2;
      v115 = v114 - 1;
      if ((int)v114 - 1 >= -1)
        v115 = -1;
      v116 = v115 + 1;
      v117 = v114 + 1;
      while (1)
      {
        v118 = v117 - 2;
        if (v117 - 2 < 0)
          break;
        --v117;
        if (*(_QWORD *)(v112[3] + 8 * v118) != *(_QWORD *)(v15[3] + 8 * v118))
          goto LABEL_147;
      }
      v117 = v116;
LABEL_147:
      v165 = v18 + 1;
      while (1)
      {
        v166 = v165 - 2;
        if (v165 - 2 < 0)
          break;
        --v165;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v166))
          goto LABEL_182;
      }
      v165 = v21;
LABEL_182:
      v179 = v114 + 1;
      while (1)
      {
        v180 = v179 - 2;
        if (v179 - 2 < 0)
          break;
        --v179;
        if (*(_QWORD *)(v112[3] + 8 * v180))
          goto LABEL_217;
      }
      v179 = v116;
LABEL_217:
      v193 = (uint64_t)(v15[1] - *v15) >> 2;
      if (v22 <= v117)
        v194 = v117;
      else
        v194 = v22;
      if (v22 <= v179)
        v22 = v179;
      if (v165 > v117)
        v117 = v165;
      if (v193 > v117)
      {
        v195 = 1;
      }
      else
      {
        v117 = (uint64_t)(v15[1] - *v15) >> 2;
        v195 = 4;
      }
      if (v193 > v22)
      {
        v196 = 2;
      }
      else
      {
        v22 = v117;
        v196 = v195;
      }
      if (v193 > v194)
      {
        v22 = v194;
        v196 = 3;
      }
      if (!v22)
        goto LABEL_243;
      v197 = *(_QWORD *)(v15[3] + 8 * (v22 - 1));
      if (v197 < 0x10)
        goto LABEL_243;
      switch(v196)
      {
        case 1:
          if (v22 == 2)
          {
            __Nt = *v17;
            if ((_DWORD)__Nt)
            {
              v1147 = 0;
              v1148 = 0;
              v1149 = *(_QWORD *)(v16 + 152);
              v1150 = (char *)v15[19];
              v1151 = v17[1];
              v1152 = *(uint64_t **)(v16 + 24);
              v1153 = *v1152;
              v1154 = v1152[1];
              if (v1151 <= 1)
                v1155 = 1;
              else
                v1155 = v17[1];
              v1626 = v1155;
              v1656 = v17[1];
              v1156 = v1153 - v1154 * v1151;
              do
              {
                v1157 = v1626;
                if (v1656)
                {
                  do
                  {
                    if ((int)v197 >= 1)
                      memset(v1150, *(unsigned __int8 *)(v1149 + v1148), v197);
                    v1148 += v1154;
                    v1150 += (int)v197;
                    --v1157;
                  }
                  while (v1157);
                }
                v1148 += v1156;
                ++v1147;
              }
              while (v1147 != __Nt);
            }
          }
          else if (v22 == 1)
          {
            v834 = *v17;
            if ((_DWORD)v834)
            {
              v835 = *(unsigned __int8 **)(v16 + 152);
              v836 = (char *)v15[19];
              v837 = **(_QWORD **)(v16 + 24);
              do
              {
                if ((int)v197 >= 1)
                  memset(v836, *v835, v197);
                v836 += (int)v197;
                v835 += v837;
                --v834;
              }
              while (v834);
            }
          }
          else
          {
            __Nu = v15[6];
            if (__Nu)
            {
              v1158 = 0;
              v1159 = (char *)v15[19];
              v1657 = *(_QWORD *)(v16 + 152);
              do
              {
                v1160 = 0;
                if ((v19 & 0x80000000) == 0)
                {
                  v1161 = *(_QWORD *)(v16 + 24);
                  v1162 = v19;
                  quot = v1158;
                  do
                  {
                    v1164 = ldiv(quot, v17[v1162]);
                    quot = v1164.quot;
                    v1160 += *(_QWORD *)(v1161 + 8 * v1162--) * v1164.rem;
                  }
                  while (v1162 != -1);
                }
                if ((int)v197 >= 1)
                  memset(v1159, *(unsigned __int8 *)(v1657 + (int)v1160), v197);
                v1159 += (int)v197;
                v1158 += (int)v197;
              }
              while (v1158 < __Nu);
            }
          }
          break;
        case 2:
          if (v22 == 2)
          {
            v1165 = *v17;
            if (*v17)
            {
              v1166 = 0;
              v1167 = 0;
              v1658 = 0;
              __Nv = (int)v197;
              v1168 = (int *)v15[19];
              v1169 = v112[19];
              v1170 = *(_QWORD *)(v16 + 152);
              do
              {
                if (v17[1])
                {
                  v1171 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(v1170 + v1167), 1, (const int *)(v1169 + v1166), v1168, 1, __Nv);
                    v16 = *a1;
                    v1172 = *(_QWORD **)(*a1 + 24);
                    v1173 = v1172[1];
                    v1167 += v1173;
                    v112 = (uint64_t *)*a2;
                    v1174 = *(_QWORD **)(*a2 + 24);
                    v1175 = v1174[1];
                    v1166 += v1175;
                    v1168 = (int *)((char *)v1168 + __Nv);
                    ++v1171;
                    v17 = *(int **)*a1;
                    v1176 = v17[1];
                  }
                  while (v1171 < v1176);
                  v1165 = *v17;
                  v113 = *v112;
                }
                else
                {
                  v1176 = 0;
                  v1172 = *(_QWORD **)(v16 + 24);
                  v1173 = v1172[1];
                  v1174 = (_QWORD *)v112[3];
                  v1175 = v1174[1];
                }
                v1167 = *v1172 + v1167 - v1176 * v1173;
                v1166 = *v1174 + v1166 - v1175 * *(int *)(v113 + 4);
                ++v1658;
              }
              while (v1658 < v1165);
            }
          }
          else if (v22 == 1)
          {
            if (*v17)
            {
              v838 = 0;
              v839 = 0;
              v840 = 0;
              v841 = *(_QWORD *)(v16 + 152);
              v842 = v112[19];
              v843 = (int)v197;
              v844 = (int *)v15[19];
              do
              {
                vDSP_vsdivi((const int *)(v841 + v840), 1, (const int *)(v842 + v839), v844, 1, v843);
                v840 += **(_QWORD **)(*a1 + 24);
                v839 += **(_QWORD **)(*a2 + 24);
                v844 = (int *)((char *)v844 + v843);
                ++v838;
              }
              while (v838 < **(int **)*a1);
            }
          }
          else if (v15[6])
          {
            v1177 = 0;
            v1659 = v112[19];
            __Nw = *(_QWORD *)(v16 + 152);
            v1627 = (int)v197;
            v1178 = (int *)v15[19];
            do
            {
              v1179 = *(_QWORD *)*a1;
              v1180 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1179) >> 2;
              v1181 = 0;
              v1182 = (v1180 - 1);
              if ((int)v1180 - 1 >= 0)
              {
                v1183 = *(_QWORD *)(*a1 + 24);
                v1184 = v1177;
                do
                {
                  v1185 = ldiv(v1184, *(int *)(v1179 + 4 * v1182));
                  v1184 = v1185.quot;
                  v1181 += *(_QWORD *)(v1183 + 8 * v1182--) * v1185.rem;
                }
                while (v1182 != -1);
              }
              v1186 = *(_QWORD *)*a2;
              v1187 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1186) >> 2;
              v1188 = 0;
              v1189 = (v1187 - 1);
              if ((int)v1187 - 1 >= 0)
              {
                v1190 = *(_QWORD *)(*a2 + 24);
                v1191 = v1177;
                do
                {
                  v1192 = ldiv(v1191, *(int *)(v1186 + 4 * v1189));
                  v1191 = v1192.quot;
                  v1188 += *(_QWORD *)(v1190 + 8 * v1189--) * v1192.rem;
                }
                while (v1189 != -1);
              }
              vDSP_vsdivi((const int *)(__Nw + (int)v1181), 1, (const int *)(v1659 + (int)v1188), v1178, 1, v1627);
              v1178 = (int *)((char *)v1178 + v1627);
              v1177 += v1627;
            }
            while (v1177 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v22 == 2)
          {
            v951 = *v17;
            if (*v17)
            {
              v952 = 0;
              v953 = 0;
              v1644 = 0;
              __Nh = (int)v197;
              v954 = (int *)v15[19];
              v955 = v112[19];
              v956 = *(_QWORD *)(v16 + 152);
              do
              {
                if (v17[1])
                {
                  v957 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v955 + v952), 1, (const int *)(v956 + v953), 1, v954, 1, __Nh);
                    v16 = *a1;
                    v958 = *(_QWORD **)(*a1 + 24);
                    v959 = v958[1];
                    v953 += v959;
                    v112 = (uint64_t *)*a2;
                    v960 = *(_QWORD **)(*a2 + 24);
                    v961 = v960[1];
                    v952 += v961;
                    v954 = (int *)((char *)v954 + __Nh);
                    ++v957;
                    v17 = *(int **)*a1;
                    v962 = v17[1];
                  }
                  while (v957 < v962);
                  v951 = *v17;
                  v113 = *v112;
                }
                else
                {
                  v962 = 0;
                  v958 = *(_QWORD **)(v16 + 24);
                  v959 = v958[1];
                  v960 = (_QWORD *)v112[3];
                  v961 = v960[1];
                }
                v953 = *v958 + v953 - v962 * v959;
                v952 = *v960 + v952 - v961 * *(int *)(v113 + 4);
                ++v1644;
              }
              while (v1644 < v951);
            }
          }
          else if (v22 == 1)
          {
            if (*v17)
            {
              v198 = 0;
              v199 = 0;
              v200 = 0;
              v201 = *(_QWORD *)(v16 + 152);
              v202 = v112[19];
              v203 = (int)v197;
              v204 = (int *)v15[19];
              do
              {
                vDSP_vdivi((const int *)(v202 + v199), 1, (const int *)(v201 + v200), 1, v204, 1, v203);
                v200 += **(_QWORD **)(*a1 + 24);
                v199 += **(_QWORD **)(*a2 + 24);
                v204 = (int *)((char *)v204 + v203);
                ++v198;
              }
              while (v198 < **(int **)*a1);
            }
          }
          else if (v15[6])
          {
            v963 = 0;
            v1645 = v112[19];
            __Ni = *(_QWORD *)(v16 + 152);
            v1619 = (int)v197;
            v964 = (int *)v15[19];
            do
            {
              v965 = *(_QWORD *)*a1;
              v966 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v965) >> 2;
              v967 = 0;
              v968 = (v966 - 1);
              if ((int)v966 - 1 >= 0)
              {
                v969 = *(_QWORD *)(*a1 + 24);
                v970 = v963;
                do
                {
                  v971 = ldiv(v970, *(int *)(v965 + 4 * v968));
                  v970 = v971.quot;
                  v967 += *(_QWORD *)(v969 + 8 * v968--) * v971.rem;
                }
                while (v968 != -1);
              }
              v972 = *(_QWORD *)*a2;
              v973 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v972) >> 2;
              v974 = 0;
              v975 = (v973 - 1);
              if ((int)v973 - 1 >= 0)
              {
                v976 = *(_QWORD *)(*a2 + 24);
                v977 = v963;
                do
                {
                  v978 = ldiv(v977, *(int *)(v972 + 4 * v975));
                  v977 = v978.quot;
                  v974 += *(_QWORD *)(v976 + 8 * v975--) * v978.rem;
                }
                while (v975 != -1);
              }
              vDSP_vdivi((const int *)(v1645 + (int)v974), 1, (const int *)(__Ni + (int)v967), 1, v964, 1, v1619);
              v964 = (int *)((char *)v964 + v1619);
              v963 += v1619;
            }
            while (v963 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_243:
          switch(v193)
          {
            case 1uLL:
              v205 = v15[6];
              if (v205)
              {
                v206 = *(_BYTE **)(v16 + 152);
                v207 = (_BYTE *)v15[19];
                v208 = **(_QWORD **)(v16 + 24);
                do
                {
                  *v207++ = *v206;
                  v206 += v208;
                  --v205;
                }
                while (v205);
              }
              break;
            case 2uLL:
              v324 = *v17;
              if ((_DWORD)v324)
              {
                v325 = 0;
                v326 = 0;
                v327 = 0;
                v328 = *(_QWORD *)(v16 + 152);
                v329 = v15[19];
                v330 = v17[1];
                v331 = *(uint64_t **)(v16 + 24);
                v333 = *v331;
                v332 = v331[1];
                if (v330 <= 1)
                  v334 = 1;
                else
                  v334 = v17[1];
                v335 = v333 - v332 * v330;
                do
                {
                  if ((_DWORD)v330)
                  {
                    v336 = v326 + v334;
                    v337 = (_BYTE *)(v329 + v326);
                    v338 = v334;
                    do
                    {
                      *v337++ = *(_BYTE *)(v328 + v327);
                      v327 += v332;
                      --v338;
                    }
                    while (v338);
                    v326 = v336;
                  }
                  v327 += v335;
                  ++v325;
                }
                while (v325 != v324);
              }
              break;
            case 3uLL:
              v339 = *v17;
              if ((_DWORD)v339)
              {
                v340 = 0;
                v341 = 0;
                v342 = 0;
                v343 = *(_QWORD *)(v16 + 152);
                v344 = v15[19];
                v345 = v17[1];
                v346 = *(_QWORD **)(v16 + 24);
                v347 = v346[1];
                if (v345 <= 1)
                  v348 = 1;
                else
                  v348 = v17[1];
                v349 = *v346 - v347 * v345;
                do
                {
                  if ((_DWORD)v345)
                  {
                    v350 = 0;
                    v351 = v17[2];
                    v352 = v346[2];
                    if (v351 <= 1)
                      v353 = 1;
                    else
                      v353 = v17[2];
                    do
                    {
                      v354 = v353;
                      if ((_DWORD)v351)
                      {
                        do
                        {
                          *(_BYTE *)(v344 + v341++) = *(_BYTE *)(v343 + v342);
                          v342 += v352;
                          --v354;
                        }
                        while (v354);
                      }
                      v342 += v347 - v352 * v351;
                      ++v350;
                    }
                    while (v350 != v348);
                  }
                  v342 += v349;
                  ++v340;
                }
                while (v340 != v339);
              }
              break;
            case 4uLL:
              v355 = *v17;
              if ((_DWORD)v355)
              {
                v356 = 0;
                v357 = 0;
                v358 = 0;
                v359 = *(_QWORD *)(v16 + 152);
                v360 = v15[19];
                v361 = v17[1];
                v362 = *(_QWORD **)(v16 + 24);
                v363 = v362[1];
                if (v361 <= 1)
                  v364 = 1;
                else
                  v364 = v17[1];
                v365 = *v362 - v363 * v361;
                do
                {
                  if ((_DWORD)v361)
                  {
                    v366 = 0;
                    v367 = v17[2];
                    v368 = v362[2];
                    if (v367 <= 1)
                      v369 = 1;
                    else
                      v369 = v17[2];
                    do
                    {
                      if ((_DWORD)v367)
                      {
                        v370 = 0;
                        v371 = v17[3];
                        v372 = v362[3];
                        if (v371 <= 1)
                          v373 = 1;
                        else
                          v373 = v17[3];
                        do
                        {
                          v374 = v373;
                          if ((_DWORD)v371)
                          {
                            do
                            {
                              *(_BYTE *)(v360 + v357++) = *(_BYTE *)(v359 + v358);
                              v358 += v372;
                              --v374;
                            }
                            while (v374);
                          }
                          v358 += v368 - v372 * v371;
                          ++v370;
                        }
                        while (v370 != v369);
                      }
                      v358 += v363 - v368 * v367;
                      ++v366;
                    }
                    while (v366 != v364);
                  }
                  v358 += v365;
                  ++v356;
                }
                while (v356 != v355);
              }
              break;
            default:
              v315 = v15[6];
              if (v315)
              {
                v316 = 0;
                v317 = *(_QWORD *)(v16 + 152);
                v318 = v15[19];
                do
                {
                  v319 = 0;
                  if ((v19 & 0x80000000) == 0)
                  {
                    v320 = *(_QWORD *)(v16 + 24);
                    v321 = v19;
                    v322 = v316;
                    do
                    {
                      v323 = ldiv(v322, v17[v321]);
                      v322 = v323.quot;
                      v319 += *(_QWORD *)(v320 + 8 * v321--) * v323.rem;
                    }
                    while (v321 != -1);
                  }
                  *(_BYTE *)(v318 + v316++) = *(_BYTE *)(v317 + (int)v319);
                }
                while (v316 != v315);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          v7 = **(_BYTE **)(*a1 + 152) / **(_BYTE **)(*a2 + 152);
          goto LABEL_10;
        case 1:
          v32 = *(_DWORD *)(*a2 + 160);
          if (v32 >= 1)
          {
            v33 = **(unsigned __int8 **)(*a1 + 152);
            v34 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v35 = *(unsigned __int8 **)(*a2 + 152);
            v36 = v32 + 1;
            do
            {
              v37 = *v35++;
              *v34++ = v33 / v37;
              --v36;
            }
            while (v36 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        default:
          v24 = *(_QWORD **)a3;
          v25 = *a1;
          v26 = *(int **)*a1;
          v27 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v26) >> 2;
          v28 = v27 - 1;
          if ((int)v27 - 1 >= -1)
            v28 = -1;
          v29 = v28 + 1;
          v30 = v27 + 1;
          break;
      }
      while (1)
      {
        v31 = v30 - 2;
        if (v30 - 2 < 0)
          break;
        --v30;
        if (*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v31) != *(_QWORD *)(v24[3] + 8 * v31))
          goto LABEL_101;
      }
      v30 = v29;
LABEL_101:
      v119 = (int **)*a2;
      v120 = *(int **)*a2;
      v121 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v120) >> 2;
      v122 = v121 - 1;
      if ((int)v121 - 1 >= -1)
        v122 = -1;
      v123 = v122 + 1;
      v124 = v121 + 1;
      while (1)
      {
        v125 = v124 - 2;
        if (v124 - 2 < 0)
          break;
        --v124;
        if (*(_QWORD *)&v119[3][2 * v125] != *(_QWORD *)(v24[3] + 8 * v125))
          goto LABEL_152;
      }
      v124 = v123;
LABEL_152:
      v167 = v27 + 1;
      while (1)
      {
        v168 = v167 - 2;
        if (v167 - 2 < 0)
          break;
        --v167;
        if (*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v168))
          goto LABEL_187;
      }
      v167 = v29;
LABEL_187:
      v181 = v121 + 1;
      while (1)
      {
        v182 = v181 - 2;
        if (v181 - 2 < 0)
          break;
        --v181;
        if (*(_QWORD *)&v119[3][2 * v182])
          goto LABEL_249;
      }
      v181 = v123;
LABEL_249:
      v209 = (uint64_t)(v24[1] - *v24) >> 2;
      if (v30 <= v124)
        v210 = v124;
      else
        v210 = v30;
      if (v30 <= v181)
        v30 = v181;
      if (v167 > v124)
        v124 = v167;
      if (v209 > v124)
      {
        v211 = 1;
      }
      else
      {
        v124 = (uint64_t)(v24[1] - *v24) >> 2;
        v211 = 4;
      }
      if (v209 > v30)
      {
        v212 = 2;
      }
      else
      {
        v30 = v124;
        v212 = v211;
      }
      if (v209 > v210)
      {
        v30 = v210;
        v212 = 3;
      }
      if (!v30)
        goto LABEL_275;
      v213 = *(_QWORD *)(v24[3] + 8 * (v30 - 1));
      if (v213 < 0x10)
        goto LABEL_275;
      switch(v212)
      {
        case 1:
          if (v30 == 2)
          {
            v1193 = *v26;
            if (*v26)
            {
              v1194 = 0;
              v1195 = 0;
              v1196 = 0;
              v1197 = *(_QWORD *)(v25 + 152);
              v1198 = v119[19];
              v1199 = v24[19];
              do
              {
                if (v26[1])
                {
                  v1200 = 0;
                  do
                  {
                    if ((int)v213 >= 1)
                    {
                      v1201 = 0;
                      v1202 = *(unsigned __int8 *)(v1197 + v1196);
                      v1203 = v213 + 1;
                      do
                      {
                        *(_BYTE *)(v1199 + v1201) = v1202 / *((unsigned __int8 *)v1198 + v1195 + v1201);
                        --v1203;
                        ++v1201;
                      }
                      while (v1203 > 1);
                      v25 = *a1;
                      v119 = (int **)*a2;
                      v26 = *(int **)*a1;
                    }
                    v1204 = *(_QWORD **)(v25 + 24);
                    v1205 = v1204[1];
                    v1196 += v1205;
                    v1195 += *((_QWORD *)v119[3] + 1);
                    v1199 += (int)v213;
                    ++v1200;
                    v1206 = v26[1];
                  }
                  while (v1200 < v1206);
                  v1193 = *v26;
                  v120 = *v119;
                }
                else
                {
                  v1206 = 0;
                  v1204 = *(_QWORD **)(v25 + 24);
                  v1205 = v1204[1];
                }
                v1196 = *v1204 + v1196 - v1206 * v1205;
                v1195 = *(_QWORD *)v119[3] + v1195 - *((_QWORD *)v119[3] + 1) * v120[1];
                ++v1194;
              }
              while (v1194 < v1193);
            }
          }
          else if (v30 == 1)
          {
            v845 = *v26;
            if (*v26)
            {
              v846 = 0;
              v847 = 0;
              v848 = 0;
              v849 = *(_QWORD *)(v25 + 152);
              v850 = v119[19];
              v851 = v24[19];
              do
              {
                if ((int)v213 >= 1)
                {
                  v852 = 0;
                  v853 = *(unsigned __int8 *)(v849 + v848);
                  v854 = v213 + 1;
                  do
                  {
                    *(_BYTE *)(v851 + v852) = v853 / *((unsigned __int8 *)v850 + v847 + v852);
                    --v854;
                    ++v852;
                  }
                  while (v854 > 1);
                  v25 = *a1;
                  v119 = (int **)*a2;
                  v845 = **(_DWORD **)*a1;
                }
                v848 += **(_QWORD **)(v25 + 24);
                v847 += *(_QWORD *)v119[3];
                v851 += (int)v213;
                ++v846;
              }
              while (v846 < v845);
            }
          }
          else if (v24[6])
          {
            v1660 = *(_QWORD *)(v24[3] + 8 * (v30 - 1));
            __Nx = 0;
            v1595 = (vDSP_Length)v119[19];
            v1607 = *(_QWORD *)(v25 + 152);
            v1628 = (int)v213;
            v1584 = v213 + 1;
            v1207 = v24[19];
            do
            {
              v1208 = *(_QWORD *)*a1;
              v1209 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1208) >> 2;
              v1210 = 0;
              v1211 = (v1209 - 1);
              if ((int)v1209 - 1 >= 0)
              {
                v1212 = *(_QWORD *)(*a1 + 24);
                v1213 = __Nx;
                do
                {
                  v1214 = ldiv(v1213, *(int *)(v1208 + 4 * v1211));
                  v1213 = v1214.quot;
                  v1210 += *(_QWORD *)(v1212 + 8 * v1211--) * v1214.rem;
                }
                while (v1211 != -1);
              }
              v1215 = *(_QWORD *)*a2;
              v1216 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1215) >> 2;
              v1217 = 0;
              v1218 = (v1216 - 1);
              if ((int)v1216 - 1 >= 0)
              {
                v1219 = *(_QWORD *)(*a2 + 24);
                v1220 = __Nx;
                do
                {
                  v1221 = ldiv(v1220, *(int *)(v1215 + 4 * v1218));
                  v1220 = v1221.quot;
                  v1217 += *(_QWORD *)(v1219 + 8 * v1218--) * v1221.rem;
                }
                while (v1218 != -1);
              }
              if ((int)v1660 >= 1)
              {
                v1222 = 0;
                v1223 = *(unsigned __int8 *)(v1607 + (int)v1210);
                v1224 = v1584;
                do
                {
                  *(_BYTE *)(v1207 + v1222) = v1223 / *(unsigned __int8 *)(v1595 + (int)v1217 + v1222);
                  --v1224;
                  ++v1222;
                }
                while (v1224 > 1);
                v24 = *(_QWORD **)a3;
              }
              v1207 += v1628;
              __Nx += v1628;
            }
            while (__Nx < v24[6]);
          }
          break;
        case 2:
          if (v30 == 2)
          {
            v1225 = *v26;
            if (*v26)
            {
              v1226 = 0;
              v1227 = 0;
              v1228 = 0;
              v1229 = *(_QWORD *)(v25 + 152);
              v1230 = v119[19];
              v1231 = (int)v213;
              v1232 = (int *)v24[19];
              do
              {
                if (v26[1])
                {
                  v1233 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(v1229 + v1228), 1, (int *)((char *)v1230 + v1227), v1232, 1, v1231);
                    v25 = *a1;
                    v1234 = *(_QWORD **)(*a1 + 24);
                    v1235 = v1234[1];
                    v1228 += v1235;
                    v119 = (int **)*a2;
                    v1236 = *(int **)(*a2 + 24);
                    v1237 = *((_QWORD *)v1236 + 1);
                    v1227 += v1237;
                    v1232 = (int *)((char *)v1232 + v1231);
                    ++v1233;
                    v26 = *(int **)*a1;
                    v1238 = v26[1];
                  }
                  while (v1233 < v1238);
                  v1225 = *v26;
                  v120 = *v119;
                }
                else
                {
                  v1238 = 0;
                  v1234 = *(_QWORD **)(v25 + 24);
                  v1235 = v1234[1];
                  v1236 = v119[3];
                  v1237 = *((_QWORD *)v1236 + 1);
                }
                v1228 = *v1234 + v1228 - v1238 * v1235;
                v1227 = *(_QWORD *)v1236 + v1227 - v1237 * v120[1];
                ++v1226;
              }
              while (v1226 < v1225);
            }
          }
          else if (v30 == 1)
          {
            if (*v26)
            {
              v855 = 0;
              v856 = 0;
              v857 = 0;
              v858 = *(_QWORD *)(v25 + 152);
              v859 = v119[19];
              v860 = (int)v213;
              v861 = (int *)v24[19];
              do
              {
                vDSP_vsdivi((const int *)(v858 + v857), 1, (int *)((char *)v859 + v856), v861, 1, v860);
                v857 += **(_QWORD **)(*a1 + 24);
                v856 += **(_QWORD **)(*a2 + 24);
                v861 = (int *)((char *)v861 + v860);
                ++v855;
              }
              while (v855 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            v1239 = 0;
            v1661 = v119[19];
            __Ny = *(_QWORD *)(v25 + 152);
            v1629 = (int)v213;
            v1240 = (int *)v24[19];
            do
            {
              v1241 = *(_QWORD *)*a1;
              v1242 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1241) >> 2;
              v1243 = 0;
              v1244 = (v1242 - 1);
              if ((int)v1242 - 1 >= 0)
              {
                v1245 = *(_QWORD *)(*a1 + 24);
                v1246 = v1239;
                do
                {
                  v1247 = ldiv(v1246, *(int *)(v1241 + 4 * v1244));
                  v1246 = v1247.quot;
                  v1243 += *(_QWORD *)(v1245 + 8 * v1244--) * v1247.rem;
                }
                while (v1244 != -1);
              }
              v1248 = *(_QWORD *)*a2;
              v1249 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1248) >> 2;
              v1250 = 0;
              v1251 = (v1249 - 1);
              if ((int)v1249 - 1 >= 0)
              {
                v1252 = *(_QWORD *)(*a2 + 24);
                v1253 = v1239;
                do
                {
                  v1254 = ldiv(v1253, *(int *)(v1248 + 4 * v1251));
                  v1253 = v1254.quot;
                  v1250 += *(_QWORD *)(v1252 + 8 * v1251--) * v1254.rem;
                }
                while (v1251 != -1);
              }
              vDSP_vsdivi((const int *)(__Ny + (int)v1243), 1, (int *)((char *)v1661 + (int)v1250), v1240, 1, v1629);
              v1240 = (int *)((char *)v1240 + v1629);
              v1239 += v1629;
            }
            while (v1239 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v30 == 2)
          {
            v979 = *v26;
            if (*v26)
            {
              v980 = 0;
              v981 = 0;
              v982 = 0;
              v983 = *(_QWORD *)(v25 + 152);
              v984 = v119[19];
              v985 = (int)v213;
              v986 = (int *)v24[19];
              do
              {
                if (v26[1])
                {
                  v987 = 0;
                  do
                  {
                    vDSP_vdivi((int *)((char *)v984 + v981), 1, (const int *)(v983 + v982), 1, v986, 1, v985);
                    v25 = *a1;
                    v988 = *(_QWORD **)(*a1 + 24);
                    v989 = v988[1];
                    v982 += v989;
                    v119 = (int **)*a2;
                    v990 = *(int **)(*a2 + 24);
                    v991 = *((_QWORD *)v990 + 1);
                    v981 += v991;
                    v986 = (int *)((char *)v986 + v985);
                    ++v987;
                    v26 = *(int **)*a1;
                    v992 = v26[1];
                  }
                  while (v987 < v992);
                  v979 = *v26;
                  v120 = *v119;
                }
                else
                {
                  v992 = 0;
                  v988 = *(_QWORD **)(v25 + 24);
                  v989 = v988[1];
                  v990 = v119[3];
                  v991 = *((_QWORD *)v990 + 1);
                }
                v982 = *v988 + v982 - v992 * v989;
                v981 = *(_QWORD *)v990 + v981 - v991 * v120[1];
                ++v980;
              }
              while (v980 < v979);
            }
          }
          else if (v30 == 1)
          {
            if (*v26)
            {
              v214 = 0;
              v215 = 0;
              v216 = 0;
              v217 = *(_QWORD *)(v25 + 152);
              v218 = v119[19];
              v219 = (int)v213;
              v220 = (int *)v24[19];
              do
              {
                vDSP_vdivi((int *)((char *)v218 + v215), 1, (const int *)(v217 + v216), 1, v220, 1, v219);
                v216 += **(_QWORD **)(*a1 + 24);
                v215 += **(_QWORD **)(*a2 + 24);
                v220 = (int *)((char *)v220 + v219);
                ++v214;
              }
              while (v214 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            v993 = 0;
            v1646 = v119[19];
            __Nj = *(_QWORD *)(v25 + 152);
            v1620 = (int)v213;
            v994 = (int *)v24[19];
            do
            {
              v995 = *(_QWORD *)*a1;
              v996 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v995) >> 2;
              v997 = 0;
              v998 = (v996 - 1);
              if ((int)v996 - 1 >= 0)
              {
                v999 = *(_QWORD *)(*a1 + 24);
                v1000 = v993;
                do
                {
                  v1001 = ldiv(v1000, *(int *)(v995 + 4 * v998));
                  v1000 = v1001.quot;
                  v997 += *(_QWORD *)(v999 + 8 * v998--) * v1001.rem;
                }
                while (v998 != -1);
              }
              v1002 = *(_QWORD *)*a2;
              v1003 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1002) >> 2;
              v1004 = 0;
              v1005 = (v1003 - 1);
              if ((int)v1003 - 1 >= 0)
              {
                v1006 = *(_QWORD *)(*a2 + 24);
                v1007 = v993;
                do
                {
                  v1008 = ldiv(v1007, *(int *)(v1002 + 4 * v1005));
                  v1007 = v1008.quot;
                  v1004 += *(_QWORD *)(v1006 + 8 * v1005--) * v1008.rem;
                }
                while (v1005 != -1);
              }
              vDSP_vdivi((int *)((char *)v1646 + (int)v1004), 1, (const int *)(__Nj + (int)v997), 1, v994, 1, v1620);
              v994 = (int *)((char *)v994 + v1620);
              v993 += v1620;
            }
            while (v993 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_275:
          switch(v209)
          {
            case 1uLL:
              if (v24[6])
              {
                v221 = 0;
                v222 = 0;
                v223 = 0;
                v224 = *(_QWORD *)(v25 + 152);
                v225 = v119[19];
                v226 = v24[19];
                do
                {
                  *(_BYTE *)(v226 + v221) = *(_BYTE *)(v224 + v223) / *((_BYTE *)v225 + v222);
                  v223 += **(_QWORD **)(*a1 + 24);
                  v222 += **(_QWORD **)(*a2 + 24);
                  ++v221;
                }
                while (v221 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v391 = *v26;
              if (*v26)
              {
                v392 = 0;
                v393 = 0;
                v394 = 0;
                v395 = 0;
                v396 = *(_QWORD *)(v25 + 152);
                v397 = v119[19];
                v398 = v24[19];
                do
                {
                  if (v26[1])
                  {
                    v399 = 0;
                    do
                    {
                      *(_BYTE *)(v398 + v393 + v399) = *(_BYTE *)(v396 + v395) / *((_BYTE *)v397 + v394);
                      v25 = *a1;
                      v400 = *(_QWORD **)(*a1 + 24);
                      v401 = v400[1];
                      v395 += v401;
                      v119 = (int **)*a2;
                      v402 = *(int **)(*a2 + 24);
                      v403 = *((_QWORD *)v402 + 1);
                      v394 += v403;
                      ++v399;
                      v26 = *(int **)*a1;
                      v404 = v26[1];
                    }
                    while (v399 < v404);
                    v391 = *v26;
                    v120 = *v119;
                    v393 += v399;
                  }
                  else
                  {
                    v404 = 0;
                    v400 = *(_QWORD **)(v25 + 24);
                    v401 = v400[1];
                    v402 = v119[3];
                    v403 = *((_QWORD *)v402 + 1);
                  }
                  v395 = *v400 + v395 - v404 * v401;
                  v394 = *(_QWORD *)v402 + v394 - v403 * v120[1];
                  ++v392;
                }
                while (v392 < v391);
              }
              break;
            case 3uLL:
              v405 = *v26;
              if (*v26)
              {
                v406 = 0;
                v407 = 0;
                v408 = 0;
                v409 = 0;
                v410 = *(_QWORD *)(v25 + 152);
                v411 = v119[19];
                v412 = v24[19];
                do
                {
                  if (v26[1])
                  {
                    v413 = 0;
                    do
                    {
                      if (v26[2])
                      {
                        v414 = 0;
                        do
                        {
                          *(_BYTE *)(v412 + v407 + v414) = *(_BYTE *)(v410 + v409) / *((_BYTE *)v411 + v408);
                          v25 = *a1;
                          v415 = *(_QWORD **)(*a1 + 24);
                          v416 = v415[2];
                          v409 += v416;
                          v119 = (int **)*a2;
                          v417 = *(int **)(*a2 + 24);
                          v418 = *((_QWORD *)v417 + 2);
                          v408 += v418;
                          ++v414;
                          v26 = *(int **)*a1;
                          v419 = v26[2];
                        }
                        while (v414 < v419);
                        v120 = *v119;
                        v407 += v414;
                      }
                      else
                      {
                        v419 = 0;
                        v415 = *(_QWORD **)(v25 + 24);
                        v416 = v415[2];
                        v417 = v119[3];
                        v418 = *((_QWORD *)v417 + 2);
                      }
                      v420 = v415[1];
                      v409 = v420 + v409 - v419 * v416;
                      v408 = *((_QWORD *)v417 + 1) + v408 - v418 * v120[2];
                      ++v413;
                      v421 = v26[1];
                    }
                    while (v413 < v421);
                    v405 = *v26;
                  }
                  else
                  {
                    v421 = 0;
                    v415 = *(_QWORD **)(v25 + 24);
                    v420 = v415[1];
                  }
                  v409 = *v415 + v409 - v421 * v420;
                  v408 = *(_QWORD *)v119[3] + v408 - *((_QWORD *)v119[3] + 1) * v120[1];
                  ++v406;
                }
                while (v406 < v405);
              }
              break;
            case 4uLL:
              v422 = *v26;
              if (*v26)
              {
                v423 = 0;
                v424 = 0;
                v425 = 0;
                v426 = 0;
                v427 = *(_QWORD *)(v25 + 152);
                v428 = v119[19];
                v429 = v24[19];
                do
                {
                  if (v26[1])
                  {
                    v430 = 0;
                    do
                    {
                      if (v26[2])
                      {
                        v431 = 0;
                        do
                        {
                          if (v26[3])
                          {
                            v432 = 0;
                            do
                            {
                              *(_BYTE *)(v429 + v424 + v432) = *(_BYTE *)(v427 + v426) / *((_BYTE *)v428 + v425);
                              v25 = *a1;
                              v433 = *(_QWORD **)(*a1 + 24);
                              v434 = v433[3];
                              v426 += v434;
                              v119 = (int **)*a2;
                              v435 = *(int **)(*a2 + 24);
                              v436 = *((_QWORD *)v435 + 3);
                              v425 += v436;
                              ++v432;
                              v26 = *(int **)*a1;
                              v437 = v26[3];
                            }
                            while (v432 < v437);
                            v120 = *v119;
                            v424 += v432;
                          }
                          else
                          {
                            v437 = 0;
                            v433 = *(_QWORD **)(v25 + 24);
                            v434 = v433[3];
                            v435 = v119[3];
                            v436 = *((_QWORD *)v435 + 3);
                          }
                          v438 = v433[2];
                          v426 = v438 + v426 - v437 * v434;
                          v425 = *((_QWORD *)v435 + 2) + v425 - v436 * v120[3];
                          ++v431;
                          v439 = v26[2];
                        }
                        while (v431 < v439);
                      }
                      else
                      {
                        v439 = 0;
                        v433 = *(_QWORD **)(v25 + 24);
                        v438 = v433[2];
                      }
                      v426 = v433[1] + v426 - v439 * v438;
                      v425 = *((_QWORD *)v119[3] + 1) + v425 - *((_QWORD *)v119[3] + 2) * v120[2];
                      ++v430;
                      v440 = v26[1];
                    }
                    while (v430 < v440);
                    v422 = *v26;
                  }
                  else
                  {
                    v440 = 0;
                  }
                  v426 = **(_QWORD **)(v25 + 24) + v426 - *(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) * v440;
                  v425 = *(_QWORD *)v119[3] + v425 - *((_QWORD *)v119[3] + 1) * v120[1];
                  ++v423;
                }
                while (v423 < v422);
              }
              break;
            default:
              if (v24[6])
              {
                v375 = 0;
                v1640 = v119[19];
                __Nd = *(_QWORD *)(v25 + 152);
                v376 = v24[19];
                do
                {
                  v377 = *(_QWORD *)*a1;
                  v378 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v377) >> 2;
                  v379 = 0;
                  v380 = (v378 - 1);
                  if ((int)v378 - 1 >= 0)
                  {
                    v381 = *(_QWORD *)(*a1 + 24);
                    v382 = v375;
                    do
                    {
                      v383 = ldiv(v382, *(int *)(v377 + 4 * v380));
                      v382 = v383.quot;
                      v379 += *(_QWORD *)(v381 + 8 * v380--) * v383.rem;
                    }
                    while (v380 != -1);
                  }
                  v384 = *(_QWORD *)*a2;
                  v385 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v384) >> 2;
                  v386 = 0;
                  v387 = (v385 - 1);
                  if ((int)v385 - 1 >= 0)
                  {
                    v388 = *(_QWORD *)(*a2 + 24);
                    v389 = v375;
                    do
                    {
                      v390 = ldiv(v389, *(int *)(v384 + 4 * v387));
                      v389 = v390.quot;
                      v386 += *(_QWORD *)(v388 + 8 * v387--) * v390.rem;
                    }
                    while (v387 != -1);
                  }
                  *(_BYTE *)(v376 + v375++) = *(_BYTE *)(__Nd + (int)v379) / *((_BYTE *)v1640 + (int)v386);
                }
                while (v375 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          v47 = *(_DWORD *)(*a2 + 160);
          if (v47 >= 1)
          {
            v48 = **(_DWORD **)(*a1 + 152);
            v49 = *(int **)(*(_QWORD *)a3 + 152);
            v50 = *(unsigned int **)(*a2 + 152);
            v51 = v47 + 1;
            do
            {
              v52 = *v50++;
              *v49++ = v48 / v52;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        default:
          v38 = *(_QWORD **)a3;
          v39 = *a1;
          v40 = *(int **)*a1;
          v41 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v40) >> 2;
          v42 = (v41 - 1);
          if ((int)v42 >= -1)
            v43 = -1;
          else
            v43 = v41 - 1;
          v44 = v43 + 1;
          v45 = v41 + 1;
          break;
      }
      while (1)
      {
        v46 = v45 - 2;
        if (v45 - 2 < 0)
          break;
        --v45;
        if (*(_QWORD *)(*(_QWORD *)(v39 + 24) + 8 * v46) != *(_QWORD *)(v38[3] + 8 * v46))
          goto LABEL_108;
      }
      v45 = v44;
LABEL_108:
      v126 = *a2;
      v127 = *(int **)*a2;
      v128 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v127) >> 2;
      v129 = (v128 - 1);
      if ((int)v129 >= -1)
        v130 = -1;
      else
        v130 = v128 - 1;
      v131 = v130 + 1;
      v132 = v128 + 1;
      while (1)
      {
        v133 = v132 - 2;
        if (v132 - 2 < 0)
          break;
        --v132;
        if (*(_QWORD *)(*(_QWORD *)(v126 + 24) + 8 * v133) != *(_QWORD *)(v38[3] + 8 * v133))
          goto LABEL_157;
      }
      v132 = v131;
LABEL_157:
      v169 = v41 + 1;
      while (1)
      {
        v170 = v169 - 2;
        if (v169 - 2 < 0)
          break;
        --v169;
        if (*(_QWORD *)(*(_QWORD *)(v39 + 24) + 8 * v170))
          goto LABEL_192;
      }
      v169 = v44;
LABEL_192:
      v183 = v128 + 1;
      while (1)
      {
        v184 = v183 - 2;
        if (v183 - 2 < 0)
          break;
        --v183;
        if (*(_QWORD *)(*(_QWORD *)(v126 + 24) + 8 * v184))
          goto LABEL_281;
      }
      v183 = v131;
LABEL_281:
      v227 = (uint64_t)(v38[1] - *v38) >> 2;
      if (v45 <= v132)
        v228 = v132;
      else
        v228 = v45;
      if (v45 <= v183)
        v45 = v183;
      if (v169 > v132)
        v132 = v169;
      if (v227 > v132)
      {
        v229 = 1;
      }
      else
      {
        v132 = (uint64_t)(v38[1] - *v38) >> 2;
        v229 = 4;
      }
      if (v227 > v45)
      {
        v230 = 2;
      }
      else
      {
        v45 = v132;
        v230 = v229;
      }
      if (v227 > v228)
      {
        v45 = v228;
        v230 = 3;
      }
      v1636 = v129;
      __N = v42;
      if (!v45 || *(_QWORD *)(v38[3] + 8 * (v45 - 1)) < 0x10uLL)
        goto LABEL_307;
      v1611 = *(_QWORD *)(v38[3] + 8 * (v45 - 1));
      switch(v230)
      {
        case 1:
          if (v45 == 2)
          {
            v1255 = *v40;
            if (*v40)
            {
              v1256 = 0;
              v1257 = 0;
              v1258 = 0;
              v1259 = *(_QWORD *)(v39 + 152);
              v1260 = *(_QWORD *)(v126 + 152);
              v1261 = v38[19];
              v1262 = *(uint64_t **)(v39 + 24);
              v1263 = *v1262;
              v1264 = v1262[1];
              v1265 = *(uint64_t **)(v126 + 24);
              v1266 = *v1265;
              v1267 = v1265[1];
              v1268 = v40[1];
              v1269 = v1268;
              do
              {
                if (v1269)
                {
                  v1270 = 0;
                  v1271 = v1260 + 4 * v1257;
                  do
                  {
                    if ((int)v1611 >= 1)
                    {
                      v1272 = 0;
                      v1273 = *(_DWORD *)(v1259 + 4 * v1258);
                      v1274 = v1611 + 1;
                      do
                      {
                        *(_DWORD *)(v1261 + v1272) = v1273 / *(_DWORD *)(v1271 + v1272);
                        --v1274;
                        v1272 += 4;
                      }
                      while (v1274 > 1);
                      v1268 = v40[1];
                    }
                    v1258 += v1264;
                    v1257 += v1267;
                    v1261 += 4 * (int)v1611;
                    ++v1270;
                    v1271 += 4 * v1267;
                  }
                  while (v1270 < v1268);
                  v1275 = v1268;
                  v1255 = *v40;
                  v1269 = v1268;
                }
                else
                {
                  v1275 = 0;
                }
                v1258 = v1258 + v1263 - v1275 * v1264;
                v1257 = v1257 + v1266 - v1267 * v127[1];
                ++v1256;
              }
              while (v1256 < v1255);
            }
          }
          else
          {
            v1582 = *a2;
            v1591 = *a1;
            if (v45 == 1)
            {
              v862 = *v40;
              if (*v40)
              {
                v863 = 0;
                v864 = 0;
                v865 = *(_QWORD *)(v39 + 152);
                v866 = *(_QWORD *)(v126 + 152);
                v867 = v38[19];
                v868 = **(_QWORD **)(v39 + 24);
                v869 = 4 * **(_QWORD **)(v126 + 24);
                do
                {
                  if ((int)v1611 >= 1)
                  {
                    v870 = 0;
                    v871 = *(_DWORD *)(v865 + 4 * v864);
                    v872 = v1611 + 1;
                    do
                    {
                      *(_DWORD *)(v867 + v870) = v871 / *(_DWORD *)(v866 + v870);
                      --v872;
                      v870 += 4;
                    }
                    while (v872 > 1);
                    v862 = *v40;
                  }
                  v864 += v868;
                  ++v863;
                  v867 += 4 * (int)v1611;
                  v866 += v869;
                }
                while (v863 < v862);
              }
            }
            else if (v38[6])
            {
              v1276 = v38[6];
              v1277 = 0;
              v1573 = *(_QWORD *)(v1582 + 152);
              v1577 = *(_QWORD *)(v39 + 152);
              v1278 = v38[19];
              do
              {
                v1279 = __N;
                if ((__N & 0x80000000) != 0)
                {
                  LODWORD(v1280) = 0;
                }
                else
                {
                  v1280 = 0;
                  v1281 = *(_QWORD *)(v1591 + 24);
                  v1282 = v1277;
                  do
                  {
                    v1283 = ldiv(v1282, v40[v1279]);
                    v1282 = v1283.quot;
                    v1280 += *(_QWORD *)(v1281 + 8 * v1279--) * v1283.rem;
                  }
                  while (v1279 != -1);
                }
                v1284 = v1636;
                if ((v1636 & 0x80000000) != 0)
                {
                  LODWORD(v1285) = 0;
                }
                else
                {
                  v1285 = 0;
                  v1286 = *(_QWORD *)(v1582 + 24);
                  v1287 = v1277;
                  do
                  {
                    v1288 = ldiv(v1287, v127[v1284]);
                    v1287 = v1288.quot;
                    v1285 += *(_QWORD *)(v1286 + 8 * v1284--) * v1288.rem;
                  }
                  while (v1284 != -1);
                }
                if ((int)v1611 >= 1)
                {
                  v1289 = 0;
                  v1290 = *(_DWORD *)(v1577 + 4 * (int)v1280);
                  v1291 = v1611 + 1;
                  do
                  {
                    *(_DWORD *)(v1278 + v1289) = v1290 / *(_DWORD *)(v1573 + 4 * (int)v1285 + v1289);
                    --v1291;
                    v1289 += 4;
                  }
                  while (v1291 > 1);
                }
                v1277 += (int)v1611;
                v1278 += 4 * (int)v1611;
              }
              while (v1277 < v1276);
            }
          }
          break;
        case 2:
          if (v45 == 2)
          {
            v1292 = *v40;
            if (*v40)
            {
              v1293 = 0;
              v1294 = 0;
              v1662 = 0;
              __Nz = *(_QWORD *)(v39 + 152);
              v1295 = (int *)v38[19];
              v1296 = *(_QWORD *)(v126 + 152);
              do
              {
                if (v40[1])
                {
                  v1297 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(__Nz + 4 * v1294), 1, (const int *)(v1296 + 4 * v1293), v1295, 1, (int)v1611);
                    v39 = *a1;
                    v1298 = *(_QWORD **)(*a1 + 24);
                    v1299 = v1298[1];
                    v1294 += v1299;
                    v1300 = *(_QWORD **)(*a2 + 24);
                    v1301 = v1300[1];
                    v1293 += v1301;
                    ++v1297;
                    v40 = *(int **)*a1;
                    v1302 = v40[1];
                    v1295 += (int)v1611;
                  }
                  while (v1297 < v1302);
                  v1292 = *v40;
                  v126 = *a2;
                  v127 = *(int **)*a2;
                }
                else
                {
                  v1302 = 0;
                  v1298 = *(_QWORD **)(v39 + 24);
                  v1299 = v1298[1];
                  v1300 = *(_QWORD **)(v126 + 24);
                  v1301 = v1300[1];
                }
                v1294 = *v1298 + v1294 - v1302 * v1299;
                v1293 = *v1300 + v1293 - v1301 * v127[1];
                ++v1662;
              }
              while (v1662 < v1292);
            }
          }
          else if (v45 == 1)
          {
            if (*v40)
            {
              v873 = 0;
              v874 = 0;
              v875 = 0;
              v876 = *(_QWORD *)(v39 + 152);
              v877 = *(_QWORD *)(v126 + 152);
              v878 = (int *)v38[19];
              do
              {
                vDSP_vsdivi((const int *)(v876 + 4 * v875), 1, (const int *)(v877 + 4 * v874), v878, 1, (int)v1611);
                v875 += **(_QWORD **)(*a1 + 24);
                v874 += **(_QWORD **)(*a2 + 24);
                ++v873;
                v878 += (int)v1611;
              }
              while (v873 < **(int **)*a1);
            }
          }
          else if (v38[6])
          {
            v1303 = 0;
            v1663 = *(_QWORD *)(v126 + 152);
            __Nba = *(_QWORD *)(v39 + 152);
            v1304 = (int *)v38[19];
            do
            {
              v1305 = *(_QWORD *)*a1;
              v1306 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1305) >> 2;
              v1307 = 0;
              v1308 = (v1306 - 1);
              if ((int)v1306 - 1 >= 0)
              {
                v1309 = *(_QWORD *)(*a1 + 24);
                v1310 = v1303;
                do
                {
                  v1311 = ldiv(v1310, *(int *)(v1305 + 4 * v1308));
                  v1310 = v1311.quot;
                  v1307 += *(_QWORD *)(v1309 + 8 * v1308--) * v1311.rem;
                }
                while (v1308 != -1);
              }
              v1312 = *(_QWORD *)*a2;
              v1313 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1312) >> 2;
              v1314 = 0;
              v1315 = (v1313 - 1);
              if ((int)v1313 - 1 >= 0)
              {
                v1316 = *(_QWORD *)(*a2 + 24);
                v1317 = v1303;
                do
                {
                  v1318 = ldiv(v1317, *(int *)(v1312 + 4 * v1315));
                  v1317 = v1318.quot;
                  v1314 += *(_QWORD *)(v1316 + 8 * v1315--) * v1318.rem;
                }
                while (v1315 != -1);
              }
              vDSP_vsdivi((const int *)(__Nba + 4 * (int)v1307), 1, (const int *)(v1663 + 4 * (int)v1314), v1304, 1, (int)v1611);
              v1304 += (int)v1611;
              v1303 += (int)v1611;
            }
            while (v1303 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v45 == 2)
          {
            v1009 = *v40;
            if (*v40)
            {
              v1010 = 0;
              v1011 = 0;
              v1647 = 0;
              __Nk = *(_QWORD *)(v39 + 152);
              v1012 = (int *)v38[19];
              v1605 = *(_QWORD *)(v126 + 152);
              do
              {
                if (v40[1])
                {
                  v1013 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v1605 + 4 * v1010), 1, (const int *)(__Nk + 4 * v1011), 1, v1012, 1, (int)v1611);
                    v39 = *a1;
                    v1014 = *(_QWORD **)(*a1 + 24);
                    v1015 = v1014[1];
                    v1011 += v1015;
                    v1016 = *(_QWORD **)(*a2 + 24);
                    v1017 = v1016[1];
                    v1010 += v1017;
                    ++v1013;
                    v40 = *(int **)*a1;
                    v1018 = v40[1];
                    v1012 += (int)v1611;
                  }
                  while (v1013 < v1018);
                  v1009 = *v40;
                  v126 = *a2;
                  v127 = *(int **)*a2;
                }
                else
                {
                  v1018 = 0;
                  v1014 = *(_QWORD **)(v39 + 24);
                  v1015 = v1014[1];
                  v1016 = *(_QWORD **)(v126 + 24);
                  v1017 = v1016[1];
                }
                v1011 = *v1014 + v1011 - v1018 * v1015;
                v1010 = *v1016 + v1010 - v1017 * v127[1];
                ++v1647;
              }
              while (v1647 < v1009);
            }
          }
          else if (v45 == 1)
          {
            if (*v40)
            {
              v231 = 0;
              v232 = 0;
              v233 = 0;
              v234 = *(_QWORD *)(v39 + 152);
              v235 = *(_QWORD *)(v126 + 152);
              v236 = (int *)v38[19];
              do
              {
                vDSP_vdivi((const int *)(v235 + 4 * v232), 1, (const int *)(v234 + 4 * v233), 1, v236, 1, (int)v1611);
                v233 += **(_QWORD **)(*a1 + 24);
                v232 += **(_QWORD **)(*a2 + 24);
                ++v231;
                v236 += (int)v1611;
              }
              while (v231 < **(int **)*a1);
            }
          }
          else if (v38[6])
          {
            v1019 = 0;
            v1648 = *(_QWORD *)(v126 + 152);
            __Nl = *(_QWORD *)(v39 + 152);
            v1020 = (int *)v38[19];
            do
            {
              v1021 = *(_QWORD *)*a1;
              v1022 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1021) >> 2;
              v1023 = 0;
              v1024 = (v1022 - 1);
              if ((int)v1022 - 1 >= 0)
              {
                v1025 = *(_QWORD *)(*a1 + 24);
                v1026 = v1019;
                do
                {
                  v1027 = ldiv(v1026, *(int *)(v1021 + 4 * v1024));
                  v1026 = v1027.quot;
                  v1023 += *(_QWORD *)(v1025 + 8 * v1024--) * v1027.rem;
                }
                while (v1024 != -1);
              }
              v1028 = *(_QWORD *)*a2;
              v1029 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1028) >> 2;
              v1030 = 0;
              v1031 = (v1029 - 1);
              if ((int)v1029 - 1 >= 0)
              {
                v1032 = *(_QWORD *)(*a2 + 24);
                v1033 = v1019;
                do
                {
                  v1034 = ldiv(v1033, *(int *)(v1028 + 4 * v1031));
                  v1033 = v1034.quot;
                  v1030 += *(_QWORD *)(v1032 + 8 * v1031--) * v1034.rem;
                }
                while (v1031 != -1);
              }
              vDSP_vdivi((const int *)(v1648 + 4 * (int)v1030), 1, (const int *)(__Nl + 4 * (int)v1023), 1, v1020, 1, (int)v1611);
              v1020 += (int)v1611;
              v1019 += (int)v1611;
            }
            while (v1019 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_307:
          switch(v227)
          {
            case 1uLL:
              v237 = v38[6];
              if (v237)
              {
                v238 = *(_DWORD **)(v39 + 152);
                v239 = *(_DWORD **)(v126 + 152);
                v240 = (int *)v38[19];
                v241 = 4 * **(_QWORD **)(v126 + 24);
                v242 = 4 * **(_QWORD **)(v39 + 24);
                do
                {
                  *v240++ = *v238 / *v239;
                  v239 = (_DWORD *)((char *)v239 + v241);
                  v238 = (_DWORD *)((char *)v238 + v242);
                  --v237;
                }
                while (v237);
              }
              break;
            case 2uLL:
              v454 = *v40;
              if (*v40)
              {
                v455 = 0;
                v456 = 0;
                v457 = 0;
                v458 = 0;
                v459 = *(_QWORD *)(v39 + 152);
                v460 = *(_QWORD *)(v126 + 152);
                v461 = v38[19];
                v462 = *(uint64_t **)(v39 + 24);
                v463 = *v462;
                v464 = v462[1];
                v465 = *(uint64_t **)(v126 + 24);
                v467 = *v465;
                v466 = v465[1];
                v468 = v40[1];
                do
                {
                  if (v468)
                  {
                    for (i = 0; i < v468; ++i)
                    {
                      *(_DWORD *)(v461 + 4 * v456 + 4 * i) = *(_DWORD *)(v459 + 4 * v458) / *(_DWORD *)(v460 + 4 * v457);
                      v458 += v464;
                      v457 += v466;
                      v468 = v40[1];
                    }
                    v470 = v468;
                    v454 = *v40;
                    v456 += i;
                  }
                  else
                  {
                    v470 = 0;
                  }
                  v458 = v458 + v463 - v470 * v464;
                  v457 = v457 + v467 - v466 * v127[1];
                  ++v455;
                }
                while (v455 < v454);
              }
              break;
            case 3uLL:
              v471 = *v40;
              if (*v40)
              {
                v472 = 0;
                v473 = 0;
                v474 = 0;
                v475 = 0;
                v476 = *(_QWORD *)(v39 + 152);
                v477 = *(_QWORD *)(v126 + 152);
                v478 = v38[19];
                v479 = *(uint64_t **)(v39 + 24);
                v480 = *v479;
                v481 = v479[1];
                v482 = *(uint64_t **)(v126 + 24);
                v483 = *v482;
                v484 = v482[1];
                v485 = v40[1];
                v486 = v485;
                do
                {
                  if (v486)
                  {
                    v487 = 0;
                    v488 = v479[2];
                    v489 = v482[2];
                    v490 = v40[2];
                    do
                    {
                      if (v490)
                      {
                        for (j = 0; j < v490; ++j)
                        {
                          *(_DWORD *)(v478 + 4 * v473 + 4 * j) = *(_DWORD *)(v476 + 4 * v475)
                                                               / *(_DWORD *)(v477 + 4 * v474);
                          v475 += v488;
                          v474 += v489;
                          v490 = v40[2];
                        }
                        v492 = v490;
                        v485 = v40[1];
                        v473 += j;
                      }
                      else
                      {
                        v492 = 0;
                      }
                      v475 = v475 + v481 - v492 * v488;
                      v474 = v474 + v484 - v489 * v127[2];
                      ++v487;
                    }
                    while (v487 < v485);
                    v493 = v485;
                    v471 = *v40;
                    v486 = v485;
                  }
                  else
                  {
                    v493 = 0;
                  }
                  v475 = v475 + v480 - v493 * v481;
                  v474 = v474 + v483 - v484 * v127[1];
                  ++v472;
                }
                while (v472 < v471);
              }
              break;
            case 4uLL:
              v494 = *v40;
              if (*v40)
              {
                v495 = 0;
                v496 = 0;
                v497 = 0;
                v498 = 0;
                v499 = *(_QWORD *)(v39 + 152);
                v500 = *(_QWORD *)(v126 + 152);
                v501 = v38[19];
                v502 = *(uint64_t **)(v39 + 24);
                v503 = *v502;
                v504 = v502[1];
                v505 = *(uint64_t **)(v126 + 24);
                v506 = *v505;
                v507 = v505[1];
                v508 = v40[1];
                v509 = v508;
                do
                {
                  if (v509)
                  {
                    v510 = 0;
                    v511 = v502[2];
                    v512 = v505[2];
                    v513 = v40[2];
                    v514 = v513;
                    do
                    {
                      if (v514)
                      {
                        v515 = 0;
                        v516 = v502[3];
                        v517 = v505[3];
                        v518 = v40[3];
                        do
                        {
                          if (v518)
                          {
                            for (k = 0; k < v518; ++k)
                            {
                              *(_DWORD *)(v501 + 4 * v496 + 4 * k) = *(_DWORD *)(v499 + 4 * v498)
                                                                   / *(_DWORD *)(v500 + 4 * v497);
                              v498 += v516;
                              v497 += v517;
                              v518 = v40[3];
                            }
                            v520 = v518;
                            v513 = v40[2];
                            v496 += k;
                          }
                          else
                          {
                            v520 = 0;
                          }
                          v498 = v498 + v511 - v520 * v516;
                          v497 = v497 + v512 - v517 * v127[3];
                          ++v515;
                        }
                        while (v515 < v513);
                        v521 = v513;
                        v508 = v40[1];
                        v514 = v513;
                      }
                      else
                      {
                        v521 = 0;
                      }
                      v498 = v498 + v504 - v521 * v511;
                      v497 = v497 + v507 - v512 * v127[2];
                      ++v510;
                    }
                    while (v510 < v508);
                    v522 = v508;
                    v494 = *v40;
                    v509 = v508;
                  }
                  else
                  {
                    v522 = 0;
                  }
                  v498 = v498 + v503 - v522 * v504;
                  v497 = v497 + v506 - v507 * v127[1];
                  ++v495;
                }
                while (v495 < v494);
              }
              break;
            default:
              v441 = v38[6];
              if (v441)
              {
                v442 = v39;
                v443 = 0;
                v1599 = *(_QWORD *)(v126 + 152);
                v1613 = *(_QWORD *)(v39 + 152);
                v1586 = v38[19];
                do
                {
                  v444 = __N;
                  if ((__N & 0x80000000) != 0)
                  {
                    LODWORD(v445) = 0;
                  }
                  else
                  {
                    v445 = 0;
                    v446 = *(_QWORD *)(v442 + 24);
                    v447 = v443;
                    do
                    {
                      v448 = ldiv(v447, v40[v444]);
                      v447 = v448.quot;
                      v445 += *(_QWORD *)(v446 + 8 * v444--) * v448.rem;
                    }
                    while (v444 != -1);
                  }
                  v449 = v1636;
                  if ((v1636 & 0x80000000) != 0)
                  {
                    LODWORD(v450) = 0;
                  }
                  else
                  {
                    v450 = 0;
                    v451 = *(_QWORD *)(v126 + 24);
                    v452 = v443;
                    do
                    {
                      v453 = ldiv(v452, v127[v449]);
                      v452 = v453.quot;
                      v450 += *(_QWORD *)(v451 + 8 * v449--) * v453.rem;
                    }
                    while (v449 != -1);
                  }
                  *(_DWORD *)(v1586 + 4 * v443++) = *(_DWORD *)(v1613 + 4 * (int)v445)
                                                  / *(_DWORD *)(v1599 + 4 * (int)v450);
                }
                while (v443 != v441);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v11)
      {
        case 0:
          v7 = **(char **)(*a1 + 152) / **(char **)(*a2 + 152);
LABEL_10:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          v61 = *(_DWORD *)(*a2 + 160);
          if (v61 >= 1)
          {
            v62 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v63 = *(char **)(*a2 + 152);
            v64 = **(char **)(*a1 + 152);
            v65 = v61 + 1;
            do
            {
              v66 = *v63++;
              *v62++ = v64 / v66;
              --v65;
            }
            while (v65 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        default:
          v53 = *(_QWORD **)a3;
          v54 = *a1;
          v55 = *(int **)*a1;
          v56 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v55) >> 2;
          v57 = v56 - 1;
          if ((int)v56 - 1 >= -1)
            v57 = -1;
          v58 = v57 + 1;
          v59 = v56 + 1;
          break;
      }
      while (1)
      {
        v60 = v59 - 2;
        if (v59 - 2 < 0)
          break;
        --v59;
        if (*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8 * v60) != *(_QWORD *)(v53[3] + 8 * v60))
          goto LABEL_116;
      }
      v59 = v58;
LABEL_116:
      v134 = (int **)*a2;
      v135 = *(int **)*a2;
      v136 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v135) >> 2;
      v137 = v136 - 1;
      if ((int)v136 - 1 >= -1)
        v137 = -1;
      v138 = v137 + 1;
      v139 = v136 + 1;
      while (1)
      {
        v140 = v139 - 2;
        if (v139 - 2 < 0)
          break;
        --v139;
        if (*(_QWORD *)&v134[3][2 * v140] != *(_QWORD *)(v53[3] + 8 * v140))
          goto LABEL_162;
      }
      v139 = v138;
LABEL_162:
      v171 = v56 + 1;
      while (1)
      {
        v172 = v171 - 2;
        if (v171 - 2 < 0)
          break;
        --v171;
        if (*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8 * v172))
          goto LABEL_197;
      }
      v171 = v58;
LABEL_197:
      v185 = v136 + 1;
      while (1)
      {
        v186 = v185 - 2;
        if (v185 - 2 < 0)
          break;
        --v185;
        if (*(_QWORD *)&v134[3][2 * v186])
          goto LABEL_313;
      }
      v185 = v138;
LABEL_313:
      v243 = (uint64_t)(v53[1] - *v53) >> 2;
      if (v59 <= v139)
        v244 = v139;
      else
        v244 = v59;
      if (v59 <= v185)
        v59 = v185;
      if (v171 > v139)
        v139 = v171;
      if (v243 > v139)
      {
        v245 = 1;
      }
      else
      {
        v139 = (uint64_t)(v53[1] - *v53) >> 2;
        v245 = 4;
      }
      if (v243 > v59)
      {
        v246 = 2;
      }
      else
      {
        v59 = v139;
        v246 = v245;
      }
      if (v243 > v244)
      {
        v59 = v244;
        v246 = 3;
      }
      if (!v59)
        goto LABEL_339;
      v247 = *(_QWORD *)(v53[3] + 8 * (v59 - 1));
      if (v247 < 0x10)
        goto LABEL_339;
      switch(v246)
      {
        case 1:
          if (v59 == 2)
          {
            v1319 = *v55;
            if (*v55)
            {
              v1320 = 0;
              v1321 = 0;
              v1322 = 0;
              v1323 = *(_QWORD *)(v54 + 152);
              v1324 = v134[19];
              v1325 = v53[19];
              do
              {
                if (v55[1])
                {
                  v1326 = 0;
                  do
                  {
                    if ((int)v247 >= 1)
                    {
                      v1327 = 0;
                      v1328 = *(char *)(v1323 + v1322);
                      v1329 = v247 + 1;
                      do
                      {
                        *(_BYTE *)(v1325 + v1327) = v1328 / *((char *)v1324 + v1321 + v1327);
                        --v1329;
                        ++v1327;
                      }
                      while (v1329 > 1);
                      v54 = *a1;
                      v134 = (int **)*a2;
                      v55 = *(int **)*a1;
                    }
                    v1330 = *(_QWORD **)(v54 + 24);
                    v1331 = v1330[1];
                    v1322 += v1331;
                    v1321 += *((_QWORD *)v134[3] + 1);
                    v1325 += (int)v247;
                    ++v1326;
                    v1332 = v55[1];
                  }
                  while (v1326 < v1332);
                  v1319 = *v55;
                  v135 = *v134;
                }
                else
                {
                  v1332 = 0;
                  v1330 = *(_QWORD **)(v54 + 24);
                  v1331 = v1330[1];
                }
                v1322 = *v1330 + v1322 - v1332 * v1331;
                v1321 = *(_QWORD *)v134[3] + v1321 - *((_QWORD *)v134[3] + 1) * v135[1];
                ++v1320;
              }
              while (v1320 < v1319);
            }
          }
          else if (v59 == 1)
          {
            v879 = *v55;
            if (*v55)
            {
              v880 = 0;
              v881 = 0;
              v882 = 0;
              v883 = *(_QWORD *)(v54 + 152);
              v884 = v134[19];
              v885 = v53[19];
              do
              {
                if ((int)v247 >= 1)
                {
                  v886 = 0;
                  v887 = *(char *)(v883 + v882);
                  v888 = v247 + 1;
                  do
                  {
                    *(_BYTE *)(v885 + v886) = v887 / *((char *)v884 + v881 + v886);
                    --v888;
                    ++v886;
                  }
                  while (v888 > 1);
                  v54 = *a1;
                  v134 = (int **)*a2;
                  v879 = **(_DWORD **)*a1;
                }
                v882 += **(_QWORD **)(v54 + 24);
                v881 += *(_QWORD *)v134[3];
                v885 += (int)v247;
                ++v880;
              }
              while (v880 < v879);
            }
          }
          else if (v53[6])
          {
            v1664 = *(_QWORD *)(v53[3] + 8 * (v59 - 1));
            __Nbb = 0;
            v1596 = (vDSP_Length)v134[19];
            v1608 = *(_QWORD *)(v54 + 152);
            v1630 = (int)v247;
            v1585 = v247 + 1;
            v1333 = v53[19];
            do
            {
              v1334 = *(_QWORD *)*a1;
              v1335 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1334) >> 2;
              v1336 = 0;
              v1337 = (v1335 - 1);
              if ((int)v1335 - 1 >= 0)
              {
                v1338 = *(_QWORD *)(*a1 + 24);
                v1339 = __Nbb;
                do
                {
                  v1340 = ldiv(v1339, *(int *)(v1334 + 4 * v1337));
                  v1339 = v1340.quot;
                  v1336 += *(_QWORD *)(v1338 + 8 * v1337--) * v1340.rem;
                }
                while (v1337 != -1);
              }
              v1341 = *(_QWORD *)*a2;
              v1342 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1341) >> 2;
              v1343 = 0;
              v1344 = (v1342 - 1);
              if ((int)v1342 - 1 >= 0)
              {
                v1345 = *(_QWORD *)(*a2 + 24);
                v1346 = __Nbb;
                do
                {
                  v1347 = ldiv(v1346, *(int *)(v1341 + 4 * v1344));
                  v1346 = v1347.quot;
                  v1343 += *(_QWORD *)(v1345 + 8 * v1344--) * v1347.rem;
                }
                while (v1344 != -1);
              }
              if ((int)v1664 >= 1)
              {
                v1348 = 0;
                v1349 = *(char *)(v1608 + (int)v1336);
                v1350 = v1585;
                do
                {
                  *(_BYTE *)(v1333 + v1348) = v1349 / *(char *)(v1596 + (int)v1343 + v1348);
                  --v1350;
                  ++v1348;
                }
                while (v1350 > 1);
                v53 = *(_QWORD **)a3;
              }
              v1333 += v1630;
              __Nbb += v1630;
            }
            while (__Nbb < v53[6]);
          }
          break;
        case 2:
          if (v59 == 2)
          {
            v1351 = *v55;
            if (*v55)
            {
              v1352 = 0;
              v1353 = 0;
              v1354 = 0;
              v1355 = *(_QWORD *)(v54 + 152);
              v1356 = v134[19];
              v1357 = (int)v247;
              v1358 = (int *)v53[19];
              do
              {
                if (v55[1])
                {
                  v1359 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(v1355 + v1354), 1, (int *)((char *)v1356 + v1353), v1358, 1, v1357);
                    v54 = *a1;
                    v1360 = *(_QWORD **)(*a1 + 24);
                    v1361 = v1360[1];
                    v1354 += v1361;
                    v134 = (int **)*a2;
                    v1362 = *(int **)(*a2 + 24);
                    v1363 = *((_QWORD *)v1362 + 1);
                    v1353 += v1363;
                    v1358 = (int *)((char *)v1358 + v1357);
                    ++v1359;
                    v55 = *(int **)*a1;
                    v1364 = v55[1];
                  }
                  while (v1359 < v1364);
                  v1351 = *v55;
                  v135 = *v134;
                }
                else
                {
                  v1364 = 0;
                  v1360 = *(_QWORD **)(v54 + 24);
                  v1361 = v1360[1];
                  v1362 = v134[3];
                  v1363 = *((_QWORD *)v1362 + 1);
                }
                v1354 = *v1360 + v1354 - v1364 * v1361;
                v1353 = *(_QWORD *)v1362 + v1353 - v1363 * v135[1];
                ++v1352;
              }
              while (v1352 < v1351);
            }
          }
          else if (v59 == 1)
          {
            if (*v55)
            {
              v889 = 0;
              v890 = 0;
              v891 = 0;
              v892 = *(_QWORD *)(v54 + 152);
              v893 = v134[19];
              v894 = (int)v247;
              v895 = (int *)v53[19];
              do
              {
                vDSP_vsdivi((const int *)(v892 + v891), 1, (int *)((char *)v893 + v890), v895, 1, v894);
                v891 += **(_QWORD **)(*a1 + 24);
                v890 += **(_QWORD **)(*a2 + 24);
                v895 = (int *)((char *)v895 + v894);
                ++v889;
              }
              while (v889 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            v1365 = 0;
            v1665 = v134[19];
            __Nbc = *(_QWORD *)(v54 + 152);
            v1631 = (int)v247;
            v1366 = (int *)v53[19];
            do
            {
              v1367 = *(_QWORD *)*a1;
              v1368 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1367) >> 2;
              v1369 = 0;
              v1370 = (v1368 - 1);
              if ((int)v1368 - 1 >= 0)
              {
                v1371 = *(_QWORD *)(*a1 + 24);
                v1372 = v1365;
                do
                {
                  v1373 = ldiv(v1372, *(int *)(v1367 + 4 * v1370));
                  v1372 = v1373.quot;
                  v1369 += *(_QWORD *)(v1371 + 8 * v1370--) * v1373.rem;
                }
                while (v1370 != -1);
              }
              v1374 = *(_QWORD *)*a2;
              v1375 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1374) >> 2;
              v1376 = 0;
              v1377 = (v1375 - 1);
              if ((int)v1375 - 1 >= 0)
              {
                v1378 = *(_QWORD *)(*a2 + 24);
                v1379 = v1365;
                do
                {
                  v1380 = ldiv(v1379, *(int *)(v1374 + 4 * v1377));
                  v1379 = v1380.quot;
                  v1376 += *(_QWORD *)(v1378 + 8 * v1377--) * v1380.rem;
                }
                while (v1377 != -1);
              }
              vDSP_vsdivi((const int *)(__Nbc + (int)v1369), 1, (int *)((char *)v1665 + (int)v1376), v1366, 1, v1631);
              v1366 = (int *)((char *)v1366 + v1631);
              v1365 += v1631;
            }
            while (v1365 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v59 == 2)
          {
            v1035 = *v55;
            if (*v55)
            {
              v1036 = 0;
              v1037 = 0;
              v1038 = 0;
              v1039 = *(_QWORD *)(v54 + 152);
              v1040 = v134[19];
              v1041 = (int)v247;
              v1042 = (int *)v53[19];
              do
              {
                if (v55[1])
                {
                  v1043 = 0;
                  do
                  {
                    vDSP_vdivi((int *)((char *)v1040 + v1037), 1, (const int *)(v1039 + v1038), 1, v1042, 1, v1041);
                    v54 = *a1;
                    v1044 = *(_QWORD **)(*a1 + 24);
                    v1045 = v1044[1];
                    v1038 += v1045;
                    v134 = (int **)*a2;
                    v1046 = *(int **)(*a2 + 24);
                    v1047 = *((_QWORD *)v1046 + 1);
                    v1037 += v1047;
                    v1042 = (int *)((char *)v1042 + v1041);
                    ++v1043;
                    v55 = *(int **)*a1;
                    v1048 = v55[1];
                  }
                  while (v1043 < v1048);
                  v1035 = *v55;
                  v135 = *v134;
                }
                else
                {
                  v1048 = 0;
                  v1044 = *(_QWORD **)(v54 + 24);
                  v1045 = v1044[1];
                  v1046 = v134[3];
                  v1047 = *((_QWORD *)v1046 + 1);
                }
                v1038 = *v1044 + v1038 - v1048 * v1045;
                v1037 = *(_QWORD *)v1046 + v1037 - v1047 * v135[1];
                ++v1036;
              }
              while (v1036 < v1035);
            }
          }
          else if (v59 == 1)
          {
            if (*v55)
            {
              v248 = 0;
              v249 = 0;
              v250 = 0;
              v251 = *(_QWORD *)(v54 + 152);
              v252 = v134[19];
              v253 = (int)v247;
              v254 = (int *)v53[19];
              do
              {
                vDSP_vdivi((int *)((char *)v252 + v249), 1, (const int *)(v251 + v250), 1, v254, 1, v253);
                v250 += **(_QWORD **)(*a1 + 24);
                v249 += **(_QWORD **)(*a2 + 24);
                v254 = (int *)((char *)v254 + v253);
                ++v248;
              }
              while (v248 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            v1049 = 0;
            v1649 = v134[19];
            __Nm = *(_QWORD *)(v54 + 152);
            v1621 = (int)v247;
            v1050 = (int *)v53[19];
            do
            {
              v1051 = *(_QWORD *)*a1;
              v1052 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1051) >> 2;
              v1053 = 0;
              v1054 = (v1052 - 1);
              if ((int)v1052 - 1 >= 0)
              {
                v1055 = *(_QWORD *)(*a1 + 24);
                v1056 = v1049;
                do
                {
                  v1057 = ldiv(v1056, *(int *)(v1051 + 4 * v1054));
                  v1056 = v1057.quot;
                  v1053 += *(_QWORD *)(v1055 + 8 * v1054--) * v1057.rem;
                }
                while (v1054 != -1);
              }
              v1058 = *(_QWORD *)*a2;
              v1059 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1058) >> 2;
              v1060 = 0;
              v1061 = (v1059 - 1);
              if ((int)v1059 - 1 >= 0)
              {
                v1062 = *(_QWORD *)(*a2 + 24);
                v1063 = v1049;
                do
                {
                  v1064 = ldiv(v1063, *(int *)(v1058 + 4 * v1061));
                  v1063 = v1064.quot;
                  v1060 += *(_QWORD *)(v1062 + 8 * v1061--) * v1064.rem;
                }
                while (v1061 != -1);
              }
              vDSP_vdivi((int *)((char *)v1649 + (int)v1060), 1, (const int *)(__Nm + (int)v1053), 1, v1050, 1, v1621);
              v1050 = (int *)((char *)v1050 + v1621);
              v1049 += v1621;
            }
            while (v1049 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_339:
          switch(v243)
          {
            case 1uLL:
              if (v53[6])
              {
                v255 = 0;
                v256 = 0;
                v257 = 0;
                v258 = *(_QWORD *)(v54 + 152);
                v259 = v134[19];
                v260 = v53[19];
                do
                {
                  *(_BYTE *)(v260 + v255) = *(char *)(v258 + v257) / *((char *)v259 + v256);
                  v257 += **(_QWORD **)(*a1 + 24);
                  v256 += **(_QWORD **)(*a2 + 24);
                  ++v255;
                }
                while (v255 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v539 = *v55;
              if (*v55)
              {
                v540 = 0;
                v541 = 0;
                v542 = 0;
                v543 = 0;
                v544 = *(_QWORD *)(v54 + 152);
                v545 = v134[19];
                v546 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v547 = 0;
                    do
                    {
                      *(_BYTE *)(v546 + v541 + v547) = *(char *)(v544 + v543) / *((char *)v545 + v542);
                      v54 = *a1;
                      v548 = *(_QWORD **)(*a1 + 24);
                      v549 = v548[1];
                      v543 += v549;
                      v134 = (int **)*a2;
                      v550 = *(int **)(*a2 + 24);
                      v551 = *((_QWORD *)v550 + 1);
                      v542 += v551;
                      ++v547;
                      v55 = *(int **)*a1;
                      v552 = v55[1];
                    }
                    while (v547 < v552);
                    v539 = *v55;
                    v135 = *v134;
                    v541 += v547;
                  }
                  else
                  {
                    v552 = 0;
                    v548 = *(_QWORD **)(v54 + 24);
                    v549 = v548[1];
                    v550 = v134[3];
                    v551 = *((_QWORD *)v550 + 1);
                  }
                  v543 = *v548 + v543 - v552 * v549;
                  v542 = *(_QWORD *)v550 + v542 - v551 * v135[1];
                  ++v540;
                }
                while (v540 < v539);
              }
              break;
            case 3uLL:
              v553 = *v55;
              if (*v55)
              {
                v554 = 0;
                v555 = 0;
                v556 = 0;
                v557 = 0;
                v558 = *(_QWORD *)(v54 + 152);
                v559 = v134[19];
                v560 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v561 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v562 = 0;
                        do
                        {
                          *(_BYTE *)(v560 + v555 + v562) = *(char *)(v558 + v557) / *((char *)v559 + v556);
                          v54 = *a1;
                          v563 = *(_QWORD **)(*a1 + 24);
                          v564 = v563[2];
                          v557 += v564;
                          v134 = (int **)*a2;
                          v565 = *(int **)(*a2 + 24);
                          v566 = *((_QWORD *)v565 + 2);
                          v556 += v566;
                          ++v562;
                          v55 = *(int **)*a1;
                          v567 = v55[2];
                        }
                        while (v562 < v567);
                        v135 = *v134;
                        v555 += v562;
                      }
                      else
                      {
                        v567 = 0;
                        v563 = *(_QWORD **)(v54 + 24);
                        v564 = v563[2];
                        v565 = v134[3];
                        v566 = *((_QWORD *)v565 + 2);
                      }
                      v568 = v563[1];
                      v557 = v568 + v557 - v567 * v564;
                      v556 = *((_QWORD *)v565 + 1) + v556 - v566 * v135[2];
                      ++v561;
                      v569 = v55[1];
                    }
                    while (v561 < v569);
                    v553 = *v55;
                  }
                  else
                  {
                    v569 = 0;
                    v563 = *(_QWORD **)(v54 + 24);
                    v568 = v563[1];
                  }
                  v557 = *v563 + v557 - v569 * v568;
                  v556 = *(_QWORD *)v134[3] + v556 - *((_QWORD *)v134[3] + 1) * v135[1];
                  ++v554;
                }
                while (v554 < v553);
              }
              break;
            case 4uLL:
              v570 = *v55;
              if (*v55)
              {
                v571 = 0;
                v572 = 0;
                v573 = 0;
                v574 = 0;
                v575 = *(_QWORD *)(v54 + 152);
                v576 = v134[19];
                v577 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v578 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v579 = 0;
                        do
                        {
                          if (v55[3])
                          {
                            v580 = 0;
                            do
                            {
                              *(_BYTE *)(v577 + v572 + v580) = *(char *)(v575 + v574) / *((char *)v576 + v573);
                              v54 = *a1;
                              v581 = *(_QWORD **)(*a1 + 24);
                              v582 = v581[3];
                              v574 += v582;
                              v134 = (int **)*a2;
                              v583 = *(int **)(*a2 + 24);
                              v584 = *((_QWORD *)v583 + 3);
                              v573 += v584;
                              ++v580;
                              v55 = *(int **)*a1;
                              v585 = v55[3];
                            }
                            while (v580 < v585);
                            v135 = *v134;
                            v572 += v580;
                          }
                          else
                          {
                            v585 = 0;
                            v581 = *(_QWORD **)(v54 + 24);
                            v582 = v581[3];
                            v583 = v134[3];
                            v584 = *((_QWORD *)v583 + 3);
                          }
                          v586 = v581[2];
                          v574 = v586 + v574 - v585 * v582;
                          v573 = *((_QWORD *)v583 + 2) + v573 - v584 * v135[3];
                          ++v579;
                          v587 = v55[2];
                        }
                        while (v579 < v587);
                      }
                      else
                      {
                        v587 = 0;
                        v581 = *(_QWORD **)(v54 + 24);
                        v586 = v581[2];
                      }
                      v574 = v581[1] + v574 - v587 * v586;
                      v573 = *((_QWORD *)v134[3] + 1) + v573 - *((_QWORD *)v134[3] + 2) * v135[2];
                      ++v578;
                      v588 = v55[1];
                    }
                    while (v578 < v588);
                    v570 = *v55;
                  }
                  else
                  {
                    v588 = 0;
                  }
                  v574 = **(_QWORD **)(v54 + 24) + v574 - *(_QWORD *)(*(_QWORD *)(v54 + 24) + 8) * v588;
                  v573 = *(_QWORD *)v134[3] + v573 - *((_QWORD *)v134[3] + 1) * v135[1];
                  ++v571;
                }
                while (v571 < v570);
              }
              break;
            default:
              if (v53[6])
              {
                v523 = 0;
                v1641 = v134[19];
                __Ne = *(_QWORD *)(v54 + 152);
                v524 = v53[19];
                do
                {
                  v525 = *(_QWORD *)*a1;
                  v526 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v525) >> 2;
                  v527 = 0;
                  v528 = (v526 - 1);
                  if ((int)v526 - 1 >= 0)
                  {
                    v529 = *(_QWORD *)(*a1 + 24);
                    v530 = v523;
                    do
                    {
                      v531 = ldiv(v530, *(int *)(v525 + 4 * v528));
                      v530 = v531.quot;
                      v527 += *(_QWORD *)(v529 + 8 * v528--) * v531.rem;
                    }
                    while (v528 != -1);
                  }
                  v532 = *(_QWORD *)*a2;
                  v533 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v532) >> 2;
                  v534 = 0;
                  v535 = (v533 - 1);
                  if ((int)v533 - 1 >= 0)
                  {
                    v536 = *(_QWORD *)(*a2 + 24);
                    v537 = v523;
                    do
                    {
                      v538 = ldiv(v537, *(int *)(v532 + 4 * v535));
                      v537 = v538.quot;
                      v534 += *(_QWORD *)(v536 + 8 * v535--) * v538.rem;
                    }
                    while (v535 != -1);
                  }
                  *(_BYTE *)(v524 + v523++) = *(char *)(__Ne + (int)v527) / *((char *)v1641 + (int)v534);
                }
                while (v523 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v12)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
LABEL_13:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = v10;
          return;
        case 1:
          v76 = *(_DWORD *)(*a2 + 160);
          if (v76 >= 1)
          {
            v77 = **(_DWORD **)(*a1 + 152);
            v78 = *(int **)(*(_QWORD *)a3 + 152);
            v79 = *(int **)(*a2 + 152);
            v80 = v76 + 1;
            do
            {
              v81 = *v79++;
              *v78++ = v77 / v81;
              --v80;
            }
            while (v80 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        default:
          v67 = *(_QWORD **)a3;
          v68 = *a1;
          v69 = *(int **)*a1;
          v70 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v69) >> 2;
          v71 = (v70 - 1);
          if ((int)v71 >= -1)
            v72 = -1;
          else
            v72 = v70 - 1;
          v73 = v72 + 1;
          v74 = v70 + 1;
          break;
      }
      while (1)
      {
        v75 = v74 - 2;
        if (v74 - 2 < 0)
          break;
        --v74;
        if (*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v75) != *(_QWORD *)(v67[3] + 8 * v75))
          goto LABEL_123;
      }
      v74 = v73;
LABEL_123:
      v141 = *a2;
      v142 = *(int **)*a2;
      v143 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v142) >> 2;
      v144 = (v143 - 1);
      if ((int)v144 >= -1)
        v145 = -1;
      else
        v145 = v143 - 1;
      v146 = v145 + 1;
      v147 = v143 + 1;
      while (1)
      {
        v148 = v147 - 2;
        if (v147 - 2 < 0)
          break;
        --v147;
        if (*(_QWORD *)(*(_QWORD *)(v141 + 24) + 8 * v148) != *(_QWORD *)(v67[3] + 8 * v148))
          goto LABEL_167;
      }
      v147 = v146;
LABEL_167:
      v173 = v70 + 1;
      while (1)
      {
        v174 = v173 - 2;
        if (v173 - 2 < 0)
          break;
        --v173;
        if (*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v174))
          goto LABEL_202;
      }
      v173 = v73;
LABEL_202:
      v187 = v143 + 1;
      while (1)
      {
        v188 = v187 - 2;
        if (v187 - 2 < 0)
          break;
        --v187;
        if (*(_QWORD *)(*(_QWORD *)(v141 + 24) + 8 * v188))
          goto LABEL_345;
      }
      v187 = v146;
LABEL_345:
      v261 = (uint64_t)(v67[1] - *v67) >> 2;
      if (v74 <= v147)
        v262 = v147;
      else
        v262 = v74;
      if (v74 <= v187)
        v74 = v187;
      if (v173 > v147)
        v147 = v173;
      if (v261 > v147)
      {
        v263 = 1;
      }
      else
      {
        v147 = (uint64_t)(v67[1] - *v67) >> 2;
        v263 = 4;
      }
      if (v261 > v74)
      {
        v264 = 2;
      }
      else
      {
        v74 = v147;
        v264 = v263;
      }
      if (v261 > v262)
      {
        v74 = v262;
        v264 = 3;
      }
      v1637 = v144;
      __Na = v71;
      if (!v74 || *(_QWORD *)(v67[3] + 8 * (v74 - 1)) < 0x10uLL)
        goto LABEL_371;
      v1612 = *(_QWORD *)(v67[3] + 8 * (v74 - 1));
      switch(v264)
      {
        case 1:
          if (v74 == 2)
          {
            v1381 = *v69;
            if (*v69)
            {
              v1382 = 0;
              v1383 = 0;
              v1384 = 0;
              v1385 = *(_QWORD *)(v68 + 152);
              v1386 = *(_QWORD *)(v141 + 152);
              v1387 = v67[19];
              v1388 = *(uint64_t **)(v68 + 24);
              v1389 = *v1388;
              v1390 = v1388[1];
              v1391 = *(uint64_t **)(v141 + 24);
              v1392 = *v1391;
              v1393 = v1391[1];
              v1394 = v69[1];
              v1395 = v1394;
              do
              {
                if (v1395)
                {
                  v1396 = 0;
                  v1397 = v1386 + 4 * v1383;
                  do
                  {
                    if ((int)v1612 >= 1)
                    {
                      v1398 = 0;
                      v1399 = *(_DWORD *)(v1385 + 4 * v1384);
                      v1400 = v1612 + 1;
                      do
                      {
                        *(_DWORD *)(v1387 + v1398) = v1399 / *(_DWORD *)(v1397 + v1398);
                        --v1400;
                        v1398 += 4;
                      }
                      while (v1400 > 1);
                      v1394 = v69[1];
                    }
                    v1384 += v1390;
                    v1383 += v1393;
                    v1387 += 4 * (int)v1612;
                    ++v1396;
                    v1397 += 4 * v1393;
                  }
                  while (v1396 < v1394);
                  v1401 = v1394;
                  v1381 = *v69;
                  v1395 = v1394;
                }
                else
                {
                  v1401 = 0;
                }
                v1384 = v1384 + v1389 - v1401 * v1390;
                v1383 = v1383 + v1392 - v1393 * v142[1];
                ++v1382;
              }
              while (v1382 < v1381);
            }
          }
          else
          {
            v1583 = *a2;
            v1592 = *a1;
            if (v74 == 1)
            {
              v896 = *v69;
              if (*v69)
              {
                v897 = 0;
                v898 = 0;
                v899 = *(_QWORD *)(v68 + 152);
                v900 = *(_QWORD *)(v141 + 152);
                v901 = v67[19];
                v902 = **(_QWORD **)(v68 + 24);
                v903 = 4 * **(_QWORD **)(v141 + 24);
                do
                {
                  if ((int)v1612 >= 1)
                  {
                    v904 = 0;
                    v905 = *(_DWORD *)(v899 + 4 * v898);
                    v906 = v1612 + 1;
                    do
                    {
                      *(_DWORD *)(v901 + v904) = v905 / *(_DWORD *)(v900 + v904);
                      --v906;
                      v904 += 4;
                    }
                    while (v906 > 1);
                    v896 = *v69;
                  }
                  v898 += v902;
                  ++v897;
                  v901 += 4 * (int)v1612;
                  v900 += v903;
                }
                while (v897 < v896);
              }
            }
            else if (v67[6])
            {
              v1402 = v67[6];
              v1403 = 0;
              v1574 = *(_QWORD *)(v1583 + 152);
              v1578 = *(_QWORD *)(v68 + 152);
              v1404 = v67[19];
              do
              {
                v1405 = __Na;
                if ((__Na & 0x80000000) != 0)
                {
                  LODWORD(v1406) = 0;
                }
                else
                {
                  v1406 = 0;
                  v1407 = *(_QWORD *)(v1592 + 24);
                  v1408 = v1403;
                  do
                  {
                    v1409 = ldiv(v1408, v69[v1405]);
                    v1408 = v1409.quot;
                    v1406 += *(_QWORD *)(v1407 + 8 * v1405--) * v1409.rem;
                  }
                  while (v1405 != -1);
                }
                v1410 = v1637;
                if ((v1637 & 0x80000000) != 0)
                {
                  LODWORD(v1411) = 0;
                }
                else
                {
                  v1411 = 0;
                  v1412 = *(_QWORD *)(v1583 + 24);
                  v1413 = v1403;
                  do
                  {
                    v1414 = ldiv(v1413, v142[v1410]);
                    v1413 = v1414.quot;
                    v1411 += *(_QWORD *)(v1412 + 8 * v1410--) * v1414.rem;
                  }
                  while (v1410 != -1);
                }
                if ((int)v1612 >= 1)
                {
                  v1415 = 0;
                  v1416 = *(_DWORD *)(v1578 + 4 * (int)v1406);
                  v1417 = v1612 + 1;
                  do
                  {
                    *(_DWORD *)(v1404 + v1415) = v1416 / *(_DWORD *)(v1574 + 4 * (int)v1411 + v1415);
                    --v1417;
                    v1415 += 4;
                  }
                  while (v1417 > 1);
                }
                v1403 += (int)v1612;
                v1404 += 4 * (int)v1612;
              }
              while (v1403 < v1402);
            }
          }
          break;
        case 2:
          if (v74 == 2)
          {
            v1418 = *v69;
            if (*v69)
            {
              v1419 = 0;
              v1420 = 0;
              v1666 = 0;
              __Nbd = *(_QWORD *)(v68 + 152);
              v1421 = (int *)v67[19];
              v1422 = *(_QWORD *)(v141 + 152);
              do
              {
                if (v69[1])
                {
                  v1423 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(__Nbd + 4 * v1420), 1, (const int *)(v1422 + 4 * v1419), v1421, 1, (int)v1612);
                    v68 = *a1;
                    v1424 = *(_QWORD **)(*a1 + 24);
                    v1425 = v1424[1];
                    v1420 += v1425;
                    v1426 = *(_QWORD **)(*a2 + 24);
                    v1427 = v1426[1];
                    v1419 += v1427;
                    ++v1423;
                    v69 = *(int **)*a1;
                    v1428 = v69[1];
                    v1421 += (int)v1612;
                  }
                  while (v1423 < v1428);
                  v1418 = *v69;
                  v141 = *a2;
                  v142 = *(int **)*a2;
                }
                else
                {
                  v1428 = 0;
                  v1424 = *(_QWORD **)(v68 + 24);
                  v1425 = v1424[1];
                  v1426 = *(_QWORD **)(v141 + 24);
                  v1427 = v1426[1];
                }
                v1420 = *v1424 + v1420 - v1428 * v1425;
                v1419 = *v1426 + v1419 - v1427 * v142[1];
                ++v1666;
              }
              while (v1666 < v1418);
            }
          }
          else if (v74 == 1)
          {
            if (*v69)
            {
              v907 = 0;
              v908 = 0;
              v909 = 0;
              v910 = *(_QWORD *)(v68 + 152);
              v911 = *(_QWORD *)(v141 + 152);
              v912 = (int *)v67[19];
              do
              {
                vDSP_vsdivi((const int *)(v910 + 4 * v909), 1, (const int *)(v911 + 4 * v908), v912, 1, (int)v1612);
                v909 += **(_QWORD **)(*a1 + 24);
                v908 += **(_QWORD **)(*a2 + 24);
                ++v907;
                v912 += (int)v1612;
              }
              while (v907 < **(int **)*a1);
            }
          }
          else if (v67[6])
          {
            v1429 = 0;
            v1667 = *(_QWORD *)(v141 + 152);
            __Nbe = *(_QWORD *)(v68 + 152);
            v1430 = (int *)v67[19];
            do
            {
              v1431 = *(_QWORD *)*a1;
              v1432 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1431) >> 2;
              v1433 = 0;
              v1434 = (v1432 - 1);
              if ((int)v1432 - 1 >= 0)
              {
                v1435 = *(_QWORD *)(*a1 + 24);
                v1436 = v1429;
                do
                {
                  v1437 = ldiv(v1436, *(int *)(v1431 + 4 * v1434));
                  v1436 = v1437.quot;
                  v1433 += *(_QWORD *)(v1435 + 8 * v1434--) * v1437.rem;
                }
                while (v1434 != -1);
              }
              v1438 = *(_QWORD *)*a2;
              v1439 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1438) >> 2;
              v1440 = 0;
              v1441 = (v1439 - 1);
              if ((int)v1439 - 1 >= 0)
              {
                v1442 = *(_QWORD *)(*a2 + 24);
                v1443 = v1429;
                do
                {
                  v1444 = ldiv(v1443, *(int *)(v1438 + 4 * v1441));
                  v1443 = v1444.quot;
                  v1440 += *(_QWORD *)(v1442 + 8 * v1441--) * v1444.rem;
                }
                while (v1441 != -1);
              }
              vDSP_vsdivi((const int *)(__Nbe + 4 * (int)v1433), 1, (const int *)(v1667 + 4 * (int)v1440), v1430, 1, (int)v1612);
              v1430 += (int)v1612;
              v1429 += (int)v1612;
            }
            while (v1429 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v74 == 2)
          {
            v1065 = *v69;
            if (*v69)
            {
              v1066 = 0;
              v1067 = 0;
              v1650 = 0;
              __Nn = *(_QWORD *)(v68 + 152);
              v1068 = (int *)v67[19];
              v1606 = *(_QWORD *)(v141 + 152);
              do
              {
                if (v69[1])
                {
                  v1069 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v1606 + 4 * v1066), 1, (const int *)(__Nn + 4 * v1067), 1, v1068, 1, (int)v1612);
                    v68 = *a1;
                    v1070 = *(_QWORD **)(*a1 + 24);
                    v1071 = v1070[1];
                    v1067 += v1071;
                    v1072 = *(_QWORD **)(*a2 + 24);
                    v1073 = v1072[1];
                    v1066 += v1073;
                    ++v1069;
                    v69 = *(int **)*a1;
                    v1074 = v69[1];
                    v1068 += (int)v1612;
                  }
                  while (v1069 < v1074);
                  v1065 = *v69;
                  v141 = *a2;
                  v142 = *(int **)*a2;
                }
                else
                {
                  v1074 = 0;
                  v1070 = *(_QWORD **)(v68 + 24);
                  v1071 = v1070[1];
                  v1072 = *(_QWORD **)(v141 + 24);
                  v1073 = v1072[1];
                }
                v1067 = *v1070 + v1067 - v1074 * v1071;
                v1066 = *v1072 + v1066 - v1073 * v142[1];
                ++v1650;
              }
              while (v1650 < v1065);
            }
          }
          else if (v74 == 1)
          {
            if (*v69)
            {
              v265 = 0;
              v266 = 0;
              v267 = 0;
              v268 = *(_QWORD *)(v68 + 152);
              v269 = *(_QWORD *)(v141 + 152);
              v270 = (int *)v67[19];
              do
              {
                vDSP_vdivi((const int *)(v269 + 4 * v266), 1, (const int *)(v268 + 4 * v267), 1, v270, 1, (int)v1612);
                v267 += **(_QWORD **)(*a1 + 24);
                v266 += **(_QWORD **)(*a2 + 24);
                ++v265;
                v270 += (int)v1612;
              }
              while (v265 < **(int **)*a1);
            }
          }
          else if (v67[6])
          {
            v1075 = 0;
            v1651 = *(_QWORD *)(v141 + 152);
            __No = *(_QWORD *)(v68 + 152);
            v1076 = (int *)v67[19];
            do
            {
              v1077 = *(_QWORD *)*a1;
              v1078 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1077) >> 2;
              v1079 = 0;
              v1080 = (v1078 - 1);
              if ((int)v1078 - 1 >= 0)
              {
                v1081 = *(_QWORD *)(*a1 + 24);
                v1082 = v1075;
                do
                {
                  v1083 = ldiv(v1082, *(int *)(v1077 + 4 * v1080));
                  v1082 = v1083.quot;
                  v1079 += *(_QWORD *)(v1081 + 8 * v1080--) * v1083.rem;
                }
                while (v1080 != -1);
              }
              v1084 = *(_QWORD *)*a2;
              v1085 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1084) >> 2;
              v1086 = 0;
              v1087 = (v1085 - 1);
              if ((int)v1085 - 1 >= 0)
              {
                v1088 = *(_QWORD *)(*a2 + 24);
                v1089 = v1075;
                do
                {
                  v1090 = ldiv(v1089, *(int *)(v1084 + 4 * v1087));
                  v1089 = v1090.quot;
                  v1086 += *(_QWORD *)(v1088 + 8 * v1087--) * v1090.rem;
                }
                while (v1087 != -1);
              }
              vDSP_vdivi((const int *)(v1651 + 4 * (int)v1086), 1, (const int *)(__No + 4 * (int)v1079), 1, v1076, 1, (int)v1612);
              v1076 += (int)v1612;
              v1075 += (int)v1612;
            }
            while (v1075 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_371:
          switch(v261)
          {
            case 1uLL:
              v271 = v67[6];
              if (v271)
              {
                v272 = *(_DWORD **)(v68 + 152);
                v273 = *(_DWORD **)(v141 + 152);
                v274 = (int *)v67[19];
                v275 = 4 * **(_QWORD **)(v141 + 24);
                v276 = 4 * **(_QWORD **)(v68 + 24);
                do
                {
                  *v274++ = *v272 / *v273;
                  v273 = (_DWORD *)((char *)v273 + v275);
                  v272 = (_DWORD *)((char *)v272 + v276);
                  --v271;
                }
                while (v271);
              }
              break;
            case 2uLL:
              v602 = *v69;
              if (*v69)
              {
                v603 = 0;
                v604 = 0;
                v605 = 0;
                v606 = 0;
                v607 = *(_QWORD *)(v68 + 152);
                v608 = *(_QWORD *)(v141 + 152);
                v609 = v67[19];
                v610 = *(uint64_t **)(v68 + 24);
                v611 = *v610;
                v612 = v610[1];
                v613 = *(uint64_t **)(v141 + 24);
                v615 = *v613;
                v614 = v613[1];
                v616 = v69[1];
                do
                {
                  if (v616)
                  {
                    for (m = 0; m < v616; ++m)
                    {
                      *(_DWORD *)(v609 + 4 * v604 + 4 * m) = *(_DWORD *)(v607 + 4 * v606) / *(_DWORD *)(v608 + 4 * v605);
                      v606 += v612;
                      v605 += v614;
                      v616 = v69[1];
                    }
                    v618 = v616;
                    v602 = *v69;
                    v604 += m;
                  }
                  else
                  {
                    v618 = 0;
                  }
                  v606 = v606 + v611 - v618 * v612;
                  v605 = v605 + v615 - v614 * v142[1];
                  ++v603;
                }
                while (v603 < v602);
              }
              break;
            case 3uLL:
              v619 = *v69;
              if (*v69)
              {
                v620 = 0;
                v621 = 0;
                v622 = 0;
                v623 = 0;
                v624 = *(_QWORD *)(v68 + 152);
                v625 = *(_QWORD *)(v141 + 152);
                v626 = v67[19];
                v627 = *(uint64_t **)(v68 + 24);
                v628 = *v627;
                v629 = v627[1];
                v630 = *(uint64_t **)(v141 + 24);
                v631 = *v630;
                v632 = v630[1];
                v633 = v69[1];
                v634 = v633;
                do
                {
                  if (v634)
                  {
                    v635 = 0;
                    v636 = v627[2];
                    v637 = v630[2];
                    v638 = v69[2];
                    do
                    {
                      if (v638)
                      {
                        for (n = 0; n < v638; ++n)
                        {
                          *(_DWORD *)(v626 + 4 * v621 + 4 * n) = *(_DWORD *)(v624 + 4 * v623)
                                                               / *(_DWORD *)(v625 + 4 * v622);
                          v623 += v636;
                          v622 += v637;
                          v638 = v69[2];
                        }
                        v640 = v638;
                        v633 = v69[1];
                        v621 += n;
                      }
                      else
                      {
                        v640 = 0;
                      }
                      v623 = v623 + v629 - v640 * v636;
                      v622 = v622 + v632 - v637 * v142[2];
                      ++v635;
                    }
                    while (v635 < v633);
                    v641 = v633;
                    v619 = *v69;
                    v634 = v633;
                  }
                  else
                  {
                    v641 = 0;
                  }
                  v623 = v623 + v628 - v641 * v629;
                  v622 = v622 + v631 - v632 * v142[1];
                  ++v620;
                }
                while (v620 < v619);
              }
              break;
            case 4uLL:
              v642 = *v69;
              if (*v69)
              {
                v643 = 0;
                v644 = 0;
                v645 = 0;
                v646 = 0;
                v647 = *(_QWORD *)(v68 + 152);
                v648 = *(_QWORD *)(v141 + 152);
                v649 = v67[19];
                v650 = *(uint64_t **)(v68 + 24);
                v651 = *v650;
                v652 = v650[1];
                v653 = *(uint64_t **)(v141 + 24);
                v654 = *v653;
                v655 = v653[1];
                v656 = v69[1];
                v657 = v656;
                do
                {
                  if (v657)
                  {
                    v658 = 0;
                    v659 = v650[2];
                    v660 = v653[2];
                    v661 = v69[2];
                    v662 = v661;
                    do
                    {
                      if (v662)
                      {
                        v663 = 0;
                        v664 = v650[3];
                        v665 = v653[3];
                        v666 = v69[3];
                        do
                        {
                          if (v666)
                          {
                            for (ii = 0; ii < v666; ++ii)
                            {
                              *(_DWORD *)(v649 + 4 * v644 + 4 * ii) = *(_DWORD *)(v647 + 4 * v646)
                                                                    / *(_DWORD *)(v648 + 4 * v645);
                              v646 += v664;
                              v645 += v665;
                              v666 = v69[3];
                            }
                            v668 = v666;
                            v661 = v69[2];
                            v644 += ii;
                          }
                          else
                          {
                            v668 = 0;
                          }
                          v646 = v646 + v659 - v668 * v664;
                          v645 = v645 + v660 - v665 * v142[3];
                          ++v663;
                        }
                        while (v663 < v661);
                        v669 = v661;
                        v656 = v69[1];
                        v662 = v661;
                      }
                      else
                      {
                        v669 = 0;
                      }
                      v646 = v646 + v652 - v669 * v659;
                      v645 = v645 + v655 - v660 * v142[2];
                      ++v658;
                    }
                    while (v658 < v656);
                    v670 = v656;
                    v642 = *v69;
                    v657 = v656;
                  }
                  else
                  {
                    v670 = 0;
                  }
                  v646 = v646 + v651 - v670 * v652;
                  v645 = v645 + v654 - v655 * v142[1];
                  ++v643;
                }
                while (v643 < v642);
              }
              break;
            default:
              v589 = v67[6];
              if (v589)
              {
                v590 = v68;
                v591 = 0;
                v1600 = *(_QWORD *)(v141 + 152);
                v1614 = *(_QWORD *)(v68 + 152);
                v1587 = v67[19];
                do
                {
                  v592 = __Na;
                  if ((__Na & 0x80000000) != 0)
                  {
                    LODWORD(v593) = 0;
                  }
                  else
                  {
                    v593 = 0;
                    v594 = *(_QWORD *)(v590 + 24);
                    v595 = v591;
                    do
                    {
                      v596 = ldiv(v595, v69[v592]);
                      v595 = v596.quot;
                      v593 += *(_QWORD *)(v594 + 8 * v592--) * v596.rem;
                    }
                    while (v592 != -1);
                  }
                  v597 = v1637;
                  if ((v1637 & 0x80000000) != 0)
                  {
                    LODWORD(v598) = 0;
                  }
                  else
                  {
                    v598 = 0;
                    v599 = *(_QWORD *)(v141 + 24);
                    v600 = v591;
                    do
                    {
                      v601 = ldiv(v600, v142[v597]);
                      v600 = v601.quot;
                      v598 += *(_QWORD *)(v599 + 8 * v597--) * v601.rem;
                    }
                    while (v597 != -1);
                  }
                  *(_DWORD *)(v1587 + 4 * v591++) = *(_DWORD *)(v1614 + 4 * (int)v593)
                                                  / *(_DWORD *)(v1600 + 4 * (int)v598);
                }
                while (v591 != v589);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v13)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a1 + 152) / **(uint64_t **)(*a2 + 152);
          return;
        case 1:
          v91 = *(_DWORD *)(*a2 + 160);
          if (v91 >= 1)
          {
            v92 = **(_QWORD **)(*a1 + 152);
            v93 = *(uint64_t **)(*(_QWORD *)a3 + 152);
            v94 = *(uint64_t **)(*a2 + 152);
            v95 = v91 + 1;
            do
            {
              v96 = *v94++;
              *v93++ = v92 / v96;
              --v95;
            }
            while (v95 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        default:
          v82 = *(_QWORD **)a3;
          v83 = *a1;
          v84 = *(int **)*a1;
          v85 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v84) >> 2;
          v86 = (v85 - 1);
          if ((int)v86 >= -1)
            v87 = -1;
          else
            v87 = v85 - 1;
          v88 = v87 + 1;
          v89 = v85 + 1;
          break;
      }
      while (1)
      {
        v90 = v89 - 2;
        if (v89 - 2 < 0)
          break;
        --v89;
        if (*(_QWORD *)(*(_QWORD *)(v83 + 24) + 8 * v90) != *(_QWORD *)(v82[3] + 8 * v90))
          goto LABEL_131;
      }
      v89 = v88;
LABEL_131:
      v149 = *a2;
      v150 = *(int **)*a2;
      v151 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v150) >> 2;
      v152 = (v151 - 1);
      if ((int)v152 >= -1)
        v153 = -1;
      else
        v153 = v151 - 1;
      v154 = v153 + 1;
      v155 = v151 + 1;
      while (1)
      {
        v156 = v155 - 2;
        if (v155 - 2 < 0)
          break;
        --v155;
        if (*(_QWORD *)(*(_QWORD *)(v149 + 24) + 8 * v156) != *(_QWORD *)(v82[3] + 8 * v156))
          goto LABEL_172;
      }
      v155 = v154;
LABEL_172:
      v175 = v85 + 1;
      while (1)
      {
        v176 = v175 - 2;
        if (v175 - 2 < 0)
          break;
        --v175;
        if (*(_QWORD *)(*(_QWORD *)(v83 + 24) + 8 * v176))
          goto LABEL_207;
      }
      v175 = v88;
LABEL_207:
      v189 = v151 + 1;
      while (1)
      {
        v190 = v189 - 2;
        if (v189 - 2 < 0)
          break;
        --v189;
        if (*(_QWORD *)(*(_QWORD *)(v149 + 24) + 8 * v190))
          goto LABEL_377;
      }
      v189 = v154;
LABEL_377:
      v277 = (uint64_t)(v82[1] - *v82) >> 2;
      if (v89 <= v155)
        v278 = v155;
      else
        v278 = v89;
      if (v89 <= v189)
        v89 = v189;
      if (v175 > v155)
        v155 = v175;
      if (v277 > v155)
      {
        v279 = 1;
      }
      else
      {
        v155 = (uint64_t)(v82[1] - *v82) >> 2;
        v279 = 4;
      }
      if (v277 > v89)
      {
        v280 = 2;
      }
      else
      {
        v89 = v155;
        v280 = v279;
      }
      if (v277 > v278)
      {
        v89 = v278;
        v280 = 3;
      }
      v1638 = v152;
      __Nb = v86;
      if (!v89)
        goto LABEL_403;
      v281 = *(_QWORD *)(v82[3] + 8 * (v89 - 1));
      if (v281 < 0x10)
        goto LABEL_403;
      switch(v280)
      {
        case 1:
          if (v89 == 2)
          {
            v1445 = *v84;
            if ((_DWORD)v1445)
            {
              v1446 = 0;
              v1447 = 0;
              v1448 = 0;
              v1449 = *(_QWORD *)(v83 + 152);
              v1450 = *(_QWORD *)(v149 + 152);
              v1451 = v82[19];
              v1452 = v84[1];
              v1453 = *(uint64_t **)(v83 + 24);
              v1454 = *v1453;
              v1455 = v1453[1];
              v1456 = *(uint64_t **)(v149 + 24);
              v1457 = *v1456;
              v1458 = v1456[1];
              if (v1452 <= 1)
                v1459 = 1;
              else
                v1459 = v84[1];
              v1460 = v1454 - v1455 * v1452;
              v1461 = v1457 - v1458 * v150[1];
              do
              {
                if ((_DWORD)v1452)
                {
                  v1462 = 0;
                  v1463 = v1450 + 8 * v1447;
                  do
                  {
                    if ((int)v281 >= 1)
                    {
                      v1464 = 0;
                      v1465 = *(_QWORD *)(v1449 + 8 * v1448);
                      v1466 = v281 + 1;
                      do
                      {
                        *(_QWORD *)(v1451 + v1464) = v1465 / *(_QWORD *)(v1463 + v1464);
                        --v1466;
                        v1464 += 8;
                      }
                      while (v1466 > 1);
                    }
                    v1448 += v1455;
                    v1447 += v1458;
                    v1451 += 8 * (int)v281;
                    ++v1462;
                    v1463 += 8 * v1458;
                  }
                  while (v1462 != v1459);
                }
                v1448 += v1460;
                v1447 += v1461;
                ++v1446;
              }
              while (v1446 != v1445);
            }
          }
          else
          {
            v1593 = *a1;
            if (v89 == 1)
            {
              v913 = *v84;
              if ((_DWORD)v913)
              {
                v914 = 0;
                v915 = 0;
                v916 = *(_QWORD *)(v83 + 152);
                v917 = *(_QWORD *)(v149 + 152);
                v918 = v82[19];
                v919 = **(_QWORD **)(v83 + 24);
                v920 = 8 * **(_QWORD **)(v149 + 24);
                do
                {
                  if ((int)v281 >= 1)
                  {
                    v921 = 0;
                    v922 = *(_QWORD *)(v916 + 8 * v915);
                    v923 = v281 + 1;
                    do
                    {
                      *(_QWORD *)(v918 + v921) = v922 / *(_QWORD *)(v917 + v921);
                      --v923;
                      v921 += 8;
                    }
                    while (v923 > 1);
                  }
                  v915 += v919;
                  ++v914;
                  v918 += 8 * (int)v281;
                  v917 += v920;
                }
                while (v914 != v913);
              }
            }
            else
            {
              v1632 = v82[6];
              if (v1632)
              {
                v1467 = 0;
                v1575 = *(_QWORD *)(v149 + 152);
                v1579 = *(_QWORD *)(v83 + 152);
                v1468 = v82[19];
                do
                {
                  v1469 = __Nb;
                  if ((__Nb & 0x80000000) != 0)
                  {
                    LODWORD(v1470) = 0;
                  }
                  else
                  {
                    v1470 = 0;
                    v1471 = *(_QWORD *)(v1593 + 24);
                    v1472 = v1467;
                    do
                    {
                      v1473 = ldiv(v1472, v84[v1469]);
                      v1472 = v1473.quot;
                      v1470 += *(_QWORD *)(v1471 + 8 * v1469--) * v1473.rem;
                    }
                    while (v1469 != -1);
                  }
                  v1474 = v1638;
                  if ((v1638 & 0x80000000) != 0)
                  {
                    LODWORD(v1475) = 0;
                  }
                  else
                  {
                    v1475 = 0;
                    v1476 = *(_QWORD *)(v149 + 24);
                    v1477 = v1467;
                    do
                    {
                      v1478 = ldiv(v1477, v150[v1474]);
                      v1477 = v1478.quot;
                      v1475 += *(_QWORD *)(v1476 + 8 * v1474--) * v1478.rem;
                    }
                    while (v1474 != -1);
                  }
                  if ((int)v281 >= 1)
                  {
                    v1479 = 0;
                    v1480 = *(_QWORD *)(v1579 + 8 * (int)v1470);
                    v1481 = v281 + 1;
                    do
                    {
                      *(_QWORD *)(v1468 + v1479) = v1480 / *(_QWORD *)(v1575 + 8 * (int)v1475 + v1479);
                      --v1481;
                      v1479 += 8;
                    }
                    while (v1481 > 1);
                  }
                  v1468 += 8 * (int)v281;
                  v1467 += (int)v281;
                }
                while (v1467 < v1632);
              }
            }
          }
          break;
        case 2:
          if (v89 == 2)
          {
            v1482 = *v84;
            if (*v84)
            {
              v1483 = 0;
              v1484 = 0;
              v1668 = 0;
              __Nbf = *(_QWORD *)(v83 + 152);
              v1485 = (int *)v82[19];
              v1597 = (int)v281;
              v1609 = 8 * (int)v281;
              v1486 = *(_QWORD *)(v149 + 152);
              do
              {
                if (v84[1])
                {
                  v1487 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(__Nbf + 8 * v1484), 1, (const int *)(v1486 + 8 * v1483), v1485, 1, v1597);
                    v83 = *a1;
                    v1488 = *(_QWORD **)(*a1 + 24);
                    v1489 = v1488[1];
                    v1484 += v1489;
                    v1490 = *(_QWORD **)(*a2 + 24);
                    v1491 = v1490[1];
                    v1483 += v1491;
                    ++v1487;
                    v84 = *(int **)*a1;
                    v1492 = v84[1];
                    v1485 = (int *)((char *)v1485 + v1609);
                  }
                  while (v1487 < v1492);
                  v1482 = *v84;
                  v149 = *a2;
                  v150 = *(int **)*a2;
                }
                else
                {
                  v1492 = 0;
                  v1488 = *(_QWORD **)(v83 + 24);
                  v1489 = v1488[1];
                  v1490 = *(_QWORD **)(v149 + 24);
                  v1491 = v1490[1];
                }
                v1484 = *v1488 + v1484 - v1492 * v1489;
                v1483 = *v1490 + v1483 - v1491 * v150[1];
                ++v1668;
              }
              while (v1668 < v1482);
            }
          }
          else if (v89 == 1)
          {
            if (*v84)
            {
              v924 = 0;
              v925 = 0;
              v926 = 0;
              v927 = *(_QWORD *)(v83 + 152);
              v928 = *(_QWORD *)(v149 + 152);
              v929 = (int)v281;
              v930 = 8 * (int)v281;
              v931 = (int *)v82[19];
              do
              {
                vDSP_vsdivi((const int *)(v927 + 8 * v926), 1, (const int *)(v928 + 8 * v925), v931, 1, v929);
                v926 += **(_QWORD **)(*a1 + 24);
                v925 += **(_QWORD **)(*a2 + 24);
                ++v924;
                v931 = (int *)((char *)v931 + v930);
              }
              while (v924 < **(int **)*a1);
            }
          }
          else if (v82[6])
          {
            v1493 = 0;
            v1669 = *(_QWORD *)(v149 + 152);
            __Nbg = *(_QWORD *)(v83 + 152);
            v1633 = (int)v281;
            v1494 = (int *)v82[19];
            do
            {
              v1495 = *(_QWORD *)*a1;
              v1496 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1495) >> 2;
              v1497 = 0;
              v1498 = (v1496 - 1);
              if ((int)v1496 - 1 >= 0)
              {
                v1499 = *(_QWORD *)(*a1 + 24);
                v1500 = v1493;
                do
                {
                  v1501 = ldiv(v1500, *(int *)(v1495 + 4 * v1498));
                  v1500 = v1501.quot;
                  v1497 += *(_QWORD *)(v1499 + 8 * v1498--) * v1501.rem;
                }
                while (v1498 != -1);
              }
              v1502 = *(_QWORD *)*a2;
              v1503 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1502) >> 2;
              v1504 = 0;
              v1505 = (v1503 - 1);
              if ((int)v1503 - 1 >= 0)
              {
                v1506 = *(_QWORD *)(*a2 + 24);
                v1507 = v1493;
                do
                {
                  v1508 = ldiv(v1507, *(int *)(v1502 + 4 * v1505));
                  v1507 = v1508.quot;
                  v1504 += *(_QWORD *)(v1506 + 8 * v1505--) * v1508.rem;
                }
                while (v1505 != -1);
              }
              vDSP_vsdivi((const int *)(__Nbg + 8 * (int)v1497), 1, (const int *)(v1669 + 8 * (int)v1504), v1494, 1, v1633);
              v1494 += 2 * v1633;
              v1493 += v1633;
            }
            while (v1493 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v89 == 2)
          {
            v1091 = *v84;
            if (*v84)
            {
              v1092 = 0;
              v1093 = 0;
              v1652 = 0;
              __Np = *(_QWORD *)(v83 + 152);
              v1094 = (int *)v82[19];
              v1622 = *(_QWORD *)(v149 + 152);
              v1095 = (int)v281;
              v1096 = 8 * (int)v281;
              do
              {
                if (v84[1])
                {
                  v1097 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v1622 + 8 * v1092), 1, (const int *)(__Np + 8 * v1093), 1, v1094, 1, v1095);
                    v83 = *a1;
                    v1098 = *(_QWORD **)(*a1 + 24);
                    v1099 = v1098[1];
                    v1093 += v1099;
                    v1100 = *(_QWORD **)(*a2 + 24);
                    v1101 = v1100[1];
                    v1092 += v1101;
                    ++v1097;
                    v84 = *(int **)*a1;
                    v1102 = v84[1];
                    v1094 = (int *)((char *)v1094 + v1096);
                  }
                  while (v1097 < v1102);
                  v1091 = *v84;
                  v149 = *a2;
                  v150 = *(int **)*a2;
                }
                else
                {
                  v1102 = 0;
                  v1098 = *(_QWORD **)(v83 + 24);
                  v1099 = v1098[1];
                  v1100 = *(_QWORD **)(v149 + 24);
                  v1101 = v1100[1];
                }
                v1093 = *v1098 + v1093 - v1102 * v1099;
                v1092 = *v1100 + v1092 - v1101 * v150[1];
                ++v1652;
              }
              while (v1652 < v1091);
            }
          }
          else if (v89 == 1)
          {
            if (*v84)
            {
              v282 = 0;
              v283 = 0;
              v284 = 0;
              v285 = *(_QWORD *)(v83 + 152);
              v286 = *(_QWORD *)(v149 + 152);
              v287 = (int)v281;
              v288 = 8 * (int)v281;
              v289 = (int *)v82[19];
              do
              {
                vDSP_vdivi((const int *)(v286 + 8 * v283), 1, (const int *)(v285 + 8 * v284), 1, v289, 1, v287);
                v284 += **(_QWORD **)(*a1 + 24);
                v283 += **(_QWORD **)(*a2 + 24);
                ++v282;
                v289 = (int *)((char *)v289 + v288);
              }
              while (v282 < **(int **)*a1);
            }
          }
          else if (v82[6])
          {
            v1103 = 0;
            v1653 = *(_QWORD *)(v149 + 152);
            __Nq = *(_QWORD *)(v83 + 152);
            v1623 = (int)v281;
            v1104 = (int *)v82[19];
            do
            {
              v1105 = *(_QWORD *)*a1;
              v1106 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1105) >> 2;
              v1107 = 0;
              v1108 = (v1106 - 1);
              if ((int)v1106 - 1 >= 0)
              {
                v1109 = *(_QWORD *)(*a1 + 24);
                v1110 = v1103;
                do
                {
                  v1111 = ldiv(v1110, *(int *)(v1105 + 4 * v1108));
                  v1110 = v1111.quot;
                  v1107 += *(_QWORD *)(v1109 + 8 * v1108--) * v1111.rem;
                }
                while (v1108 != -1);
              }
              v1112 = *(_QWORD *)*a2;
              v1113 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1112) >> 2;
              v1114 = 0;
              v1115 = (v1113 - 1);
              if ((int)v1113 - 1 >= 0)
              {
                v1116 = *(_QWORD *)(*a2 + 24);
                v1117 = v1103;
                do
                {
                  v1118 = ldiv(v1117, *(int *)(v1112 + 4 * v1115));
                  v1117 = v1118.quot;
                  v1114 += *(_QWORD *)(v1116 + 8 * v1115--) * v1118.rem;
                }
                while (v1115 != -1);
              }
              vDSP_vdivi((const int *)(v1653 + 8 * (int)v1114), 1, (const int *)(__Nq + 8 * (int)v1107), 1, v1104, 1, v1623);
              v1104 += 2 * v1623;
              v1103 += v1623;
            }
            while (v1103 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_403:
          switch(v277)
          {
            case 1uLL:
              v290 = v82[6];
              if (v290)
              {
                v291 = *(_QWORD **)(v83 + 152);
                v292 = *(uint64_t **)(v149 + 152);
                v293 = (uint64_t *)v82[19];
                v294 = 8 * **(_QWORD **)(v149 + 24);
                v295 = 8 * **(_QWORD **)(v83 + 24);
                do
                {
                  *v293++ = *v291 / *v292;
                  v292 = (uint64_t *)((char *)v292 + v294);
                  v291 = (_QWORD *)((char *)v291 + v295);
                  --v290;
                }
                while (v290);
              }
              break;
            case 2uLL:
              v684 = *v84;
              if ((_DWORD)v684)
              {
                v685 = 0;
                v686 = 0;
                v687 = 0;
                v688 = 0;
                v689 = *(_QWORD *)(v83 + 152);
                v690 = *(_QWORD *)(v149 + 152);
                v691 = v82[19];
                v692 = v84[1];
                v693 = *(uint64_t **)(v83 + 24);
                v694 = *v693;
                v695 = v693[1];
                v696 = *(uint64_t **)(v149 + 24);
                v697 = *v696;
                v698 = v696[1];
                v699 = v697 - v698 * v150[1];
                if (v692 <= 1)
                  v700 = 1;
                else
                  v700 = v84[1];
                v701 = v694 - v695 * v692;
                do
                {
                  if ((_DWORD)v692)
                  {
                    v702 = v686 + v700;
                    v703 = (uint64_t *)(v691 + 8 * v686);
                    v704 = v700;
                    do
                    {
                      *v703++ = *(_QWORD *)(v689 + 8 * v688) / *(uint64_t *)(v690 + 8 * v687);
                      v688 += v695;
                      v687 += v698;
                      --v704;
                    }
                    while (v704);
                    v686 = v702;
                  }
                  v688 += v701;
                  v687 += v699;
                  ++v685;
                }
                while (v685 != v684);
              }
              break;
            case 3uLL:
              v705 = *v84;
              if ((_DWORD)v705)
              {
                v706 = 0;
                v707 = 0;
                v708 = 0;
                v709 = 0;
                v710 = *(_QWORD *)(v83 + 152);
                v711 = *(_QWORD *)(v149 + 152);
                v712 = v82[19];
                v713 = v84[1];
                v714 = *(_QWORD **)(v83 + 24);
                v715 = v714[1];
                v716 = *(_QWORD **)(v149 + 24);
                v717 = v716[1];
                v718 = *v716 - v717 * v150[1];
                if (v713 <= 1)
                  v719 = 1;
                else
                  v719 = v84[1];
                v720 = *v714 - v715 * v713;
                do
                {
                  if ((_DWORD)v713)
                  {
                    v721 = 0;
                    v722 = v84[2];
                    v723 = v714[2];
                    v724 = v716[2];
                    if (v722 <= 1)
                      v725 = 1;
                    else
                      v725 = v84[2];
                    v726 = v717 - v724 * v150[2];
                    do
                    {
                      v727 = v725;
                      if ((_DWORD)v722)
                      {
                        do
                        {
                          *(_QWORD *)(v712 + 8 * v707++) = *(_QWORD *)(v710 + 8 * v709) / *(uint64_t *)(v711 + 8 * v708);
                          v709 += v723;
                          v708 += v724;
                          --v727;
                        }
                        while (v727);
                      }
                      v709 += v715 - v723 * v722;
                      v708 += v726;
                      ++v721;
                    }
                    while (v721 != v719);
                  }
                  v709 += v720;
                  v708 += v718;
                  ++v706;
                }
                while (v706 != v705);
              }
              break;
            case 4uLL:
              __Nf = *v84;
              if ((_DWORD)__Nf)
              {
                v728 = 0;
                v729 = 0;
                v730 = 0;
                v731 = 0;
                v732 = *(_QWORD *)(v83 + 152);
                v733 = *(_QWORD *)(v149 + 152);
                v734 = v82[19];
                v735 = v84[1];
                v736 = *(_QWORD **)(v83 + 24);
                v737 = *(_QWORD **)(v149 + 24);
                v1581 = v737[1];
                v1589 = v736[1];
                v1616 = *v737 - v1581 * v150[1];
                v1642 = v84[1];
                if (v735 <= 1)
                  v738 = 1;
                else
                  v738 = v84[1];
                v1602 = *v736 - v736[1] * v735;
                do
                {
                  if (v1642)
                  {
                    v739 = 0;
                    v740 = v84[2];
                    v741 = v736[2];
                    v742 = v737[2];
                    if (v740 <= 1)
                      v743 = 1;
                    else
                      v743 = v84[2];
                    v744 = v1581 - v742 * v150[2];
                    do
                    {
                      if ((_DWORD)v740)
                      {
                        v745 = 0;
                        v746 = v84[3];
                        v747 = v736[3];
                        v748 = v737[3];
                        if (v746 <= 1)
                          v749 = 1;
                        else
                          v749 = v84[3];
                        v750 = v742 - v748 * v150[3];
                        do
                        {
                          v751 = v749;
                          if ((_DWORD)v746)
                          {
                            do
                            {
                              *(_QWORD *)(v734 + 8 * v729++) = *(_QWORD *)(v732 + 8 * v731)
                                                             / *(uint64_t *)(v733 + 8 * v730);
                              v731 += v747;
                              v730 += v748;
                              --v751;
                            }
                            while (v751);
                          }
                          v731 += v741 - v747 * v746;
                          v730 += v750;
                          ++v745;
                        }
                        while (v745 != v743);
                      }
                      v731 += v1589 - v741 * v740;
                      v730 += v744;
                      ++v739;
                    }
                    while (v739 != v738);
                  }
                  v731 += v1602;
                  v730 += v1616;
                  ++v728;
                }
                while (v728 != __Nf);
              }
              break;
            default:
              v671 = v82[6];
              if (v671)
              {
                v672 = v83;
                v673 = 0;
                v1601 = *(_QWORD *)(v149 + 152);
                v1615 = *(_QWORD *)(v83 + 152);
                v1588 = v82[19];
                do
                {
                  v674 = __Nb;
                  if ((__Nb & 0x80000000) != 0)
                  {
                    LODWORD(v675) = 0;
                  }
                  else
                  {
                    v675 = 0;
                    v676 = *(_QWORD *)(v672 + 24);
                    v677 = v673;
                    do
                    {
                      v678 = ldiv(v677, v84[v674]);
                      v677 = v678.quot;
                      v675 += *(_QWORD *)(v676 + 8 * v674--) * v678.rem;
                    }
                    while (v674 != -1);
                  }
                  v679 = v1638;
                  if ((v1638 & 0x80000000) != 0)
                  {
                    LODWORD(v680) = 0;
                  }
                  else
                  {
                    v680 = 0;
                    v681 = *(_QWORD *)(v149 + 24);
                    v682 = v673;
                    do
                    {
                      v683 = ldiv(v682, v150[v679]);
                      v682 = v683.quot;
                      v680 += *(_QWORD *)(v681 + 8 * v679--) * v683.rem;
                    }
                    while (v679 != -1);
                  }
                  *(_QWORD *)(v1588 + 8 * v673++) = *(_QWORD *)(v1615 + 8 * (int)v675)
                                                  / *(uint64_t *)(v1601 + 8 * (int)v680);
                }
                while (v673 != v671);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) / **(float **)(*a2 + 152);
          return;
        case 1:
          v106 = *(_DWORD *)(*a2 + 160);
          if (v106 >= 1)
          {
            v107 = **(float **)(*a1 + 152);
            v108 = *(float **)(*(_QWORD *)a3 + 152);
            v109 = *(float **)(*a2 + 152);
            v110 = v106 + 1;
            do
            {
              v111 = *v109++;
              *v108++ = v107 / v111;
              --v110;
            }
            while (v110 > 1);
          }
          return;
        case 2:
LABEL_18:
          vDSP_vsdivi(*(const int **)(*a1 + 152), 1, *(const int **)(*a2 + 152), *(int **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*a1 + 160));
          return;
        case 3:
LABEL_19:
          vDSP_vdivi(*(const int **)(*a2 + 152), 1, *(const int **)(*a1 + 152), 1, *(int **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)a3 + 48));
          return;
        default:
          v97 = *(_QWORD **)a3;
          v98 = *a1;
          v99 = *(int **)*a1;
          v100 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v99) >> 2;
          v101 = (v100 - 1);
          if ((int)v101 >= -1)
            v102 = -1;
          else
            v102 = v100 - 1;
          v103 = v102 + 1;
          v104 = v100 + 1;
          while (1)
          {
            v105 = v104 - 2;
            if (v104 - 2 < 0)
              break;
            --v104;
            if (*(_QWORD *)(*(_QWORD *)(v98 + 24) + 8 * v105) != *(_QWORD *)(v97[3] + 8 * v105))
              goto LABEL_139;
          }
          v104 = v103;
LABEL_139:
          v157 = *a2;
          v158 = *(int **)*a2;
          v159 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v158) >> 2;
          v160 = (v159 - 1);
          if ((int)v160 >= -1)
            v161 = -1;
          else
            v161 = v159 - 1;
          v162 = v161 + 1;
          v163 = v159 + 1;
          while (1)
          {
            v164 = v163 - 2;
            if (v163 - 2 < 0)
              break;
            --v163;
            if (*(_QWORD *)(*(_QWORD *)(v157 + 24) + 8 * v164) != *(_QWORD *)(v97[3] + 8 * v164))
              goto LABEL_177;
          }
          v163 = v162;
LABEL_177:
          v177 = v100 + 1;
          while (1)
          {
            v178 = v177 - 2;
            if (v177 - 2 < 0)
              break;
            --v177;
            if (*(_QWORD *)(*(_QWORD *)(v98 + 24) + 8 * v178))
              goto LABEL_212;
          }
          v177 = v103;
LABEL_212:
          v191 = v159 + 1;
          while (1)
          {
            v192 = v191 - 2;
            if (v191 - 2 < 0)
              break;
            --v191;
            if (*(_QWORD *)(*(_QWORD *)(v157 + 24) + 8 * v192))
              goto LABEL_409;
          }
          v191 = v162;
LABEL_409:
          v296 = (uint64_t)(v97[1] - *v97) >> 2;
          if (v104 <= v163)
            v297 = v163;
          else
            v297 = v104;
          if (v104 <= v191)
            v104 = v191;
          if (v177 > v163)
            v163 = v177;
          if (v296 > v163)
          {
            v298 = 1;
          }
          else
          {
            v163 = (uint64_t)(v97[1] - *v97) >> 2;
            v298 = 4;
          }
          if (v296 > v104)
          {
            v299 = 2;
          }
          else
          {
            v104 = v163;
            v299 = v298;
          }
          if (v296 > v297)
          {
            v104 = v297;
            v299 = 3;
          }
          v1639 = v160;
          __Nc = v101;
          if (!v104)
            goto LABEL_435;
          v300 = *(_QWORD *)(v97[3] + 8 * (v104 - 1));
          if (v300 < 0x10)
            goto LABEL_435;
          switch(v299)
          {
            case 1:
              if (v104 == 2)
              {
                v1509 = *v99;
                if ((_DWORD)v1509)
                {
                  v1510 = 0;
                  v1511 = 0;
                  v1512 = 0;
                  v1513 = *(_QWORD *)(v98 + 152);
                  v1514 = *(_QWORD *)(v157 + 152);
                  v1515 = v97[19];
                  v1516 = v99[1];
                  v1517 = *(uint64_t **)(v98 + 24);
                  v1518 = *v1517;
                  v1519 = v1517[1];
                  v1520 = *(uint64_t **)(v157 + 24);
                  v1521 = *v1520;
                  v1522 = v1520[1];
                  if (v1516 <= 1)
                    v1523 = 1;
                  else
                    v1523 = v99[1];
                  v1524 = v1518 - v1519 * v1516;
                  v1525 = v1521 - v1522 * v158[1];
                  do
                  {
                    if ((_DWORD)v1516)
                    {
                      v1526 = 0;
                      v1527 = v1514 + 4 * v1511;
                      do
                      {
                        if ((int)v300 >= 1)
                        {
                          v1528 = 0;
                          v1529 = *(float *)(v1513 + 4 * v1512);
                          v1530 = v300 + 1;
                          do
                          {
                            *(float *)(v1515 + v1528) = v1529 / *(float *)(v1527 + v1528);
                            --v1530;
                            v1528 += 4;
                          }
                          while (v1530 > 1);
                        }
                        v1512 += v1519;
                        v1511 += v1522;
                        v1515 += 4 * (int)v300;
                        ++v1526;
                        v1527 += 4 * v1522;
                      }
                      while (v1526 != v1523);
                    }
                    v1512 += v1524;
                    v1511 += v1525;
                    ++v1510;
                  }
                  while (v1510 != v1509);
                }
              }
              else
              {
                v1594 = *a1;
                if (v104 == 1)
                {
                  v932 = *v99;
                  if ((_DWORD)v932)
                  {
                    v933 = 0;
                    v934 = 0;
                    v935 = *(_QWORD *)(v98 + 152);
                    v936 = *(_QWORD *)(v157 + 152);
                    v937 = v97[19];
                    v938 = **(_QWORD **)(v98 + 24);
                    v939 = 4 * **(_QWORD **)(v157 + 24);
                    do
                    {
                      if ((int)v300 >= 1)
                      {
                        v940 = 0;
                        v941 = *(float *)(v935 + 4 * v934);
                        v942 = v300 + 1;
                        do
                        {
                          *(float *)(v937 + v940) = v941 / *(float *)(v936 + v940);
                          --v942;
                          v940 += 4;
                        }
                        while (v942 > 1);
                      }
                      v934 += v938;
                      ++v933;
                      v937 += 4 * (int)v300;
                      v936 += v939;
                    }
                    while (v933 != v932);
                  }
                }
                else
                {
                  v1634 = v97[6];
                  if (v1634)
                  {
                    v1531 = 0;
                    v1576 = *(_QWORD *)(v157 + 152);
                    v1580 = *(_QWORD *)(v98 + 152);
                    v1532 = v97[19];
                    do
                    {
                      v1533 = __Nc;
                      if ((__Nc & 0x80000000) != 0)
                      {
                        LODWORD(v1534) = 0;
                      }
                      else
                      {
                        v1534 = 0;
                        v1535 = *(_QWORD *)(v1594 + 24);
                        v1536 = v1531;
                        do
                        {
                          v1537 = ldiv(v1536, v99[v1533]);
                          v1536 = v1537.quot;
                          v1534 += *(_QWORD *)(v1535 + 8 * v1533--) * v1537.rem;
                        }
                        while (v1533 != -1);
                      }
                      v1538 = v1639;
                      if ((v1639 & 0x80000000) != 0)
                      {
                        LODWORD(v1539) = 0;
                      }
                      else
                      {
                        v1539 = 0;
                        v1540 = *(_QWORD *)(v157 + 24);
                        v1541 = v1531;
                        do
                        {
                          v1542 = ldiv(v1541, v158[v1538]);
                          v1541 = v1542.quot;
                          v1539 += *(_QWORD *)(v1540 + 8 * v1538--) * v1542.rem;
                        }
                        while (v1538 != -1);
                      }
                      if ((int)v300 >= 1)
                      {
                        v1543 = 0;
                        v1544 = *(float *)(v1580 + 4 * (int)v1534);
                        v1545 = v300 + 1;
                        do
                        {
                          *(float *)(v1532 + v1543) = v1544 / *(float *)(v1576 + 4 * (int)v1539 + v1543);
                          --v1545;
                          v1543 += 4;
                        }
                        while (v1545 > 1);
                      }
                      v1532 += 4 * (int)v300;
                      v1531 += (int)v300;
                    }
                    while (v1531 < v1634);
                  }
                }
              }
              break;
            case 2:
              if (v104 == 2)
              {
                v1546 = *v99;
                if (*v99)
                {
                  v1547 = 0;
                  v1548 = 0;
                  v1670 = 0;
                  __Nbh = *(_QWORD *)(v98 + 152);
                  v1549 = (int *)v97[19];
                  v1598 = (int)v300;
                  v1610 = 4 * (int)v300;
                  v1550 = *(_QWORD *)(v157 + 152);
                  do
                  {
                    if (v99[1])
                    {
                      v1551 = 0;
                      do
                      {
                        vDSP_vsdivi((const int *)(__Nbh + 4 * v1548), 1, (const int *)(v1550 + 4 * v1547), v1549, 1, v1598);
                        v98 = *a1;
                        v1552 = *(_QWORD **)(*a1 + 24);
                        v1553 = v1552[1];
                        v1548 += v1553;
                        v1554 = *(_QWORD **)(*a2 + 24);
                        v1555 = v1554[1];
                        v1547 += v1555;
                        ++v1551;
                        v99 = *(int **)*a1;
                        v1556 = v99[1];
                        v1549 = (int *)((char *)v1549 + v1610);
                      }
                      while (v1551 < v1556);
                      v1546 = *v99;
                      v157 = *a2;
                      v158 = *(int **)*a2;
                    }
                    else
                    {
                      v1556 = 0;
                      v1552 = *(_QWORD **)(v98 + 24);
                      v1553 = v1552[1];
                      v1554 = *(_QWORD **)(v157 + 24);
                      v1555 = v1554[1];
                    }
                    v1548 = *v1552 + v1548 - v1556 * v1553;
                    v1547 = *v1554 + v1547 - v1555 * v158[1];
                    ++v1670;
                  }
                  while (v1670 < v1546);
                }
              }
              else if (v104 == 1)
              {
                if (*v99)
                {
                  v943 = 0;
                  v944 = 0;
                  v945 = 0;
                  v946 = *(_QWORD *)(v98 + 152);
                  v947 = *(_QWORD *)(v157 + 152);
                  v948 = (int)v300;
                  v949 = 4 * (int)v300;
                  v950 = (int *)v97[19];
                  do
                  {
                    vDSP_vsdivi((const int *)(v946 + 4 * v945), 1, (const int *)(v947 + 4 * v944), v950, 1, v948);
                    v945 += **(_QWORD **)(*a1 + 24);
                    v944 += **(_QWORD **)(*a2 + 24);
                    ++v943;
                    v950 = (int *)((char *)v950 + v949);
                  }
                  while (v943 < **(int **)*a1);
                }
              }
              else if (v97[6])
              {
                v1557 = 0;
                v1671 = *(_QWORD *)(v157 + 152);
                __Nbi = *(_QWORD *)(v98 + 152);
                v1635 = (int)v300;
                v1558 = (int *)v97[19];
                do
                {
                  v1559 = *(_QWORD *)*a1;
                  v1560 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1559) >> 2;
                  v1561 = 0;
                  v1562 = (v1560 - 1);
                  if ((int)v1560 - 1 >= 0)
                  {
                    v1563 = *(_QWORD *)(*a1 + 24);
                    v1564 = v1557;
                    do
                    {
                      v1565 = ldiv(v1564, *(int *)(v1559 + 4 * v1562));
                      v1564 = v1565.quot;
                      v1561 += *(_QWORD *)(v1563 + 8 * v1562--) * v1565.rem;
                    }
                    while (v1562 != -1);
                  }
                  v1566 = *(_QWORD *)*a2;
                  v1567 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1566) >> 2;
                  v1568 = 0;
                  v1569 = (v1567 - 1);
                  if ((int)v1567 - 1 >= 0)
                  {
                    v1570 = *(_QWORD *)(*a2 + 24);
                    v1571 = v1557;
                    do
                    {
                      v1572 = ldiv(v1571, *(int *)(v1566 + 4 * v1569));
                      v1571 = v1572.quot;
                      v1568 += *(_QWORD *)(v1570 + 8 * v1569--) * v1572.rem;
                    }
                    while (v1569 != -1);
                  }
                  vDSP_vsdivi((const int *)(__Nbi + 4 * (int)v1561), 1, (const int *)(v1671 + 4 * (int)v1568), v1558, 1, v1635);
                  v1558 += v1635;
                  v1557 += v1635;
                }
                while (v1557 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 3:
              if (v104 == 2)
              {
                v1119 = *v99;
                if (*v99)
                {
                  v1120 = 0;
                  v1121 = 0;
                  v1654 = 0;
                  __Nr = *(_QWORD *)(v98 + 152);
                  v1122 = (int *)v97[19];
                  v1624 = *(_QWORD *)(v157 + 152);
                  v1123 = (int)v300;
                  v1124 = 4 * (int)v300;
                  do
                  {
                    if (v99[1])
                    {
                      v1125 = 0;
                      do
                      {
                        vDSP_vdivi((const int *)(v1624 + 4 * v1120), 1, (const int *)(__Nr + 4 * v1121), 1, v1122, 1, v1123);
                        v98 = *a1;
                        v1126 = *(_QWORD **)(*a1 + 24);
                        v1127 = v1126[1];
                        v1121 += v1127;
                        v1128 = *(_QWORD **)(*a2 + 24);
                        v1129 = v1128[1];
                        v1120 += v1129;
                        ++v1125;
                        v99 = *(int **)*a1;
                        v1130 = v99[1];
                        v1122 = (int *)((char *)v1122 + v1124);
                      }
                      while (v1125 < v1130);
                      v1119 = *v99;
                      v157 = *a2;
                      v158 = *(int **)*a2;
                    }
                    else
                    {
                      v1130 = 0;
                      v1126 = *(_QWORD **)(v98 + 24);
                      v1127 = v1126[1];
                      v1128 = *(_QWORD **)(v157 + 24);
                      v1129 = v1128[1];
                    }
                    v1121 = *v1126 + v1121 - v1130 * v1127;
                    v1120 = *v1128 + v1120 - v1129 * v158[1];
                    ++v1654;
                  }
                  while (v1654 < v1119);
                }
              }
              else if (v104 == 1)
              {
                if (*v99)
                {
                  v301 = 0;
                  v302 = 0;
                  v303 = 0;
                  v304 = *(_QWORD *)(v98 + 152);
                  v305 = *(_QWORD *)(v157 + 152);
                  v306 = (int)v300;
                  v307 = 4 * (int)v300;
                  v308 = (int *)v97[19];
                  do
                  {
                    vDSP_vdivi((const int *)(v305 + 4 * v302), 1, (const int *)(v304 + 4 * v303), 1, v308, 1, v306);
                    v303 += **(_QWORD **)(*a1 + 24);
                    v302 += **(_QWORD **)(*a2 + 24);
                    ++v301;
                    v308 = (int *)((char *)v308 + v307);
                  }
                  while (v301 < **(int **)*a1);
                }
              }
              else if (v97[6])
              {
                v1131 = 0;
                v1655 = *(_QWORD *)(v157 + 152);
                __Ns = *(_QWORD *)(v98 + 152);
                v1625 = (int)v300;
                v1132 = (int *)v97[19];
                do
                {
                  v1133 = *(_QWORD *)*a1;
                  v1134 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1133) >> 2;
                  v1135 = 0;
                  v1136 = (v1134 - 1);
                  if ((int)v1134 - 1 >= 0)
                  {
                    v1137 = *(_QWORD *)(*a1 + 24);
                    v1138 = v1131;
                    do
                    {
                      v1139 = ldiv(v1138, *(int *)(v1133 + 4 * v1136));
                      v1138 = v1139.quot;
                      v1135 += *(_QWORD *)(v1137 + 8 * v1136--) * v1139.rem;
                    }
                    while (v1136 != -1);
                  }
                  v1140 = *(_QWORD *)*a2;
                  v1141 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1140) >> 2;
                  v1142 = 0;
                  v1143 = (v1141 - 1);
                  if ((int)v1141 - 1 >= 0)
                  {
                    v1144 = *(_QWORD *)(*a2 + 24);
                    v1145 = v1131;
                    do
                    {
                      v1146 = ldiv(v1145, *(int *)(v1140 + 4 * v1143));
                      v1145 = v1146.quot;
                      v1142 += *(_QWORD *)(v1144 + 8 * v1143--) * v1146.rem;
                    }
                    while (v1143 != -1);
                  }
                  vDSP_vdivi((const int *)(v1655 + 4 * (int)v1142), 1, (const int *)(__Ns + 4 * (int)v1135), 1, v1132, 1, v1625);
                  v1132 += v1625;
                  v1131 += v1625;
                }
                while (v1131 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            default:
LABEL_435:
              switch(v296)
              {
                case 1uLL:
                  v309 = v97[6];
                  if (v309)
                  {
                    v310 = *(float **)(v98 + 152);
                    v311 = *(float **)(v157 + 152);
                    v312 = (float *)v97[19];
                    v313 = 4 * **(_QWORD **)(v157 + 24);
                    v314 = 4 * **(_QWORD **)(v98 + 24);
                    do
                    {
                      *v312++ = *v310 / *v311;
                      v311 = (float *)((char *)v311 + v313);
                      v310 = (float *)((char *)v310 + v314);
                      --v309;
                    }
                    while (v309);
                  }
                  break;
                case 2uLL:
                  v765 = *v99;
                  if ((_DWORD)v765)
                  {
                    v766 = 0;
                    v767 = 0;
                    v768 = 0;
                    v769 = 0;
                    v770 = *(_QWORD *)(v98 + 152);
                    v771 = *(_QWORD *)(v157 + 152);
                    v772 = v97[19];
                    v773 = v99[1];
                    v774 = *(uint64_t **)(v98 + 24);
                    v775 = *v774;
                    v776 = v774[1];
                    v777 = *(uint64_t **)(v157 + 24);
                    v778 = *v777;
                    v779 = v777[1];
                    v780 = v778 - v779 * v158[1];
                    if (v773 <= 1)
                      v781 = 1;
                    else
                      v781 = v99[1];
                    v782 = v775 - v776 * v773;
                    do
                    {
                      if ((_DWORD)v773)
                      {
                        v783 = v767 + v781;
                        v784 = (float *)(v772 + 4 * v767);
                        v785 = v781;
                        do
                        {
                          *v784++ = *(float *)(v770 + 4 * v769) / *(float *)(v771 + 4 * v768);
                          v769 += v776;
                          v768 += v779;
                          --v785;
                        }
                        while (v785);
                        v767 = v783;
                      }
                      v769 += v782;
                      v768 += v780;
                      ++v766;
                    }
                    while (v766 != v765);
                  }
                  break;
                case 3uLL:
                  v786 = *v99;
                  if ((_DWORD)v786)
                  {
                    v787 = 0;
                    v788 = 0;
                    v789 = 0;
                    v790 = 0;
                    v791 = *(_QWORD *)(v98 + 152);
                    v792 = *(_QWORD *)(v157 + 152);
                    v793 = v97[19];
                    v794 = v99[1];
                    v795 = *(_QWORD **)(v98 + 24);
                    v796 = v795[1];
                    v797 = *(_QWORD **)(v157 + 24);
                    v798 = v797[1];
                    v799 = *v797 - v798 * v158[1];
                    if (v794 <= 1)
                      v800 = 1;
                    else
                      v800 = v99[1];
                    v801 = *v795 - v796 * v794;
                    do
                    {
                      if ((_DWORD)v794)
                      {
                        v802 = 0;
                        v803 = v99[2];
                        v804 = v795[2];
                        v805 = v797[2];
                        if (v803 <= 1)
                          v806 = 1;
                        else
                          v806 = v99[2];
                        v807 = v798 - v805 * v158[2];
                        do
                        {
                          v808 = v806;
                          if ((_DWORD)v803)
                          {
                            do
                            {
                              *(float *)(v793 + 4 * v788++) = *(float *)(v791 + 4 * v790) / *(float *)(v792 + 4 * v789);
                              v790 += v804;
                              v789 += v805;
                              --v808;
                            }
                            while (v808);
                          }
                          v790 += v796 - v804 * v803;
                          v789 += v807;
                          ++v802;
                        }
                        while (v802 != v800);
                      }
                      v790 += v801;
                      v789 += v799;
                      ++v787;
                    }
                    while (v787 != v786);
                  }
                  break;
                case 4uLL:
                  __Ng = *v99;
                  if ((_DWORD)__Ng)
                  {
                    v809 = 0;
                    v810 = 0;
                    v811 = 0;
                    v812 = 0;
                    v813 = *(_QWORD *)(v98 + 152);
                    v814 = *(_QWORD *)(v157 + 152);
                    v815 = v97[19];
                    v816 = v99[1];
                    v817 = *(_QWORD **)(v98 + 24);
                    v818 = *(_QWORD **)(v157 + 24);
                    v1604 = v818[1];
                    v1618 = v817[1];
                    v1643 = *v818 - v1604 * v158[1];
                    if (v816 <= 1)
                      v819 = 1;
                    else
                      v819 = v99[1];
                    v820 = *v817 - v817[1] * v816;
                    do
                    {
                      if ((_DWORD)v816)
                      {
                        v821 = 0;
                        v822 = v99[2];
                        v823 = v817[2];
                        v824 = v818[2];
                        if (v822 <= 1)
                          v825 = 1;
                        else
                          v825 = v99[2];
                        v826 = v1604 - v824 * v158[2];
                        do
                        {
                          if ((_DWORD)v822)
                          {
                            v827 = 0;
                            v828 = v99[3];
                            v829 = v817[3];
                            v830 = v818[3];
                            if (v828 <= 1)
                              v831 = 1;
                            else
                              v831 = v99[3];
                            v832 = v824 - v830 * v158[3];
                            do
                            {
                              v833 = v831;
                              if ((_DWORD)v828)
                              {
                                do
                                {
                                  *(float *)(v815 + 4 * v810++) = *(float *)(v813 + 4 * v812)
                                                                / *(float *)(v814 + 4 * v811);
                                  v812 += v829;
                                  v811 += v830;
                                  --v833;
                                }
                                while (v833);
                              }
                              v812 += v823 - v829 * v828;
                              v811 += v832;
                              ++v827;
                            }
                            while (v827 != v825);
                          }
                          v812 += v1618 - v823 * v822;
                          v811 += v826;
                          ++v821;
                        }
                        while (v821 != v819);
                      }
                      v812 += v820;
                      v811 += v1643;
                      ++v809;
                    }
                    while (v809 != __Ng);
                  }
                  break;
                default:
                  v752 = v97[6];
                  if (v752)
                  {
                    v753 = v98;
                    v754 = 0;
                    v1603 = *(_QWORD *)(v157 + 152);
                    v1617 = *(_QWORD *)(v98 + 152);
                    v1590 = v97[19];
                    do
                    {
                      v755 = __Nc;
                      if ((__Nc & 0x80000000) != 0)
                      {
                        LODWORD(v756) = 0;
                      }
                      else
                      {
                        v756 = 0;
                        v757 = *(_QWORD *)(v753 + 24);
                        v758 = v754;
                        do
                        {
                          v759 = ldiv(v758, v99[v755]);
                          v758 = v759.quot;
                          v756 += *(_QWORD *)(v757 + 8 * v755--) * v759.rem;
                        }
                        while (v755 != -1);
                      }
                      v760 = v1639;
                      if ((v1639 & 0x80000000) != 0)
                      {
                        LODWORD(v761) = 0;
                      }
                      else
                      {
                        v761 = 0;
                        v762 = *(_QWORD *)(v157 + 24);
                        v763 = v754;
                        do
                        {
                          v764 = ldiv(v763, v158[v760]);
                          v763 = v764.quot;
                          v761 += *(_QWORD *)(v762 + 8 * v760--) * v764.rem;
                        }
                        while (v760 != -1);
                      }
                      *(float *)(v1590 + 4 * v754++) = *(float *)(v1617 + 4 * (int)v756)
                                                     / *(float *)(v1603 + 4 * (int)v761);
                    }
                    while (v754 != v752);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_5,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_6>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  vDSP_Length v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  vDSP_Length v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  vDSP_Length v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  vDSP_Length v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int **v83;
  int *v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int **v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int **v98;
  int *v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int **v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  int **v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int **v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unint64_t v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  vDSP_Length v167;
  float *v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  int v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int *v182;
  vDSP_Length v183;
  float *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  int v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  vDSP_Length v201;
  uint64_t v202;
  float *v203;
  uint64_t v204;
  _DWORD *v205;
  int *v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  int v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  vDSP_Length v220;
  float *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int *v226;
  uint64_t v227;
  unint64_t v228;
  int v229;
  int v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int *v237;
  vDSP_Length v238;
  uint64_t v239;
  float *v240;
  uint64_t v241;
  _DWORD *v242;
  int *v243;
  int *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  int v248;
  int v249;
  int v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int *v256;
  vDSP_Length v257;
  uint64_t v258;
  float *v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  int v267;
  int v268;
  int v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int *v275;
  vDSP_Length v276;
  uint64_t v277;
  float *v278;
  uint64_t v279;
  float *v280;
  float *v281;
  float *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  ldiv_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  ldiv_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  ldiv_t v360;
  int v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  unint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  int *v372;
  uint64_t v373;
  unint64_t v374;
  int v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int *v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  int *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  int v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int *v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  int *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  vDSP_Length v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  ldiv_t v416;
  uint64_t v417;
  int *v418;
  uint64_t v419;
  int v420;
  ldiv_t v421;
  int v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  int *v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  unint64_t i;
  uint64_t v438;
  int v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int *v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  int *v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  unint64_t j;
  uint64_t v460;
  uint64_t v461;
  int v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int *v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  int *v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  int v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  int v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  unint64_t k;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  ldiv_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  ldiv_t v506;
  int v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int *v513;
  uint64_t v514;
  unint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  int *v518;
  uint64_t v519;
  unint64_t v520;
  int v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int *v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  int *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v537;
  int v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int *v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  int *v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  vDSP_Length v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  ldiv_t v562;
  uint64_t v563;
  int *v564;
  uint64_t v565;
  int v566;
  ldiv_t v567;
  int v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int *v574;
  uint64_t v575;
  uint64_t *v576;
  uint64_t v577;
  uint64_t v578;
  int *v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  unint64_t m;
  uint64_t v584;
  int v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int *v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  int *v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  int v604;
  unint64_t n;
  uint64_t v606;
  uint64_t v607;
  int v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int *v614;
  uint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t v618;
  int *v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  int v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  int v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  int v632;
  unint64_t ii;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  vDSP_Length v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  ldiv_t v642;
  uint64_t v643;
  int *v644;
  uint64_t v645;
  int v646;
  ldiv_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int *v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t *v657;
  uint64_t v658;
  uint64_t v659;
  int *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int *v675;
  uint64_t v676;
  unint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  int *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  int *v697;
  uint64_t v698;
  unint64_t v699;
  _QWORD *v700;
  int *v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  vDSP_Length v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  ldiv_t v721;
  uint64_t v722;
  int *v723;
  uint64_t v724;
  int v725;
  ldiv_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int *v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t *v736;
  uint64_t v737;
  uint64_t v738;
  int *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  float *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  int *v754;
  uint64_t v755;
  unint64_t v756;
  _QWORD *v757;
  uint64_t v758;
  int *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  int *v776;
  uint64_t v777;
  unint64_t v778;
  _QWORD *v779;
  int *v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  vDSP_Length v801;
  float *v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  vDSP_Length v808;
  float *v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  int *v814;
  vDSP_Length v815;
  float *v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  int *v821;
  vDSP_Length v822;
  float *v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  int *v828;
  vDSP_Length v829;
  uint64_t v830;
  float *v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  int *v836;
  vDSP_Length v837;
  uint64_t v838;
  float *v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int *v844;
  vDSP_Length v845;
  float *v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int *v851;
  vDSP_Length v852;
  float *v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  int *v858;
  vDSP_Length v859;
  uint64_t v860;
  float *v861;
  unint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int *v866;
  vDSP_Length v867;
  uint64_t v868;
  float *v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int *v874;
  vDSP_Length v875;
  uint64_t v876;
  float *v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int *v882;
  vDSP_Length v883;
  uint64_t v884;
  float *v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  int *v890;
  vDSP_Length v891;
  uint64_t v892;
  float *v893;
  unint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  int *v898;
  vDSP_Length v899;
  uint64_t v900;
  float *v901;
  int v902;
  uint64_t v903;
  uint64_t v904;
  float *v905;
  uint64_t v906;
  uint64_t v907;
  unint64_t v908;
  _QWORD *v909;
  uint64_t v910;
  _QWORD *v911;
  uint64_t v912;
  unint64_t v913;
  unint64_t v914;
  float *v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int v921;
  ldiv_t v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  int v928;
  ldiv_t v929;
  int v930;
  unint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  int *v935;
  vDSP_Length v936;
  float *v937;
  unint64_t v938;
  _QWORD *v939;
  uint64_t v940;
  int *v941;
  uint64_t v942;
  unint64_t v943;
  unint64_t v944;
  float *v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  int v951;
  ldiv_t v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  int v958;
  ldiv_t v959;
  int v960;
  uint64_t v961;
  uint64_t v962;
  float *v963;
  uint64_t v964;
  unint64_t v965;
  _QWORD *v966;
  uint64_t v967;
  int *v968;
  uint64_t v969;
  unint64_t v970;
  unint64_t v971;
  float *v972;
  uint64_t v973;
  unint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  int v978;
  ldiv_t v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  int v985;
  ldiv_t v986;
  int v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int *v992;
  vDSP_Length v993;
  float *v994;
  unint64_t v995;
  _QWORD *v996;
  uint64_t v997;
  int *v998;
  uint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  float *v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int v1008;
  ldiv_t v1009;
  uint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  int v1015;
  ldiv_t v1016;
  int v1017;
  uint64_t v1018;
  uint64_t v1019;
  float *v1020;
  uint64_t v1021;
  unint64_t v1022;
  _QWORD *v1023;
  uint64_t v1024;
  int *v1025;
  uint64_t v1026;
  unint64_t v1027;
  unint64_t v1028;
  float *v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  int v1035;
  ldiv_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  int v1042;
  ldiv_t v1043;
  int v1044;
  uint64_t v1045;
  uint64_t v1046;
  float *v1047;
  uint64_t v1048;
  unint64_t v1049;
  _QWORD *v1050;
  uint64_t v1051;
  int *v1052;
  uint64_t v1053;
  unint64_t v1054;
  unint64_t v1055;
  float *v1056;
  uint64_t v1057;
  unint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  int v1062;
  ldiv_t v1063;
  uint64_t v1064;
  unint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  int v1069;
  ldiv_t v1070;
  int v1071;
  uint64_t v1072;
  uint64_t v1073;
  float *v1074;
  uint64_t v1075;
  unint64_t v1076;
  _QWORD *v1077;
  uint64_t v1078;
  int *v1079;
  uint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  float *v1083;
  uint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  int v1089;
  ldiv_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  int v1096;
  ldiv_t v1097;
  int v1098;
  uint64_t v1099;
  uint64_t v1100;
  float *v1101;
  uint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  _QWORD *v1105;
  uint64_t v1106;
  _QWORD *v1107;
  uint64_t v1108;
  unint64_t v1109;
  unint64_t v1110;
  float *v1111;
  uint64_t v1112;
  unint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  int quot;
  ldiv_t v1118;
  uint64_t v1119;
  unint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  int v1124;
  ldiv_t v1125;
  int v1126;
  uint64_t v1127;
  uint64_t v1128;
  float *v1129;
  uint64_t v1130;
  uint64_t v1131;
  unint64_t v1132;
  _QWORD *v1133;
  uint64_t v1134;
  _QWORD *v1135;
  uint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  float *v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  int v1145;
  ldiv_t v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  int v1152;
  ldiv_t v1153;
  int v1154;
  unint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  int *v1159;
  vDSP_Length v1160;
  float *v1161;
  unint64_t v1162;
  _QWORD *v1163;
  uint64_t v1164;
  int *v1165;
  uint64_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  float *v1169;
  uint64_t v1170;
  unint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  int v1175;
  ldiv_t v1176;
  uint64_t v1177;
  unint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  int v1182;
  ldiv_t v1183;
  int v1184;
  unint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  int *v1189;
  vDSP_Length v1190;
  float *v1191;
  unint64_t v1192;
  _QWORD *v1193;
  uint64_t v1194;
  int *v1195;
  uint64_t v1196;
  unint64_t v1197;
  unint64_t v1198;
  float *v1199;
  uint64_t v1200;
  unint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  int v1205;
  ldiv_t v1206;
  uint64_t v1207;
  unint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  int v1212;
  ldiv_t v1213;
  int v1214;
  uint64_t v1215;
  uint64_t v1216;
  float *v1217;
  uint64_t v1218;
  unint64_t v1219;
  _QWORD *v1220;
  uint64_t v1221;
  int *v1222;
  uint64_t v1223;
  unint64_t v1224;
  unint64_t v1225;
  float *v1226;
  uint64_t v1227;
  unint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  int v1232;
  ldiv_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  int v1239;
  ldiv_t v1240;
  int v1241;
  uint64_t v1242;
  uint64_t v1243;
  float *v1244;
  uint64_t v1245;
  unint64_t v1246;
  _QWORD *v1247;
  uint64_t v1248;
  int *v1249;
  uint64_t v1250;
  unint64_t v1251;
  unint64_t v1252;
  float *v1253;
  uint64_t v1254;
  unint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  int v1259;
  ldiv_t v1260;
  uint64_t v1261;
  unint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  int v1266;
  ldiv_t v1267;
  int v1268;
  unint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  int *v1273;
  vDSP_Length v1274;
  float *v1275;
  unint64_t v1276;
  _QWORD *v1277;
  uint64_t v1278;
  int *v1279;
  uint64_t v1280;
  unint64_t v1281;
  unint64_t v1282;
  float *v1283;
  uint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  int v1289;
  ldiv_t v1290;
  uint64_t v1291;
  unint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  int v1296;
  ldiv_t v1297;
  int v1298;
  unint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  int *v1303;
  vDSP_Length v1304;
  float *v1305;
  unint64_t v1306;
  _QWORD *v1307;
  uint64_t v1308;
  int *v1309;
  uint64_t v1310;
  unint64_t v1311;
  unint64_t v1312;
  float *v1313;
  uint64_t v1314;
  unint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  int v1319;
  ldiv_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  int v1326;
  ldiv_t v1327;
  int v1328;
  uint64_t v1329;
  uint64_t v1330;
  float *v1331;
  uint64_t v1332;
  unint64_t v1333;
  _QWORD *v1334;
  uint64_t v1335;
  int *v1336;
  uint64_t v1337;
  unint64_t v1338;
  unint64_t v1339;
  float *v1340;
  uint64_t v1341;
  unint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  ldiv_t v1347;
  uint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  int v1353;
  ldiv_t v1354;
  int v1355;
  uint64_t v1356;
  uint64_t v1357;
  float *v1358;
  uint64_t v1359;
  unint64_t v1360;
  _QWORD *v1361;
  uint64_t v1362;
  int *v1363;
  uint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  float *v1367;
  uint64_t v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int v1373;
  ldiv_t v1374;
  uint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  int v1380;
  ldiv_t v1381;
  int v1382;
  uint64_t v1383;
  uint64_t v1384;
  float *v1385;
  uint64_t v1386;
  unint64_t v1387;
  _QWORD *v1388;
  uint64_t v1389;
  int *v1390;
  uint64_t v1391;
  unint64_t v1392;
  unint64_t v1393;
  float *v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  int v1400;
  ldiv_t v1401;
  uint64_t v1402;
  unint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  int v1407;
  ldiv_t v1408;
  int v1409;
  uint64_t v1410;
  uint64_t v1411;
  float *v1412;
  uint64_t v1413;
  unint64_t v1414;
  _QWORD *v1415;
  uint64_t v1416;
  int *v1417;
  uint64_t v1418;
  unint64_t v1419;
  unint64_t v1420;
  float *v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  ldiv_t v1428;
  uint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  int v1434;
  ldiv_t v1435;
  int v1436;
  uint64_t v1437;
  uint64_t v1438;
  float *v1439;
  uint64_t v1440;
  unint64_t v1441;
  _QWORD *v1442;
  uint64_t v1443;
  int *v1444;
  uint64_t v1445;
  unint64_t v1446;
  unint64_t v1447;
  float *v1448;
  uint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  int v1454;
  ldiv_t v1455;
  uint64_t v1456;
  unint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  int v1461;
  ldiv_t v1462;
  int v1463;
  uint64_t v1464;
  uint64_t v1465;
  float *v1466;
  uint64_t v1467;
  unint64_t v1468;
  _QWORD *v1469;
  uint64_t v1470;
  int *v1471;
  uint64_t v1472;
  unint64_t v1473;
  unint64_t v1474;
  float *v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  ldiv_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  int v1488;
  ldiv_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  int *v1496;
  int *v1497;
  int *v1498;
  unint64_t v1499;
  int *v1500;
  uint64_t v1501;
  unint64_t v1502;
  unint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  unint64_t v1506;
  unint64_t v1507;
  unint64_t v1508;
  unint64_t v1509;
  unint64_t v1510;
  unint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  vDSP_Length v1520;
  vDSP_Length v1521;
  vDSP_Length v1522;
  vDSP_Length v1523;
  vDSP_Length v1524;
  vDSP_Length v1525;
  vDSP_Length v1526;
  vDSP_Length v1527;
  vDSP_Length v1528;
  vDSP_Length v1529;
  vDSP_Length v1530;
  vDSP_Length v1531;
  vDSP_Length v1532;
  vDSP_Length v1533;
  vDSP_Length v1534;
  vDSP_Length v1535;
  vDSP_Length v1536;
  vDSP_Length v1537;
  vDSP_Length v1538;
  vDSP_Length v1539;
  vDSP_Length v1540;
  vDSP_Length v1541;
  vDSP_Length v1542;
  vDSP_Length v1543;
  vDSP_Length v1544;
  vDSP_Length v1545;
  vDSP_Length v1546;
  vDSP_Length v1547;
  vDSP_Length v1548;
  vDSP_Length v1549;
  vDSP_Length v1550;
  vDSP_Length v1551;
  vDSP_Length v1552;
  int *v1553;
  uint64_t v1554;
  int *v1555;
  uint64_t v1556;
  uint64_t v1557;
  int v1558;
  uint64_t v1559;
  uint64_t v1560;
  unint64_t v1561;
  uint64_t v1562;
  int *v1563;
  int *v1564;
  int *v1565;
  int *v1566;
  int *v1567;
  int *v1568;
  int *v1569;
  int *v1570;
  int *v1571;
  int *v1572;
  unint64_t v1573;
  uint64_t v1574;
  unint64_t v1575;
  uint64_t v1576;
  int *v1577;
  int *v1578;
  int *v1579;
  int *v1580;
  int *v1581;
  int *v1582;
  int *v1583;
  int *v1584;
  int *v1585;
  int *v1586;
  int *v1587;
  int *v1588;
  int *v1589;
  int *v1590;
  int *v1591;
  int *v1592;
  int *v1593;
  int *v1594;
  int *v1595;
  int *v1596;
  vDSP_Length __N;
  vDSP_Length __Na;
  vDSP_Length __Nb;
  vDSP_Length __Nc;
  vDSP_Length __Nd;
  vDSP_Length __Ne;
  vDSP_Length __Nf;
  vDSP_Length __Ng;
  vDSP_Length __Nh;
  vDSP_Length __Ni;
  vDSP_Length __Nj;
  vDSP_Length __Nk;
  vDSP_Length __Nl;
  vDSP_Length __Nm;
  vDSP_Length __Nn;
  vDSP_Length __No;
  vDSP_Length __Np;
  vDSP_Length __Nq;
  vDSP_Length __Nr;
  vDSP_Length __Ns;
  vDSP_Length __Nt;
  vDSP_Length __Nu;
  vDSP_Length __Nv;
  vDSP_Length __Nw;
  vDSP_Length __Nx;
  vDSP_Length __Ny;
  vDSP_Length __Nz;
  vDSP_Length __Nba;
  vDSP_Length __Nbb;
  vDSP_Length __Nbc;
  vDSP_Length __Nbd;
  vDSP_Length __Nbe;
  vDSP_Length __Nbf;
  vDSP_Length __Nbg;
  vDSP_Length __Nbh;
  vDSP_Length __Nbi;
  vDSP_Length __Nbj;
  vDSP_Length __Nbk;
  vDSP_Length __Nbl;
  vDSP_Length __Nbm;
  vDSP_Length __Nbn;
  vDSP_Length __Nbo;
  vDSP_Length __Nbp;
  vDSP_Length __Nbq;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(_BYTE **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_20;
        case 3:
          goto LABEL_21;
        default:
          v15 = *(_QWORD **)a3;
          v16 = *a1;
          v17 = *(int **)*a1;
          v18 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v17) >> 2;
          v19 = (v18 - 1);
          if ((int)v19 >= -1)
            v20 = -1;
          else
            v20 = v18 - 1;
          v21 = v20 + 1;
          v22 = v18 + 1;
          break;
      }
      while (1)
      {
        v23 = v22 - 2;
        if (v22 - 2 < 0)
          break;
        --v22;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v23) != *(_QWORD *)(v15[3] + 8 * v23))
          goto LABEL_70;
      }
      v22 = v21;
LABEL_70:
      v76 = (uint64_t *)*a2;
      v77 = *(_QWORD *)*a2;
      v78 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v77) >> 2;
      v79 = v78 - 1;
      if ((int)v78 - 1 >= -1)
        v79 = -1;
      v80 = v79 + 1;
      v81 = v78 + 1;
      while (1)
      {
        v82 = v81 - 2;
        if (v81 - 2 < 0)
          break;
        --v81;
        if (*(_QWORD *)(v76[3] + 8 * v82) != *(_QWORD *)(v15[3] + 8 * v82))
          goto LABEL_123;
      }
      v81 = v80;
LABEL_123:
      v129 = v18 + 1;
      while (1)
      {
        v130 = v129 - 2;
        if (v129 - 2 < 0)
          break;
        --v129;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v130))
          goto LABEL_158;
      }
      v129 = v21;
LABEL_158:
      v143 = v78 + 1;
      while (1)
      {
        v144 = v143 - 2;
        if (v143 - 2 < 0)
          break;
        --v143;
        if (*(_QWORD *)(v76[3] + 8 * v144))
          goto LABEL_193;
      }
      v143 = v80;
LABEL_193:
      v157 = (uint64_t)(v15[1] - *v15) >> 2;
      if (v22 <= v81)
        v158 = v81;
      else
        v158 = v22;
      if (v22 <= v143)
        v22 = v143;
      if (v129 > v81)
        v81 = v129;
      if (v157 > v81)
        v159 = 1;
      else
        v159 = 4;
      if (v157 <= v81)
        v81 = (uint64_t)(v15[1] - *v15) >> 2;
      if (v157 <= v22)
        v22 = v81;
      else
        v159 = 2;
      if (v157 <= v158)
      {
        v160 = v22;
      }
      else
      {
        v159 = 3;
        v160 = v158;
      }
      if (!v160)
        goto LABEL_222;
      v161 = *(_QWORD *)(v15[3] + 8 * (v160 - 1));
      if (v161 < 0x10)
        goto LABEL_222;
      switch(v159)
      {
        case 1:
          if (v160 == 2)
          {
            v1098 = *v17;
            if (*v17)
            {
              v1099 = 0;
              v1100 = 0;
              v1573 = 0;
              __Nt = (int)v161;
              v1101 = (float *)v15[19];
              v1102 = *(_QWORD *)(v16 + 152);
              v1103 = v76[19];
              do
              {
                if (v17[1])
                {
                  v1104 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(v1102 + v1100), (const float *)(v1103 + v1099), 1, v1101, 1, __Nt);
                    v16 = *a1;
                    v1105 = *(_QWORD **)(*a1 + 24);
                    v1106 = v1105[1];
                    v1100 += v1106;
                    v76 = (uint64_t *)*a2;
                    v1107 = *(_QWORD **)(*a2 + 24);
                    v1108 = v1107[1];
                    v1099 += v1108;
                    v1101 = (float *)((char *)v1101 + __Nt);
                    ++v1104;
                    v17 = *(int **)*a1;
                    v1109 = v17[1];
                  }
                  while (v1104 < v1109);
                  v1098 = *v17;
                  v77 = *v76;
                }
                else
                {
                  v1109 = 0;
                  v1105 = *(_QWORD **)(v16 + 24);
                  v1106 = v1105[1];
                  v1107 = (_QWORD *)v76[3];
                  v1108 = v1107[1];
                }
                v1100 = *v1105 + v1100 - v1109 * v1106;
                v1099 = *v1107 + v1099 - v1108 * *(int *)(v77 + 4);
                ++v1573;
              }
              while (v1573 < v1098);
            }
          }
          else if (v160 == 1)
          {
            if (*v17)
            {
              v796 = 0;
              v797 = 0;
              v798 = 0;
              v799 = *(_QWORD *)(v16 + 152);
              v800 = v76[19];
              v801 = (int)v161;
              v802 = (float *)v15[19];
              do
              {
                vDSP_svdiv((const float *)(v799 + v798), (const float *)(v800 + v797), 1, v802, 1, v801);
                v798 += **(_QWORD **)(*a1 + 24);
                v797 += **(_QWORD **)(*a2 + 24);
                v802 = (float *)((char *)v802 + v801);
                ++v796;
              }
              while (v796 < **(int **)*a1);
            }
          }
          else if (v15[6])
          {
            v1110 = 0;
            v1574 = v76[19];
            __Nu = *(_QWORD *)(v16 + 152);
            v1531 = (int)v161;
            v1111 = (float *)v15[19];
            do
            {
              v1112 = *(_QWORD *)*a1;
              v1113 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1112) >> 2;
              v1114 = 0;
              v1115 = (v1113 - 1);
              if ((int)v1113 - 1 >= 0)
              {
                v1116 = *(_QWORD *)(*a1 + 24);
                quot = v1110;
                do
                {
                  v1118 = ldiv(quot, *(int *)(v1112 + 4 * v1115));
                  quot = v1118.quot;
                  v1114 += *(_QWORD *)(v1116 + 8 * v1115--) * v1118.rem;
                }
                while (v1115 != -1);
              }
              v1119 = *(_QWORD *)*a2;
              v1120 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1119) >> 2;
              v1121 = 0;
              v1122 = (v1120 - 1);
              if ((int)v1120 - 1 >= 0)
              {
                v1123 = *(_QWORD *)(*a2 + 24);
                v1124 = v1110;
                do
                {
                  v1125 = ldiv(v1124, *(int *)(v1119 + 4 * v1122));
                  v1124 = v1125.quot;
                  v1121 += *(_QWORD *)(v1123 + 8 * v1122--) * v1125.rem;
                }
                while (v1122 != -1);
              }
              vDSP_svdiv((const float *)(__Nu + (int)v1114), (const float *)(v1574 + (int)v1121), 1, v1111, 1, v1531);
              v1111 = (float *)((char *)v1111 + v1531);
              v1110 += v1531;
            }
            while (v1110 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v160 == 2)
          {
            v1126 = *v17;
            if (*v17)
            {
              v1127 = 0;
              v1128 = 0;
              v1575 = 0;
              __Nv = (int)v161;
              v1129 = (float *)v15[19];
              v1130 = *(_QWORD *)(v16 + 152);
              v1131 = v76[19];
              do
              {
                if (v17[1])
                {
                  v1132 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(v1130 + v1128), 1, (const float *)(v1131 + v1127), v1129, 1, __Nv);
                    v16 = *a1;
                    v1133 = *(_QWORD **)(*a1 + 24);
                    v1134 = v1133[1];
                    v1128 += v1134;
                    v76 = (uint64_t *)*a2;
                    v1135 = *(_QWORD **)(*a2 + 24);
                    v1136 = v1135[1];
                    v1127 += v1136;
                    v1129 = (float *)((char *)v1129 + __Nv);
                    ++v1132;
                    v17 = *(int **)*a1;
                    v1137 = v17[1];
                  }
                  while (v1132 < v1137);
                  v1126 = *v17;
                  v77 = *v76;
                }
                else
                {
                  v1137 = 0;
                  v1133 = *(_QWORD **)(v16 + 24);
                  v1134 = v1133[1];
                  v1135 = (_QWORD *)v76[3];
                  v1136 = v1135[1];
                }
                v1128 = *v1133 + v1128 - v1137 * v1134;
                v1127 = *v1135 + v1127 - v1136 * *(int *)(v77 + 4);
                ++v1575;
              }
              while (v1575 < v1126);
            }
          }
          else if (v160 == 1)
          {
            if (*v17)
            {
              v803 = 0;
              v804 = 0;
              v805 = 0;
              v806 = *(_QWORD *)(v16 + 152);
              v807 = v76[19];
              v808 = (int)v161;
              v809 = (float *)v15[19];
              do
              {
                vDSP_vsdiv((const float *)(v806 + v805), 1, (const float *)(v807 + v804), v809, 1, v808);
                v805 += **(_QWORD **)(*a1 + 24);
                v804 += **(_QWORD **)(*a2 + 24);
                v809 = (float *)((char *)v809 + v808);
                ++v803;
              }
              while (v803 < **(int **)*a1);
            }
          }
          else if (v15[6])
          {
            v1138 = 0;
            v1576 = v76[19];
            __Nw = *(_QWORD *)(v16 + 152);
            v1532 = (int)v161;
            v1139 = (float *)v15[19];
            do
            {
              v1140 = *(_QWORD *)*a1;
              v1141 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1140) >> 2;
              v1142 = 0;
              v1143 = (v1141 - 1);
              if ((int)v1141 - 1 >= 0)
              {
                v1144 = *(_QWORD *)(*a1 + 24);
                v1145 = v1138;
                do
                {
                  v1146 = ldiv(v1145, *(int *)(v1140 + 4 * v1143));
                  v1145 = v1146.quot;
                  v1142 += *(_QWORD *)(v1144 + 8 * v1143--) * v1146.rem;
                }
                while (v1143 != -1);
              }
              v1147 = *(_QWORD *)*a2;
              v1148 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1147) >> 2;
              v1149 = 0;
              v1150 = (v1148 - 1);
              if ((int)v1148 - 1 >= 0)
              {
                v1151 = *(_QWORD *)(*a2 + 24);
                v1152 = v1138;
                do
                {
                  v1153 = ldiv(v1152, *(int *)(v1147 + 4 * v1150));
                  v1152 = v1153.quot;
                  v1149 += *(_QWORD *)(v1151 + 8 * v1150--) * v1153.rem;
                }
                while (v1150 != -1);
              }
              vDSP_vsdiv((const float *)(__Nw + (int)v1142), 1, (const float *)(v1576 + (int)v1149), v1139, 1, v1532);
              v1139 = (float *)((char *)v1139 + v1532);
              v1138 += v1532;
            }
            while (v1138 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v160 == 2)
          {
            v902 = *v17;
            if (*v17)
            {
              v903 = 0;
              v904 = 0;
              v1561 = 0;
              __Nh = (int)v161;
              v905 = (float *)v15[19];
              v906 = *(_QWORD *)(v16 + 152);
              v907 = v76[19];
              do
              {
                if (v17[1])
                {
                  v908 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)(v907 + v903), 1, (const float *)(v906 + v904), 1, v905, 1, __Nh);
                    v16 = *a1;
                    v909 = *(_QWORD **)(*a1 + 24);
                    v910 = v909[1];
                    v904 += v910;
                    v76 = (uint64_t *)*a2;
                    v911 = *(_QWORD **)(*a2 + 24);
                    v912 = v911[1];
                    v903 += v912;
                    v905 = (float *)((char *)v905 + __Nh);
                    ++v908;
                    v17 = *(int **)*a1;
                    v913 = v17[1];
                  }
                  while (v908 < v913);
                  v902 = *v17;
                  v77 = *v76;
                }
                else
                {
                  v913 = 0;
                  v909 = *(_QWORD **)(v16 + 24);
                  v910 = v909[1];
                  v911 = (_QWORD *)v76[3];
                  v912 = v911[1];
                }
                v904 = *v909 + v904 - v913 * v910;
                v903 = *v911 + v903 - v912 * *(int *)(v77 + 4);
                ++v1561;
              }
              while (v1561 < v902);
            }
          }
          else if (v160 == 1)
          {
            if (*v17)
            {
              v162 = 0;
              v163 = 0;
              v164 = 0;
              v165 = *(_QWORD *)(v16 + 152);
              v166 = v76[19];
              v167 = (int)v161;
              v168 = (float *)v15[19];
              do
              {
                vDSP_vdiv((const float *)(v166 + v163), 1, (const float *)(v165 + v164), 1, v168, 1, v167);
                v164 += **(_QWORD **)(*a1 + 24);
                v163 += **(_QWORD **)(*a2 + 24);
                v168 = (float *)((char *)v168 + v167);
                ++v162;
              }
              while (v162 < **(int **)*a1);
            }
          }
          else if (v15[6])
          {
            v914 = 0;
            v1562 = v76[19];
            __Ni = *(_QWORD *)(v16 + 152);
            v1520 = (int)v161;
            v915 = (float *)v15[19];
            do
            {
              v916 = *(_QWORD *)*a1;
              v917 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v916) >> 2;
              v918 = 0;
              v919 = (v917 - 1);
              if ((int)v917 - 1 >= 0)
              {
                v920 = *(_QWORD *)(*a1 + 24);
                v921 = v914;
                do
                {
                  v922 = ldiv(v921, *(int *)(v916 + 4 * v919));
                  v921 = v922.quot;
                  v918 += *(_QWORD *)(v920 + 8 * v919--) * v922.rem;
                }
                while (v919 != -1);
              }
              v923 = *(_QWORD *)*a2;
              v924 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v923) >> 2;
              v925 = 0;
              v926 = (v924 - 1);
              if ((int)v924 - 1 >= 0)
              {
                v927 = *(_QWORD *)(*a2 + 24);
                v928 = v914;
                do
                {
                  v929 = ldiv(v928, *(int *)(v923 + 4 * v926));
                  v928 = v929.quot;
                  v925 += *(_QWORD *)(v927 + 8 * v926--) * v929.rem;
                }
                while (v926 != -1);
              }
              vDSP_vdiv((const float *)(v1562 + (int)v925), 1, (const float *)(__Ni + (int)v918), 1, v915, 1, v1520);
              v915 = (float *)((char *)v915 + v1520);
              v914 += v1520;
            }
            while (v914 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_222:
          switch(v157)
          {
            case 1uLL:
              v169 = v15[6];
              if (v169)
              {
                v170 = *(_BYTE **)(v16 + 152);
                v171 = (_BYTE *)v15[19];
                v172 = **(_QWORD **)(v16 + 24);
                do
                {
                  *v171++ = *v170;
                  v170 += v172;
                  --v169;
                }
                while (v169);
              }
              break;
            case 2uLL:
              v294 = *v17;
              if ((_DWORD)v294)
              {
                v295 = 0;
                v296 = 0;
                v297 = 0;
                v298 = *(_QWORD *)(v16 + 152);
                v299 = v15[19];
                v300 = v17[1];
                v301 = *(uint64_t **)(v16 + 24);
                v303 = *v301;
                v302 = v301[1];
                if (v300 <= 1)
                  v304 = 1;
                else
                  v304 = v17[1];
                v305 = v303 - v302 * v300;
                do
                {
                  if ((_DWORD)v300)
                  {
                    v306 = v296 + v304;
                    v307 = (_BYTE *)(v299 + v296);
                    v308 = v304;
                    do
                    {
                      *v307++ = *(_BYTE *)(v298 + v297);
                      v297 += v302;
                      --v308;
                    }
                    while (v308);
                    v296 = v306;
                  }
                  v297 += v305;
                  ++v295;
                }
                while (v295 != v294);
              }
              break;
            case 3uLL:
              v309 = *v17;
              if ((_DWORD)v309)
              {
                v310 = 0;
                v311 = 0;
                v312 = 0;
                v313 = *(_QWORD *)(v16 + 152);
                v314 = v15[19];
                v315 = v17[1];
                v316 = *(_QWORD **)(v16 + 24);
                v317 = v316[1];
                if (v315 <= 1)
                  v318 = 1;
                else
                  v318 = v17[1];
                v319 = *v316 - v317 * v315;
                do
                {
                  if ((_DWORD)v315)
                  {
                    v320 = 0;
                    v321 = v17[2];
                    v322 = v316[2];
                    if (v321 <= 1)
                      v323 = 1;
                    else
                      v323 = v17[2];
                    do
                    {
                      v324 = v323;
                      if ((_DWORD)v321)
                      {
                        do
                        {
                          *(_BYTE *)(v314 + v311++) = *(_BYTE *)(v313 + v312);
                          v312 += v322;
                          --v324;
                        }
                        while (v324);
                      }
                      v312 += v317 - v322 * v321;
                      ++v320;
                    }
                    while (v320 != v318);
                  }
                  v312 += v319;
                  ++v310;
                }
                while (v310 != v309);
              }
              break;
            case 4uLL:
              v325 = *v17;
              if ((_DWORD)v325)
              {
                v326 = 0;
                v327 = 0;
                v328 = 0;
                v329 = *(_QWORD *)(v16 + 152);
                v330 = v15[19];
                v331 = v17[1];
                v332 = *(_QWORD **)(v16 + 24);
                v333 = v332[1];
                if (v331 <= 1)
                  v334 = 1;
                else
                  v334 = v17[1];
                v335 = *v332 - v333 * v331;
                do
                {
                  if ((_DWORD)v331)
                  {
                    v336 = 0;
                    v337 = v17[2];
                    v338 = v332[2];
                    if (v337 <= 1)
                      v339 = 1;
                    else
                      v339 = v17[2];
                    do
                    {
                      if ((_DWORD)v337)
                      {
                        v340 = 0;
                        v341 = v17[3];
                        v342 = v332[3];
                        if (v341 <= 1)
                          v343 = 1;
                        else
                          v343 = v17[3];
                        do
                        {
                          v344 = v343;
                          if ((_DWORD)v341)
                          {
                            do
                            {
                              *(_BYTE *)(v330 + v327++) = *(_BYTE *)(v329 + v328);
                              v328 += v342;
                              --v344;
                            }
                            while (v344);
                          }
                          v328 += v338 - v342 * v341;
                          ++v340;
                        }
                        while (v340 != v339);
                      }
                      v328 += v333 - v338 * v337;
                      ++v336;
                    }
                    while (v336 != v334);
                  }
                  v328 += v335;
                  ++v326;
                }
                while (v326 != v325);
              }
              break;
            default:
              v285 = v15[6];
              if (v285)
              {
                v286 = 0;
                v287 = *(_QWORD *)(v16 + 152);
                v288 = v15[19];
                do
                {
                  v289 = 0;
                  if ((v19 & 0x80000000) == 0)
                  {
                    v290 = *(_QWORD *)(v16 + 24);
                    v291 = v19;
                    v292 = v286;
                    do
                    {
                      v293 = ldiv(v292, v17[v291]);
                      v292 = v293.quot;
                      v289 += *(_QWORD *)(v290 + 8 * v291--) * v293.rem;
                    }
                    while (v291 != -1);
                  }
                  *(_BYTE *)(v288 + v286++) = *(_BYTE *)(v287 + (int)v289);
                }
                while (v286 != v285);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          v7 = **(_BYTE **)(*a1 + 152) / **(_BYTE **)(*a2 + 152);
          goto LABEL_10;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_20;
        case 3:
          goto LABEL_21;
        default:
          v24 = *(_QWORD **)a3;
          v25 = *a1;
          v26 = *(int **)*a1;
          v27 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v26) >> 2;
          v28 = v27 - 1;
          if ((int)v27 - 1 >= -1)
            v28 = -1;
          v29 = v28 + 1;
          v30 = v27 + 1;
          break;
      }
      while (1)
      {
        v31 = v30 - 2;
        if (v30 - 2 < 0)
          break;
        --v30;
        if (*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v31) != *(_QWORD *)(v24[3] + 8 * v31))
          goto LABEL_77;
      }
      v30 = v29;
LABEL_77:
      v83 = (int **)*a2;
      v84 = *(int **)*a2;
      v85 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v84) >> 2;
      v86 = v85 - 1;
      if ((int)v85 - 1 >= -1)
        v86 = -1;
      v87 = v86 + 1;
      v88 = v85 + 1;
      while (1)
      {
        v89 = v88 - 2;
        if (v88 - 2 < 0)
          break;
        --v88;
        if (*(_QWORD *)&v83[3][2 * v89] != *(_QWORD *)(v24[3] + 8 * v89))
          goto LABEL_128;
      }
      v88 = v87;
LABEL_128:
      v131 = v27 + 1;
      while (1)
      {
        v132 = v131 - 2;
        if (v131 - 2 < 0)
          break;
        --v131;
        if (*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v132))
          goto LABEL_163;
      }
      v131 = v29;
LABEL_163:
      v145 = v85 + 1;
      while (1)
      {
        v146 = v145 - 2;
        if (v145 - 2 < 0)
          break;
        --v145;
        if (*(_QWORD *)&v83[3][2 * v146])
          goto LABEL_228;
      }
      v145 = v87;
LABEL_228:
      v173 = (uint64_t)(v24[1] - *v24) >> 2;
      if (v30 <= v88)
        v174 = v88;
      else
        v174 = v30;
      if (v30 <= v145)
        v30 = v145;
      if (v131 > v88)
        v88 = v131;
      if (v173 > v88)
        v175 = 1;
      else
        v175 = 4;
      if (v173 <= v88)
        v88 = (uint64_t)(v24[1] - *v24) >> 2;
      if (v173 <= v30)
        v30 = v88;
      else
        v175 = 2;
      if (v173 <= v174)
      {
        v176 = v30;
      }
      else
      {
        v175 = 3;
        v176 = v174;
      }
      if (!v176)
        goto LABEL_257;
      v177 = *(_QWORD *)(v24[3] + 8 * (v176 - 1));
      if (v177 < 0x10)
        goto LABEL_257;
      switch(v175)
      {
        case 1:
          if (v176 == 2)
          {
            v1154 = *v26;
            if (*v26)
            {
              v1155 = 0;
              v1156 = 0;
              v1157 = 0;
              v1158 = *(_QWORD *)(v25 + 152);
              v1159 = v83[19];
              v1160 = (int)v177;
              v1161 = (float *)v24[19];
              do
              {
                if (v26[1])
                {
                  v1162 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(v1158 + v1157), (const float *)((char *)v1159 + v1156), 1, v1161, 1, v1160);
                    v25 = *a1;
                    v1163 = *(_QWORD **)(*a1 + 24);
                    v1164 = v1163[1];
                    v1157 += v1164;
                    v83 = (int **)*a2;
                    v1165 = *(int **)(*a2 + 24);
                    v1166 = *((_QWORD *)v1165 + 1);
                    v1156 += v1166;
                    v1161 = (float *)((char *)v1161 + v1160);
                    ++v1162;
                    v26 = *(int **)*a1;
                    v1167 = v26[1];
                  }
                  while (v1162 < v1167);
                  v1154 = *v26;
                  v84 = *v83;
                }
                else
                {
                  v1167 = 0;
                  v1163 = *(_QWORD **)(v25 + 24);
                  v1164 = v1163[1];
                  v1165 = v83[3];
                  v1166 = *((_QWORD *)v1165 + 1);
                }
                v1157 = *v1163 + v1157 - v1167 * v1164;
                v1156 = *(_QWORD *)v1165 + v1156 - v1166 * v84[1];
                ++v1155;
              }
              while (v1155 < v1154);
            }
          }
          else if (v176 == 1)
          {
            if (*v26)
            {
              v810 = 0;
              v811 = 0;
              v812 = 0;
              v813 = *(_QWORD *)(v25 + 152);
              v814 = v83[19];
              v815 = (int)v177;
              v816 = (float *)v24[19];
              do
              {
                vDSP_svdiv((const float *)(v813 + v812), (const float *)((char *)v814 + v811), 1, v816, 1, v815);
                v812 += **(_QWORD **)(*a1 + 24);
                v811 += **(_QWORD **)(*a2 + 24);
                v816 = (float *)((char *)v816 + v815);
                ++v810;
              }
              while (v810 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            v1168 = 0;
            v1577 = v83[19];
            __Nx = *(_QWORD *)(v25 + 152);
            v1533 = (int)v177;
            v1169 = (float *)v24[19];
            do
            {
              v1170 = *(_QWORD *)*a1;
              v1171 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1170) >> 2;
              v1172 = 0;
              v1173 = (v1171 - 1);
              if ((int)v1171 - 1 >= 0)
              {
                v1174 = *(_QWORD *)(*a1 + 24);
                v1175 = v1168;
                do
                {
                  v1176 = ldiv(v1175, *(int *)(v1170 + 4 * v1173));
                  v1175 = v1176.quot;
                  v1172 += *(_QWORD *)(v1174 + 8 * v1173--) * v1176.rem;
                }
                while (v1173 != -1);
              }
              v1177 = *(_QWORD *)*a2;
              v1178 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1177) >> 2;
              v1179 = 0;
              v1180 = (v1178 - 1);
              if ((int)v1178 - 1 >= 0)
              {
                v1181 = *(_QWORD *)(*a2 + 24);
                v1182 = v1168;
                do
                {
                  v1183 = ldiv(v1182, *(int *)(v1177 + 4 * v1180));
                  v1182 = v1183.quot;
                  v1179 += *(_QWORD *)(v1181 + 8 * v1180--) * v1183.rem;
                }
                while (v1180 != -1);
              }
              vDSP_svdiv((const float *)(__Nx + (int)v1172), (const float *)((char *)v1577 + (int)v1179), 1, v1169, 1, v1533);
              v1169 = (float *)((char *)v1169 + v1533);
              v1168 += v1533;
            }
            while (v1168 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v176 == 2)
          {
            v1184 = *v26;
            if (*v26)
            {
              v1185 = 0;
              v1186 = 0;
              v1187 = 0;
              v1188 = *(_QWORD *)(v25 + 152);
              v1189 = v83[19];
              v1190 = (int)v177;
              v1191 = (float *)v24[19];
              do
              {
                if (v26[1])
                {
                  v1192 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(v1188 + v1187), 1, (const float *)((char *)v1189 + v1186), v1191, 1, v1190);
                    v25 = *a1;
                    v1193 = *(_QWORD **)(*a1 + 24);
                    v1194 = v1193[1];
                    v1187 += v1194;
                    v83 = (int **)*a2;
                    v1195 = *(int **)(*a2 + 24);
                    v1196 = *((_QWORD *)v1195 + 1);
                    v1186 += v1196;
                    v1191 = (float *)((char *)v1191 + v1190);
                    ++v1192;
                    v26 = *(int **)*a1;
                    v1197 = v26[1];
                  }
                  while (v1192 < v1197);
                  v1184 = *v26;
                  v84 = *v83;
                }
                else
                {
                  v1197 = 0;
                  v1193 = *(_QWORD **)(v25 + 24);
                  v1194 = v1193[1];
                  v1195 = v83[3];
                  v1196 = *((_QWORD *)v1195 + 1);
                }
                v1187 = *v1193 + v1187 - v1197 * v1194;
                v1186 = *(_QWORD *)v1195 + v1186 - v1196 * v84[1];
                ++v1185;
              }
              while (v1185 < v1184);
            }
          }
          else if (v176 == 1)
          {
            if (*v26)
            {
              v817 = 0;
              v818 = 0;
              v819 = 0;
              v820 = *(_QWORD *)(v25 + 152);
              v821 = v83[19];
              v822 = (int)v177;
              v823 = (float *)v24[19];
              do
              {
                vDSP_vsdiv((const float *)(v820 + v819), 1, (const float *)((char *)v821 + v818), v823, 1, v822);
                v819 += **(_QWORD **)(*a1 + 24);
                v818 += **(_QWORD **)(*a2 + 24);
                v823 = (float *)((char *)v823 + v822);
                ++v817;
              }
              while (v817 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            v1198 = 0;
            v1578 = v83[19];
            __Ny = *(_QWORD *)(v25 + 152);
            v1534 = (int)v177;
            v1199 = (float *)v24[19];
            do
            {
              v1200 = *(_QWORD *)*a1;
              v1201 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1200) >> 2;
              v1202 = 0;
              v1203 = (v1201 - 1);
              if ((int)v1201 - 1 >= 0)
              {
                v1204 = *(_QWORD *)(*a1 + 24);
                v1205 = v1198;
                do
                {
                  v1206 = ldiv(v1205, *(int *)(v1200 + 4 * v1203));
                  v1205 = v1206.quot;
                  v1202 += *(_QWORD *)(v1204 + 8 * v1203--) * v1206.rem;
                }
                while (v1203 != -1);
              }
              v1207 = *(_QWORD *)*a2;
              v1208 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1207) >> 2;
              v1209 = 0;
              v1210 = (v1208 - 1);
              if ((int)v1208 - 1 >= 0)
              {
                v1211 = *(_QWORD *)(*a2 + 24);
                v1212 = v1198;
                do
                {
                  v1213 = ldiv(v1212, *(int *)(v1207 + 4 * v1210));
                  v1212 = v1213.quot;
                  v1209 += *(_QWORD *)(v1211 + 8 * v1210--) * v1213.rem;
                }
                while (v1210 != -1);
              }
              vDSP_vsdiv((const float *)(__Ny + (int)v1202), 1, (const float *)((char *)v1578 + (int)v1209), v1199, 1, v1534);
              v1199 = (float *)((char *)v1199 + v1534);
              v1198 += v1534;
            }
            while (v1198 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v176 == 2)
          {
            v930 = *v26;
            if (*v26)
            {
              v931 = 0;
              v932 = 0;
              v933 = 0;
              v934 = *(_QWORD *)(v25 + 152);
              v935 = v83[19];
              v936 = (int)v177;
              v937 = (float *)v24[19];
              do
              {
                if (v26[1])
                {
                  v938 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)((char *)v935 + v932), 1, (const float *)(v934 + v933), 1, v937, 1, v936);
                    v25 = *a1;
                    v939 = *(_QWORD **)(*a1 + 24);
                    v940 = v939[1];
                    v933 += v940;
                    v83 = (int **)*a2;
                    v941 = *(int **)(*a2 + 24);
                    v942 = *((_QWORD *)v941 + 1);
                    v932 += v942;
                    v937 = (float *)((char *)v937 + v936);
                    ++v938;
                    v26 = *(int **)*a1;
                    v943 = v26[1];
                  }
                  while (v938 < v943);
                  v930 = *v26;
                  v84 = *v83;
                }
                else
                {
                  v943 = 0;
                  v939 = *(_QWORD **)(v25 + 24);
                  v940 = v939[1];
                  v941 = v83[3];
                  v942 = *((_QWORD *)v941 + 1);
                }
                v933 = *v939 + v933 - v943 * v940;
                v932 = *(_QWORD *)v941 + v932 - v942 * v84[1];
                ++v931;
              }
              while (v931 < v930);
            }
          }
          else if (v176 == 1)
          {
            if (*v26)
            {
              v178 = 0;
              v179 = 0;
              v180 = 0;
              v181 = *(_QWORD *)(v25 + 152);
              v182 = v83[19];
              v183 = (int)v177;
              v184 = (float *)v24[19];
              do
              {
                vDSP_vdiv((const float *)((char *)v182 + v179), 1, (const float *)(v181 + v180), 1, v184, 1, v183);
                v180 += **(_QWORD **)(*a1 + 24);
                v179 += **(_QWORD **)(*a2 + 24);
                v184 = (float *)((char *)v184 + v183);
                ++v178;
              }
              while (v178 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            v944 = 0;
            v1563 = v83[19];
            __Nj = *(_QWORD *)(v25 + 152);
            v1521 = (int)v177;
            v945 = (float *)v24[19];
            do
            {
              v946 = *(_QWORD *)*a1;
              v947 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v946) >> 2;
              v948 = 0;
              v949 = (v947 - 1);
              if ((int)v947 - 1 >= 0)
              {
                v950 = *(_QWORD *)(*a1 + 24);
                v951 = v944;
                do
                {
                  v952 = ldiv(v951, *(int *)(v946 + 4 * v949));
                  v951 = v952.quot;
                  v948 += *(_QWORD *)(v950 + 8 * v949--) * v952.rem;
                }
                while (v949 != -1);
              }
              v953 = *(_QWORD *)*a2;
              v954 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v953) >> 2;
              v955 = 0;
              v956 = (v954 - 1);
              if ((int)v954 - 1 >= 0)
              {
                v957 = *(_QWORD *)(*a2 + 24);
                v958 = v944;
                do
                {
                  v959 = ldiv(v958, *(int *)(v953 + 4 * v956));
                  v958 = v959.quot;
                  v955 += *(_QWORD *)(v957 + 8 * v956--) * v959.rem;
                }
                while (v956 != -1);
              }
              vDSP_vdiv((const float *)((char *)v1563 + (int)v955), 1, (const float *)(__Nj + (int)v948), 1, v945, 1, v1521);
              v945 = (float *)((char *)v945 + v1521);
              v944 += v1521;
            }
            while (v944 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_257:
          switch(v173)
          {
            case 1uLL:
              if (v24[6])
              {
                v185 = 0;
                v186 = 0;
                v187 = 0;
                v188 = *(_QWORD *)(v25 + 152);
                v189 = v83[19];
                v190 = v24[19];
                do
                {
                  *(_BYTE *)(v190 + v185) = *(_BYTE *)(v188 + v187) / *((_BYTE *)v189 + v186);
                  v187 += **(_QWORD **)(*a1 + 24);
                  v186 += **(_QWORD **)(*a2 + 24);
                  ++v185;
                }
                while (v185 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v361 = *v26;
              if (*v26)
              {
                v362 = 0;
                v363 = 0;
                v364 = 0;
                v365 = 0;
                v366 = *(_QWORD *)(v25 + 152);
                v367 = v83[19];
                v368 = v24[19];
                do
                {
                  if (v26[1])
                  {
                    v369 = 0;
                    do
                    {
                      *(_BYTE *)(v368 + v363 + v369) = *(_BYTE *)(v366 + v365) / *((_BYTE *)v367 + v364);
                      v25 = *a1;
                      v370 = *(_QWORD **)(*a1 + 24);
                      v371 = v370[1];
                      v365 += v371;
                      v83 = (int **)*a2;
                      v372 = *(int **)(*a2 + 24);
                      v373 = *((_QWORD *)v372 + 1);
                      v364 += v373;
                      ++v369;
                      v26 = *(int **)*a1;
                      v374 = v26[1];
                    }
                    while (v369 < v374);
                    v361 = *v26;
                    v84 = *v83;
                    v363 += v369;
                  }
                  else
                  {
                    v374 = 0;
                    v370 = *(_QWORD **)(v25 + 24);
                    v371 = v370[1];
                    v372 = v83[3];
                    v373 = *((_QWORD *)v372 + 1);
                  }
                  v365 = *v370 + v365 - v374 * v371;
                  v364 = *(_QWORD *)v372 + v364 - v373 * v84[1];
                  ++v362;
                }
                while (v362 < v361);
              }
              break;
            case 3uLL:
              v375 = *v26;
              if (*v26)
              {
                v376 = 0;
                v377 = 0;
                v378 = 0;
                v379 = 0;
                v380 = *(_QWORD *)(v25 + 152);
                v381 = v83[19];
                v382 = v24[19];
                do
                {
                  if (v26[1])
                  {
                    v383 = 0;
                    do
                    {
                      if (v26[2])
                      {
                        v384 = 0;
                        do
                        {
                          *(_BYTE *)(v382 + v377 + v384) = *(_BYTE *)(v380 + v379) / *((_BYTE *)v381 + v378);
                          v25 = *a1;
                          v385 = *(_QWORD **)(*a1 + 24);
                          v386 = v385[2];
                          v379 += v386;
                          v83 = (int **)*a2;
                          v387 = *(int **)(*a2 + 24);
                          v388 = *((_QWORD *)v387 + 2);
                          v378 += v388;
                          ++v384;
                          v26 = *(int **)*a1;
                          v389 = v26[2];
                        }
                        while (v384 < v389);
                        v84 = *v83;
                        v377 += v384;
                      }
                      else
                      {
                        v389 = 0;
                        v385 = *(_QWORD **)(v25 + 24);
                        v386 = v385[2];
                        v387 = v83[3];
                        v388 = *((_QWORD *)v387 + 2);
                      }
                      v390 = v385[1];
                      v379 = v390 + v379 - v389 * v386;
                      v378 = *((_QWORD *)v387 + 1) + v378 - v388 * v84[2];
                      ++v383;
                      v391 = v26[1];
                    }
                    while (v383 < v391);
                    v375 = *v26;
                  }
                  else
                  {
                    v391 = 0;
                    v385 = *(_QWORD **)(v25 + 24);
                    v390 = v385[1];
                  }
                  v379 = *v385 + v379 - v391 * v390;
                  v378 = *(_QWORD *)v83[3] + v378 - *((_QWORD *)v83[3] + 1) * v84[1];
                  ++v376;
                }
                while (v376 < v375);
              }
              break;
            case 4uLL:
              v392 = *v26;
              if (*v26)
              {
                v393 = 0;
                v394 = 0;
                v395 = 0;
                v396 = 0;
                v397 = *(_QWORD *)(v25 + 152);
                v398 = v83[19];
                v399 = v24[19];
                do
                {
                  if (v26[1])
                  {
                    v400 = 0;
                    do
                    {
                      if (v26[2])
                      {
                        v401 = 0;
                        do
                        {
                          if (v26[3])
                          {
                            v402 = 0;
                            do
                            {
                              *(_BYTE *)(v399 + v394 + v402) = *(_BYTE *)(v397 + v396) / *((_BYTE *)v398 + v395);
                              v25 = *a1;
                              v403 = *(_QWORD **)(*a1 + 24);
                              v404 = v403[3];
                              v396 += v404;
                              v83 = (int **)*a2;
                              v405 = *(int **)(*a2 + 24);
                              v406 = *((_QWORD *)v405 + 3);
                              v395 += v406;
                              ++v402;
                              v26 = *(int **)*a1;
                              v407 = v26[3];
                            }
                            while (v402 < v407);
                            v84 = *v83;
                            v394 += v402;
                          }
                          else
                          {
                            v407 = 0;
                            v403 = *(_QWORD **)(v25 + 24);
                            v404 = v403[3];
                            v405 = v83[3];
                            v406 = *((_QWORD *)v405 + 3);
                          }
                          v408 = v403[2];
                          v396 = v408 + v396 - v407 * v404;
                          v395 = *((_QWORD *)v405 + 2) + v395 - v406 * v84[3];
                          ++v401;
                          v409 = v26[2];
                        }
                        while (v401 < v409);
                      }
                      else
                      {
                        v409 = 0;
                        v403 = *(_QWORD **)(v25 + 24);
                        v408 = v403[2];
                      }
                      v396 = v403[1] + v396 - v409 * v408;
                      v395 = *((_QWORD *)v83[3] + 1) + v395 - *((_QWORD *)v83[3] + 2) * v84[2];
                      ++v400;
                      v410 = v26[1];
                    }
                    while (v400 < v410);
                    v392 = *v26;
                  }
                  else
                  {
                    v410 = 0;
                  }
                  v396 = **(_QWORD **)(v25 + 24) + v396 - *(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) * v410;
                  v395 = *(_QWORD *)v83[3] + v395 - *((_QWORD *)v83[3] + 1) * v84[1];
                  ++v393;
                }
                while (v393 < v392);
              }
              break;
            default:
              if (v24[6])
              {
                v345 = 0;
                v1553 = v83[19];
                __N = *(_QWORD *)(v25 + 152);
                v346 = v24[19];
                do
                {
                  v347 = *(_QWORD *)*a1;
                  v348 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v347) >> 2;
                  v349 = 0;
                  v350 = (v348 - 1);
                  if ((int)v348 - 1 >= 0)
                  {
                    v351 = *(_QWORD *)(*a1 + 24);
                    v352 = v345;
                    do
                    {
                      v353 = ldiv(v352, *(int *)(v347 + 4 * v350));
                      v352 = v353.quot;
                      v349 += *(_QWORD *)(v351 + 8 * v350--) * v353.rem;
                    }
                    while (v350 != -1);
                  }
                  v354 = *(_QWORD *)*a2;
                  v355 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v354) >> 2;
                  v356 = 0;
                  v357 = (v355 - 1);
                  if ((int)v355 - 1 >= 0)
                  {
                    v358 = *(_QWORD *)(*a2 + 24);
                    v359 = v345;
                    do
                    {
                      v360 = ldiv(v359, *(int *)(v354 + 4 * v357));
                      v359 = v360.quot;
                      v356 += *(_QWORD *)(v358 + 8 * v357--) * v360.rem;
                    }
                    while (v357 != -1);
                  }
                  *(_BYTE *)(v346 + v345++) = *(_BYTE *)(__N + (int)v349) / *((_BYTE *)v1553 + (int)v356);
                }
                while (v345 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_20;
        case 3:
          goto LABEL_21;
        default:
          v32 = *(_QWORD **)a3;
          v33 = *a1;
          v34 = *(int **)*a1;
          v35 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v34) >> 2;
          v36 = (v35 - 1);
          if ((int)v36 >= -1)
            v37 = -1;
          else
            v37 = v35 - 1;
          v38 = v37 + 1;
          v39 = v35 + 1;
          break;
      }
      while (1)
      {
        v40 = v39 - 2;
        if (v39 - 2 < 0)
          break;
        --v39;
        if (*(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * v40) != *(_QWORD *)(v32[3] + 8 * v40))
          goto LABEL_84;
      }
      v39 = v38;
LABEL_84:
      v90 = (int **)*a2;
      v91 = *(int **)*a2;
      v92 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v91) >> 2;
      v93 = (v92 - 1);
      if ((int)v93 >= -1)
        v94 = -1;
      else
        v94 = v92 - 1;
      v95 = v94 + 1;
      v96 = v92 + 1;
      while (1)
      {
        v97 = v96 - 2;
        if (v96 - 2 < 0)
          break;
        --v96;
        if (*(_QWORD *)&v90[3][2 * v97] != *(_QWORD *)(v32[3] + 8 * v97))
          goto LABEL_133;
      }
      v96 = v95;
LABEL_133:
      v133 = v35 + 1;
      while (1)
      {
        v134 = v133 - 2;
        if (v133 - 2 < 0)
          break;
        --v133;
        if (*(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * v134))
          goto LABEL_168;
      }
      v133 = v38;
LABEL_168:
      v147 = v92 + 1;
      while (1)
      {
        v148 = v147 - 2;
        if (v147 - 2 < 0)
          break;
        --v147;
        if (*(_QWORD *)&v90[3][2 * v148])
          goto LABEL_263;
      }
      v147 = v95;
LABEL_263:
      v191 = (uint64_t)(v32[1] - *v32) >> 2;
      if (v39 <= v96)
        v192 = v96;
      else
        v192 = v39;
      if (v39 <= v147)
        v39 = v147;
      if (v133 > v96)
        v96 = v133;
      if (v191 > v96)
        v193 = 1;
      else
        v193 = 4;
      if (v191 <= v96)
        v96 = (uint64_t)(v32[1] - *v32) >> 2;
      if (v191 <= v39)
        v39 = v96;
      else
        v193 = 2;
      if (v191 <= v192)
      {
        v194 = v39;
      }
      else
      {
        v193 = 3;
        v194 = v192;
      }
      if (!v194)
        goto LABEL_292;
      v195 = *(_QWORD *)(v32[3] + 8 * (v194 - 1));
      if (v195 < 0x10)
        goto LABEL_292;
      switch(v193)
      {
        case 1:
          if (v194 == 2)
          {
            v1214 = *v34;
            if (*v34)
            {
              v1215 = 0;
              v1216 = 0;
              __Nz = *(_QWORD *)(v33 + 152);
              v1579 = v90[19];
              v1217 = (float *)v32[19];
              v1506 = 0;
              v1535 = (int)v195;
              v1218 = 4 * (int)v195;
              do
              {
                if (v34[1])
                {
                  v1219 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(__Nz + 4 * v1216), (const float *)&v1579[v1215], 1, v1217, 1, v1535);
                    v33 = *a1;
                    v1220 = *(_QWORD **)(*a1 + 24);
                    v1221 = v1220[1];
                    v1216 += v1221;
                    v90 = (int **)*a2;
                    v1222 = *(int **)(*a2 + 24);
                    v1223 = *((_QWORD *)v1222 + 1);
                    v1215 += v1223;
                    ++v1219;
                    v34 = *(int **)*a1;
                    v1224 = v34[1];
                    v1217 = (float *)((char *)v1217 + v1218);
                  }
                  while (v1219 < v1224);
                  v1214 = *v34;
                  v91 = *v90;
                }
                else
                {
                  v1224 = 0;
                  v1220 = *(_QWORD **)(v33 + 24);
                  v1221 = v1220[1];
                  v1222 = v90[3];
                  v1223 = *((_QWORD *)v1222 + 1);
                }
                v1216 = *v1220 + v1216 - v1224 * v1221;
                v1215 = *(_QWORD *)v1222 + v1215 - v1223 * v91[1];
                ++v1506;
              }
              while (v1506 < v1214);
            }
          }
          else if (v194 == 1)
          {
            if (*v34)
            {
              v824 = 0;
              v825 = 0;
              v826 = 0;
              v827 = *(_QWORD *)(v33 + 152);
              v828 = v90[19];
              v829 = (int)v195;
              v830 = 4 * (int)v195;
              v831 = (float *)v32[19];
              do
              {
                vDSP_svdiv((const float *)(v827 + 4 * v826), (const float *)&v828[v825], 1, v831, 1, v829);
                v826 += **(_QWORD **)(*a1 + 24);
                v825 += **(_QWORD **)(*a2 + 24);
                ++v824;
                v831 = (float *)((char *)v831 + v830);
              }
              while (v824 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            v1225 = 0;
            v1580 = v90[19];
            __Nba = *(_QWORD *)(v33 + 152);
            v1536 = (int)v195;
            v1226 = (float *)v32[19];
            do
            {
              v1227 = *(_QWORD *)*a1;
              v1228 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1227) >> 2;
              v1229 = 0;
              v1230 = (v1228 - 1);
              if ((int)v1228 - 1 >= 0)
              {
                v1231 = *(_QWORD *)(*a1 + 24);
                v1232 = v1225;
                do
                {
                  v1233 = ldiv(v1232, *(int *)(v1227 + 4 * v1230));
                  v1232 = v1233.quot;
                  v1229 += *(_QWORD *)(v1231 + 8 * v1230--) * v1233.rem;
                }
                while (v1230 != -1);
              }
              v1234 = *(_QWORD *)*a2;
              v1235 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1234) >> 2;
              v1236 = 0;
              v1237 = (v1235 - 1);
              if ((int)v1235 - 1 >= 0)
              {
                v1238 = *(_QWORD *)(*a2 + 24);
                v1239 = v1225;
                do
                {
                  v1240 = ldiv(v1239, *(int *)(v1234 + 4 * v1237));
                  v1239 = v1240.quot;
                  v1236 += *(_QWORD *)(v1238 + 8 * v1237--) * v1240.rem;
                }
                while (v1237 != -1);
              }
              vDSP_svdiv((const float *)(__Nba + 4 * (int)v1229), (const float *)&v1580[(int)v1236], 1, v1226, 1, v1536);
              v1226 += v1536;
              v1225 += v1536;
            }
            while (v1225 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v194 == 2)
          {
            v1241 = *v34;
            if (*v34)
            {
              v1242 = 0;
              v1243 = 0;
              __Nbb = *(_QWORD *)(v33 + 152);
              v1581 = v90[19];
              v1244 = (float *)v32[19];
              v1507 = 0;
              v1537 = (int)v195;
              v1245 = 4 * (int)v195;
              do
              {
                if (v34[1])
                {
                  v1246 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(__Nbb + 4 * v1243), 1, (const float *)&v1581[v1242], v1244, 1, v1537);
                    v33 = *a1;
                    v1247 = *(_QWORD **)(*a1 + 24);
                    v1248 = v1247[1];
                    v1243 += v1248;
                    v90 = (int **)*a2;
                    v1249 = *(int **)(*a2 + 24);
                    v1250 = *((_QWORD *)v1249 + 1);
                    v1242 += v1250;
                    ++v1246;
                    v34 = *(int **)*a1;
                    v1251 = v34[1];
                    v1244 = (float *)((char *)v1244 + v1245);
                  }
                  while (v1246 < v1251);
                  v1241 = *v34;
                  v91 = *v90;
                }
                else
                {
                  v1251 = 0;
                  v1247 = *(_QWORD **)(v33 + 24);
                  v1248 = v1247[1];
                  v1249 = v90[3];
                  v1250 = *((_QWORD *)v1249 + 1);
                }
                v1243 = *v1247 + v1243 - v1251 * v1248;
                v1242 = *(_QWORD *)v1249 + v1242 - v1250 * v91[1];
                ++v1507;
              }
              while (v1507 < v1241);
            }
          }
          else if (v194 == 1)
          {
            if (*v34)
            {
              v832 = 0;
              v833 = 0;
              v834 = 0;
              v835 = *(_QWORD *)(v33 + 152);
              v836 = v90[19];
              v837 = (int)v195;
              v838 = 4 * (int)v195;
              v839 = (float *)v32[19];
              do
              {
                vDSP_vsdiv((const float *)(v835 + 4 * v834), 1, (const float *)&v836[v833], v839, 1, v837);
                v834 += **(_QWORD **)(*a1 + 24);
                v833 += **(_QWORD **)(*a2 + 24);
                ++v832;
                v839 = (float *)((char *)v839 + v838);
              }
              while (v832 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            v1252 = 0;
            v1582 = v90[19];
            __Nbc = *(_QWORD *)(v33 + 152);
            v1538 = (int)v195;
            v1253 = (float *)v32[19];
            do
            {
              v1254 = *(_QWORD *)*a1;
              v1255 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1254) >> 2;
              v1256 = 0;
              v1257 = (v1255 - 1);
              if ((int)v1255 - 1 >= 0)
              {
                v1258 = *(_QWORD *)(*a1 + 24);
                v1259 = v1252;
                do
                {
                  v1260 = ldiv(v1259, *(int *)(v1254 + 4 * v1257));
                  v1259 = v1260.quot;
                  v1256 += *(_QWORD *)(v1258 + 8 * v1257--) * v1260.rem;
                }
                while (v1257 != -1);
              }
              v1261 = *(_QWORD *)*a2;
              v1262 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1261) >> 2;
              v1263 = 0;
              v1264 = (v1262 - 1);
              if ((int)v1262 - 1 >= 0)
              {
                v1265 = *(_QWORD *)(*a2 + 24);
                v1266 = v1252;
                do
                {
                  v1267 = ldiv(v1266, *(int *)(v1261 + 4 * v1264));
                  v1266 = v1267.quot;
                  v1263 += *(_QWORD *)(v1265 + 8 * v1264--) * v1267.rem;
                }
                while (v1264 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbc + 4 * (int)v1256), 1, (const float *)&v1582[(int)v1263], v1253, 1, v1538);
              v1253 += v1538;
              v1252 += v1538;
            }
            while (v1252 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v194 == 2)
          {
            v960 = *v34;
            if (*v34)
            {
              v961 = 0;
              v962 = 0;
              __Nk = *(_QWORD *)(v33 + 152);
              v1564 = v90[19];
              v963 = (float *)v32[19];
              v1502 = 0;
              v1522 = (int)v195;
              v964 = 4 * (int)v195;
              do
              {
                if (v34[1])
                {
                  v965 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)&v1564[v961], 1, (const float *)(__Nk + 4 * v962), 1, v963, 1, v1522);
                    v33 = *a1;
                    v966 = *(_QWORD **)(*a1 + 24);
                    v967 = v966[1];
                    v962 += v967;
                    v90 = (int **)*a2;
                    v968 = *(int **)(*a2 + 24);
                    v969 = *((_QWORD *)v968 + 1);
                    v961 += v969;
                    ++v965;
                    v34 = *(int **)*a1;
                    v970 = v34[1];
                    v963 = (float *)((char *)v963 + v964);
                  }
                  while (v965 < v970);
                  v960 = *v34;
                  v91 = *v90;
                }
                else
                {
                  v970 = 0;
                  v966 = *(_QWORD **)(v33 + 24);
                  v967 = v966[1];
                  v968 = v90[3];
                  v969 = *((_QWORD *)v968 + 1);
                }
                v962 = *v966 + v962 - v970 * v967;
                v961 = *(_QWORD *)v968 + v961 - v969 * v91[1];
                ++v1502;
              }
              while (v1502 < v960);
            }
          }
          else if (v194 == 1)
          {
            if (*v34)
            {
              v196 = 0;
              v197 = 0;
              v198 = 0;
              v199 = *(_QWORD *)(v33 + 152);
              v200 = v90[19];
              v201 = (int)v195;
              v202 = 4 * (int)v195;
              v203 = (float *)v32[19];
              do
              {
                vDSP_vdiv((const float *)&v200[v197], 1, (const float *)(v199 + 4 * v198), 1, v203, 1, v201);
                v198 += **(_QWORD **)(*a1 + 24);
                v197 += **(_QWORD **)(*a2 + 24);
                ++v196;
                v203 = (float *)((char *)v203 + v202);
              }
              while (v196 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            v971 = 0;
            v1565 = v90[19];
            __Nl = *(_QWORD *)(v33 + 152);
            v1523 = (int)v195;
            v972 = (float *)v32[19];
            do
            {
              v973 = *(_QWORD *)*a1;
              v974 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v973) >> 2;
              v975 = 0;
              v976 = (v974 - 1);
              if ((int)v974 - 1 >= 0)
              {
                v977 = *(_QWORD *)(*a1 + 24);
                v978 = v971;
                do
                {
                  v979 = ldiv(v978, *(int *)(v973 + 4 * v976));
                  v978 = v979.quot;
                  v975 += *(_QWORD *)(v977 + 8 * v976--) * v979.rem;
                }
                while (v976 != -1);
              }
              v980 = *(_QWORD *)*a2;
              v981 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v980) >> 2;
              v982 = 0;
              v983 = (v981 - 1);
              if ((int)v981 - 1 >= 0)
              {
                v984 = *(_QWORD *)(*a2 + 24);
                v985 = v971;
                do
                {
                  v986 = ldiv(v985, *(int *)(v980 + 4 * v983));
                  v985 = v986.quot;
                  v982 += *(_QWORD *)(v984 + 8 * v983--) * v986.rem;
                }
                while (v983 != -1);
              }
              vDSP_vdiv((const float *)&v1565[(int)v982], 1, (const float *)(__Nl + 4 * (int)v975), 1, v972, 1, v1523);
              v972 += v1523;
              v971 += v1523;
            }
            while (v971 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_292:
          switch(v191)
          {
            case 1uLL:
              v204 = v32[6];
              if (v204)
              {
                v205 = *(_DWORD **)(v33 + 152);
                v206 = v90[19];
                v207 = (int *)v32[19];
                v208 = 4 * *(_QWORD *)v90[3];
                v209 = 4 * **(_QWORD **)(v33 + 24);
                do
                {
                  *v207++ = *v205 / *v206;
                  v206 = (int *)((char *)v206 + v208);
                  v205 = (_DWORD *)((char *)v205 + v209);
                  --v204;
                }
                while (v204);
              }
              break;
            case 2uLL:
              v422 = *v34;
              if (*v34)
              {
                v423 = 0;
                v424 = 0;
                v425 = 0;
                v426 = 0;
                v427 = *(_QWORD *)(v33 + 152);
                v428 = v90[19];
                v429 = v32[19];
                v430 = *(uint64_t **)(v33 + 24);
                v431 = *v430;
                v432 = v430[1];
                v433 = v90[3];
                v435 = *(_QWORD *)v433;
                v434 = *((_QWORD *)v433 + 1);
                v436 = v34[1];
                do
                {
                  if (v436)
                  {
                    for (i = 0; i < v436; ++i)
                    {
                      *(_DWORD *)(v429 + 4 * v424 + 4 * i) = *(_DWORD *)(v427 + 4 * v426) / v428[v425];
                      v426 += v432;
                      v425 += v434;
                      v436 = v34[1];
                    }
                    v438 = v436;
                    v422 = *v34;
                    v424 += i;
                  }
                  else
                  {
                    v438 = 0;
                  }
                  v426 = v426 + v431 - v438 * v432;
                  v425 = v425 + v435 - v434 * v91[1];
                  ++v423;
                }
                while (v423 < v422);
              }
              break;
            case 3uLL:
              v439 = *v34;
              if (*v34)
              {
                v440 = 0;
                v441 = 0;
                v442 = 0;
                v443 = 0;
                v444 = *(_QWORD *)(v33 + 152);
                v445 = v90[19];
                v446 = v32[19];
                v447 = *(uint64_t **)(v33 + 24);
                v448 = *v447;
                v449 = v447[1];
                v450 = v90[3];
                v451 = *(_QWORD *)v450;
                v452 = *((_QWORD *)v450 + 1);
                v453 = v34[1];
                v454 = v453;
                do
                {
                  if (v454)
                  {
                    v455 = 0;
                    v456 = v447[2];
                    v457 = *((_QWORD *)v450 + 2);
                    v458 = v34[2];
                    do
                    {
                      if (v458)
                      {
                        for (j = 0; j < v458; ++j)
                        {
                          *(_DWORD *)(v446 + 4 * v441 + 4 * j) = *(_DWORD *)(v444 + 4 * v443) / v445[v442];
                          v443 += v456;
                          v442 += v457;
                          v458 = v34[2];
                        }
                        v460 = v458;
                        v453 = v34[1];
                        v441 += j;
                      }
                      else
                      {
                        v460 = 0;
                      }
                      v443 = v443 + v449 - v460 * v456;
                      v442 = v442 + v452 - v457 * v91[2];
                      ++v455;
                    }
                    while (v455 < v453);
                    v461 = v453;
                    v439 = *v34;
                    v454 = v453;
                  }
                  else
                  {
                    v461 = 0;
                  }
                  v443 = v443 + v448 - v461 * v449;
                  v442 = v442 + v451 - v452 * v91[1];
                  ++v440;
                }
                while (v440 < v439);
              }
              break;
            case 4uLL:
              v462 = *v34;
              if (*v34)
              {
                v463 = 0;
                v464 = 0;
                v465 = 0;
                v466 = 0;
                v467 = *(_QWORD *)(v33 + 152);
                v468 = v90[19];
                v469 = v32[19];
                v470 = *(uint64_t **)(v33 + 24);
                v471 = *v470;
                v472 = v470[1];
                v473 = v90[3];
                v474 = *(_QWORD *)v473;
                v475 = *((_QWORD *)v473 + 1);
                v476 = v34[1];
                v477 = v476;
                do
                {
                  if (v477)
                  {
                    v478 = 0;
                    v479 = v470[2];
                    v480 = *((_QWORD *)v473 + 2);
                    v481 = v34[2];
                    v482 = v481;
                    do
                    {
                      if (v482)
                      {
                        v483 = 0;
                        v484 = v470[3];
                        v485 = *((_QWORD *)v473 + 3);
                        v486 = v34[3];
                        do
                        {
                          if (v486)
                          {
                            for (k = 0; k < v486; ++k)
                            {
                              *(_DWORD *)(v469 + 4 * v464 + 4 * k) = *(_DWORD *)(v467 + 4 * v466)
                                                                   / v468[v465];
                              v466 += v484;
                              v465 += v485;
                              v486 = v34[3];
                            }
                            v488 = v486;
                            v481 = v34[2];
                            v464 += k;
                          }
                          else
                          {
                            v488 = 0;
                          }
                          v466 = v466 + v479 - v488 * v484;
                          v465 = v465 + v480 - v485 * v91[3];
                          ++v483;
                        }
                        while (v483 < v481);
                        v489 = v481;
                        v476 = v34[1];
                        v482 = v481;
                      }
                      else
                      {
                        v489 = 0;
                      }
                      v466 = v466 + v472 - v489 * v479;
                      v465 = v465 + v475 - v480 * v91[2];
                      ++v478;
                    }
                    while (v478 < v476);
                    v490 = v476;
                    v462 = *v34;
                    v477 = v476;
                  }
                  else
                  {
                    v490 = 0;
                  }
                  v466 = v466 + v471 - v490 * v472;
                  v465 = v465 + v474 - v475 * v91[1];
                  ++v463;
                }
                while (v463 < v462);
              }
              break;
            default:
              v1554 = v32[6];
              __Na = v36;
              if (v1554)
              {
                v411 = 0;
                v1496 = v90[19];
                v1514 = *(_QWORD *)(v33 + 152);
                v1491 = v32[19];
                do
                {
                  v412 = __Na;
                  if ((__Na & 0x80000000) != 0)
                  {
                    LODWORD(v413) = 0;
                  }
                  else
                  {
                    v413 = 0;
                    v414 = *(_QWORD *)(v33 + 24);
                    v415 = v411;
                    do
                    {
                      v416 = ldiv(v415, v34[v412]);
                      v415 = v416.quot;
                      v413 += *(_QWORD *)(v414 + 8 * v412--) * v416.rem;
                    }
                    while (v412 != -1);
                  }
                  v417 = 0;
                  if ((v93 & 0x80000000) == 0)
                  {
                    v418 = v90[3];
                    v419 = v93;
                    v420 = v411;
                    do
                    {
                      v421 = ldiv(v420, v91[v419]);
                      v420 = v421.quot;
                      v417 += *(_QWORD *)&v418[2 * v419--] * v421.rem;
                    }
                    while (v419 != -1);
                  }
                  *(_DWORD *)(v1491 + 4 * v411++) = *(_DWORD *)(v1514 + 4 * (int)v413)
                                                  / v1496[(int)v417];
                }
                while (v411 != v1554);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v11)
      {
        case 0:
          v7 = **(char **)(*a1 + 152) / **(char **)(*a2 + 152);
LABEL_10:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_20;
        case 3:
          goto LABEL_21;
        default:
          v41 = *(_QWORD **)a3;
          v42 = *a1;
          v43 = *(int **)*a1;
          v44 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v43) >> 2;
          v45 = v44 - 1;
          if ((int)v44 - 1 >= -1)
            v45 = -1;
          v46 = v45 + 1;
          v47 = v44 + 1;
          break;
      }
      while (1)
      {
        v48 = v47 - 2;
        if (v47 - 2 < 0)
          break;
        --v47;
        if (*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8 * v48) != *(_QWORD *)(v41[3] + 8 * v48))
          goto LABEL_92;
      }
      v47 = v46;
LABEL_92:
      v98 = (int **)*a2;
      v99 = *(int **)*a2;
      v100 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v99) >> 2;
      v101 = v100 - 1;
      if ((int)v100 - 1 >= -1)
        v101 = -1;
      v102 = v101 + 1;
      v103 = v100 + 1;
      while (1)
      {
        v104 = v103 - 2;
        if (v103 - 2 < 0)
          break;
        --v103;
        if (*(_QWORD *)&v98[3][2 * v104] != *(_QWORD *)(v41[3] + 8 * v104))
          goto LABEL_138;
      }
      v103 = v102;
LABEL_138:
      v135 = v44 + 1;
      while (1)
      {
        v136 = v135 - 2;
        if (v135 - 2 < 0)
          break;
        --v135;
        if (*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8 * v136))
          goto LABEL_173;
      }
      v135 = v46;
LABEL_173:
      v149 = v100 + 1;
      while (1)
      {
        v150 = v149 - 2;
        if (v149 - 2 < 0)
          break;
        --v149;
        if (*(_QWORD *)&v98[3][2 * v150])
          goto LABEL_298;
      }
      v149 = v102;
LABEL_298:
      v210 = (uint64_t)(v41[1] - *v41) >> 2;
      if (v47 <= v103)
        v211 = v103;
      else
        v211 = v47;
      if (v47 <= v149)
        v47 = v149;
      if (v135 > v103)
        v103 = v135;
      if (v210 > v103)
        v212 = 1;
      else
        v212 = 4;
      if (v210 <= v103)
        v103 = (uint64_t)(v41[1] - *v41) >> 2;
      if (v210 <= v47)
        v47 = v103;
      else
        v212 = 2;
      if (v210 <= v211)
      {
        v213 = v47;
      }
      else
      {
        v212 = 3;
        v213 = v211;
      }
      if (!v213)
        goto LABEL_327;
      v214 = *(_QWORD *)(v41[3] + 8 * (v213 - 1));
      if (v214 < 0x10)
        goto LABEL_327;
      switch(v212)
      {
        case 1:
          if (v213 == 2)
          {
            v1268 = *v43;
            if (*v43)
            {
              v1269 = 0;
              v1270 = 0;
              v1271 = 0;
              v1272 = *(_QWORD *)(v42 + 152);
              v1273 = v98[19];
              v1274 = (int)v214;
              v1275 = (float *)v41[19];
              do
              {
                if (v43[1])
                {
                  v1276 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(v1272 + v1271), (const float *)((char *)v1273 + v1270), 1, v1275, 1, v1274);
                    v42 = *a1;
                    v1277 = *(_QWORD **)(*a1 + 24);
                    v1278 = v1277[1];
                    v1271 += v1278;
                    v98 = (int **)*a2;
                    v1279 = *(int **)(*a2 + 24);
                    v1280 = *((_QWORD *)v1279 + 1);
                    v1270 += v1280;
                    v1275 = (float *)((char *)v1275 + v1274);
                    ++v1276;
                    v43 = *(int **)*a1;
                    v1281 = v43[1];
                  }
                  while (v1276 < v1281);
                  v1268 = *v43;
                  v99 = *v98;
                }
                else
                {
                  v1281 = 0;
                  v1277 = *(_QWORD **)(v42 + 24);
                  v1278 = v1277[1];
                  v1279 = v98[3];
                  v1280 = *((_QWORD *)v1279 + 1);
                }
                v1271 = *v1277 + v1271 - v1281 * v1278;
                v1270 = *(_QWORD *)v1279 + v1270 - v1280 * v99[1];
                ++v1269;
              }
              while (v1269 < v1268);
            }
          }
          else if (v213 == 1)
          {
            if (*v43)
            {
              v840 = 0;
              v841 = 0;
              v842 = 0;
              v843 = *(_QWORD *)(v42 + 152);
              v844 = v98[19];
              v845 = (int)v214;
              v846 = (float *)v41[19];
              do
              {
                vDSP_svdiv((const float *)(v843 + v842), (const float *)((char *)v844 + v841), 1, v846, 1, v845);
                v842 += **(_QWORD **)(*a1 + 24);
                v841 += **(_QWORD **)(*a2 + 24);
                v846 = (float *)((char *)v846 + v845);
                ++v840;
              }
              while (v840 < **(int **)*a1);
            }
          }
          else if (v41[6])
          {
            v1282 = 0;
            v1583 = v98[19];
            __Nbd = *(_QWORD *)(v42 + 152);
            v1539 = (int)v214;
            v1283 = (float *)v41[19];
            do
            {
              v1284 = *(_QWORD *)*a1;
              v1285 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1284) >> 2;
              v1286 = 0;
              v1287 = (v1285 - 1);
              if ((int)v1285 - 1 >= 0)
              {
                v1288 = *(_QWORD *)(*a1 + 24);
                v1289 = v1282;
                do
                {
                  v1290 = ldiv(v1289, *(int *)(v1284 + 4 * v1287));
                  v1289 = v1290.quot;
                  v1286 += *(_QWORD *)(v1288 + 8 * v1287--) * v1290.rem;
                }
                while (v1287 != -1);
              }
              v1291 = *(_QWORD *)*a2;
              v1292 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1291) >> 2;
              v1293 = 0;
              v1294 = (v1292 - 1);
              if ((int)v1292 - 1 >= 0)
              {
                v1295 = *(_QWORD *)(*a2 + 24);
                v1296 = v1282;
                do
                {
                  v1297 = ldiv(v1296, *(int *)(v1291 + 4 * v1294));
                  v1296 = v1297.quot;
                  v1293 += *(_QWORD *)(v1295 + 8 * v1294--) * v1297.rem;
                }
                while (v1294 != -1);
              }
              vDSP_svdiv((const float *)(__Nbd + (int)v1286), (const float *)((char *)v1583 + (int)v1293), 1, v1283, 1, v1539);
              v1283 = (float *)((char *)v1283 + v1539);
              v1282 += v1539;
            }
            while (v1282 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v213 == 2)
          {
            v1298 = *v43;
            if (*v43)
            {
              v1299 = 0;
              v1300 = 0;
              v1301 = 0;
              v1302 = *(_QWORD *)(v42 + 152);
              v1303 = v98[19];
              v1304 = (int)v214;
              v1305 = (float *)v41[19];
              do
              {
                if (v43[1])
                {
                  v1306 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(v1302 + v1301), 1, (const float *)((char *)v1303 + v1300), v1305, 1, v1304);
                    v42 = *a1;
                    v1307 = *(_QWORD **)(*a1 + 24);
                    v1308 = v1307[1];
                    v1301 += v1308;
                    v98 = (int **)*a2;
                    v1309 = *(int **)(*a2 + 24);
                    v1310 = *((_QWORD *)v1309 + 1);
                    v1300 += v1310;
                    v1305 = (float *)((char *)v1305 + v1304);
                    ++v1306;
                    v43 = *(int **)*a1;
                    v1311 = v43[1];
                  }
                  while (v1306 < v1311);
                  v1298 = *v43;
                  v99 = *v98;
                }
                else
                {
                  v1311 = 0;
                  v1307 = *(_QWORD **)(v42 + 24);
                  v1308 = v1307[1];
                  v1309 = v98[3];
                  v1310 = *((_QWORD *)v1309 + 1);
                }
                v1301 = *v1307 + v1301 - v1311 * v1308;
                v1300 = *(_QWORD *)v1309 + v1300 - v1310 * v99[1];
                ++v1299;
              }
              while (v1299 < v1298);
            }
          }
          else if (v213 == 1)
          {
            if (*v43)
            {
              v847 = 0;
              v848 = 0;
              v849 = 0;
              v850 = *(_QWORD *)(v42 + 152);
              v851 = v98[19];
              v852 = (int)v214;
              v853 = (float *)v41[19];
              do
              {
                vDSP_vsdiv((const float *)(v850 + v849), 1, (const float *)((char *)v851 + v848), v853, 1, v852);
                v849 += **(_QWORD **)(*a1 + 24);
                v848 += **(_QWORD **)(*a2 + 24);
                v853 = (float *)((char *)v853 + v852);
                ++v847;
              }
              while (v847 < **(int **)*a1);
            }
          }
          else if (v41[6])
          {
            v1312 = 0;
            v1584 = v98[19];
            __Nbe = *(_QWORD *)(v42 + 152);
            v1540 = (int)v214;
            v1313 = (float *)v41[19];
            do
            {
              v1314 = *(_QWORD *)*a1;
              v1315 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1314) >> 2;
              v1316 = 0;
              v1317 = (v1315 - 1);
              if ((int)v1315 - 1 >= 0)
              {
                v1318 = *(_QWORD *)(*a1 + 24);
                v1319 = v1312;
                do
                {
                  v1320 = ldiv(v1319, *(int *)(v1314 + 4 * v1317));
                  v1319 = v1320.quot;
                  v1316 += *(_QWORD *)(v1318 + 8 * v1317--) * v1320.rem;
                }
                while (v1317 != -1);
              }
              v1321 = *(_QWORD *)*a2;
              v1322 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1321) >> 2;
              v1323 = 0;
              v1324 = (v1322 - 1);
              if ((int)v1322 - 1 >= 0)
              {
                v1325 = *(_QWORD *)(*a2 + 24);
                v1326 = v1312;
                do
                {
                  v1327 = ldiv(v1326, *(int *)(v1321 + 4 * v1324));
                  v1326 = v1327.quot;
                  v1323 += *(_QWORD *)(v1325 + 8 * v1324--) * v1327.rem;
                }
                while (v1324 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbe + (int)v1316), 1, (const float *)((char *)v1584 + (int)v1323), v1313, 1, v1540);
              v1313 = (float *)((char *)v1313 + v1540);
              v1312 += v1540;
            }
            while (v1312 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v213 == 2)
          {
            v987 = *v43;
            if (*v43)
            {
              v988 = 0;
              v989 = 0;
              v990 = 0;
              v991 = *(_QWORD *)(v42 + 152);
              v992 = v98[19];
              v993 = (int)v214;
              v994 = (float *)v41[19];
              do
              {
                if (v43[1])
                {
                  v995 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)((char *)v992 + v989), 1, (const float *)(v991 + v990), 1, v994, 1, v993);
                    v42 = *a1;
                    v996 = *(_QWORD **)(*a1 + 24);
                    v997 = v996[1];
                    v990 += v997;
                    v98 = (int **)*a2;
                    v998 = *(int **)(*a2 + 24);
                    v999 = *((_QWORD *)v998 + 1);
                    v989 += v999;
                    v994 = (float *)((char *)v994 + v993);
                    ++v995;
                    v43 = *(int **)*a1;
                    v1000 = v43[1];
                  }
                  while (v995 < v1000);
                  v987 = *v43;
                  v99 = *v98;
                }
                else
                {
                  v1000 = 0;
                  v996 = *(_QWORD **)(v42 + 24);
                  v997 = v996[1];
                  v998 = v98[3];
                  v999 = *((_QWORD *)v998 + 1);
                }
                v990 = *v996 + v990 - v1000 * v997;
                v989 = *(_QWORD *)v998 + v989 - v999 * v99[1];
                ++v988;
              }
              while (v988 < v987);
            }
          }
          else if (v213 == 1)
          {
            if (*v43)
            {
              v215 = 0;
              v216 = 0;
              v217 = 0;
              v218 = *(_QWORD *)(v42 + 152);
              v219 = v98[19];
              v220 = (int)v214;
              v221 = (float *)v41[19];
              do
              {
                vDSP_vdiv((const float *)((char *)v219 + v216), 1, (const float *)(v218 + v217), 1, v221, 1, v220);
                v217 += **(_QWORD **)(*a1 + 24);
                v216 += **(_QWORD **)(*a2 + 24);
                v221 = (float *)((char *)v221 + v220);
                ++v215;
              }
              while (v215 < **(int **)*a1);
            }
          }
          else if (v41[6])
          {
            v1001 = 0;
            v1566 = v98[19];
            __Nm = *(_QWORD *)(v42 + 152);
            v1524 = (int)v214;
            v1002 = (float *)v41[19];
            do
            {
              v1003 = *(_QWORD *)*a1;
              v1004 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1003) >> 2;
              v1005 = 0;
              v1006 = (v1004 - 1);
              if ((int)v1004 - 1 >= 0)
              {
                v1007 = *(_QWORD *)(*a1 + 24);
                v1008 = v1001;
                do
                {
                  v1009 = ldiv(v1008, *(int *)(v1003 + 4 * v1006));
                  v1008 = v1009.quot;
                  v1005 += *(_QWORD *)(v1007 + 8 * v1006--) * v1009.rem;
                }
                while (v1006 != -1);
              }
              v1010 = *(_QWORD *)*a2;
              v1011 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1010) >> 2;
              v1012 = 0;
              v1013 = (v1011 - 1);
              if ((int)v1011 - 1 >= 0)
              {
                v1014 = *(_QWORD *)(*a2 + 24);
                v1015 = v1001;
                do
                {
                  v1016 = ldiv(v1015, *(int *)(v1010 + 4 * v1013));
                  v1015 = v1016.quot;
                  v1012 += *(_QWORD *)(v1014 + 8 * v1013--) * v1016.rem;
                }
                while (v1013 != -1);
              }
              vDSP_vdiv((const float *)((char *)v1566 + (int)v1012), 1, (const float *)(__Nm + (int)v1005), 1, v1002, 1, v1524);
              v1002 = (float *)((char *)v1002 + v1524);
              v1001 += v1524;
            }
            while (v1001 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_327:
          switch(v210)
          {
            case 1uLL:
              if (v41[6])
              {
                v222 = 0;
                v223 = 0;
                v224 = 0;
                v225 = *(_QWORD *)(v42 + 152);
                v226 = v98[19];
                v227 = v41[19];
                do
                {
                  *(_BYTE *)(v227 + v222) = *(char *)(v225 + v224) / *((char *)v226 + v223);
                  v224 += **(_QWORD **)(*a1 + 24);
                  v223 += **(_QWORD **)(*a2 + 24);
                  ++v222;
                }
                while (v222 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v507 = *v43;
              if (*v43)
              {
                v508 = 0;
                v509 = 0;
                v510 = 0;
                v511 = 0;
                v512 = *(_QWORD *)(v42 + 152);
                v513 = v98[19];
                v514 = v41[19];
                do
                {
                  if (v43[1])
                  {
                    v515 = 0;
                    do
                    {
                      *(_BYTE *)(v514 + v509 + v515) = *(char *)(v512 + v511) / *((char *)v513 + v510);
                      v42 = *a1;
                      v516 = *(_QWORD **)(*a1 + 24);
                      v517 = v516[1];
                      v511 += v517;
                      v98 = (int **)*a2;
                      v518 = *(int **)(*a2 + 24);
                      v519 = *((_QWORD *)v518 + 1);
                      v510 += v519;
                      ++v515;
                      v43 = *(int **)*a1;
                      v520 = v43[1];
                    }
                    while (v515 < v520);
                    v507 = *v43;
                    v99 = *v98;
                    v509 += v515;
                  }
                  else
                  {
                    v520 = 0;
                    v516 = *(_QWORD **)(v42 + 24);
                    v517 = v516[1];
                    v518 = v98[3];
                    v519 = *((_QWORD *)v518 + 1);
                  }
                  v511 = *v516 + v511 - v520 * v517;
                  v510 = *(_QWORD *)v518 + v510 - v519 * v99[1];
                  ++v508;
                }
                while (v508 < v507);
              }
              break;
            case 3uLL:
              v521 = *v43;
              if (*v43)
              {
                v522 = 0;
                v523 = 0;
                v524 = 0;
                v525 = 0;
                v526 = *(_QWORD *)(v42 + 152);
                v527 = v98[19];
                v528 = v41[19];
                do
                {
                  if (v43[1])
                  {
                    v529 = 0;
                    do
                    {
                      if (v43[2])
                      {
                        v530 = 0;
                        do
                        {
                          *(_BYTE *)(v528 + v523 + v530) = *(char *)(v526 + v525) / *((char *)v527 + v524);
                          v42 = *a1;
                          v531 = *(_QWORD **)(*a1 + 24);
                          v532 = v531[2];
                          v525 += v532;
                          v98 = (int **)*a2;
                          v533 = *(int **)(*a2 + 24);
                          v534 = *((_QWORD *)v533 + 2);
                          v524 += v534;
                          ++v530;
                          v43 = *(int **)*a1;
                          v535 = v43[2];
                        }
                        while (v530 < v535);
                        v99 = *v98;
                        v523 += v530;
                      }
                      else
                      {
                        v535 = 0;
                        v531 = *(_QWORD **)(v42 + 24);
                        v532 = v531[2];
                        v533 = v98[3];
                        v534 = *((_QWORD *)v533 + 2);
                      }
                      v536 = v531[1];
                      v525 = v536 + v525 - v535 * v532;
                      v524 = *((_QWORD *)v533 + 1) + v524 - v534 * v99[2];
                      ++v529;
                      v537 = v43[1];
                    }
                    while (v529 < v537);
                    v521 = *v43;
                  }
                  else
                  {
                    v537 = 0;
                    v531 = *(_QWORD **)(v42 + 24);
                    v536 = v531[1];
                  }
                  v525 = *v531 + v525 - v537 * v536;
                  v524 = *(_QWORD *)v98[3] + v524 - *((_QWORD *)v98[3] + 1) * v99[1];
                  ++v522;
                }
                while (v522 < v521);
              }
              break;
            case 4uLL:
              v538 = *v43;
              if (*v43)
              {
                v539 = 0;
                v540 = 0;
                v541 = 0;
                v542 = 0;
                v543 = *(_QWORD *)(v42 + 152);
                v544 = v98[19];
                v545 = v41[19];
                do
                {
                  if (v43[1])
                  {
                    v546 = 0;
                    do
                    {
                      if (v43[2])
                      {
                        v547 = 0;
                        do
                        {
                          if (v43[3])
                          {
                            v548 = 0;
                            do
                            {
                              *(_BYTE *)(v545 + v540 + v548) = *(char *)(v543 + v542) / *((char *)v544 + v541);
                              v42 = *a1;
                              v549 = *(_QWORD **)(*a1 + 24);
                              v550 = v549[3];
                              v542 += v550;
                              v98 = (int **)*a2;
                              v551 = *(int **)(*a2 + 24);
                              v552 = *((_QWORD *)v551 + 3);
                              v541 += v552;
                              ++v548;
                              v43 = *(int **)*a1;
                              v553 = v43[3];
                            }
                            while (v548 < v553);
                            v99 = *v98;
                            v540 += v548;
                          }
                          else
                          {
                            v553 = 0;
                            v549 = *(_QWORD **)(v42 + 24);
                            v550 = v549[3];
                            v551 = v98[3];
                            v552 = *((_QWORD *)v551 + 3);
                          }
                          v554 = v549[2];
                          v542 = v554 + v542 - v553 * v550;
                          v541 = *((_QWORD *)v551 + 2) + v541 - v552 * v99[3];
                          ++v547;
                          v555 = v43[2];
                        }
                        while (v547 < v555);
                      }
                      else
                      {
                        v555 = 0;
                        v549 = *(_QWORD **)(v42 + 24);
                        v554 = v549[2];
                      }
                      v542 = v549[1] + v542 - v555 * v554;
                      v541 = *((_QWORD *)v98[3] + 1) + v541 - *((_QWORD *)v98[3] + 2) * v99[2];
                      ++v546;
                      v556 = v43[1];
                    }
                    while (v546 < v556);
                    v538 = *v43;
                  }
                  else
                  {
                    v556 = 0;
                  }
                  v542 = **(_QWORD **)(v42 + 24) + v542 - *(_QWORD *)(*(_QWORD *)(v42 + 24) + 8) * v556;
                  v541 = *(_QWORD *)v98[3] + v541 - *((_QWORD *)v98[3] + 1) * v99[1];
                  ++v539;
                }
                while (v539 < v538);
              }
              break;
            default:
              if (v41[6])
              {
                v491 = 0;
                v1555 = v98[19];
                __Nb = *(_QWORD *)(v42 + 152);
                v492 = v41[19];
                do
                {
                  v493 = *(_QWORD *)*a1;
                  v494 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v493) >> 2;
                  v495 = 0;
                  v496 = (v494 - 1);
                  if ((int)v494 - 1 >= 0)
                  {
                    v497 = *(_QWORD *)(*a1 + 24);
                    v498 = v491;
                    do
                    {
                      v499 = ldiv(v498, *(int *)(v493 + 4 * v496));
                      v498 = v499.quot;
                      v495 += *(_QWORD *)(v497 + 8 * v496--) * v499.rem;
                    }
                    while (v496 != -1);
                  }
                  v500 = *(_QWORD *)*a2;
                  v501 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v500) >> 2;
                  v502 = 0;
                  v503 = (v501 - 1);
                  if ((int)v501 - 1 >= 0)
                  {
                    v504 = *(_QWORD *)(*a2 + 24);
                    v505 = v491;
                    do
                    {
                      v506 = ldiv(v505, *(int *)(v500 + 4 * v503));
                      v505 = v506.quot;
                      v502 += *(_QWORD *)(v504 + 8 * v503--) * v506.rem;
                    }
                    while (v503 != -1);
                  }
                  *(_BYTE *)(v492 + v491++) = *(char *)(__Nb + (int)v495) / *((char *)v1555 + (int)v502);
                }
                while (v491 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v12)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
LABEL_13:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = v10;
          return;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_20;
        case 3:
          goto LABEL_21;
        default:
          v49 = *(_QWORD **)a3;
          v50 = *a1;
          v51 = *(int **)*a1;
          v52 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v51) >> 2;
          v53 = (v52 - 1);
          if ((int)v53 >= -1)
            v54 = -1;
          else
            v54 = v52 - 1;
          v55 = v54 + 1;
          v56 = v52 + 1;
          break;
      }
      while (1)
      {
        v57 = v56 - 2;
        if (v56 - 2 < 0)
          break;
        --v56;
        if (*(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v57) != *(_QWORD *)(v49[3] + 8 * v57))
          goto LABEL_99;
      }
      v56 = v55;
LABEL_99:
      v105 = (int **)*a2;
      v106 = *(int **)*a2;
      v107 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v106) >> 2;
      v108 = (v107 - 1);
      if ((int)v108 >= -1)
        v109 = -1;
      else
        v109 = v107 - 1;
      v110 = v109 + 1;
      v111 = v107 + 1;
      while (1)
      {
        v112 = v111 - 2;
        if (v111 - 2 < 0)
          break;
        --v111;
        if (*(_QWORD *)&v105[3][2 * v112] != *(_QWORD *)(v49[3] + 8 * v112))
          goto LABEL_143;
      }
      v111 = v110;
LABEL_143:
      v137 = v52 + 1;
      while (1)
      {
        v138 = v137 - 2;
        if (v137 - 2 < 0)
          break;
        --v137;
        if (*(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v138))
          goto LABEL_178;
      }
      v137 = v55;
LABEL_178:
      v151 = v107 + 1;
      while (1)
      {
        v152 = v151 - 2;
        if (v151 - 2 < 0)
          break;
        --v151;
        if (*(_QWORD *)&v105[3][2 * v152])
          goto LABEL_333;
      }
      v151 = v110;
LABEL_333:
      v228 = (uint64_t)(v49[1] - *v49) >> 2;
      if (v56 <= v111)
        v229 = v111;
      else
        v229 = v56;
      if (v56 <= v151)
        v56 = v151;
      if (v137 > v111)
        v111 = v137;
      if (v228 > v111)
        v230 = 1;
      else
        v230 = 4;
      if (v228 <= v111)
        v111 = (uint64_t)(v49[1] - *v49) >> 2;
      if (v228 <= v56)
        v56 = v111;
      else
        v230 = 2;
      if (v228 <= v229)
      {
        v231 = v56;
      }
      else
      {
        v230 = 3;
        v231 = v229;
      }
      if (!v231)
        goto LABEL_362;
      v232 = *(_QWORD *)(v49[3] + 8 * (v231 - 1));
      if (v232 < 0x10)
        goto LABEL_362;
      switch(v230)
      {
        case 1:
          if (v231 == 2)
          {
            v1328 = *v51;
            if (*v51)
            {
              v1329 = 0;
              v1330 = 0;
              __Nbf = *(_QWORD *)(v50 + 152);
              v1585 = v105[19];
              v1331 = (float *)v49[19];
              v1508 = 0;
              v1541 = (int)v232;
              v1332 = 4 * (int)v232;
              do
              {
                if (v51[1])
                {
                  v1333 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(__Nbf + 4 * v1330), (const float *)&v1585[v1329], 1, v1331, 1, v1541);
                    v50 = *a1;
                    v1334 = *(_QWORD **)(*a1 + 24);
                    v1335 = v1334[1];
                    v1330 += v1335;
                    v105 = (int **)*a2;
                    v1336 = *(int **)(*a2 + 24);
                    v1337 = *((_QWORD *)v1336 + 1);
                    v1329 += v1337;
                    ++v1333;
                    v51 = *(int **)*a1;
                    v1338 = v51[1];
                    v1331 = (float *)((char *)v1331 + v1332);
                  }
                  while (v1333 < v1338);
                  v1328 = *v51;
                  v106 = *v105;
                }
                else
                {
                  v1338 = 0;
                  v1334 = *(_QWORD **)(v50 + 24);
                  v1335 = v1334[1];
                  v1336 = v105[3];
                  v1337 = *((_QWORD *)v1336 + 1);
                }
                v1330 = *v1334 + v1330 - v1338 * v1335;
                v1329 = *(_QWORD *)v1336 + v1329 - v1337 * v106[1];
                ++v1508;
              }
              while (v1508 < v1328);
            }
          }
          else if (v231 == 1)
          {
            if (*v51)
            {
              v854 = 0;
              v855 = 0;
              v856 = 0;
              v857 = *(_QWORD *)(v50 + 152);
              v858 = v105[19];
              v859 = (int)v232;
              v860 = 4 * (int)v232;
              v861 = (float *)v49[19];
              do
              {
                vDSP_svdiv((const float *)(v857 + 4 * v856), (const float *)&v858[v855], 1, v861, 1, v859);
                v856 += **(_QWORD **)(*a1 + 24);
                v855 += **(_QWORD **)(*a2 + 24);
                ++v854;
                v861 = (float *)((char *)v861 + v860);
              }
              while (v854 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            v1339 = 0;
            v1586 = v105[19];
            __Nbg = *(_QWORD *)(v50 + 152);
            v1542 = (int)v232;
            v1340 = (float *)v49[19];
            do
            {
              v1341 = *(_QWORD *)*a1;
              v1342 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1341) >> 2;
              v1343 = 0;
              v1344 = (v1342 - 1);
              if ((int)v1342 - 1 >= 0)
              {
                v1345 = *(_QWORD *)(*a1 + 24);
                v1346 = v1339;
                do
                {
                  v1347 = ldiv(v1346, *(int *)(v1341 + 4 * v1344));
                  v1346 = v1347.quot;
                  v1343 += *(_QWORD *)(v1345 + 8 * v1344--) * v1347.rem;
                }
                while (v1344 != -1);
              }
              v1348 = *(_QWORD *)*a2;
              v1349 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1348) >> 2;
              v1350 = 0;
              v1351 = (v1349 - 1);
              if ((int)v1349 - 1 >= 0)
              {
                v1352 = *(_QWORD *)(*a2 + 24);
                v1353 = v1339;
                do
                {
                  v1354 = ldiv(v1353, *(int *)(v1348 + 4 * v1351));
                  v1353 = v1354.quot;
                  v1350 += *(_QWORD *)(v1352 + 8 * v1351--) * v1354.rem;
                }
                while (v1351 != -1);
              }
              vDSP_svdiv((const float *)(__Nbg + 4 * (int)v1343), (const float *)&v1586[(int)v1350], 1, v1340, 1, v1542);
              v1340 += v1542;
              v1339 += v1542;
            }
            while (v1339 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v231 == 2)
          {
            v1355 = *v51;
            if (*v51)
            {
              v1356 = 0;
              v1357 = 0;
              __Nbh = *(_QWORD *)(v50 + 152);
              v1587 = v105[19];
              v1358 = (float *)v49[19];
              v1509 = 0;
              v1543 = (int)v232;
              v1359 = 4 * (int)v232;
              do
              {
                if (v51[1])
                {
                  v1360 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(__Nbh + 4 * v1357), 1, (const float *)&v1587[v1356], v1358, 1, v1543);
                    v50 = *a1;
                    v1361 = *(_QWORD **)(*a1 + 24);
                    v1362 = v1361[1];
                    v1357 += v1362;
                    v105 = (int **)*a2;
                    v1363 = *(int **)(*a2 + 24);
                    v1364 = *((_QWORD *)v1363 + 1);
                    v1356 += v1364;
                    ++v1360;
                    v51 = *(int **)*a1;
                    v1365 = v51[1];
                    v1358 = (float *)((char *)v1358 + v1359);
                  }
                  while (v1360 < v1365);
                  v1355 = *v51;
                  v106 = *v105;
                }
                else
                {
                  v1365 = 0;
                  v1361 = *(_QWORD **)(v50 + 24);
                  v1362 = v1361[1];
                  v1363 = v105[3];
                  v1364 = *((_QWORD *)v1363 + 1);
                }
                v1357 = *v1361 + v1357 - v1365 * v1362;
                v1356 = *(_QWORD *)v1363 + v1356 - v1364 * v106[1];
                ++v1509;
              }
              while (v1509 < v1355);
            }
          }
          else if (v231 == 1)
          {
            if (*v51)
            {
              v862 = 0;
              v863 = 0;
              v864 = 0;
              v865 = *(_QWORD *)(v50 + 152);
              v866 = v105[19];
              v867 = (int)v232;
              v868 = 4 * (int)v232;
              v869 = (float *)v49[19];
              do
              {
                vDSP_vsdiv((const float *)(v865 + 4 * v864), 1, (const float *)&v866[v863], v869, 1, v867);
                v864 += **(_QWORD **)(*a1 + 24);
                v863 += **(_QWORD **)(*a2 + 24);
                ++v862;
                v869 = (float *)((char *)v869 + v868);
              }
              while (v862 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            v1366 = 0;
            v1588 = v105[19];
            __Nbi = *(_QWORD *)(v50 + 152);
            v1544 = (int)v232;
            v1367 = (float *)v49[19];
            do
            {
              v1368 = *(_QWORD *)*a1;
              v1369 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1368) >> 2;
              v1370 = 0;
              v1371 = (v1369 - 1);
              if ((int)v1369 - 1 >= 0)
              {
                v1372 = *(_QWORD *)(*a1 + 24);
                v1373 = v1366;
                do
                {
                  v1374 = ldiv(v1373, *(int *)(v1368 + 4 * v1371));
                  v1373 = v1374.quot;
                  v1370 += *(_QWORD *)(v1372 + 8 * v1371--) * v1374.rem;
                }
                while (v1371 != -1);
              }
              v1375 = *(_QWORD *)*a2;
              v1376 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1375) >> 2;
              v1377 = 0;
              v1378 = (v1376 - 1);
              if ((int)v1376 - 1 >= 0)
              {
                v1379 = *(_QWORD *)(*a2 + 24);
                v1380 = v1366;
                do
                {
                  v1381 = ldiv(v1380, *(int *)(v1375 + 4 * v1378));
                  v1380 = v1381.quot;
                  v1377 += *(_QWORD *)(v1379 + 8 * v1378--) * v1381.rem;
                }
                while (v1378 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbi + 4 * (int)v1370), 1, (const float *)&v1588[(int)v1377], v1367, 1, v1544);
              v1367 += v1544;
              v1366 += v1544;
            }
            while (v1366 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v231 == 2)
          {
            v1017 = *v51;
            if (*v51)
            {
              v1018 = 0;
              v1019 = 0;
              __Nn = *(_QWORD *)(v50 + 152);
              v1567 = v105[19];
              v1020 = (float *)v49[19];
              v1503 = 0;
              v1525 = (int)v232;
              v1021 = 4 * (int)v232;
              do
              {
                if (v51[1])
                {
                  v1022 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)&v1567[v1018], 1, (const float *)(__Nn + 4 * v1019), 1, v1020, 1, v1525);
                    v50 = *a1;
                    v1023 = *(_QWORD **)(*a1 + 24);
                    v1024 = v1023[1];
                    v1019 += v1024;
                    v105 = (int **)*a2;
                    v1025 = *(int **)(*a2 + 24);
                    v1026 = *((_QWORD *)v1025 + 1);
                    v1018 += v1026;
                    ++v1022;
                    v51 = *(int **)*a1;
                    v1027 = v51[1];
                    v1020 = (float *)((char *)v1020 + v1021);
                  }
                  while (v1022 < v1027);
                  v1017 = *v51;
                  v106 = *v105;
                }
                else
                {
                  v1027 = 0;
                  v1023 = *(_QWORD **)(v50 + 24);
                  v1024 = v1023[1];
                  v1025 = v105[3];
                  v1026 = *((_QWORD *)v1025 + 1);
                }
                v1019 = *v1023 + v1019 - v1027 * v1024;
                v1018 = *(_QWORD *)v1025 + v1018 - v1026 * v106[1];
                ++v1503;
              }
              while (v1503 < v1017);
            }
          }
          else if (v231 == 1)
          {
            if (*v51)
            {
              v233 = 0;
              v234 = 0;
              v235 = 0;
              v236 = *(_QWORD *)(v50 + 152);
              v237 = v105[19];
              v238 = (int)v232;
              v239 = 4 * (int)v232;
              v240 = (float *)v49[19];
              do
              {
                vDSP_vdiv((const float *)&v237[v234], 1, (const float *)(v236 + 4 * v235), 1, v240, 1, v238);
                v235 += **(_QWORD **)(*a1 + 24);
                v234 += **(_QWORD **)(*a2 + 24);
                ++v233;
                v240 = (float *)((char *)v240 + v239);
              }
              while (v233 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            v1028 = 0;
            v1568 = v105[19];
            __No = *(_QWORD *)(v50 + 152);
            v1526 = (int)v232;
            v1029 = (float *)v49[19];
            do
            {
              v1030 = *(_QWORD *)*a1;
              v1031 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1030) >> 2;
              v1032 = 0;
              v1033 = (v1031 - 1);
              if ((int)v1031 - 1 >= 0)
              {
                v1034 = *(_QWORD *)(*a1 + 24);
                v1035 = v1028;
                do
                {
                  v1036 = ldiv(v1035, *(int *)(v1030 + 4 * v1033));
                  v1035 = v1036.quot;
                  v1032 += *(_QWORD *)(v1034 + 8 * v1033--) * v1036.rem;
                }
                while (v1033 != -1);
              }
              v1037 = *(_QWORD *)*a2;
              v1038 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1037) >> 2;
              v1039 = 0;
              v1040 = (v1038 - 1);
              if ((int)v1038 - 1 >= 0)
              {
                v1041 = *(_QWORD *)(*a2 + 24);
                v1042 = v1028;
                do
                {
                  v1043 = ldiv(v1042, *(int *)(v1037 + 4 * v1040));
                  v1042 = v1043.quot;
                  v1039 += *(_QWORD *)(v1041 + 8 * v1040--) * v1043.rem;
                }
                while (v1040 != -1);
              }
              vDSP_vdiv((const float *)&v1568[(int)v1039], 1, (const float *)(__No + 4 * (int)v1032), 1, v1029, 1, v1526);
              v1029 += v1526;
              v1028 += v1526;
            }
            while (v1028 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_362:
          switch(v228)
          {
            case 1uLL:
              v241 = v49[6];
              if (v241)
              {
                v242 = *(_DWORD **)(v50 + 152);
                v243 = v105[19];
                v244 = (int *)v49[19];
                v245 = 4 * *(_QWORD *)v105[3];
                v246 = 4 * **(_QWORD **)(v50 + 24);
                do
                {
                  *v244++ = *v242 / *v243;
                  v243 = (int *)((char *)v243 + v245);
                  v242 = (_DWORD *)((char *)v242 + v246);
                  --v241;
                }
                while (v241);
              }
              break;
            case 2uLL:
              v568 = *v51;
              if (*v51)
              {
                v569 = 0;
                v570 = 0;
                v571 = 0;
                v572 = 0;
                v573 = *(_QWORD *)(v50 + 152);
                v574 = v105[19];
                v575 = v49[19];
                v576 = *(uint64_t **)(v50 + 24);
                v577 = *v576;
                v578 = v576[1];
                v579 = v105[3];
                v581 = *(_QWORD *)v579;
                v580 = *((_QWORD *)v579 + 1);
                v582 = v51[1];
                do
                {
                  if (v582)
                  {
                    for (m = 0; m < v582; ++m)
                    {
                      *(_DWORD *)(v575 + 4 * v570 + 4 * m) = *(_DWORD *)(v573 + 4 * v572) / v574[v571];
                      v572 += v578;
                      v571 += v580;
                      v582 = v51[1];
                    }
                    v584 = v582;
                    v568 = *v51;
                    v570 += m;
                  }
                  else
                  {
                    v584 = 0;
                  }
                  v572 = v572 + v577 - v584 * v578;
                  v571 = v571 + v581 - v580 * v106[1];
                  ++v569;
                }
                while (v569 < v568);
              }
              break;
            case 3uLL:
              v585 = *v51;
              if (*v51)
              {
                v586 = 0;
                v587 = 0;
                v588 = 0;
                v589 = 0;
                v590 = *(_QWORD *)(v50 + 152);
                v591 = v105[19];
                v592 = v49[19];
                v593 = *(uint64_t **)(v50 + 24);
                v594 = *v593;
                v595 = v593[1];
                v596 = v105[3];
                v597 = *(_QWORD *)v596;
                v598 = *((_QWORD *)v596 + 1);
                v599 = v51[1];
                v600 = v599;
                do
                {
                  if (v600)
                  {
                    v601 = 0;
                    v602 = v593[2];
                    v603 = *((_QWORD *)v596 + 2);
                    v604 = v51[2];
                    do
                    {
                      if (v604)
                      {
                        for (n = 0; n < v604; ++n)
                        {
                          *(_DWORD *)(v592 + 4 * v587 + 4 * n) = *(_DWORD *)(v590 + 4 * v589) / v591[v588];
                          v589 += v602;
                          v588 += v603;
                          v604 = v51[2];
                        }
                        v606 = v604;
                        v599 = v51[1];
                        v587 += n;
                      }
                      else
                      {
                        v606 = 0;
                      }
                      v589 = v589 + v595 - v606 * v602;
                      v588 = v588 + v598 - v603 * v106[2];
                      ++v601;
                    }
                    while (v601 < v599);
                    v607 = v599;
                    v585 = *v51;
                    v600 = v599;
                  }
                  else
                  {
                    v607 = 0;
                  }
                  v589 = v589 + v594 - v607 * v595;
                  v588 = v588 + v597 - v598 * v106[1];
                  ++v586;
                }
                while (v586 < v585);
              }
              break;
            case 4uLL:
              v608 = *v51;
              if (*v51)
              {
                v609 = 0;
                v610 = 0;
                v611 = 0;
                v612 = 0;
                v613 = *(_QWORD *)(v50 + 152);
                v614 = v105[19];
                v615 = v49[19];
                v616 = *(uint64_t **)(v50 + 24);
                v617 = *v616;
                v618 = v616[1];
                v619 = v105[3];
                v620 = *(_QWORD *)v619;
                v621 = *((_QWORD *)v619 + 1);
                v622 = v51[1];
                v623 = v622;
                do
                {
                  if (v623)
                  {
                    v624 = 0;
                    v625 = v616[2];
                    v626 = *((_QWORD *)v619 + 2);
                    v627 = v51[2];
                    v628 = v627;
                    do
                    {
                      if (v628)
                      {
                        v629 = 0;
                        v630 = v616[3];
                        v631 = *((_QWORD *)v619 + 3);
                        v632 = v51[3];
                        do
                        {
                          if (v632)
                          {
                            for (ii = 0; ii < v632; ++ii)
                            {
                              *(_DWORD *)(v615 + 4 * v610 + 4 * ii) = *(_DWORD *)(v613 + 4 * v612) / v614[v611];
                              v612 += v630;
                              v611 += v631;
                              v632 = v51[3];
                            }
                            v634 = v632;
                            v627 = v51[2];
                            v610 += ii;
                          }
                          else
                          {
                            v634 = 0;
                          }
                          v612 = v612 + v625 - v634 * v630;
                          v611 = v611 + v626 - v631 * v106[3];
                          ++v629;
                        }
                        while (v629 < v627);
                        v635 = v627;
                        v622 = v51[1];
                        v628 = v627;
                      }
                      else
                      {
                        v635 = 0;
                      }
                      v612 = v612 + v618 - v635 * v625;
                      v611 = v611 + v621 - v626 * v106[2];
                      ++v624;
                    }
                    while (v624 < v622);
                    v636 = v622;
                    v608 = *v51;
                    v623 = v622;
                  }
                  else
                  {
                    v636 = 0;
                  }
                  v612 = v612 + v617 - v636 * v618;
                  v611 = v611 + v620 - v621 * v106[1];
                  ++v609;
                }
                while (v609 < v608);
              }
              break;
            default:
              v1556 = v49[6];
              __Nc = v53;
              if (v1556)
              {
                v557 = 0;
                v1497 = v105[19];
                v1515 = *(_QWORD *)(v50 + 152);
                v1492 = v49[19];
                do
                {
                  v558 = __Nc;
                  if ((__Nc & 0x80000000) != 0)
                  {
                    LODWORD(v559) = 0;
                  }
                  else
                  {
                    v559 = 0;
                    v560 = *(_QWORD *)(v50 + 24);
                    v561 = v557;
                    do
                    {
                      v562 = ldiv(v561, v51[v558]);
                      v561 = v562.quot;
                      v559 += *(_QWORD *)(v560 + 8 * v558--) * v562.rem;
                    }
                    while (v558 != -1);
                  }
                  v563 = 0;
                  if ((v108 & 0x80000000) == 0)
                  {
                    v564 = v105[3];
                    v565 = v108;
                    v566 = v557;
                    do
                    {
                      v567 = ldiv(v566, v106[v565]);
                      v566 = v567.quot;
                      v563 += *(_QWORD *)&v564[2 * v565--] * v567.rem;
                    }
                    while (v565 != -1);
                  }
                  *(_DWORD *)(v1492 + 4 * v557++) = *(_DWORD *)(v1515 + 4 * (int)v559) / v1497[(int)v563];
                }
                while (v557 != v1556);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v13)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a1 + 152) / **(uint64_t **)(*a2 + 152);
          return;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_20;
        case 3:
          goto LABEL_21;
        default:
          v58 = *(_QWORD **)a3;
          v59 = *a1;
          v60 = *(int **)*a1;
          v61 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v60) >> 2;
          v62 = (v61 - 1);
          if ((int)v62 >= -1)
            v63 = -1;
          else
            v63 = v61 - 1;
          v64 = v63 + 1;
          v65 = v61 + 1;
          break;
      }
      while (1)
      {
        v66 = v65 - 2;
        if (v65 - 2 < 0)
          break;
        --v65;
        if (*(_QWORD *)(*(_QWORD *)(v59 + 24) + 8 * v66) != *(_QWORD *)(v58[3] + 8 * v66))
          goto LABEL_107;
      }
      v65 = v64;
LABEL_107:
      v113 = (int **)*a2;
      v114 = *(int **)*a2;
      v115 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v114) >> 2;
      v116 = (v115 - 1);
      if ((int)v116 >= -1)
        v117 = -1;
      else
        v117 = v115 - 1;
      v118 = v117 + 1;
      v119 = v115 + 1;
      while (1)
      {
        v120 = v119 - 2;
        if (v119 - 2 < 0)
          break;
        --v119;
        if (*(_QWORD *)&v113[3][2 * v120] != *(_QWORD *)(v58[3] + 8 * v120))
          goto LABEL_148;
      }
      v119 = v118;
LABEL_148:
      v139 = v61 + 1;
      while (1)
      {
        v140 = v139 - 2;
        if (v139 - 2 < 0)
          break;
        --v139;
        if (*(_QWORD *)(*(_QWORD *)(v59 + 24) + 8 * v140))
          goto LABEL_183;
      }
      v139 = v64;
LABEL_183:
      v153 = v115 + 1;
      while (1)
      {
        v154 = v153 - 2;
        if (v153 - 2 < 0)
          break;
        --v153;
        if (*(_QWORD *)&v113[3][2 * v154])
          goto LABEL_368;
      }
      v153 = v118;
LABEL_368:
      v247 = (uint64_t)(v58[1] - *v58) >> 2;
      if (v65 <= v119)
        v248 = v119;
      else
        v248 = v65;
      if (v65 <= v153)
        v65 = v153;
      if (v139 > v119)
        v119 = v139;
      if (v247 > v119)
        v249 = 1;
      else
        v249 = 4;
      if (v247 <= v119)
        v119 = (uint64_t)(v58[1] - *v58) >> 2;
      if (v247 <= v65)
        v65 = v119;
      else
        v249 = 2;
      if (v247 <= v248)
      {
        v250 = v65;
      }
      else
      {
        v249 = 3;
        v250 = v248;
      }
      if (!v250)
        goto LABEL_397;
      v251 = *(_QWORD *)(v58[3] + 8 * (v250 - 1));
      if (v251 < 0x10)
        goto LABEL_397;
      switch(v249)
      {
        case 1:
          if (v250 == 2)
          {
            v1382 = *v60;
            if (*v60)
            {
              v1383 = 0;
              v1384 = 0;
              __Nbj = *(_QWORD *)(v59 + 152);
              v1589 = v113[19];
              v1385 = (float *)v58[19];
              v1510 = 0;
              v1545 = (int)v251;
              v1386 = 8 * (int)v251;
              do
              {
                if (v60[1])
                {
                  v1387 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(__Nbj + 8 * v1384), (const float *)&v1589[2 * v1383], 1, v1385, 1, v1545);
                    v59 = *a1;
                    v1388 = *(_QWORD **)(*a1 + 24);
                    v1389 = v1388[1];
                    v1384 += v1389;
                    v113 = (int **)*a2;
                    v1390 = *(int **)(*a2 + 24);
                    v1391 = *((_QWORD *)v1390 + 1);
                    v1383 += v1391;
                    ++v1387;
                    v60 = *(int **)*a1;
                    v1392 = v60[1];
                    v1385 = (float *)((char *)v1385 + v1386);
                  }
                  while (v1387 < v1392);
                  v1382 = *v60;
                  v114 = *v113;
                }
                else
                {
                  v1392 = 0;
                  v1388 = *(_QWORD **)(v59 + 24);
                  v1389 = v1388[1];
                  v1390 = v113[3];
                  v1391 = *((_QWORD *)v1390 + 1);
                }
                v1384 = *v1388 + v1384 - v1392 * v1389;
                v1383 = *(_QWORD *)v1390 + v1383 - v1391 * v114[1];
                ++v1510;
              }
              while (v1510 < v1382);
            }
          }
          else if (v250 == 1)
          {
            if (*v60)
            {
              v870 = 0;
              v871 = 0;
              v872 = 0;
              v873 = *(_QWORD *)(v59 + 152);
              v874 = v113[19];
              v875 = (int)v251;
              v876 = 8 * (int)v251;
              v877 = (float *)v58[19];
              do
              {
                vDSP_svdiv((const float *)(v873 + 8 * v872), (const float *)&v874[2 * v871], 1, v877, 1, v875);
                v872 += **(_QWORD **)(*a1 + 24);
                v871 += **(_QWORD **)(*a2 + 24);
                ++v870;
                v877 = (float *)((char *)v877 + v876);
              }
              while (v870 < **(int **)*a1);
            }
          }
          else if (v58[6])
          {
            v1393 = 0;
            v1590 = v113[19];
            __Nbk = *(_QWORD *)(v59 + 152);
            v1546 = (int)v251;
            v1394 = (float *)v58[19];
            do
            {
              v1395 = *(_QWORD *)*a1;
              v1396 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1395) >> 2;
              v1397 = 0;
              v1398 = (v1396 - 1);
              if ((int)v1396 - 1 >= 0)
              {
                v1399 = *(_QWORD *)(*a1 + 24);
                v1400 = v1393;
                do
                {
                  v1401 = ldiv(v1400, *(int *)(v1395 + 4 * v1398));
                  v1400 = v1401.quot;
                  v1397 += *(_QWORD *)(v1399 + 8 * v1398--) * v1401.rem;
                }
                while (v1398 != -1);
              }
              v1402 = *(_QWORD *)*a2;
              v1403 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1402) >> 2;
              v1404 = 0;
              v1405 = (v1403 - 1);
              if ((int)v1403 - 1 >= 0)
              {
                v1406 = *(_QWORD *)(*a2 + 24);
                v1407 = v1393;
                do
                {
                  v1408 = ldiv(v1407, *(int *)(v1402 + 4 * v1405));
                  v1407 = v1408.quot;
                  v1404 += *(_QWORD *)(v1406 + 8 * v1405--) * v1408.rem;
                }
                while (v1405 != -1);
              }
              vDSP_svdiv((const float *)(__Nbk + 8 * (int)v1397), (const float *)&v1590[2 * (int)v1404], 1, v1394, 1, v1546);
              v1394 += 2 * v1546;
              v1393 += v1546;
            }
            while (v1393 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v250 == 2)
          {
            v1409 = *v60;
            if (*v60)
            {
              v1410 = 0;
              v1411 = 0;
              __Nbl = *(_QWORD *)(v59 + 152);
              v1591 = v113[19];
              v1412 = (float *)v58[19];
              v1511 = 0;
              v1547 = (int)v251;
              v1413 = 8 * (int)v251;
              do
              {
                if (v60[1])
                {
                  v1414 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(__Nbl + 8 * v1411), 1, (const float *)&v1591[2 * v1410], v1412, 1, v1547);
                    v59 = *a1;
                    v1415 = *(_QWORD **)(*a1 + 24);
                    v1416 = v1415[1];
                    v1411 += v1416;
                    v113 = (int **)*a2;
                    v1417 = *(int **)(*a2 + 24);
                    v1418 = *((_QWORD *)v1417 + 1);
                    v1410 += v1418;
                    ++v1414;
                    v60 = *(int **)*a1;
                    v1419 = v60[1];
                    v1412 = (float *)((char *)v1412 + v1413);
                  }
                  while (v1414 < v1419);
                  v1409 = *v60;
                  v114 = *v113;
                }
                else
                {
                  v1419 = 0;
                  v1415 = *(_QWORD **)(v59 + 24);
                  v1416 = v1415[1];
                  v1417 = v113[3];
                  v1418 = *((_QWORD *)v1417 + 1);
                }
                v1411 = *v1415 + v1411 - v1419 * v1416;
                v1410 = *(_QWORD *)v1417 + v1410 - v1418 * v114[1];
                ++v1511;
              }
              while (v1511 < v1409);
            }
          }
          else if (v250 == 1)
          {
            if (*v60)
            {
              v878 = 0;
              v879 = 0;
              v880 = 0;
              v881 = *(_QWORD *)(v59 + 152);
              v882 = v113[19];
              v883 = (int)v251;
              v884 = 8 * (int)v251;
              v885 = (float *)v58[19];
              do
              {
                vDSP_vsdiv((const float *)(v881 + 8 * v880), 1, (const float *)&v882[2 * v879], v885, 1, v883);
                v880 += **(_QWORD **)(*a1 + 24);
                v879 += **(_QWORD **)(*a2 + 24);
                ++v878;
                v885 = (float *)((char *)v885 + v884);
              }
              while (v878 < **(int **)*a1);
            }
          }
          else if (v58[6])
          {
            v1420 = 0;
            v1592 = v113[19];
            __Nbm = *(_QWORD *)(v59 + 152);
            v1548 = (int)v251;
            v1421 = (float *)v58[19];
            do
            {
              v1422 = *(_QWORD *)*a1;
              v1423 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1422) >> 2;
              v1424 = 0;
              v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                v1426 = *(_QWORD *)(*a1 + 24);
                v1427 = v1420;
                do
                {
                  v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  v1427 = v1428.quot;
                  v1424 += *(_QWORD *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              v1429 = *(_QWORD *)*a2;
              v1430 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1429) >> 2;
              v1431 = 0;
              v1432 = (v1430 - 1);
              if ((int)v1430 - 1 >= 0)
              {
                v1433 = *(_QWORD *)(*a2 + 24);
                v1434 = v1420;
                do
                {
                  v1435 = ldiv(v1434, *(int *)(v1429 + 4 * v1432));
                  v1434 = v1435.quot;
                  v1431 += *(_QWORD *)(v1433 + 8 * v1432--) * v1435.rem;
                }
                while (v1432 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbm + 8 * (int)v1424), 1, (const float *)&v1592[2 * (int)v1431], v1421, 1, v1548);
              v1421 += 2 * v1548;
              v1420 += v1548;
            }
            while (v1420 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v250 == 2)
          {
            v1044 = *v60;
            if (*v60)
            {
              v1045 = 0;
              v1046 = 0;
              __Np = *(_QWORD *)(v59 + 152);
              v1569 = v113[19];
              v1047 = (float *)v58[19];
              v1504 = 0;
              v1527 = (int)v251;
              v1048 = 8 * (int)v251;
              do
              {
                if (v60[1])
                {
                  v1049 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)&v1569[2 * v1045], 1, (const float *)(__Np + 8 * v1046), 1, v1047, 1, v1527);
                    v59 = *a1;
                    v1050 = *(_QWORD **)(*a1 + 24);
                    v1051 = v1050[1];
                    v1046 += v1051;
                    v113 = (int **)*a2;
                    v1052 = *(int **)(*a2 + 24);
                    v1053 = *((_QWORD *)v1052 + 1);
                    v1045 += v1053;
                    ++v1049;
                    v60 = *(int **)*a1;
                    v1054 = v60[1];
                    v1047 = (float *)((char *)v1047 + v1048);
                  }
                  while (v1049 < v1054);
                  v1044 = *v60;
                  v114 = *v113;
                }
                else
                {
                  v1054 = 0;
                  v1050 = *(_QWORD **)(v59 + 24);
                  v1051 = v1050[1];
                  v1052 = v113[3];
                  v1053 = *((_QWORD *)v1052 + 1);
                }
                v1046 = *v1050 + v1046 - v1054 * v1051;
                v1045 = *(_QWORD *)v1052 + v1045 - v1053 * v114[1];
                ++v1504;
              }
              while (v1504 < v1044);
            }
          }
          else if (v250 == 1)
          {
            if (*v60)
            {
              v252 = 0;
              v253 = 0;
              v254 = 0;
              v255 = *(_QWORD *)(v59 + 152);
              v256 = v113[19];
              v257 = (int)v251;
              v258 = 8 * (int)v251;
              v259 = (float *)v58[19];
              do
              {
                vDSP_vdiv((const float *)&v256[2 * v253], 1, (const float *)(v255 + 8 * v254), 1, v259, 1, v257);
                v254 += **(_QWORD **)(*a1 + 24);
                v253 += **(_QWORD **)(*a2 + 24);
                ++v252;
                v259 = (float *)((char *)v259 + v258);
              }
              while (v252 < **(int **)*a1);
            }
          }
          else if (v58[6])
          {
            v1055 = 0;
            v1570 = v113[19];
            __Nq = *(_QWORD *)(v59 + 152);
            v1528 = (int)v251;
            v1056 = (float *)v58[19];
            do
            {
              v1057 = *(_QWORD *)*a1;
              v1058 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1057) >> 2;
              v1059 = 0;
              v1060 = (v1058 - 1);
              if ((int)v1058 - 1 >= 0)
              {
                v1061 = *(_QWORD *)(*a1 + 24);
                v1062 = v1055;
                do
                {
                  v1063 = ldiv(v1062, *(int *)(v1057 + 4 * v1060));
                  v1062 = v1063.quot;
                  v1059 += *(_QWORD *)(v1061 + 8 * v1060--) * v1063.rem;
                }
                while (v1060 != -1);
              }
              v1064 = *(_QWORD *)*a2;
              v1065 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1064) >> 2;
              v1066 = 0;
              v1067 = (v1065 - 1);
              if ((int)v1065 - 1 >= 0)
              {
                v1068 = *(_QWORD *)(*a2 + 24);
                v1069 = v1055;
                do
                {
                  v1070 = ldiv(v1069, *(int *)(v1064 + 4 * v1067));
                  v1069 = v1070.quot;
                  v1066 += *(_QWORD *)(v1068 + 8 * v1067--) * v1070.rem;
                }
                while (v1067 != -1);
              }
              vDSP_vdiv((const float *)&v1570[2 * (int)v1066], 1, (const float *)(__Nq + 8 * (int)v1059), 1, v1056, 1, v1528);
              v1056 += 2 * v1528;
              v1055 += v1528;
            }
            while (v1055 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_397:
          switch(v247)
          {
            case 1uLL:
              v260 = v58[6];
              if (v260)
              {
                v261 = *(_QWORD **)(v59 + 152);
                v262 = (uint64_t *)v113[19];
                v263 = (uint64_t *)v58[19];
                v264 = 8 * *(_QWORD *)v113[3];
                v265 = 8 * **(_QWORD **)(v59 + 24);
                do
                {
                  *v263++ = *v261 / *v262;
                  v262 = (uint64_t *)((char *)v262 + v264);
                  v261 = (_QWORD *)((char *)v261 + v265);
                  --v260;
                }
                while (v260);
              }
              break;
            case 2uLL:
              v648 = *v60;
              if ((_DWORD)v648)
              {
                v649 = 0;
                v650 = 0;
                v651 = 0;
                v652 = 0;
                v653 = *(_QWORD *)(v59 + 152);
                v654 = v113[19];
                v655 = v58[19];
                v656 = v60[1];
                v657 = *(uint64_t **)(v59 + 24);
                v658 = *v657;
                v659 = v657[1];
                v660 = v113[3];
                v661 = *(_QWORD *)v660;
                v662 = *((_QWORD *)v660 + 1);
                v663 = v661 - v662 * v114[1];
                if (v656 <= 1)
                  v664 = 1;
                else
                  v664 = v60[1];
                v665 = v658 - v659 * v656;
                do
                {
                  if ((_DWORD)v656)
                  {
                    v666 = v650 + v664;
                    v667 = (uint64_t *)(v655 + 8 * v650);
                    v668 = v664;
                    do
                    {
                      *v667++ = *(_QWORD *)(v653 + 8 * v652) / *(uint64_t *)&v654[2 * v651];
                      v652 += v659;
                      v651 += v662;
                      --v668;
                    }
                    while (v668);
                    v650 = v666;
                  }
                  v652 += v665;
                  v651 += v663;
                  ++v649;
                }
                while (v649 != v648);
              }
              break;
            case 3uLL:
              v669 = *v60;
              if ((_DWORD)v669)
              {
                v670 = 0;
                v671 = 0;
                v672 = 0;
                v673 = 0;
                v674 = *(_QWORD *)(v59 + 152);
                v675 = v113[19];
                v676 = v58[19];
                v677 = v60[1];
                v678 = *(_QWORD **)(v59 + 24);
                v679 = v678[1];
                v680 = v113[3];
                v681 = *((_QWORD *)v680 + 1);
                v682 = *(_QWORD *)v680 - v681 * v114[1];
                if (v677 <= 1)
                  v683 = 1;
                else
                  v683 = v60[1];
                v684 = *v678 - v679 * v677;
                do
                {
                  if ((_DWORD)v677)
                  {
                    v685 = 0;
                    v686 = v60[2];
                    v687 = v678[2];
                    v688 = *((_QWORD *)v680 + 2);
                    if (v686 <= 1)
                      v689 = 1;
                    else
                      v689 = v60[2];
                    v690 = v681 - v688 * v114[2];
                    do
                    {
                      v691 = v689;
                      if ((_DWORD)v686)
                      {
                        do
                        {
                          *(_QWORD *)(v676 + 8 * v671++) = *(_QWORD *)(v674 + 8 * v673) / *(uint64_t *)&v675[2 * v672];
                          v673 += v687;
                          v672 += v688;
                          --v691;
                        }
                        while (v691);
                      }
                      v673 += v679 - v687 * v686;
                      v672 += v690;
                      ++v685;
                    }
                    while (v685 != v683);
                  }
                  v673 += v684;
                  v672 += v682;
                  ++v670;
                }
                while (v670 != v669);
              }
              break;
            case 4uLL:
              __Ne = *v60;
              if ((_DWORD)__Ne)
              {
                v692 = 0;
                v693 = 0;
                v694 = 0;
                v695 = 0;
                v696 = *(_QWORD *)(v59 + 152);
                v697 = v113[19];
                v698 = v58[19];
                v699 = v60[1];
                v700 = *(_QWORD **)(v59 + 24);
                v701 = v113[3];
                v1490 = *((_QWORD *)v701 + 1);
                v1494 = v700[1];
                v1517 = *(_QWORD *)v701 - v1490 * v114[1];
                v1558 = v60[1];
                if (v699 <= 1)
                  v702 = 1;
                else
                  v702 = v60[1];
                v1499 = *v700 - v700[1] * v699;
                do
                {
                  if (v1558)
                  {
                    v703 = 0;
                    v704 = v60[2];
                    v705 = v700[2];
                    v706 = *((_QWORD *)v701 + 2);
                    if (v704 <= 1)
                      v707 = 1;
                    else
                      v707 = v60[2];
                    v708 = v1490 - v706 * v114[2];
                    do
                    {
                      if ((_DWORD)v704)
                      {
                        v709 = 0;
                        v710 = v60[3];
                        v711 = v700[3];
                        v712 = *((_QWORD *)v701 + 3);
                        if (v710 <= 1)
                          v713 = 1;
                        else
                          v713 = v60[3];
                        v714 = v706 - v712 * v114[3];
                        do
                        {
                          v715 = v713;
                          if ((_DWORD)v710)
                          {
                            do
                            {
                              *(_QWORD *)(v698 + 8 * v693++) = *(_QWORD *)(v696 + 8 * v695)
                                                             / *(uint64_t *)&v697[2 * v694];
                              v695 += v711;
                              v694 += v712;
                              --v715;
                            }
                            while (v715);
                          }
                          v695 += v705 - v711 * v710;
                          v694 += v714;
                          ++v709;
                        }
                        while (v709 != v707);
                      }
                      v695 += v1494 - v705 * v704;
                      v694 += v708;
                      ++v703;
                    }
                    while (v703 != v702);
                  }
                  v695 += v1499;
                  v694 += v1517;
                  ++v692;
                }
                while (v692 != __Ne);
              }
              break;
            default:
              v1557 = v58[6];
              __Nd = v62;
              if (v1557)
              {
                v637 = 0;
                v1498 = v113[19];
                v1516 = *(_QWORD *)(v59 + 152);
                v1493 = v58[19];
                do
                {
                  v638 = __Nd;
                  if ((__Nd & 0x80000000) != 0)
                  {
                    LODWORD(v639) = 0;
                  }
                  else
                  {
                    v639 = 0;
                    v640 = *(_QWORD *)(v59 + 24);
                    v641 = v637;
                    do
                    {
                      v642 = ldiv(v641, v60[v638]);
                      v641 = v642.quot;
                      v639 += *(_QWORD *)(v640 + 8 * v638--) * v642.rem;
                    }
                    while (v638 != -1);
                  }
                  v643 = 0;
                  if ((v116 & 0x80000000) == 0)
                  {
                    v644 = v113[3];
                    v645 = v116;
                    v646 = v637;
                    do
                    {
                      v647 = ldiv(v646, v114[v645]);
                      v646 = v647.quot;
                      v643 += *(_QWORD *)&v644[2 * v645--] * v647.rem;
                    }
                    while (v645 != -1);
                  }
                  *(_QWORD *)(v1493 + 8 * v637++) = *(_QWORD *)(v1516 + 8 * (int)v639)
                                                  / *(uint64_t *)&v1498[2 * (int)v643];
                }
                while (v637 != v1557);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) / **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_19:
          vDSP_svdiv(*(const float **)(*a1 + 152), *(const float **)(*a2 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*a2 + 160));
          return;
        case 2:
LABEL_20:
          vDSP_vsdiv(*(const float **)(*a1 + 152), 1, *(const float **)(*a2 + 152), *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*a1 + 160));
          return;
        case 3:
LABEL_21:
          vDSP_vdiv(*(const float **)(*a2 + 152), 1, *(const float **)(*a1 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)a3 + 48));
          return;
        default:
          v67 = *(_QWORD **)a3;
          v68 = *a1;
          v69 = *(int **)*a1;
          v70 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v69) >> 2;
          v71 = (v70 - 1);
          if ((int)v71 >= -1)
            v72 = -1;
          else
            v72 = v70 - 1;
          v73 = v72 + 1;
          v74 = v70 + 1;
          while (1)
          {
            v75 = v74 - 2;
            if (v74 - 2 < 0)
              break;
            --v74;
            if (*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v75) != *(_QWORD *)(v67[3] + 8 * v75))
              goto LABEL_115;
          }
          v74 = v73;
LABEL_115:
          v121 = (int **)*a2;
          v122 = *(int **)*a2;
          v123 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v122) >> 2;
          v124 = (v123 - 1);
          if ((int)v124 >= -1)
            v125 = -1;
          else
            v125 = v123 - 1;
          v126 = v125 + 1;
          v127 = v123 + 1;
          while (1)
          {
            v128 = v127 - 2;
            if (v127 - 2 < 0)
              break;
            --v127;
            if (*(_QWORD *)&v121[3][2 * v128] != *(_QWORD *)(v67[3] + 8 * v128))
              goto LABEL_153;
          }
          v127 = v126;
LABEL_153:
          v141 = v70 + 1;
          while (1)
          {
            v142 = v141 - 2;
            if (v141 - 2 < 0)
              break;
            --v141;
            if (*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v142))
              goto LABEL_188;
          }
          v141 = v73;
LABEL_188:
          v155 = v123 + 1;
          while (1)
          {
            v156 = v155 - 2;
            if (v155 - 2 < 0)
              break;
            --v155;
            if (*(_QWORD *)&v121[3][2 * v156])
              goto LABEL_403;
          }
          v155 = v126;
LABEL_403:
          v266 = (uint64_t)(v67[1] - *v67) >> 2;
          if (v74 <= v127)
            v267 = v127;
          else
            v267 = v74;
          if (v74 <= v155)
            v74 = v155;
          if (v141 > v127)
            v127 = v141;
          if (v266 > v127)
            v268 = 1;
          else
            v268 = 4;
          if (v266 <= v127)
            v127 = (uint64_t)(v67[1] - *v67) >> 2;
          if (v266 <= v74)
            v74 = v127;
          else
            v268 = 2;
          if (v266 <= v267)
          {
            v269 = v74;
          }
          else
          {
            v268 = 3;
            v269 = v267;
          }
          if (!v269)
            goto LABEL_432;
          v270 = *(_QWORD *)(v67[3] + 8 * (v269 - 1));
          if (v270 < 0x10)
            goto LABEL_432;
          switch(v268)
          {
            case 1:
              if (v269 == 2)
              {
                v1436 = *v69;
                if (*v69)
                {
                  v1437 = 0;
                  v1438 = 0;
                  __Nbn = *(_QWORD *)(v68 + 152);
                  v1593 = v121[19];
                  v1439 = (float *)v67[19];
                  v1512 = 0;
                  v1549 = (int)v270;
                  v1440 = 4 * (int)v270;
                  do
                  {
                    if (v69[1])
                    {
                      v1441 = 0;
                      do
                      {
                        vDSP_svdiv((const float *)(__Nbn + 4 * v1438), (const float *)&v1593[v1437], 1, v1439, 1, v1549);
                        v68 = *a1;
                        v1442 = *(_QWORD **)(*a1 + 24);
                        v1443 = v1442[1];
                        v1438 += v1443;
                        v121 = (int **)*a2;
                        v1444 = *(int **)(*a2 + 24);
                        v1445 = *((_QWORD *)v1444 + 1);
                        v1437 += v1445;
                        ++v1441;
                        v69 = *(int **)*a1;
                        v1446 = v69[1];
                        v1439 = (float *)((char *)v1439 + v1440);
                      }
                      while (v1441 < v1446);
                      v1436 = *v69;
                      v122 = *v121;
                    }
                    else
                    {
                      v1446 = 0;
                      v1442 = *(_QWORD **)(v68 + 24);
                      v1443 = v1442[1];
                      v1444 = v121[3];
                      v1445 = *((_QWORD *)v1444 + 1);
                    }
                    v1438 = *v1442 + v1438 - v1446 * v1443;
                    v1437 = *(_QWORD *)v1444 + v1437 - v1445 * v122[1];
                    ++v1512;
                  }
                  while (v1512 < v1436);
                }
              }
              else if (v269 == 1)
              {
                if (*v69)
                {
                  v886 = 0;
                  v887 = 0;
                  v888 = 0;
                  v889 = *(_QWORD *)(v68 + 152);
                  v890 = v121[19];
                  v891 = (int)v270;
                  v892 = 4 * (int)v270;
                  v893 = (float *)v67[19];
                  do
                  {
                    vDSP_svdiv((const float *)(v889 + 4 * v888), (const float *)&v890[v887], 1, v893, 1, v891);
                    v888 += **(_QWORD **)(*a1 + 24);
                    v887 += **(_QWORD **)(*a2 + 24);
                    ++v886;
                    v893 = (float *)((char *)v893 + v892);
                  }
                  while (v886 < **(int **)*a1);
                }
              }
              else if (v67[6])
              {
                v1447 = 0;
                v1594 = v121[19];
                __Nbo = *(_QWORD *)(v68 + 152);
                v1550 = (int)v270;
                v1448 = (float *)v67[19];
                do
                {
                  v1449 = *(_QWORD *)*a1;
                  v1450 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1449) >> 2;
                  v1451 = 0;
                  v1452 = (v1450 - 1);
                  if ((int)v1450 - 1 >= 0)
                  {
                    v1453 = *(_QWORD *)(*a1 + 24);
                    v1454 = v1447;
                    do
                    {
                      v1455 = ldiv(v1454, *(int *)(v1449 + 4 * v1452));
                      v1454 = v1455.quot;
                      v1451 += *(_QWORD *)(v1453 + 8 * v1452--) * v1455.rem;
                    }
                    while (v1452 != -1);
                  }
                  v1456 = *(_QWORD *)*a2;
                  v1457 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1456) >> 2;
                  v1458 = 0;
                  v1459 = (v1457 - 1);
                  if ((int)v1457 - 1 >= 0)
                  {
                    v1460 = *(_QWORD *)(*a2 + 24);
                    v1461 = v1447;
                    do
                    {
                      v1462 = ldiv(v1461, *(int *)(v1456 + 4 * v1459));
                      v1461 = v1462.quot;
                      v1458 += *(_QWORD *)(v1460 + 8 * v1459--) * v1462.rem;
                    }
                    while (v1459 != -1);
                  }
                  vDSP_svdiv((const float *)(__Nbo + 4 * (int)v1451), (const float *)&v1594[(int)v1458], 1, v1448, 1, v1550);
                  v1448 += v1550;
                  v1447 += v1550;
                }
                while (v1447 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2:
              if (v269 == 2)
              {
                v1463 = *v69;
                if (*v69)
                {
                  v1464 = 0;
                  v1465 = 0;
                  __Nbp = *(_QWORD *)(v68 + 152);
                  v1595 = v121[19];
                  v1466 = (float *)v67[19];
                  v1513 = 0;
                  v1551 = (int)v270;
                  v1467 = 4 * (int)v270;
                  do
                  {
                    if (v69[1])
                    {
                      v1468 = 0;
                      do
                      {
                        vDSP_vsdiv((const float *)(__Nbp + 4 * v1465), 1, (const float *)&v1595[v1464], v1466, 1, v1551);
                        v68 = *a1;
                        v1469 = *(_QWORD **)(*a1 + 24);
                        v1470 = v1469[1];
                        v1465 += v1470;
                        v121 = (int **)*a2;
                        v1471 = *(int **)(*a2 + 24);
                        v1472 = *((_QWORD *)v1471 + 1);
                        v1464 += v1472;
                        ++v1468;
                        v69 = *(int **)*a1;
                        v1473 = v69[1];
                        v1466 = (float *)((char *)v1466 + v1467);
                      }
                      while (v1468 < v1473);
                      v1463 = *v69;
                      v122 = *v121;
                    }
                    else
                    {
                      v1473 = 0;
                      v1469 = *(_QWORD **)(v68 + 24);
                      v1470 = v1469[1];
                      v1471 = v121[3];
                      v1472 = *((_QWORD *)v1471 + 1);
                    }
                    v1465 = *v1469 + v1465 - v1473 * v1470;
                    v1464 = *(_QWORD *)v1471 + v1464 - v1472 * v122[1];
                    ++v1513;
                  }
                  while (v1513 < v1463);
                }
              }
              else if (v269 == 1)
              {
                if (*v69)
                {
                  v894 = 0;
                  v895 = 0;
                  v896 = 0;
                  v897 = *(_QWORD *)(v68 + 152);
                  v898 = v121[19];
                  v899 = (int)v270;
                  v900 = 4 * (int)v270;
                  v901 = (float *)v67[19];
                  do
                  {
                    vDSP_vsdiv((const float *)(v897 + 4 * v896), 1, (const float *)&v898[v895], v901, 1, v899);
                    v896 += **(_QWORD **)(*a1 + 24);
                    v895 += **(_QWORD **)(*a2 + 24);
                    ++v894;
                    v901 = (float *)((char *)v901 + v900);
                  }
                  while (v894 < **(int **)*a1);
                }
              }
              else if (v67[6])
              {
                v1474 = 0;
                v1596 = v121[19];
                __Nbq = *(_QWORD *)(v68 + 152);
                v1552 = (int)v270;
                v1475 = (float *)v67[19];
                do
                {
                  v1476 = *(_QWORD *)*a1;
                  v1477 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1476) >> 2;
                  v1478 = 0;
                  v1479 = (v1477 - 1);
                  if ((int)v1477 - 1 >= 0)
                  {
                    v1480 = *(_QWORD *)(*a1 + 24);
                    v1481 = v1474;
                    do
                    {
                      v1482 = ldiv(v1481, *(int *)(v1476 + 4 * v1479));
                      v1481 = v1482.quot;
                      v1478 += *(_QWORD *)(v1480 + 8 * v1479--) * v1482.rem;
                    }
                    while (v1479 != -1);
                  }
                  v1483 = *(_QWORD *)*a2;
                  v1484 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1483) >> 2;
                  v1485 = 0;
                  v1486 = (v1484 - 1);
                  if ((int)v1484 - 1 >= 0)
                  {
                    v1487 = *(_QWORD *)(*a2 + 24);
                    v1488 = v1474;
                    do
                    {
                      v1489 = ldiv(v1488, *(int *)(v1483 + 4 * v1486));
                      v1488 = v1489.quot;
                      v1485 += *(_QWORD *)(v1487 + 8 * v1486--) * v1489.rem;
                    }
                    while (v1486 != -1);
                  }
                  vDSP_vsdiv((const float *)(__Nbq + 4 * (int)v1478), 1, (const float *)&v1596[(int)v1485], v1475, 1, v1552);
                  v1475 += v1552;
                  v1474 += v1552;
                }
                while (v1474 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 3:
              if (v269 == 2)
              {
                v1071 = *v69;
                if (*v69)
                {
                  v1072 = 0;
                  v1073 = 0;
                  __Nr = *(_QWORD *)(v68 + 152);
                  v1571 = v121[19];
                  v1074 = (float *)v67[19];
                  v1505 = 0;
                  v1529 = (int)v270;
                  v1075 = 4 * (int)v270;
                  do
                  {
                    if (v69[1])
                    {
                      v1076 = 0;
                      do
                      {
                        vDSP_vdiv((const float *)&v1571[v1072], 1, (const float *)(__Nr + 4 * v1073), 1, v1074, 1, v1529);
                        v68 = *a1;
                        v1077 = *(_QWORD **)(*a1 + 24);
                        v1078 = v1077[1];
                        v1073 += v1078;
                        v121 = (int **)*a2;
                        v1079 = *(int **)(*a2 + 24);
                        v1080 = *((_QWORD *)v1079 + 1);
                        v1072 += v1080;
                        ++v1076;
                        v69 = *(int **)*a1;
                        v1081 = v69[1];
                        v1074 = (float *)((char *)v1074 + v1075);
                      }
                      while (v1076 < v1081);
                      v1071 = *v69;
                      v122 = *v121;
                    }
                    else
                    {
                      v1081 = 0;
                      v1077 = *(_QWORD **)(v68 + 24);
                      v1078 = v1077[1];
                      v1079 = v121[3];
                      v1080 = *((_QWORD *)v1079 + 1);
                    }
                    v1073 = *v1077 + v1073 - v1081 * v1078;
                    v1072 = *(_QWORD *)v1079 + v1072 - v1080 * v122[1];
                    ++v1505;
                  }
                  while (v1505 < v1071);
                }
              }
              else if (v269 == 1)
              {
                if (*v69)
                {
                  v271 = 0;
                  v272 = 0;
                  v273 = 0;
                  v274 = *(_QWORD *)(v68 + 152);
                  v275 = v121[19];
                  v276 = (int)v270;
                  v277 = 4 * (int)v270;
                  v278 = (float *)v67[19];
                  do
                  {
                    vDSP_vdiv((const float *)&v275[v272], 1, (const float *)(v274 + 4 * v273), 1, v278, 1, v276);
                    v273 += **(_QWORD **)(*a1 + 24);
                    v272 += **(_QWORD **)(*a2 + 24);
                    ++v271;
                    v278 = (float *)((char *)v278 + v277);
                  }
                  while (v271 < **(int **)*a1);
                }
              }
              else if (v67[6])
              {
                v1082 = 0;
                v1572 = v121[19];
                __Ns = *(_QWORD *)(v68 + 152);
                v1530 = (int)v270;
                v1083 = (float *)v67[19];
                do
                {
                  v1084 = *(_QWORD *)*a1;
                  v1085 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1084) >> 2;
                  v1086 = 0;
                  v1087 = (v1085 - 1);
                  if ((int)v1085 - 1 >= 0)
                  {
                    v1088 = *(_QWORD *)(*a1 + 24);
                    v1089 = v1082;
                    do
                    {
                      v1090 = ldiv(v1089, *(int *)(v1084 + 4 * v1087));
                      v1089 = v1090.quot;
                      v1086 += *(_QWORD *)(v1088 + 8 * v1087--) * v1090.rem;
                    }
                    while (v1087 != -1);
                  }
                  v1091 = *(_QWORD *)*a2;
                  v1092 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1091) >> 2;
                  v1093 = 0;
                  v1094 = (v1092 - 1);
                  if ((int)v1092 - 1 >= 0)
                  {
                    v1095 = *(_QWORD *)(*a2 + 24);
                    v1096 = v1082;
                    do
                    {
                      v1097 = ldiv(v1096, *(int *)(v1091 + 4 * v1094));
                      v1096 = v1097.quot;
                      v1093 += *(_QWORD *)(v1095 + 8 * v1094--) * v1097.rem;
                    }
                    while (v1094 != -1);
                  }
                  vDSP_vdiv((const float *)&v1572[(int)v1093], 1, (const float *)(__Ns + 4 * (int)v1086), 1, v1083, 1, v1530);
                  v1083 += v1530;
                  v1082 += v1530;
                }
                while (v1082 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            default:
LABEL_432:
              switch(v266)
              {
                case 1uLL:
                  v279 = v67[6];
                  if (v279)
                  {
                    v280 = *(float **)(v68 + 152);
                    v281 = (float *)v121[19];
                    v282 = (float *)v67[19];
                    v283 = 4 * *(_QWORD *)v121[3];
                    v284 = 4 * **(_QWORD **)(v68 + 24);
                    do
                    {
                      *v282++ = *v280 / *v281;
                      v281 = (float *)((char *)v281 + v283);
                      v280 = (float *)((char *)v280 + v284);
                      --v279;
                    }
                    while (v279);
                  }
                  break;
                case 2uLL:
                  v727 = *v69;
                  if ((_DWORD)v727)
                  {
                    v728 = 0;
                    v729 = 0;
                    v730 = 0;
                    v731 = 0;
                    v732 = *(_QWORD *)(v68 + 152);
                    v733 = v121[19];
                    v734 = v67[19];
                    v735 = v69[1];
                    v736 = *(uint64_t **)(v68 + 24);
                    v737 = *v736;
                    v738 = v736[1];
                    v739 = v121[3];
                    v740 = *(_QWORD *)v739;
                    v741 = *((_QWORD *)v739 + 1);
                    v742 = v740 - v741 * v122[1];
                    if (v735 <= 1)
                      v743 = 1;
                    else
                      v743 = v69[1];
                    v744 = v737 - v738 * v735;
                    do
                    {
                      if ((_DWORD)v735)
                      {
                        v745 = v729 + v743;
                        v746 = (float *)(v734 + 4 * v729);
                        v747 = v743;
                        do
                        {
                          *v746++ = *(float *)(v732 + 4 * v731) / *(float *)&v733[v730];
                          v731 += v738;
                          v730 += v741;
                          --v747;
                        }
                        while (v747);
                        v729 = v745;
                      }
                      v731 += v744;
                      v730 += v742;
                      ++v728;
                    }
                    while (v728 != v727);
                  }
                  break;
                case 3uLL:
                  v748 = *v69;
                  if ((_DWORD)v748)
                  {
                    v749 = 0;
                    v750 = 0;
                    v751 = 0;
                    v752 = 0;
                    v753 = *(_QWORD *)(v68 + 152);
                    v754 = v121[19];
                    v755 = v67[19];
                    v756 = v69[1];
                    v757 = *(_QWORD **)(v68 + 24);
                    v758 = v757[1];
                    v759 = v121[3];
                    v760 = *((_QWORD *)v759 + 1);
                    v761 = *(_QWORD *)v759 - v760 * v122[1];
                    if (v756 <= 1)
                      v762 = 1;
                    else
                      v762 = v69[1];
                    v763 = *v757 - v758 * v756;
                    do
                    {
                      if ((_DWORD)v756)
                      {
                        v764 = 0;
                        v765 = v69[2];
                        v766 = v757[2];
                        v767 = *((_QWORD *)v759 + 2);
                        if (v765 <= 1)
                          v768 = 1;
                        else
                          v768 = v69[2];
                        v769 = v760 - v767 * v122[2];
                        do
                        {
                          v770 = v768;
                          if ((_DWORD)v765)
                          {
                            do
                            {
                              *(float *)(v755 + 4 * v750++) = *(float *)(v753 + 4 * v752) / *(float *)&v754[v751];
                              v752 += v766;
                              v751 += v767;
                              --v770;
                            }
                            while (v770);
                          }
                          v752 += v758 - v766 * v765;
                          v751 += v769;
                          ++v764;
                        }
                        while (v764 != v762);
                      }
                      v752 += v763;
                      v751 += v761;
                      ++v749;
                    }
                    while (v749 != v748);
                  }
                  break;
                case 4uLL:
                  __Ng = *v69;
                  if ((_DWORD)__Ng)
                  {
                    v771 = 0;
                    v772 = 0;
                    v773 = 0;
                    v774 = 0;
                    v775 = *(_QWORD *)(v68 + 152);
                    v776 = v121[19];
                    v777 = v67[19];
                    v778 = v69[1];
                    v779 = *(_QWORD **)(v68 + 24);
                    v780 = v121[3];
                    v1501 = *((_QWORD *)v780 + 1);
                    v1519 = v779[1];
                    v1560 = *(_QWORD *)v780 - v1501 * v122[1];
                    if (v778 <= 1)
                      v781 = 1;
                    else
                      v781 = v69[1];
                    v782 = *v779 - v779[1] * v778;
                    do
                    {
                      if ((_DWORD)v778)
                      {
                        v783 = 0;
                        v784 = v69[2];
                        v785 = v779[2];
                        v786 = *((_QWORD *)v780 + 2);
                        if (v784 <= 1)
                          v787 = 1;
                        else
                          v787 = v69[2];
                        v788 = v1501 - v786 * v122[2];
                        do
                        {
                          if ((_DWORD)v784)
                          {
                            v789 = 0;
                            v790 = v69[3];
                            v791 = v779[3];
                            v792 = *((_QWORD *)v780 + 3);
                            if (v790 <= 1)
                              v793 = 1;
                            else
                              v793 = v69[3];
                            v794 = v786 - v792 * v122[3];
                            do
                            {
                              v795 = v793;
                              if ((_DWORD)v790)
                              {
                                do
                                {
                                  *(float *)(v777 + 4 * v772++) = *(float *)(v775 + 4 * v774) / *(float *)&v776[v773];
                                  v774 += v791;
                                  v773 += v792;
                                  --v795;
                                }
                                while (v795);
                              }
                              v774 += v785 - v791 * v790;
                              v773 += v794;
                              ++v789;
                            }
                            while (v789 != v787);
                          }
                          v774 += v1519 - v785 * v784;
                          v773 += v788;
                          ++v783;
                        }
                        while (v783 != v781);
                      }
                      v774 += v782;
                      v773 += v1560;
                      ++v771;
                    }
                    while (v771 != __Ng);
                  }
                  break;
                default:
                  v1559 = v67[6];
                  __Nf = v71;
                  if (v1559)
                  {
                    v716 = 0;
                    v1500 = v121[19];
                    v1518 = *(_QWORD *)(v68 + 152);
                    v1495 = v67[19];
                    do
                    {
                      v717 = __Nf;
                      if ((__Nf & 0x80000000) != 0)
                      {
                        LODWORD(v718) = 0;
                      }
                      else
                      {
                        v718 = 0;
                        v719 = *(_QWORD *)(v68 + 24);
                        v720 = v716;
                        do
                        {
                          v721 = ldiv(v720, v69[v717]);
                          v720 = v721.quot;
                          v718 += *(_QWORD *)(v719 + 8 * v717--) * v721.rem;
                        }
                        while (v717 != -1);
                      }
                      v722 = 0;
                      if ((v124 & 0x80000000) == 0)
                      {
                        v723 = v121[3];
                        v724 = v124;
                        v725 = v716;
                        do
                        {
                          v726 = ldiv(v725, v122[v724]);
                          v725 = v726.quot;
                          v722 += *(_QWORD *)&v723[2 * v724--] * v726.rem;
                        }
                        while (v724 != -1);
                      }
                      *(float *)(v1495 + 4 * v716++) = *(float *)(v1518 + 4 * (int)v718) / *(float *)&v1500[(int)v722];
                    }
                    while (v716 != v1559);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_7>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  _BYTE *v25;
  char *v26;
  unsigned int v27;
  char v28;
  int v29;
  _BYTE *v30;
  char *v31;
  unsigned int v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int *v84;
  unsigned int *v85;
  int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  _BYTE *v100;
  char *v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  _BYTE *v106;
  char *v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  _BYTE *v112;
  char *v113;
  char *v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  _QWORD *v119;
  _QWORD *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  int *v130;
  int *v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  int *v136;
  int *v137;
  unsigned int v138;
  int v139;
  int v140;
  int *v141;
  int *v142;
  int *v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  _QWORD *v148;
  _QWORD *v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  float v187;
  float *v188;
  float *v189;
  unsigned int v190;
  float v191;
  int v192;
  float v193;
  float *v194;
  float *v195;
  unsigned int v196;
  float v197;
  int v198;
  float *v199;
  float *v200;
  float *v201;
  unsigned int v202;
  float v203;
  float v204;
  float v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  unsigned int v211;
  int **v212;
  int *v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  unsigned int v218;
  _QWORD *v219;
  int *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  int **v227;
  int *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  _QWORD *v234;
  int *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  _QWORD *v242;
  int *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  int v248;
  unsigned int v249;
  _QWORD *v250;
  int *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  unint64_t v286;
  int v287;
  int v288;
  int v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  _BYTE *v299;
  _BYTE *v300;
  uint64_t v301;
  unint64_t v302;
  int v303;
  int v304;
  int v305;
  unint64_t v306;
  int v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  unint64_t v322;
  int v323;
  int v324;
  int v325;
  unint64_t v326;
  int v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  _DWORD *v337;
  _DWORD *v338;
  int *v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  int v343;
  int v344;
  int v345;
  unint64_t v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int *v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int *v360;
  uint64_t v361;
  unint64_t v362;
  int v363;
  int v364;
  int v365;
  unint64_t v366;
  int v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  _DWORD *v377;
  _DWORD *v378;
  int *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  int v383;
  int v384;
  int v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  int v403;
  int v404;
  int v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unsigned int v415;
  uint64_t v416;
  float *v417;
  float *v418;
  float *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  ldiv_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _BYTE *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  ldiv_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  ldiv_t v497;
  int v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int *v504;
  uint64_t v505;
  unint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  int *v509;
  uint64_t v510;
  unint64_t v511;
  int v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int *v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  int *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  int v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int *v535;
  uint64_t v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  int *v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  ldiv_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  ldiv_t v559;
  int v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t *v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  unint64_t i;
  uint64_t v576;
  int v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  int v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  unint64_t j;
  uint64_t v598;
  uint64_t v599;
  int v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  int v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  int v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  unint64_t k;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  ldiv_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  ldiv_t v644;
  int v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int *v651;
  uint64_t v652;
  unint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  int *v656;
  uint64_t v657;
  unint64_t v658;
  int v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  _QWORD *v669;
  uint64_t v670;
  int *v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  unint64_t v675;
  int v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int *v682;
  uint64_t v683;
  unint64_t v684;
  unint64_t v685;
  unint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  int *v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  int v700;
  ldiv_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  ldiv_t v706;
  int v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t *v718;
  uint64_t v719;
  uint64_t v720;
  int v721;
  unint64_t m;
  uint64_t v723;
  int v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t *v735;
  uint64_t v736;
  uint64_t v737;
  int v738;
  int v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  unint64_t n;
  uint64_t v745;
  uint64_t v746;
  int v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t *v758;
  uint64_t v759;
  uint64_t v760;
  int v761;
  int v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  int v766;
  int v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  int v771;
  unint64_t ii;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  int v781;
  ldiv_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  ldiv_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t *v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unint64_t v817;
  _QWORD *v818;
  uint64_t v819;
  _QWORD *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  _QWORD *v840;
  _QWORD *v841;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  int v861;
  ldiv_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int v866;
  ldiv_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  float *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  unint64_t v897;
  _QWORD *v898;
  uint64_t v899;
  _QWORD *v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  unint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  unint64_t v919;
  _QWORD *v920;
  _QWORD *v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  unint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unsigned __int8 *v938;
  char *v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unsigned int v947;
  int v948;
  unint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  int *v953;
  uint64_t v954;
  uint64_t v955;
  unsigned int v956;
  unsigned int v957;
  int v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  int *v963;
  uint64_t v964;
  uint64_t v965;
  unsigned int v966;
  unsigned int v967;
  int v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unsigned int v977;
  unsigned int v978;
  int v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  unsigned int v988;
  unsigned int v989;
  int v990;
  unint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  int *v995;
  uint64_t v996;
  uint64_t v997;
  int v998;
  unsigned int v999;
  int v1000;
  unint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  int *v1005;
  uint64_t v1006;
  uint64_t v1007;
  int v1008;
  unsigned int v1009;
  int v1010;
  unint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  int v1019;
  unsigned int v1020;
  int v1021;
  unint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  int v1030;
  unsigned int v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unsigned int v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  unsigned int v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  float v1063;
  unsigned int v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  float v1074;
  unsigned int v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unint64_t v1081;
  uint64_t *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  unsigned int v1090;
  unint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  int v1097;
  ldiv_t v1098;
  uint64_t v1099;
  unsigned int v1100;
  int v1101;
  unint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int *v1106;
  uint64_t v1107;
  unint64_t v1108;
  uint64_t v1109;
  unsigned int v1110;
  _QWORD *v1111;
  uint64_t v1112;
  unint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  int v1120;
  ldiv_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  int v1127;
  ldiv_t v1128;
  uint64_t v1129;
  unsigned int v1130;
  int v1131;
  unint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t *v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t *v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  int v1145;
  unint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  unsigned int v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  int v1156;
  ldiv_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  int v1161;
  ldiv_t v1162;
  uint64_t v1163;
  unsigned int v1164;
  int v1165;
  unint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  int *v1170;
  uint64_t v1171;
  unint64_t v1172;
  uint64_t v1173;
  unsigned int v1174;
  _QWORD *v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  unint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  int v1184;
  ldiv_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  ldiv_t v1192;
  uint64_t v1193;
  unsigned int v1194;
  int v1195;
  unint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t *v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t *v1205;
  uint64_t v1206;
  uint64_t v1207;
  int v1208;
  int v1209;
  unint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unsigned int v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  int v1220;
  ldiv_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  int v1225;
  ldiv_t v1226;
  uint64_t v1227;
  unsigned int v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  uint64_t *v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t *v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  unsigned int v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  int v1255;
  ldiv_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  int v1260;
  ldiv_t v1261;
  uint64_t v1262;
  unsigned int v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  unint64_t v1271;
  uint64_t *v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t *v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  unsigned int v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  ldiv_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  int v1295;
  ldiv_t v1296;
  uint64_t v1297;
  unsigned int v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  char *v1302;
  unint64_t v1303;
  uint64_t *v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  unint64_t v1311;
  char *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int quot;
  ldiv_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  uint64_t *v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  unsigned int v1332;
  unint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  int v1339;
  ldiv_t v1340;
  uint64_t v1341;
  unsigned int v1342;
  int v1343;
  unint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int *v1348;
  uint64_t v1349;
  unint64_t v1350;
  uint64_t v1351;
  unsigned int v1352;
  unsigned int v1353;
  _QWORD *v1354;
  uint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  int v1363;
  ldiv_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  int v1370;
  ldiv_t v1371;
  uint64_t v1372;
  unsigned int v1373;
  unsigned int v1374;
  int v1375;
  unint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  int *v1380;
  uint64_t v1381;
  unint64_t v1382;
  uint64_t v1383;
  unsigned int v1384;
  unsigned int v1385;
  _QWORD *v1386;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  ldiv_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  int v1402;
  ldiv_t v1403;
  uint64_t v1404;
  unsigned int v1405;
  unsigned int v1406;
  int v1407;
  unint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t *v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t *v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  int v1421;
  unint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  unsigned int v1425;
  unsigned int v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  int v1432;
  ldiv_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  int v1437;
  ldiv_t v1438;
  uint64_t v1439;
  unsigned int v1440;
  unsigned int v1441;
  int v1442;
  unint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t *v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t *v1452;
  uint64_t v1453;
  uint64_t v1454;
  int v1455;
  int v1456;
  unint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  unsigned int v1460;
  unsigned int v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  int v1467;
  ldiv_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  int v1472;
  ldiv_t v1473;
  uint64_t v1474;
  unsigned int v1475;
  unsigned int v1476;
  int v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  int *v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  int v1486;
  unsigned int v1487;
  _QWORD *v1488;
  uint64_t v1489;
  unint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  unint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  int v1497;
  ldiv_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  int v1504;
  ldiv_t v1505;
  uint64_t v1506;
  int v1507;
  unsigned int v1508;
  int v1509;
  unint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  int *v1514;
  uint64_t v1515;
  unint64_t v1516;
  uint64_t v1517;
  int v1518;
  unsigned int v1519;
  _QWORD *v1520;
  uint64_t v1521;
  unint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  unint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  int v1529;
  ldiv_t v1530;
  uint64_t v1531;
  unint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  int v1536;
  ldiv_t v1537;
  uint64_t v1538;
  int v1539;
  unsigned int v1540;
  int v1541;
  unint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t *v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t *v1551;
  uint64_t v1552;
  uint64_t v1553;
  int v1554;
  int v1555;
  unint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  int v1559;
  unsigned int v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  int v1566;
  ldiv_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  int v1571;
  ldiv_t v1572;
  uint64_t v1573;
  int v1574;
  unsigned int v1575;
  int v1576;
  unint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t *v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t *v1586;
  uint64_t v1587;
  uint64_t v1588;
  int v1589;
  int v1590;
  unint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  int v1594;
  unsigned int v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  int v1601;
  ldiv_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  int v1606;
  ldiv_t v1607;
  uint64_t v1608;
  int v1609;
  unsigned int v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  unint64_t v1618;
  uint64_t *v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t *v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  unsigned int v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  int v1637;
  ldiv_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  int v1642;
  ldiv_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  unsigned int v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  unint64_t v1654;
  uint64_t *v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t *v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  unsigned int v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  int v1673;
  ldiv_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  int v1678;
  ldiv_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  unsigned int v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  unint64_t v1690;
  uint64_t *v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t *v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  float v1703;
  unsigned int v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  int v1709;
  ldiv_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  int v1714;
  ldiv_t v1715;
  uint64_t v1716;
  float v1717;
  unsigned int v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  unint64_t v1726;
  uint64_t *v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t *v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  float v1739;
  unsigned int v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  int v1745;
  ldiv_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  int v1750;
  ldiv_t v1751;
  uint64_t v1752;
  float v1753;
  unsigned int v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  unsigned int v1780;
  unsigned int v1781;
  unsigned int v1782;
  unsigned int v1783;
  unsigned int v1784;
  unsigned int v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  int *v1791;
  int *v1792;
  int *v1793;
  int *v1794;
  int *v1795;
  int *v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  unint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  unint64_t v1804;
  uint64_t v1805;
  unint64_t v1806;
  unint64_t v1807;
  unint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unint64_t v1811;
  unint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  unint64_t v1815;
  unint64_t v1816;
  unint64_t v1817;
  unint64_t v1818;
  unint64_t v1819;
  unint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  unint64_t v1828;
  uint64_t v1829;
  unint64_t v1830;
  unint64_t v1831;
  unint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  unint64_t v1836;
  unint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  unint64_t v1840;
  unint64_t v1841;
  unint64_t v1842;
  unint64_t v1843;
  unint64_t v1844;
  unint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  int *v1850;
  int *v1851;
  int v1852;
  uint64_t v1853;
  uint64_t v1854;
  unint64_t v1855;
  unint64_t v1856;
  int v1857;
  uint64_t v1858;
  uint64_t v1859;
  unint64_t v1860;
  unint64_t v1861;
  unint64_t v1862;
  unint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(_BYTE **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          if ((int)*(_QWORD *)(*a2 + 160) >= 1)
            memset(*(void **)(*(_QWORD *)a3 + 152), **(unsigned __int8 **)(*a1 + 152), *(_QWORD *)(*a2 + 160));
          return;
        case 2:
          v24 = *(_DWORD *)(*a1 + 160);
          if (v24 >= 1)
          {
            v25 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v26 = *(char **)(*a1 + 152);
            v27 = v24 + 1;
            do
            {
              v28 = *v26++;
              *v25++ = v28;
              --v27;
            }
            while (v27 > 1);
          }
          return;
        case 3:
          v29 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v29 >= 1)
          {
            v30 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v31 = *(char **)(*a1 + 152);
            v32 = v29 + 1;
            do
            {
              v33 = *v31++;
              *v30++ = v33;
              --v32;
            }
            while (v32 > 1);
          }
          return;
        default:
          v15 = *(_QWORD **)a3;
          v16 = *a1;
          v17 = *(int **)*a1;
          v18 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v17) >> 2;
          v19 = (v18 - 1);
          if ((int)v19 >= -1)
            v20 = -1;
          else
            v20 = v18 - 1;
          v21 = v20 + 1;
          v22 = v18 + 1;
          break;
      }
      while (1)
      {
        v23 = v22 - 2;
        if (v22 - 2 < 0)
          break;
        --v22;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v23) != *(_QWORD *)(v15[3] + 8 * v23))
          goto LABEL_148;
      }
      v22 = v21;
LABEL_148:
      v206 = *a2;
      v207 = (*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 2;
      v208 = v207 - 1;
      if ((int)v207 - 1 >= -1)
        v208 = -1;
      v209 = v208 + 1;
      v210 = v207 + 1;
      while (1)
      {
        v211 = v210 - 2;
        if (v210 - 2 < 0)
          break;
        --v210;
        if (*(_QWORD *)(*(_QWORD *)(v206 + 24) + 8 * v211) != *(_QWORD *)(v15[3] + 8 * v211))
          goto LABEL_201;
      }
      v210 = v209;
LABEL_201:
      v258 = v18 + 1;
      while (1)
      {
        v259 = v258 - 2;
        if (v258 - 2 < 0)
          break;
        --v258;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v259))
          goto LABEL_236;
      }
      v258 = v21;
LABEL_236:
      v272 = v207 + 1;
      while (1)
      {
        v273 = v272 - 2;
        if (v272 - 2 < 0)
          break;
        --v272;
        if (*(_QWORD *)(*(_QWORD *)(v206 + 24) + 8 * v273))
          goto LABEL_271;
      }
      v272 = v209;
LABEL_271:
      v286 = (uint64_t)(v15[1] - *v15) >> 2;
      if (v22 <= v210)
        v287 = v210;
      else
        v287 = v22;
      if (v22 <= v272)
        v22 = v272;
      if (v258 > v210)
        v210 = v258;
      if (v286 > v210)
      {
        v288 = 1;
      }
      else
      {
        v210 = (uint64_t)(v15[1] - *v15) >> 2;
        v288 = 4;
      }
      if (v286 > v22)
      {
        v289 = 2;
      }
      else
      {
        v22 = v210;
        v289 = v288;
      }
      if (v286 > v287)
      {
        v22 = v287;
        v289 = 3;
      }
      v1864 = v19;
      if (!v22)
        goto LABEL_300;
      v290 = *(_QWORD *)(v15[3] + 8 * (v22 - 1));
      if (v290 < 0x10)
        goto LABEL_300;
      switch(v289)
      {
        case 1:
          if (v22 == 2)
          {
            v1875 = *v17;
            if ((_DWORD)v1875)
            {
              v1299 = 0;
              v1300 = 0;
              v1301 = *(_QWORD *)(v16 + 152);
              v1302 = (char *)v15[19];
              v1303 = v17[1];
              v1304 = *(uint64_t **)(v16 + 24);
              v1305 = *v1304;
              v1306 = v1304[1];
              if (v1303 <= 1)
                v1307 = 1;
              else
                v1307 = v17[1];
              v1833 = v1307;
              v1857 = v17[1];
              v1308 = v1305 - v1306 * v1303;
              do
              {
                v1309 = v1833;
                if (v1857)
                {
                  do
                  {
                    if ((int)v290 >= 1)
                      memset(v1302, *(unsigned __int8 *)(v1301 + v1300), v290);
                    v1300 += v1306;
                    v1302 += (int)v290;
                    --v1309;
                  }
                  while (v1309);
                }
                v1300 += v1308;
                ++v1299;
              }
              while (v1299 != v1875);
            }
          }
          else if (v22 == 1)
          {
            v937 = *v17;
            if ((_DWORD)v937)
            {
              v938 = *(unsigned __int8 **)(v16 + 152);
              v939 = (char *)v15[19];
              v940 = **(_QWORD **)(v16 + 24);
              do
              {
                if ((int)v290 >= 1)
                  memset(v939, *v938, v290);
                v939 += (int)v290;
                v938 += v940;
                --v937;
              }
              while (v937);
            }
          }
          else
          {
            v1310 = v15[6];
            if (v1310)
            {
              v1311 = 0;
              v1312 = (char *)v15[19];
              v1858 = *(_QWORD *)(v16 + 152);
              do
              {
                v1313 = v1864;
                if ((v1864 & 0x80000000) != 0)
                {
                  LODWORD(v1314) = 0;
                }
                else
                {
                  v1314 = 0;
                  v1315 = *(_QWORD *)(v16 + 24);
                  quot = v1311;
                  do
                  {
                    v1317 = ldiv(quot, v17[v1313]);
                    quot = v1317.quot;
                    v1314 += *(_QWORD *)(v1315 + 8 * v1313--) * v1317.rem;
                  }
                  while (v1313 != -1);
                }
                if ((int)v290 >= 1)
                  memset(v1312, *(unsigned __int8 *)(v1858 + (int)v1314), v290);
                v1312 += (int)v290;
                v1311 += (int)v290;
              }
              while (v1311 < v1310);
            }
          }
          break;
        case 2:
          if (v22 == 2)
          {
            v1318 = *v17;
            if ((_DWORD)v1318)
            {
              v1319 = 0;
              v1320 = 0;
              v1321 = *(_QWORD *)(v16 + 152);
              v1322 = v15[19];
              v1323 = v17[1];
              v1324 = *(uint64_t **)(v16 + 24);
              v1326 = *v1324;
              v1325 = v1324[1];
              if (v1323 <= 1)
                v1327 = 1;
              else
                v1327 = v17[1];
              v1328 = v1326 - v1325 * v1323;
              do
              {
                if ((_DWORD)v1323)
                {
                  v1329 = 0;
                  v1330 = v1321 + v1320;
                  do
                  {
                    if ((int)v290 >= 1)
                    {
                      v1331 = 0;
                      v1332 = v290 + 1;
                      do
                      {
                        *(_BYTE *)(v1322 + v1331) = *(_BYTE *)(v1330 + v1331);
                        --v1332;
                        ++v1331;
                      }
                      while (v1332 > 1);
                    }
                    v1320 += v1325;
                    v1322 += (int)v290;
                    ++v1329;
                    v1330 += v1325;
                  }
                  while (v1329 != v1327);
                }
                v1320 += v1328;
                ++v1319;
              }
              while (v1319 != v1318);
            }
          }
          else if (v22 == 1)
          {
            v941 = *v17;
            if ((_DWORD)v941)
            {
              v942 = 0;
              v943 = *(_QWORD *)(v16 + 152);
              v944 = v15[19];
              v945 = **(_QWORD **)(v16 + 24);
              do
              {
                if ((int)v290 >= 1)
                {
                  v946 = 0;
                  v947 = v290 + 1;
                  do
                  {
                    *(_BYTE *)(v944 + v946) = *(_BYTE *)(v943 + v946);
                    --v947;
                    ++v946;
                  }
                  while (v947 > 1);
                }
                v944 += (int)v290;
                ++v942;
                v943 += v945;
              }
              while (v942 != v941);
            }
          }
          else
          {
            v1333 = v15[6];
            if (v1333)
            {
              v1334 = 0;
              v1859 = *(_QWORD *)(v16 + 152);
              v1335 = v15[19];
              do
              {
                v1336 = v1864;
                if ((v1864 & 0x80000000) != 0)
                {
                  LODWORD(v1337) = 0;
                }
                else
                {
                  v1337 = 0;
                  v1338 = *(_QWORD *)(v16 + 24);
                  v1339 = v1334;
                  do
                  {
                    v1340 = ldiv(v1339, v17[v1336]);
                    v1339 = v1340.quot;
                    v1337 += *(_QWORD *)(v1338 + 8 * v1336--) * v1340.rem;
                  }
                  while (v1336 != -1);
                }
                if ((int)v290 >= 1)
                {
                  v1341 = 0;
                  v1342 = v290 + 1;
                  do
                  {
                    *(_BYTE *)(v1335 + v1341) = *(_BYTE *)(v1859 + (int)v1337 + v1341);
                    --v1342;
                    ++v1341;
                  }
                  while (v1342 > 1);
                }
                v1335 += (int)v290;
                v1334 += (int)v290;
              }
              while (v1334 < v1333);
            }
          }
          break;
        case 3:
          if (v22 == 2)
          {
            v1076 = *v17;
            if ((_DWORD)v1076)
            {
              v1077 = 0;
              v1078 = 0;
              v1079 = *(_QWORD *)(v16 + 152);
              v1080 = v15[19];
              v1081 = v17[1];
              v1082 = *(uint64_t **)(v16 + 24);
              v1084 = *v1082;
              v1083 = v1082[1];
              if (v1081 <= 1)
                v1085 = 1;
              else
                v1085 = v17[1];
              v1086 = v1084 - v1083 * v1081;
              do
              {
                if ((_DWORD)v1081)
                {
                  v1087 = 0;
                  v1088 = v1079 + v1078;
                  do
                  {
                    if ((int)v290 >= 1)
                    {
                      v1089 = 0;
                      v1090 = v290 + 1;
                      do
                      {
                        *(_BYTE *)(v1080 + v1089) = *(_BYTE *)(v1088 + v1089);
                        --v1090;
                        ++v1089;
                      }
                      while (v1090 > 1);
                    }
                    v1078 += v1083;
                    v1080 += (int)v290;
                    ++v1087;
                    v1088 += v1083;
                  }
                  while (v1087 != v1085);
                }
                v1078 += v1086;
                ++v1077;
              }
              while (v1077 != v1076);
            }
          }
          else if (v22 == 1)
          {
            v291 = *v17;
            if ((_DWORD)v291)
            {
              v292 = 0;
              v293 = *(_QWORD *)(v16 + 152);
              v294 = v15[19];
              v295 = **(_QWORD **)(v16 + 24);
              do
              {
                if ((int)v290 >= 1)
                {
                  v296 = 0;
                  v297 = v290 + 1;
                  do
                  {
                    *(_BYTE *)(v294 + v296) = *(_BYTE *)(v293 + v296);
                    --v297;
                    ++v296;
                  }
                  while (v297 > 1);
                }
                v294 += (int)v290;
                ++v292;
                v293 += v295;
              }
              while (v292 != v291);
            }
          }
          else
          {
            v1091 = v15[6];
            if (v1091)
            {
              v1092 = 0;
              v1854 = *(_QWORD *)(v16 + 152);
              v1093 = v15[19];
              do
              {
                v1094 = v1864;
                if ((v1864 & 0x80000000) != 0)
                {
                  LODWORD(v1095) = 0;
                }
                else
                {
                  v1095 = 0;
                  v1096 = *(_QWORD *)(v16 + 24);
                  v1097 = v1092;
                  do
                  {
                    v1098 = ldiv(v1097, v17[v1094]);
                    v1097 = v1098.quot;
                    v1095 += *(_QWORD *)(v1096 + 8 * v1094--) * v1098.rem;
                  }
                  while (v1094 != -1);
                }
                if ((int)v290 >= 1)
                {
                  v1099 = 0;
                  v1100 = v290 + 1;
                  do
                  {
                    *(_BYTE *)(v1093 + v1099) = *(_BYTE *)(v1854 + (int)v1095 + v1099);
                    --v1100;
                    ++v1099;
                  }
                  while (v1100 > 1);
                }
                v1093 += (int)v290;
                v1092 += (int)v290;
              }
              while (v1092 < v1091);
            }
          }
          break;
        default:
LABEL_300:
          switch(v286)
          {
            case 1uLL:
              v298 = v15[6];
              if (v298)
              {
                v299 = *(_BYTE **)(v16 + 152);
                v300 = (_BYTE *)v15[19];
                v301 = **(_QWORD **)(v16 + 24);
                do
                {
                  *v300++ = *v299;
                  v299 += v301;
                  --v298;
                }
                while (v298);
              }
              break;
            case 2uLL:
              v431 = *v17;
              if ((_DWORD)v431)
              {
                v432 = 0;
                v433 = 0;
                v434 = 0;
                v435 = *(_QWORD *)(v16 + 152);
                v436 = v15[19];
                v437 = v17[1];
                v438 = *(uint64_t **)(v16 + 24);
                v440 = *v438;
                v439 = v438[1];
                if (v437 <= 1)
                  v441 = 1;
                else
                  v441 = v17[1];
                v442 = v440 - v439 * v437;
                do
                {
                  if ((_DWORD)v437)
                  {
                    v443 = v433 + v441;
                    v444 = (_BYTE *)(v436 + v433);
                    v445 = v441;
                    do
                    {
                      *v444++ = *(_BYTE *)(v435 + v434);
                      v434 += v439;
                      --v445;
                    }
                    while (v445);
                    v433 = v443;
                  }
                  v434 += v442;
                  ++v432;
                }
                while (v432 != v431);
              }
              break;
            case 3uLL:
              v446 = *v17;
              if ((_DWORD)v446)
              {
                v447 = 0;
                v448 = 0;
                v449 = 0;
                v450 = *(_QWORD *)(v16 + 152);
                v451 = v15[19];
                v452 = v17[1];
                v453 = *(_QWORD **)(v16 + 24);
                v454 = v453[1];
                if (v452 <= 1)
                  v455 = 1;
                else
                  v455 = v17[1];
                v456 = *v453 - v454 * v452;
                do
                {
                  if ((_DWORD)v452)
                  {
                    v457 = 0;
                    v458 = v17[2];
                    v459 = v453[2];
                    if (v458 <= 1)
                      v460 = 1;
                    else
                      v460 = v17[2];
                    do
                    {
                      v461 = v460;
                      if ((_DWORD)v458)
                      {
                        do
                        {
                          *(_BYTE *)(v451 + v448++) = *(_BYTE *)(v450 + v449);
                          v449 += v459;
                          --v461;
                        }
                        while (v461);
                      }
                      v449 += v454 - v459 * v458;
                      ++v457;
                    }
                    while (v457 != v455);
                  }
                  v449 += v456;
                  ++v447;
                }
                while (v447 != v446);
              }
              break;
            case 4uLL:
              v462 = *v17;
              if ((_DWORD)v462)
              {
                v463 = 0;
                v464 = 0;
                v465 = 0;
                v466 = *(_QWORD *)(v16 + 152);
                v467 = v15[19];
                v468 = v17[1];
                v469 = *(_QWORD **)(v16 + 24);
                v470 = v469[1];
                if (v468 <= 1)
                  v471 = 1;
                else
                  v471 = v17[1];
                v472 = *v469 - v470 * v468;
                do
                {
                  if ((_DWORD)v468)
                  {
                    v473 = 0;
                    v474 = v17[2];
                    v475 = v469[2];
                    if (v474 <= 1)
                      v476 = 1;
                    else
                      v476 = v17[2];
                    do
                    {
                      if ((_DWORD)v474)
                      {
                        v477 = 0;
                        v478 = v17[3];
                        v479 = v469[3];
                        if (v478 <= 1)
                          v480 = 1;
                        else
                          v480 = v17[3];
                        do
                        {
                          v481 = v480;
                          if ((_DWORD)v478)
                          {
                            do
                            {
                              *(_BYTE *)(v467 + v464++) = *(_BYTE *)(v466 + v465);
                              v465 += v479;
                              --v481;
                            }
                            while (v481);
                          }
                          v465 += v475 - v479 * v478;
                          ++v477;
                        }
                        while (v477 != v476);
                      }
                      v465 += v470 - v475 * v474;
                      ++v473;
                    }
                    while (v473 != v471);
                  }
                  v465 += v472;
                  ++v463;
                }
                while (v463 != v462);
              }
              break;
            default:
              v422 = v15[6];
              if (v422)
              {
                v423 = 0;
                v424 = *(_QWORD *)(v16 + 152);
                v425 = v15[19];
                do
                {
                  v426 = v1864;
                  if ((v1864 & 0x80000000) != 0)
                  {
                    LODWORD(v427) = 0;
                  }
                  else
                  {
                    v427 = 0;
                    v428 = *(_QWORD *)(v16 + 24);
                    v429 = v423;
                    do
                    {
                      v430 = ldiv(v429, v17[v426]);
                      v429 = v430.quot;
                      v427 += *(_QWORD *)(v428 + 8 * v426--) * v430.rem;
                    }
                    while (v426 != -1);
                  }
                  *(_BYTE *)(v425 + v423++) = *(_BYTE *)(v424 + (int)v427);
                }
                while (v423 != v422);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          v7 = **(_BYTE **)(*a1 + 152) / **(_BYTE **)(*a2 + 152);
          goto LABEL_10;
        case 1:
          v42 = *(_DWORD *)(*a2 + 160);
          if (v42 >= 1)
          {
            v43 = **(unsigned __int8 **)(*a1 + 152);
            v44 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v45 = *(unsigned __int8 **)(*a2 + 152);
            v46 = v42 + 1;
            do
            {
              v47 = *v45++;
              *v44++ = v43 / v47;
              --v46;
            }
            while (v46 > 1);
          }
          return;
        case 2:
          v48 = *(_DWORD *)(*a1 + 160);
          if (v48 >= 1)
          {
            v49 = **(unsigned __int8 **)(*a2 + 152);
            v50 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v51 = *(unsigned __int8 **)(*a1 + 152);
            v52 = v48 + 1;
            do
            {
              v53 = *v51++;
              *v50++ = v53 / v49;
              --v52;
            }
            while (v52 > 1);
          }
          return;
        case 3:
          v54 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v54 >= 1)
          {
            v55 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v56 = *(unsigned __int8 **)(*a2 + 152);
            v57 = *(unsigned __int8 **)(*a1 + 152);
            v58 = v54 + 1;
            do
            {
              v60 = *v57++;
              v59 = v60;
              v61 = *v56++;
              *v55++ = v59 / v61;
              --v58;
            }
            while (v58 > 1);
          }
          return;
        default:
          v34 = *(_QWORD **)a3;
          v35 = *a1;
          v36 = *(int **)*a1;
          v37 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v36) >> 2;
          v38 = v37 - 1;
          if ((int)v37 - 1 >= -1)
            v38 = -1;
          v39 = v38 + 1;
          v40 = v37 + 1;
          break;
      }
      while (1)
      {
        v41 = v40 - 2;
        if (v40 - 2 < 0)
          break;
        --v40;
        if (*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8 * v41) != *(_QWORD *)(v34[3] + 8 * v41))
          goto LABEL_155;
      }
      v40 = v39;
LABEL_155:
      v212 = (int **)*a2;
      v213 = *(int **)*a2;
      v214 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v213) >> 2;
      v215 = v214 - 1;
      if ((int)v214 - 1 >= -1)
        v215 = -1;
      v216 = v215 + 1;
      v217 = v214 + 1;
      while (1)
      {
        v218 = v217 - 2;
        if (v217 - 2 < 0)
          break;
        --v217;
        if (*(_QWORD *)&v212[3][2 * v218] != *(_QWORD *)(v34[3] + 8 * v218))
          goto LABEL_206;
      }
      v217 = v216;
LABEL_206:
      v260 = v37 + 1;
      while (1)
      {
        v261 = v260 - 2;
        if (v260 - 2 < 0)
          break;
        --v260;
        if (*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8 * v261))
          goto LABEL_241;
      }
      v260 = v39;
LABEL_241:
      v274 = v214 + 1;
      while (1)
      {
        v275 = v274 - 2;
        if (v274 - 2 < 0)
          break;
        --v274;
        if (*(_QWORD *)&v212[3][2 * v275])
          goto LABEL_306;
      }
      v274 = v216;
LABEL_306:
      v302 = (uint64_t)(v34[1] - *v34) >> 2;
      if (v40 <= v217)
        v303 = v217;
      else
        v303 = v40;
      if (v40 <= v274)
        v40 = v274;
      if (v260 > v217)
        v217 = v260;
      if (v302 > v217)
      {
        v304 = 1;
      }
      else
      {
        v217 = (uint64_t)(v34[1] - *v34) >> 2;
        v304 = 4;
      }
      if (v302 > v40)
      {
        v305 = 2;
      }
      else
      {
        v40 = v217;
        v305 = v304;
      }
      if (v302 > v303)
      {
        v40 = v303;
        v305 = 3;
      }
      if (!v40)
        goto LABEL_336;
      v306 = *(_QWORD *)(v34[3] + 8 * (v40 - 1));
      if (v306 < 0x10)
        goto LABEL_336;
      v1865 = *(_QWORD *)(v34[3] + 8 * (v40 - 1));
      switch(v305)
      {
        case 1:
          if (v40 == 2)
          {
            v1343 = *v36;
            if (*v36)
            {
              v1344 = 0;
              v1345 = 0;
              v1346 = 0;
              v1347 = *(_QWORD *)(v35 + 152);
              v1348 = v212[19];
              v1349 = v34[19];
              do
              {
                if (v36[1])
                {
                  v1350 = 0;
                  do
                  {
                    if ((int)v306 >= 1)
                    {
                      v1351 = 0;
                      v1352 = *(unsigned __int8 *)(v1347 + v1346);
                      v1353 = v306 + 1;
                      do
                      {
                        *(_BYTE *)(v1349 + v1351) = v1352 / *((unsigned __int8 *)v1348 + v1345 + v1351);
                        --v1353;
                        ++v1351;
                      }
                      while (v1353 > 1);
                      v35 = *a1;
                      v212 = (int **)*a2;
                      v36 = *(int **)*a1;
                    }
                    v1354 = *(_QWORD **)(v35 + 24);
                    v1355 = v1354[1];
                    v1346 += v1355;
                    v1345 += *((_QWORD *)v212[3] + 1);
                    v1349 += (int)v306;
                    ++v1350;
                    v1356 = v36[1];
                  }
                  while (v1350 < v1356);
                  v1343 = *v36;
                  v213 = *v212;
                }
                else
                {
                  v1356 = 0;
                  v1354 = *(_QWORD **)(v35 + 24);
                  v1355 = v1354[1];
                }
                v1346 = *v1354 + v1346 - v1356 * v1355;
                v1345 = *(_QWORD *)v212[3] + v1345 - *((_QWORD *)v212[3] + 1) * v213[1];
                ++v1344;
              }
              while (v1344 < v1343);
            }
          }
          else if (v40 == 1)
          {
            v948 = *v36;
            if (*v36)
            {
              v949 = 0;
              v950 = 0;
              v951 = 0;
              v952 = *(_QWORD *)(v35 + 152);
              v953 = v212[19];
              v954 = v34[19];
              do
              {
                if ((int)v306 >= 1)
                {
                  v955 = 0;
                  v956 = *(unsigned __int8 *)(v952 + v951);
                  v957 = v306 + 1;
                  do
                  {
                    *(_BYTE *)(v954 + v955) = v956 / *((unsigned __int8 *)v953 + v950 + v955);
                    --v957;
                    ++v955;
                  }
                  while (v957 > 1);
                  v35 = *a1;
                  v212 = (int **)*a2;
                  v948 = **(_DWORD **)*a1;
                }
                v951 += **(_QWORD **)(v35 + 24);
                v950 += *(_QWORD *)v212[3];
                v954 += (int)v306;
                ++v949;
              }
              while (v949 < v948);
            }
          }
          else if (v34[6])
          {
            v1793 = v212[19];
            v1809 = *(_QWORD *)(v35 + 152);
            v1834 = (int)v306;
            v1860 = 0;
            v1782 = v306 + 1;
            v1357 = v34[19];
            do
            {
              v1358 = *(_QWORD *)*a1;
              v1359 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1358) >> 2;
              v1360 = 0;
              v1361 = (v1359 - 1);
              if ((int)v1359 - 1 >= 0)
              {
                v1362 = *(_QWORD *)(*a1 + 24);
                v1363 = v1860;
                do
                {
                  v1364 = ldiv(v1363, *(int *)(v1358 + 4 * v1361));
                  v1363 = v1364.quot;
                  v1360 += *(_QWORD *)(v1362 + 8 * v1361--) * v1364.rem;
                }
                while (v1361 != -1);
              }
              v1365 = *(_QWORD *)*a2;
              v1366 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1365) >> 2;
              v1367 = 0;
              v1368 = (v1366 - 1);
              if ((int)v1366 - 1 >= 0)
              {
                v1369 = *(_QWORD *)(*a2 + 24);
                v1370 = v1860;
                do
                {
                  v1371 = ldiv(v1370, *(int *)(v1365 + 4 * v1368));
                  v1370 = v1371.quot;
                  v1367 += *(_QWORD *)(v1369 + 8 * v1368--) * v1371.rem;
                }
                while (v1368 != -1);
              }
              if ((int)v1865 >= 1)
              {
                v1372 = 0;
                v1373 = *(unsigned __int8 *)(v1809 + (int)v1360);
                v1374 = v1782;
                do
                {
                  *(_BYTE *)(v1357 + v1372) = v1373 / *((unsigned __int8 *)v1793 + (int)v1367 + v1372);
                  --v1374;
                  ++v1372;
                }
                while (v1374 > 1);
                v34 = *(_QWORD **)a3;
              }
              v1357 += v1834;
              v1860 += v1834;
            }
            while (v1860 < v34[6]);
          }
          break;
        case 2:
          if (v40 == 2)
          {
            v1375 = *v36;
            if (*v36)
            {
              v1376 = 0;
              v1377 = 0;
              v1378 = 0;
              v1379 = *(_QWORD *)(v35 + 152);
              v1380 = v212[19];
              v1381 = v34[19];
              do
              {
                if (v36[1])
                {
                  v1382 = 0;
                  do
                  {
                    if ((int)v306 >= 1)
                    {
                      v1383 = 0;
                      v1384 = *((unsigned __int8 *)v1380 + v1377);
                      v1385 = v306 + 1;
                      do
                      {
                        *(_BYTE *)(v1381 + v1383) = *(unsigned __int8 *)(v1379 + v1378 + v1383) / v1384;
                        --v1385;
                        ++v1383;
                      }
                      while (v1385 > 1);
                      v35 = *a1;
                      v212 = (int **)*a2;
                      v36 = *(int **)*a1;
                    }
                    v1386 = *(_QWORD **)(v35 + 24);
                    v1387 = v1386[1];
                    v1378 += v1387;
                    v1377 += *((_QWORD *)v212[3] + 1);
                    v1381 += (int)v306;
                    ++v1382;
                    v1388 = v36[1];
                  }
                  while (v1382 < v1388);
                  v1375 = *v36;
                  v213 = *v212;
                }
                else
                {
                  v1388 = 0;
                  v1386 = *(_QWORD **)(v35 + 24);
                  v1387 = v1386[1];
                }
                v1378 = *v1386 + v1378 - v1388 * v1387;
                v1377 = *(_QWORD *)v212[3] + v1377 - *((_QWORD *)v212[3] + 1) * v213[1];
                ++v1376;
              }
              while (v1376 < v1375);
            }
          }
          else if (v40 == 1)
          {
            v958 = *v36;
            if (*v36)
            {
              v959 = 0;
              v960 = 0;
              v961 = 0;
              v962 = *(_QWORD *)(v35 + 152);
              v963 = v212[19];
              v964 = v34[19];
              do
              {
                if ((int)v306 >= 1)
                {
                  v965 = 0;
                  v966 = *((unsigned __int8 *)v963 + v960);
                  v967 = v306 + 1;
                  do
                  {
                    *(_BYTE *)(v964 + v965) = *(unsigned __int8 *)(v962 + v961 + v965) / v966;
                    --v967;
                    ++v965;
                  }
                  while (v967 > 1);
                  v35 = *a1;
                  v212 = (int **)*a2;
                  v958 = **(_DWORD **)*a1;
                }
                v961 += **(_QWORD **)(v35 + 24);
                v960 += *(_QWORD *)v212[3];
                v964 += (int)v306;
                ++v959;
              }
              while (v959 < v958);
            }
          }
          else if (v34[6])
          {
            v1794 = v212[19];
            v1810 = *(_QWORD *)(v35 + 152);
            v1835 = (int)v306;
            v1861 = 0;
            v1783 = v306 + 1;
            v1389 = v34[19];
            do
            {
              v1390 = *(_QWORD *)*a1;
              v1391 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1390) >> 2;
              v1392 = 0;
              v1393 = (v1391 - 1);
              if ((int)v1391 - 1 >= 0)
              {
                v1394 = *(_QWORD *)(*a1 + 24);
                v1395 = v1861;
                do
                {
                  v1396 = ldiv(v1395, *(int *)(v1390 + 4 * v1393));
                  v1395 = v1396.quot;
                  v1392 += *(_QWORD *)(v1394 + 8 * v1393--) * v1396.rem;
                }
                while (v1393 != -1);
              }
              v1397 = *(_QWORD *)*a2;
              v1398 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1397) >> 2;
              v1399 = 0;
              v1400 = (v1398 - 1);
              if ((int)v1398 - 1 >= 0)
              {
                v1401 = *(_QWORD *)(*a2 + 24);
                v1402 = v1861;
                do
                {
                  v1403 = ldiv(v1402, *(int *)(v1397 + 4 * v1400));
                  v1402 = v1403.quot;
                  v1399 += *(_QWORD *)(v1401 + 8 * v1400--) * v1403.rem;
                }
                while (v1400 != -1);
              }
              if ((int)v1865 >= 1)
              {
                v1404 = 0;
                v1405 = *((unsigned __int8 *)v1794 + (int)v1399);
                v1406 = v1783;
                do
                {
                  *(_BYTE *)(v1389 + v1404) = *(unsigned __int8 *)(v1810 + (int)v1392 + v1404) / v1405;
                  --v1406;
                  ++v1404;
                }
                while (v1406 > 1);
                v34 = *(_QWORD **)a3;
              }
              v1389 += v1835;
              v1861 += v1835;
            }
            while (v1861 < v34[6]);
          }
          break;
        case 3:
          if (v40 == 2)
          {
            v1101 = *v36;
            if (*v36)
            {
              v1102 = 0;
              v1103 = 0;
              v1104 = 0;
              v1105 = *(_QWORD *)(v35 + 152);
              v1106 = v212[19];
              v1107 = v34[19];
              do
              {
                if (v36[1])
                {
                  v1108 = 0;
                  do
                  {
                    if ((int)v306 >= 1)
                    {
                      v1109 = 0;
                      v1110 = v306 + 1;
                      do
                      {
                        *(_BYTE *)(v1107 + v1109) = *(_BYTE *)(v1105 + v1104 + v1109)
                                                  / *((_BYTE *)v1106 + v1103 + v1109);
                        --v1110;
                        ++v1109;
                      }
                      while (v1110 > 1);
                      v35 = *a1;
                      v212 = (int **)*a2;
                      v36 = *(int **)*a1;
                    }
                    v1111 = *(_QWORD **)(v35 + 24);
                    v1112 = v1111[1];
                    v1104 += v1112;
                    v1103 += *((_QWORD *)v212[3] + 1);
                    v1107 += (int)v306;
                    ++v1108;
                    v1113 = v36[1];
                  }
                  while (v1108 < v1113);
                  v1101 = *v36;
                  v213 = *v212;
                }
                else
                {
                  v1113 = 0;
                  v1111 = *(_QWORD **)(v35 + 24);
                  v1112 = v1111[1];
                }
                v1104 = *v1111 + v1104 - v1113 * v1112;
                v1103 = *(_QWORD *)v212[3] + v1103 - *((_QWORD *)v212[3] + 1) * v213[1];
                ++v1102;
              }
              while (v1102 < v1101);
            }
          }
          else if (v40 == 1)
          {
            v307 = *v36;
            if (*v36)
            {
              v308 = 0;
              v309 = 0;
              v310 = 0;
              v311 = *(_QWORD *)(v35 + 152);
              v312 = v212[19];
              v313 = v34[19];
              do
              {
                if ((int)v306 >= 1)
                {
                  v314 = 0;
                  v315 = v306 + 1;
                  do
                  {
                    *(_BYTE *)(v313 + v314) = *(_BYTE *)(v311 + v310 + v314) / *((_BYTE *)v312 + v309 + v314);
                    --v315;
                    ++v314;
                  }
                  while (v315 > 1);
                  v35 = *a1;
                  v212 = (int **)*a2;
                  v307 = **(_DWORD **)*a1;
                }
                v310 += **(_QWORD **)(v35 + 24);
                v309 += *(_QWORD *)v212[3];
                v313 += (int)v306;
                ++v308;
              }
              while (v308 < v307);
            }
          }
          else if (v34[6])
          {
            v1791 = v212[19];
            v1803 = *(_QWORD *)(v35 + 152);
            v1827 = (int)v306;
            v1855 = 0;
            v1780 = v306 + 1;
            v1114 = v34[19];
            do
            {
              v1115 = *(_QWORD *)*a1;
              v1116 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1115) >> 2;
              v1117 = 0;
              v1118 = (v1116 - 1);
              if ((int)v1116 - 1 >= 0)
              {
                v1119 = *(_QWORD *)(*a1 + 24);
                v1120 = v1855;
                do
                {
                  v1121 = ldiv(v1120, *(int *)(v1115 + 4 * v1118));
                  v1120 = v1121.quot;
                  v1117 += *(_QWORD *)(v1119 + 8 * v1118--) * v1121.rem;
                }
                while (v1118 != -1);
              }
              v1122 = *(_QWORD *)*a2;
              v1123 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1122) >> 2;
              v1124 = 0;
              v1125 = (v1123 - 1);
              if ((int)v1123 - 1 >= 0)
              {
                v1126 = *(_QWORD *)(*a2 + 24);
                v1127 = v1855;
                do
                {
                  v1128 = ldiv(v1127, *(int *)(v1122 + 4 * v1125));
                  v1127 = v1128.quot;
                  v1124 += *(_QWORD *)(v1126 + 8 * v1125--) * v1128.rem;
                }
                while (v1125 != -1);
              }
              if ((int)v1865 >= 1)
              {
                v1129 = 0;
                v1130 = v1780;
                do
                {
                  *(_BYTE *)(v1114 + v1129) = *(_BYTE *)(v1803 + (int)v1117 + v1129)
                                            / *((_BYTE *)v1791 + (int)v1124 + v1129);
                  --v1130;
                  ++v1129;
                }
                while (v1130 > 1);
                v34 = *(_QWORD **)a3;
              }
              v1114 += v1827;
              v1855 += v1827;
            }
            while (v1855 < v34[6]);
          }
          break;
        default:
LABEL_336:
          switch(v302)
          {
            case 1uLL:
              if (v34[6])
              {
                v316 = 0;
                v317 = 0;
                v318 = 0;
                v319 = *(_QWORD *)(v35 + 152);
                v320 = v212[19];
                v321 = v34[19];
                do
                {
                  *(_BYTE *)(v321 + v316) = *(_BYTE *)(v319 + v318) / *((_BYTE *)v320 + v317);
                  v318 += **(_QWORD **)(*a1 + 24);
                  v317 += **(_QWORD **)(*a2 + 24);
                  ++v316;
                }
                while (v316 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v498 = *v36;
              if (*v36)
              {
                v499 = 0;
                v500 = 0;
                v501 = 0;
                v502 = 0;
                v503 = *(_QWORD *)(v35 + 152);
                v504 = v212[19];
                v505 = v34[19];
                do
                {
                  if (v36[1])
                  {
                    v506 = 0;
                    do
                    {
                      *(_BYTE *)(v505 + v500 + v506) = *(_BYTE *)(v503 + v502) / *((_BYTE *)v504 + v501);
                      v35 = *a1;
                      v507 = *(_QWORD **)(*a1 + 24);
                      v508 = v507[1];
                      v502 += v508;
                      v212 = (int **)*a2;
                      v509 = *(int **)(*a2 + 24);
                      v510 = *((_QWORD *)v509 + 1);
                      v501 += v510;
                      ++v506;
                      v36 = *(int **)*a1;
                      v511 = v36[1];
                    }
                    while (v506 < v511);
                    v498 = *v36;
                    v213 = *v212;
                    v500 += v506;
                  }
                  else
                  {
                    v511 = 0;
                    v507 = *(_QWORD **)(v35 + 24);
                    v508 = v507[1];
                    v509 = v212[3];
                    v510 = *((_QWORD *)v509 + 1);
                  }
                  v502 = *v507 + v502 - v511 * v508;
                  v501 = *(_QWORD *)v509 + v501 - v510 * v213[1];
                  ++v499;
                }
                while (v499 < v498);
              }
              break;
            case 3uLL:
              v512 = *v36;
              if (*v36)
              {
                v513 = 0;
                v514 = 0;
                v515 = 0;
                v516 = 0;
                v517 = *(_QWORD *)(v35 + 152);
                v518 = v212[19];
                v519 = v34[19];
                do
                {
                  if (v36[1])
                  {
                    v520 = 0;
                    do
                    {
                      if (v36[2])
                      {
                        v521 = 0;
                        do
                        {
                          *(_BYTE *)(v519 + v514 + v521) = *(_BYTE *)(v517 + v516) / *((_BYTE *)v518 + v515);
                          v35 = *a1;
                          v522 = *(_QWORD **)(*a1 + 24);
                          v523 = v522[2];
                          v516 += v523;
                          v212 = (int **)*a2;
                          v524 = *(int **)(*a2 + 24);
                          v525 = *((_QWORD *)v524 + 2);
                          v515 += v525;
                          ++v521;
                          v36 = *(int **)*a1;
                          v526 = v36[2];
                        }
                        while (v521 < v526);
                        v213 = *v212;
                        v514 += v521;
                      }
                      else
                      {
                        v526 = 0;
                        v522 = *(_QWORD **)(v35 + 24);
                        v523 = v522[2];
                        v524 = v212[3];
                        v525 = *((_QWORD *)v524 + 2);
                      }
                      v527 = v522[1];
                      v516 = v527 + v516 - v526 * v523;
                      v515 = *((_QWORD *)v524 + 1) + v515 - v525 * v213[2];
                      ++v520;
                      v528 = v36[1];
                    }
                    while (v520 < v528);
                    v512 = *v36;
                  }
                  else
                  {
                    v528 = 0;
                    v522 = *(_QWORD **)(v35 + 24);
                    v527 = v522[1];
                  }
                  v516 = *v522 + v516 - v528 * v527;
                  v515 = *(_QWORD *)v212[3] + v515 - *((_QWORD *)v212[3] + 1) * v213[1];
                  ++v513;
                }
                while (v513 < v512);
              }
              break;
            case 4uLL:
              v529 = *v36;
              if (*v36)
              {
                v530 = 0;
                v531 = 0;
                v532 = 0;
                v533 = 0;
                v534 = *(_QWORD *)(v35 + 152);
                v535 = v212[19];
                v536 = v34[19];
                do
                {
                  if (v36[1])
                  {
                    v537 = 0;
                    do
                    {
                      if (v36[2])
                      {
                        v538 = 0;
                        do
                        {
                          if (v36[3])
                          {
                            v539 = 0;
                            do
                            {
                              *(_BYTE *)(v536 + v531 + v539) = *(_BYTE *)(v534 + v533) / *((_BYTE *)v535 + v532);
                              v35 = *a1;
                              v540 = *(_QWORD **)(*a1 + 24);
                              v541 = v540[3];
                              v533 += v541;
                              v212 = (int **)*a2;
                              v542 = *(int **)(*a2 + 24);
                              v543 = *((_QWORD *)v542 + 3);
                              v532 += v543;
                              ++v539;
                              v36 = *(int **)*a1;
                              v544 = v36[3];
                            }
                            while (v539 < v544);
                            v213 = *v212;
                            v531 += v539;
                          }
                          else
                          {
                            v544 = 0;
                            v540 = *(_QWORD **)(v35 + 24);
                            v541 = v540[3];
                            v542 = v212[3];
                            v543 = *((_QWORD *)v542 + 3);
                          }
                          v545 = v540[2];
                          v533 = v545 + v533 - v544 * v541;
                          v532 = *((_QWORD *)v542 + 2) + v532 - v543 * v213[3];
                          ++v538;
                          v546 = v36[2];
                        }
                        while (v538 < v546);
                      }
                      else
                      {
                        v546 = 0;
                        v540 = *(_QWORD **)(v35 + 24);
                        v545 = v540[2];
                      }
                      v533 = v540[1] + v533 - v546 * v545;
                      v532 = *((_QWORD *)v212[3] + 1) + v532 - *((_QWORD *)v212[3] + 2) * v213[2];
                      ++v537;
                      v547 = v36[1];
                    }
                    while (v537 < v547);
                    v529 = *v36;
                  }
                  else
                  {
                    v547 = 0;
                  }
                  v533 = **(_QWORD **)(v35 + 24) + v533 - *(_QWORD *)(*(_QWORD *)(v35 + 24) + 8) * v547;
                  v532 = *(_QWORD *)v212[3] + v532 - *((_QWORD *)v212[3] + 1) * v213[1];
                  ++v530;
                }
                while (v530 < v529);
              }
              break;
            default:
              if (v34[6])
              {
                v482 = 0;
                v1850 = v212[19];
                v1871 = *(_QWORD *)(v35 + 152);
                v483 = v34[19];
                do
                {
                  v484 = *(_QWORD *)*a1;
                  v485 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v484) >> 2;
                  v486 = 0;
                  v487 = (v485 - 1);
                  if ((int)v485 - 1 >= 0)
                  {
                    v488 = *(_QWORD *)(*a1 + 24);
                    v489 = v482;
                    do
                    {
                      v490 = ldiv(v489, *(int *)(v484 + 4 * v487));
                      v489 = v490.quot;
                      v486 += *(_QWORD *)(v488 + 8 * v487--) * v490.rem;
                    }
                    while (v487 != -1);
                  }
                  v491 = *(_QWORD *)*a2;
                  v492 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v491) >> 2;
                  v493 = 0;
                  v494 = (v492 - 1);
                  if ((int)v492 - 1 >= 0)
                  {
                    v495 = *(_QWORD *)(*a2 + 24);
                    v496 = v482;
                    do
                    {
                      v497 = ldiv(v496, *(int *)(v491 + 4 * v494));
                      v496 = v497.quot;
                      v493 += *(_QWORD *)(v495 + 8 * v494--) * v497.rem;
                    }
                    while (v494 != -1);
                  }
                  *(_BYTE *)(v483 + v482++) = *(_BYTE *)(v1871 + (int)v486) / *((_BYTE *)v1850 + (int)v493);
                }
                while (v482 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v9)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          v71 = *(_DWORD *)(*a2 + 160);
          if (v71 >= 1)
          {
            v72 = **(_DWORD **)(*a1 + 152);
            v73 = *(int **)(*(_QWORD *)a3 + 152);
            v74 = *(unsigned int **)(*a2 + 152);
            v75 = v71 + 1;
            do
            {
              v76 = *v74++;
              *v73++ = v72 / v76;
              --v75;
            }
            while (v75 > 1);
          }
          return;
        case 2:
          v77 = *(_DWORD *)(*a1 + 160);
          if (v77 >= 1)
          {
            v78 = **(_DWORD **)(*a2 + 152);
            v79 = *(int **)(*(_QWORD *)a3 + 152);
            v80 = *(unsigned int **)(*a1 + 152);
            v81 = v77 + 1;
            do
            {
              v82 = *v80++;
              *v79++ = v82 / v78;
              --v81;
            }
            while (v81 > 1);
          }
          return;
        case 3:
          v83 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v83 >= 1)
          {
            v84 = *(int **)(*(_QWORD *)a3 + 152);
            v85 = *(unsigned int **)(*a2 + 152);
            v86 = *(int **)(*a1 + 152);
            v87 = v83 + 1;
            do
            {
              v89 = *v86++;
              v88 = v89;
              v90 = *v85++;
              *v84++ = v88 / v90;
              --v87;
            }
            while (v87 > 1);
          }
          return;
        default:
          v62 = *(_QWORD **)a3;
          v63 = (_QWORD *)*a1;
          v64 = *(int **)*a1;
          v65 = (v63[1] - (_QWORD)v64) >> 2;
          v66 = (v65 - 1);
          if ((int)v66 >= -1)
            v67 = -1;
          else
            v67 = v65 - 1;
          v68 = v67 + 1;
          v69 = v65 + 1;
          break;
      }
      while (1)
      {
        v70 = v69 - 2;
        if (v69 - 2 < 0)
          break;
        --v69;
        if (*(_QWORD *)(v63[3] + 8 * v70) != *(_QWORD *)(v62[3] + 8 * v70))
          goto LABEL_162;
      }
      v69 = v68;
LABEL_162:
      v219 = (_QWORD *)*a2;
      v220 = *(int **)*a2;
      v221 = (v219[1] - (_QWORD)v220) >> 2;
      v222 = (v221 - 1);
      if ((int)v222 >= -1)
        v223 = -1;
      else
        v223 = v221 - 1;
      v224 = v223 + 1;
      v225 = v221 + 1;
      while (1)
      {
        v226 = v225 - 2;
        if (v225 - 2 < 0)
          break;
        --v225;
        if (*(_QWORD *)(v219[3] + 8 * v226) != *(_QWORD *)(v62[3] + 8 * v226))
          goto LABEL_211;
      }
      v225 = v224;
LABEL_211:
      v262 = v65 + 1;
      while (1)
      {
        v263 = v262 - 2;
        if (v262 - 2 < 0)
          break;
        --v262;
        if (*(_QWORD *)(v63[3] + 8 * v263))
          goto LABEL_246;
      }
      v262 = v68;
LABEL_246:
      v276 = v221 + 1;
      while (1)
      {
        v277 = v276 - 2;
        if (v276 - 2 < 0)
          break;
        --v276;
        if (*(_QWORD *)(v219[3] + 8 * v277))
          goto LABEL_342;
      }
      v276 = v224;
LABEL_342:
      v322 = (uint64_t)(v62[1] - *v62) >> 2;
      if (v69 <= v225)
        v323 = v225;
      else
        v323 = v69;
      if (v69 <= v276)
        v69 = v276;
      if (v262 > v225)
        v225 = v262;
      if (v322 > v225)
      {
        v324 = 1;
      }
      else
      {
        v225 = (uint64_t)(v62[1] - *v62) >> 2;
        v324 = 4;
      }
      if (v322 > v69)
      {
        v325 = 2;
      }
      else
      {
        v69 = v225;
        v325 = v324;
      }
      if (v322 > v323)
      {
        v69 = v323;
        v325 = 3;
      }
      v1846 = v222;
      v1866 = v66;
      if (!v69)
        goto LABEL_372;
      v326 = *(_QWORD *)(v62[3] + 8 * (v69 - 1));
      if (v326 < 0x10)
        goto LABEL_372;
      switch(v325)
      {
        case 1:
          if (v69 == 2)
          {
            v1407 = *v64;
            if (*v64)
            {
              v1408 = 0;
              v1409 = 0;
              v1410 = 0;
              v1411 = v63[19];
              v1412 = v219[19];
              v1413 = v62[19];
              v1414 = (uint64_t *)v63[3];
              v1415 = *v1414;
              v1416 = v1414[1];
              v1417 = (uint64_t *)v219[3];
              v1418 = *v1417;
              v1419 = v1417[1];
              v1420 = v64[1];
              v1421 = v1420;
              do
              {
                if (v1421)
                {
                  v1422 = 0;
                  v1423 = v1412 + 4 * v1409;
                  do
                  {
                    if ((int)v326 >= 1)
                    {
                      v1424 = 0;
                      v1425 = *(_DWORD *)(v1411 + 4 * v1410);
                      v1426 = v326 + 1;
                      do
                      {
                        *(_DWORD *)(v1413 + v1424) = v1425 / *(_DWORD *)(v1423 + v1424);
                        --v1426;
                        v1424 += 4;
                      }
                      while (v1426 > 1);
                      v1420 = v64[1];
                    }
                    v1410 += v1416;
                    v1409 += v1419;
                    v1413 += 4 * (int)v326;
                    ++v1422;
                    v1423 += 4 * v1419;
                  }
                  while (v1422 < v1420);
                  v1427 = v1420;
                  v1407 = *v64;
                  v1421 = v1420;
                }
                else
                {
                  v1427 = 0;
                }
                v1410 = v1410 + v1415 - v1427 * v1416;
                v1409 = v1409 + v1418 - v1419 * v220[1];
                ++v1408;
              }
              while (v1408 < v1407);
            }
          }
          else if (v69 == 1)
          {
            v968 = *v64;
            if (*v64)
            {
              v969 = 0;
              v970 = 0;
              v971 = v63[19];
              v972 = v219[19];
              v973 = v62[19];
              v974 = *(_QWORD *)v63[3];
              v975 = 4 * *(_QWORD *)v219[3];
              do
              {
                if ((int)v326 >= 1)
                {
                  v976 = 0;
                  v977 = *(_DWORD *)(v971 + 4 * v970);
                  v978 = v326 + 1;
                  do
                  {
                    *(_DWORD *)(v973 + v976) = v977 / *(_DWORD *)(v972 + v976);
                    --v978;
                    v976 += 4;
                  }
                  while (v978 > 1);
                  v968 = *v64;
                }
                v970 += v974;
                ++v969;
                v973 += 4 * (int)v326;
                v972 += v975;
              }
              while (v969 < v968);
            }
          }
          else
          {
            v1811 = v62[6];
            if (v1811)
            {
              v1836 = 0;
              v1759 = v219[19];
              v1771 = v63[19];
              v1428 = v62[19];
              do
              {
                v1429 = 0;
                if ((v66 & 0x80000000) == 0)
                {
                  v1430 = v63[3];
                  v1431 = v66;
                  v1432 = v1836;
                  do
                  {
                    v1433 = ldiv(v1432, v64[v1431]);
                    v1432 = v1433.quot;
                    v1429 += *(_QWORD *)(v1430 + 8 * v1431--) * v1433.rem;
                  }
                  while (v1431 != -1);
                }
                v1434 = v1846;
                if ((v1846 & 0x80000000) != 0)
                {
                  LODWORD(v1435) = 0;
                }
                else
                {
                  v1435 = 0;
                  v1436 = v219[3];
                  v1437 = v1836;
                  do
                  {
                    v1438 = ldiv(v1437, v220[v1434]);
                    v1437 = v1438.quot;
                    v1435 += *(_QWORD *)(v1436 + 8 * v1434--) * v1438.rem;
                  }
                  while (v1434 != -1);
                }
                v66 = v1866;
                if ((int)v326 >= 1)
                {
                  v1439 = 0;
                  v1440 = *(_DWORD *)(v1771 + 4 * (int)v1429);
                  v1441 = v326 + 1;
                  do
                  {
                    *(_DWORD *)(v1428 + v1439) = v1440 / *(_DWORD *)(v1759 + 4 * (int)v1435 + v1439);
                    --v1441;
                    v1439 += 4;
                  }
                  while (v1441 > 1);
                }
                v1428 += 4 * (int)v326;
                v1836 += (int)v326;
              }
              while (v1836 < v1811);
            }
          }
          break;
        case 2:
          if (v69 == 2)
          {
            v1442 = *v64;
            if (*v64)
            {
              v1443 = 0;
              v1444 = 0;
              v1445 = 0;
              v1446 = v63[19];
              v1447 = v219[19];
              v1448 = v62[19];
              v1449 = (uint64_t *)v63[3];
              v1450 = *v1449;
              v1451 = v1449[1];
              v1452 = (uint64_t *)v219[3];
              v1453 = *v1452;
              v1454 = v1452[1];
              v1455 = v64[1];
              v1456 = v1455;
              do
              {
                if (v1456)
                {
                  v1457 = 0;
                  v1458 = v1446 + 4 * v1445;
                  do
                  {
                    if ((int)v326 >= 1)
                    {
                      v1459 = 0;
                      v1460 = *(_DWORD *)(v1447 + 4 * v1444);
                      v1461 = v326 + 1;
                      do
                      {
                        *(_DWORD *)(v1448 + v1459) = *(_DWORD *)(v1458 + v1459) / v1460;
                        --v1461;
                        v1459 += 4;
                      }
                      while (v1461 > 1);
                      v1455 = v64[1];
                    }
                    v1445 += v1451;
                    v1444 += v1454;
                    v1448 += 4 * (int)v326;
                    ++v1457;
                    v1458 += 4 * v1451;
                  }
                  while (v1457 < v1455);
                  v1462 = v1455;
                  v1442 = *v64;
                  v1456 = v1455;
                }
                else
                {
                  v1462 = 0;
                }
                v1445 = v1445 + v1450 - v1462 * v1451;
                v1444 = v1444 + v1453 - v1454 * v220[1];
                ++v1443;
              }
              while (v1443 < v1442);
            }
          }
          else if (v69 == 1)
          {
            v979 = *v64;
            if (*v64)
            {
              v980 = 0;
              v981 = 0;
              v982 = v63[19];
              v983 = v219[19];
              v984 = v62[19];
              v985 = *(_QWORD *)v219[3];
              v986 = 4 * *(_QWORD *)v63[3];
              do
              {
                if ((int)v326 >= 1)
                {
                  v987 = 0;
                  v988 = *(_DWORD *)(v983 + 4 * v981);
                  v989 = v326 + 1;
                  do
                  {
                    *(_DWORD *)(v984 + v987) = *(_DWORD *)(v982 + v987) / v988;
                    --v989;
                    v987 += 4;
                  }
                  while (v989 > 1);
                  v979 = *v64;
                }
                v981 += v985;
                ++v980;
                v984 += 4 * (int)v326;
                v982 += v986;
              }
              while (v980 < v979);
            }
          }
          else
          {
            v1812 = v62[6];
            if (v1812)
            {
              v1837 = 0;
              v1760 = v219[19];
              v1772 = v63[19];
              v1463 = v62[19];
              do
              {
                v1464 = 0;
                if ((v66 & 0x80000000) == 0)
                {
                  v1465 = v63[3];
                  v1466 = v66;
                  v1467 = v1837;
                  do
                  {
                    v1468 = ldiv(v1467, v64[v1466]);
                    v1467 = v1468.quot;
                    v1464 += *(_QWORD *)(v1465 + 8 * v1466--) * v1468.rem;
                  }
                  while (v1466 != -1);
                }
                v1469 = v1846;
                if ((v1846 & 0x80000000) != 0)
                {
                  LODWORD(v1470) = 0;
                }
                else
                {
                  v1470 = 0;
                  v1471 = v219[3];
                  v1472 = v1837;
                  do
                  {
                    v1473 = ldiv(v1472, v220[v1469]);
                    v1472 = v1473.quot;
                    v1470 += *(_QWORD *)(v1471 + 8 * v1469--) * v1473.rem;
                  }
                  while (v1469 != -1);
                }
                v66 = v1866;
                if ((int)v326 >= 1)
                {
                  v1474 = 0;
                  v1475 = *(_DWORD *)(v1760 + 4 * (int)v1470);
                  v1476 = v326 + 1;
                  do
                  {
                    *(_DWORD *)(v1463 + v1474) = *(_DWORD *)(v1772 + 4 * (int)v1464 + v1474) / v1475;
                    --v1476;
                    v1474 += 4;
                  }
                  while (v1476 > 1);
                }
                v1463 += 4 * (int)v326;
                v1837 += (int)v326;
              }
              while (v1837 < v1812);
            }
          }
          break;
        case 3:
          if (v69 == 2)
          {
            v1131 = *v64;
            if (*v64)
            {
              v1132 = 0;
              v1133 = 0;
              v1134 = 0;
              v1135 = v63[19];
              v1136 = v219[19];
              v1137 = v62[19];
              v1138 = (uint64_t *)v63[3];
              v1139 = *v1138;
              v1140 = v1138[1];
              v1141 = (uint64_t *)v219[3];
              v1142 = *v1141;
              v1143 = v1141[1];
              v1144 = v64[1];
              v1145 = v1144;
              do
              {
                if (v1145)
                {
                  v1146 = 0;
                  v1147 = v1136 + 4 * v1133;
                  v1148 = v1135 + 4 * v1134;
                  do
                  {
                    if ((int)v326 >= 1)
                    {
                      v1149 = 0;
                      v1150 = v326 + 1;
                      do
                      {
                        *(_DWORD *)(v1137 + v1149) = *(_DWORD *)(v1148 + v1149) / *(_DWORD *)(v1147 + v1149);
                        --v1150;
                        v1149 += 4;
                      }
                      while (v1150 > 1);
                      v1144 = v64[1];
                    }
                    v1134 += v1140;
                    v1133 += v1143;
                    v1137 += 4 * (int)v326;
                    ++v1146;
                    v1147 += 4 * v1143;
                    v1148 += 4 * v1140;
                  }
                  while (v1146 < v1144);
                  v1151 = v1144;
                  v1131 = *v64;
                  v1145 = v1144;
                }
                else
                {
                  v1151 = 0;
                }
                v1134 = v1134 + v1139 - v1151 * v1140;
                v1133 = v1133 + v1142 - v1143 * v220[1];
                ++v1132;
              }
              while (v1132 < v1131);
            }
          }
          else if (v69 == 1)
          {
            v327 = *v64;
            if (*v64)
            {
              v328 = 0;
              v329 = v63[19];
              v330 = v219[19];
              v331 = v62[19];
              v332 = 4 * *(_QWORD *)v219[3];
              v333 = 4 * *(_QWORD *)v63[3];
              do
              {
                if ((int)v326 >= 1)
                {
                  v334 = 0;
                  v335 = v326 + 1;
                  do
                  {
                    *(_DWORD *)(v331 + v334) = *(_DWORD *)(v329 + v334) / *(_DWORD *)(v330 + v334);
                    --v335;
                    v334 += 4;
                  }
                  while (v335 > 1);
                  v327 = *v64;
                }
                ++v328;
                v331 += 4 * (int)v326;
                v330 += v332;
                v329 += v333;
              }
              while (v328 < v327);
            }
          }
          else
          {
            v1804 = v62[6];
            if (v1804)
            {
              v1828 = 0;
              v1755 = v219[19];
              v1767 = v63[19];
              v1152 = v62[19];
              do
              {
                v1153 = 0;
                if ((v66 & 0x80000000) == 0)
                {
                  v1154 = v63[3];
                  v1155 = v66;
                  v1156 = v1828;
                  do
                  {
                    v1157 = ldiv(v1156, v64[v1155]);
                    v1156 = v1157.quot;
                    v1153 += *(_QWORD *)(v1154 + 8 * v1155--) * v1157.rem;
                  }
                  while (v1155 != -1);
                }
                v1158 = v1846;
                if ((v1846 & 0x80000000) != 0)
                {
                  LODWORD(v1159) = 0;
                }
                else
                {
                  v1159 = 0;
                  v1160 = v219[3];
                  v1161 = v1828;
                  do
                  {
                    v1162 = ldiv(v1161, v220[v1158]);
                    v1161 = v1162.quot;
                    v1159 += *(_QWORD *)(v1160 + 8 * v1158--) * v1162.rem;
                  }
                  while (v1158 != -1);
                }
                v66 = v1866;
                if ((int)v326 >= 1)
                {
                  v1163 = 0;
                  v1164 = v326 + 1;
                  do
                  {
                    *(_DWORD *)(v1152 + v1163) = *(_DWORD *)(v1767 + 4 * (int)v1153 + v1163)
                                               / *(_DWORD *)(v1755 + 4 * (int)v1159 + v1163);
                    --v1164;
                    v1163 += 4;
                  }
                  while (v1164 > 1);
                }
                v1152 += 4 * (int)v326;
                v1828 += (int)v326;
              }
              while (v1828 < v1804);
            }
          }
          break;
        default:
LABEL_372:
          switch(v322)
          {
            case 1uLL:
              v336 = v62[6];
              if (v336)
              {
                v337 = (_DWORD *)v63[19];
                v338 = (_DWORD *)v219[19];
                v339 = (int *)v62[19];
                v340 = 4 * *(_QWORD *)v219[3];
                v341 = 4 * *(_QWORD *)v63[3];
                do
                {
                  *v339++ = *v337 / *v338;
                  v338 = (_DWORD *)((char *)v338 + v340);
                  v337 = (_DWORD *)((char *)v337 + v341);
                  --v336;
                }
                while (v336);
              }
              break;
            case 2uLL:
              v560 = *v64;
              if (*v64)
              {
                v561 = 0;
                v562 = 0;
                v563 = 0;
                v564 = 0;
                v565 = v63[19];
                v566 = v219[19];
                v567 = v62[19];
                v568 = (uint64_t *)v63[3];
                v569 = *v568;
                v570 = v568[1];
                v571 = (uint64_t *)v219[3];
                v573 = *v571;
                v572 = v571[1];
                v574 = v64[1];
                do
                {
                  if (v574)
                  {
                    for (i = 0; i < v574; ++i)
                    {
                      *(_DWORD *)(v567 + 4 * v562 + 4 * i) = *(_DWORD *)(v565 + 4 * v564) / *(_DWORD *)(v566 + 4 * v563);
                      v564 += v570;
                      v563 += v572;
                      v574 = v64[1];
                    }
                    v576 = v574;
                    v560 = *v64;
                    v562 += i;
                  }
                  else
                  {
                    v576 = 0;
                  }
                  v564 = v564 + v569 - v576 * v570;
                  v563 = v563 + v573 - v572 * v220[1];
                  ++v561;
                }
                while (v561 < v560);
              }
              break;
            case 3uLL:
              v577 = *v64;
              if (*v64)
              {
                v578 = 0;
                v579 = 0;
                v580 = 0;
                v581 = 0;
                v582 = v63[19];
                v583 = v219[19];
                v584 = v62[19];
                v585 = (uint64_t *)v63[3];
                v586 = *v585;
                v587 = v585[1];
                v588 = (uint64_t *)v219[3];
                v589 = *v588;
                v590 = v588[1];
                v591 = v64[1];
                v592 = v591;
                do
                {
                  if (v592)
                  {
                    v593 = 0;
                    v594 = v585[2];
                    v595 = v588[2];
                    v596 = v64[2];
                    do
                    {
                      if (v596)
                      {
                        for (j = 0; j < v596; ++j)
                        {
                          *(_DWORD *)(v584 + 4 * v579 + 4 * j) = *(_DWORD *)(v582 + 4 * v581)
                                                               / *(_DWORD *)(v583 + 4 * v580);
                          v581 += v594;
                          v580 += v595;
                          v596 = v64[2];
                        }
                        v598 = v596;
                        v591 = v64[1];
                        v579 += j;
                      }
                      else
                      {
                        v598 = 0;
                      }
                      v581 = v581 + v587 - v598 * v594;
                      v580 = v580 + v590 - v595 * v220[2];
                      ++v593;
                    }
                    while (v593 < v591);
                    v599 = v591;
                    v577 = *v64;
                    v592 = v591;
                  }
                  else
                  {
                    v599 = 0;
                  }
                  v581 = v581 + v586 - v599 * v587;
                  v580 = v580 + v589 - v590 * v220[1];
                  ++v578;
                }
                while (v578 < v577);
              }
              break;
            case 4uLL:
              v600 = *v64;
              if (*v64)
              {
                v601 = 0;
                v602 = 0;
                v603 = 0;
                v604 = 0;
                v605 = v63[19];
                v606 = v219[19];
                v607 = v62[19];
                v608 = (uint64_t *)v63[3];
                v609 = *v608;
                v610 = v608[1];
                v611 = (uint64_t *)v219[3];
                v612 = *v611;
                v613 = v611[1];
                v614 = v64[1];
                v615 = v614;
                do
                {
                  if (v615)
                  {
                    v616 = 0;
                    v617 = v608[2];
                    v618 = v611[2];
                    v619 = v64[2];
                    v620 = v619;
                    do
                    {
                      if (v620)
                      {
                        v621 = 0;
                        v622 = v608[3];
                        v623 = v611[3];
                        v624 = v64[3];
                        do
                        {
                          if (v624)
                          {
                            for (k = 0; k < v624; ++k)
                            {
                              *(_DWORD *)(v607 + 4 * v602 + 4 * k) = *(_DWORD *)(v605 + 4 * v604)
                                                                   / *(_DWORD *)(v606 + 4 * v603);
                              v604 += v622;
                              v603 += v623;
                              v624 = v64[3];
                            }
                            v626 = v624;
                            v619 = v64[2];
                            v602 += k;
                          }
                          else
                          {
                            v626 = 0;
                          }
                          v604 = v604 + v617 - v626 * v622;
                          v603 = v603 + v618 - v623 * v220[3];
                          ++v621;
                        }
                        while (v621 < v619);
                        v627 = v619;
                        v614 = v64[1];
                        v620 = v619;
                      }
                      else
                      {
                        v627 = 0;
                      }
                      v604 = v604 + v610 - v627 * v617;
                      v603 = v603 + v613 - v618 * v220[2];
                      ++v616;
                    }
                    while (v616 < v614);
                    v628 = v614;
                    v600 = *v64;
                    v615 = v614;
                  }
                  else
                  {
                    v628 = 0;
                  }
                  v604 = v604 + v609 - v628 * v610;
                  v603 = v603 + v612 - v613 * v220[1];
                  ++v601;
                }
                while (v601 < v600);
              }
              break;
            default:
              v548 = v62[6];
              if (v548)
              {
                v549 = 0;
                v1797 = v219[19];
                v1821 = v63[19];
                v1786 = v62[19];
                do
                {
                  v550 = 0;
                  if ((v66 & 0x80000000) == 0)
                  {
                    v551 = v63[3];
                    v552 = v66;
                    v553 = v549;
                    do
                    {
                      v554 = ldiv(v553, v64[v552]);
                      v553 = v554.quot;
                      v550 += *(_QWORD *)(v551 + 8 * v552--) * v554.rem;
                    }
                    while (v552 != -1);
                  }
                  v555 = v1846;
                  if ((v1846 & 0x80000000) != 0)
                  {
                    LODWORD(v556) = 0;
                  }
                  else
                  {
                    v556 = 0;
                    v557 = v219[3];
                    v558 = v549;
                    do
                    {
                      v559 = ldiv(v558, v220[v555]);
                      v558 = v559.quot;
                      v556 += *(_QWORD *)(v557 + 8 * v555--) * v559.rem;
                    }
                    while (v555 != -1);
                  }
                  *(_DWORD *)(v1786 + 4 * v549++) = *(_DWORD *)(v1821 + 4 * (int)v550)
                                                  / *(_DWORD *)(v1797 + 4 * (int)v556);
                  v66 = v1866;
                }
                while (v549 != v548);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v11)
      {
        case 0:
          v7 = **(char **)(*a1 + 152) / **(char **)(*a2 + 152);
LABEL_10:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          v99 = *(_DWORD *)(*a2 + 160);
          if (v99 >= 1)
          {
            v100 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v101 = *(char **)(*a2 + 152);
            v102 = **(char **)(*a1 + 152);
            v103 = v99 + 1;
            do
            {
              v104 = *v101++;
              *v100++ = v102 / v104;
              --v103;
            }
            while (v103 > 1);
          }
          return;
        case 2:
          v105 = *(_DWORD *)(*a1 + 160);
          if (v105 >= 1)
          {
            v106 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v107 = *(char **)(*a1 + 152);
            v108 = **(char **)(*a2 + 152);
            v109 = v105 + 1;
            do
            {
              v110 = *v107++;
              *v106++ = v110 / v108;
              --v109;
            }
            while (v109 > 1);
          }
          return;
        case 3:
          v111 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v111 >= 1)
          {
            v112 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v113 = *(char **)(*a2 + 152);
            v114 = *(char **)(*a1 + 152);
            v115 = v111 + 1;
            do
            {
              v117 = *v114++;
              v116 = v117;
              v118 = *v113++;
              *v112++ = v116 / v118;
              --v115;
            }
            while (v115 > 1);
          }
          return;
        default:
          v91 = *(_QWORD **)a3;
          v92 = *a1;
          v93 = *(int **)*a1;
          v94 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v93) >> 2;
          v95 = v94 - 1;
          if ((int)v94 - 1 >= -1)
            v95 = -1;
          v96 = v95 + 1;
          v97 = v94 + 1;
          while (1)
          {
            v98 = v97 - 2;
            if (v97 - 2 < 0)
              break;
            --v97;
            if (*(_QWORD *)(*(_QWORD *)(v92 + 24) + 8 * v98) != *(_QWORD *)(v91[3] + 8 * v98))
              goto LABEL_170;
          }
          v97 = v96;
LABEL_170:
          v227 = (int **)*a2;
          v228 = *(int **)*a2;
          v229 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v228) >> 2;
          v230 = v229 - 1;
          if ((int)v229 - 1 >= -1)
            v230 = -1;
          v231 = v230 + 1;
          v232 = v229 + 1;
          while (1)
          {
            v233 = v232 - 2;
            if (v232 - 2 < 0)
              break;
            --v232;
            if (*(_QWORD *)&v227[3][2 * v233] != *(_QWORD *)(v91[3] + 8 * v233))
              goto LABEL_216;
          }
          v232 = v231;
LABEL_216:
          v264 = v94 + 1;
          while (1)
          {
            v265 = v264 - 2;
            if (v264 - 2 < 0)
              break;
            --v264;
            if (*(_QWORD *)(*(_QWORD *)(v92 + 24) + 8 * v265))
              goto LABEL_251;
          }
          v264 = v96;
LABEL_251:
          v278 = v229 + 1;
          while (1)
          {
            v279 = v278 - 2;
            if (v278 - 2 < 0)
              break;
            --v278;
            if (*(_QWORD *)&v227[3][2 * v279])
              goto LABEL_378;
          }
          v278 = v231;
LABEL_378:
          v342 = (uint64_t)(v91[1] - *v91) >> 2;
          if (v97 <= v232)
            v343 = v232;
          else
            v343 = v97;
          if (v97 <= v278)
            v97 = v278;
          if (v264 > v232)
            v232 = v264;
          if (v342 > v232)
          {
            v344 = 1;
          }
          else
          {
            v232 = (uint64_t)(v91[1] - *v91) >> 2;
            v344 = 4;
          }
          if (v342 > v97)
          {
            v345 = 2;
          }
          else
          {
            v97 = v232;
            v345 = v344;
          }
          if (v342 > v343)
          {
            v97 = v343;
            v345 = 3;
          }
          if (!v97)
            goto LABEL_408;
          v346 = *(_QWORD *)(v91[3] + 8 * (v97 - 1));
          if (v346 < 0x10)
            goto LABEL_408;
          v1867 = *(_QWORD *)(v91[3] + 8 * (v97 - 1));
          switch(v345)
          {
            case 1:
              if (v97 == 2)
              {
                v1477 = *v93;
                if (*v93)
                {
                  v1478 = 0;
                  v1479 = 0;
                  v1480 = 0;
                  v1481 = *(_QWORD *)(v92 + 152);
                  v1482 = v227[19];
                  v1483 = v91[19];
                  do
                  {
                    if (v93[1])
                    {
                      v1484 = 0;
                      do
                      {
                        if ((int)v346 >= 1)
                        {
                          v1485 = 0;
                          v1486 = *(char *)(v1481 + v1480);
                          v1487 = v346 + 1;
                          do
                          {
                            *(_BYTE *)(v1483 + v1485) = v1486 / *((char *)v1482 + v1479 + v1485);
                            --v1487;
                            ++v1485;
                          }
                          while (v1487 > 1);
                          v92 = *a1;
                          v227 = (int **)*a2;
                          v93 = *(int **)*a1;
                        }
                        v1488 = *(_QWORD **)(v92 + 24);
                        v1489 = v1488[1];
                        v1480 += v1489;
                        v1479 += *((_QWORD *)v227[3] + 1);
                        v1483 += (int)v346;
                        ++v1484;
                        v1490 = v93[1];
                      }
                      while (v1484 < v1490);
                      v1477 = *v93;
                      v228 = *v227;
                    }
                    else
                    {
                      v1490 = 0;
                      v1488 = *(_QWORD **)(v92 + 24);
                      v1489 = v1488[1];
                    }
                    v1480 = *v1488 + v1480 - v1490 * v1489;
                    v1479 = *(_QWORD *)v227[3] + v1479 - *((_QWORD *)v227[3] + 1) * v228[1];
                    ++v1478;
                  }
                  while (v1478 < v1477);
                }
              }
              else if (v97 == 1)
              {
                v990 = *v93;
                if (*v93)
                {
                  v991 = 0;
                  v992 = 0;
                  v993 = 0;
                  v994 = *(_QWORD *)(v92 + 152);
                  v995 = v227[19];
                  v996 = v91[19];
                  do
                  {
                    if ((int)v346 >= 1)
                    {
                      v997 = 0;
                      v998 = *(char *)(v994 + v993);
                      v999 = v346 + 1;
                      do
                      {
                        *(_BYTE *)(v996 + v997) = v998 / *((char *)v995 + v992 + v997);
                        --v999;
                        ++v997;
                      }
                      while (v999 > 1);
                      v92 = *a1;
                      v227 = (int **)*a2;
                      v990 = **(_DWORD **)*a1;
                    }
                    v993 += **(_QWORD **)(v92 + 24);
                    v992 += *(_QWORD *)v227[3];
                    v996 += (int)v346;
                    ++v991;
                  }
                  while (v991 < v990);
                }
              }
              else if (v91[6])
              {
                v1795 = v227[19];
                v1813 = *(_QWORD *)(v92 + 152);
                v1838 = (int)v346;
                v1862 = 0;
                v1784 = v346 + 1;
                v1491 = v91[19];
                do
                {
                  v1492 = *(_QWORD *)*a1;
                  v1493 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1492) >> 2;
                  v1494 = 0;
                  v1495 = (v1493 - 1);
                  if ((int)v1493 - 1 >= 0)
                  {
                    v1496 = *(_QWORD *)(*a1 + 24);
                    v1497 = v1862;
                    do
                    {
                      v1498 = ldiv(v1497, *(int *)(v1492 + 4 * v1495));
                      v1497 = v1498.quot;
                      v1494 += *(_QWORD *)(v1496 + 8 * v1495--) * v1498.rem;
                    }
                    while (v1495 != -1);
                  }
                  v1499 = *(_QWORD *)*a2;
                  v1500 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1499) >> 2;
                  v1501 = 0;
                  v1502 = (v1500 - 1);
                  if ((int)v1500 - 1 >= 0)
                  {
                    v1503 = *(_QWORD *)(*a2 + 24);
                    v1504 = v1862;
                    do
                    {
                      v1505 = ldiv(v1504, *(int *)(v1499 + 4 * v1502));
                      v1504 = v1505.quot;
                      v1501 += *(_QWORD *)(v1503 + 8 * v1502--) * v1505.rem;
                    }
                    while (v1502 != -1);
                  }
                  if ((int)v1867 >= 1)
                  {
                    v1506 = 0;
                    v1507 = *(char *)(v1813 + (int)v1494);
                    v1508 = v1784;
                    do
                    {
                      *(_BYTE *)(v1491 + v1506) = v1507 / *((char *)v1795 + (int)v1501 + v1506);
                      --v1508;
                      ++v1506;
                    }
                    while (v1508 > 1);
                    v91 = *(_QWORD **)a3;
                  }
                  v1491 += v1838;
                  v1862 += v1838;
                }
                while (v1862 < v91[6]);
              }
              break;
            case 2:
              if (v97 == 2)
              {
                v1509 = *v93;
                if (*v93)
                {
                  v1510 = 0;
                  v1511 = 0;
                  v1512 = 0;
                  v1513 = *(_QWORD *)(v92 + 152);
                  v1514 = v227[19];
                  v1515 = v91[19];
                  do
                  {
                    if (v93[1])
                    {
                      v1516 = 0;
                      do
                      {
                        if ((int)v346 >= 1)
                        {
                          v1517 = 0;
                          v1518 = *((char *)v1514 + v1511);
                          v1519 = v346 + 1;
                          do
                          {
                            *(_BYTE *)(v1515 + v1517) = *(char *)(v1513 + v1512 + v1517) / v1518;
                            --v1519;
                            ++v1517;
                          }
                          while (v1519 > 1);
                          v92 = *a1;
                          v227 = (int **)*a2;
                          v93 = *(int **)*a1;
                        }
                        v1520 = *(_QWORD **)(v92 + 24);
                        v1521 = v1520[1];
                        v1512 += v1521;
                        v1511 += *((_QWORD *)v227[3] + 1);
                        v1515 += (int)v346;
                        ++v1516;
                        v1522 = v93[1];
                      }
                      while (v1516 < v1522);
                      v1509 = *v93;
                      v228 = *v227;
                    }
                    else
                    {
                      v1522 = 0;
                      v1520 = *(_QWORD **)(v92 + 24);
                      v1521 = v1520[1];
                    }
                    v1512 = *v1520 + v1512 - v1522 * v1521;
                    v1511 = *(_QWORD *)v227[3] + v1511 - *((_QWORD *)v227[3] + 1) * v228[1];
                    ++v1510;
                  }
                  while (v1510 < v1509);
                }
              }
              else if (v97 == 1)
              {
                v1000 = *v93;
                if (*v93)
                {
                  v1001 = 0;
                  v1002 = 0;
                  v1003 = 0;
                  v1004 = *(_QWORD *)(v92 + 152);
                  v1005 = v227[19];
                  v1006 = v91[19];
                  do
                  {
                    if ((int)v346 >= 1)
                    {
                      v1007 = 0;
                      v1008 = *((char *)v1005 + v1002);
                      v1009 = v346 + 1;
                      do
                      {
                        *(_BYTE *)(v1006 + v1007) = *(char *)(v1004 + v1003 + v1007) / v1008;
                        --v1009;
                        ++v1007;
                      }
                      while (v1009 > 1);
                      v92 = *a1;
                      v227 = (int **)*a2;
                      v1000 = **(_DWORD **)*a1;
                    }
                    v1003 += **(_QWORD **)(v92 + 24);
                    v1002 += *(_QWORD *)v227[3];
                    v1006 += (int)v346;
                    ++v1001;
                  }
                  while (v1001 < v1000);
                }
              }
              else if (v91[6])
              {
                v1796 = v227[19];
                v1814 = *(_QWORD *)(v92 + 152);
                v1839 = (int)v346;
                v1863 = 0;
                v1785 = v346 + 1;
                v1523 = v91[19];
                do
                {
                  v1524 = *(_QWORD *)*a1;
                  v1525 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1524) >> 2;
                  v1526 = 0;
                  v1527 = (v1525 - 1);
                  if ((int)v1525 - 1 >= 0)
                  {
                    v1528 = *(_QWORD *)(*a1 + 24);
                    v1529 = v1863;
                    do
                    {
                      v1530 = ldiv(v1529, *(int *)(v1524 + 4 * v1527));
                      v1529 = v1530.quot;
                      v1526 += *(_QWORD *)(v1528 + 8 * v1527--) * v1530.rem;
                    }
                    while (v1527 != -1);
                  }
                  v1531 = *(_QWORD *)*a2;
                  v1532 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1531) >> 2;
                  v1533 = 0;
                  v1534 = (v1532 - 1);
                  if ((int)v1532 - 1 >= 0)
                  {
                    v1535 = *(_QWORD *)(*a2 + 24);
                    v1536 = v1863;
                    do
                    {
                      v1537 = ldiv(v1536, *(int *)(v1531 + 4 * v1534));
                      v1536 = v1537.quot;
                      v1533 += *(_QWORD *)(v1535 + 8 * v1534--) * v1537.rem;
                    }
                    while (v1534 != -1);
                  }
                  if ((int)v1867 >= 1)
                  {
                    v1538 = 0;
                    v1539 = *((char *)v1796 + (int)v1533);
                    v1540 = v1785;
                    do
                    {
                      *(_BYTE *)(v1523 + v1538) = *(char *)(v1814 + (int)v1526 + v1538) / v1539;
                      --v1540;
                      ++v1538;
                    }
                    while (v1540 > 1);
                    v91 = *(_QWORD **)a3;
                  }
                  v1523 += v1839;
                  v1863 += v1839;
                }
                while (v1863 < v91[6]);
              }
              break;
            case 3:
              if (v97 == 2)
              {
                v1165 = *v93;
                if (*v93)
                {
                  v1166 = 0;
                  v1167 = 0;
                  v1168 = 0;
                  v1169 = *(_QWORD *)(v92 + 152);
                  v1170 = v227[19];
                  v1171 = v91[19];
                  do
                  {
                    if (v93[1])
                    {
                      v1172 = 0;
                      do
                      {
                        if ((int)v346 >= 1)
                        {
                          v1173 = 0;
                          v1174 = v346 + 1;
                          do
                          {
                            *(_BYTE *)(v1171 + v1173) = *(char *)(v1169 + v1168 + v1173)
                                                      / *((char *)v1170 + v1167 + v1173);
                            --v1174;
                            ++v1173;
                          }
                          while (v1174 > 1);
                          v92 = *a1;
                          v227 = (int **)*a2;
                          v93 = *(int **)*a1;
                        }
                        v1175 = *(_QWORD **)(v92 + 24);
                        v1176 = v1175[1];
                        v1168 += v1176;
                        v1167 += *((_QWORD *)v227[3] + 1);
                        v1171 += (int)v346;
                        ++v1172;
                        v1177 = v93[1];
                      }
                      while (v1172 < v1177);
                      v1165 = *v93;
                      v228 = *v227;
                    }
                    else
                    {
                      v1177 = 0;
                      v1175 = *(_QWORD **)(v92 + 24);
                      v1176 = v1175[1];
                    }
                    v1168 = *v1175 + v1168 - v1177 * v1176;
                    v1167 = *(_QWORD *)v227[3] + v1167 - *((_QWORD *)v227[3] + 1) * v228[1];
                    ++v1166;
                  }
                  while (v1166 < v1165);
                }
              }
              else if (v97 == 1)
              {
                v347 = *v93;
                if (*v93)
                {
                  v348 = 0;
                  v349 = 0;
                  v350 = 0;
                  v351 = *(_QWORD *)(v92 + 152);
                  v352 = v227[19];
                  v353 = v91[19];
                  do
                  {
                    if ((int)v346 >= 1)
                    {
                      v354 = 0;
                      v355 = v346 + 1;
                      do
                      {
                        *(_BYTE *)(v353 + v354) = *(char *)(v351 + v350 + v354) / *((char *)v352 + v349 + v354);
                        --v355;
                        ++v354;
                      }
                      while (v355 > 1);
                      v92 = *a1;
                      v227 = (int **)*a2;
                      v347 = **(_DWORD **)*a1;
                    }
                    v350 += **(_QWORD **)(v92 + 24);
                    v349 += *(_QWORD *)v227[3];
                    v353 += (int)v346;
                    ++v348;
                  }
                  while (v348 < v347);
                }
              }
              else if (v91[6])
              {
                v1792 = v227[19];
                v1805 = *(_QWORD *)(v92 + 152);
                v1829 = (int)v346;
                v1856 = 0;
                v1781 = v346 + 1;
                v1178 = v91[19];
                do
                {
                  v1179 = *(_QWORD *)*a1;
                  v1180 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1179) >> 2;
                  v1181 = 0;
                  v1182 = (v1180 - 1);
                  if ((int)v1180 - 1 >= 0)
                  {
                    v1183 = *(_QWORD *)(*a1 + 24);
                    v1184 = v1856;
                    do
                    {
                      v1185 = ldiv(v1184, *(int *)(v1179 + 4 * v1182));
                      v1184 = v1185.quot;
                      v1181 += *(_QWORD *)(v1183 + 8 * v1182--) * v1185.rem;
                    }
                    while (v1182 != -1);
                  }
                  v1186 = *(_QWORD *)*a2;
                  v1187 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1186) >> 2;
                  v1188 = 0;
                  v1189 = (v1187 - 1);
                  if ((int)v1187 - 1 >= 0)
                  {
                    v1190 = *(_QWORD *)(*a2 + 24);
                    v1191 = v1856;
                    do
                    {
                      v1192 = ldiv(v1191, *(int *)(v1186 + 4 * v1189));
                      v1191 = v1192.quot;
                      v1188 += *(_QWORD *)(v1190 + 8 * v1189--) * v1192.rem;
                    }
                    while (v1189 != -1);
                  }
                  if ((int)v1867 >= 1)
                  {
                    v1193 = 0;
                    v1194 = v1781;
                    do
                    {
                      *(_BYTE *)(v1178 + v1193) = *(char *)(v1805 + (int)v1181 + v1193)
                                                / *((char *)v1792 + (int)v1188 + v1193);
                      --v1194;
                      ++v1193;
                    }
                    while (v1194 > 1);
                    v91 = *(_QWORD **)a3;
                  }
                  v1178 += v1829;
                  v1856 += v1829;
                }
                while (v1856 < v91[6]);
              }
              break;
            default:
LABEL_408:
              switch(v342)
              {
                case 1uLL:
                  if (v91[6])
                  {
                    v356 = 0;
                    v357 = 0;
                    v358 = 0;
                    v359 = *(_QWORD *)(v92 + 152);
                    v360 = v227[19];
                    v361 = v91[19];
                    do
                    {
                      *(_BYTE *)(v361 + v356) = *(char *)(v359 + v358) / *((char *)v360 + v357);
                      v358 += **(_QWORD **)(*a1 + 24);
                      v357 += **(_QWORD **)(*a2 + 24);
                      ++v356;
                    }
                    while (v356 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  v645 = *v93;
                  if (*v93)
                  {
                    v646 = 0;
                    v647 = 0;
                    v648 = 0;
                    v649 = 0;
                    v650 = *(_QWORD *)(v92 + 152);
                    v651 = v227[19];
                    v652 = v91[19];
                    do
                    {
                      if (v93[1])
                      {
                        v653 = 0;
                        do
                        {
                          *(_BYTE *)(v652 + v647 + v653) = *(char *)(v650 + v649) / *((char *)v651 + v648);
                          v92 = *a1;
                          v654 = *(_QWORD **)(*a1 + 24);
                          v655 = v654[1];
                          v649 += v655;
                          v227 = (int **)*a2;
                          v656 = *(int **)(*a2 + 24);
                          v657 = *((_QWORD *)v656 + 1);
                          v648 += v657;
                          ++v653;
                          v93 = *(int **)*a1;
                          v658 = v93[1];
                        }
                        while (v653 < v658);
                        v645 = *v93;
                        v228 = *v227;
                        v647 += v653;
                      }
                      else
                      {
                        v658 = 0;
                        v654 = *(_QWORD **)(v92 + 24);
                        v655 = v654[1];
                        v656 = v227[3];
                        v657 = *((_QWORD *)v656 + 1);
                      }
                      v649 = *v654 + v649 - v658 * v655;
                      v648 = *(_QWORD *)v656 + v648 - v657 * v228[1];
                      ++v646;
                    }
                    while (v646 < v645);
                  }
                  break;
                case 3uLL:
                  v659 = *v93;
                  if (*v93)
                  {
                    v660 = 0;
                    v661 = 0;
                    v662 = 0;
                    v663 = 0;
                    v664 = *(_QWORD *)(v92 + 152);
                    v665 = v227[19];
                    v666 = v91[19];
                    do
                    {
                      if (v93[1])
                      {
                        v667 = 0;
                        do
                        {
                          if (v93[2])
                          {
                            v668 = 0;
                            do
                            {
                              *(_BYTE *)(v666 + v661 + v668) = *(char *)(v664 + v663) / *((char *)v665 + v662);
                              v92 = *a1;
                              v669 = *(_QWORD **)(*a1 + 24);
                              v670 = v669[2];
                              v663 += v670;
                              v227 = (int **)*a2;
                              v671 = *(int **)(*a2 + 24);
                              v672 = *((_QWORD *)v671 + 2);
                              v662 += v672;
                              ++v668;
                              v93 = *(int **)*a1;
                              v673 = v93[2];
                            }
                            while (v668 < v673);
                            v228 = *v227;
                            v661 += v668;
                          }
                          else
                          {
                            v673 = 0;
                            v669 = *(_QWORD **)(v92 + 24);
                            v670 = v669[2];
                            v671 = v227[3];
                            v672 = *((_QWORD *)v671 + 2);
                          }
                          v674 = v669[1];
                          v663 = v674 + v663 - v673 * v670;
                          v662 = *((_QWORD *)v671 + 1) + v662 - v672 * v228[2];
                          ++v667;
                          v675 = v93[1];
                        }
                        while (v667 < v675);
                        v659 = *v93;
                      }
                      else
                      {
                        v675 = 0;
                        v669 = *(_QWORD **)(v92 + 24);
                        v674 = v669[1];
                      }
                      v663 = *v669 + v663 - v675 * v674;
                      v662 = *(_QWORD *)v227[3] + v662 - *((_QWORD *)v227[3] + 1) * v228[1];
                      ++v660;
                    }
                    while (v660 < v659);
                  }
                  break;
                case 4uLL:
                  v676 = *v93;
                  if (*v93)
                  {
                    v677 = 0;
                    v678 = 0;
                    v679 = 0;
                    v680 = 0;
                    v681 = *(_QWORD *)(v92 + 152);
                    v682 = v227[19];
                    v683 = v91[19];
                    do
                    {
                      if (v93[1])
                      {
                        v684 = 0;
                        do
                        {
                          if (v93[2])
                          {
                            v685 = 0;
                            do
                            {
                              if (v93[3])
                              {
                                v686 = 0;
                                do
                                {
                                  *(_BYTE *)(v683 + v678 + v686) = *(char *)(v681 + v680) / *((char *)v682 + v679);
                                  v92 = *a1;
                                  v687 = *(_QWORD **)(*a1 + 24);
                                  v688 = v687[3];
                                  v680 += v688;
                                  v227 = (int **)*a2;
                                  v689 = *(int **)(*a2 + 24);
                                  v690 = *((_QWORD *)v689 + 3);
                                  v679 += v690;
                                  ++v686;
                                  v93 = *(int **)*a1;
                                  v691 = v93[3];
                                }
                                while (v686 < v691);
                                v228 = *v227;
                                v678 += v686;
                              }
                              else
                              {
                                v691 = 0;
                                v687 = *(_QWORD **)(v92 + 24);
                                v688 = v687[3];
                                v689 = v227[3];
                                v690 = *((_QWORD *)v689 + 3);
                              }
                              v692 = v687[2];
                              v680 = v692 + v680 - v691 * v688;
                              v679 = *((_QWORD *)v689 + 2) + v679 - v690 * v228[3];
                              ++v685;
                              v693 = v93[2];
                            }
                            while (v685 < v693);
                          }
                          else
                          {
                            v693 = 0;
                            v687 = *(_QWORD **)(v92 + 24);
                            v692 = v687[2];
                          }
                          v680 = v687[1] + v680 - v693 * v692;
                          v679 = *((_QWORD *)v227[3] + 1) + v679 - *((_QWORD *)v227[3] + 2) * v228[2];
                          ++v684;
                          v694 = v93[1];
                        }
                        while (v684 < v694);
                        v676 = *v93;
                      }
                      else
                      {
                        v694 = 0;
                      }
                      v680 = **(_QWORD **)(v92 + 24) + v680 - *(_QWORD *)(*(_QWORD *)(v92 + 24) + 8) * v694;
                      v679 = *(_QWORD *)v227[3] + v679 - *((_QWORD *)v227[3] + 1) * v228[1];
                      ++v677;
                    }
                    while (v677 < v676);
                  }
                  break;
                default:
                  if (v91[6])
                  {
                    v629 = 0;
                    v1851 = v227[19];
                    v1872 = *(_QWORD *)(v92 + 152);
                    v630 = v91[19];
                    do
                    {
                      v631 = *(_QWORD *)*a1;
                      v632 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v631) >> 2;
                      v633 = 0;
                      v634 = (v632 - 1);
                      if ((int)v632 - 1 >= 0)
                      {
                        v635 = *(_QWORD *)(*a1 + 24);
                        v636 = v629;
                        do
                        {
                          v637 = ldiv(v636, *(int *)(v631 + 4 * v634));
                          v636 = v637.quot;
                          v633 += *(_QWORD *)(v635 + 8 * v634--) * v637.rem;
                        }
                        while (v634 != -1);
                      }
                      v638 = *(_QWORD *)*a2;
                      v639 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v638) >> 2;
                      v640 = 0;
                      v641 = (v639 - 1);
                      if ((int)v639 - 1 >= 0)
                      {
                        v642 = *(_QWORD *)(*a2 + 24);
                        v643 = v629;
                        do
                        {
                          v644 = ldiv(v643, *(int *)(v638 + 4 * v641));
                          v643 = v644.quot;
                          v640 += *(_QWORD *)(v642 + 8 * v641--) * v644.rem;
                        }
                        while (v641 != -1);
                      }
                      *(_BYTE *)(v630 + v629++) = *(char *)(v1872 + (int)v633) / *((char *)v1851 + (int)v640);
                    }
                    while (v629 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v12)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
LABEL_13:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = v10;
          return;
        case 1:
          v128 = *(_DWORD *)(*a2 + 160);
          if (v128 >= 1)
          {
            v129 = **(_DWORD **)(*a1 + 152);
            v130 = *(int **)(*(_QWORD *)a3 + 152);
            v131 = *(int **)(*a2 + 152);
            v132 = v128 + 1;
            do
            {
              v133 = *v131++;
              *v130++ = v129 / v133;
              --v132;
            }
            while (v132 > 1);
          }
          return;
        case 2:
          v134 = *(_DWORD *)(*a1 + 160);
          if (v134 >= 1)
          {
            v135 = **(_DWORD **)(*a2 + 152);
            v136 = *(int **)(*(_QWORD *)a3 + 152);
            v137 = *(int **)(*a1 + 152);
            v138 = v134 + 1;
            do
            {
              v139 = *v137++;
              *v136++ = v139 / v135;
              --v138;
            }
            while (v138 > 1);
          }
          return;
        case 3:
          v140 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v140 >= 1)
          {
            v141 = *(int **)(*(_QWORD *)a3 + 152);
            v142 = *(int **)(*a2 + 152);
            v143 = *(int **)(*a1 + 152);
            v144 = v140 + 1;
            do
            {
              v146 = *v143++;
              v145 = v146;
              v147 = *v142++;
              *v141++ = v145 / v147;
              --v144;
            }
            while (v144 > 1);
          }
          return;
        default:
          v119 = *(_QWORD **)a3;
          v120 = (_QWORD *)*a1;
          v121 = *(int **)*a1;
          v122 = (v120[1] - (_QWORD)v121) >> 2;
          v123 = (v122 - 1);
          if ((int)v123 >= -1)
            v124 = -1;
          else
            v124 = v122 - 1;
          v125 = v124 + 1;
          v126 = v122 + 1;
          while (1)
          {
            v127 = v126 - 2;
            if (v126 - 2 < 0)
              break;
            --v126;
            if (*(_QWORD *)(v120[3] + 8 * v127) != *(_QWORD *)(v119[3] + 8 * v127))
              goto LABEL_177;
          }
          v126 = v125;
LABEL_177:
          v234 = (_QWORD *)*a2;
          v235 = *(int **)*a2;
          v236 = (v234[1] - (_QWORD)v235) >> 2;
          v237 = (v236 - 1);
          if ((int)v237 >= -1)
            v238 = -1;
          else
            v238 = v236 - 1;
          v239 = v238 + 1;
          v240 = v236 + 1;
          while (1)
          {
            v241 = v240 - 2;
            if (v240 - 2 < 0)
              break;
            --v240;
            if (*(_QWORD *)(v234[3] + 8 * v241) != *(_QWORD *)(v119[3] + 8 * v241))
              goto LABEL_221;
          }
          v240 = v239;
LABEL_221:
          v266 = v122 + 1;
          while (1)
          {
            v267 = v266 - 2;
            if (v266 - 2 < 0)
              break;
            --v266;
            if (*(_QWORD *)(v120[3] + 8 * v267))
              goto LABEL_256;
          }
          v266 = v125;
LABEL_256:
          v280 = v236 + 1;
          while (1)
          {
            v281 = v280 - 2;
            if (v280 - 2 < 0)
              break;
            --v280;
            if (*(_QWORD *)(v234[3] + 8 * v281))
              goto LABEL_414;
          }
          v280 = v239;
LABEL_414:
          v362 = (uint64_t)(v119[1] - *v119) >> 2;
          if (v126 <= v240)
            v363 = v240;
          else
            v363 = v126;
          if (v126 <= v280)
            v126 = v280;
          if (v266 > v240)
            v240 = v266;
          if (v362 > v240)
          {
            v364 = 1;
          }
          else
          {
            v240 = (uint64_t)(v119[1] - *v119) >> 2;
            v364 = 4;
          }
          if (v362 > v126)
          {
            v365 = 2;
          }
          else
          {
            v126 = v240;
            v365 = v364;
          }
          if (v362 > v363)
          {
            v126 = v363;
            v365 = 3;
          }
          v1847 = v237;
          v1868 = v123;
          if (!v126)
            goto LABEL_444;
          v366 = *(_QWORD *)(v119[3] + 8 * (v126 - 1));
          if (v366 < 0x10)
            goto LABEL_444;
          switch(v365)
          {
            case 1:
              if (v126 == 2)
              {
                v1541 = *v121;
                if (*v121)
                {
                  v1542 = 0;
                  v1543 = 0;
                  v1544 = 0;
                  v1545 = v120[19];
                  v1546 = v234[19];
                  v1547 = v119[19];
                  v1548 = (uint64_t *)v120[3];
                  v1549 = *v1548;
                  v1550 = v1548[1];
                  v1551 = (uint64_t *)v234[3];
                  v1552 = *v1551;
                  v1553 = v1551[1];
                  v1554 = v121[1];
                  v1555 = v1554;
                  do
                  {
                    if (v1555)
                    {
                      v1556 = 0;
                      v1557 = v1546 + 4 * v1543;
                      do
                      {
                        if ((int)v366 >= 1)
                        {
                          v1558 = 0;
                          v1559 = *(_DWORD *)(v1545 + 4 * v1544);
                          v1560 = v366 + 1;
                          do
                          {
                            *(_DWORD *)(v1547 + v1558) = v1559 / *(_DWORD *)(v1557 + v1558);
                            --v1560;
                            v1558 += 4;
                          }
                          while (v1560 > 1);
                          v1554 = v121[1];
                        }
                        v1544 += v1550;
                        v1543 += v1553;
                        v1547 += 4 * (int)v366;
                        ++v1556;
                        v1557 += 4 * v1553;
                      }
                      while (v1556 < v1554);
                      v1561 = v1554;
                      v1541 = *v121;
                      v1555 = v1554;
                    }
                    else
                    {
                      v1561 = 0;
                    }
                    v1544 = v1544 + v1549 - v1561 * v1550;
                    v1543 = v1543 + v1552 - v1553 * v235[1];
                    ++v1542;
                  }
                  while (v1542 < v1541);
                }
              }
              else if (v126 == 1)
              {
                v1010 = *v121;
                if (*v121)
                {
                  v1011 = 0;
                  v1012 = 0;
                  v1013 = v120[19];
                  v1014 = v234[19];
                  v1015 = v119[19];
                  v1016 = *(_QWORD *)v120[3];
                  v1017 = 4 * *(_QWORD *)v234[3];
                  do
                  {
                    if ((int)v366 >= 1)
                    {
                      v1018 = 0;
                      v1019 = *(_DWORD *)(v1013 + 4 * v1012);
                      v1020 = v366 + 1;
                      do
                      {
                        *(_DWORD *)(v1015 + v1018) = v1019 / *(_DWORD *)(v1014 + v1018);
                        --v1020;
                        v1018 += 4;
                      }
                      while (v1020 > 1);
                      v1010 = *v121;
                    }
                    v1012 += v1016;
                    ++v1011;
                    v1015 += 4 * (int)v366;
                    v1014 += v1017;
                  }
                  while (v1011 < v1010);
                }
              }
              else
              {
                v1815 = v119[6];
                if (v1815)
                {
                  v1840 = 0;
                  v1761 = v234[19];
                  v1773 = v120[19];
                  v1562 = v119[19];
                  do
                  {
                    v1563 = 0;
                    if ((v123 & 0x80000000) == 0)
                    {
                      v1564 = v120[3];
                      v1565 = v123;
                      v1566 = v1840;
                      do
                      {
                        v1567 = ldiv(v1566, v121[v1565]);
                        v1566 = v1567.quot;
                        v1563 += *(_QWORD *)(v1564 + 8 * v1565--) * v1567.rem;
                      }
                      while (v1565 != -1);
                    }
                    v1568 = v1847;
                    if ((v1847 & 0x80000000) != 0)
                    {
                      LODWORD(v1569) = 0;
                    }
                    else
                    {
                      v1569 = 0;
                      v1570 = v234[3];
                      v1571 = v1840;
                      do
                      {
                        v1572 = ldiv(v1571, v235[v1568]);
                        v1571 = v1572.quot;
                        v1569 += *(_QWORD *)(v1570 + 8 * v1568--) * v1572.rem;
                      }
                      while (v1568 != -1);
                    }
                    v123 = v1868;
                    if ((int)v366 >= 1)
                    {
                      v1573 = 0;
                      v1574 = *(_DWORD *)(v1773 + 4 * (int)v1563);
                      v1575 = v366 + 1;
                      do
                      {
                        *(_DWORD *)(v1562 + v1573) = v1574 / *(_DWORD *)(v1761 + 4 * (int)v1569 + v1573);
                        --v1575;
                        v1573 += 4;
                      }
                      while (v1575 > 1);
                    }
                    v1562 += 4 * (int)v366;
                    v1840 += (int)v366;
                  }
                  while (v1840 < v1815);
                }
              }
              break;
            case 2:
              if (v126 == 2)
              {
                v1576 = *v121;
                if (*v121)
                {
                  v1577 = 0;
                  v1578 = 0;
                  v1579 = 0;
                  v1580 = v120[19];
                  v1581 = v234[19];
                  v1582 = v119[19];
                  v1583 = (uint64_t *)v120[3];
                  v1584 = *v1583;
                  v1585 = v1583[1];
                  v1586 = (uint64_t *)v234[3];
                  v1587 = *v1586;
                  v1588 = v1586[1];
                  v1589 = v121[1];
                  v1590 = v1589;
                  do
                  {
                    if (v1590)
                    {
                      v1591 = 0;
                      v1592 = v1580 + 4 * v1579;
                      do
                      {
                        if ((int)v366 >= 1)
                        {
                          v1593 = 0;
                          v1594 = *(_DWORD *)(v1581 + 4 * v1578);
                          v1595 = v366 + 1;
                          do
                          {
                            *(_DWORD *)(v1582 + v1593) = *(_DWORD *)(v1592 + v1593) / v1594;
                            --v1595;
                            v1593 += 4;
                          }
                          while (v1595 > 1);
                          v1589 = v121[1];
                        }
                        v1579 += v1585;
                        v1578 += v1588;
                        v1582 += 4 * (int)v366;
                        ++v1591;
                        v1592 += 4 * v1585;
                      }
                      while (v1591 < v1589);
                      v1596 = v1589;
                      v1576 = *v121;
                      v1590 = v1589;
                    }
                    else
                    {
                      v1596 = 0;
                    }
                    v1579 = v1579 + v1584 - v1596 * v1585;
                    v1578 = v1578 + v1587 - v1588 * v235[1];
                    ++v1577;
                  }
                  while (v1577 < v1576);
                }
              }
              else if (v126 == 1)
              {
                v1021 = *v121;
                if (*v121)
                {
                  v1022 = 0;
                  v1023 = 0;
                  v1024 = v120[19];
                  v1025 = v234[19];
                  v1026 = v119[19];
                  v1027 = *(_QWORD *)v234[3];
                  v1028 = 4 * *(_QWORD *)v120[3];
                  do
                  {
                    if ((int)v366 >= 1)
                    {
                      v1029 = 0;
                      v1030 = *(_DWORD *)(v1025 + 4 * v1023);
                      v1031 = v366 + 1;
                      do
                      {
                        *(_DWORD *)(v1026 + v1029) = *(_DWORD *)(v1024 + v1029) / v1030;
                        --v1031;
                        v1029 += 4;
                      }
                      while (v1031 > 1);
                      v1021 = *v121;
                    }
                    v1023 += v1027;
                    ++v1022;
                    v1026 += 4 * (int)v366;
                    v1024 += v1028;
                  }
                  while (v1022 < v1021);
                }
              }
              else
              {
                v1816 = v119[6];
                if (v1816)
                {
                  v1841 = 0;
                  v1762 = v234[19];
                  v1774 = v120[19];
                  v1597 = v119[19];
                  do
                  {
                    v1598 = 0;
                    if ((v123 & 0x80000000) == 0)
                    {
                      v1599 = v120[3];
                      v1600 = v123;
                      v1601 = v1841;
                      do
                      {
                        v1602 = ldiv(v1601, v121[v1600]);
                        v1601 = v1602.quot;
                        v1598 += *(_QWORD *)(v1599 + 8 * v1600--) * v1602.rem;
                      }
                      while (v1600 != -1);
                    }
                    v1603 = v1847;
                    if ((v1847 & 0x80000000) != 0)
                    {
                      LODWORD(v1604) = 0;
                    }
                    else
                    {
                      v1604 = 0;
                      v1605 = v234[3];
                      v1606 = v1841;
                      do
                      {
                        v1607 = ldiv(v1606, v235[v1603]);
                        v1606 = v1607.quot;
                        v1604 += *(_QWORD *)(v1605 + 8 * v1603--) * v1607.rem;
                      }
                      while (v1603 != -1);
                    }
                    v123 = v1868;
                    if ((int)v366 >= 1)
                    {
                      v1608 = 0;
                      v1609 = *(_DWORD *)(v1762 + 4 * (int)v1604);
                      v1610 = v366 + 1;
                      do
                      {
                        *(_DWORD *)(v1597 + v1608) = *(_DWORD *)(v1774 + 4 * (int)v1598 + v1608) / v1609;
                        --v1610;
                        v1608 += 4;
                      }
                      while (v1610 > 1);
                    }
                    v1597 += 4 * (int)v366;
                    v1841 += (int)v366;
                  }
                  while (v1841 < v1816);
                }
              }
              break;
            case 3:
              if (v126 == 2)
              {
                v1195 = *v121;
                if (*v121)
                {
                  v1196 = 0;
                  v1197 = 0;
                  v1198 = 0;
                  v1199 = v120[19];
                  v1200 = v234[19];
                  v1201 = v119[19];
                  v1202 = (uint64_t *)v120[3];
                  v1203 = *v1202;
                  v1204 = v1202[1];
                  v1205 = (uint64_t *)v234[3];
                  v1206 = *v1205;
                  v1207 = v1205[1];
                  v1208 = v121[1];
                  v1209 = v1208;
                  do
                  {
                    if (v1209)
                    {
                      v1210 = 0;
                      v1211 = v1200 + 4 * v1197;
                      v1212 = v1199 + 4 * v1198;
                      do
                      {
                        if ((int)v366 >= 1)
                        {
                          v1213 = 0;
                          v1214 = v366 + 1;
                          do
                          {
                            *(_DWORD *)(v1201 + v1213) = *(_DWORD *)(v1212 + v1213) / *(_DWORD *)(v1211 + v1213);
                            --v1214;
                            v1213 += 4;
                          }
                          while (v1214 > 1);
                          v1208 = v121[1];
                        }
                        v1198 += v1204;
                        v1197 += v1207;
                        v1201 += 4 * (int)v366;
                        ++v1210;
                        v1211 += 4 * v1207;
                        v1212 += 4 * v1204;
                      }
                      while (v1210 < v1208);
                      v1215 = v1208;
                      v1195 = *v121;
                      v1209 = v1208;
                    }
                    else
                    {
                      v1215 = 0;
                    }
                    v1198 = v1198 + v1203 - v1215 * v1204;
                    v1197 = v1197 + v1206 - v1207 * v235[1];
                    ++v1196;
                  }
                  while (v1196 < v1195);
                }
              }
              else if (v126 == 1)
              {
                v367 = *v121;
                if (*v121)
                {
                  v368 = 0;
                  v369 = v120[19];
                  v370 = v234[19];
                  v371 = v119[19];
                  v372 = 4 * *(_QWORD *)v234[3];
                  v373 = 4 * *(_QWORD *)v120[3];
                  do
                  {
                    if ((int)v366 >= 1)
                    {
                      v374 = 0;
                      v375 = v366 + 1;
                      do
                      {
                        *(_DWORD *)(v371 + v374) = *(_DWORD *)(v369 + v374) / *(_DWORD *)(v370 + v374);
                        --v375;
                        v374 += 4;
                      }
                      while (v375 > 1);
                      v367 = *v121;
                    }
                    ++v368;
                    v371 += 4 * (int)v366;
                    v370 += v372;
                    v369 += v373;
                  }
                  while (v368 < v367);
                }
              }
              else
              {
                v1806 = v119[6];
                if (v1806)
                {
                  v1830 = 0;
                  v1756 = v234[19];
                  v1768 = v120[19];
                  v1216 = v119[19];
                  do
                  {
                    v1217 = 0;
                    if ((v123 & 0x80000000) == 0)
                    {
                      v1218 = v120[3];
                      v1219 = v123;
                      v1220 = v1830;
                      do
                      {
                        v1221 = ldiv(v1220, v121[v1219]);
                        v1220 = v1221.quot;
                        v1217 += *(_QWORD *)(v1218 + 8 * v1219--) * v1221.rem;
                      }
                      while (v1219 != -1);
                    }
                    v1222 = v1847;
                    if ((v1847 & 0x80000000) != 0)
                    {
                      LODWORD(v1223) = 0;
                    }
                    else
                    {
                      v1223 = 0;
                      v1224 = v234[3];
                      v1225 = v1830;
                      do
                      {
                        v1226 = ldiv(v1225, v235[v1222]);
                        v1225 = v1226.quot;
                        v1223 += *(_QWORD *)(v1224 + 8 * v1222--) * v1226.rem;
                      }
                      while (v1222 != -1);
                    }
                    v123 = v1868;
                    if ((int)v366 >= 1)
                    {
                      v1227 = 0;
                      v1228 = v366 + 1;
                      do
                      {
                        *(_DWORD *)(v1216 + v1227) = *(_DWORD *)(v1768 + 4 * (int)v1217 + v1227)
                                                   / *(_DWORD *)(v1756 + 4 * (int)v1223 + v1227);
                        --v1228;
                        v1227 += 4;
                      }
                      while (v1228 > 1);
                    }
                    v1216 += 4 * (int)v366;
                    v1830 += (int)v366;
                  }
                  while (v1830 < v1806);
                }
              }
              break;
            default:
LABEL_444:
              switch(v362)
              {
                case 1uLL:
                  v376 = v119[6];
                  if (v376)
                  {
                    v377 = (_DWORD *)v120[19];
                    v378 = (_DWORD *)v234[19];
                    v379 = (int *)v119[19];
                    v380 = 4 * *(_QWORD *)v234[3];
                    v381 = 4 * *(_QWORD *)v120[3];
                    do
                    {
                      *v379++ = *v377 / *v378;
                      v378 = (_DWORD *)((char *)v378 + v380);
                      v377 = (_DWORD *)((char *)v377 + v381);
                      --v376;
                    }
                    while (v376);
                  }
                  break;
                case 2uLL:
                  v707 = *v121;
                  if (*v121)
                  {
                    v708 = 0;
                    v709 = 0;
                    v710 = 0;
                    v711 = 0;
                    v712 = v120[19];
                    v713 = v234[19];
                    v714 = v119[19];
                    v715 = (uint64_t *)v120[3];
                    v716 = *v715;
                    v717 = v715[1];
                    v718 = (uint64_t *)v234[3];
                    v720 = *v718;
                    v719 = v718[1];
                    v721 = v121[1];
                    do
                    {
                      if (v721)
                      {
                        for (m = 0; m < v721; ++m)
                        {
                          *(_DWORD *)(v714 + 4 * v709 + 4 * m) = *(_DWORD *)(v712 + 4 * v711)
                                                               / *(_DWORD *)(v713 + 4 * v710);
                          v711 += v717;
                          v710 += v719;
                          v721 = v121[1];
                        }
                        v723 = v721;
                        v707 = *v121;
                        v709 += m;
                      }
                      else
                      {
                        v723 = 0;
                      }
                      v711 = v711 + v716 - v723 * v717;
                      v710 = v710 + v720 - v719 * v235[1];
                      ++v708;
                    }
                    while (v708 < v707);
                  }
                  break;
                case 3uLL:
                  v724 = *v121;
                  if (*v121)
                  {
                    v725 = 0;
                    v726 = 0;
                    v727 = 0;
                    v728 = 0;
                    v729 = v120[19];
                    v730 = v234[19];
                    v731 = v119[19];
                    v732 = (uint64_t *)v120[3];
                    v733 = *v732;
                    v734 = v732[1];
                    v735 = (uint64_t *)v234[3];
                    v736 = *v735;
                    v737 = v735[1];
                    v738 = v121[1];
                    v739 = v738;
                    do
                    {
                      if (v739)
                      {
                        v740 = 0;
                        v741 = v732[2];
                        v742 = v735[2];
                        v743 = v121[2];
                        do
                        {
                          if (v743)
                          {
                            for (n = 0; n < v743; ++n)
                            {
                              *(_DWORD *)(v731 + 4 * v726 + 4 * n) = *(_DWORD *)(v729 + 4 * v728)
                                                                   / *(_DWORD *)(v730 + 4 * v727);
                              v728 += v741;
                              v727 += v742;
                              v743 = v121[2];
                            }
                            v745 = v743;
                            v738 = v121[1];
                            v726 += n;
                          }
                          else
                          {
                            v745 = 0;
                          }
                          v728 = v728 + v734 - v745 * v741;
                          v727 = v727 + v737 - v742 * v235[2];
                          ++v740;
                        }
                        while (v740 < v738);
                        v746 = v738;
                        v724 = *v121;
                        v739 = v738;
                      }
                      else
                      {
                        v746 = 0;
                      }
                      v728 = v728 + v733 - v746 * v734;
                      v727 = v727 + v736 - v737 * v235[1];
                      ++v725;
                    }
                    while (v725 < v724);
                  }
                  break;
                case 4uLL:
                  v747 = *v121;
                  if (*v121)
                  {
                    v748 = 0;
                    v749 = 0;
                    v750 = 0;
                    v751 = 0;
                    v752 = v120[19];
                    v753 = v234[19];
                    v754 = v119[19];
                    v755 = (uint64_t *)v120[3];
                    v756 = *v755;
                    v757 = v755[1];
                    v758 = (uint64_t *)v234[3];
                    v759 = *v758;
                    v760 = v758[1];
                    v761 = v121[1];
                    v762 = v761;
                    do
                    {
                      if (v762)
                      {
                        v763 = 0;
                        v764 = v755[2];
                        v765 = v758[2];
                        v766 = v121[2];
                        v767 = v766;
                        do
                        {
                          if (v767)
                          {
                            v768 = 0;
                            v769 = v755[3];
                            v770 = v758[3];
                            v771 = v121[3];
                            do
                            {
                              if (v771)
                              {
                                for (ii = 0; ii < v771; ++ii)
                                {
                                  *(_DWORD *)(v754 + 4 * v749 + 4 * ii) = *(_DWORD *)(v752 + 4 * v751)
                                                                        / *(_DWORD *)(v753 + 4 * v750);
                                  v751 += v769;
                                  v750 += v770;
                                  v771 = v121[3];
                                }
                                v773 = v771;
                                v766 = v121[2];
                                v749 += ii;
                              }
                              else
                              {
                                v773 = 0;
                              }
                              v751 = v751 + v764 - v773 * v769;
                              v750 = v750 + v765 - v770 * v235[3];
                              ++v768;
                            }
                            while (v768 < v766);
                            v774 = v766;
                            v761 = v121[1];
                            v767 = v766;
                          }
                          else
                          {
                            v774 = 0;
                          }
                          v751 = v751 + v757 - v774 * v764;
                          v750 = v750 + v760 - v765 * v235[2];
                          ++v763;
                        }
                        while (v763 < v761);
                        v775 = v761;
                        v747 = *v121;
                        v762 = v761;
                      }
                      else
                      {
                        v775 = 0;
                      }
                      v751 = v751 + v756 - v775 * v757;
                      v750 = v750 + v759 - v760 * v235[1];
                      ++v748;
                    }
                    while (v748 < v747);
                  }
                  break;
                default:
                  v695 = v119[6];
                  if (v695)
                  {
                    v696 = 0;
                    v1798 = v234[19];
                    v1822 = v120[19];
                    v1787 = v119[19];
                    do
                    {
                      v697 = 0;
                      if ((v123 & 0x80000000) == 0)
                      {
                        v698 = v120[3];
                        v699 = v123;
                        v700 = v696;
                        do
                        {
                          v701 = ldiv(v700, v121[v699]);
                          v700 = v701.quot;
                          v697 += *(_QWORD *)(v698 + 8 * v699--) * v701.rem;
                        }
                        while (v699 != -1);
                      }
                      v702 = v1847;
                      if ((v1847 & 0x80000000) != 0)
                      {
                        LODWORD(v703) = 0;
                      }
                      else
                      {
                        v703 = 0;
                        v704 = v234[3];
                        v705 = v696;
                        do
                        {
                          v706 = ldiv(v705, v235[v702]);
                          v705 = v706.quot;
                          v703 += *(_QWORD *)(v704 + 8 * v702--) * v706.rem;
                        }
                        while (v702 != -1);
                      }
                      *(_DWORD *)(v1787 + 4 * v696++) = *(_DWORD *)(v1822 + 4 * (int)v697)
                                                      / *(_DWORD *)(v1798 + 4 * (int)v703);
                      v123 = v1868;
                    }
                    while (v696 != v695);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v13)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a1 + 152) / **(uint64_t **)(*a2 + 152);
          return;
        case 1:
          v157 = *(_DWORD *)(*a2 + 160);
          if (v157 >= 1)
          {
            v158 = **(_QWORD **)(*a1 + 152);
            v159 = *(uint64_t **)(*(_QWORD *)a3 + 152);
            v160 = *(uint64_t **)(*a2 + 152);
            v161 = v157 + 1;
            do
            {
              v162 = *v160++;
              *v159++ = v158 / v162;
              --v161;
            }
            while (v161 > 1);
          }
          return;
        case 2:
          v163 = *(_DWORD *)(*a1 + 160);
          if (v163 >= 1)
          {
            v164 = **(_QWORD **)(*a2 + 152);
            v165 = *(uint64_t **)(*(_QWORD *)a3 + 152);
            v166 = *(uint64_t **)(*a1 + 152);
            v167 = v163 + 1;
            do
            {
              v168 = *v166++;
              *v165++ = v168 / v164;
              --v167;
            }
            while (v167 > 1);
          }
          return;
        case 3:
          v169 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v169 >= 1)
          {
            v170 = *(uint64_t **)(*(_QWORD *)a3 + 152);
            v171 = *(uint64_t **)(*a2 + 152);
            v172 = *(uint64_t **)(*a1 + 152);
            v173 = v169 + 1;
            do
            {
              v175 = *v172++;
              v174 = v175;
              v176 = *v171++;
              *v170++ = v174 / v176;
              --v173;
            }
            while (v173 > 1);
          }
          return;
        default:
          v148 = *(_QWORD **)a3;
          v149 = (_QWORD *)*a1;
          v150 = *(int **)*a1;
          v151 = (v149[1] - (_QWORD)v150) >> 2;
          v152 = (v151 - 1);
          if ((int)v152 >= -1)
            v153 = -1;
          else
            v153 = v151 - 1;
          v154 = v153 + 1;
          v155 = v151 + 1;
          while (1)
          {
            v156 = v155 - 2;
            if (v155 - 2 < 0)
              break;
            --v155;
            if (*(_QWORD *)(v149[3] + 8 * v156) != *(_QWORD *)(v148[3] + 8 * v156))
              goto LABEL_185;
          }
          v155 = v154;
LABEL_185:
          v242 = (_QWORD *)*a2;
          v243 = *(int **)*a2;
          v244 = (v242[1] - (_QWORD)v243) >> 2;
          v245 = (v244 - 1);
          if ((int)v245 >= -1)
            v246 = -1;
          else
            v246 = v244 - 1;
          v247 = v246 + 1;
          v248 = v244 + 1;
          while (1)
          {
            v249 = v248 - 2;
            if (v248 - 2 < 0)
              break;
            --v248;
            if (*(_QWORD *)(v242[3] + 8 * v249) != *(_QWORD *)(v148[3] + 8 * v249))
              goto LABEL_226;
          }
          v248 = v247;
LABEL_226:
          v268 = v151 + 1;
          while (1)
          {
            v269 = v268 - 2;
            if (v268 - 2 < 0)
              break;
            --v268;
            if (*(_QWORD *)(v149[3] + 8 * v269))
              goto LABEL_261;
          }
          v268 = v154;
LABEL_261:
          v282 = v244 + 1;
          while (1)
          {
            v283 = v282 - 2;
            if (v282 - 2 < 0)
              break;
            --v282;
            if (*(_QWORD *)(v242[3] + 8 * v283))
              goto LABEL_450;
          }
          v282 = v247;
LABEL_450:
          v382 = (uint64_t)(v148[1] - *v148) >> 2;
          if (v155 <= v248)
            v383 = v248;
          else
            v383 = v155;
          if (v155 <= v282)
            v155 = v282;
          if (v268 > v248)
            v248 = v268;
          if (v382 > v248)
          {
            v384 = 1;
          }
          else
          {
            v248 = (uint64_t)(v148[1] - *v148) >> 2;
            v384 = 4;
          }
          if (v382 > v155)
          {
            v385 = 2;
          }
          else
          {
            v155 = v248;
            v385 = v384;
          }
          if (v382 > v383)
          {
            v155 = v383;
            v385 = 3;
          }
          v1848 = v245;
          v1869 = v152;
          if (!v155)
            goto LABEL_479;
          v386 = *(_QWORD *)(v148[3] + 8 * (v155 - 1));
          if (v386 < 0x10)
            goto LABEL_479;
          switch(v385)
          {
            case 1:
              if (v155 == 2)
              {
                v1611 = *v150;
                if ((_DWORD)v1611)
                {
                  v1612 = 0;
                  v1613 = 0;
                  v1614 = 0;
                  v1615 = v149[19];
                  v1616 = v242[19];
                  v1617 = v148[19];
                  v1618 = v150[1];
                  v1619 = (uint64_t *)v149[3];
                  v1620 = *v1619;
                  v1621 = v1619[1];
                  v1622 = (uint64_t *)v242[3];
                  v1623 = *v1622;
                  v1624 = v1622[1];
                  if (v1618 <= 1)
                    v1625 = 1;
                  else
                    v1625 = v150[1];
                  v1626 = v1620 - v1621 * v1618;
                  v1627 = v1623 - v1624 * v243[1];
                  do
                  {
                    if ((_DWORD)v1618)
                    {
                      v1628 = 0;
                      v1629 = v1616 + 8 * v1613;
                      do
                      {
                        if ((int)v386 >= 1)
                        {
                          v1630 = 0;
                          v1631 = *(_QWORD *)(v1615 + 8 * v1614);
                          v1632 = v386 + 1;
                          do
                          {
                            *(_QWORD *)(v1617 + v1630) = v1631 / *(_QWORD *)(v1629 + v1630);
                            --v1632;
                            v1630 += 8;
                          }
                          while (v1632 > 1);
                        }
                        v1614 += v1621;
                        v1613 += v1624;
                        v1617 += 8 * (int)v386;
                        ++v1628;
                        v1629 += 8 * v1624;
                      }
                      while (v1628 != v1625);
                    }
                    v1614 += v1626;
                    v1613 += v1627;
                    ++v1612;
                  }
                  while (v1612 != v1611);
                }
              }
              else if (v155 == 1)
              {
                v1032 = *v150;
                if ((_DWORD)v1032)
                {
                  v1033 = 0;
                  v1034 = 0;
                  v1035 = v149[19];
                  v1036 = v242[19];
                  v1037 = v148[19];
                  v1038 = *(_QWORD *)v149[3];
                  v1039 = 8 * *(_QWORD *)v242[3];
                  do
                  {
                    if ((int)v386 >= 1)
                    {
                      v1040 = 0;
                      v1041 = *(_QWORD *)(v1035 + 8 * v1034);
                      v1042 = v386 + 1;
                      do
                      {
                        *(_QWORD *)(v1037 + v1040) = v1041 / *(_QWORD *)(v1036 + v1040);
                        --v1042;
                        v1040 += 8;
                      }
                      while (v1042 > 1);
                    }
                    v1034 += v1038;
                    ++v1033;
                    v1037 += 8 * (int)v386;
                    v1036 += v1039;
                  }
                  while (v1033 != v1032);
                }
              }
              else
              {
                v1817 = v148[6];
                if (v1817)
                {
                  v1842 = 0;
                  v1763 = v242[19];
                  v1775 = v149[19];
                  v1633 = v148[19];
                  do
                  {
                    v1634 = 0;
                    if ((v152 & 0x80000000) == 0)
                    {
                      v1635 = v149[3];
                      v1636 = v152;
                      v1637 = v1842;
                      do
                      {
                        v1638 = ldiv(v1637, v150[v1636]);
                        v1637 = v1638.quot;
                        v1634 += *(_QWORD *)(v1635 + 8 * v1636--) * v1638.rem;
                      }
                      while (v1636 != -1);
                    }
                    v1639 = v1848;
                    if ((v1848 & 0x80000000) != 0)
                    {
                      LODWORD(v1640) = 0;
                    }
                    else
                    {
                      v1640 = 0;
                      v1641 = v242[3];
                      v1642 = v1842;
                      do
                      {
                        v1643 = ldiv(v1642, v243[v1639]);
                        v1642 = v1643.quot;
                        v1640 += *(_QWORD *)(v1641 + 8 * v1639--) * v1643.rem;
                      }
                      while (v1639 != -1);
                    }
                    v152 = v1869;
                    if ((int)v386 >= 1)
                    {
                      v1644 = 0;
                      v1645 = *(_QWORD *)(v1775 + 8 * (int)v1634);
                      v1646 = v386 + 1;
                      do
                      {
                        *(_QWORD *)(v1633 + v1644) = v1645 / *(_QWORD *)(v1763 + 8 * (int)v1640 + v1644);
                        --v1646;
                        v1644 += 8;
                      }
                      while (v1646 > 1);
                    }
                    v1633 += 8 * (int)v386;
                    v1842 += (int)v386;
                  }
                  while (v1842 < v1817);
                }
              }
              break;
            case 2:
              if (v155 == 2)
              {
                v1647 = *v150;
                if ((_DWORD)v1647)
                {
                  v1648 = 0;
                  v1649 = 0;
                  v1650 = 0;
                  v1651 = v149[19];
                  v1652 = v242[19];
                  v1653 = v148[19];
                  v1654 = v150[1];
                  v1655 = (uint64_t *)v149[3];
                  v1656 = *v1655;
                  v1657 = v1655[1];
                  v1658 = (uint64_t *)v242[3];
                  v1659 = *v1658;
                  v1660 = v1658[1];
                  if (v1654 <= 1)
                    v1661 = 1;
                  else
                    v1661 = v150[1];
                  v1662 = v1656 - v1657 * v1654;
                  v1663 = v1659 - v1660 * v243[1];
                  do
                  {
                    if ((_DWORD)v1654)
                    {
                      v1664 = 0;
                      v1665 = v1651 + 8 * v1650;
                      do
                      {
                        if ((int)v386 >= 1)
                        {
                          v1666 = 0;
                          v1667 = *(_QWORD *)(v1652 + 8 * v1649);
                          v1668 = v386 + 1;
                          do
                          {
                            *(_QWORD *)(v1653 + v1666) = *(_QWORD *)(v1665 + v1666) / v1667;
                            --v1668;
                            v1666 += 8;
                          }
                          while (v1668 > 1);
                        }
                        v1650 += v1657;
                        v1649 += v1660;
                        v1653 += 8 * (int)v386;
                        ++v1664;
                        v1665 += 8 * v1657;
                      }
                      while (v1664 != v1661);
                    }
                    v1650 += v1662;
                    v1649 += v1663;
                    ++v1648;
                  }
                  while (v1648 != v1647);
                }
              }
              else if (v155 == 1)
              {
                v1043 = *v150;
                if ((_DWORD)v1043)
                {
                  v1044 = 0;
                  v1045 = 0;
                  v1046 = v149[19];
                  v1047 = v242[19];
                  v1048 = v148[19];
                  v1049 = *(_QWORD *)v242[3];
                  v1050 = 8 * *(_QWORD *)v149[3];
                  do
                  {
                    if ((int)v386 >= 1)
                    {
                      v1051 = 0;
                      v1052 = *(_QWORD *)(v1047 + 8 * v1045);
                      v1053 = v386 + 1;
                      do
                      {
                        *(_QWORD *)(v1048 + v1051) = *(_QWORD *)(v1046 + v1051) / v1052;
                        --v1053;
                        v1051 += 8;
                      }
                      while (v1053 > 1);
                    }
                    v1045 += v1049;
                    ++v1044;
                    v1048 += 8 * (int)v386;
                    v1046 += v1050;
                  }
                  while (v1044 != v1043);
                }
              }
              else
              {
                v1818 = v148[6];
                if (v1818)
                {
                  v1843 = 0;
                  v1764 = v242[19];
                  v1776 = v149[19];
                  v1669 = v148[19];
                  do
                  {
                    v1670 = 0;
                    if ((v152 & 0x80000000) == 0)
                    {
                      v1671 = v149[3];
                      v1672 = v152;
                      v1673 = v1843;
                      do
                      {
                        v1674 = ldiv(v1673, v150[v1672]);
                        v1673 = v1674.quot;
                        v1670 += *(_QWORD *)(v1671 + 8 * v1672--) * v1674.rem;
                      }
                      while (v1672 != -1);
                    }
                    v1675 = v1848;
                    if ((v1848 & 0x80000000) != 0)
                    {
                      LODWORD(v1676) = 0;
                    }
                    else
                    {
                      v1676 = 0;
                      v1677 = v242[3];
                      v1678 = v1843;
                      do
                      {
                        v1679 = ldiv(v1678, v243[v1675]);
                        v1678 = v1679.quot;
                        v1676 += *(_QWORD *)(v1677 + 8 * v1675--) * v1679.rem;
                      }
                      while (v1675 != -1);
                    }
                    v152 = v1869;
                    if ((int)v386 >= 1)
                    {
                      v1680 = 0;
                      v1681 = *(_QWORD *)(v1764 + 8 * (int)v1676);
                      v1682 = v386 + 1;
                      do
                      {
                        *(_QWORD *)(v1669 + v1680) = *(_QWORD *)(v1776 + 8 * (int)v1670 + v1680) / v1681;
                        --v1682;
                        v1680 += 8;
                      }
                      while (v1682 > 1);
                    }
                    v1669 += 8 * (int)v386;
                    v1843 += (int)v386;
                  }
                  while (v1843 < v1818);
                }
              }
              break;
            case 3:
              if (v155 == 2)
              {
                v1229 = *v150;
                if ((_DWORD)v1229)
                {
                  v1230 = 0;
                  v1231 = 0;
                  v1232 = 0;
                  v1233 = v149[19];
                  v1234 = v242[19];
                  v1235 = v148[19];
                  v1236 = v150[1];
                  v1237 = (uint64_t *)v149[3];
                  v1238 = *v1237;
                  v1239 = v1237[1];
                  v1240 = (uint64_t *)v242[3];
                  v1241 = *v1240;
                  v1242 = v1240[1];
                  if (v1236 <= 1)
                    v1243 = 1;
                  else
                    v1243 = v150[1];
                  v1244 = v1238 - v1239 * v1236;
                  v1245 = v1241 - v1242 * v243[1];
                  do
                  {
                    if ((_DWORD)v1236)
                    {
                      v1246 = 0;
                      v1247 = v1234 + 8 * v1231;
                      v1248 = v1233 + 8 * v1232;
                      do
                      {
                        if ((int)v386 >= 1)
                        {
                          v1249 = 0;
                          v1250 = v386 + 1;
                          do
                          {
                            *(_QWORD *)(v1235 + v1249) = *(_QWORD *)(v1248 + v1249) / *(uint64_t *)(v1247 + v1249);
                            --v1250;
                            v1249 += 8;
                          }
                          while (v1250 > 1);
                        }
                        v1232 += v1239;
                        v1231 += v1242;
                        v1235 += 8 * (int)v386;
                        ++v1246;
                        v1247 += 8 * v1242;
                        v1248 += 8 * v1239;
                      }
                      while (v1246 != v1243);
                    }
                    v1232 += v1244;
                    v1231 += v1245;
                    ++v1230;
                  }
                  while (v1230 != v1229);
                }
              }
              else if (v155 == 1)
              {
                v387 = *v150;
                if ((_DWORD)v387)
                {
                  v388 = 0;
                  v389 = v149[19];
                  v390 = v242[19];
                  v391 = v148[19];
                  v392 = 8 * *(_QWORD *)v242[3];
                  v393 = 8 * *(_QWORD *)v149[3];
                  do
                  {
                    if ((int)v386 >= 1)
                    {
                      v394 = 0;
                      v395 = v386 + 1;
                      do
                      {
                        *(_QWORD *)(v391 + v394) = *(_QWORD *)(v389 + v394) / *(uint64_t *)(v390 + v394);
                        --v395;
                        v394 += 8;
                      }
                      while (v395 > 1);
                    }
                    ++v388;
                    v391 += 8 * (int)v386;
                    v390 += v392;
                    v389 += v393;
                  }
                  while (v388 != v387);
                }
              }
              else
              {
                v1807 = v148[6];
                if (v1807)
                {
                  v1831 = 0;
                  v1757 = v242[19];
                  v1769 = v149[19];
                  v1251 = v148[19];
                  do
                  {
                    v1252 = 0;
                    if ((v152 & 0x80000000) == 0)
                    {
                      v1253 = v149[3];
                      v1254 = v152;
                      v1255 = v1831;
                      do
                      {
                        v1256 = ldiv(v1255, v150[v1254]);
                        v1255 = v1256.quot;
                        v1252 += *(_QWORD *)(v1253 + 8 * v1254--) * v1256.rem;
                      }
                      while (v1254 != -1);
                    }
                    v1257 = v1848;
                    if ((v1848 & 0x80000000) != 0)
                    {
                      LODWORD(v1258) = 0;
                    }
                    else
                    {
                      v1258 = 0;
                      v1259 = v242[3];
                      v1260 = v1831;
                      do
                      {
                        v1261 = ldiv(v1260, v243[v1257]);
                        v1260 = v1261.quot;
                        v1258 += *(_QWORD *)(v1259 + 8 * v1257--) * v1261.rem;
                      }
                      while (v1257 != -1);
                    }
                    v152 = v1869;
                    if ((int)v386 >= 1)
                    {
                      v1262 = 0;
                      v1263 = v386 + 1;
                      do
                      {
                        *(_QWORD *)(v1251 + v1262) = *(_QWORD *)(v1769 + 8 * (int)v1252 + v1262)
                                                   / *(uint64_t *)(v1757 + 8 * (int)v1258 + v1262);
                        --v1263;
                        v1262 += 8;
                      }
                      while (v1263 > 1);
                    }
                    v1251 += 8 * (int)v386;
                    v1831 += (int)v386;
                  }
                  while (v1831 < v1807);
                }
              }
              break;
            default:
LABEL_479:
              switch(v382)
              {
                case 1uLL:
                  v396 = v148[6];
                  if (v396)
                  {
                    v397 = (_QWORD *)v149[19];
                    v398 = (uint64_t *)v242[19];
                    v399 = (uint64_t *)v148[19];
                    v400 = 8 * *(_QWORD *)v242[3];
                    v401 = 8 * *(_QWORD *)v149[3];
                    do
                    {
                      *v399++ = *v397 / *v398;
                      v398 = (uint64_t *)((char *)v398 + v400);
                      v397 = (_QWORD *)((char *)v397 + v401);
                      --v396;
                    }
                    while (v396);
                  }
                  break;
                case 2uLL:
                  v788 = *v150;
                  if ((_DWORD)v788)
                  {
                    v789 = 0;
                    v790 = 0;
                    v791 = 0;
                    v792 = 0;
                    v793 = v149[19];
                    v794 = v242[19];
                    v795 = v148[19];
                    v796 = v150[1];
                    v797 = (uint64_t *)v149[3];
                    v798 = *v797;
                    v799 = v797[1];
                    v800 = (uint64_t *)v242[3];
                    v801 = *v800;
                    v802 = v800[1];
                    v803 = v801 - v802 * v243[1];
                    if (v796 <= 1)
                      v804 = 1;
                    else
                      v804 = v150[1];
                    v805 = v798 - v799 * v796;
                    do
                    {
                      if ((_DWORD)v796)
                      {
                        v806 = v790 + v804;
                        v807 = (uint64_t *)(v795 + 8 * v790);
                        v808 = v804;
                        do
                        {
                          *v807++ = *(_QWORD *)(v793 + 8 * v792) / *(uint64_t *)(v794 + 8 * v791);
                          v792 += v799;
                          v791 += v802;
                          --v808;
                        }
                        while (v808);
                        v790 = v806;
                      }
                      v792 += v805;
                      v791 += v803;
                      ++v789;
                    }
                    while (v789 != v788);
                  }
                  break;
                case 3uLL:
                  v809 = *v150;
                  if ((_DWORD)v809)
                  {
                    v810 = 0;
                    v811 = 0;
                    v812 = 0;
                    v813 = 0;
                    v814 = v149[19];
                    v815 = v242[19];
                    v816 = v148[19];
                    v817 = v150[1];
                    v818 = (_QWORD *)v149[3];
                    v819 = v818[1];
                    v820 = (_QWORD *)v242[3];
                    v821 = v820[1];
                    v822 = *v820 - v821 * v243[1];
                    if (v817 <= 1)
                      v823 = 1;
                    else
                      v823 = v150[1];
                    v824 = *v818 - v819 * v817;
                    do
                    {
                      if ((_DWORD)v817)
                      {
                        v825 = 0;
                        v826 = v150[2];
                        v827 = v818[2];
                        v828 = v820[2];
                        if (v826 <= 1)
                          v829 = 1;
                        else
                          v829 = v150[2];
                        v830 = v821 - v828 * v243[2];
                        do
                        {
                          v831 = v829;
                          if ((_DWORD)v826)
                          {
                            do
                            {
                              *(_QWORD *)(v816 + 8 * v811++) = *(_QWORD *)(v814 + 8 * v813)
                                                             / *(uint64_t *)(v815 + 8 * v812);
                              v813 += v827;
                              v812 += v828;
                              --v831;
                            }
                            while (v831);
                          }
                          v813 += v819 - v827 * v826;
                          v812 += v830;
                          ++v825;
                        }
                        while (v825 != v823);
                      }
                      v813 += v824;
                      v812 += v822;
                      ++v810;
                    }
                    while (v810 != v809);
                  }
                  break;
                case 4uLL:
                  v1873 = *v150;
                  if ((_DWORD)v1873)
                  {
                    v832 = 0;
                    v833 = 0;
                    v834 = 0;
                    v835 = 0;
                    v836 = v149[19];
                    v837 = v242[19];
                    v838 = v148[19];
                    v839 = v150[1];
                    v840 = (_QWORD *)v149[3];
                    v841 = (_QWORD *)v242[3];
                    v1779 = v841[1];
                    v1789 = v840[1];
                    v1824 = *v841 - v1779 * v243[1];
                    v1852 = v150[1];
                    if (v839 <= 1)
                      v842 = 1;
                    else
                      v842 = v150[1];
                    v1800 = *v840 - v840[1] * v839;
                    do
                    {
                      if (v1852)
                      {
                        v843 = 0;
                        v844 = v150[2];
                        v845 = v840[2];
                        v846 = v841[2];
                        if (v844 <= 1)
                          v847 = 1;
                        else
                          v847 = v150[2];
                        v848 = v1779 - v846 * v243[2];
                        do
                        {
                          if ((_DWORD)v844)
                          {
                            v849 = 0;
                            v850 = v150[3];
                            v851 = v840[3];
                            v852 = v841[3];
                            if (v850 <= 1)
                              v853 = 1;
                            else
                              v853 = v150[3];
                            v854 = v846 - v852 * v243[3];
                            do
                            {
                              v855 = v853;
                              if ((_DWORD)v850)
                              {
                                do
                                {
                                  *(_QWORD *)(v838 + 8 * v833++) = *(_QWORD *)(v836 + 8 * v835)
                                                                 / *(uint64_t *)(v837 + 8 * v834);
                                  v835 += v851;
                                  v834 += v852;
                                  --v855;
                                }
                                while (v855);
                              }
                              v835 += v845 - v851 * v850;
                              v834 += v854;
                              ++v849;
                            }
                            while (v849 != v847);
                          }
                          v835 += v1789 - v845 * v844;
                          v834 += v848;
                          ++v843;
                        }
                        while (v843 != v842);
                      }
                      v835 += v1800;
                      v834 += v1824;
                      ++v832;
                    }
                    while (v832 != v1873);
                  }
                  break;
                default:
                  v776 = v148[6];
                  if (v776)
                  {
                    v777 = 0;
                    v1799 = v242[19];
                    v1823 = v149[19];
                    v1788 = v148[19];
                    do
                    {
                      v778 = 0;
                      if ((v152 & 0x80000000) == 0)
                      {
                        v779 = v149[3];
                        v780 = v152;
                        v781 = v777;
                        do
                        {
                          v782 = ldiv(v781, v150[v780]);
                          v781 = v782.quot;
                          v778 += *(_QWORD *)(v779 + 8 * v780--) * v782.rem;
                        }
                        while (v780 != -1);
                      }
                      v783 = v1848;
                      if ((v1848 & 0x80000000) != 0)
                      {
                        LODWORD(v784) = 0;
                      }
                      else
                      {
                        v784 = 0;
                        v785 = v242[3];
                        v786 = v777;
                        do
                        {
                          v787 = ldiv(v786, v243[v783]);
                          v786 = v787.quot;
                          v784 += *(_QWORD *)(v785 + 8 * v783--) * v787.rem;
                        }
                        while (v783 != -1);
                      }
                      *(_QWORD *)(v1788 + 8 * v777++) = *(_QWORD *)(v1823 + 8 * (int)v778)
                                                      / *(uint64_t *)(v1799 + 8 * (int)v784);
                      v152 = v1869;
                    }
                    while (v777 != v776);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) / **(float **)(*a2 + 152);
          return;
        case 1:
          v186 = *(_DWORD *)(*a2 + 160);
          if (v186 >= 1)
          {
            v187 = **(float **)(*a1 + 152);
            v188 = *(float **)(*(_QWORD *)a3 + 152);
            v189 = *(float **)(*a2 + 152);
            v190 = v186 + 1;
            do
            {
              v191 = *v189++;
              *v188++ = v187 / v191;
              --v190;
            }
            while (v190 > 1);
          }
          return;
        case 2:
          v192 = *(_DWORD *)(*a1 + 160);
          if (v192 >= 1)
          {
            v193 = **(float **)(*a2 + 152);
            v194 = *(float **)(*(_QWORD *)a3 + 152);
            v195 = *(float **)(*a1 + 152);
            v196 = v192 + 1;
            do
            {
              v197 = *v195++;
              *v194++ = v197 / v193;
              --v196;
            }
            while (v196 > 1);
          }
          return;
        case 3:
          v198 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v198 >= 1)
          {
            v199 = *(float **)(*(_QWORD *)a3 + 152);
            v200 = *(float **)(*a2 + 152);
            v201 = *(float **)(*a1 + 152);
            v202 = v198 + 1;
            do
            {
              v203 = *v201++;
              v204 = v203;
              v205 = *v200++;
              *v199++ = v204 / v205;
              --v202;
            }
            while (v202 > 1);
          }
          return;
        default:
          v177 = *(_QWORD **)a3;
          v178 = (_QWORD *)*a1;
          v179 = *(int **)*a1;
          v180 = (v178[1] - (_QWORD)v179) >> 2;
          v181 = (v180 - 1);
          if ((int)v181 >= -1)
            v182 = -1;
          else
            v182 = v180 - 1;
          v183 = v182 + 1;
          v184 = v180 + 1;
          while (1)
          {
            v185 = v184 - 2;
            if (v184 - 2 < 0)
              break;
            --v184;
            if (*(_QWORD *)(v178[3] + 8 * v185) != *(_QWORD *)(v177[3] + 8 * v185))
              goto LABEL_193;
          }
          v184 = v183;
LABEL_193:
          v250 = (_QWORD *)*a2;
          v251 = *(int **)*a2;
          v252 = (v250[1] - (_QWORD)v251) >> 2;
          v253 = (v252 - 1);
          if ((int)v253 >= -1)
            v254 = -1;
          else
            v254 = v252 - 1;
          v255 = v254 + 1;
          v256 = v252 + 1;
          while (1)
          {
            v257 = v256 - 2;
            if (v256 - 2 < 0)
              break;
            --v256;
            if (*(_QWORD *)(v250[3] + 8 * v257) != *(_QWORD *)(v177[3] + 8 * v257))
              goto LABEL_231;
          }
          v256 = v255;
LABEL_231:
          v270 = v180 + 1;
          while (1)
          {
            v271 = v270 - 2;
            if (v270 - 2 < 0)
              break;
            --v270;
            if (*(_QWORD *)(v178[3] + 8 * v271))
              goto LABEL_266;
          }
          v270 = v183;
LABEL_266:
          v284 = v252 + 1;
          while (1)
          {
            v285 = v284 - 2;
            if (v284 - 2 < 0)
              break;
            --v284;
            if (*(_QWORD *)(v250[3] + 8 * v285))
              goto LABEL_485;
          }
          v284 = v255;
LABEL_485:
          v402 = (uint64_t)(v177[1] - *v177) >> 2;
          if (v184 <= v256)
            v403 = v256;
          else
            v403 = v184;
          if (v184 <= v284)
            v184 = v284;
          if (v270 > v256)
            v256 = v270;
          if (v402 > v256)
          {
            v404 = 1;
          }
          else
          {
            v256 = (uint64_t)(v177[1] - *v177) >> 2;
            v404 = 4;
          }
          if (v402 > v184)
          {
            v405 = 2;
          }
          else
          {
            v184 = v256;
            v405 = v404;
          }
          if (v402 > v403)
          {
            v184 = v403;
            v405 = 3;
          }
          v1849 = v253;
          v1870 = v181;
          if (!v184)
            goto LABEL_514;
          v406 = *(_QWORD *)(v177[3] + 8 * (v184 - 1));
          if (v406 < 0x10)
            goto LABEL_514;
          switch(v405)
          {
            case 1:
              if (v184 == 2)
              {
                v1683 = *v179;
                if ((_DWORD)v1683)
                {
                  v1684 = 0;
                  v1685 = 0;
                  v1686 = 0;
                  v1687 = v178[19];
                  v1688 = v250[19];
                  v1689 = v177[19];
                  v1690 = v179[1];
                  v1691 = (uint64_t *)v178[3];
                  v1692 = *v1691;
                  v1693 = v1691[1];
                  v1694 = (uint64_t *)v250[3];
                  v1695 = *v1694;
                  v1696 = v1694[1];
                  if (v1690 <= 1)
                    v1697 = 1;
                  else
                    v1697 = v179[1];
                  v1698 = v1692 - v1693 * v1690;
                  v1699 = v1695 - v1696 * v251[1];
                  do
                  {
                    if ((_DWORD)v1690)
                    {
                      v1700 = 0;
                      v1701 = v1688 + 4 * v1685;
                      do
                      {
                        if ((int)v406 >= 1)
                        {
                          v1702 = 0;
                          v1703 = *(float *)(v1687 + 4 * v1686);
                          v1704 = v406 + 1;
                          do
                          {
                            *(float *)(v1689 + v1702) = v1703 / *(float *)(v1701 + v1702);
                            --v1704;
                            v1702 += 4;
                          }
                          while (v1704 > 1);
                        }
                        v1686 += v1693;
                        v1685 += v1696;
                        v1689 += 4 * (int)v406;
                        ++v1700;
                        v1701 += 4 * v1696;
                      }
                      while (v1700 != v1697);
                    }
                    v1686 += v1698;
                    v1685 += v1699;
                    ++v1684;
                  }
                  while (v1684 != v1683);
                }
              }
              else if (v184 == 1)
              {
                v1054 = *v179;
                if ((_DWORD)v1054)
                {
                  v1055 = 0;
                  v1056 = 0;
                  v1057 = v178[19];
                  v1058 = v250[19];
                  v1059 = v177[19];
                  v1060 = *(_QWORD *)v178[3];
                  v1061 = 4 * *(_QWORD *)v250[3];
                  do
                  {
                    if ((int)v406 >= 1)
                    {
                      v1062 = 0;
                      v1063 = *(float *)(v1057 + 4 * v1056);
                      v1064 = v406 + 1;
                      do
                      {
                        *(float *)(v1059 + v1062) = v1063 / *(float *)(v1058 + v1062);
                        --v1064;
                        v1062 += 4;
                      }
                      while (v1064 > 1);
                    }
                    v1056 += v1060;
                    ++v1055;
                    v1059 += 4 * (int)v406;
                    v1058 += v1061;
                  }
                  while (v1055 != v1054);
                }
              }
              else
              {
                v1819 = v177[6];
                if (v1819)
                {
                  v1844 = 0;
                  v1765 = v250[19];
                  v1777 = v178[19];
                  v1705 = v177[19];
                  do
                  {
                    v1706 = 0;
                    if ((v181 & 0x80000000) == 0)
                    {
                      v1707 = v178[3];
                      v1708 = v181;
                      v1709 = v1844;
                      do
                      {
                        v1710 = ldiv(v1709, v179[v1708]);
                        v1709 = v1710.quot;
                        v1706 += *(_QWORD *)(v1707 + 8 * v1708--) * v1710.rem;
                      }
                      while (v1708 != -1);
                    }
                    v1711 = v1849;
                    if ((v1849 & 0x80000000) != 0)
                    {
                      LODWORD(v1712) = 0;
                    }
                    else
                    {
                      v1712 = 0;
                      v1713 = v250[3];
                      v1714 = v1844;
                      do
                      {
                        v1715 = ldiv(v1714, v251[v1711]);
                        v1714 = v1715.quot;
                        v1712 += *(_QWORD *)(v1713 + 8 * v1711--) * v1715.rem;
                      }
                      while (v1711 != -1);
                    }
                    v181 = v1870;
                    if ((int)v406 >= 1)
                    {
                      v1716 = 0;
                      v1717 = *(float *)(v1777 + 4 * (int)v1706);
                      v1718 = v406 + 1;
                      do
                      {
                        *(float *)(v1705 + v1716) = v1717 / *(float *)(v1765 + 4 * (int)v1712 + v1716);
                        --v1718;
                        v1716 += 4;
                      }
                      while (v1718 > 1);
                    }
                    v1705 += 4 * (int)v406;
                    v1844 += (int)v406;
                  }
                  while (v1844 < v1819);
                }
              }
              break;
            case 2:
              if (v184 == 2)
              {
                v1719 = *v179;
                if ((_DWORD)v1719)
                {
                  v1720 = 0;
                  v1721 = 0;
                  v1722 = 0;
                  v1723 = v178[19];
                  v1724 = v250[19];
                  v1725 = v177[19];
                  v1726 = v179[1];
                  v1727 = (uint64_t *)v178[3];
                  v1728 = *v1727;
                  v1729 = v1727[1];
                  v1730 = (uint64_t *)v250[3];
                  v1731 = *v1730;
                  v1732 = v1730[1];
                  if (v1726 <= 1)
                    v1733 = 1;
                  else
                    v1733 = v179[1];
                  v1734 = v1728 - v1729 * v1726;
                  v1735 = v1731 - v1732 * v251[1];
                  do
                  {
                    if ((_DWORD)v1726)
                    {
                      v1736 = 0;
                      v1737 = v1723 + 4 * v1722;
                      do
                      {
                        if ((int)v406 >= 1)
                        {
                          v1738 = 0;
                          v1739 = *(float *)(v1724 + 4 * v1721);
                          v1740 = v406 + 1;
                          do
                          {
                            *(float *)(v1725 + v1738) = *(float *)(v1737 + v1738) / v1739;
                            --v1740;
                            v1738 += 4;
                          }
                          while (v1740 > 1);
                        }
                        v1722 += v1729;
                        v1721 += v1732;
                        v1725 += 4 * (int)v406;
                        ++v1736;
                        v1737 += 4 * v1729;
                      }
                      while (v1736 != v1733);
                    }
                    v1722 += v1734;
                    v1721 += v1735;
                    ++v1720;
                  }
                  while (v1720 != v1719);
                }
              }
              else if (v184 == 1)
              {
                v1065 = *v179;
                if ((_DWORD)v1065)
                {
                  v1066 = 0;
                  v1067 = 0;
                  v1068 = v178[19];
                  v1069 = v250[19];
                  v1070 = v177[19];
                  v1071 = *(_QWORD *)v250[3];
                  v1072 = 4 * *(_QWORD *)v178[3];
                  do
                  {
                    if ((int)v406 >= 1)
                    {
                      v1073 = 0;
                      v1074 = *(float *)(v1069 + 4 * v1067);
                      v1075 = v406 + 1;
                      do
                      {
                        *(float *)(v1070 + v1073) = *(float *)(v1068 + v1073) / v1074;
                        --v1075;
                        v1073 += 4;
                      }
                      while (v1075 > 1);
                    }
                    v1067 += v1071;
                    ++v1066;
                    v1070 += 4 * (int)v406;
                    v1068 += v1072;
                  }
                  while (v1066 != v1065);
                }
              }
              else
              {
                v1820 = v177[6];
                if (v1820)
                {
                  v1845 = 0;
                  v1766 = v250[19];
                  v1778 = v178[19];
                  v1741 = v177[19];
                  do
                  {
                    v1742 = 0;
                    if ((v181 & 0x80000000) == 0)
                    {
                      v1743 = v178[3];
                      v1744 = v181;
                      v1745 = v1845;
                      do
                      {
                        v1746 = ldiv(v1745, v179[v1744]);
                        v1745 = v1746.quot;
                        v1742 += *(_QWORD *)(v1743 + 8 * v1744--) * v1746.rem;
                      }
                      while (v1744 != -1);
                    }
                    v1747 = v1849;
                    if ((v1849 & 0x80000000) != 0)
                    {
                      LODWORD(v1748) = 0;
                    }
                    else
                    {
                      v1748 = 0;
                      v1749 = v250[3];
                      v1750 = v1845;
                      do
                      {
                        v1751 = ldiv(v1750, v251[v1747]);
                        v1750 = v1751.quot;
                        v1748 += *(_QWORD *)(v1749 + 8 * v1747--) * v1751.rem;
                      }
                      while (v1747 != -1);
                    }
                    v181 = v1870;
                    if ((int)v406 >= 1)
                    {
                      v1752 = 0;
                      v1753 = *(float *)(v1766 + 4 * (int)v1748);
                      v1754 = v406 + 1;
                      do
                      {
                        *(float *)(v1741 + v1752) = *(float *)(v1778 + 4 * (int)v1742 + v1752) / v1753;
                        --v1754;
                        v1752 += 4;
                      }
                      while (v1754 > 1);
                    }
                    v1741 += 4 * (int)v406;
                    v1845 += (int)v406;
                  }
                  while (v1845 < v1820);
                }
              }
              break;
            case 3:
              if (v184 == 2)
              {
                v1264 = *v179;
                if ((_DWORD)v1264)
                {
                  v1265 = 0;
                  v1266 = 0;
                  v1267 = 0;
                  v1268 = v178[19];
                  v1269 = v250[19];
                  v1270 = v177[19];
                  v1271 = v179[1];
                  v1272 = (uint64_t *)v178[3];
                  v1273 = *v1272;
                  v1274 = v1272[1];
                  v1275 = (uint64_t *)v250[3];
                  v1276 = *v1275;
                  v1277 = v1275[1];
                  if (v1271 <= 1)
                    v1278 = 1;
                  else
                    v1278 = v179[1];
                  v1279 = v1273 - v1274 * v1271;
                  v1280 = v1276 - v1277 * v251[1];
                  do
                  {
                    if ((_DWORD)v1271)
                    {
                      v1281 = 0;
                      v1282 = v1269 + 4 * v1266;
                      v1283 = v1268 + 4 * v1267;
                      do
                      {
                        if ((int)v406 >= 1)
                        {
                          v1284 = 0;
                          v1285 = v406 + 1;
                          do
                          {
                            *(float *)(v1270 + v1284) = *(float *)(v1283 + v1284) / *(float *)(v1282 + v1284);
                            --v1285;
                            v1284 += 4;
                          }
                          while (v1285 > 1);
                        }
                        v1267 += v1274;
                        v1266 += v1277;
                        v1270 += 4 * (int)v406;
                        ++v1281;
                        v1282 += 4 * v1277;
                        v1283 += 4 * v1274;
                      }
                      while (v1281 != v1278);
                    }
                    v1267 += v1279;
                    v1266 += v1280;
                    ++v1265;
                  }
                  while (v1265 != v1264);
                }
              }
              else if (v184 == 1)
              {
                v407 = *v179;
                if ((_DWORD)v407)
                {
                  v408 = 0;
                  v409 = v178[19];
                  v410 = v250[19];
                  v411 = v177[19];
                  v412 = 4 * *(_QWORD *)v250[3];
                  v413 = 4 * *(_QWORD *)v178[3];
                  do
                  {
                    if ((int)v406 >= 1)
                    {
                      v414 = 0;
                      v415 = v406 + 1;
                      do
                      {
                        *(float *)(v411 + v414) = *(float *)(v409 + v414) / *(float *)(v410 + v414);
                        --v415;
                        v414 += 4;
                      }
                      while (v415 > 1);
                    }
                    ++v408;
                    v411 += 4 * (int)v406;
                    v410 += v412;
                    v409 += v413;
                  }
                  while (v408 != v407);
                }
              }
              else
              {
                v1808 = v177[6];
                if (v1808)
                {
                  v1832 = 0;
                  v1758 = v250[19];
                  v1770 = v178[19];
                  v1286 = v177[19];
                  do
                  {
                    v1287 = 0;
                    if ((v181 & 0x80000000) == 0)
                    {
                      v1288 = v178[3];
                      v1289 = v181;
                      v1290 = v1832;
                      do
                      {
                        v1291 = ldiv(v1290, v179[v1289]);
                        v1290 = v1291.quot;
                        v1287 += *(_QWORD *)(v1288 + 8 * v1289--) * v1291.rem;
                      }
                      while (v1289 != -1);
                    }
                    v1292 = v1849;
                    if ((v1849 & 0x80000000) != 0)
                    {
                      LODWORD(v1293) = 0;
                    }
                    else
                    {
                      v1293 = 0;
                      v1294 = v250[3];
                      v1295 = v1832;
                      do
                      {
                        v1296 = ldiv(v1295, v251[v1292]);
                        v1295 = v1296.quot;
                        v1293 += *(_QWORD *)(v1294 + 8 * v1292--) * v1296.rem;
                      }
                      while (v1292 != -1);
                    }
                    v181 = v1870;
                    if ((int)v406 >= 1)
                    {
                      v1297 = 0;
                      v1298 = v406 + 1;
                      do
                      {
                        *(float *)(v1286 + v1297) = *(float *)(v1770 + 4 * (int)v1287 + v1297)
                                                  / *(float *)(v1758 + 4 * (int)v1293 + v1297);
                        --v1298;
                        v1297 += 4;
                      }
                      while (v1298 > 1);
                    }
                    v1286 += 4 * (int)v406;
                    v1832 += (int)v406;
                  }
                  while (v1832 < v1808);
                }
              }
              break;
            default:
LABEL_514:
              switch(v402)
              {
                case 1uLL:
                  v416 = v177[6];
                  if (v416)
                  {
                    v417 = (float *)v178[19];
                    v418 = (float *)v250[19];
                    v419 = (float *)v177[19];
                    v420 = 4 * *(_QWORD *)v250[3];
                    v421 = 4 * *(_QWORD *)v178[3];
                    do
                    {
                      *v419++ = *v417 / *v418;
                      v418 = (float *)((char *)v418 + v420);
                      v417 = (float *)((char *)v417 + v421);
                      --v416;
                    }
                    while (v416);
                  }
                  break;
                case 2uLL:
                  v868 = *v179;
                  if ((_DWORD)v868)
                  {
                    v869 = 0;
                    v870 = 0;
                    v871 = 0;
                    v872 = 0;
                    v873 = v178[19];
                    v874 = v250[19];
                    v875 = v177[19];
                    v876 = v179[1];
                    v877 = (uint64_t *)v178[3];
                    v878 = *v877;
                    v879 = v877[1];
                    v880 = (uint64_t *)v250[3];
                    v881 = *v880;
                    v882 = v880[1];
                    v883 = v881 - v882 * v251[1];
                    if (v876 <= 1)
                      v884 = 1;
                    else
                      v884 = v179[1];
                    v885 = v878 - v879 * v876;
                    do
                    {
                      if ((_DWORD)v876)
                      {
                        v886 = v870 + v884;
                        v887 = (float *)(v875 + 4 * v870);
                        v888 = v884;
                        do
                        {
                          *v887++ = *(float *)(v873 + 4 * v872) / *(float *)(v874 + 4 * v871);
                          v872 += v879;
                          v871 += v882;
                          --v888;
                        }
                        while (v888);
                        v870 = v886;
                      }
                      v872 += v885;
                      v871 += v883;
                      ++v869;
                    }
                    while (v869 != v868);
                  }
                  break;
                case 3uLL:
                  v889 = *v179;
                  if ((_DWORD)v889)
                  {
                    v890 = 0;
                    v891 = 0;
                    v892 = 0;
                    v893 = 0;
                    v894 = v178[19];
                    v895 = v250[19];
                    v896 = v177[19];
                    v897 = v179[1];
                    v898 = (_QWORD *)v178[3];
                    v899 = v898[1];
                    v900 = (_QWORD *)v250[3];
                    v901 = v900[1];
                    v902 = *v900 - v901 * v251[1];
                    if (v897 <= 1)
                      v903 = 1;
                    else
                      v903 = v179[1];
                    v904 = *v898 - v899 * v897;
                    do
                    {
                      if ((_DWORD)v897)
                      {
                        v905 = 0;
                        v906 = v179[2];
                        v907 = v898[2];
                        v908 = v900[2];
                        if (v906 <= 1)
                          v909 = 1;
                        else
                          v909 = v179[2];
                        v910 = v901 - v908 * v251[2];
                        do
                        {
                          v911 = v909;
                          if ((_DWORD)v906)
                          {
                            do
                            {
                              *(float *)(v896 + 4 * v891++) = *(float *)(v894 + 4 * v893) / *(float *)(v895 + 4 * v892);
                              v893 += v907;
                              v892 += v908;
                              --v911;
                            }
                            while (v911);
                          }
                          v893 += v899 - v907 * v906;
                          v892 += v910;
                          ++v905;
                        }
                        while (v905 != v903);
                      }
                      v893 += v904;
                      v892 += v902;
                      ++v890;
                    }
                    while (v890 != v889);
                  }
                  break;
                case 4uLL:
                  v1874 = *v179;
                  if ((_DWORD)v1874)
                  {
                    v912 = 0;
                    v913 = 0;
                    v914 = 0;
                    v915 = 0;
                    v916 = v178[19];
                    v917 = v250[19];
                    v918 = v177[19];
                    v919 = v179[1];
                    v920 = (_QWORD *)v178[3];
                    v921 = (_QWORD *)v250[3];
                    v1802 = v921[1];
                    v1826 = v920[1];
                    v1853 = *v921 - v1802 * v251[1];
                    if (v919 <= 1)
                      v922 = 1;
                    else
                      v922 = v179[1];
                    v923 = *v920 - v920[1] * v919;
                    do
                    {
                      if ((_DWORD)v919)
                      {
                        v924 = 0;
                        v925 = v179[2];
                        v926 = v920[2];
                        v927 = v921[2];
                        if (v925 <= 1)
                          v928 = 1;
                        else
                          v928 = v179[2];
                        v929 = v1802 - v927 * v251[2];
                        do
                        {
                          if ((_DWORD)v925)
                          {
                            v930 = 0;
                            v931 = v179[3];
                            v932 = v920[3];
                            v933 = v921[3];
                            if (v931 <= 1)
                              v934 = 1;
                            else
                              v934 = v179[3];
                            v935 = v927 - v933 * v251[3];
                            do
                            {
                              v936 = v934;
                              if ((_DWORD)v931)
                              {
                                do
                                {
                                  *(float *)(v918 + 4 * v913++) = *(float *)(v916 + 4 * v915)
                                                                / *(float *)(v917 + 4 * v914);
                                  v915 += v932;
                                  v914 += v933;
                                  --v936;
                                }
                                while (v936);
                              }
                              v915 += v926 - v932 * v931;
                              v914 += v935;
                              ++v930;
                            }
                            while (v930 != v928);
                          }
                          v915 += v1826 - v926 * v925;
                          v914 += v929;
                          ++v924;
                        }
                        while (v924 != v922);
                      }
                      v915 += v923;
                      v914 += v1853;
                      ++v912;
                    }
                    while (v912 != v1874);
                  }
                  break;
                default:
                  v856 = v177[6];
                  if (v856)
                  {
                    v857 = 0;
                    v1801 = v250[19];
                    v1825 = v178[19];
                    v1790 = v177[19];
                    do
                    {
                      v858 = 0;
                      if ((v181 & 0x80000000) == 0)
                      {
                        v859 = v178[3];
                        v860 = v181;
                        v861 = v857;
                        do
                        {
                          v862 = ldiv(v861, v179[v860]);
                          v861 = v862.quot;
                          v858 += *(_QWORD *)(v859 + 8 * v860--) * v862.rem;
                        }
                        while (v860 != -1);
                      }
                      v863 = v1849;
                      if ((v1849 & 0x80000000) != 0)
                      {
                        LODWORD(v864) = 0;
                      }
                      else
                      {
                        v864 = 0;
                        v865 = v250[3];
                        v866 = v857;
                        do
                        {
                          v867 = ldiv(v866, v251[v863]);
                          v866 = v867.quot;
                          v864 += *(_QWORD *)(v865 + 8 * v863--) * v867.rem;
                        }
                        while (v863 != -1);
                      }
                      *(float *)(v1790 + 4 * v857++) = *(float *)(v1825 + 4 * (int)v858)
                                                     / *(float *)(v1801 + 4 * (int)v864);
                      v181 = v1870;
                    }
                    while (v857 != v856);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::Exp::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  uint64_t v6;
  float *v7;
  mlx::core::scheduler *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  const float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int quot;
  ldiv_t v26;
  std::logic_error *exception;
  _QWORD *v28;
  void *v29;
  _QWORD v30[3];
  int v31[2];
  uint64_t (*v32[2])(mlx::core::allocator *);
  int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Exp::eval_cpu();
  if (*(_QWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v14 = *(const float **)(*(_QWORD *)v3 + 152);
    *(_QWORD *)v31 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvexpf(*(float **)(*(_QWORD *)a3 + 152), v14, v31);
    return;
  }
  *(_QWORD *)v31 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)v31, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[exp] Cannot exponentiate elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[unary_fp] Does not support ", 28);
    v30[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
    mlx::core::operator<<(v28, v30);
    v29 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32, v30);
    MEMORY[0x2426A8084](v29, v30);
    __cxa_throw(v29, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v6)));
    *(_QWORD *)v31 = &unk_2513463C8;
    v32[0] = mlx::core::allocator::free;
    v33 = v31;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)v31);
    v9 = v33;
    if (v33 == v31)
    {
      v10 = 4;
      v9 = v31;
    }
    else
    {
      if (!v33)
        goto LABEL_17;
      v10 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_17:
    v15 = *(_QWORD *)a3;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v15 + 152);
      v19 = *(uint64_t **)v3;
      v20 = *v19;
      v21 = ((unint64_t)(v19[1] - *v19) >> 2) - 1;
      do
      {
        v22 = 0;
        if ((v21 & 0x80000000) == 0)
        {
          v23 = v19[3];
          v24 = v21;
          quot = v17;
          do
          {
            v26 = ldiv(quot, *(int *)(v20 + 4 * v24));
            quot = v26.quot;
            v22 += *(_QWORD *)(v23 + 8 * v24--) * v26.rem;
          }
          while (v24 != -1);
        }
        *(float *)(v18 + 4 * v17++) = expf(v7[(int)v22]);
      }
      while (v17 != v16);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = *(float **)(*(_QWORD *)a3 + 152);
    do
    {
      v13 = *v7++;
      *v12++ = expf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2424E1608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Expm1::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6[2];

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Expm1::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    *(_QWORD *)v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvexpm1f(*(float **)(*(_QWORD *)a3 + 152), v5, v6);
  }
  else
  {
    mlx::core::Expm1::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::Full::eval_cpu(int a1, uint64_t *a2, mlx::core::array *this, float a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  mlx::core::scheduler *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (a2[1] - *a2 != 16)
    mlx::core::Full::eval_cpu();
  v6 = *(_DWORD *)(*(_QWORD *)v4 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)this + 56);
  if (v6 != (_DWORD)v7)
    mlx::core::Full::eval_cpu();
  if (v6 != 6 || *(_QWORD *)(*(_QWORD *)v4 + 160) != 1)
  {
    mlx::core::Full::eval(a1, (uint64_t)a2, this, a4);
    return;
  }
  v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)this + 48) * BYTE4(v7)));
  v12[0] = &unk_2513463C8;
  v12[1] = mlx::core::allocator::free;
  v13 = v12;
  mlx::core::array::set_data((int ***)this, (uint64_t)v9, (uint64_t)v12);
  v10 = v13;
  if (v13 == v12)
  {
    v11 = 4;
    v10 = v12;
    goto LABEL_12;
  }
  if (v13)
  {
    v11 = 5;
LABEL_12:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  vDSP_vfill(*(const float **)(*(_QWORD *)v4 + 152), *(float **)(*(_QWORD *)this + 152), 1, *(_QWORD *)(*(_QWORD *)this + 48));
}

void sub_2424E1888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Log::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  uint64_t v6;
  int v7;
  int v8[2];

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Log::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v6 = *(_QWORD *)v3;
    *(_QWORD *)v8 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    v7 = *(_DWORD *)(a1 + 20);
    if (v7)
    {
      if (v7 == 1)
      {
        vvlog10f(*(float **)(*(_QWORD *)a3 + 152), *(const float **)(v6 + 152), v8);
      }
      else if (v7 == 2)
      {
        vvlogf(*(float **)(*(_QWORD *)a3 + 152), *(const float **)(v6 + 152), v8);
      }
    }
    else
    {
      vvlog2f(*(float **)(*(_QWORD *)a3 + 152), *(const float **)(v6 + 152), v8);
    }
  }
  else
  {
    mlx::core::Log::eval(a1, a2, a3);
  }
}

void mlx::core::Log1p::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  uint64_t v6;
  float *v7;
  mlx::core::scheduler *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  const float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int quot;
  ldiv_t v26;
  std::logic_error *exception;
  _QWORD *v28;
  void *v29;
  _QWORD v30[3];
  int v31[2];
  uint64_t (*v32[2])(mlx::core::allocator *);
  int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Log1p::eval_cpu();
  if (*(_QWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v14 = *(const float **)(*(_QWORD *)v3 + 152);
    *(_QWORD *)v31 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvlog1pf(*(float **)(*(_QWORD *)a3 + 152), v14, v31);
    return;
  }
  *(_QWORD *)v31 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)v31, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[log1p] Cannot compute log of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[unary_fp] Does not support ", 28);
    v30[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
    mlx::core::operator<<(v28, v30);
    v29 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32, v30);
    MEMORY[0x2426A8084](v29, v30);
    __cxa_throw(v29, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v6)));
    *(_QWORD *)v31 = &unk_2513463C8;
    v32[0] = mlx::core::allocator::free;
    v33 = v31;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)v31);
    v9 = v33;
    if (v33 == v31)
    {
      v10 = 4;
      v9 = v31;
    }
    else
    {
      if (!v33)
        goto LABEL_17;
      v10 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_17:
    v15 = *(_QWORD *)a3;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v15 + 152);
      v19 = *(uint64_t **)v3;
      v20 = *v19;
      v21 = ((unint64_t)(v19[1] - *v19) >> 2) - 1;
      do
      {
        v22 = 0;
        if ((v21 & 0x80000000) == 0)
        {
          v23 = v19[3];
          v24 = v21;
          quot = v17;
          do
          {
            v26 = ldiv(quot, *(int *)(v20 + 4 * v24));
            quot = v26.quot;
            v22 += *(_QWORD *)(v23 + 8 * v24--) * v26.rem;
          }
          while (v24 != -1);
        }
        *(float *)(v18 + 4 * v17++) = log1pf(v7[(int)v22]);
      }
      while (v17 != v16);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = *(float **)(*(_QWORD *)a3 + 152);
    do
    {
      v13 = *v7++;
      *v12++ = log1pf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2424E1C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Multiply::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::Multiply::eval_cpu();
  v4 = v3 + 2;
  if (*(_DWORD *)(*v3 + 56) == 6)
  else
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2,mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  BOOL v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const float *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int **v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int **v86;
  int *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int **v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int **v101;
  int *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  int **v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int **v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  int **v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  unint64_t v160;
  int v161;
  int v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  vDSP_Length v170;
  float *v171;
  uint64_t v172;
  _BYTE *v173;
  int *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  BOOL v178;
  char v179;
  unint64_t v180;
  int v181;
  int v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  vDSP_Length v190;
  float *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  uint64_t v197;
  unint64_t v198;
  int v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  vDSP_Length v208;
  uint64_t v209;
  float *v210;
  uint64_t v211;
  _DWORD *v212;
  int *v213;
  _DWORD *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  int v218;
  int v219;
  int v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int *v226;
  vDSP_Length v227;
  float *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int *v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  int v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  vDSP_Length v245;
  uint64_t v246;
  float *v247;
  uint64_t v248;
  _DWORD *v249;
  int *v250;
  _DWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  int v256;
  int v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int *v263;
  vDSP_Length v264;
  uint64_t v265;
  float *v266;
  uint64_t v267;
  _QWORD *v268;
  int *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  int v274;
  int v275;
  int v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  vDSP_Length v283;
  uint64_t v284;
  float *v285;
  uint64_t v286;
  float *v287;
  float *v288;
  float *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  ldiv_t v297;
  uint64_t v298;
  int *v299;
  uint64_t v300;
  int v301;
  ldiv_t v302;
  BOOL v303;
  char v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  int *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  BOOL v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int *v334;
  uint64_t v335;
  unint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  int *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  BOOL v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int *v358;
  uint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  int *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  BOOL v377;
  char v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  ldiv_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  ldiv_t v394;
  int v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int *v401;
  uint64_t v402;
  unint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  int *v406;
  uint64_t v407;
  unint64_t v408;
  int v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int *v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  int v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int *v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  int *v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  ldiv_t v450;
  uint64_t v451;
  int *v452;
  uint64_t v453;
  int v454;
  ldiv_t v455;
  int v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int *v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  int *v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  unint64_t i;
  uint64_t v472;
  int v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int *v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  int *v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  int v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unint64_t j;
  uint64_t v494;
  uint64_t v495;
  int v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int *v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  int *v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  int v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  int v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  unint64_t k;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  ldiv_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  ldiv_t v540;
  int v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int *v547;
  uint64_t v548;
  unint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  int *v552;
  uint64_t v553;
  unint64_t v554;
  int v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  int *v561;
  uint64_t v562;
  unint64_t v563;
  unint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  int *v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  int v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  int *v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  _QWORD *v583;
  uint64_t v584;
  int *v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  ldiv_t v596;
  uint64_t v597;
  int *v598;
  uint64_t v599;
  int v600;
  ldiv_t v601;
  int v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  int *v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  int *v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  unint64_t m;
  uint64_t v618;
  int v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int *v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  uint64_t v629;
  int *v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  int v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  unint64_t n;
  uint64_t v640;
  uint64_t v641;
  int v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int *v648;
  uint64_t v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  int *v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  int v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  int v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  unint64_t ii;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  ldiv_t v676;
  uint64_t v677;
  int *v678;
  uint64_t v679;
  int v680;
  ldiv_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int *v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t *v691;
  uint64_t v692;
  uint64_t v693;
  int *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  _QWORD *v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  int *v709;
  uint64_t v710;
  unint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  int *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  int *v731;
  uint64_t v732;
  unint64_t v733;
  _QWORD *v734;
  int *v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  int v754;
  ldiv_t v755;
  uint64_t v756;
  int *v757;
  uint64_t v758;
  int v759;
  ldiv_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  int *v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t *v770;
  uint64_t v771;
  uint64_t v772;
  int *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  float *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int *v788;
  uint64_t v789;
  unint64_t v790;
  _QWORD *v791;
  uint64_t v792;
  int *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  int *v810;
  uint64_t v811;
  unint64_t v812;
  _QWORD *v813;
  int *v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  int *v834;
  vDSP_Length v835;
  float *v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int *v841;
  vDSP_Length v842;
  float *v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  int *v848;
  vDSP_Length v849;
  float *v850;
  unint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  int *v855;
  vDSP_Length v856;
  float *v857;
  unint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  int *v862;
  vDSP_Length v863;
  uint64_t v864;
  float *v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  int *v870;
  vDSP_Length v871;
  uint64_t v872;
  float *v873;
  unint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  int *v878;
  vDSP_Length v879;
  float *v880;
  unint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int *v885;
  vDSP_Length v886;
  float *v887;
  unint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  int *v892;
  vDSP_Length v893;
  uint64_t v894;
  float *v895;
  unint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int *v900;
  vDSP_Length v901;
  uint64_t v902;
  float *v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  int *v908;
  vDSP_Length v909;
  uint64_t v910;
  float *v911;
  unint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  int *v916;
  vDSP_Length v917;
  uint64_t v918;
  float *v919;
  unint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  int *v924;
  vDSP_Length v925;
  uint64_t v926;
  float *v927;
  unint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int *v932;
  vDSP_Length v933;
  uint64_t v934;
  float *v935;
  int v936;
  uint64_t v937;
  uint64_t v938;
  float *v939;
  int *v940;
  unint64_t v941;
  _QWORD *v942;
  uint64_t v943;
  int *v944;
  uint64_t v945;
  unint64_t v946;
  unint64_t v947;
  float *v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  int v954;
  ldiv_t v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  int v961;
  ldiv_t v962;
  int v963;
  unint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  int *v968;
  vDSP_Length v969;
  float *v970;
  unint64_t v971;
  _QWORD *v972;
  uint64_t v973;
  int *v974;
  uint64_t v975;
  unint64_t v976;
  unint64_t v977;
  float *v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int v984;
  ldiv_t v985;
  uint64_t v986;
  unint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int v991;
  ldiv_t v992;
  int v993;
  uint64_t v994;
  uint64_t v995;
  float *v996;
  uint64_t v997;
  unint64_t v998;
  _QWORD *v999;
  uint64_t v1000;
  int *v1001;
  uint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  float *v1005;
  uint64_t v1006;
  unint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  int v1011;
  ldiv_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  int v1018;
  ldiv_t v1019;
  int v1020;
  unint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  int *v1025;
  vDSP_Length v1026;
  float *v1027;
  unint64_t v1028;
  _QWORD *v1029;
  uint64_t v1030;
  int *v1031;
  uint64_t v1032;
  unint64_t v1033;
  unint64_t v1034;
  float *v1035;
  uint64_t v1036;
  unint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  int v1041;
  ldiv_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  int v1048;
  ldiv_t v1049;
  int v1050;
  uint64_t v1051;
  uint64_t v1052;
  float *v1053;
  uint64_t v1054;
  unint64_t v1055;
  _QWORD *v1056;
  uint64_t v1057;
  int *v1058;
  uint64_t v1059;
  unint64_t v1060;
  unint64_t v1061;
  float *v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  int v1068;
  ldiv_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int v1075;
  ldiv_t v1076;
  int v1077;
  uint64_t v1078;
  uint64_t v1079;
  float *v1080;
  uint64_t v1081;
  unint64_t v1082;
  _QWORD *v1083;
  uint64_t v1084;
  int *v1085;
  uint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  float *v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  int v1095;
  ldiv_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  int v1102;
  ldiv_t v1103;
  int v1104;
  uint64_t v1105;
  uint64_t v1106;
  float *v1107;
  uint64_t v1108;
  unint64_t v1109;
  _QWORD *v1110;
  uint64_t v1111;
  int *v1112;
  uint64_t v1113;
  unint64_t v1114;
  unint64_t v1115;
  float *v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  int v1122;
  ldiv_t v1123;
  uint64_t v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  ldiv_t v1130;
  int v1131;
  uint64_t v1132;
  uint64_t v1133;
  float *v1134;
  int *v1135;
  unint64_t v1136;
  _QWORD *v1137;
  uint64_t v1138;
  int *v1139;
  uint64_t v1140;
  unint64_t v1141;
  unint64_t v1142;
  float *v1143;
  uint64_t v1144;
  unint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  int quot;
  ldiv_t v1150;
  uint64_t v1151;
  unint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  int v1156;
  ldiv_t v1157;
  int v1158;
  uint64_t v1159;
  uint64_t v1160;
  float *v1161;
  int *v1162;
  unint64_t v1163;
  _QWORD *v1164;
  uint64_t v1165;
  int *v1166;
  uint64_t v1167;
  unint64_t v1168;
  unint64_t v1169;
  float *v1170;
  uint64_t v1171;
  unint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  int v1176;
  ldiv_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  int v1183;
  ldiv_t v1184;
  int v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  int *v1190;
  vDSP_Length v1191;
  float *v1192;
  unint64_t v1193;
  _QWORD *v1194;
  uint64_t v1195;
  int *v1196;
  uint64_t v1197;
  unint64_t v1198;
  unint64_t v1199;
  float *v1200;
  uint64_t v1201;
  unint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  int v1206;
  ldiv_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  int v1213;
  ldiv_t v1214;
  int v1215;
  unint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  int *v1220;
  vDSP_Length v1221;
  float *v1222;
  unint64_t v1223;
  _QWORD *v1224;
  uint64_t v1225;
  int *v1226;
  uint64_t v1227;
  unint64_t v1228;
  unint64_t v1229;
  float *v1230;
  uint64_t v1231;
  unint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  int v1236;
  ldiv_t v1237;
  uint64_t v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  int v1243;
  ldiv_t v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  float *v1248;
  uint64_t v1249;
  unint64_t v1250;
  _QWORD *v1251;
  uint64_t v1252;
  int *v1253;
  uint64_t v1254;
  unint64_t v1255;
  unint64_t v1256;
  float *v1257;
  uint64_t v1258;
  unint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  int v1263;
  ldiv_t v1264;
  uint64_t v1265;
  unint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  int v1270;
  ldiv_t v1271;
  int v1272;
  uint64_t v1273;
  uint64_t v1274;
  float *v1275;
  uint64_t v1276;
  unint64_t v1277;
  _QWORD *v1278;
  uint64_t v1279;
  int *v1280;
  uint64_t v1281;
  unint64_t v1282;
  unint64_t v1283;
  float *v1284;
  uint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  ldiv_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  ldiv_t v1298;
  int v1299;
  unint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  int *v1304;
  vDSP_Length v1305;
  float *v1306;
  unint64_t v1307;
  _QWORD *v1308;
  uint64_t v1309;
  int *v1310;
  uint64_t v1311;
  unint64_t v1312;
  unint64_t v1313;
  float *v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  int v1320;
  ldiv_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  int v1327;
  ldiv_t v1328;
  int v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  int *v1334;
  vDSP_Length v1335;
  float *v1336;
  unint64_t v1337;
  _QWORD *v1338;
  uint64_t v1339;
  int *v1340;
  uint64_t v1341;
  unint64_t v1342;
  unint64_t v1343;
  float *v1344;
  uint64_t v1345;
  unint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  int v1350;
  ldiv_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  int v1357;
  ldiv_t v1358;
  int v1359;
  uint64_t v1360;
  uint64_t v1361;
  float *v1362;
  uint64_t v1363;
  unint64_t v1364;
  _QWORD *v1365;
  uint64_t v1366;
  int *v1367;
  uint64_t v1368;
  unint64_t v1369;
  unint64_t v1370;
  float *v1371;
  uint64_t v1372;
  unint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  int v1377;
  ldiv_t v1378;
  uint64_t v1379;
  unint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  int v1384;
  ldiv_t v1385;
  int v1386;
  uint64_t v1387;
  uint64_t v1388;
  float *v1389;
  uint64_t v1390;
  unint64_t v1391;
  _QWORD *v1392;
  uint64_t v1393;
  int *v1394;
  uint64_t v1395;
  unint64_t v1396;
  unint64_t v1397;
  float *v1398;
  uint64_t v1399;
  unint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  int v1404;
  ldiv_t v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  int v1411;
  ldiv_t v1412;
  int v1413;
  uint64_t v1414;
  uint64_t v1415;
  float *v1416;
  uint64_t v1417;
  unint64_t v1418;
  _QWORD *v1419;
  uint64_t v1420;
  int *v1421;
  uint64_t v1422;
  unint64_t v1423;
  unint64_t v1424;
  float *v1425;
  uint64_t v1426;
  unint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  int v1431;
  ldiv_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  int v1438;
  ldiv_t v1439;
  int v1440;
  uint64_t v1441;
  uint64_t v1442;
  float *v1443;
  uint64_t v1444;
  unint64_t v1445;
  _QWORD *v1446;
  uint64_t v1447;
  int *v1448;
  uint64_t v1449;
  unint64_t v1450;
  unint64_t v1451;
  float *v1452;
  uint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  int v1458;
  ldiv_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  int v1465;
  ldiv_t v1466;
  int v1467;
  uint64_t v1468;
  uint64_t v1469;
  float *v1470;
  uint64_t v1471;
  unint64_t v1472;
  _QWORD *v1473;
  uint64_t v1474;
  int *v1475;
  uint64_t v1476;
  unint64_t v1477;
  unint64_t v1478;
  float *v1479;
  uint64_t v1480;
  unint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  int v1485;
  ldiv_t v1486;
  uint64_t v1487;
  unint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  int v1492;
  ldiv_t v1493;
  int v1494;
  uint64_t v1495;
  uint64_t v1496;
  float *v1497;
  uint64_t v1498;
  unint64_t v1499;
  _QWORD *v1500;
  uint64_t v1501;
  int *v1502;
  uint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  float *v1506;
  uint64_t v1507;
  unint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  int v1512;
  ldiv_t v1513;
  uint64_t v1514;
  unint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  int v1519;
  ldiv_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  int *v1529;
  uint64_t v1530;
  int *v1531;
  int *v1532;
  int *v1533;
  unint64_t v1534;
  int *v1535;
  uint64_t v1536;
  unint64_t v1537;
  unint64_t v1538;
  unint64_t v1539;
  unint64_t v1540;
  unint64_t v1541;
  unint64_t v1542;
  unint64_t v1543;
  unint64_t v1544;
  unint64_t v1545;
  unint64_t v1546;
  unint64_t v1547;
  unint64_t v1548;
  uint64_t v1549;
  unint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  unint64_t v1557;
  vDSP_Length v1558;
  vDSP_Length v1559;
  vDSP_Length v1560;
  vDSP_Length v1561;
  vDSP_Length v1562;
  vDSP_Length v1563;
  vDSP_Length v1564;
  vDSP_Length v1565;
  vDSP_Length v1566;
  vDSP_Length v1567;
  vDSP_Length v1568;
  unint64_t v1569;
  vDSP_Length v1570;
  unint64_t v1571;
  vDSP_Length v1572;
  vDSP_Length v1573;
  vDSP_Length v1574;
  vDSP_Length v1575;
  vDSP_Length v1576;
  vDSP_Length v1577;
  vDSP_Length v1578;
  vDSP_Length v1579;
  vDSP_Length v1580;
  vDSP_Length v1581;
  vDSP_Length v1582;
  vDSP_Length v1583;
  vDSP_Length v1584;
  vDSP_Length v1585;
  vDSP_Length v1586;
  vDSP_Length v1587;
  vDSP_Length v1588;
  vDSP_Length v1589;
  vDSP_Length v1590;
  vDSP_Length v1591;
  vDSP_Length v1592;
  uint64_t v1593;
  uint64_t v1594;
  int *v1595;
  uint64_t v1596;
  int *v1597;
  uint64_t v1598;
  uint64_t v1599;
  int v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  int *v1604;
  int *v1605;
  int *v1606;
  int *v1607;
  int *v1608;
  int *v1609;
  int *v1610;
  int *v1611;
  int *v1612;
  int *v1613;
  int *v1614;
  uint64_t v1615;
  int *v1616;
  uint64_t v1617;
  int *v1618;
  int *v1619;
  int *v1620;
  int *v1621;
  int *v1622;
  int *v1623;
  int *v1624;
  int *v1625;
  int *v1626;
  int *v1627;
  int *v1628;
  int *v1629;
  int *v1630;
  int *v1631;
  int *v1632;
  int *v1633;
  int *v1634;
  int *v1635;
  int *v1636;
  int *v1637;
  int *v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  vDSP_Length v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  vDSP_Length v1661;
  uint64_t v1662;
  vDSP_Length v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(_BYTE **)(*a1 + 152))
            v7 = **(_BYTE **)(*a2 + 152) == 0;
          else
            v7 = 1;
          v8 = !v7;
          goto LABEL_13;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_24;
        default:
          v17 = *(_QWORD **)a3;
          v18 = *a1;
          v19 = *(int **)*a1;
          v20 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v19) >> 2;
          v21 = (v20 - 1);
          if ((int)v21 >= -1)
            v22 = -1;
          else
            v22 = v20 - 1;
          v23 = v22 + 1;
          v24 = v20 + 1;
          break;
      }
      while (1)
      {
        v25 = v24 - 2;
        if (v24 - 2 < 0)
          break;
        --v24;
        if (*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * v25) != *(_QWORD *)(v17[3] + 8 * v25))
          goto LABEL_73;
      }
      v24 = v23;
LABEL_73:
      v78 = (int **)*a2;
      v79 = *(int **)*a2;
      v80 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v79) >> 2;
      v81 = (v80 - 1);
      if ((int)v81 >= -1)
        v82 = -1;
      else
        v82 = v80 - 1;
      v83 = v82 + 1;
      v84 = v80 + 1;
      while (1)
      {
        v85 = v84 - 2;
        if (v84 - 2 < 0)
          break;
        --v84;
        if (*(_QWORD *)&v78[3][2 * v85] != *(_QWORD *)(v17[3] + 8 * v85))
          goto LABEL_127;
      }
      v84 = v83;
LABEL_127:
      v132 = v20 + 1;
      while (1)
      {
        v133 = v132 - 2;
        if (v132 - 2 < 0)
          break;
        --v132;
        if (*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * v133))
          goto LABEL_162;
      }
      v132 = v23;
LABEL_162:
      v146 = v80 + 1;
      while (1)
      {
        v147 = v146 - 2;
        if (v146 - 2 < 0)
          break;
        --v146;
        if (*(_QWORD *)&v78[3][2 * v147])
          goto LABEL_197;
      }
      v146 = v83;
LABEL_197:
      v160 = (uint64_t)(v17[1] - *v17) >> 2;
      if (v24 <= v84)
        v161 = v84;
      else
        v161 = v24;
      if (v24 <= v146)
        v24 = v146;
      if (v132 > v84)
        v84 = v132;
      if (v160 > v84)
        v162 = 1;
      else
        v162 = 4;
      if (v160 <= v84)
        v84 = (uint64_t)(v17[1] - *v17) >> 2;
      if (v160 <= v24)
        v24 = v84;
      else
        v162 = 2;
      if (v160 <= v161)
      {
        v163 = v24;
      }
      else
      {
        v162 = 3;
        v163 = v161;
      }
      if (!v163)
        goto LABEL_226;
      v164 = *(_QWORD *)(v17[3] + 8 * (v163 - 1));
      if (v164 < 0x10)
        goto LABEL_226;
      switch(v162)
      {
        case 1:
          if (v163 == 2)
          {
            v1131 = *v19;
            if (*v19)
            {
              v1132 = 0;
              v1133 = 0;
              v1569 = 0;
              v1615 = *(_QWORD *)(v18 + 152);
              v1661 = (int)v164;
              v1134 = (float *)v17[19];
              v1135 = v78[19];
              do
              {
                if (v19[1])
                {
                  v1136 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)((char *)v1135 + v1132), 1, (const float *)(v1615 + v1133), v1134, 1, v1661);
                    v18 = *a1;
                    v1137 = *(_QWORD **)(*a1 + 24);
                    v1138 = v1137[1];
                    v1133 += v1138;
                    v78 = (int **)*a2;
                    v1139 = *(int **)(*a2 + 24);
                    v1140 = *((_QWORD *)v1139 + 1);
                    v1132 += v1140;
                    v1134 = (float *)((char *)v1134 + v1661);
                    ++v1136;
                    v19 = *(int **)*a1;
                    v1141 = v19[1];
                  }
                  while (v1136 < v1141);
                  v1131 = *v19;
                  v79 = *v78;
                }
                else
                {
                  v1141 = 0;
                  v1137 = *(_QWORD **)(v18 + 24);
                  v1138 = v1137[1];
                  v1139 = v78[3];
                  v1140 = *((_QWORD *)v1139 + 1);
                }
                v1133 = *v1137 + v1133 - v1141 * v1138;
                v1132 = *(_QWORD *)v1139 + v1132 - v1140 * v79[1];
                ++v1569;
              }
              while (v1569 < v1131);
            }
          }
          else if (v163 == 1)
          {
            if (*v19)
            {
              v830 = 0;
              v831 = 0;
              v832 = 0;
              v833 = *(_QWORD *)(v18 + 152);
              v834 = v78[19];
              v835 = (int)v164;
              v836 = (float *)v17[19];
              do
              {
                vDSP_vsmul((const float *)((char *)v834 + v831), 1, (const float *)(v833 + v832), v836, 1, v835);
                v832 += **(_QWORD **)(*a1 + 24);
                v831 += **(_QWORD **)(*a2 + 24);
                v836 = (float *)((char *)v836 + v835);
                ++v830;
              }
              while (v830 < **(int **)*a1);
            }
          }
          else if (v17[6])
          {
            v1142 = 0;
            v1616 = v78[19];
            v1662 = *(_QWORD *)(v18 + 152);
            v1570 = (int)v164;
            v1143 = (float *)v17[19];
            do
            {
              v1144 = *(_QWORD *)*a1;
              v1145 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1144) >> 2;
              v1146 = 0;
              v1147 = (v1145 - 1);
              if ((int)v1145 - 1 >= 0)
              {
                v1148 = *(_QWORD *)(*a1 + 24);
                quot = v1142;
                do
                {
                  v1150 = ldiv(quot, *(int *)(v1144 + 4 * v1147));
                  quot = v1150.quot;
                  v1146 += *(_QWORD *)(v1148 + 8 * v1147--) * v1150.rem;
                }
                while (v1147 != -1);
              }
              v1151 = *(_QWORD *)*a2;
              v1152 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1151) >> 2;
              v1153 = 0;
              v1154 = (v1152 - 1);
              if ((int)v1152 - 1 >= 0)
              {
                v1155 = *(_QWORD *)(*a2 + 24);
                v1156 = v1142;
                do
                {
                  v1157 = ldiv(v1156, *(int *)(v1151 + 4 * v1154));
                  v1156 = v1157.quot;
                  v1153 += *(_QWORD *)(v1155 + 8 * v1154--) * v1157.rem;
                }
                while (v1154 != -1);
              }
              vDSP_vsmul((const float *)((char *)v1616 + (int)v1153), 1, (const float *)(v1662 + (int)v1146), v1143, 1, v1570);
              v1143 = (float *)((char *)v1143 + v1570);
              v1142 += v1570;
            }
            while (v1142 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v163 == 2)
          {
            v1158 = *v19;
            if (*v19)
            {
              v1159 = 0;
              v1160 = 0;
              v1571 = 0;
              v1617 = *(_QWORD *)(v18 + 152);
              v1663 = (int)v164;
              v1161 = (float *)v17[19];
              v1162 = v78[19];
              do
              {
                if (v19[1])
                {
                  v1163 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1617 + v1160), 1, (const float *)((char *)v1162 + v1159), v1161, 1, v1663);
                    v18 = *a1;
                    v1164 = *(_QWORD **)(*a1 + 24);
                    v1165 = v1164[1];
                    v1160 += v1165;
                    v78 = (int **)*a2;
                    v1166 = *(int **)(*a2 + 24);
                    v1167 = *((_QWORD *)v1166 + 1);
                    v1159 += v1167;
                    v1161 = (float *)((char *)v1161 + v1663);
                    ++v1163;
                    v19 = *(int **)*a1;
                    v1168 = v19[1];
                  }
                  while (v1163 < v1168);
                  v1158 = *v19;
                  v79 = *v78;
                }
                else
                {
                  v1168 = 0;
                  v1164 = *(_QWORD **)(v18 + 24);
                  v1165 = v1164[1];
                  v1166 = v78[3];
                  v1167 = *((_QWORD *)v1166 + 1);
                }
                v1160 = *v1164 + v1160 - v1168 * v1165;
                v1159 = *(_QWORD *)v1166 + v1159 - v1167 * v79[1];
                ++v1571;
              }
              while (v1571 < v1158);
            }
          }
          else if (v163 == 1)
          {
            if (*v19)
            {
              v837 = 0;
              v838 = 0;
              v839 = 0;
              v840 = *(_QWORD *)(v18 + 152);
              v841 = v78[19];
              v842 = (int)v164;
              v843 = (float *)v17[19];
              do
              {
                vDSP_vsmul((const float *)(v840 + v839), 1, (const float *)((char *)v841 + v838), v843, 1, v842);
                v839 += **(_QWORD **)(*a1 + 24);
                v838 += **(_QWORD **)(*a2 + 24);
                v843 = (float *)((char *)v843 + v842);
                ++v837;
              }
              while (v837 < **(int **)*a1);
            }
          }
          else if (v17[6])
          {
            v1169 = 0;
            v1618 = v78[19];
            v1664 = *(_QWORD *)(v18 + 152);
            v1572 = (int)v164;
            v1170 = (float *)v17[19];
            do
            {
              v1171 = *(_QWORD *)*a1;
              v1172 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1171) >> 2;
              v1173 = 0;
              v1174 = (v1172 - 1);
              if ((int)v1172 - 1 >= 0)
              {
                v1175 = *(_QWORD *)(*a1 + 24);
                v1176 = v1169;
                do
                {
                  v1177 = ldiv(v1176, *(int *)(v1171 + 4 * v1174));
                  v1176 = v1177.quot;
                  v1173 += *(_QWORD *)(v1175 + 8 * v1174--) * v1177.rem;
                }
                while (v1174 != -1);
              }
              v1178 = *(_QWORD *)*a2;
              v1179 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1178) >> 2;
              v1180 = 0;
              v1181 = (v1179 - 1);
              if ((int)v1179 - 1 >= 0)
              {
                v1182 = *(_QWORD *)(*a2 + 24);
                v1183 = v1169;
                do
                {
                  v1184 = ldiv(v1183, *(int *)(v1178 + 4 * v1181));
                  v1183 = v1184.quot;
                  v1180 += *(_QWORD *)(v1182 + 8 * v1181--) * v1184.rem;
                }
                while (v1181 != -1);
              }
              vDSP_vsmul((const float *)(v1664 + (int)v1173), 1, (const float *)((char *)v1618 + (int)v1180), v1170, 1, v1572);
              v1170 = (float *)((char *)v1170 + v1572);
              v1169 += v1572;
            }
            while (v1169 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v163 == 2)
          {
            v936 = *v19;
            if (*v19)
            {
              v937 = 0;
              v938 = 0;
              v1557 = 0;
              v1603 = *(_QWORD *)(v18 + 152);
              v1649 = (int)v164;
              v939 = (float *)v17[19];
              v940 = v78[19];
              do
              {
                if (v19[1])
                {
                  v941 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1603 + v938), 1, (const float *)((char *)v940 + v937), 1, v939, 1, v1649);
                    v18 = *a1;
                    v942 = *(_QWORD **)(*a1 + 24);
                    v943 = v942[1];
                    v938 += v943;
                    v78 = (int **)*a2;
                    v944 = *(int **)(*a2 + 24);
                    v945 = *((_QWORD *)v944 + 1);
                    v937 += v945;
                    v939 = (float *)((char *)v939 + v1649);
                    ++v941;
                    v19 = *(int **)*a1;
                    v946 = v19[1];
                  }
                  while (v941 < v946);
                  v936 = *v19;
                  v79 = *v78;
                }
                else
                {
                  v946 = 0;
                  v942 = *(_QWORD **)(v18 + 24);
                  v943 = v942[1];
                  v944 = v78[3];
                  v945 = *((_QWORD *)v944 + 1);
                }
                v938 = *v942 + v938 - v946 * v943;
                v937 = *(_QWORD *)v944 + v937 - v945 * v79[1];
                ++v1557;
              }
              while (v1557 < v936);
            }
          }
          else if (v163 == 1)
          {
            if (*v19)
            {
              v165 = 0;
              v166 = 0;
              v167 = 0;
              v168 = *(_QWORD *)(v18 + 152);
              v169 = v78[19];
              v170 = (int)v164;
              v171 = (float *)v17[19];
              do
              {
                vDSP_vmul((const float *)(v168 + v167), 1, (const float *)((char *)v169 + v166), 1, v171, 1, v170);
                v167 += **(_QWORD **)(*a1 + 24);
                v166 += **(_QWORD **)(*a2 + 24);
                v171 = (float *)((char *)v171 + v170);
                ++v165;
              }
              while (v165 < **(int **)*a1);
            }
          }
          else if (v17[6])
          {
            v947 = 0;
            v1604 = v78[19];
            v1650 = *(_QWORD *)(v18 + 152);
            v1558 = (int)v164;
            v948 = (float *)v17[19];
            do
            {
              v949 = *(_QWORD *)*a1;
              v950 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v949) >> 2;
              v951 = 0;
              v952 = (v950 - 1);
              if ((int)v950 - 1 >= 0)
              {
                v953 = *(_QWORD *)(*a1 + 24);
                v954 = v947;
                do
                {
                  v955 = ldiv(v954, *(int *)(v949 + 4 * v952));
                  v954 = v955.quot;
                  v951 += *(_QWORD *)(v953 + 8 * v952--) * v955.rem;
                }
                while (v952 != -1);
              }
              v956 = *(_QWORD *)*a2;
              v957 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v956) >> 2;
              v958 = 0;
              v959 = (v957 - 1);
              if ((int)v957 - 1 >= 0)
              {
                v960 = *(_QWORD *)(*a2 + 24);
                v961 = v947;
                do
                {
                  v962 = ldiv(v961, *(int *)(v956 + 4 * v959));
                  v961 = v962.quot;
                  v958 += *(_QWORD *)(v960 + 8 * v959--) * v962.rem;
                }
                while (v959 != -1);
              }
              vDSP_vmul((const float *)(v1650 + (int)v951), 1, (const float *)((char *)v1604 + (int)v958), 1, v948, 1, v1558);
              v948 = (float *)((char *)v948 + v1558);
              v947 += v1558;
            }
            while (v947 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_226:
          switch(v160)
          {
            case 1uLL:
              v172 = v17[6];
              if (v172)
              {
                v173 = *(_BYTE **)(v18 + 152);
                v174 = v78[19];
                v175 = (char *)v17[19];
                v176 = **(_QWORD **)(v18 + 24);
                v177 = *(_QWORD *)v78[3];
                do
                {
                  if (*v173)
                    v178 = *(_BYTE *)v174 == 0;
                  else
                    v178 = 1;
                  v179 = !v178;
                  *v175++ = v179;
                  v174 = (int *)((char *)v174 + v177);
                  v173 += v176;
                  --v172;
                }
                while (v172);
              }
              break;
            case 2uLL:
              v305 = *v19;
              if ((_DWORD)v305)
              {
                v306 = 0;
                v307 = 0;
                v308 = 0;
                v309 = 0;
                v310 = *(_QWORD *)(v18 + 152);
                v311 = v78[19];
                v312 = v17[19];
                v313 = v19[1];
                v314 = *(uint64_t **)(v18 + 24);
                v315 = *v314;
                v316 = v314[1];
                v317 = v78[3];
                v318 = *(_QWORD *)v317;
                v319 = *((_QWORD *)v317 + 1);
                v320 = v318 - v319 * v79[1];
                if (v313 <= 1)
                  v321 = 1;
                else
                  v321 = v19[1];
                v322 = v315 - v316 * v313;
                do
                {
                  if ((_DWORD)v313)
                  {
                    v323 = v307 + v321;
                    v324 = (char *)(v312 + v307);
                    v325 = v321;
                    do
                    {
                      if (*(_BYTE *)(v310 + v309))
                        v326 = *((_BYTE *)v311 + v308) == 0;
                      else
                        v326 = 1;
                      v327 = !v326;
                      *v324++ = v327;
                      v309 += v316;
                      v308 += v319;
                      --v325;
                    }
                    while (v325);
                    v307 = v323;
                  }
                  v309 += v322;
                  v308 += v320;
                  ++v306;
                }
                while (v306 != v305);
              }
              break;
            case 3uLL:
              v328 = *v19;
              if ((_DWORD)v328)
              {
                v329 = 0;
                v330 = 0;
                v331 = 0;
                v332 = 0;
                v333 = *(_QWORD *)(v18 + 152);
                v334 = v78[19];
                v335 = v17[19];
                v336 = v19[1];
                v337 = *(_QWORD **)(v18 + 24);
                v338 = v337[1];
                v339 = v78[3];
                v340 = *((_QWORD *)v339 + 1);
                v341 = *(_QWORD *)v339 - v340 * v79[1];
                if (v336 <= 1)
                  v342 = 1;
                else
                  v342 = v19[1];
                v343 = *v337 - v338 * v336;
                do
                {
                  if ((_DWORD)v336)
                  {
                    v344 = 0;
                    v345 = v19[2];
                    v346 = v337[2];
                    v347 = *((_QWORD *)v339 + 2);
                    if (v345 <= 1)
                      v348 = 1;
                    else
                      v348 = v19[2];
                    v349 = v340 - v347 * v79[2];
                    do
                    {
                      v350 = v348;
                      if ((_DWORD)v345)
                      {
                        do
                        {
                          if (*(_BYTE *)(v333 + v332))
                            v351 = *((_BYTE *)v334 + v331) == 0;
                          else
                            v351 = 1;
                          v352 = !v351;
                          *(_BYTE *)(v335 + v330++) = v352;
                          v332 += v346;
                          v331 += v347;
                          --v350;
                        }
                        while (v350);
                      }
                      v332 += v338 - v346 * v345;
                      v331 += v349;
                      ++v344;
                    }
                    while (v344 != v342);
                  }
                  v332 += v343;
                  v331 += v341;
                  ++v329;
                }
                while (v329 != v328);
              }
              break;
            case 4uLL:
              v1640 = *v19;
              if ((_DWORD)v1640)
              {
                v353 = 0;
                v354 = 0;
                v355 = 0;
                v356 = 0;
                v357 = *(_QWORD *)(v18 + 152);
                v358 = v78[19];
                v359 = v17[19];
                v360 = v19[1];
                v361 = *(_QWORD **)(v18 + 24);
                v362 = v78[3];
                v1523 = *((_QWORD *)v362 + 1);
                v1530 = v361[1];
                if (v360 <= 1)
                  v363 = 1;
                else
                  v363 = v19[1];
                v1550 = *v361 - v361[1] * v360;
                v1594 = *(_QWORD *)v362 - v1523 * v79[1];
                do
                {
                  if ((_DWORD)v360)
                  {
                    v364 = 0;
                    v365 = v19[2];
                    v366 = v361[2];
                    v367 = *((_QWORD *)v362 + 2);
                    if (v365 <= 1)
                      v368 = 1;
                    else
                      v368 = v19[2];
                    v369 = v1523 - v367 * v79[2];
                    do
                    {
                      if ((_DWORD)v365)
                      {
                        v370 = 0;
                        v371 = v19[3];
                        v372 = v361[3];
                        v373 = *((_QWORD *)v362 + 3);
                        if (v371 <= 1)
                          v374 = 1;
                        else
                          v374 = v19[3];
                        v375 = v367 - v373 * v79[3];
                        do
                        {
                          v376 = v374;
                          if ((_DWORD)v371)
                          {
                            do
                            {
                              if (*(_BYTE *)(v357 + v356))
                                v377 = *((_BYTE *)v358 + v355) == 0;
                              else
                                v377 = 1;
                              v378 = !v377;
                              *(_BYTE *)(v359 + v354++) = v378;
                              v356 += v372;
                              v355 += v373;
                              --v376;
                            }
                            while (v376);
                          }
                          v356 += v366 - v372 * v371;
                          v355 += v375;
                          ++v370;
                        }
                        while (v370 != v368);
                      }
                      v356 += v1530 - v366 * v365;
                      v355 += v369;
                      ++v364;
                    }
                    while (v364 != v363);
                  }
                  v356 += v1550;
                  v355 += v1594;
                  ++v353;
                }
                while (v353 != v1640);
              }
              break;
            default:
              v1593 = v17[6];
              v1639 = v21;
              if (v1593)
              {
                v292 = 0;
                v1529 = v78[19];
                v1549 = *(_QWORD *)(v18 + 152);
                v1522 = v17[19];
                do
                {
                  v293 = v1639;
                  if ((v1639 & 0x80000000) != 0)
                  {
                    LODWORD(v294) = 0;
                  }
                  else
                  {
                    v294 = 0;
                    v295 = *(_QWORD *)(v18 + 24);
                    v296 = v292;
                    do
                    {
                      v297 = ldiv(v296, v19[v293]);
                      v296 = v297.quot;
                      v294 += *(_QWORD *)(v295 + 8 * v293--) * v297.rem;
                    }
                    while (v293 != -1);
                  }
                  v298 = 0;
                  if ((v81 & 0x80000000) == 0)
                  {
                    v299 = v78[3];
                    v300 = v81;
                    v301 = v292;
                    do
                    {
                      v302 = ldiv(v301, v79[v300]);
                      v301 = v302.quot;
                      v298 += *(_QWORD *)&v299[2 * v300--] * v302.rem;
                    }
                    while (v300 != -1);
                  }
                  if (*(_BYTE *)(v1549 + (int)v294))
                    v303 = *((_BYTE *)v1529 + (int)v298) == 0;
                  else
                    v303 = 1;
                  v304 = !v303;
                  *(_BYTE *)(v1522 + v292++) = v304;
                }
                while (v292 != v1593);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v9)
      {
        case 0:
          goto LABEL_12;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_24;
        default:
          v26 = *(_QWORD **)a3;
          v27 = *a1;
          v28 = *(int **)*a1;
          v29 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v28) >> 2;
          v30 = v29 - 1;
          if ((int)v29 - 1 >= -1)
            v30 = -1;
          v31 = v30 + 1;
          v32 = v29 + 1;
          break;
      }
      while (1)
      {
        v33 = v32 - 2;
        if (v32 - 2 < 0)
          break;
        --v32;
        if (*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v33) != *(_QWORD *)(v26[3] + 8 * v33))
          goto LABEL_81;
      }
      v32 = v31;
LABEL_81:
      v86 = (int **)*a2;
      v87 = *(int **)*a2;
      v88 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v87) >> 2;
      v89 = v88 - 1;
      if ((int)v88 - 1 >= -1)
        v89 = -1;
      v90 = v89 + 1;
      v91 = v88 + 1;
      while (1)
      {
        v92 = v91 - 2;
        if (v91 - 2 < 0)
          break;
        --v91;
        if (*(_QWORD *)&v86[3][2 * v92] != *(_QWORD *)(v26[3] + 8 * v92))
          goto LABEL_132;
      }
      v91 = v90;
LABEL_132:
      v134 = v29 + 1;
      while (1)
      {
        v135 = v134 - 2;
        if (v134 - 2 < 0)
          break;
        --v134;
        if (*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v135))
          goto LABEL_167;
      }
      v134 = v31;
LABEL_167:
      v148 = v88 + 1;
      while (1)
      {
        v149 = v148 - 2;
        if (v148 - 2 < 0)
          break;
        --v148;
        if (*(_QWORD *)&v86[3][2 * v149])
          goto LABEL_238;
      }
      v148 = v90;
LABEL_238:
      v180 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v32 <= v91)
        v181 = v91;
      else
        v181 = v32;
      if (v32 <= v148)
        v32 = v148;
      if (v134 > v91)
        v91 = v134;
      if (v180 > v91)
        v182 = 1;
      else
        v182 = 4;
      if (v180 <= v91)
        v91 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v180 <= v32)
        v32 = v91;
      else
        v182 = 2;
      if (v180 <= v181)
      {
        v183 = v32;
      }
      else
      {
        v182 = 3;
        v183 = v181;
      }
      if (!v183)
        goto LABEL_267;
      v184 = *(_QWORD *)(v26[3] + 8 * (v183 - 1));
      if (v184 < 0x10)
        goto LABEL_267;
      switch(v182)
      {
        case 1:
          if (v183 == 2)
          {
            v1185 = *v28;
            if (*v28)
            {
              v1186 = 0;
              v1187 = 0;
              v1188 = 0;
              v1189 = *(_QWORD *)(v27 + 152);
              v1190 = v86[19];
              v1191 = (int)v184;
              v1192 = (float *)v26[19];
              do
              {
                if (v28[1])
                {
                  v1193 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)((char *)v1190 + v1187), 1, (const float *)(v1189 + v1188), v1192, 1, v1191);
                    v27 = *a1;
                    v1194 = *(_QWORD **)(*a1 + 24);
                    v1195 = v1194[1];
                    v1188 += v1195;
                    v86 = (int **)*a2;
                    v1196 = *(int **)(*a2 + 24);
                    v1197 = *((_QWORD *)v1196 + 1);
                    v1187 += v1197;
                    v1192 = (float *)((char *)v1192 + v1191);
                    ++v1193;
                    v28 = *(int **)*a1;
                    v1198 = v28[1];
                  }
                  while (v1193 < v1198);
                  v1185 = *v28;
                  v87 = *v86;
                }
                else
                {
                  v1198 = 0;
                  v1194 = *(_QWORD **)(v27 + 24);
                  v1195 = v1194[1];
                  v1196 = v86[3];
                  v1197 = *((_QWORD *)v1196 + 1);
                }
                v1188 = *v1194 + v1188 - v1198 * v1195;
                v1187 = *(_QWORD *)v1196 + v1187 - v1197 * v87[1];
                ++v1186;
              }
              while (v1186 < v1185);
            }
          }
          else if (v183 == 1)
          {
            if (*v28)
            {
              v844 = 0;
              v845 = 0;
              v846 = 0;
              v847 = *(_QWORD *)(v27 + 152);
              v848 = v86[19];
              v849 = (int)v184;
              v850 = (float *)v26[19];
              do
              {
                vDSP_vsmul((const float *)((char *)v848 + v845), 1, (const float *)(v847 + v846), v850, 1, v849);
                v846 += **(_QWORD **)(*a1 + 24);
                v845 += **(_QWORD **)(*a2 + 24);
                v850 = (float *)((char *)v850 + v849);
                ++v844;
              }
              while (v844 < **(int **)*a1);
            }
          }
          else if (v26[6])
          {
            v1199 = 0;
            v1619 = v86[19];
            v1665 = *(_QWORD *)(v27 + 152);
            v1573 = (int)v184;
            v1200 = (float *)v26[19];
            do
            {
              v1201 = *(_QWORD *)*a1;
              v1202 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1201) >> 2;
              v1203 = 0;
              v1204 = (v1202 - 1);
              if ((int)v1202 - 1 >= 0)
              {
                v1205 = *(_QWORD *)(*a1 + 24);
                v1206 = v1199;
                do
                {
                  v1207 = ldiv(v1206, *(int *)(v1201 + 4 * v1204));
                  v1206 = v1207.quot;
                  v1203 += *(_QWORD *)(v1205 + 8 * v1204--) * v1207.rem;
                }
                while (v1204 != -1);
              }
              v1208 = *(_QWORD *)*a2;
              v1209 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1208) >> 2;
              v1210 = 0;
              v1211 = (v1209 - 1);
              if ((int)v1209 - 1 >= 0)
              {
                v1212 = *(_QWORD *)(*a2 + 24);
                v1213 = v1199;
                do
                {
                  v1214 = ldiv(v1213, *(int *)(v1208 + 4 * v1211));
                  v1213 = v1214.quot;
                  v1210 += *(_QWORD *)(v1212 + 8 * v1211--) * v1214.rem;
                }
                while (v1211 != -1);
              }
              vDSP_vsmul((const float *)((char *)v1619 + (int)v1210), 1, (const float *)(v1665 + (int)v1203), v1200, 1, v1573);
              v1200 = (float *)((char *)v1200 + v1573);
              v1199 += v1573;
            }
            while (v1199 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v183 == 2)
          {
            v1215 = *v28;
            if (*v28)
            {
              v1216 = 0;
              v1217 = 0;
              v1218 = 0;
              v1219 = *(_QWORD *)(v27 + 152);
              v1220 = v86[19];
              v1221 = (int)v184;
              v1222 = (float *)v26[19];
              do
              {
                if (v28[1])
                {
                  v1223 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1219 + v1218), 1, (const float *)((char *)v1220 + v1217), v1222, 1, v1221);
                    v27 = *a1;
                    v1224 = *(_QWORD **)(*a1 + 24);
                    v1225 = v1224[1];
                    v1218 += v1225;
                    v86 = (int **)*a2;
                    v1226 = *(int **)(*a2 + 24);
                    v1227 = *((_QWORD *)v1226 + 1);
                    v1217 += v1227;
                    v1222 = (float *)((char *)v1222 + v1221);
                    ++v1223;
                    v28 = *(int **)*a1;
                    v1228 = v28[1];
                  }
                  while (v1223 < v1228);
                  v1215 = *v28;
                  v87 = *v86;
                }
                else
                {
                  v1228 = 0;
                  v1224 = *(_QWORD **)(v27 + 24);
                  v1225 = v1224[1];
                  v1226 = v86[3];
                  v1227 = *((_QWORD *)v1226 + 1);
                }
                v1218 = *v1224 + v1218 - v1228 * v1225;
                v1217 = *(_QWORD *)v1226 + v1217 - v1227 * v87[1];
                ++v1216;
              }
              while (v1216 < v1215);
            }
          }
          else if (v183 == 1)
          {
            if (*v28)
            {
              v851 = 0;
              v852 = 0;
              v853 = 0;
              v854 = *(_QWORD *)(v27 + 152);
              v855 = v86[19];
              v856 = (int)v184;
              v857 = (float *)v26[19];
              do
              {
                vDSP_vsmul((const float *)(v854 + v853), 1, (const float *)((char *)v855 + v852), v857, 1, v856);
                v853 += **(_QWORD **)(*a1 + 24);
                v852 += **(_QWORD **)(*a2 + 24);
                v857 = (float *)((char *)v857 + v856);
                ++v851;
              }
              while (v851 < **(int **)*a1);
            }
          }
          else if (v26[6])
          {
            v1229 = 0;
            v1620 = v86[19];
            v1666 = *(_QWORD *)(v27 + 152);
            v1574 = (int)v184;
            v1230 = (float *)v26[19];
            do
            {
              v1231 = *(_QWORD *)*a1;
              v1232 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1231) >> 2;
              v1233 = 0;
              v1234 = (v1232 - 1);
              if ((int)v1232 - 1 >= 0)
              {
                v1235 = *(_QWORD *)(*a1 + 24);
                v1236 = v1229;
                do
                {
                  v1237 = ldiv(v1236, *(int *)(v1231 + 4 * v1234));
                  v1236 = v1237.quot;
                  v1233 += *(_QWORD *)(v1235 + 8 * v1234--) * v1237.rem;
                }
                while (v1234 != -1);
              }
              v1238 = *(_QWORD *)*a2;
              v1239 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1238) >> 2;
              v1240 = 0;
              v1241 = (v1239 - 1);
              if ((int)v1239 - 1 >= 0)
              {
                v1242 = *(_QWORD *)(*a2 + 24);
                v1243 = v1229;
                do
                {
                  v1244 = ldiv(v1243, *(int *)(v1238 + 4 * v1241));
                  v1243 = v1244.quot;
                  v1240 += *(_QWORD *)(v1242 + 8 * v1241--) * v1244.rem;
                }
                while (v1241 != -1);
              }
              vDSP_vsmul((const float *)(v1666 + (int)v1233), 1, (const float *)((char *)v1620 + (int)v1240), v1230, 1, v1574);
              v1230 = (float *)((char *)v1230 + v1574);
              v1229 += v1574;
            }
            while (v1229 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v183 == 2)
          {
            v963 = *v28;
            if (*v28)
            {
              v964 = 0;
              v965 = 0;
              v966 = 0;
              v967 = *(_QWORD *)(v27 + 152);
              v968 = v86[19];
              v969 = (int)v184;
              v970 = (float *)v26[19];
              do
              {
                if (v28[1])
                {
                  v971 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v967 + v966), 1, (const float *)((char *)v968 + v965), 1, v970, 1, v969);
                    v27 = *a1;
                    v972 = *(_QWORD **)(*a1 + 24);
                    v973 = v972[1];
                    v966 += v973;
                    v86 = (int **)*a2;
                    v974 = *(int **)(*a2 + 24);
                    v975 = *((_QWORD *)v974 + 1);
                    v965 += v975;
                    v970 = (float *)((char *)v970 + v969);
                    ++v971;
                    v28 = *(int **)*a1;
                    v976 = v28[1];
                  }
                  while (v971 < v976);
                  v963 = *v28;
                  v87 = *v86;
                }
                else
                {
                  v976 = 0;
                  v972 = *(_QWORD **)(v27 + 24);
                  v973 = v972[1];
                  v974 = v86[3];
                  v975 = *((_QWORD *)v974 + 1);
                }
                v966 = *v972 + v966 - v976 * v973;
                v965 = *(_QWORD *)v974 + v965 - v975 * v87[1];
                ++v964;
              }
              while (v964 < v963);
            }
          }
          else if (v183 == 1)
          {
            if (*v28)
            {
              v185 = 0;
              v186 = 0;
              v187 = 0;
              v188 = *(_QWORD *)(v27 + 152);
              v189 = v86[19];
              v190 = (int)v184;
              v191 = (float *)v26[19];
              do
              {
                vDSP_vmul((const float *)(v188 + v187), 1, (const float *)((char *)v189 + v186), 1, v191, 1, v190);
                v187 += **(_QWORD **)(*a1 + 24);
                v186 += **(_QWORD **)(*a2 + 24);
                v191 = (float *)((char *)v191 + v190);
                ++v185;
              }
              while (v185 < **(int **)*a1);
            }
          }
          else if (v26[6])
          {
            v977 = 0;
            v1605 = v86[19];
            v1651 = *(_QWORD *)(v27 + 152);
            v1559 = (int)v184;
            v978 = (float *)v26[19];
            do
            {
              v979 = *(_QWORD *)*a1;
              v980 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v979) >> 2;
              v981 = 0;
              v982 = (v980 - 1);
              if ((int)v980 - 1 >= 0)
              {
                v983 = *(_QWORD *)(*a1 + 24);
                v984 = v977;
                do
                {
                  v985 = ldiv(v984, *(int *)(v979 + 4 * v982));
                  v984 = v985.quot;
                  v981 += *(_QWORD *)(v983 + 8 * v982--) * v985.rem;
                }
                while (v982 != -1);
              }
              v986 = *(_QWORD *)*a2;
              v987 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v986) >> 2;
              v988 = 0;
              v989 = (v987 - 1);
              if ((int)v987 - 1 >= 0)
              {
                v990 = *(_QWORD *)(*a2 + 24);
                v991 = v977;
                do
                {
                  v992 = ldiv(v991, *(int *)(v986 + 4 * v989));
                  v991 = v992.quot;
                  v988 += *(_QWORD *)(v990 + 8 * v989--) * v992.rem;
                }
                while (v989 != -1);
              }
              vDSP_vmul((const float *)(v1651 + (int)v981), 1, (const float *)((char *)v1605 + (int)v988), 1, v978, 1, v1559);
              v978 = (float *)((char *)v978 + v1559);
              v977 += v1559;
            }
            while (v977 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_267:
          switch(v180)
          {
            case 1uLL:
              if (v26[6])
              {
                v192 = 0;
                v193 = 0;
                v194 = 0;
                v195 = *(_QWORD *)(v27 + 152);
                v196 = v86[19];
                v197 = v26[19];
                do
                {
                  *(_BYTE *)(v197 + v192) = *((_BYTE *)v196 + v193) * *(_BYTE *)(v195 + v194);
                  v194 += **(_QWORD **)(*a1 + 24);
                  v193 += **(_QWORD **)(*a2 + 24);
                  ++v192;
                }
                while (v192 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v395 = *v28;
              if (*v28)
              {
                v396 = 0;
                v397 = 0;
                v398 = 0;
                v399 = 0;
                v400 = *(_QWORD *)(v27 + 152);
                v401 = v86[19];
                v402 = v26[19];
                do
                {
                  if (v28[1])
                  {
                    v403 = 0;
                    do
                    {
                      *(_BYTE *)(v402 + v397 + v403) = *((_BYTE *)v401 + v398) * *(_BYTE *)(v400 + v399);
                      v27 = *a1;
                      v404 = *(_QWORD **)(*a1 + 24);
                      v405 = v404[1];
                      v399 += v405;
                      v86 = (int **)*a2;
                      v406 = *(int **)(*a2 + 24);
                      v407 = *((_QWORD *)v406 + 1);
                      v398 += v407;
                      ++v403;
                      v28 = *(int **)*a1;
                      v408 = v28[1];
                    }
                    while (v403 < v408);
                    v395 = *v28;
                    v87 = *v86;
                    v397 += v403;
                  }
                  else
                  {
                    v408 = 0;
                    v404 = *(_QWORD **)(v27 + 24);
                    v405 = v404[1];
                    v406 = v86[3];
                    v407 = *((_QWORD *)v406 + 1);
                  }
                  v399 = *v404 + v399 - v408 * v405;
                  v398 = *(_QWORD *)v406 + v398 - v407 * v87[1];
                  ++v396;
                }
                while (v396 < v395);
              }
              break;
            case 3uLL:
              v409 = *v28;
              if (*v28)
              {
                v410 = 0;
                v411 = 0;
                v412 = 0;
                v413 = 0;
                v414 = *(_QWORD *)(v27 + 152);
                v415 = v86[19];
                v416 = v26[19];
                do
                {
                  if (v28[1])
                  {
                    v417 = 0;
                    do
                    {
                      if (v28[2])
                      {
                        v418 = 0;
                        do
                        {
                          *(_BYTE *)(v416 + v411 + v418) = *((_BYTE *)v415 + v412) * *(_BYTE *)(v414 + v413);
                          v27 = *a1;
                          v419 = *(_QWORD **)(*a1 + 24);
                          v420 = v419[2];
                          v413 += v420;
                          v86 = (int **)*a2;
                          v421 = *(int **)(*a2 + 24);
                          v422 = *((_QWORD *)v421 + 2);
                          v412 += v422;
                          ++v418;
                          v28 = *(int **)*a1;
                          v423 = v28[2];
                        }
                        while (v418 < v423);
                        v87 = *v86;
                        v411 += v418;
                      }
                      else
                      {
                        v423 = 0;
                        v419 = *(_QWORD **)(v27 + 24);
                        v420 = v419[2];
                        v421 = v86[3];
                        v422 = *((_QWORD *)v421 + 2);
                      }
                      v424 = v419[1];
                      v413 = v424 + v413 - v423 * v420;
                      v412 = *((_QWORD *)v421 + 1) + v412 - v422 * v87[2];
                      ++v417;
                      v425 = v28[1];
                    }
                    while (v417 < v425);
                    v409 = *v28;
                  }
                  else
                  {
                    v425 = 0;
                    v419 = *(_QWORD **)(v27 + 24);
                    v424 = v419[1];
                  }
                  v413 = *v419 + v413 - v425 * v424;
                  v412 = *(_QWORD *)v86[3] + v412 - *((_QWORD *)v86[3] + 1) * v87[1];
                  ++v410;
                }
                while (v410 < v409);
              }
              break;
            case 4uLL:
              v426 = *v28;
              if (*v28)
              {
                v427 = 0;
                v428 = 0;
                v429 = 0;
                v430 = 0;
                v431 = *(_QWORD *)(v27 + 152);
                v432 = v86[19];
                v433 = v26[19];
                do
                {
                  if (v28[1])
                  {
                    v434 = 0;
                    do
                    {
                      if (v28[2])
                      {
                        v435 = 0;
                        do
                        {
                          if (v28[3])
                          {
                            v436 = 0;
                            do
                            {
                              *(_BYTE *)(v433 + v428 + v436) = *((_BYTE *)v432 + v429) * *(_BYTE *)(v431 + v430);
                              v27 = *a1;
                              v437 = *(_QWORD **)(*a1 + 24);
                              v438 = v437[3];
                              v430 += v438;
                              v86 = (int **)*a2;
                              v439 = *(int **)(*a2 + 24);
                              v440 = *((_QWORD *)v439 + 3);
                              v429 += v440;
                              ++v436;
                              v28 = *(int **)*a1;
                              v441 = v28[3];
                            }
                            while (v436 < v441);
                            v87 = *v86;
                            v428 += v436;
                          }
                          else
                          {
                            v441 = 0;
                            v437 = *(_QWORD **)(v27 + 24);
                            v438 = v437[3];
                            v439 = v86[3];
                            v440 = *((_QWORD *)v439 + 3);
                          }
                          v442 = v437[2];
                          v430 = v442 + v430 - v441 * v438;
                          v429 = *((_QWORD *)v439 + 2) + v429 - v440 * v87[3];
                          ++v435;
                          v443 = v28[2];
                        }
                        while (v435 < v443);
                      }
                      else
                      {
                        v443 = 0;
                        v437 = *(_QWORD **)(v27 + 24);
                        v442 = v437[2];
                      }
                      v430 = v437[1] + v430 - v443 * v442;
                      v429 = *((_QWORD *)v86[3] + 1) + v429 - *((_QWORD *)v86[3] + 2) * v87[2];
                      ++v434;
                      v444 = v28[1];
                    }
                    while (v434 < v444);
                    v426 = *v28;
                  }
                  else
                  {
                    v444 = 0;
                  }
                  v430 = **(_QWORD **)(v27 + 24) + v430 - *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) * v444;
                  v429 = *(_QWORD *)v86[3] + v429 - *((_QWORD *)v86[3] + 1) * v87[1];
                  ++v427;
                }
                while (v427 < v426);
              }
              break;
            default:
              if (v26[6])
              {
                v379 = 0;
                v1595 = v86[19];
                v1641 = *(_QWORD *)(v27 + 152);
                v380 = v26[19];
                do
                {
                  v381 = *(_QWORD *)*a1;
                  v382 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v381) >> 2;
                  v383 = 0;
                  v384 = (v382 - 1);
                  if ((int)v382 - 1 >= 0)
                  {
                    v385 = *(_QWORD *)(*a1 + 24);
                    v386 = v379;
                    do
                    {
                      v387 = ldiv(v386, *(int *)(v381 + 4 * v384));
                      v386 = v387.quot;
                      v383 += *(_QWORD *)(v385 + 8 * v384--) * v387.rem;
                    }
                    while (v384 != -1);
                  }
                  v388 = *(_QWORD *)*a2;
                  v389 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v388) >> 2;
                  v390 = 0;
                  v391 = (v389 - 1);
                  if ((int)v389 - 1 >= 0)
                  {
                    v392 = *(_QWORD *)(*a2 + 24);
                    v393 = v379;
                    do
                    {
                      v394 = ldiv(v393, *(int *)(v388 + 4 * v391));
                      v393 = v394.quot;
                      v390 += *(_QWORD *)(v392 + 8 * v391--) * v394.rem;
                    }
                    while (v391 != -1);
                  }
                  *(_BYTE *)(v380 + v379++) = *((_BYTE *)v1595 + (int)v390) * *(_BYTE *)(v1641 + (int)v383);
                }
                while (v379 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v10)
      {
        case 0:
          goto LABEL_15;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_24;
        default:
          v34 = *(_QWORD **)a3;
          v35 = *a1;
          v36 = *(int **)*a1;
          v37 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v36) >> 2;
          v38 = (v37 - 1);
          if ((int)v38 >= -1)
            v39 = -1;
          else
            v39 = v37 - 1;
          v40 = v39 + 1;
          v41 = v37 + 1;
          break;
      }
      while (1)
      {
        v42 = v41 - 2;
        if (v41 - 2 < 0)
          break;
        --v41;
        if (*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8 * v42) != *(_QWORD *)(v34[3] + 8 * v42))
          goto LABEL_88;
      }
      v41 = v40;
LABEL_88:
      v93 = (int **)*a2;
      v94 = *(int **)*a2;
      v95 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v94) >> 2;
      v96 = (v95 - 1);
      if ((int)v96 >= -1)
        v97 = -1;
      else
        v97 = v95 - 1;
      v98 = v97 + 1;
      v99 = v95 + 1;
      while (1)
      {
        v100 = v99 - 2;
        if (v99 - 2 < 0)
          break;
        --v99;
        if (*(_QWORD *)&v93[3][2 * v100] != *(_QWORD *)(v34[3] + 8 * v100))
          goto LABEL_137;
      }
      v99 = v98;
LABEL_137:
      v136 = v37 + 1;
      while (1)
      {
        v137 = v136 - 2;
        if (v136 - 2 < 0)
          break;
        --v136;
        if (*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8 * v137))
          goto LABEL_172;
      }
      v136 = v40;
LABEL_172:
      v150 = v95 + 1;
      while (1)
      {
        v151 = v150 - 2;
        if (v150 - 2 < 0)
          break;
        --v150;
        if (*(_QWORD *)&v93[3][2 * v151])
          goto LABEL_273;
      }
      v150 = v98;
LABEL_273:
      v198 = (uint64_t)(v34[1] - *v34) >> 2;
      if (v41 <= v99)
        v199 = v99;
      else
        v199 = v41;
      if (v41 <= v150)
        v41 = v150;
      if (v136 > v99)
        v99 = v136;
      if (v198 > v99)
        v200 = 1;
      else
        v200 = 4;
      if (v198 <= v99)
        v99 = (uint64_t)(v34[1] - *v34) >> 2;
      if (v198 <= v41)
        v41 = v99;
      else
        v200 = 2;
      if (v198 <= v199)
      {
        v201 = v41;
      }
      else
      {
        v200 = 3;
        v201 = v199;
      }
      if (!v201)
        goto LABEL_302;
      v202 = *(_QWORD *)(v34[3] + 8 * (v201 - 1));
      if (v202 < 0x10)
        goto LABEL_302;
      switch(v200)
      {
        case 1:
          if (v201 == 2)
          {
            v1245 = *v36;
            if (*v36)
            {
              v1246 = 0;
              v1247 = 0;
              v1667 = *(_QWORD *)(v35 + 152);
              v1621 = v93[19];
              v1248 = (float *)v34[19];
              v1541 = 0;
              v1575 = (int)v202;
              v1249 = 4 * (int)v202;
              do
              {
                if (v36[1])
                {
                  v1250 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1621[v1246], 1, (const float *)(v1667 + 4 * v1247), v1248, 1, v1575);
                    v35 = *a1;
                    v1251 = *(_QWORD **)(*a1 + 24);
                    v1252 = v1251[1];
                    v1247 += v1252;
                    v93 = (int **)*a2;
                    v1253 = *(int **)(*a2 + 24);
                    v1254 = *((_QWORD *)v1253 + 1);
                    v1246 += v1254;
                    ++v1250;
                    v36 = *(int **)*a1;
                    v1255 = v36[1];
                    v1248 = (float *)((char *)v1248 + v1249);
                  }
                  while (v1250 < v1255);
                  v1245 = *v36;
                  v94 = *v93;
                }
                else
                {
                  v1255 = 0;
                  v1251 = *(_QWORD **)(v35 + 24);
                  v1252 = v1251[1];
                  v1253 = v93[3];
                  v1254 = *((_QWORD *)v1253 + 1);
                }
                v1247 = *v1251 + v1247 - v1255 * v1252;
                v1246 = *(_QWORD *)v1253 + v1246 - v1254 * v94[1];
                ++v1541;
              }
              while (v1541 < v1245);
            }
          }
          else if (v201 == 1)
          {
            if (*v36)
            {
              v858 = 0;
              v859 = 0;
              v860 = 0;
              v861 = *(_QWORD *)(v35 + 152);
              v862 = v93[19];
              v863 = (int)v202;
              v864 = 4 * (int)v202;
              v865 = (float *)v34[19];
              do
              {
                vDSP_vsmul((const float *)&v862[v859], 1, (const float *)(v861 + 4 * v860), v865, 1, v863);
                v860 += **(_QWORD **)(*a1 + 24);
                v859 += **(_QWORD **)(*a2 + 24);
                ++v858;
                v865 = (float *)((char *)v865 + v864);
              }
              while (v858 < **(int **)*a1);
            }
          }
          else if (v34[6])
          {
            v1256 = 0;
            v1622 = v93[19];
            v1668 = *(_QWORD *)(v35 + 152);
            v1576 = (int)v202;
            v1257 = (float *)v34[19];
            do
            {
              v1258 = *(_QWORD *)*a1;
              v1259 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1258) >> 2;
              v1260 = 0;
              v1261 = (v1259 - 1);
              if ((int)v1259 - 1 >= 0)
              {
                v1262 = *(_QWORD *)(*a1 + 24);
                v1263 = v1256;
                do
                {
                  v1264 = ldiv(v1263, *(int *)(v1258 + 4 * v1261));
                  v1263 = v1264.quot;
                  v1260 += *(_QWORD *)(v1262 + 8 * v1261--) * v1264.rem;
                }
                while (v1261 != -1);
              }
              v1265 = *(_QWORD *)*a2;
              v1266 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1265) >> 2;
              v1267 = 0;
              v1268 = (v1266 - 1);
              if ((int)v1266 - 1 >= 0)
              {
                v1269 = *(_QWORD *)(*a2 + 24);
                v1270 = v1256;
                do
                {
                  v1271 = ldiv(v1270, *(int *)(v1265 + 4 * v1268));
                  v1270 = v1271.quot;
                  v1267 += *(_QWORD *)(v1269 + 8 * v1268--) * v1271.rem;
                }
                while (v1268 != -1);
              }
              vDSP_vsmul((const float *)&v1622[(int)v1267], 1, (const float *)(v1668 + 4 * (int)v1260), v1257, 1, v1576);
              v1257 += v1576;
              v1256 += v1576;
            }
            while (v1256 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v201 == 2)
          {
            v1272 = *v36;
            if (*v36)
            {
              v1273 = 0;
              v1274 = 0;
              v1669 = *(_QWORD *)(v35 + 152);
              v1623 = v93[19];
              v1275 = (float *)v34[19];
              v1542 = 0;
              v1577 = (int)v202;
              v1276 = 4 * (int)v202;
              do
              {
                if (v36[1])
                {
                  v1277 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1669 + 4 * v1274), 1, (const float *)&v1623[v1273], v1275, 1, v1577);
                    v35 = *a1;
                    v1278 = *(_QWORD **)(*a1 + 24);
                    v1279 = v1278[1];
                    v1274 += v1279;
                    v93 = (int **)*a2;
                    v1280 = *(int **)(*a2 + 24);
                    v1281 = *((_QWORD *)v1280 + 1);
                    v1273 += v1281;
                    ++v1277;
                    v36 = *(int **)*a1;
                    v1282 = v36[1];
                    v1275 = (float *)((char *)v1275 + v1276);
                  }
                  while (v1277 < v1282);
                  v1272 = *v36;
                  v94 = *v93;
                }
                else
                {
                  v1282 = 0;
                  v1278 = *(_QWORD **)(v35 + 24);
                  v1279 = v1278[1];
                  v1280 = v93[3];
                  v1281 = *((_QWORD *)v1280 + 1);
                }
                v1274 = *v1278 + v1274 - v1282 * v1279;
                v1273 = *(_QWORD *)v1280 + v1273 - v1281 * v94[1];
                ++v1542;
              }
              while (v1542 < v1272);
            }
          }
          else if (v201 == 1)
          {
            if (*v36)
            {
              v866 = 0;
              v867 = 0;
              v868 = 0;
              v869 = *(_QWORD *)(v35 + 152);
              v870 = v93[19];
              v871 = (int)v202;
              v872 = 4 * (int)v202;
              v873 = (float *)v34[19];
              do
              {
                vDSP_vsmul((const float *)(v869 + 4 * v868), 1, (const float *)&v870[v867], v873, 1, v871);
                v868 += **(_QWORD **)(*a1 + 24);
                v867 += **(_QWORD **)(*a2 + 24);
                ++v866;
                v873 = (float *)((char *)v873 + v872);
              }
              while (v866 < **(int **)*a1);
            }
          }
          else if (v34[6])
          {
            v1283 = 0;
            v1624 = v93[19];
            v1670 = *(_QWORD *)(v35 + 152);
            v1578 = (int)v202;
            v1284 = (float *)v34[19];
            do
            {
              v1285 = *(_QWORD *)*a1;
              v1286 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1285) >> 2;
              v1287 = 0;
              v1288 = (v1286 - 1);
              if ((int)v1286 - 1 >= 0)
              {
                v1289 = *(_QWORD *)(*a1 + 24);
                v1290 = v1283;
                do
                {
                  v1291 = ldiv(v1290, *(int *)(v1285 + 4 * v1288));
                  v1290 = v1291.quot;
                  v1287 += *(_QWORD *)(v1289 + 8 * v1288--) * v1291.rem;
                }
                while (v1288 != -1);
              }
              v1292 = *(_QWORD *)*a2;
              v1293 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1292) >> 2;
              v1294 = 0;
              v1295 = (v1293 - 1);
              if ((int)v1293 - 1 >= 0)
              {
                v1296 = *(_QWORD *)(*a2 + 24);
                v1297 = v1283;
                do
                {
                  v1298 = ldiv(v1297, *(int *)(v1292 + 4 * v1295));
                  v1297 = v1298.quot;
                  v1294 += *(_QWORD *)(v1296 + 8 * v1295--) * v1298.rem;
                }
                while (v1295 != -1);
              }
              vDSP_vsmul((const float *)(v1670 + 4 * (int)v1287), 1, (const float *)&v1624[(int)v1294], v1284, 1, v1578);
              v1284 += v1578;
              v1283 += v1578;
            }
            while (v1283 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v201 == 2)
          {
            v993 = *v36;
            if (*v36)
            {
              v994 = 0;
              v995 = 0;
              v1652 = *(_QWORD *)(v35 + 152);
              v1606 = v93[19];
              v996 = (float *)v34[19];
              v1537 = 0;
              v1560 = (int)v202;
              v997 = 4 * (int)v202;
              do
              {
                if (v36[1])
                {
                  v998 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1652 + 4 * v995), 1, (const float *)&v1606[v994], 1, v996, 1, v1560);
                    v35 = *a1;
                    v999 = *(_QWORD **)(*a1 + 24);
                    v1000 = v999[1];
                    v995 += v1000;
                    v93 = (int **)*a2;
                    v1001 = *(int **)(*a2 + 24);
                    v1002 = *((_QWORD *)v1001 + 1);
                    v994 += v1002;
                    ++v998;
                    v36 = *(int **)*a1;
                    v1003 = v36[1];
                    v996 = (float *)((char *)v996 + v997);
                  }
                  while (v998 < v1003);
                  v993 = *v36;
                  v94 = *v93;
                }
                else
                {
                  v1003 = 0;
                  v999 = *(_QWORD **)(v35 + 24);
                  v1000 = v999[1];
                  v1001 = v93[3];
                  v1002 = *((_QWORD *)v1001 + 1);
                }
                v995 = *v999 + v995 - v1003 * v1000;
                v994 = *(_QWORD *)v1001 + v994 - v1002 * v94[1];
                ++v1537;
              }
              while (v1537 < v993);
            }
          }
          else if (v201 == 1)
          {
            if (*v36)
            {
              v203 = 0;
              v204 = 0;
              v205 = 0;
              v206 = *(_QWORD *)(v35 + 152);
              v207 = v93[19];
              v208 = (int)v202;
              v209 = 4 * (int)v202;
              v210 = (float *)v34[19];
              do
              {
                vDSP_vmul((const float *)(v206 + 4 * v205), 1, (const float *)&v207[v204], 1, v210, 1, v208);
                v205 += **(_QWORD **)(*a1 + 24);
                v204 += **(_QWORD **)(*a2 + 24);
                ++v203;
                v210 = (float *)((char *)v210 + v209);
              }
              while (v203 < **(int **)*a1);
            }
          }
          else if (v34[6])
          {
            v1004 = 0;
            v1607 = v93[19];
            v1653 = *(_QWORD *)(v35 + 152);
            v1561 = (int)v202;
            v1005 = (float *)v34[19];
            do
            {
              v1006 = *(_QWORD *)*a1;
              v1007 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1006) >> 2;
              v1008 = 0;
              v1009 = (v1007 - 1);
              if ((int)v1007 - 1 >= 0)
              {
                v1010 = *(_QWORD *)(*a1 + 24);
                v1011 = v1004;
                do
                {
                  v1012 = ldiv(v1011, *(int *)(v1006 + 4 * v1009));
                  v1011 = v1012.quot;
                  v1008 += *(_QWORD *)(v1010 + 8 * v1009--) * v1012.rem;
                }
                while (v1009 != -1);
              }
              v1013 = *(_QWORD *)*a2;
              v1014 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1013) >> 2;
              v1015 = 0;
              v1016 = (v1014 - 1);
              if ((int)v1014 - 1 >= 0)
              {
                v1017 = *(_QWORD *)(*a2 + 24);
                v1018 = v1004;
                do
                {
                  v1019 = ldiv(v1018, *(int *)(v1013 + 4 * v1016));
                  v1018 = v1019.quot;
                  v1015 += *(_QWORD *)(v1017 + 8 * v1016--) * v1019.rem;
                }
                while (v1016 != -1);
              }
              vDSP_vmul((const float *)(v1653 + 4 * (int)v1008), 1, (const float *)&v1607[(int)v1015], 1, v1005, 1, v1561);
              v1005 += v1561;
              v1004 += v1561;
            }
            while (v1004 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_302:
          switch(v198)
          {
            case 1uLL:
              v211 = v34[6];
              if (v211)
              {
                v212 = *(_DWORD **)(v35 + 152);
                v213 = v93[19];
                v214 = (_DWORD *)v34[19];
                v215 = 4 * *(_QWORD *)v93[3];
                v216 = 4 * **(_QWORD **)(v35 + 24);
                do
                {
                  *v214++ = *v213 * *v212;
                  v213 = (int *)((char *)v213 + v215);
                  v212 = (_DWORD *)((char *)v212 + v216);
                  --v211;
                }
                while (v211);
              }
              break;
            case 2uLL:
              v456 = *v36;
              if (*v36)
              {
                v457 = 0;
                v458 = 0;
                v459 = 0;
                v460 = 0;
                v461 = *(_QWORD *)(v35 + 152);
                v462 = v93[19];
                v463 = v34[19];
                v464 = *(uint64_t **)(v35 + 24);
                v465 = *v464;
                v466 = v464[1];
                v467 = v93[3];
                v469 = *(_QWORD *)v467;
                v468 = *((_QWORD *)v467 + 1);
                v470 = v36[1];
                do
                {
                  if (v470)
                  {
                    for (i = 0; i < v470; ++i)
                    {
                      *(_DWORD *)(v463 + 4 * v458 + 4 * i) = v462[v459] * *(_DWORD *)(v461 + 4 * v460);
                      v460 += v466;
                      v459 += v468;
                      v470 = v36[1];
                    }
                    v472 = v470;
                    v456 = *v36;
                    v458 += i;
                  }
                  else
                  {
                    v472 = 0;
                  }
                  v460 = v460 + v465 - v472 * v466;
                  v459 = v459 + v469 - v468 * v94[1];
                  ++v457;
                }
                while (v457 < v456);
              }
              break;
            case 3uLL:
              v473 = *v36;
              if (*v36)
              {
                v474 = 0;
                v475 = 0;
                v476 = 0;
                v477 = 0;
                v478 = *(_QWORD *)(v35 + 152);
                v479 = v93[19];
                v480 = v34[19];
                v481 = *(uint64_t **)(v35 + 24);
                v482 = *v481;
                v483 = v481[1];
                v484 = v93[3];
                v485 = *(_QWORD *)v484;
                v486 = *((_QWORD *)v484 + 1);
                v487 = v36[1];
                v488 = v487;
                do
                {
                  if (v488)
                  {
                    v489 = 0;
                    v490 = v481[2];
                    v491 = *((_QWORD *)v484 + 2);
                    v492 = v36[2];
                    do
                    {
                      if (v492)
                      {
                        for (j = 0; j < v492; ++j)
                        {
                          *(_DWORD *)(v480 + 4 * v475 + 4 * j) = v479[v476] * *(_DWORD *)(v478 + 4 * v477);
                          v477 += v490;
                          v476 += v491;
                          v492 = v36[2];
                        }
                        v494 = v492;
                        v487 = v36[1];
                        v475 += j;
                      }
                      else
                      {
                        v494 = 0;
                      }
                      v477 = v477 + v483 - v494 * v490;
                      v476 = v476 + v486 - v491 * v94[2];
                      ++v489;
                    }
                    while (v489 < v487);
                    v495 = v487;
                    v473 = *v36;
                    v488 = v487;
                  }
                  else
                  {
                    v495 = 0;
                  }
                  v477 = v477 + v482 - v495 * v483;
                  v476 = v476 + v485 - v486 * v94[1];
                  ++v474;
                }
                while (v474 < v473);
              }
              break;
            case 4uLL:
              v496 = *v36;
              if (*v36)
              {
                v497 = 0;
                v498 = 0;
                v499 = 0;
                v500 = 0;
                v501 = *(_QWORD *)(v35 + 152);
                v502 = v93[19];
                v503 = v34[19];
                v504 = *(uint64_t **)(v35 + 24);
                v505 = *v504;
                v506 = v504[1];
                v507 = v93[3];
                v508 = *(_QWORD *)v507;
                v509 = *((_QWORD *)v507 + 1);
                v510 = v36[1];
                v511 = v510;
                do
                {
                  if (v511)
                  {
                    v512 = 0;
                    v513 = v504[2];
                    v514 = *((_QWORD *)v507 + 2);
                    v515 = v36[2];
                    v516 = v515;
                    do
                    {
                      if (v516)
                      {
                        v517 = 0;
                        v518 = v504[3];
                        v519 = *((_QWORD *)v507 + 3);
                        v520 = v36[3];
                        do
                        {
                          if (v520)
                          {
                            for (k = 0; k < v520; ++k)
                            {
                              *(_DWORD *)(v503 + 4 * v498 + 4 * k) = v502[v499] * *(_DWORD *)(v501 + 4 * v500);
                              v500 += v518;
                              v499 += v519;
                              v520 = v36[3];
                            }
                            v522 = v520;
                            v515 = v36[2];
                            v498 += k;
                          }
                          else
                          {
                            v522 = 0;
                          }
                          v500 = v500 + v513 - v522 * v518;
                          v499 = v499 + v514 - v519 * v94[3];
                          ++v517;
                        }
                        while (v517 < v515);
                        v523 = v515;
                        v510 = v36[1];
                        v516 = v515;
                      }
                      else
                      {
                        v523 = 0;
                      }
                      v500 = v500 + v506 - v523 * v513;
                      v499 = v499 + v509 - v514 * v94[2];
                      ++v512;
                    }
                    while (v512 < v510);
                    v524 = v510;
                    v496 = *v36;
                    v511 = v510;
                  }
                  else
                  {
                    v524 = 0;
                  }
                  v500 = v500 + v505 - v524 * v506;
                  v499 = v499 + v508 - v509 * v94[1];
                  ++v497;
                }
                while (v497 < v496);
              }
              break;
            default:
              v1596 = v34[6];
              v1642 = v38;
              if (v1596)
              {
                v445 = 0;
                v1531 = v93[19];
                v1551 = *(_QWORD *)(v35 + 152);
                v1524 = v34[19];
                do
                {
                  v446 = v1642;
                  if ((v1642 & 0x80000000) != 0)
                  {
                    LODWORD(v447) = 0;
                  }
                  else
                  {
                    v447 = 0;
                    v448 = *(_QWORD *)(v35 + 24);
                    v449 = v445;
                    do
                    {
                      v450 = ldiv(v449, v36[v446]);
                      v449 = v450.quot;
                      v447 += *(_QWORD *)(v448 + 8 * v446--) * v450.rem;
                    }
                    while (v446 != -1);
                  }
                  v451 = 0;
                  if ((v96 & 0x80000000) == 0)
                  {
                    v452 = v93[3];
                    v453 = v96;
                    v454 = v445;
                    do
                    {
                      v455 = ldiv(v454, v94[v453]);
                      v454 = v455.quot;
                      v451 += *(_QWORD *)&v452[2 * v453--] * v455.rem;
                    }
                    while (v453 != -1);
                  }
                  *(_DWORD *)(v1524 + 4 * v445++) = v1531[(int)v451] * *(_DWORD *)(v1551 + 4 * (int)v447);
                }
                while (v445 != v1596);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v11)
      {
        case 0:
LABEL_12:
          v8 = **(_BYTE **)(*a2 + 152) * **(_BYTE **)(*a1 + 152);
LABEL_13:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v8;
          return;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_24;
        default:
          v43 = *(_QWORD **)a3;
          v44 = *a1;
          v45 = *(int **)*a1;
          v46 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v45) >> 2;
          v47 = v46 - 1;
          if ((int)v46 - 1 >= -1)
            v47 = -1;
          v48 = v47 + 1;
          v49 = v46 + 1;
          break;
      }
      while (1)
      {
        v50 = v49 - 2;
        if (v49 - 2 < 0)
          break;
        --v49;
        if (*(_QWORD *)(*(_QWORD *)(v44 + 24) + 8 * v50) != *(_QWORD *)(v43[3] + 8 * v50))
          goto LABEL_96;
      }
      v49 = v48;
LABEL_96:
      v101 = (int **)*a2;
      v102 = *(int **)*a2;
      v103 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v102) >> 2;
      v104 = v103 - 1;
      if ((int)v103 - 1 >= -1)
        v104 = -1;
      v105 = v104 + 1;
      v106 = v103 + 1;
      while (1)
      {
        v107 = v106 - 2;
        if (v106 - 2 < 0)
          break;
        --v106;
        if (*(_QWORD *)&v101[3][2 * v107] != *(_QWORD *)(v43[3] + 8 * v107))
          goto LABEL_142;
      }
      v106 = v105;
LABEL_142:
      v138 = v46 + 1;
      while (1)
      {
        v139 = v138 - 2;
        if (v138 - 2 < 0)
          break;
        --v138;
        if (*(_QWORD *)(*(_QWORD *)(v44 + 24) + 8 * v139))
          goto LABEL_177;
      }
      v138 = v48;
LABEL_177:
      v152 = v103 + 1;
      while (1)
      {
        v153 = v152 - 2;
        if (v152 - 2 < 0)
          break;
        --v152;
        if (*(_QWORD *)&v101[3][2 * v153])
          goto LABEL_308;
      }
      v152 = v105;
LABEL_308:
      v217 = (uint64_t)(v43[1] - *v43) >> 2;
      if (v49 <= v106)
        v218 = v106;
      else
        v218 = v49;
      if (v49 <= v152)
        v49 = v152;
      if (v138 > v106)
        v106 = v138;
      if (v217 > v106)
        v219 = 1;
      else
        v219 = 4;
      if (v217 <= v106)
        v106 = (uint64_t)(v43[1] - *v43) >> 2;
      if (v217 <= v49)
        v49 = v106;
      else
        v219 = 2;
      if (v217 <= v218)
      {
        v220 = v49;
      }
      else
      {
        v219 = 3;
        v220 = v218;
      }
      if (!v220)
        goto LABEL_337;
      v221 = *(_QWORD *)(v43[3] + 8 * (v220 - 1));
      if (v221 < 0x10)
        goto LABEL_337;
      switch(v219)
      {
        case 1:
          if (v220 == 2)
          {
            v1299 = *v45;
            if (*v45)
            {
              v1300 = 0;
              v1301 = 0;
              v1302 = 0;
              v1303 = *(_QWORD *)(v44 + 152);
              v1304 = v101[19];
              v1305 = (int)v221;
              v1306 = (float *)v43[19];
              do
              {
                if (v45[1])
                {
                  v1307 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)((char *)v1304 + v1301), 1, (const float *)(v1303 + v1302), v1306, 1, v1305);
                    v44 = *a1;
                    v1308 = *(_QWORD **)(*a1 + 24);
                    v1309 = v1308[1];
                    v1302 += v1309;
                    v101 = (int **)*a2;
                    v1310 = *(int **)(*a2 + 24);
                    v1311 = *((_QWORD *)v1310 + 1);
                    v1301 += v1311;
                    v1306 = (float *)((char *)v1306 + v1305);
                    ++v1307;
                    v45 = *(int **)*a1;
                    v1312 = v45[1];
                  }
                  while (v1307 < v1312);
                  v1299 = *v45;
                  v102 = *v101;
                }
                else
                {
                  v1312 = 0;
                  v1308 = *(_QWORD **)(v44 + 24);
                  v1309 = v1308[1];
                  v1310 = v101[3];
                  v1311 = *((_QWORD *)v1310 + 1);
                }
                v1302 = *v1308 + v1302 - v1312 * v1309;
                v1301 = *(_QWORD *)v1310 + v1301 - v1311 * v102[1];
                ++v1300;
              }
              while (v1300 < v1299);
            }
          }
          else if (v220 == 1)
          {
            if (*v45)
            {
              v874 = 0;
              v875 = 0;
              v876 = 0;
              v877 = *(_QWORD *)(v44 + 152);
              v878 = v101[19];
              v879 = (int)v221;
              v880 = (float *)v43[19];
              do
              {
                vDSP_vsmul((const float *)((char *)v878 + v875), 1, (const float *)(v877 + v876), v880, 1, v879);
                v876 += **(_QWORD **)(*a1 + 24);
                v875 += **(_QWORD **)(*a2 + 24);
                v880 = (float *)((char *)v880 + v879);
                ++v874;
              }
              while (v874 < **(int **)*a1);
            }
          }
          else if (v43[6])
          {
            v1313 = 0;
            v1625 = v101[19];
            v1671 = *(_QWORD *)(v44 + 152);
            v1579 = (int)v221;
            v1314 = (float *)v43[19];
            do
            {
              v1315 = *(_QWORD *)*a1;
              v1316 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1315) >> 2;
              v1317 = 0;
              v1318 = (v1316 - 1);
              if ((int)v1316 - 1 >= 0)
              {
                v1319 = *(_QWORD *)(*a1 + 24);
                v1320 = v1313;
                do
                {
                  v1321 = ldiv(v1320, *(int *)(v1315 + 4 * v1318));
                  v1320 = v1321.quot;
                  v1317 += *(_QWORD *)(v1319 + 8 * v1318--) * v1321.rem;
                }
                while (v1318 != -1);
              }
              v1322 = *(_QWORD *)*a2;
              v1323 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1322) >> 2;
              v1324 = 0;
              v1325 = (v1323 - 1);
              if ((int)v1323 - 1 >= 0)
              {
                v1326 = *(_QWORD *)(*a2 + 24);
                v1327 = v1313;
                do
                {
                  v1328 = ldiv(v1327, *(int *)(v1322 + 4 * v1325));
                  v1327 = v1328.quot;
                  v1324 += *(_QWORD *)(v1326 + 8 * v1325--) * v1328.rem;
                }
                while (v1325 != -1);
              }
              vDSP_vsmul((const float *)((char *)v1625 + (int)v1324), 1, (const float *)(v1671 + (int)v1317), v1314, 1, v1579);
              v1314 = (float *)((char *)v1314 + v1579);
              v1313 += v1579;
            }
            while (v1313 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v220 == 2)
          {
            v1329 = *v45;
            if (*v45)
            {
              v1330 = 0;
              v1331 = 0;
              v1332 = 0;
              v1333 = *(_QWORD *)(v44 + 152);
              v1334 = v101[19];
              v1335 = (int)v221;
              v1336 = (float *)v43[19];
              do
              {
                if (v45[1])
                {
                  v1337 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1333 + v1332), 1, (const float *)((char *)v1334 + v1331), v1336, 1, v1335);
                    v44 = *a1;
                    v1338 = *(_QWORD **)(*a1 + 24);
                    v1339 = v1338[1];
                    v1332 += v1339;
                    v101 = (int **)*a2;
                    v1340 = *(int **)(*a2 + 24);
                    v1341 = *((_QWORD *)v1340 + 1);
                    v1331 += v1341;
                    v1336 = (float *)((char *)v1336 + v1335);
                    ++v1337;
                    v45 = *(int **)*a1;
                    v1342 = v45[1];
                  }
                  while (v1337 < v1342);
                  v1329 = *v45;
                  v102 = *v101;
                }
                else
                {
                  v1342 = 0;
                  v1338 = *(_QWORD **)(v44 + 24);
                  v1339 = v1338[1];
                  v1340 = v101[3];
                  v1341 = *((_QWORD *)v1340 + 1);
                }
                v1332 = *v1338 + v1332 - v1342 * v1339;
                v1331 = *(_QWORD *)v1340 + v1331 - v1341 * v102[1];
                ++v1330;
              }
              while (v1330 < v1329);
            }
          }
          else if (v220 == 1)
          {
            if (*v45)
            {
              v881 = 0;
              v882 = 0;
              v883 = 0;
              v884 = *(_QWORD *)(v44 + 152);
              v885 = v101[19];
              v886 = (int)v221;
              v887 = (float *)v43[19];
              do
              {
                vDSP_vsmul((const float *)(v884 + v883), 1, (const float *)((char *)v885 + v882), v887, 1, v886);
                v883 += **(_QWORD **)(*a1 + 24);
                v882 += **(_QWORD **)(*a2 + 24);
                v887 = (float *)((char *)v887 + v886);
                ++v881;
              }
              while (v881 < **(int **)*a1);
            }
          }
          else if (v43[6])
          {
            v1343 = 0;
            v1626 = v101[19];
            v1672 = *(_QWORD *)(v44 + 152);
            v1580 = (int)v221;
            v1344 = (float *)v43[19];
            do
            {
              v1345 = *(_QWORD *)*a1;
              v1346 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1345) >> 2;
              v1347 = 0;
              v1348 = (v1346 - 1);
              if ((int)v1346 - 1 >= 0)
              {
                v1349 = *(_QWORD *)(*a1 + 24);
                v1350 = v1343;
                do
                {
                  v1351 = ldiv(v1350, *(int *)(v1345 + 4 * v1348));
                  v1350 = v1351.quot;
                  v1347 += *(_QWORD *)(v1349 + 8 * v1348--) * v1351.rem;
                }
                while (v1348 != -1);
              }
              v1352 = *(_QWORD *)*a2;
              v1353 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1352) >> 2;
              v1354 = 0;
              v1355 = (v1353 - 1);
              if ((int)v1353 - 1 >= 0)
              {
                v1356 = *(_QWORD *)(*a2 + 24);
                v1357 = v1343;
                do
                {
                  v1358 = ldiv(v1357, *(int *)(v1352 + 4 * v1355));
                  v1357 = v1358.quot;
                  v1354 += *(_QWORD *)(v1356 + 8 * v1355--) * v1358.rem;
                }
                while (v1355 != -1);
              }
              vDSP_vsmul((const float *)(v1672 + (int)v1347), 1, (const float *)((char *)v1626 + (int)v1354), v1344, 1, v1580);
              v1344 = (float *)((char *)v1344 + v1580);
              v1343 += v1580;
            }
            while (v1343 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v220 == 2)
          {
            v1020 = *v45;
            if (*v45)
            {
              v1021 = 0;
              v1022 = 0;
              v1023 = 0;
              v1024 = *(_QWORD *)(v44 + 152);
              v1025 = v101[19];
              v1026 = (int)v221;
              v1027 = (float *)v43[19];
              do
              {
                if (v45[1])
                {
                  v1028 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1024 + v1023), 1, (const float *)((char *)v1025 + v1022), 1, v1027, 1, v1026);
                    v44 = *a1;
                    v1029 = *(_QWORD **)(*a1 + 24);
                    v1030 = v1029[1];
                    v1023 += v1030;
                    v101 = (int **)*a2;
                    v1031 = *(int **)(*a2 + 24);
                    v1032 = *((_QWORD *)v1031 + 1);
                    v1022 += v1032;
                    v1027 = (float *)((char *)v1027 + v1026);
                    ++v1028;
                    v45 = *(int **)*a1;
                    v1033 = v45[1];
                  }
                  while (v1028 < v1033);
                  v1020 = *v45;
                  v102 = *v101;
                }
                else
                {
                  v1033 = 0;
                  v1029 = *(_QWORD **)(v44 + 24);
                  v1030 = v1029[1];
                  v1031 = v101[3];
                  v1032 = *((_QWORD *)v1031 + 1);
                }
                v1023 = *v1029 + v1023 - v1033 * v1030;
                v1022 = *(_QWORD *)v1031 + v1022 - v1032 * v102[1];
                ++v1021;
              }
              while (v1021 < v1020);
            }
          }
          else if (v220 == 1)
          {
            if (*v45)
            {
              v222 = 0;
              v223 = 0;
              v224 = 0;
              v225 = *(_QWORD *)(v44 + 152);
              v226 = v101[19];
              v227 = (int)v221;
              v228 = (float *)v43[19];
              do
              {
                vDSP_vmul((const float *)(v225 + v224), 1, (const float *)((char *)v226 + v223), 1, v228, 1, v227);
                v224 += **(_QWORD **)(*a1 + 24);
                v223 += **(_QWORD **)(*a2 + 24);
                v228 = (float *)((char *)v228 + v227);
                ++v222;
              }
              while (v222 < **(int **)*a1);
            }
          }
          else if (v43[6])
          {
            v1034 = 0;
            v1608 = v101[19];
            v1654 = *(_QWORD *)(v44 + 152);
            v1562 = (int)v221;
            v1035 = (float *)v43[19];
            do
            {
              v1036 = *(_QWORD *)*a1;
              v1037 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1036) >> 2;
              v1038 = 0;
              v1039 = (v1037 - 1);
              if ((int)v1037 - 1 >= 0)
              {
                v1040 = *(_QWORD *)(*a1 + 24);
                v1041 = v1034;
                do
                {
                  v1042 = ldiv(v1041, *(int *)(v1036 + 4 * v1039));
                  v1041 = v1042.quot;
                  v1038 += *(_QWORD *)(v1040 + 8 * v1039--) * v1042.rem;
                }
                while (v1039 != -1);
              }
              v1043 = *(_QWORD *)*a2;
              v1044 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1043) >> 2;
              v1045 = 0;
              v1046 = (v1044 - 1);
              if ((int)v1044 - 1 >= 0)
              {
                v1047 = *(_QWORD *)(*a2 + 24);
                v1048 = v1034;
                do
                {
                  v1049 = ldiv(v1048, *(int *)(v1043 + 4 * v1046));
                  v1048 = v1049.quot;
                  v1045 += *(_QWORD *)(v1047 + 8 * v1046--) * v1049.rem;
                }
                while (v1046 != -1);
              }
              vDSP_vmul((const float *)(v1654 + (int)v1038), 1, (const float *)((char *)v1608 + (int)v1045), 1, v1035, 1, v1562);
              v1035 = (float *)((char *)v1035 + v1562);
              v1034 += v1562;
            }
            while (v1034 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_337:
          switch(v217)
          {
            case 1uLL:
              if (v43[6])
              {
                v229 = 0;
                v230 = 0;
                v231 = 0;
                v232 = *(_QWORD *)(v44 + 152);
                v233 = v101[19];
                v234 = v43[19];
                do
                {
                  *(_BYTE *)(v234 + v229) = *((_BYTE *)v233 + v230) * *(_BYTE *)(v232 + v231);
                  v231 += **(_QWORD **)(*a1 + 24);
                  v230 += **(_QWORD **)(*a2 + 24);
                  ++v229;
                }
                while (v229 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v541 = *v45;
              if (*v45)
              {
                v542 = 0;
                v543 = 0;
                v544 = 0;
                v545 = 0;
                v546 = *(_QWORD *)(v44 + 152);
                v547 = v101[19];
                v548 = v43[19];
                do
                {
                  if (v45[1])
                  {
                    v549 = 0;
                    do
                    {
                      *(_BYTE *)(v548 + v543 + v549) = *((_BYTE *)v547 + v544) * *(_BYTE *)(v546 + v545);
                      v44 = *a1;
                      v550 = *(_QWORD **)(*a1 + 24);
                      v551 = v550[1];
                      v545 += v551;
                      v101 = (int **)*a2;
                      v552 = *(int **)(*a2 + 24);
                      v553 = *((_QWORD *)v552 + 1);
                      v544 += v553;
                      ++v549;
                      v45 = *(int **)*a1;
                      v554 = v45[1];
                    }
                    while (v549 < v554);
                    v541 = *v45;
                    v102 = *v101;
                    v543 += v549;
                  }
                  else
                  {
                    v554 = 0;
                    v550 = *(_QWORD **)(v44 + 24);
                    v551 = v550[1];
                    v552 = v101[3];
                    v553 = *((_QWORD *)v552 + 1);
                  }
                  v545 = *v550 + v545 - v554 * v551;
                  v544 = *(_QWORD *)v552 + v544 - v553 * v102[1];
                  ++v542;
                }
                while (v542 < v541);
              }
              break;
            case 3uLL:
              v555 = *v45;
              if (*v45)
              {
                v556 = 0;
                v557 = 0;
                v558 = 0;
                v559 = 0;
                v560 = *(_QWORD *)(v44 + 152);
                v561 = v101[19];
                v562 = v43[19];
                do
                {
                  if (v45[1])
                  {
                    v563 = 0;
                    do
                    {
                      if (v45[2])
                      {
                        v564 = 0;
                        do
                        {
                          *(_BYTE *)(v562 + v557 + v564) = *((_BYTE *)v561 + v558) * *(_BYTE *)(v560 + v559);
                          v44 = *a1;
                          v565 = *(_QWORD **)(*a1 + 24);
                          v566 = v565[2];
                          v559 += v566;
                          v101 = (int **)*a2;
                          v567 = *(int **)(*a2 + 24);
                          v568 = *((_QWORD *)v567 + 2);
                          v558 += v568;
                          ++v564;
                          v45 = *(int **)*a1;
                          v569 = v45[2];
                        }
                        while (v564 < v569);
                        v102 = *v101;
                        v557 += v564;
                      }
                      else
                      {
                        v569 = 0;
                        v565 = *(_QWORD **)(v44 + 24);
                        v566 = v565[2];
                        v567 = v101[3];
                        v568 = *((_QWORD *)v567 + 2);
                      }
                      v570 = v565[1];
                      v559 = v570 + v559 - v569 * v566;
                      v558 = *((_QWORD *)v567 + 1) + v558 - v568 * v102[2];
                      ++v563;
                      v571 = v45[1];
                    }
                    while (v563 < v571);
                    v555 = *v45;
                  }
                  else
                  {
                    v571 = 0;
                    v565 = *(_QWORD **)(v44 + 24);
                    v570 = v565[1];
                  }
                  v559 = *v565 + v559 - v571 * v570;
                  v558 = *(_QWORD *)v101[3] + v558 - *((_QWORD *)v101[3] + 1) * v102[1];
                  ++v556;
                }
                while (v556 < v555);
              }
              break;
            case 4uLL:
              v572 = *v45;
              if (*v45)
              {
                v573 = 0;
                v574 = 0;
                v575 = 0;
                v576 = 0;
                v577 = *(_QWORD *)(v44 + 152);
                v578 = v101[19];
                v579 = v43[19];
                do
                {
                  if (v45[1])
                  {
                    v580 = 0;
                    do
                    {
                      if (v45[2])
                      {
                        v581 = 0;
                        do
                        {
                          if (v45[3])
                          {
                            v582 = 0;
                            do
                            {
                              *(_BYTE *)(v579 + v574 + v582) = *((_BYTE *)v578 + v575) * *(_BYTE *)(v577 + v576);
                              v44 = *a1;
                              v583 = *(_QWORD **)(*a1 + 24);
                              v584 = v583[3];
                              v576 += v584;
                              v101 = (int **)*a2;
                              v585 = *(int **)(*a2 + 24);
                              v586 = *((_QWORD *)v585 + 3);
                              v575 += v586;
                              ++v582;
                              v45 = *(int **)*a1;
                              v587 = v45[3];
                            }
                            while (v582 < v587);
                            v102 = *v101;
                            v574 += v582;
                          }
                          else
                          {
                            v587 = 0;
                            v583 = *(_QWORD **)(v44 + 24);
                            v584 = v583[3];
                            v585 = v101[3];
                            v586 = *((_QWORD *)v585 + 3);
                          }
                          v588 = v583[2];
                          v576 = v588 + v576 - v587 * v584;
                          v575 = *((_QWORD *)v585 + 2) + v575 - v586 * v102[3];
                          ++v581;
                          v589 = v45[2];
                        }
                        while (v581 < v589);
                      }
                      else
                      {
                        v589 = 0;
                        v583 = *(_QWORD **)(v44 + 24);
                        v588 = v583[2];
                      }
                      v576 = v583[1] + v576 - v589 * v588;
                      v575 = *((_QWORD *)v101[3] + 1) + v575 - *((_QWORD *)v101[3] + 2) * v102[2];
                      ++v580;
                      v590 = v45[1];
                    }
                    while (v580 < v590);
                    v572 = *v45;
                  }
                  else
                  {
                    v590 = 0;
                  }
                  v576 = **(_QWORD **)(v44 + 24) + v576 - *(_QWORD *)(*(_QWORD *)(v44 + 24) + 8) * v590;
                  v575 = *(_QWORD *)v101[3] + v575 - *((_QWORD *)v101[3] + 1) * v102[1];
                  ++v573;
                }
                while (v573 < v572);
              }
              break;
            default:
              if (v43[6])
              {
                v525 = 0;
                v1597 = v101[19];
                v1643 = *(_QWORD *)(v44 + 152);
                v526 = v43[19];
                do
                {
                  v527 = *(_QWORD *)*a1;
                  v528 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v527) >> 2;
                  v529 = 0;
                  v530 = (v528 - 1);
                  if ((int)v528 - 1 >= 0)
                  {
                    v531 = *(_QWORD *)(*a1 + 24);
                    v532 = v525;
                    do
                    {
                      v533 = ldiv(v532, *(int *)(v527 + 4 * v530));
                      v532 = v533.quot;
                      v529 += *(_QWORD *)(v531 + 8 * v530--) * v533.rem;
                    }
                    while (v530 != -1);
                  }
                  v534 = *(_QWORD *)*a2;
                  v535 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v534) >> 2;
                  v536 = 0;
                  v537 = (v535 - 1);
                  if ((int)v535 - 1 >= 0)
                  {
                    v538 = *(_QWORD *)(*a2 + 24);
                    v539 = v525;
                    do
                    {
                      v540 = ldiv(v539, *(int *)(v534 + 4 * v537));
                      v539 = v540.quot;
                      v536 += *(_QWORD *)(v538 + 8 * v537--) * v540.rem;
                    }
                    while (v537 != -1);
                  }
                  *(_BYTE *)(v526 + v525++) = *((_BYTE *)v1597 + (int)v536) * *(_BYTE *)(v1643 + (int)v529);
                }
                while (v525 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v12)
      {
        case 0:
LABEL_15:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a2 + 152) * **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_24;
        default:
          v51 = *(_QWORD **)a3;
          v52 = *a1;
          v53 = *(int **)*a1;
          v54 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v53) >> 2;
          v55 = (v54 - 1);
          if ((int)v55 >= -1)
            v56 = -1;
          else
            v56 = v54 - 1;
          v57 = v56 + 1;
          v58 = v54 + 1;
          break;
      }
      while (1)
      {
        v59 = v58 - 2;
        if (v58 - 2 < 0)
          break;
        --v58;
        if (*(_QWORD *)(*(_QWORD *)(v52 + 24) + 8 * v59) != *(_QWORD *)(v51[3] + 8 * v59))
          goto LABEL_103;
      }
      v58 = v57;
LABEL_103:
      v108 = (int **)*a2;
      v109 = *(int **)*a2;
      v110 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v109) >> 2;
      v111 = (v110 - 1);
      if ((int)v111 >= -1)
        v112 = -1;
      else
        v112 = v110 - 1;
      v113 = v112 + 1;
      v114 = v110 + 1;
      while (1)
      {
        v115 = v114 - 2;
        if (v114 - 2 < 0)
          break;
        --v114;
        if (*(_QWORD *)&v108[3][2 * v115] != *(_QWORD *)(v51[3] + 8 * v115))
          goto LABEL_147;
      }
      v114 = v113;
LABEL_147:
      v140 = v54 + 1;
      while (1)
      {
        v141 = v140 - 2;
        if (v140 - 2 < 0)
          break;
        --v140;
        if (*(_QWORD *)(*(_QWORD *)(v52 + 24) + 8 * v141))
          goto LABEL_182;
      }
      v140 = v57;
LABEL_182:
      v154 = v110 + 1;
      while (1)
      {
        v155 = v154 - 2;
        if (v154 - 2 < 0)
          break;
        --v154;
        if (*(_QWORD *)&v108[3][2 * v155])
          goto LABEL_343;
      }
      v154 = v113;
LABEL_343:
      v235 = (uint64_t)(v51[1] - *v51) >> 2;
      if (v58 <= v114)
        v236 = v114;
      else
        v236 = v58;
      if (v58 <= v154)
        v58 = v154;
      if (v140 > v114)
        v114 = v140;
      if (v235 > v114)
        v237 = 1;
      else
        v237 = 4;
      if (v235 <= v114)
        v114 = (uint64_t)(v51[1] - *v51) >> 2;
      if (v235 <= v58)
        v58 = v114;
      else
        v237 = 2;
      if (v235 <= v236)
      {
        v238 = v58;
      }
      else
      {
        v237 = 3;
        v238 = v236;
      }
      if (!v238)
        goto LABEL_372;
      v239 = *(_QWORD *)(v51[3] + 8 * (v238 - 1));
      if (v239 < 0x10)
        goto LABEL_372;
      switch(v237)
      {
        case 1:
          if (v238 == 2)
          {
            v1359 = *v53;
            if (*v53)
            {
              v1360 = 0;
              v1361 = 0;
              v1673 = *(_QWORD *)(v52 + 152);
              v1627 = v108[19];
              v1362 = (float *)v51[19];
              v1543 = 0;
              v1581 = (int)v239;
              v1363 = 4 * (int)v239;
              do
              {
                if (v53[1])
                {
                  v1364 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1627[v1360], 1, (const float *)(v1673 + 4 * v1361), v1362, 1, v1581);
                    v52 = *a1;
                    v1365 = *(_QWORD **)(*a1 + 24);
                    v1366 = v1365[1];
                    v1361 += v1366;
                    v108 = (int **)*a2;
                    v1367 = *(int **)(*a2 + 24);
                    v1368 = *((_QWORD *)v1367 + 1);
                    v1360 += v1368;
                    ++v1364;
                    v53 = *(int **)*a1;
                    v1369 = v53[1];
                    v1362 = (float *)((char *)v1362 + v1363);
                  }
                  while (v1364 < v1369);
                  v1359 = *v53;
                  v109 = *v108;
                }
                else
                {
                  v1369 = 0;
                  v1365 = *(_QWORD **)(v52 + 24);
                  v1366 = v1365[1];
                  v1367 = v108[3];
                  v1368 = *((_QWORD *)v1367 + 1);
                }
                v1361 = *v1365 + v1361 - v1369 * v1366;
                v1360 = *(_QWORD *)v1367 + v1360 - v1368 * v109[1];
                ++v1543;
              }
              while (v1543 < v1359);
            }
          }
          else if (v238 == 1)
          {
            if (*v53)
            {
              v888 = 0;
              v889 = 0;
              v890 = 0;
              v891 = *(_QWORD *)(v52 + 152);
              v892 = v108[19];
              v893 = (int)v239;
              v894 = 4 * (int)v239;
              v895 = (float *)v51[19];
              do
              {
                vDSP_vsmul((const float *)&v892[v889], 1, (const float *)(v891 + 4 * v890), v895, 1, v893);
                v890 += **(_QWORD **)(*a1 + 24);
                v889 += **(_QWORD **)(*a2 + 24);
                ++v888;
                v895 = (float *)((char *)v895 + v894);
              }
              while (v888 < **(int **)*a1);
            }
          }
          else if (v51[6])
          {
            v1370 = 0;
            v1628 = v108[19];
            v1674 = *(_QWORD *)(v52 + 152);
            v1582 = (int)v239;
            v1371 = (float *)v51[19];
            do
            {
              v1372 = *(_QWORD *)*a1;
              v1373 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1372) >> 2;
              v1374 = 0;
              v1375 = (v1373 - 1);
              if ((int)v1373 - 1 >= 0)
              {
                v1376 = *(_QWORD *)(*a1 + 24);
                v1377 = v1370;
                do
                {
                  v1378 = ldiv(v1377, *(int *)(v1372 + 4 * v1375));
                  v1377 = v1378.quot;
                  v1374 += *(_QWORD *)(v1376 + 8 * v1375--) * v1378.rem;
                }
                while (v1375 != -1);
              }
              v1379 = *(_QWORD *)*a2;
              v1380 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1379) >> 2;
              v1381 = 0;
              v1382 = (v1380 - 1);
              if ((int)v1380 - 1 >= 0)
              {
                v1383 = *(_QWORD *)(*a2 + 24);
                v1384 = v1370;
                do
                {
                  v1385 = ldiv(v1384, *(int *)(v1379 + 4 * v1382));
                  v1384 = v1385.quot;
                  v1381 += *(_QWORD *)(v1383 + 8 * v1382--) * v1385.rem;
                }
                while (v1382 != -1);
              }
              vDSP_vsmul((const float *)&v1628[(int)v1381], 1, (const float *)(v1674 + 4 * (int)v1374), v1371, 1, v1582);
              v1371 += v1582;
              v1370 += v1582;
            }
            while (v1370 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v238 == 2)
          {
            v1386 = *v53;
            if (*v53)
            {
              v1387 = 0;
              v1388 = 0;
              v1675 = *(_QWORD *)(v52 + 152);
              v1629 = v108[19];
              v1389 = (float *)v51[19];
              v1544 = 0;
              v1583 = (int)v239;
              v1390 = 4 * (int)v239;
              do
              {
                if (v53[1])
                {
                  v1391 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1675 + 4 * v1388), 1, (const float *)&v1629[v1387], v1389, 1, v1583);
                    v52 = *a1;
                    v1392 = *(_QWORD **)(*a1 + 24);
                    v1393 = v1392[1];
                    v1388 += v1393;
                    v108 = (int **)*a2;
                    v1394 = *(int **)(*a2 + 24);
                    v1395 = *((_QWORD *)v1394 + 1);
                    v1387 += v1395;
                    ++v1391;
                    v53 = *(int **)*a1;
                    v1396 = v53[1];
                    v1389 = (float *)((char *)v1389 + v1390);
                  }
                  while (v1391 < v1396);
                  v1386 = *v53;
                  v109 = *v108;
                }
                else
                {
                  v1396 = 0;
                  v1392 = *(_QWORD **)(v52 + 24);
                  v1393 = v1392[1];
                  v1394 = v108[3];
                  v1395 = *((_QWORD *)v1394 + 1);
                }
                v1388 = *v1392 + v1388 - v1396 * v1393;
                v1387 = *(_QWORD *)v1394 + v1387 - v1395 * v109[1];
                ++v1544;
              }
              while (v1544 < v1386);
            }
          }
          else if (v238 == 1)
          {
            if (*v53)
            {
              v896 = 0;
              v897 = 0;
              v898 = 0;
              v899 = *(_QWORD *)(v52 + 152);
              v900 = v108[19];
              v901 = (int)v239;
              v902 = 4 * (int)v239;
              v903 = (float *)v51[19];
              do
              {
                vDSP_vsmul((const float *)(v899 + 4 * v898), 1, (const float *)&v900[v897], v903, 1, v901);
                v898 += **(_QWORD **)(*a1 + 24);
                v897 += **(_QWORD **)(*a2 + 24);
                ++v896;
                v903 = (float *)((char *)v903 + v902);
              }
              while (v896 < **(int **)*a1);
            }
          }
          else if (v51[6])
          {
            v1397 = 0;
            v1630 = v108[19];
            v1676 = *(_QWORD *)(v52 + 152);
            v1584 = (int)v239;
            v1398 = (float *)v51[19];
            do
            {
              v1399 = *(_QWORD *)*a1;
              v1400 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1399) >> 2;
              v1401 = 0;
              v1402 = (v1400 - 1);
              if ((int)v1400 - 1 >= 0)
              {
                v1403 = *(_QWORD *)(*a1 + 24);
                v1404 = v1397;
                do
                {
                  v1405 = ldiv(v1404, *(int *)(v1399 + 4 * v1402));
                  v1404 = v1405.quot;
                  v1401 += *(_QWORD *)(v1403 + 8 * v1402--) * v1405.rem;
                }
                while (v1402 != -1);
              }
              v1406 = *(_QWORD *)*a2;
              v1407 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1406) >> 2;
              v1408 = 0;
              v1409 = (v1407 - 1);
              if ((int)v1407 - 1 >= 0)
              {
                v1410 = *(_QWORD *)(*a2 + 24);
                v1411 = v1397;
                do
                {
                  v1412 = ldiv(v1411, *(int *)(v1406 + 4 * v1409));
                  v1411 = v1412.quot;
                  v1408 += *(_QWORD *)(v1410 + 8 * v1409--) * v1412.rem;
                }
                while (v1409 != -1);
              }
              vDSP_vsmul((const float *)(v1676 + 4 * (int)v1401), 1, (const float *)&v1630[(int)v1408], v1398, 1, v1584);
              v1398 += v1584;
              v1397 += v1584;
            }
            while (v1397 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v238 == 2)
          {
            v1050 = *v53;
            if (*v53)
            {
              v1051 = 0;
              v1052 = 0;
              v1655 = *(_QWORD *)(v52 + 152);
              v1609 = v108[19];
              v1053 = (float *)v51[19];
              v1538 = 0;
              v1563 = (int)v239;
              v1054 = 4 * (int)v239;
              do
              {
                if (v53[1])
                {
                  v1055 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1655 + 4 * v1052), 1, (const float *)&v1609[v1051], 1, v1053, 1, v1563);
                    v52 = *a1;
                    v1056 = *(_QWORD **)(*a1 + 24);
                    v1057 = v1056[1];
                    v1052 += v1057;
                    v108 = (int **)*a2;
                    v1058 = *(int **)(*a2 + 24);
                    v1059 = *((_QWORD *)v1058 + 1);
                    v1051 += v1059;
                    ++v1055;
                    v53 = *(int **)*a1;
                    v1060 = v53[1];
                    v1053 = (float *)((char *)v1053 + v1054);
                  }
                  while (v1055 < v1060);
                  v1050 = *v53;
                  v109 = *v108;
                }
                else
                {
                  v1060 = 0;
                  v1056 = *(_QWORD **)(v52 + 24);
                  v1057 = v1056[1];
                  v1058 = v108[3];
                  v1059 = *((_QWORD *)v1058 + 1);
                }
                v1052 = *v1056 + v1052 - v1060 * v1057;
                v1051 = *(_QWORD *)v1058 + v1051 - v1059 * v109[1];
                ++v1538;
              }
              while (v1538 < v1050);
            }
          }
          else if (v238 == 1)
          {
            if (*v53)
            {
              v240 = 0;
              v241 = 0;
              v242 = 0;
              v243 = *(_QWORD *)(v52 + 152);
              v244 = v108[19];
              v245 = (int)v239;
              v246 = 4 * (int)v239;
              v247 = (float *)v51[19];
              do
              {
                vDSP_vmul((const float *)(v243 + 4 * v242), 1, (const float *)&v244[v241], 1, v247, 1, v245);
                v242 += **(_QWORD **)(*a1 + 24);
                v241 += **(_QWORD **)(*a2 + 24);
                ++v240;
                v247 = (float *)((char *)v247 + v246);
              }
              while (v240 < **(int **)*a1);
            }
          }
          else if (v51[6])
          {
            v1061 = 0;
            v1610 = v108[19];
            v1656 = *(_QWORD *)(v52 + 152);
            v1564 = (int)v239;
            v1062 = (float *)v51[19];
            do
            {
              v1063 = *(_QWORD *)*a1;
              v1064 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1063) >> 2;
              v1065 = 0;
              v1066 = (v1064 - 1);
              if ((int)v1064 - 1 >= 0)
              {
                v1067 = *(_QWORD *)(*a1 + 24);
                v1068 = v1061;
                do
                {
                  v1069 = ldiv(v1068, *(int *)(v1063 + 4 * v1066));
                  v1068 = v1069.quot;
                  v1065 += *(_QWORD *)(v1067 + 8 * v1066--) * v1069.rem;
                }
                while (v1066 != -1);
              }
              v1070 = *(_QWORD *)*a2;
              v1071 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1070) >> 2;
              v1072 = 0;
              v1073 = (v1071 - 1);
              if ((int)v1071 - 1 >= 0)
              {
                v1074 = *(_QWORD *)(*a2 + 24);
                v1075 = v1061;
                do
                {
                  v1076 = ldiv(v1075, *(int *)(v1070 + 4 * v1073));
                  v1075 = v1076.quot;
                  v1072 += *(_QWORD *)(v1074 + 8 * v1073--) * v1076.rem;
                }
                while (v1073 != -1);
              }
              vDSP_vmul((const float *)(v1656 + 4 * (int)v1065), 1, (const float *)&v1610[(int)v1072], 1, v1062, 1, v1564);
              v1062 += v1564;
              v1061 += v1564;
            }
            while (v1061 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_372:
          switch(v235)
          {
            case 1uLL:
              v248 = v51[6];
              if (v248)
              {
                v249 = *(_DWORD **)(v52 + 152);
                v250 = v108[19];
                v251 = (_DWORD *)v51[19];
                v252 = 4 * *(_QWORD *)v108[3];
                v253 = 4 * **(_QWORD **)(v52 + 24);
                do
                {
                  *v251++ = *v250 * *v249;
                  v250 = (int *)((char *)v250 + v252);
                  v249 = (_DWORD *)((char *)v249 + v253);
                  --v248;
                }
                while (v248);
              }
              break;
            case 2uLL:
              v602 = *v53;
              if (*v53)
              {
                v603 = 0;
                v604 = 0;
                v605 = 0;
                v606 = 0;
                v607 = *(_QWORD *)(v52 + 152);
                v608 = v108[19];
                v609 = v51[19];
                v610 = *(uint64_t **)(v52 + 24);
                v611 = *v610;
                v612 = v610[1];
                v613 = v108[3];
                v615 = *(_QWORD *)v613;
                v614 = *((_QWORD *)v613 + 1);
                v616 = v53[1];
                do
                {
                  if (v616)
                  {
                    for (m = 0; m < v616; ++m)
                    {
                      *(_DWORD *)(v609 + 4 * v604 + 4 * m) = v608[v605] * *(_DWORD *)(v607 + 4 * v606);
                      v606 += v612;
                      v605 += v614;
                      v616 = v53[1];
                    }
                    v618 = v616;
                    v602 = *v53;
                    v604 += m;
                  }
                  else
                  {
                    v618 = 0;
                  }
                  v606 = v606 + v611 - v618 * v612;
                  v605 = v605 + v615 - v614 * v109[1];
                  ++v603;
                }
                while (v603 < v602);
              }
              break;
            case 3uLL:
              v619 = *v53;
              if (*v53)
              {
                v620 = 0;
                v621 = 0;
                v622 = 0;
                v623 = 0;
                v624 = *(_QWORD *)(v52 + 152);
                v625 = v108[19];
                v626 = v51[19];
                v627 = *(uint64_t **)(v52 + 24);
                v628 = *v627;
                v629 = v627[1];
                v630 = v108[3];
                v631 = *(_QWORD *)v630;
                v632 = *((_QWORD *)v630 + 1);
                v633 = v53[1];
                v634 = v633;
                do
                {
                  if (v634)
                  {
                    v635 = 0;
                    v636 = v627[2];
                    v637 = *((_QWORD *)v630 + 2);
                    v638 = v53[2];
                    do
                    {
                      if (v638)
                      {
                        for (n = 0; n < v638; ++n)
                        {
                          *(_DWORD *)(v626 + 4 * v621 + 4 * n) = v625[v622] * *(_DWORD *)(v624 + 4 * v623);
                          v623 += v636;
                          v622 += v637;
                          v638 = v53[2];
                        }
                        v640 = v638;
                        v633 = v53[1];
                        v621 += n;
                      }
                      else
                      {
                        v640 = 0;
                      }
                      v623 = v623 + v629 - v640 * v636;
                      v622 = v622 + v632 - v637 * v109[2];
                      ++v635;
                    }
                    while (v635 < v633);
                    v641 = v633;
                    v619 = *v53;
                    v634 = v633;
                  }
                  else
                  {
                    v641 = 0;
                  }
                  v623 = v623 + v628 - v641 * v629;
                  v622 = v622 + v631 - v632 * v109[1];
                  ++v620;
                }
                while (v620 < v619);
              }
              break;
            case 4uLL:
              v642 = *v53;
              if (*v53)
              {
                v643 = 0;
                v644 = 0;
                v645 = 0;
                v646 = 0;
                v647 = *(_QWORD *)(v52 + 152);
                v648 = v108[19];
                v649 = v51[19];
                v650 = *(uint64_t **)(v52 + 24);
                v651 = *v650;
                v652 = v650[1];
                v653 = v108[3];
                v654 = *(_QWORD *)v653;
                v655 = *((_QWORD *)v653 + 1);
                v656 = v53[1];
                v657 = v656;
                do
                {
                  if (v657)
                  {
                    v658 = 0;
                    v659 = v650[2];
                    v660 = *((_QWORD *)v653 + 2);
                    v661 = v53[2];
                    v662 = v661;
                    do
                    {
                      if (v662)
                      {
                        v663 = 0;
                        v664 = v650[3];
                        v665 = *((_QWORD *)v653 + 3);
                        v666 = v53[3];
                        do
                        {
                          if (v666)
                          {
                            for (ii = 0; ii < v666; ++ii)
                            {
                              *(_DWORD *)(v649 + 4 * v644 + 4 * ii) = v648[v645] * *(_DWORD *)(v647 + 4 * v646);
                              v646 += v664;
                              v645 += v665;
                              v666 = v53[3];
                            }
                            v668 = v666;
                            v661 = v53[2];
                            v644 += ii;
                          }
                          else
                          {
                            v668 = 0;
                          }
                          v646 = v646 + v659 - v668 * v664;
                          v645 = v645 + v660 - v665 * v109[3];
                          ++v663;
                        }
                        while (v663 < v661);
                        v669 = v661;
                        v656 = v53[1];
                        v662 = v661;
                      }
                      else
                      {
                        v669 = 0;
                      }
                      v646 = v646 + v652 - v669 * v659;
                      v645 = v645 + v655 - v660 * v109[2];
                      ++v658;
                    }
                    while (v658 < v656);
                    v670 = v656;
                    v642 = *v53;
                    v657 = v656;
                  }
                  else
                  {
                    v670 = 0;
                  }
                  v646 = v646 + v651 - v670 * v652;
                  v645 = v645 + v654 - v655 * v109[1];
                  ++v643;
                }
                while (v643 < v642);
              }
              break;
            default:
              v1598 = v51[6];
              v1644 = v55;
              if (v1598)
              {
                v591 = 0;
                v1532 = v108[19];
                v1552 = *(_QWORD *)(v52 + 152);
                v1525 = v51[19];
                do
                {
                  v592 = v1644;
                  if ((v1644 & 0x80000000) != 0)
                  {
                    LODWORD(v593) = 0;
                  }
                  else
                  {
                    v593 = 0;
                    v594 = *(_QWORD *)(v52 + 24);
                    v595 = v591;
                    do
                    {
                      v596 = ldiv(v595, v53[v592]);
                      v595 = v596.quot;
                      v593 += *(_QWORD *)(v594 + 8 * v592--) * v596.rem;
                    }
                    while (v592 != -1);
                  }
                  v597 = 0;
                  if ((v111 & 0x80000000) == 0)
                  {
                    v598 = v108[3];
                    v599 = v111;
                    v600 = v591;
                    do
                    {
                      v601 = ldiv(v600, v109[v599]);
                      v600 = v601.quot;
                      v597 += *(_QWORD *)&v598[2 * v599--] * v601.rem;
                    }
                    while (v599 != -1);
                  }
                  *(_DWORD *)(v1525 + 4 * v591++) = v1532[(int)v597] * *(_DWORD *)(v1552 + 4 * (int)v593);
                }
                while (v591 != v1598);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v13)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a2 + 152) * **(_QWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_24;
        default:
          v60 = *(_QWORD **)a3;
          v61 = *a1;
          v62 = *(int **)*a1;
          v63 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v62) >> 2;
          v64 = (v63 - 1);
          if ((int)v64 >= -1)
            v65 = -1;
          else
            v65 = v63 - 1;
          v66 = v65 + 1;
          v67 = v63 + 1;
          break;
      }
      while (1)
      {
        v68 = v67 - 2;
        if (v67 - 2 < 0)
          break;
        --v67;
        if (*(_QWORD *)(*(_QWORD *)(v61 + 24) + 8 * v68) != *(_QWORD *)(v60[3] + 8 * v68))
          goto LABEL_111;
      }
      v67 = v66;
LABEL_111:
      v116 = (int **)*a2;
      v117 = *(int **)*a2;
      v118 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v117) >> 2;
      v119 = (v118 - 1);
      if ((int)v119 >= -1)
        v120 = -1;
      else
        v120 = v118 - 1;
      v121 = v120 + 1;
      v122 = v118 + 1;
      while (1)
      {
        v123 = v122 - 2;
        if (v122 - 2 < 0)
          break;
        --v122;
        if (*(_QWORD *)&v116[3][2 * v123] != *(_QWORD *)(v60[3] + 8 * v123))
          goto LABEL_152;
      }
      v122 = v121;
LABEL_152:
      v142 = v63 + 1;
      while (1)
      {
        v143 = v142 - 2;
        if (v142 - 2 < 0)
          break;
        --v142;
        if (*(_QWORD *)(*(_QWORD *)(v61 + 24) + 8 * v143))
          goto LABEL_187;
      }
      v142 = v66;
LABEL_187:
      v156 = v118 + 1;
      while (1)
      {
        v157 = v156 - 2;
        if (v156 - 2 < 0)
          break;
        --v156;
        if (*(_QWORD *)&v116[3][2 * v157])
          goto LABEL_378;
      }
      v156 = v121;
LABEL_378:
      v254 = (uint64_t)(v60[1] - *v60) >> 2;
      if (v67 <= v122)
        v255 = v122;
      else
        v255 = v67;
      if (v67 <= v156)
        v67 = v156;
      if (v142 > v122)
        v122 = v142;
      if (v254 > v122)
        v256 = 1;
      else
        v256 = 4;
      if (v254 <= v122)
        v122 = (uint64_t)(v60[1] - *v60) >> 2;
      if (v254 <= v67)
        v67 = v122;
      else
        v256 = 2;
      if (v254 <= v255)
      {
        v257 = v67;
      }
      else
      {
        v256 = 3;
        v257 = v255;
      }
      if (!v257)
        goto LABEL_407;
      v258 = *(_QWORD *)(v60[3] + 8 * (v257 - 1));
      if (v258 < 0x10)
        goto LABEL_407;
      switch(v256)
      {
        case 1:
          if (v257 == 2)
          {
            v1413 = *v62;
            if (*v62)
            {
              v1414 = 0;
              v1415 = 0;
              v1677 = *(_QWORD *)(v61 + 152);
              v1631 = v116[19];
              v1416 = (float *)v60[19];
              v1545 = 0;
              v1585 = (int)v258;
              v1417 = 8 * (int)v258;
              do
              {
                if (v62[1])
                {
                  v1418 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1631[2 * v1414], 1, (const float *)(v1677 + 8 * v1415), v1416, 1, v1585);
                    v61 = *a1;
                    v1419 = *(_QWORD **)(*a1 + 24);
                    v1420 = v1419[1];
                    v1415 += v1420;
                    v116 = (int **)*a2;
                    v1421 = *(int **)(*a2 + 24);
                    v1422 = *((_QWORD *)v1421 + 1);
                    v1414 += v1422;
                    ++v1418;
                    v62 = *(int **)*a1;
                    v1423 = v62[1];
                    v1416 = (float *)((char *)v1416 + v1417);
                  }
                  while (v1418 < v1423);
                  v1413 = *v62;
                  v117 = *v116;
                }
                else
                {
                  v1423 = 0;
                  v1419 = *(_QWORD **)(v61 + 24);
                  v1420 = v1419[1];
                  v1421 = v116[3];
                  v1422 = *((_QWORD *)v1421 + 1);
                }
                v1415 = *v1419 + v1415 - v1423 * v1420;
                v1414 = *(_QWORD *)v1421 + v1414 - v1422 * v117[1];
                ++v1545;
              }
              while (v1545 < v1413);
            }
          }
          else if (v257 == 1)
          {
            if (*v62)
            {
              v904 = 0;
              v905 = 0;
              v906 = 0;
              v907 = *(_QWORD *)(v61 + 152);
              v908 = v116[19];
              v909 = (int)v258;
              v910 = 8 * (int)v258;
              v911 = (float *)v60[19];
              do
              {
                vDSP_vsmul((const float *)&v908[2 * v905], 1, (const float *)(v907 + 8 * v906), v911, 1, v909);
                v906 += **(_QWORD **)(*a1 + 24);
                v905 += **(_QWORD **)(*a2 + 24);
                ++v904;
                v911 = (float *)((char *)v911 + v910);
              }
              while (v904 < **(int **)*a1);
            }
          }
          else if (v60[6])
          {
            v1424 = 0;
            v1632 = v116[19];
            v1678 = *(_QWORD *)(v61 + 152);
            v1586 = (int)v258;
            v1425 = (float *)v60[19];
            do
            {
              v1426 = *(_QWORD *)*a1;
              v1427 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1426) >> 2;
              v1428 = 0;
              v1429 = (v1427 - 1);
              if ((int)v1427 - 1 >= 0)
              {
                v1430 = *(_QWORD *)(*a1 + 24);
                v1431 = v1424;
                do
                {
                  v1432 = ldiv(v1431, *(int *)(v1426 + 4 * v1429));
                  v1431 = v1432.quot;
                  v1428 += *(_QWORD *)(v1430 + 8 * v1429--) * v1432.rem;
                }
                while (v1429 != -1);
              }
              v1433 = *(_QWORD *)*a2;
              v1434 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1433) >> 2;
              v1435 = 0;
              v1436 = (v1434 - 1);
              if ((int)v1434 - 1 >= 0)
              {
                v1437 = *(_QWORD *)(*a2 + 24);
                v1438 = v1424;
                do
                {
                  v1439 = ldiv(v1438, *(int *)(v1433 + 4 * v1436));
                  v1438 = v1439.quot;
                  v1435 += *(_QWORD *)(v1437 + 8 * v1436--) * v1439.rem;
                }
                while (v1436 != -1);
              }
              vDSP_vsmul((const float *)&v1632[2 * (int)v1435], 1, (const float *)(v1678 + 8 * (int)v1428), v1425, 1, v1586);
              v1425 += 2 * v1586;
              v1424 += v1586;
            }
            while (v1424 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v257 == 2)
          {
            v1440 = *v62;
            if (*v62)
            {
              v1441 = 0;
              v1442 = 0;
              v1679 = *(_QWORD *)(v61 + 152);
              v1633 = v116[19];
              v1443 = (float *)v60[19];
              v1546 = 0;
              v1587 = (int)v258;
              v1444 = 8 * (int)v258;
              do
              {
                if (v62[1])
                {
                  v1445 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1679 + 8 * v1442), 1, (const float *)&v1633[2 * v1441], v1443, 1, v1587);
                    v61 = *a1;
                    v1446 = *(_QWORD **)(*a1 + 24);
                    v1447 = v1446[1];
                    v1442 += v1447;
                    v116 = (int **)*a2;
                    v1448 = *(int **)(*a2 + 24);
                    v1449 = *((_QWORD *)v1448 + 1);
                    v1441 += v1449;
                    ++v1445;
                    v62 = *(int **)*a1;
                    v1450 = v62[1];
                    v1443 = (float *)((char *)v1443 + v1444);
                  }
                  while (v1445 < v1450);
                  v1440 = *v62;
                  v117 = *v116;
                }
                else
                {
                  v1450 = 0;
                  v1446 = *(_QWORD **)(v61 + 24);
                  v1447 = v1446[1];
                  v1448 = v116[3];
                  v1449 = *((_QWORD *)v1448 + 1);
                }
                v1442 = *v1446 + v1442 - v1450 * v1447;
                v1441 = *(_QWORD *)v1448 + v1441 - v1449 * v117[1];
                ++v1546;
              }
              while (v1546 < v1440);
            }
          }
          else if (v257 == 1)
          {
            if (*v62)
            {
              v912 = 0;
              v913 = 0;
              v914 = 0;
              v915 = *(_QWORD *)(v61 + 152);
              v916 = v116[19];
              v917 = (int)v258;
              v918 = 8 * (int)v258;
              v919 = (float *)v60[19];
              do
              {
                vDSP_vsmul((const float *)(v915 + 8 * v914), 1, (const float *)&v916[2 * v913], v919, 1, v917);
                v914 += **(_QWORD **)(*a1 + 24);
                v913 += **(_QWORD **)(*a2 + 24);
                ++v912;
                v919 = (float *)((char *)v919 + v918);
              }
              while (v912 < **(int **)*a1);
            }
          }
          else if (v60[6])
          {
            v1451 = 0;
            v1634 = v116[19];
            v1680 = *(_QWORD *)(v61 + 152);
            v1588 = (int)v258;
            v1452 = (float *)v60[19];
            do
            {
              v1453 = *(_QWORD *)*a1;
              v1454 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1453) >> 2;
              v1455 = 0;
              v1456 = (v1454 - 1);
              if ((int)v1454 - 1 >= 0)
              {
                v1457 = *(_QWORD *)(*a1 + 24);
                v1458 = v1451;
                do
                {
                  v1459 = ldiv(v1458, *(int *)(v1453 + 4 * v1456));
                  v1458 = v1459.quot;
                  v1455 += *(_QWORD *)(v1457 + 8 * v1456--) * v1459.rem;
                }
                while (v1456 != -1);
              }
              v1460 = *(_QWORD *)*a2;
              v1461 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1460) >> 2;
              v1462 = 0;
              v1463 = (v1461 - 1);
              if ((int)v1461 - 1 >= 0)
              {
                v1464 = *(_QWORD *)(*a2 + 24);
                v1465 = v1451;
                do
                {
                  v1466 = ldiv(v1465, *(int *)(v1460 + 4 * v1463));
                  v1465 = v1466.quot;
                  v1462 += *(_QWORD *)(v1464 + 8 * v1463--) * v1466.rem;
                }
                while (v1463 != -1);
              }
              vDSP_vsmul((const float *)(v1680 + 8 * (int)v1455), 1, (const float *)&v1634[2 * (int)v1462], v1452, 1, v1588);
              v1452 += 2 * v1588;
              v1451 += v1588;
            }
            while (v1451 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v257 == 2)
          {
            v1077 = *v62;
            if (*v62)
            {
              v1078 = 0;
              v1079 = 0;
              v1657 = *(_QWORD *)(v61 + 152);
              v1611 = v116[19];
              v1080 = (float *)v60[19];
              v1539 = 0;
              v1565 = (int)v258;
              v1081 = 8 * (int)v258;
              do
              {
                if (v62[1])
                {
                  v1082 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1657 + 8 * v1079), 1, (const float *)&v1611[2 * v1078], 1, v1080, 1, v1565);
                    v61 = *a1;
                    v1083 = *(_QWORD **)(*a1 + 24);
                    v1084 = v1083[1];
                    v1079 += v1084;
                    v116 = (int **)*a2;
                    v1085 = *(int **)(*a2 + 24);
                    v1086 = *((_QWORD *)v1085 + 1);
                    v1078 += v1086;
                    ++v1082;
                    v62 = *(int **)*a1;
                    v1087 = v62[1];
                    v1080 = (float *)((char *)v1080 + v1081);
                  }
                  while (v1082 < v1087);
                  v1077 = *v62;
                  v117 = *v116;
                }
                else
                {
                  v1087 = 0;
                  v1083 = *(_QWORD **)(v61 + 24);
                  v1084 = v1083[1];
                  v1085 = v116[3];
                  v1086 = *((_QWORD *)v1085 + 1);
                }
                v1079 = *v1083 + v1079 - v1087 * v1084;
                v1078 = *(_QWORD *)v1085 + v1078 - v1086 * v117[1];
                ++v1539;
              }
              while (v1539 < v1077);
            }
          }
          else if (v257 == 1)
          {
            if (*v62)
            {
              v259 = 0;
              v260 = 0;
              v261 = 0;
              v262 = *(_QWORD *)(v61 + 152);
              v263 = v116[19];
              v264 = (int)v258;
              v265 = 8 * (int)v258;
              v266 = (float *)v60[19];
              do
              {
                vDSP_vmul((const float *)(v262 + 8 * v261), 1, (const float *)&v263[2 * v260], 1, v266, 1, v264);
                v261 += **(_QWORD **)(*a1 + 24);
                v260 += **(_QWORD **)(*a2 + 24);
                ++v259;
                v266 = (float *)((char *)v266 + v265);
              }
              while (v259 < **(int **)*a1);
            }
          }
          else if (v60[6])
          {
            v1088 = 0;
            v1612 = v116[19];
            v1658 = *(_QWORD *)(v61 + 152);
            v1566 = (int)v258;
            v1089 = (float *)v60[19];
            do
            {
              v1090 = *(_QWORD *)*a1;
              v1091 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1090) >> 2;
              v1092 = 0;
              v1093 = (v1091 - 1);
              if ((int)v1091 - 1 >= 0)
              {
                v1094 = *(_QWORD *)(*a1 + 24);
                v1095 = v1088;
                do
                {
                  v1096 = ldiv(v1095, *(int *)(v1090 + 4 * v1093));
                  v1095 = v1096.quot;
                  v1092 += *(_QWORD *)(v1094 + 8 * v1093--) * v1096.rem;
                }
                while (v1093 != -1);
              }
              v1097 = *(_QWORD *)*a2;
              v1098 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1097) >> 2;
              v1099 = 0;
              v1100 = (v1098 - 1);
              if ((int)v1098 - 1 >= 0)
              {
                v1101 = *(_QWORD *)(*a2 + 24);
                v1102 = v1088;
                do
                {
                  v1103 = ldiv(v1102, *(int *)(v1097 + 4 * v1100));
                  v1102 = v1103.quot;
                  v1099 += *(_QWORD *)(v1101 + 8 * v1100--) * v1103.rem;
                }
                while (v1100 != -1);
              }
              vDSP_vmul((const float *)(v1658 + 8 * (int)v1092), 1, (const float *)&v1612[2 * (int)v1099], 1, v1089, 1, v1566);
              v1089 += 2 * v1566;
              v1088 += v1566;
            }
            while (v1088 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_407:
          switch(v254)
          {
            case 1uLL:
              v267 = v60[6];
              if (v267)
              {
                v268 = *(_QWORD **)(v61 + 152);
                v269 = v116[19];
                v270 = (_QWORD *)v60[19];
                v271 = 8 * *(_QWORD *)v116[3];
                v272 = 8 * **(_QWORD **)(v61 + 24);
                do
                {
                  *v270++ = *(_QWORD *)v269 * *v268;
                  v269 = (int *)((char *)v269 + v271);
                  v268 = (_QWORD *)((char *)v268 + v272);
                  --v267;
                }
                while (v267);
              }
              break;
            case 2uLL:
              v682 = *v62;
              if ((_DWORD)v682)
              {
                v683 = 0;
                v684 = 0;
                v685 = 0;
                v686 = 0;
                v687 = *(_QWORD *)(v61 + 152);
                v688 = v116[19];
                v689 = v60[19];
                v690 = v62[1];
                v691 = *(uint64_t **)(v61 + 24);
                v692 = *v691;
                v693 = v691[1];
                v694 = v116[3];
                v695 = *(_QWORD *)v694;
                v696 = *((_QWORD *)v694 + 1);
                v697 = v695 - v696 * v117[1];
                if (v690 <= 1)
                  v698 = 1;
                else
                  v698 = v62[1];
                v699 = v692 - v693 * v690;
                do
                {
                  if ((_DWORD)v690)
                  {
                    v700 = v684 + v698;
                    v701 = (_QWORD *)(v689 + 8 * v684);
                    v702 = v698;
                    do
                    {
                      *v701++ = *(_QWORD *)&v688[2 * v685] * *(_QWORD *)(v687 + 8 * v686);
                      v686 += v693;
                      v685 += v696;
                      --v702;
                    }
                    while (v702);
                    v684 = v700;
                  }
                  v686 += v699;
                  v685 += v697;
                  ++v683;
                }
                while (v683 != v682);
              }
              break;
            case 3uLL:
              v703 = *v62;
              if ((_DWORD)v703)
              {
                v704 = 0;
                v705 = 0;
                v706 = 0;
                v707 = 0;
                v708 = *(_QWORD *)(v61 + 152);
                v709 = v116[19];
                v710 = v60[19];
                v711 = v62[1];
                v712 = *(_QWORD **)(v61 + 24);
                v713 = v712[1];
                v714 = v116[3];
                v715 = *((_QWORD *)v714 + 1);
                v716 = *(_QWORD *)v714 - v715 * v117[1];
                if (v711 <= 1)
                  v717 = 1;
                else
                  v717 = v62[1];
                v718 = *v712 - v713 * v711;
                do
                {
                  if ((_DWORD)v711)
                  {
                    v719 = 0;
                    v720 = v62[2];
                    v721 = v712[2];
                    v722 = *((_QWORD *)v714 + 2);
                    if (v720 <= 1)
                      v723 = 1;
                    else
                      v723 = v62[2];
                    v724 = v715 - v722 * v117[2];
                    do
                    {
                      v725 = v723;
                      if ((_DWORD)v720)
                      {
                        do
                        {
                          *(_QWORD *)(v710 + 8 * v705++) = *(_QWORD *)&v709[2 * v706] * *(_QWORD *)(v708 + 8 * v707);
                          v707 += v721;
                          v706 += v722;
                          --v725;
                        }
                        while (v725);
                      }
                      v707 += v713 - v721 * v720;
                      v706 += v724;
                      ++v719;
                    }
                    while (v719 != v717);
                  }
                  v707 += v718;
                  v706 += v716;
                  ++v704;
                }
                while (v704 != v703);
              }
              break;
            case 4uLL:
              v1646 = *v62;
              if ((_DWORD)v1646)
              {
                v726 = 0;
                v727 = 0;
                v728 = 0;
                v729 = 0;
                v730 = *(_QWORD *)(v61 + 152);
                v731 = v116[19];
                v732 = v60[19];
                v733 = v62[1];
                v734 = *(_QWORD **)(v61 + 24);
                v735 = v116[3];
                v1521 = *((_QWORD *)v735 + 1);
                v1527 = v734[1];
                v1554 = *(_QWORD *)v735 - v1521 * v117[1];
                v1600 = v62[1];
                if (v733 <= 1)
                  v736 = 1;
                else
                  v736 = v62[1];
                v1534 = *v734 - v734[1] * v733;
                do
                {
                  if (v1600)
                  {
                    v737 = 0;
                    v738 = v62[2];
                    v739 = v734[2];
                    v740 = *((_QWORD *)v735 + 2);
                    if (v738 <= 1)
                      v741 = 1;
                    else
                      v741 = v62[2];
                    v742 = v1521 - v740 * v117[2];
                    do
                    {
                      if ((_DWORD)v738)
                      {
                        v743 = 0;
                        v744 = v62[3];
                        v745 = v734[3];
                        v746 = *((_QWORD *)v735 + 3);
                        if (v744 <= 1)
                          v747 = 1;
                        else
                          v747 = v62[3];
                        v748 = v740 - v746 * v117[3];
                        do
                        {
                          v749 = v747;
                          if ((_DWORD)v744)
                          {
                            do
                            {
                              *(_QWORD *)(v732 + 8 * v727++) = *(_QWORD *)&v731[2 * v728] * *(_QWORD *)(v730 + 8 * v729);
                              v729 += v745;
                              v728 += v746;
                              --v749;
                            }
                            while (v749);
                          }
                          v729 += v739 - v745 * v744;
                          v728 += v748;
                          ++v743;
                        }
                        while (v743 != v741);
                      }
                      v729 += v1527 - v739 * v738;
                      v728 += v742;
                      ++v737;
                    }
                    while (v737 != v736);
                  }
                  v729 += v1534;
                  v728 += v1554;
                  ++v726;
                }
                while (v726 != v1646);
              }
              break;
            default:
              v1599 = v60[6];
              v1645 = v64;
              if (v1599)
              {
                v671 = 0;
                v1533 = v116[19];
                v1553 = *(_QWORD *)(v61 + 152);
                v1526 = v60[19];
                do
                {
                  v672 = v1645;
                  if ((v1645 & 0x80000000) != 0)
                  {
                    LODWORD(v673) = 0;
                  }
                  else
                  {
                    v673 = 0;
                    v674 = *(_QWORD *)(v61 + 24);
                    v675 = v671;
                    do
                    {
                      v676 = ldiv(v675, v62[v672]);
                      v675 = v676.quot;
                      v673 += *(_QWORD *)(v674 + 8 * v672--) * v676.rem;
                    }
                    while (v672 != -1);
                  }
                  v677 = 0;
                  if ((v119 & 0x80000000) == 0)
                  {
                    v678 = v116[3];
                    v679 = v119;
                    v680 = v671;
                    do
                    {
                      v681 = ldiv(v680, v117[v679]);
                      v680 = v681.quot;
                      v677 += *(_QWORD *)&v678[2 * v679--] * v681.rem;
                    }
                    while (v679 != -1);
                  }
                  *(_QWORD *)(v1526 + 8 * v671++) = *(_QWORD *)&v1533[2 * (int)v677]
                                                  * *(_QWORD *)(v1553 + 8 * (int)v673);
                }
                while (v671 != v1599);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) * **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_21:
          v15 = *(const float **)(*a1 + 152);
          v16 = *a2;
          goto LABEL_23;
        case 2:
LABEL_22:
          v16 = *a1;
          v15 = *(const float **)(*a2 + 152);
LABEL_23:
          vDSP_vsmul(*(const float **)(v16 + 152), 1, v15, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(v16 + 160));
          return;
        case 3:
LABEL_24:
          vDSP_vmul(*(const float **)(*a1 + 152), 1, *(const float **)(*a2 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)a3 + 48));
          return;
        default:
          v69 = *(_QWORD **)a3;
          v70 = *a1;
          v71 = *(int **)*a1;
          v72 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v71) >> 2;
          v73 = (v72 - 1);
          if ((int)v73 >= -1)
            v74 = -1;
          else
            v74 = v72 - 1;
          v75 = v74 + 1;
          v76 = v72 + 1;
          break;
      }
      while (1)
      {
        v77 = v76 - 2;
        if (v76 - 2 < 0)
          break;
        --v76;
        if (*(_QWORD *)(*(_QWORD *)(v70 + 24) + 8 * v77) != *(_QWORD *)(v69[3] + 8 * v77))
          goto LABEL_119;
      }
      v76 = v75;
LABEL_119:
      v124 = (int **)*a2;
      v125 = *(int **)*a2;
      v126 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v125) >> 2;
      v127 = (v126 - 1);
      if ((int)v127 >= -1)
        v128 = -1;
      else
        v128 = v126 - 1;
      v129 = v128 + 1;
      v130 = v126 + 1;
      while (1)
      {
        v131 = v130 - 2;
        if (v130 - 2 < 0)
          break;
        --v130;
        if (*(_QWORD *)&v124[3][2 * v131] != *(_QWORD *)(v69[3] + 8 * v131))
          goto LABEL_157;
      }
      v130 = v129;
LABEL_157:
      v144 = v72 + 1;
      while (1)
      {
        v145 = v144 - 2;
        if (v144 - 2 < 0)
          break;
        --v144;
        if (*(_QWORD *)(*(_QWORD *)(v70 + 24) + 8 * v145))
          goto LABEL_192;
      }
      v144 = v75;
LABEL_192:
      v158 = v126 + 1;
      while (1)
      {
        v159 = v158 - 2;
        if (v158 - 2 < 0)
          break;
        --v158;
        if (*(_QWORD *)&v124[3][2 * v159])
          goto LABEL_413;
      }
      v158 = v129;
LABEL_413:
      v273 = (uint64_t)(v69[1] - *v69) >> 2;
      if (v76 <= v130)
        v274 = v130;
      else
        v274 = v76;
      if (v76 <= v158)
        v76 = v158;
      if (v144 > v130)
        v130 = v144;
      if (v273 > v130)
        v275 = 1;
      else
        v275 = 4;
      if (v273 <= v130)
        v130 = (uint64_t)(v69[1] - *v69) >> 2;
      if (v273 <= v76)
        v76 = v130;
      else
        v275 = 2;
      if (v273 <= v274)
      {
        v276 = v76;
      }
      else
      {
        v275 = 3;
        v276 = v274;
      }
      if (!v276)
        goto LABEL_442;
      v277 = *(_QWORD *)(v69[3] + 8 * (v276 - 1));
      if (v277 < 0x10)
        goto LABEL_442;
      switch(v275)
      {
        case 1:
          if (v276 == 2)
          {
            v1467 = *v71;
            if (*v71)
            {
              v1468 = 0;
              v1469 = 0;
              v1681 = *(_QWORD *)(v70 + 152);
              v1635 = v124[19];
              v1470 = (float *)v69[19];
              v1547 = 0;
              v1589 = (int)v277;
              v1471 = 4 * (int)v277;
              do
              {
                if (v71[1])
                {
                  v1472 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1635[v1468], 1, (const float *)(v1681 + 4 * v1469), v1470, 1, v1589);
                    v70 = *a1;
                    v1473 = *(_QWORD **)(*a1 + 24);
                    v1474 = v1473[1];
                    v1469 += v1474;
                    v124 = (int **)*a2;
                    v1475 = *(int **)(*a2 + 24);
                    v1476 = *((_QWORD *)v1475 + 1);
                    v1468 += v1476;
                    ++v1472;
                    v71 = *(int **)*a1;
                    v1477 = v71[1];
                    v1470 = (float *)((char *)v1470 + v1471);
                  }
                  while (v1472 < v1477);
                  v1467 = *v71;
                  v125 = *v124;
                }
                else
                {
                  v1477 = 0;
                  v1473 = *(_QWORD **)(v70 + 24);
                  v1474 = v1473[1];
                  v1475 = v124[3];
                  v1476 = *((_QWORD *)v1475 + 1);
                }
                v1469 = *v1473 + v1469 - v1477 * v1474;
                v1468 = *(_QWORD *)v1475 + v1468 - v1476 * v125[1];
                ++v1547;
              }
              while (v1547 < v1467);
            }
          }
          else if (v276 == 1)
          {
            if (*v71)
            {
              v920 = 0;
              v921 = 0;
              v922 = 0;
              v923 = *(_QWORD *)(v70 + 152);
              v924 = v124[19];
              v925 = (int)v277;
              v926 = 4 * (int)v277;
              v927 = (float *)v69[19];
              do
              {
                vDSP_vsmul((const float *)&v924[v921], 1, (const float *)(v923 + 4 * v922), v927, 1, v925);
                v922 += **(_QWORD **)(*a1 + 24);
                v921 += **(_QWORD **)(*a2 + 24);
                ++v920;
                v927 = (float *)((char *)v927 + v926);
              }
              while (v920 < **(int **)*a1);
            }
          }
          else if (v69[6])
          {
            v1478 = 0;
            v1636 = v124[19];
            v1682 = *(_QWORD *)(v70 + 152);
            v1590 = (int)v277;
            v1479 = (float *)v69[19];
            do
            {
              v1480 = *(_QWORD *)*a1;
              v1481 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1480) >> 2;
              v1482 = 0;
              v1483 = (v1481 - 1);
              if ((int)v1481 - 1 >= 0)
              {
                v1484 = *(_QWORD *)(*a1 + 24);
                v1485 = v1478;
                do
                {
                  v1486 = ldiv(v1485, *(int *)(v1480 + 4 * v1483));
                  v1485 = v1486.quot;
                  v1482 += *(_QWORD *)(v1484 + 8 * v1483--) * v1486.rem;
                }
                while (v1483 != -1);
              }
              v1487 = *(_QWORD *)*a2;
              v1488 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1487) >> 2;
              v1489 = 0;
              v1490 = (v1488 - 1);
              if ((int)v1488 - 1 >= 0)
              {
                v1491 = *(_QWORD *)(*a2 + 24);
                v1492 = v1478;
                do
                {
                  v1493 = ldiv(v1492, *(int *)(v1487 + 4 * v1490));
                  v1492 = v1493.quot;
                  v1489 += *(_QWORD *)(v1491 + 8 * v1490--) * v1493.rem;
                }
                while (v1490 != -1);
              }
              vDSP_vsmul((const float *)&v1636[(int)v1489], 1, (const float *)(v1682 + 4 * (int)v1482), v1479, 1, v1590);
              v1479 += v1590;
              v1478 += v1590;
            }
            while (v1478 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v276 == 2)
          {
            v1494 = *v71;
            if (*v71)
            {
              v1495 = 0;
              v1496 = 0;
              v1683 = *(_QWORD *)(v70 + 152);
              v1637 = v124[19];
              v1497 = (float *)v69[19];
              v1548 = 0;
              v1591 = (int)v277;
              v1498 = 4 * (int)v277;
              do
              {
                if (v71[1])
                {
                  v1499 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1683 + 4 * v1496), 1, (const float *)&v1637[v1495], v1497, 1, v1591);
                    v70 = *a1;
                    v1500 = *(_QWORD **)(*a1 + 24);
                    v1501 = v1500[1];
                    v1496 += v1501;
                    v124 = (int **)*a2;
                    v1502 = *(int **)(*a2 + 24);
                    v1503 = *((_QWORD *)v1502 + 1);
                    v1495 += v1503;
                    ++v1499;
                    v71 = *(int **)*a1;
                    v1504 = v71[1];
                    v1497 = (float *)((char *)v1497 + v1498);
                  }
                  while (v1499 < v1504);
                  v1494 = *v71;
                  v125 = *v124;
                }
                else
                {
                  v1504 = 0;
                  v1500 = *(_QWORD **)(v70 + 24);
                  v1501 = v1500[1];
                  v1502 = v124[3];
                  v1503 = *((_QWORD *)v1502 + 1);
                }
                v1496 = *v1500 + v1496 - v1504 * v1501;
                v1495 = *(_QWORD *)v1502 + v1495 - v1503 * v125[1];
                ++v1548;
              }
              while (v1548 < v1494);
            }
          }
          else if (v276 == 1)
          {
            if (*v71)
            {
              v928 = 0;
              v929 = 0;
              v930 = 0;
              v931 = *(_QWORD *)(v70 + 152);
              v932 = v124[19];
              v933 = (int)v277;
              v934 = 4 * (int)v277;
              v935 = (float *)v69[19];
              do
              {
                vDSP_vsmul((const float *)(v931 + 4 * v930), 1, (const float *)&v932[v929], v935, 1, v933);
                v930 += **(_QWORD **)(*a1 + 24);
                v929 += **(_QWORD **)(*a2 + 24);
                ++v928;
                v935 = (float *)((char *)v935 + v934);
              }
              while (v928 < **(int **)*a1);
            }
          }
          else if (v69[6])
          {
            v1505 = 0;
            v1638 = v124[19];
            v1684 = *(_QWORD *)(v70 + 152);
            v1592 = (int)v277;
            v1506 = (float *)v69[19];
            do
            {
              v1507 = *(_QWORD *)*a1;
              v1508 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1507) >> 2;
              v1509 = 0;
              v1510 = (v1508 - 1);
              if ((int)v1508 - 1 >= 0)
              {
                v1511 = *(_QWORD *)(*a1 + 24);
                v1512 = v1505;
                do
                {
                  v1513 = ldiv(v1512, *(int *)(v1507 + 4 * v1510));
                  v1512 = v1513.quot;
                  v1509 += *(_QWORD *)(v1511 + 8 * v1510--) * v1513.rem;
                }
                while (v1510 != -1);
              }
              v1514 = *(_QWORD *)*a2;
              v1515 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1514) >> 2;
              v1516 = 0;
              v1517 = (v1515 - 1);
              if ((int)v1515 - 1 >= 0)
              {
                v1518 = *(_QWORD *)(*a2 + 24);
                v1519 = v1505;
                do
                {
                  v1520 = ldiv(v1519, *(int *)(v1514 + 4 * v1517));
                  v1519 = v1520.quot;
                  v1516 += *(_QWORD *)(v1518 + 8 * v1517--) * v1520.rem;
                }
                while (v1517 != -1);
              }
              vDSP_vsmul((const float *)(v1684 + 4 * (int)v1509), 1, (const float *)&v1638[(int)v1516], v1506, 1, v1592);
              v1506 += v1592;
              v1505 += v1592;
            }
            while (v1505 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v276 == 2)
          {
            v1104 = *v71;
            if (*v71)
            {
              v1105 = 0;
              v1106 = 0;
              v1659 = *(_QWORD *)(v70 + 152);
              v1613 = v124[19];
              v1107 = (float *)v69[19];
              v1540 = 0;
              v1567 = (int)v277;
              v1108 = 4 * (int)v277;
              do
              {
                if (v71[1])
                {
                  v1109 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1659 + 4 * v1106), 1, (const float *)&v1613[v1105], 1, v1107, 1, v1567);
                    v70 = *a1;
                    v1110 = *(_QWORD **)(*a1 + 24);
                    v1111 = v1110[1];
                    v1106 += v1111;
                    v124 = (int **)*a2;
                    v1112 = *(int **)(*a2 + 24);
                    v1113 = *((_QWORD *)v1112 + 1);
                    v1105 += v1113;
                    ++v1109;
                    v71 = *(int **)*a1;
                    v1114 = v71[1];
                    v1107 = (float *)((char *)v1107 + v1108);
                  }
                  while (v1109 < v1114);
                  v1104 = *v71;
                  v125 = *v124;
                }
                else
                {
                  v1114 = 0;
                  v1110 = *(_QWORD **)(v70 + 24);
                  v1111 = v1110[1];
                  v1112 = v124[3];
                  v1113 = *((_QWORD *)v1112 + 1);
                }
                v1106 = *v1110 + v1106 - v1114 * v1111;
                v1105 = *(_QWORD *)v1112 + v1105 - v1113 * v125[1];
                ++v1540;
              }
              while (v1540 < v1104);
            }
          }
          else if (v276 == 1)
          {
            if (*v71)
            {
              v278 = 0;
              v279 = 0;
              v280 = 0;
              v281 = *(_QWORD *)(v70 + 152);
              v282 = v124[19];
              v283 = (int)v277;
              v284 = 4 * (int)v277;
              v285 = (float *)v69[19];
              do
              {
                vDSP_vmul((const float *)(v281 + 4 * v280), 1, (const float *)&v282[v279], 1, v285, 1, v283);
                v280 += **(_QWORD **)(*a1 + 24);
                v279 += **(_QWORD **)(*a2 + 24);
                ++v278;
                v285 = (float *)((char *)v285 + v284);
              }
              while (v278 < **(int **)*a1);
            }
          }
          else if (v69[6])
          {
            v1115 = 0;
            v1614 = v124[19];
            v1660 = *(_QWORD *)(v70 + 152);
            v1568 = (int)v277;
            v1116 = (float *)v69[19];
            do
            {
              v1117 = *(_QWORD *)*a1;
              v1118 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1117) >> 2;
              v1119 = 0;
              v1120 = (v1118 - 1);
              if ((int)v1118 - 1 >= 0)
              {
                v1121 = *(_QWORD *)(*a1 + 24);
                v1122 = v1115;
                do
                {
                  v1123 = ldiv(v1122, *(int *)(v1117 + 4 * v1120));
                  v1122 = v1123.quot;
                  v1119 += *(_QWORD *)(v1121 + 8 * v1120--) * v1123.rem;
                }
                while (v1120 != -1);
              }
              v1124 = *(_QWORD *)*a2;
              v1125 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1124) >> 2;
              v1126 = 0;
              v1127 = (v1125 - 1);
              if ((int)v1125 - 1 >= 0)
              {
                v1128 = *(_QWORD *)(*a2 + 24);
                v1129 = v1115;
                do
                {
                  v1130 = ldiv(v1129, *(int *)(v1124 + 4 * v1127));
                  v1129 = v1130.quot;
                  v1126 += *(_QWORD *)(v1128 + 8 * v1127--) * v1130.rem;
                }
                while (v1127 != -1);
              }
              vDSP_vmul((const float *)(v1660 + 4 * (int)v1119), 1, (const float *)&v1614[(int)v1126], 1, v1116, 1, v1568);
              v1116 += v1568;
              v1115 += v1568;
            }
            while (v1115 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_442:
          switch(v273)
          {
            case 1uLL:
              v286 = v69[6];
              if (v286)
              {
                v287 = *(float **)(v70 + 152);
                v288 = (float *)v124[19];
                v289 = (float *)v69[19];
                v290 = 4 * *(_QWORD *)v124[3];
                v291 = 4 * **(_QWORD **)(v70 + 24);
                do
                {
                  *v289++ = *v287 * *v288;
                  v288 = (float *)((char *)v288 + v290);
                  v287 = (float *)((char *)v287 + v291);
                  --v286;
                }
                while (v286);
              }
              break;
            case 2uLL:
              v761 = *v71;
              if ((_DWORD)v761)
              {
                v762 = 0;
                v763 = 0;
                v764 = 0;
                v765 = 0;
                v766 = *(_QWORD *)(v70 + 152);
                v767 = v124[19];
                v768 = v69[19];
                v769 = v71[1];
                v770 = *(uint64_t **)(v70 + 24);
                v771 = *v770;
                v772 = v770[1];
                v773 = v124[3];
                v774 = *(_QWORD *)v773;
                v775 = *((_QWORD *)v773 + 1);
                v776 = v774 - v775 * v125[1];
                if (v769 <= 1)
                  v777 = 1;
                else
                  v777 = v71[1];
                v778 = v771 - v772 * v769;
                do
                {
                  if ((_DWORD)v769)
                  {
                    v779 = v763 + v777;
                    v780 = (float *)(v768 + 4 * v763);
                    v781 = v777;
                    do
                    {
                      *v780++ = *(float *)(v766 + 4 * v765) * *(float *)&v767[v764];
                      v765 += v772;
                      v764 += v775;
                      --v781;
                    }
                    while (v781);
                    v763 = v779;
                  }
                  v765 += v778;
                  v764 += v776;
                  ++v762;
                }
                while (v762 != v761);
              }
              break;
            case 3uLL:
              v782 = *v71;
              if ((_DWORD)v782)
              {
                v783 = 0;
                v784 = 0;
                v785 = 0;
                v786 = 0;
                v787 = *(_QWORD *)(v70 + 152);
                v788 = v124[19];
                v789 = v69[19];
                v790 = v71[1];
                v791 = *(_QWORD **)(v70 + 24);
                v792 = v791[1];
                v793 = v124[3];
                v794 = *((_QWORD *)v793 + 1);
                v795 = *(_QWORD *)v793 - v794 * v125[1];
                if (v790 <= 1)
                  v796 = 1;
                else
                  v796 = v71[1];
                v797 = *v791 - v792 * v790;
                do
                {
                  if ((_DWORD)v790)
                  {
                    v798 = 0;
                    v799 = v71[2];
                    v800 = v791[2];
                    v801 = *((_QWORD *)v793 + 2);
                    if (v799 <= 1)
                      v802 = 1;
                    else
                      v802 = v71[2];
                    v803 = v794 - v801 * v125[2];
                    do
                    {
                      v804 = v802;
                      if ((_DWORD)v799)
                      {
                        do
                        {
                          *(float *)(v789 + 4 * v784++) = *(float *)(v787 + 4 * v786) * *(float *)&v788[v785];
                          v786 += v800;
                          v785 += v801;
                          --v804;
                        }
                        while (v804);
                      }
                      v786 += v792 - v800 * v799;
                      v785 += v803;
                      ++v798;
                    }
                    while (v798 != v796);
                  }
                  v786 += v797;
                  v785 += v795;
                  ++v783;
                }
                while (v783 != v782);
              }
              break;
            case 4uLL:
              v1648 = *v71;
              if ((_DWORD)v1648)
              {
                v805 = 0;
                v806 = 0;
                v807 = 0;
                v808 = 0;
                v809 = *(_QWORD *)(v70 + 152);
                v810 = v124[19];
                v811 = v69[19];
                v812 = v71[1];
                v813 = *(_QWORD **)(v70 + 24);
                v814 = v124[3];
                v1536 = *((_QWORD *)v814 + 1);
                v1556 = v813[1];
                v1602 = *(_QWORD *)v814 - v1536 * v125[1];
                if (v812 <= 1)
                  v815 = 1;
                else
                  v815 = v71[1];
                v816 = *v813 - v813[1] * v812;
                do
                {
                  if ((_DWORD)v812)
                  {
                    v817 = 0;
                    v818 = v71[2];
                    v819 = v813[2];
                    v820 = *((_QWORD *)v814 + 2);
                    if (v818 <= 1)
                      v821 = 1;
                    else
                      v821 = v71[2];
                    v822 = v1536 - v820 * v125[2];
                    do
                    {
                      if ((_DWORD)v818)
                      {
                        v823 = 0;
                        v824 = v71[3];
                        v825 = v813[3];
                        v826 = *((_QWORD *)v814 + 3);
                        if (v824 <= 1)
                          v827 = 1;
                        else
                          v827 = v71[3];
                        v828 = v820 - v826 * v125[3];
                        do
                        {
                          v829 = v827;
                          if ((_DWORD)v824)
                          {
                            do
                            {
                              *(float *)(v811 + 4 * v806++) = *(float *)(v809 + 4 * v808) * *(float *)&v810[v807];
                              v808 += v825;
                              v807 += v826;
                              --v829;
                            }
                            while (v829);
                          }
                          v808 += v819 - v825 * v824;
                          v807 += v828;
                          ++v823;
                        }
                        while (v823 != v821);
                      }
                      v808 += v1556 - v819 * v818;
                      v807 += v822;
                      ++v817;
                    }
                    while (v817 != v815);
                  }
                  v808 += v816;
                  v807 += v1602;
                  ++v805;
                }
                while (v805 != v1648);
              }
              break;
            default:
              v1601 = v69[6];
              v1647 = v73;
              if (v1601)
              {
                v750 = 0;
                v1535 = v124[19];
                v1555 = *(_QWORD *)(v70 + 152);
                v1528 = v69[19];
                do
                {
                  v751 = v1647;
                  if ((v1647 & 0x80000000) != 0)
                  {
                    LODWORD(v752) = 0;
                  }
                  else
                  {
                    v752 = 0;
                    v753 = *(_QWORD *)(v70 + 24);
                    v754 = v750;
                    do
                    {
                      v755 = ldiv(v754, v71[v751]);
                      v754 = v755.quot;
                      v752 += *(_QWORD *)(v753 + 8 * v751--) * v755.rem;
                    }
                    while (v751 != -1);
                  }
                  v756 = 0;
                  if ((v127 & 0x80000000) == 0)
                  {
                    v757 = v124[3];
                    v758 = v127;
                    v759 = v750;
                    do
                    {
                      v760 = ldiv(v759, v125[v758]);
                      v759 = v760.quot;
                      v756 += *(_QWORD *)&v757[2 * v758--] * v760.rem;
                    }
                    while (v758 != -1);
                  }
                  *(float *)(v1528 + 4 * v750++) = *(float *)(v1555 + 4 * (int)v752) * *(float *)&v1535[(int)v756];
                }
                while (v750 != v1601);
              }
              break;
          }
          break;
      }
      break;
    default:
      return;
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  BOOL v7;
  char v8;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  char *v13;
  unsigned int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  int *v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  char *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  int v42;
  BOOL v43;
  char v44;
  int v45;
  int v46;
  char *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  char v53;
  int v54;
  char *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  char v73;
  _BYTE *v74;
  char *v75;
  unsigned int v76;
  char v77;
  int v78;
  _BYTE *v79;
  char *v80;
  char *v81;
  unsigned int v82;
  char v83;
  char v84;
  char v85;
  _QWORD *v86;
  _QWORD *v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  _DWORD *v97;
  int *v98;
  unsigned int v99;
  int v100;
  int v101;
  _DWORD *v102;
  int *v103;
  int *v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  char v118;
  _BYTE *v119;
  char *v120;
  unsigned int v121;
  char v122;
  int v123;
  char v124;
  _BYTE *v125;
  char *v126;
  unsigned int v127;
  char v128;
  int v129;
  _BYTE *v130;
  char *v131;
  char *v132;
  unsigned int v133;
  char v134;
  char v135;
  char v136;
  _QWORD *v137;
  _QWORD *v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  _DWORD *v148;
  int *v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  _DWORD *v154;
  int *v155;
  unsigned int v156;
  int v157;
  int v158;
  _DWORD *v159;
  int *v160;
  int *v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  _QWORD *v166;
  _QWORD *v167;
  int *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t *v189;
  uint64_t *v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  int *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  int v204;
  float v205;
  float *v206;
  float *v207;
  unsigned int v208;
  float v209;
  int v210;
  float v211;
  float *v212;
  float *v213;
  unsigned int v214;
  float v215;
  int v216;
  float *v217;
  float *v218;
  float *v219;
  unsigned int v220;
  float v221;
  float v222;
  float v223;
  _QWORD *v224;
  int *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  int **v232;
  int *v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  unsigned int v238;
  _QWORD *v239;
  int *v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  int **v247;
  int *v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  unsigned int v253;
  _QWORD *v254;
  int *v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  int v260;
  unsigned int v261;
  _QWORD *v262;
  int *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  _QWORD *v270;
  int *v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  int v276;
  unsigned int v277;
  int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  unint64_t v306;
  int v307;
  int v308;
  int v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  BOOL v320;
  char v321;
  uint64_t v322;
  _BYTE *v323;
  _BYTE *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  BOOL v328;
  char v329;
  unint64_t v330;
  int v331;
  int v332;
  int v333;
  unint64_t v334;
  int v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int *v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int *v348;
  uint64_t v349;
  unint64_t v350;
  int v351;
  int v352;
  int v353;
  unint64_t v354;
  int v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  _DWORD *v365;
  _DWORD *v366;
  _DWORD *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  int v371;
  int v372;
  int v373;
  unint64_t v374;
  int v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int *v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int *v388;
  uint64_t v389;
  unint64_t v390;
  int v391;
  int v392;
  int v393;
  unint64_t v394;
  int v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t v404;
  _DWORD *v405;
  _DWORD *v406;
  _DWORD *v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  int v411;
  int v412;
  int v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  int v431;
  int v432;
  int v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unsigned int v443;
  uint64_t v444;
  float *v445;
  float *v446;
  float *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  ldiv_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  ldiv_t v460;
  BOOL v461;
  char v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  uint64_t v483;
  BOOL v484;
  char v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  BOOL v509;
  char v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  _QWORD *v519;
  _QWORD *v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  BOOL v535;
  char v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  ldiv_t v545;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  ldiv_t v552;
  int v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int *v559;
  uint64_t v560;
  unint64_t v561;
  _QWORD *v562;
  uint64_t v563;
  int *v564;
  uint64_t v565;
  unint64_t v566;
  int v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int *v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  int *v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  unint64_t v583;
  int v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int *v590;
  uint64_t v591;
  unint64_t v592;
  unint64_t v593;
  unint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  int *v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  ldiv_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  int v613;
  ldiv_t v614;
  int v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  unint64_t i;
  uint64_t v631;
  int v632;
  unint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t *v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  int v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  unint64_t j;
  uint64_t v653;
  uint64_t v654;
  int v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t *v666;
  uint64_t v667;
  uint64_t v668;
  int v669;
  int v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int v674;
  int v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  int v679;
  unint64_t k;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  int v691;
  ldiv_t v692;
  uint64_t v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int v698;
  ldiv_t v699;
  int v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  int *v706;
  uint64_t v707;
  unint64_t v708;
  _QWORD *v709;
  uint64_t v710;
  int *v711;
  uint64_t v712;
  unint64_t v713;
  int v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int *v720;
  uint64_t v721;
  unint64_t v722;
  unint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  int *v726;
  uint64_t v727;
  unint64_t v728;
  uint64_t v729;
  unint64_t v730;
  int v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  int *v737;
  uint64_t v738;
  unint64_t v739;
  unint64_t v740;
  unint64_t v741;
  _QWORD *v742;
  uint64_t v743;
  int *v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  ldiv_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  ldiv_t v761;
  int v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t *v773;
  uint64_t v774;
  uint64_t v775;
  int v776;
  unint64_t m;
  uint64_t v778;
  int v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t *v790;
  uint64_t v791;
  uint64_t v792;
  int v793;
  int v794;
  unint64_t v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  unint64_t n;
  uint64_t v800;
  uint64_t v801;
  int v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t *v813;
  uint64_t v814;
  uint64_t v815;
  int v816;
  int v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  int v821;
  int v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  unint64_t ii;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  int v836;
  ldiv_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int v841;
  ldiv_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  uint64_t *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  _QWORD *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unint64_t v872;
  _QWORD *v873;
  uint64_t v874;
  _QWORD *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  uint64_t v880;
  unint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  _QWORD *v895;
  _QWORD *v896;
  uint64_t v897;
  uint64_t v898;
  unint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  int v916;
  ldiv_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int v921;
  ldiv_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  uint64_t *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  float *v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  _QWORD *v953;
  uint64_t v954;
  _QWORD *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  _QWORD *v975;
  _QWORD *v976;
  uint64_t v977;
  unint64_t v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  unint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  unsigned int v1002;
  BOOL v1003;
  char v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int v1014;
  unsigned int v1015;
  BOOL v1016;
  char v1017;
  int v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  int *v1023;
  uint64_t v1024;
  uint64_t v1025;
  char v1026;
  unsigned int v1027;
  int v1028;
  unint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int *v1033;
  uint64_t v1034;
  uint64_t v1035;
  char v1036;
  unsigned int v1037;
  int v1038;
  unint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  int v1047;
  unsigned int v1048;
  int v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  int v1058;
  unsigned int v1059;
  int v1060;
  unint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  int *v1065;
  uint64_t v1066;
  uint64_t v1067;
  char v1068;
  unsigned int v1069;
  int v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int *v1075;
  uint64_t v1076;
  uint64_t v1077;
  char v1078;
  unsigned int v1079;
  int v1080;
  unint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  int v1089;
  unsigned int v1090;
  int v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  int v1100;
  unsigned int v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unsigned int v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  unsigned int v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  float v1133;
  unsigned int v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  float v1144;
  unsigned int v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t *v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  unsigned int v1167;
  BOOL v1168;
  char v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  int v1173;
  ldiv_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  int v1178;
  ldiv_t v1179;
  uint64_t v1180;
  unsigned int v1181;
  BOOL v1182;
  char v1183;
  int v1184;
  unint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  int *v1189;
  uint64_t v1190;
  unint64_t v1191;
  uint64_t v1192;
  unsigned int v1193;
  _QWORD *v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  int v1203;
  ldiv_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int v1210;
  ldiv_t v1211;
  uint64_t v1212;
  unsigned int v1213;
  int v1214;
  unint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t *v1224;
  uint64_t v1225;
  uint64_t v1226;
  int v1227;
  int v1228;
  unint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  unsigned int v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  int v1239;
  ldiv_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  int v1244;
  ldiv_t v1245;
  uint64_t v1246;
  unsigned int v1247;
  int v1248;
  unint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  int *v1253;
  uint64_t v1254;
  unint64_t v1255;
  uint64_t v1256;
  unsigned int v1257;
  _QWORD *v1258;
  uint64_t v1259;
  unint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  unint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  int v1267;
  ldiv_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  int v1274;
  ldiv_t v1275;
  uint64_t v1276;
  unsigned int v1277;
  int v1278;
  unint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t *v1288;
  uint64_t v1289;
  uint64_t v1290;
  int v1291;
  int v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  unsigned int v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  int v1303;
  ldiv_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  int v1308;
  ldiv_t v1309;
  uint64_t v1310;
  unsigned int v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  unint64_t v1319;
  uint64_t *v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t *v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  unsigned int v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  int v1338;
  ldiv_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  int v1343;
  ldiv_t v1344;
  uint64_t v1345;
  unsigned int v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  unint64_t v1354;
  uint64_t *v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t *v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  unsigned int v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int v1373;
  ldiv_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  int v1378;
  ldiv_t v1379;
  uint64_t v1380;
  unsigned int v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  unint64_t v1389;
  uint64_t *v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t *v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  int v1402;
  unsigned int v1403;
  BOOL v1404;
  char v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  int quot;
  ldiv_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  int v1414;
  ldiv_t v1415;
  uint64_t v1416;
  int v1417;
  unsigned int v1418;
  BOOL v1419;
  char v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  unint64_t v1428;
  uint64_t *v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t *v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  int v1441;
  unsigned int v1442;
  BOOL v1443;
  char v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  int v1448;
  ldiv_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  int v1453;
  ldiv_t v1454;
  uint64_t v1455;
  int v1456;
  unsigned int v1457;
  BOOL v1458;
  char v1459;
  int v1460;
  unint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  int *v1465;
  uint64_t v1466;
  unint64_t v1467;
  uint64_t v1468;
  char v1469;
  unsigned int v1470;
  _QWORD *v1471;
  uint64_t v1472;
  unint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  unint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  int v1480;
  ldiv_t v1481;
  uint64_t v1482;
  unint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  int v1487;
  ldiv_t v1488;
  uint64_t v1489;
  char v1490;
  unsigned int v1491;
  int v1492;
  unint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  int *v1497;
  uint64_t v1498;
  unint64_t v1499;
  uint64_t v1500;
  char v1501;
  unsigned int v1502;
  _QWORD *v1503;
  uint64_t v1504;
  unint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  unint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  int v1512;
  ldiv_t v1513;
  uint64_t v1514;
  unint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  int v1519;
  ldiv_t v1520;
  uint64_t v1521;
  char v1522;
  unsigned int v1523;
  int v1524;
  unint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t *v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t *v1534;
  uint64_t v1535;
  uint64_t v1536;
  int v1537;
  int v1538;
  unint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  int v1542;
  unsigned int v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  int v1549;
  ldiv_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  int v1554;
  ldiv_t v1555;
  uint64_t v1556;
  int v1557;
  unsigned int v1558;
  int v1559;
  unint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t *v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t *v1569;
  uint64_t v1570;
  uint64_t v1571;
  int v1572;
  int v1573;
  unint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  int v1577;
  unsigned int v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  int v1584;
  ldiv_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  int v1589;
  ldiv_t v1590;
  uint64_t v1591;
  int v1592;
  unsigned int v1593;
  int v1594;
  unint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  int *v1599;
  uint64_t v1600;
  unint64_t v1601;
  uint64_t v1602;
  char v1603;
  unsigned int v1604;
  _QWORD *v1605;
  uint64_t v1606;
  unint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  int v1614;
  ldiv_t v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  int v1621;
  ldiv_t v1622;
  uint64_t v1623;
  char v1624;
  unsigned int v1625;
  int v1626;
  unint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  int *v1631;
  uint64_t v1632;
  unint64_t v1633;
  uint64_t v1634;
  char v1635;
  unsigned int v1636;
  _QWORD *v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  unint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  int v1646;
  ldiv_t v1647;
  uint64_t v1648;
  unint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  int v1653;
  ldiv_t v1654;
  uint64_t v1655;
  char v1656;
  unsigned int v1657;
  int v1658;
  unint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t *v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t *v1668;
  uint64_t v1669;
  uint64_t v1670;
  int v1671;
  int v1672;
  unint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  int v1676;
  unsigned int v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  int v1683;
  ldiv_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  int v1688;
  ldiv_t v1689;
  uint64_t v1690;
  int v1691;
  unsigned int v1692;
  int v1693;
  unint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t *v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t *v1703;
  uint64_t v1704;
  uint64_t v1705;
  int v1706;
  int v1707;
  unint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  int v1711;
  unsigned int v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  int v1718;
  ldiv_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  int v1723;
  ldiv_t v1724;
  uint64_t v1725;
  int v1726;
  unsigned int v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  unint64_t v1735;
  uint64_t *v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t *v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  unsigned int v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  int v1754;
  ldiv_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  int v1759;
  ldiv_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  unsigned int v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  unint64_t v1771;
  uint64_t *v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t *v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  unsigned int v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  int v1790;
  ldiv_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  int v1795;
  ldiv_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  unsigned int v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  unint64_t v1807;
  uint64_t *v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t *v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  float v1820;
  unsigned int v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  int v1826;
  ldiv_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  int v1831;
  ldiv_t v1832;
  uint64_t v1833;
  float v1834;
  unsigned int v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  unint64_t v1843;
  uint64_t *v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t *v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  float v1856;
  unsigned int v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  int v1862;
  ldiv_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  int v1867;
  ldiv_t v1868;
  uint64_t v1869;
  float v1870;
  unsigned int v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  unsigned int v1901;
  unsigned int v1902;
  uint64_t v1903;
  uint64_t v1904;
  unsigned int v1905;
  unsigned int v1906;
  unsigned int v1907;
  unsigned int v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  int *v1916;
  int *v1917;
  int *v1918;
  int *v1919;
  int *v1920;
  int *v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  unint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  unint64_t v1930;
  uint64_t v1931;
  unint64_t v1932;
  uint64_t v1933;
  unint64_t v1934;
  unint64_t v1935;
  unint64_t v1936;
  unint64_t v1937;
  unint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  unint64_t v1941;
  unint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  unint64_t v1945;
  unint64_t v1946;
  unint64_t v1947;
  unint64_t v1948;
  unint64_t v1949;
  unint64_t v1950;
  uint64_t v1951;
  unint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  unint64_t v1959;
  uint64_t v1960;
  unint64_t v1961;
  uint64_t v1962;
  unint64_t v1963;
  unint64_t v1964;
  unint64_t v1965;
  unint64_t v1966;
  unint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  unint64_t v1970;
  unint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  unint64_t v1974;
  unint64_t v1975;
  unint64_t v1976;
  unint64_t v1977;
  unint64_t v1978;
  unint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  int *v1986;
  int *v1987;
  int v1988;
  uint64_t v1989;
  unint64_t v1990;
  unint64_t v1991;
  unint64_t v1992;
  unint64_t v1993;
  unint64_t v1994;
  unint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(_BYTE **)(*a1 + 152))
            v7 = **(_BYTE **)(*a2 + 152) == 0;
          else
            v7 = 1;
          v8 = !v7;
          goto LABEL_21;
        case 1:
          v36 = *(_DWORD *)(*a2 + 160);
          if (v36 >= 1)
          {
            v37 = **(unsigned __int8 **)(*a1 + 152);
            v38 = *(char **)(*(_QWORD *)a3 + 152);
            v39 = *(unsigned __int8 **)(*a2 + 152);
            v40 = v36 + 1;
            do
            {
              v42 = *v39++;
              v41 = v42;
              if (v37)
                v43 = v41 == 0;
              else
                v43 = 1;
              v44 = !v43;
              *v38++ = v44;
              --v40;
            }
            while (v40 > 1);
          }
          return;
        case 2:
          v45 = *(_DWORD *)(*a1 + 160);
          if (v45 >= 1)
          {
            v46 = **(unsigned __int8 **)(*a2 + 152);
            v47 = *(char **)(*(_QWORD *)a3 + 152);
            v48 = *(unsigned __int8 **)(*a1 + 152);
            v49 = v45 + 1;
            do
            {
              v51 = *v48++;
              v50 = v51;
              if (v46)
                v52 = v50 == 0;
              else
                v52 = 1;
              v53 = !v52;
              *v47++ = v53;
              --v49;
            }
            while (v49 > 1);
          }
          return;
        case 3:
          v54 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v54 >= 1)
          {
            v55 = *(char **)(*(_QWORD *)a3 + 152);
            v56 = *(unsigned __int8 **)(*a2 + 152);
            v57 = *(unsigned __int8 **)(*a1 + 152);
            v58 = v54 + 1;
            do
            {
              v59 = *v57++;
              v7 = v59 == 0;
              v61 = *v56++;
              v60 = v61;
              v63 = !v7 && v60 != 0;
              *v55++ = v63;
              --v58;
            }
            while (v58 > 1);
          }
          return;
        default:
          v27 = *(_QWORD **)a3;
          v28 = (_QWORD *)*a1;
          v29 = *(int **)*a1;
          v30 = (v28[1] - (_QWORD)v29) >> 2;
          v31 = (v30 - 1);
          if ((int)v31 >= -1)
            v32 = -1;
          else
            v32 = v30 - 1;
          v33 = v32 + 1;
          v34 = v30 + 1;
          break;
      }
      while (1)
      {
        v35 = v34 - 2;
        if (v34 - 2 < 0)
          break;
        --v34;
        if (*(_QWORD *)(v28[3] + 8 * v35) != *(_QWORD *)(v27[3] + 8 * v35))
          goto LABEL_170;
      }
      v34 = v33;
LABEL_170:
      v224 = (_QWORD *)*a2;
      v225 = *(int **)*a2;
      v226 = (v224[1] - (_QWORD)v225) >> 2;
      v227 = (v226 - 1);
      if ((int)v227 >= -1)
        v228 = -1;
      else
        v228 = v226 - 1;
      v229 = v228 + 1;
      v230 = v226 + 1;
      while (1)
      {
        v231 = v230 - 2;
        if (v230 - 2 < 0)
          break;
        --v230;
        if (*(_QWORD *)(v224[3] + 8 * v231) != *(_QWORD *)(v27[3] + 8 * v231))
          goto LABEL_224;
      }
      v230 = v229;
LABEL_224:
      v278 = v30 + 1;
      while (1)
      {
        v279 = v278 - 2;
        if (v278 - 2 < 0)
          break;
        --v278;
        if (*(_QWORD *)(v28[3] + 8 * v279))
          goto LABEL_259;
      }
      v278 = v33;
LABEL_259:
      v292 = v226 + 1;
      while (1)
      {
        v293 = v292 - 2;
        if (v292 - 2 < 0)
          break;
        --v292;
        if (*(_QWORD *)(v224[3] + 8 * v293))
          goto LABEL_294;
      }
      v292 = v229;
LABEL_294:
      v306 = (uint64_t)(v27[1] - *v27) >> 2;
      if (v34 <= v230)
        v307 = v230;
      else
        v307 = v34;
      if (v34 <= v292)
        v34 = v292;
      if (v278 > v230)
        v230 = v278;
      if (v306 > v230)
      {
        v308 = 1;
      }
      else
      {
        v230 = (uint64_t)(v27[1] - *v27) >> 2;
        v308 = 4;
      }
      if (v306 > v34)
      {
        v309 = 2;
      }
      else
      {
        v34 = v230;
        v309 = v308;
      }
      if (v306 > v307)
      {
        v34 = v307;
        v309 = 3;
      }
      v1980 = v227;
      v1996 = v31;
      if (!v34)
        goto LABEL_329;
      v310 = *(_QWORD *)(v27[3] + 8 * (v34 - 1));
      if (v310 < 0x10)
        goto LABEL_329;
      switch(v309)
      {
        case 1:
          if (v34 == 2)
          {
            v1382 = *v29;
            if ((_DWORD)v1382)
            {
              v1383 = 0;
              v1384 = 0;
              v1385 = 0;
              v1386 = v28[19];
              v1387 = v224[19];
              v1388 = v27[19];
              v1389 = v29[1];
              v1390 = (uint64_t *)v28[3];
              v1391 = *v1390;
              v1392 = v1390[1];
              v1393 = (uint64_t *)v224[3];
              v1395 = *v1393;
              v1394 = v1393[1];
              if (v1389 <= 1)
                v1396 = 1;
              else
                v1396 = v29[1];
              v1397 = v1391 - v1392 * v1389;
              v1398 = v1395 - v1394 * v225[1];
              do
              {
                if ((_DWORD)v1389)
                {
                  v1399 = 0;
                  v1400 = v1387 + v1384;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1401 = 0;
                      v1402 = *(unsigned __int8 *)(v1386 + v1385);
                      v1403 = v310 + 1;
                      do
                      {
                        if (v1402)
                          v1404 = *(_BYTE *)(v1400 + v1401) == 0;
                        else
                          v1404 = 1;
                        v1405 = !v1404;
                        *(_BYTE *)(v1388 + v1401) = v1405;
                        --v1403;
                        ++v1401;
                      }
                      while (v1403 > 1);
                    }
                    v1385 += v1392;
                    v1384 += v1394;
                    v1388 += (int)v310;
                    ++v1399;
                    v1400 += v1394;
                  }
                  while (v1399 != v1396);
                }
                v1385 += v1397;
                v1384 += v1398;
                ++v1383;
              }
              while (v1383 != v1382);
            }
          }
          else if (v34 == 1)
          {
            v992 = *v29;
            if ((_DWORD)v992)
            {
              v993 = 0;
              v994 = 0;
              v995 = v28[19];
              v996 = v224[19];
              v997 = v27[19];
              v998 = *(_QWORD *)v28[3];
              v999 = *(_QWORD *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  v1000 = 0;
                  v1001 = *(unsigned __int8 *)(v995 + v994);
                  v1002 = v310 + 1;
                  do
                  {
                    if (v1001)
                      v1003 = *(_BYTE *)(v996 + v1000) == 0;
                    else
                      v1003 = 1;
                    v1004 = !v1003;
                    *(_BYTE *)(v997 + v1000) = v1004;
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                }
                v994 += v998;
                v997 += (int)v310;
                ++v993;
                v996 += v999;
              }
              while (v993 != v992);
            }
          }
          else
          {
            v1937 = v27[6];
            if (v1937)
            {
              v1966 = 0;
              v1889 = v224[19];
              v1903 = v28[19];
              v1406 = v27[19];
              do
              {
                v1407 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  v1408 = v28[3];
                  quot = v1966;
                  do
                  {
                    v1410 = ldiv(quot, v29[v31]);
                    quot = v1410.quot;
                    v1407 += *(_QWORD *)(v1408 + 8 * v31--) * v1410.rem;
                  }
                  while (v31 != -1);
                }
                v1411 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1412) = 0;
                }
                else
                {
                  v1412 = 0;
                  v1413 = v224[3];
                  v1414 = v1966;
                  do
                  {
                    v1415 = ldiv(v1414, v225[v1411]);
                    v1414 = v1415.quot;
                    v1412 += *(_QWORD *)(v1413 + 8 * v1411--) * v1415.rem;
                  }
                  while (v1411 != -1);
                }
                v31 = v1996;
                if ((int)v310 >= 1)
                {
                  v1416 = 0;
                  v1417 = *(unsigned __int8 *)(v1903 + (int)v1407);
                  v1418 = v310 + 1;
                  do
                  {
                    if (v1417)
                      v1419 = *(_BYTE *)(v1889 + (int)v1412 + v1416) == 0;
                    else
                      v1419 = 1;
                    v1420 = !v1419;
                    *(_BYTE *)(v1406 + v1416) = v1420;
                    --v1418;
                    ++v1416;
                  }
                  while (v1418 > 1);
                }
                v1406 += (int)v310;
                v1966 += (int)v310;
              }
              while (v1966 < v1937);
            }
          }
          break;
        case 2:
          if (v34 == 2)
          {
            v1421 = *v29;
            if ((_DWORD)v1421)
            {
              v1422 = 0;
              v1423 = 0;
              v1424 = 0;
              v1425 = v28[19];
              v1426 = v224[19];
              v1427 = v27[19];
              v1428 = v29[1];
              v1429 = (uint64_t *)v28[3];
              v1430 = *v1429;
              v1431 = v1429[1];
              v1432 = (uint64_t *)v224[3];
              v1434 = *v1432;
              v1433 = v1432[1];
              if (v1428 <= 1)
                v1435 = 1;
              else
                v1435 = v29[1];
              v1436 = v1430 - v1431 * v1428;
              v1437 = v1434 - v1433 * v225[1];
              do
              {
                if ((_DWORD)v1428)
                {
                  v1438 = 0;
                  v1439 = v1425 + v1424;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1440 = 0;
                      v1441 = *(unsigned __int8 *)(v1426 + v1423);
                      v1442 = v310 + 1;
                      do
                      {
                        if (v1441)
                          v1443 = *(_BYTE *)(v1439 + v1440) == 0;
                        else
                          v1443 = 1;
                        v1444 = !v1443;
                        *(_BYTE *)(v1427 + v1440) = v1444;
                        --v1442;
                        ++v1440;
                      }
                      while (v1442 > 1);
                    }
                    v1424 += v1431;
                    v1423 += v1433;
                    v1427 += (int)v310;
                    ++v1438;
                    v1439 += v1431;
                  }
                  while (v1438 != v1435);
                }
                v1424 += v1436;
                v1423 += v1437;
                ++v1422;
              }
              while (v1422 != v1421);
            }
          }
          else if (v34 == 1)
          {
            v1005 = *v29;
            if ((_DWORD)v1005)
            {
              v1006 = 0;
              v1007 = 0;
              v1008 = v28[19];
              v1009 = v224[19];
              v1010 = v27[19];
              v1011 = *(_QWORD *)v28[3];
              v1012 = *(_QWORD *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  v1013 = 0;
                  v1014 = *(unsigned __int8 *)(v1009 + v1007);
                  v1015 = v310 + 1;
                  do
                  {
                    if (v1014)
                      v1016 = *(_BYTE *)(v1008 + v1013) == 0;
                    else
                      v1016 = 1;
                    v1017 = !v1016;
                    *(_BYTE *)(v1010 + v1013) = v1017;
                    --v1015;
                    ++v1013;
                  }
                  while (v1015 > 1);
                }
                v1007 += v1012;
                v1010 += (int)v310;
                ++v1006;
                v1008 += v1011;
              }
              while (v1006 != v1005);
            }
          }
          else
          {
            v1938 = v27[6];
            if (v1938)
            {
              v1967 = 0;
              v1890 = v224[19];
              v1904 = v28[19];
              v1445 = v27[19];
              do
              {
                v1446 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  v1447 = v28[3];
                  v1448 = v1967;
                  do
                  {
                    v1449 = ldiv(v1448, v29[v31]);
                    v1448 = v1449.quot;
                    v1446 += *(_QWORD *)(v1447 + 8 * v31--) * v1449.rem;
                  }
                  while (v31 != -1);
                }
                v1450 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1451) = 0;
                }
                else
                {
                  v1451 = 0;
                  v1452 = v224[3];
                  v1453 = v1967;
                  do
                  {
                    v1454 = ldiv(v1453, v225[v1450]);
                    v1453 = v1454.quot;
                    v1451 += *(_QWORD *)(v1452 + 8 * v1450--) * v1454.rem;
                  }
                  while (v1450 != -1);
                }
                v31 = v1996;
                if ((int)v310 >= 1)
                {
                  v1455 = 0;
                  v1456 = *(unsigned __int8 *)(v1890 + (int)v1451);
                  v1457 = v310 + 1;
                  do
                  {
                    if (v1456)
                      v1458 = *(_BYTE *)(v1904 + (int)v1446 + v1455) == 0;
                    else
                      v1458 = 1;
                    v1459 = !v1458;
                    *(_BYTE *)(v1445 + v1455) = v1459;
                    --v1457;
                    ++v1455;
                  }
                  while (v1457 > 1);
                }
                v1445 += (int)v310;
                v1967 += (int)v310;
              }
              while (v1967 < v1938);
            }
          }
          break;
        case 3:
          if (v34 == 2)
          {
            v1146 = *v29;
            if ((_DWORD)v1146)
            {
              v1147 = 0;
              v1148 = 0;
              v1149 = 0;
              v1150 = v28[19];
              v1151 = v224[19];
              v1152 = v27[19];
              v1153 = v29[1];
              v1154 = (uint64_t *)v28[3];
              v1155 = *v1154;
              v1156 = v1154[1];
              v1157 = (uint64_t *)v224[3];
              v1159 = *v1157;
              v1158 = v1157[1];
              if (v1153 <= 1)
                v1160 = 1;
              else
                v1160 = v29[1];
              v1161 = v1155 - v1156 * v1153;
              v1162 = v1159 - v1158 * v225[1];
              do
              {
                if ((_DWORD)v1153)
                {
                  v1163 = 0;
                  v1164 = v1151 + v1148;
                  v1165 = v1150 + v1149;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      v1166 = 0;
                      v1167 = v310 + 1;
                      do
                      {
                        if (*(_BYTE *)(v1165 + v1166))
                          v1168 = *(_BYTE *)(v1164 + v1166) == 0;
                        else
                          v1168 = 1;
                        v1169 = !v1168;
                        *(_BYTE *)(v1152 + v1166) = v1169;
                        --v1167;
                        ++v1166;
                      }
                      while (v1167 > 1);
                    }
                    v1149 += v1156;
                    v1148 += v1158;
                    v1152 += (int)v310;
                    ++v1163;
                    v1164 += v1158;
                    v1165 += v1156;
                  }
                  while (v1163 != v1160);
                }
                v1149 += v1161;
                v1148 += v1162;
                ++v1147;
              }
              while (v1147 != v1146);
            }
          }
          else if (v34 == 1)
          {
            v311 = *v29;
            if ((_DWORD)v311)
            {
              v312 = 0;
              v313 = v28[19];
              v314 = v224[19];
              v315 = v27[19];
              v316 = *(_QWORD *)v28[3];
              v317 = *(_QWORD *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  v318 = 0;
                  v319 = v310 + 1;
                  do
                  {
                    if (*(_BYTE *)(v313 + v318))
                      v320 = *(_BYTE *)(v314 + v318) == 0;
                    else
                      v320 = 1;
                    v321 = !v320;
                    *(_BYTE *)(v315 + v318) = v321;
                    --v319;
                    ++v318;
                  }
                  while (v319 > 1);
                }
                v315 += (int)v310;
                ++v312;
                v314 += v317;
                v313 += v316;
              }
              while (v312 != v311);
            }
          }
          else
          {
            v1930 = v27[6];
            if (v1930)
            {
              v1959 = 0;
              v1884 = v224[19];
              v1900 = v28[19];
              v1170 = v27[19];
              do
              {
                v1171 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  v1172 = v28[3];
                  v1173 = v1959;
                  do
                  {
                    v1174 = ldiv(v1173, v29[v31]);
                    v1173 = v1174.quot;
                    v1171 += *(_QWORD *)(v1172 + 8 * v31--) * v1174.rem;
                  }
                  while (v31 != -1);
                }
                v1175 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1176) = 0;
                }
                else
                {
                  v1176 = 0;
                  v1177 = v224[3];
                  v1178 = v1959;
                  do
                  {
                    v1179 = ldiv(v1178, v225[v1175]);
                    v1178 = v1179.quot;
                    v1176 += *(_QWORD *)(v1177 + 8 * v1175--) * v1179.rem;
                  }
                  while (v1175 != -1);
                }
                v31 = v1996;
                if ((int)v310 >= 1)
                {
                  v1180 = 0;
                  v1181 = v310 + 1;
                  do
                  {
                    if (*(_BYTE *)(v1900 + (int)v1171 + v1180))
                      v1182 = *(_BYTE *)(v1884 + (int)v1176 + v1180) == 0;
                    else
                      v1182 = 1;
                    v1183 = !v1182;
                    *(_BYTE *)(v1170 + v1180) = v1183;
                    --v1181;
                    ++v1180;
                  }
                  while (v1181 > 1);
                }
                v1170 += (int)v310;
                v1959 += (int)v310;
              }
              while (v1959 < v1930);
            }
          }
          break;
        default:
LABEL_329:
          switch(v306)
          {
            case 1uLL:
              v322 = v27[6];
              if (v322)
              {
                v323 = (_BYTE *)v28[19];
                v324 = (_BYTE *)v224[19];
                v325 = (char *)v27[19];
                v326 = *(_QWORD *)v28[3];
                v327 = *(_QWORD *)v224[3];
                do
                {
                  if (*v323)
                    v328 = *v324 == 0;
                  else
                    v328 = 1;
                  v329 = !v328;
                  *v325++ = v329;
                  v324 += v327;
                  v323 += v326;
                  --v322;
                }
                while (v322);
              }
              break;
            case 2uLL:
              v463 = *v29;
              if ((_DWORD)v463)
              {
                v464 = 0;
                v465 = 0;
                v466 = 0;
                v467 = 0;
                v468 = v28[19];
                v469 = v224[19];
                v470 = v27[19];
                v471 = v29[1];
                v472 = (uint64_t *)v28[3];
                v473 = *v472;
                v474 = v472[1];
                v475 = (uint64_t *)v224[3];
                v476 = *v475;
                v477 = v475[1];
                v478 = v476 - v477 * v225[1];
                if (v471 <= 1)
                  v479 = 1;
                else
                  v479 = v29[1];
                v480 = v473 - v474 * v471;
                do
                {
                  if ((_DWORD)v471)
                  {
                    v481 = v465 + v479;
                    v482 = (char *)(v470 + v465);
                    v483 = v479;
                    do
                    {
                      if (*(_BYTE *)(v468 + v467))
                        v484 = *(_BYTE *)(v469 + v466) == 0;
                      else
                        v484 = 1;
                      v485 = !v484;
                      *v482++ = v485;
                      v467 += v474;
                      v466 += v477;
                      --v483;
                    }
                    while (v483);
                    v465 = v481;
                  }
                  v467 += v480;
                  v466 += v478;
                  ++v464;
                }
                while (v464 != v463);
              }
              break;
            case 3uLL:
              v486 = *v29;
              if ((_DWORD)v486)
              {
                v487 = 0;
                v488 = 0;
                v489 = 0;
                v490 = 0;
                v491 = v28[19];
                v492 = v224[19];
                v493 = v27[19];
                v494 = v29[1];
                v495 = (_QWORD *)v28[3];
                v496 = v495[1];
                v497 = (_QWORD *)v224[3];
                v498 = v497[1];
                v499 = *v497 - v498 * v225[1];
                if (v494 <= 1)
                  v500 = 1;
                else
                  v500 = v29[1];
                v501 = *v495 - v496 * v494;
                do
                {
                  if ((_DWORD)v494)
                  {
                    v502 = 0;
                    v503 = v29[2];
                    v504 = v495[2];
                    v505 = v497[2];
                    if (v503 <= 1)
                      v506 = 1;
                    else
                      v506 = v29[2];
                    v507 = v498 - v505 * v225[2];
                    do
                    {
                      v508 = v506;
                      if ((_DWORD)v503)
                      {
                        do
                        {
                          if (*(_BYTE *)(v491 + v490))
                            v509 = *(_BYTE *)(v492 + v489) == 0;
                          else
                            v509 = 1;
                          v510 = !v509;
                          *(_BYTE *)(v493 + v488++) = v510;
                          v490 += v504;
                          v489 += v505;
                          --v508;
                        }
                        while (v508);
                      }
                      v490 += v496 - v504 * v503;
                      v489 += v507;
                      ++v502;
                    }
                    while (v502 != v500);
                  }
                  v490 += v501;
                  v489 += v499;
                  ++v487;
                }
                while (v487 != v486);
              }
              break;
            case 4uLL:
              v2003 = *v29;
              if ((_DWORD)v2003)
              {
                v511 = 0;
                v512 = 0;
                v513 = 0;
                v514 = 0;
                v515 = v28[19];
                v516 = v224[19];
                v517 = v27[19];
                v518 = v29[1];
                v519 = (_QWORD *)v28[3];
                v520 = (_QWORD *)v224[3];
                v1910 = v520[1];
                v1923 = v519[1];
                if (v518 <= 1)
                  v521 = 1;
                else
                  v521 = v29[1];
                v1952 = *v519 - v519[1] * v518;
                v1985 = *v520 - v1910 * v225[1];
                do
                {
                  if ((_DWORD)v518)
                  {
                    v522 = 0;
                    v523 = v29[2];
                    v524 = v519[2];
                    v525 = v520[2];
                    if (v523 <= 1)
                      v526 = 1;
                    else
                      v526 = v29[2];
                    v527 = v1910 - v525 * v225[2];
                    do
                    {
                      if ((_DWORD)v523)
                      {
                        v528 = 0;
                        v529 = v29[3];
                        v530 = v519[3];
                        v531 = v520[3];
                        if (v529 <= 1)
                          v532 = 1;
                        else
                          v532 = v29[3];
                        v533 = v525 - v531 * v225[3];
                        do
                        {
                          v534 = v532;
                          if ((_DWORD)v529)
                          {
                            do
                            {
                              if (*(_BYTE *)(v515 + v514))
                                v535 = *(_BYTE *)(v516 + v513) == 0;
                              else
                                v535 = 1;
                              v536 = !v535;
                              *(_BYTE *)(v517 + v512++) = v536;
                              v514 += v530;
                              v513 += v531;
                              --v534;
                            }
                            while (v534);
                          }
                          v514 += v524 - v530 * v529;
                          v513 += v533;
                          ++v528;
                        }
                        while (v528 != v526);
                      }
                      v514 += v1923 - v524 * v523;
                      v513 += v527;
                      ++v522;
                    }
                    while (v522 != v521);
                  }
                  v514 += v1952;
                  v513 += v1985;
                  ++v511;
                }
                while (v511 != v2003);
              }
              break;
            default:
              v450 = v27[6];
              if (v450)
              {
                v451 = 0;
                v1922 = v224[19];
                v1951 = v28[19];
                v1909 = v27[19];
                do
                {
                  v452 = 0;
                  if ((v31 & 0x80000000) == 0)
                  {
                    v453 = v28[3];
                    v454 = v451;
                    do
                    {
                      v455 = ldiv(v454, v29[v31]);
                      v454 = v455.quot;
                      v452 += *(_QWORD *)(v453 + 8 * v31--) * v455.rem;
                    }
                    while (v31 != -1);
                  }
                  v456 = v1980;
                  if ((v1980 & 0x80000000) != 0)
                  {
                    LODWORD(v457) = 0;
                  }
                  else
                  {
                    v457 = 0;
                    v458 = v224[3];
                    v459 = v451;
                    do
                    {
                      v460 = ldiv(v459, v225[v456]);
                      v459 = v460.quot;
                      v457 += *(_QWORD *)(v458 + 8 * v456--) * v460.rem;
                    }
                    while (v456 != -1);
                  }
                  if (*(_BYTE *)(v1951 + (int)v452))
                    v461 = *(_BYTE *)(v1922 + (int)v457) == 0;
                  else
                    v461 = 1;
                  v462 = !v461;
                  *(_BYTE *)(v1909 + v451++) = v462;
                  v31 = v1996;
                }
                while (v451 != v450);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          goto LABEL_20;
        case 1:
          v10 = *(_DWORD *)(*a2 + 160);
          if (v10 >= 1)
          {
            v11 = **(_BYTE **)(*a1 + 152);
            v12 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v13 = *(char **)(*a2 + 152);
            v14 = v10 + 1;
            do
            {
              v15 = *v13++;
              *v12++ = v15 * v11;
              --v14;
            }
            while (v14 > 1);
          }
          return;
        case 2:
          v72 = *(_DWORD *)(*a1 + 160);
          if (v72 >= 1)
          {
            v73 = **(_BYTE **)(*a2 + 152);
            v74 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v75 = *(char **)(*a1 + 152);
            v76 = v72 + 1;
            do
            {
              v77 = *v75++;
              *v74++ = v77 * v73;
              --v76;
            }
            while (v76 > 1);
          }
          return;
        case 3:
          v78 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v78 >= 1)
          {
            v79 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v80 = *(char **)(*a2 + 152);
            v81 = *(char **)(*a1 + 152);
            v82 = v78 + 1;
            do
            {
              v84 = *v81++;
              v83 = v84;
              v85 = *v80++;
              *v79++ = v85 * v83;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          v64 = *(_QWORD **)a3;
          v65 = *a1;
          v66 = *(int **)*a1;
          v67 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v66) >> 2;
          v68 = v67 - 1;
          if ((int)v67 - 1 >= -1)
            v68 = -1;
          v69 = v68 + 1;
          v70 = v67 + 1;
          break;
      }
      while (1)
      {
        v71 = v70 - 2;
        if (v70 - 2 < 0)
          break;
        --v70;
        if (*(_QWORD *)(*(_QWORD *)(v65 + 24) + 8 * v71) != *(_QWORD *)(v64[3] + 8 * v71))
          goto LABEL_178;
      }
      v70 = v69;
LABEL_178:
      v232 = (int **)*a2;
      v233 = *(int **)*a2;
      v234 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v233) >> 2;
      v235 = v234 - 1;
      if ((int)v234 - 1 >= -1)
        v235 = -1;
      v236 = v235 + 1;
      v237 = v234 + 1;
      while (1)
      {
        v238 = v237 - 2;
        if (v237 - 2 < 0)
          break;
        --v237;
        if (*(_QWORD *)&v232[3][2 * v238] != *(_QWORD *)(v64[3] + 8 * v238))
          goto LABEL_229;
      }
      v237 = v236;
LABEL_229:
      v280 = v67 + 1;
      while (1)
      {
        v281 = v280 - 2;
        if (v280 - 2 < 0)
          break;
        --v280;
        if (*(_QWORD *)(*(_QWORD *)(v65 + 24) + 8 * v281))
          goto LABEL_264;
      }
      v280 = v69;
LABEL_264:
      v294 = v234 + 1;
      while (1)
      {
        v295 = v294 - 2;
        if (v294 - 2 < 0)
          break;
        --v294;
        if (*(_QWORD *)&v232[3][2 * v295])
          goto LABEL_341;
      }
      v294 = v236;
LABEL_341:
      v330 = (uint64_t)(v64[1] - *v64) >> 2;
      if (v70 <= v237)
        v331 = v237;
      else
        v331 = v70;
      if (v70 <= v294)
        v70 = v294;
      if (v280 > v237)
        v237 = v280;
      if (v330 > v237)
      {
        v332 = 1;
      }
      else
      {
        v237 = (uint64_t)(v64[1] - *v64) >> 2;
        v332 = 4;
      }
      if (v330 > v70)
      {
        v333 = 2;
      }
      else
      {
        v70 = v237;
        v333 = v332;
      }
      if (v330 > v331)
      {
        v70 = v331;
        v333 = 3;
      }
      if (!v70)
        goto LABEL_371;
      v334 = *(_QWORD *)(v64[3] + 8 * (v70 - 1));
      if (v334 < 0x10)
        goto LABEL_371;
      v1997 = *(_QWORD *)(v64[3] + 8 * (v70 - 1));
      switch(v333)
      {
        case 1:
          if (v70 == 2)
          {
            v1460 = *v66;
            if (*v66)
            {
              v1461 = 0;
              v1462 = 0;
              v1463 = 0;
              v1464 = *(_QWORD *)(v65 + 152);
              v1465 = v232[19];
              v1466 = v64[19];
              do
              {
                if (v66[1])
                {
                  v1467 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      v1468 = 0;
                      v1469 = *(_BYTE *)(v1464 + v1463);
                      v1470 = v334 + 1;
                      do
                      {
                        *(_BYTE *)(v1466 + v1468) = *((_BYTE *)v1465 + v1462 + v1468) * v1469;
                        --v1470;
                        ++v1468;
                      }
                      while (v1470 > 1);
                      v65 = *a1;
                      v232 = (int **)*a2;
                      v66 = *(int **)*a1;
                    }
                    v1471 = *(_QWORD **)(v65 + 24);
                    v1472 = v1471[1];
                    v1463 += v1472;
                    v1462 += *((_QWORD *)v232[3] + 1);
                    v1466 += (int)v334;
                    ++v1467;
                    v1473 = v66[1];
                  }
                  while (v1467 < v1473);
                  v1460 = *v66;
                  v233 = *v232;
                }
                else
                {
                  v1473 = 0;
                  v1471 = *(_QWORD **)(v65 + 24);
                  v1472 = v1471[1];
                }
                v1463 = *v1471 + v1463 - v1473 * v1472;
                v1462 = *(_QWORD *)v232[3] + v1462 - *((_QWORD *)v232[3] + 1) * v233[1];
                ++v1461;
              }
              while (v1461 < v1460);
            }
          }
          else if (v70 == 1)
          {
            v1018 = *v66;
            if (*v66)
            {
              v1019 = 0;
              v1020 = 0;
              v1021 = 0;
              v1022 = *(_QWORD *)(v65 + 152);
              v1023 = v232[19];
              v1024 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  v1025 = 0;
                  v1026 = *(_BYTE *)(v1022 + v1021);
                  v1027 = v334 + 1;
                  do
                  {
                    *(_BYTE *)(v1024 + v1025) = *((_BYTE *)v1023 + v1020 + v1025) * v1026;
                    --v1027;
                    ++v1025;
                  }
                  while (v1027 > 1);
                  v65 = *a1;
                  v232 = (int **)*a2;
                  v1018 = **(_DWORD **)*a1;
                }
                v1021 += **(_QWORD **)(v65 + 24);
                v1020 += *(_QWORD *)v232[3];
                v1024 += (int)v334;
                ++v1019;
              }
              while (v1019 < v1018);
            }
          }
          else if (v64[6])
          {
            v1918 = v232[19];
            v1939 = *(_QWORD *)(v65 + 152);
            v1968 = (int)v334;
            v1992 = 0;
            v1905 = v334 + 1;
            v1474 = v64[19];
            do
            {
              v1475 = *(_QWORD *)*a1;
              v1476 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1475) >> 2;
              v1477 = 0;
              v1478 = (v1476 - 1);
              if ((int)v1476 - 1 >= 0)
              {
                v1479 = *(_QWORD *)(*a1 + 24);
                v1480 = v1992;
                do
                {
                  v1481 = ldiv(v1480, *(int *)(v1475 + 4 * v1478));
                  v1480 = v1481.quot;
                  v1477 += *(_QWORD *)(v1479 + 8 * v1478--) * v1481.rem;
                }
                while (v1478 != -1);
              }
              v1482 = *(_QWORD *)*a2;
              v1483 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1482) >> 2;
              v1484 = 0;
              v1485 = (v1483 - 1);
              if ((int)v1483 - 1 >= 0)
              {
                v1486 = *(_QWORD *)(*a2 + 24);
                v1487 = v1992;
                do
                {
                  v1488 = ldiv(v1487, *(int *)(v1482 + 4 * v1485));
                  v1487 = v1488.quot;
                  v1484 += *(_QWORD *)(v1486 + 8 * v1485--) * v1488.rem;
                }
                while (v1485 != -1);
              }
              if ((int)v1997 >= 1)
              {
                v1489 = 0;
                v1490 = *(_BYTE *)(v1939 + (int)v1477);
                v1491 = v1905;
                do
                {
                  *(_BYTE *)(v1474 + v1489) = *((_BYTE *)v1918 + (int)v1484 + v1489) * v1490;
                  --v1491;
                  ++v1489;
                }
                while (v1491 > 1);
                v64 = *(_QWORD **)a3;
              }
              v1474 += v1968;
              v1992 += v1968;
            }
            while (v1992 < v64[6]);
          }
          break;
        case 2:
          if (v70 == 2)
          {
            v1492 = *v66;
            if (*v66)
            {
              v1493 = 0;
              v1494 = 0;
              v1495 = 0;
              v1496 = *(_QWORD *)(v65 + 152);
              v1497 = v232[19];
              v1498 = v64[19];
              do
              {
                if (v66[1])
                {
                  v1499 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      v1500 = 0;
                      v1501 = *((_BYTE *)v1497 + v1494);
                      v1502 = v334 + 1;
                      do
                      {
                        *(_BYTE *)(v1498 + v1500) = *(_BYTE *)(v1496 + v1495 + v1500) * v1501;
                        --v1502;
                        ++v1500;
                      }
                      while (v1502 > 1);
                      v65 = *a1;
                      v232 = (int **)*a2;
                      v66 = *(int **)*a1;
                    }
                    v1503 = *(_QWORD **)(v65 + 24);
                    v1504 = v1503[1];
                    v1495 += v1504;
                    v1494 += *((_QWORD *)v232[3] + 1);
                    v1498 += (int)v334;
                    ++v1499;
                    v1505 = v66[1];
                  }
                  while (v1499 < v1505);
                  v1492 = *v66;
                  v233 = *v232;
                }
                else
                {
                  v1505 = 0;
                  v1503 = *(_QWORD **)(v65 + 24);
                  v1504 = v1503[1];
                }
                v1495 = *v1503 + v1495 - v1505 * v1504;
                v1494 = *(_QWORD *)v232[3] + v1494 - *((_QWORD *)v232[3] + 1) * v233[1];
                ++v1493;
              }
              while (v1493 < v1492);
            }
          }
          else if (v70 == 1)
          {
            v1028 = *v66;
            if (*v66)
            {
              v1029 = 0;
              v1030 = 0;
              v1031 = 0;
              v1032 = *(_QWORD *)(v65 + 152);
              v1033 = v232[19];
              v1034 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  v1035 = 0;
                  v1036 = *((_BYTE *)v1033 + v1030);
                  v1037 = v334 + 1;
                  do
                  {
                    *(_BYTE *)(v1034 + v1035) = *(_BYTE *)(v1032 + v1031 + v1035) * v1036;
                    --v1037;
                    ++v1035;
                  }
                  while (v1037 > 1);
                  v65 = *a1;
                  v232 = (int **)*a2;
                  v1028 = **(_DWORD **)*a1;
                }
                v1031 += **(_QWORD **)(v65 + 24);
                v1030 += *(_QWORD *)v232[3];
                v1034 += (int)v334;
                ++v1029;
              }
              while (v1029 < v1028);
            }
          }
          else if (v64[6])
          {
            v1919 = v232[19];
            v1940 = *(_QWORD *)(v65 + 152);
            v1969 = (int)v334;
            v1993 = 0;
            v1906 = v334 + 1;
            v1506 = v64[19];
            do
            {
              v1507 = *(_QWORD *)*a1;
              v1508 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1507) >> 2;
              v1509 = 0;
              v1510 = (v1508 - 1);
              if ((int)v1508 - 1 >= 0)
              {
                v1511 = *(_QWORD *)(*a1 + 24);
                v1512 = v1993;
                do
                {
                  v1513 = ldiv(v1512, *(int *)(v1507 + 4 * v1510));
                  v1512 = v1513.quot;
                  v1509 += *(_QWORD *)(v1511 + 8 * v1510--) * v1513.rem;
                }
                while (v1510 != -1);
              }
              v1514 = *(_QWORD *)*a2;
              v1515 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1514) >> 2;
              v1516 = 0;
              v1517 = (v1515 - 1);
              if ((int)v1515 - 1 >= 0)
              {
                v1518 = *(_QWORD *)(*a2 + 24);
                v1519 = v1993;
                do
                {
                  v1520 = ldiv(v1519, *(int *)(v1514 + 4 * v1517));
                  v1519 = v1520.quot;
                  v1516 += *(_QWORD *)(v1518 + 8 * v1517--) * v1520.rem;
                }
                while (v1517 != -1);
              }
              if ((int)v1997 >= 1)
              {
                v1521 = 0;
                v1522 = *((_BYTE *)v1919 + (int)v1516);
                v1523 = v1906;
                do
                {
                  *(_BYTE *)(v1506 + v1521) = *(_BYTE *)(v1940 + (int)v1509 + v1521) * v1522;
                  --v1523;
                  ++v1521;
                }
                while (v1523 > 1);
                v64 = *(_QWORD **)a3;
              }
              v1506 += v1969;
              v1993 += v1969;
            }
            while (v1993 < v64[6]);
          }
          break;
        case 3:
          if (v70 == 2)
          {
            v1184 = *v66;
            if (*v66)
            {
              v1185 = 0;
              v1186 = 0;
              v1187 = 0;
              v1188 = *(_QWORD *)(v65 + 152);
              v1189 = v232[19];
              v1190 = v64[19];
              do
              {
                if (v66[1])
                {
                  v1191 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      v1192 = 0;
                      v1193 = v334 + 1;
                      do
                      {
                        *(_BYTE *)(v1190 + v1192) = *((_BYTE *)v1189 + v1186 + v1192)
                                                  * *(_BYTE *)(v1188 + v1187 + v1192);
                        --v1193;
                        ++v1192;
                      }
                      while (v1193 > 1);
                      v65 = *a1;
                      v232 = (int **)*a2;
                      v66 = *(int **)*a1;
                    }
                    v1194 = *(_QWORD **)(v65 + 24);
                    v1195 = v1194[1];
                    v1187 += v1195;
                    v1186 += *((_QWORD *)v232[3] + 1);
                    v1190 += (int)v334;
                    ++v1191;
                    v1196 = v66[1];
                  }
                  while (v1191 < v1196);
                  v1184 = *v66;
                  v233 = *v232;
                }
                else
                {
                  v1196 = 0;
                  v1194 = *(_QWORD **)(v65 + 24);
                  v1195 = v1194[1];
                }
                v1187 = *v1194 + v1187 - v1196 * v1195;
                v1186 = *(_QWORD *)v232[3] + v1186 - *((_QWORD *)v232[3] + 1) * v233[1];
                ++v1185;
              }
              while (v1185 < v1184);
            }
          }
          else if (v70 == 1)
          {
            v335 = *v66;
            if (*v66)
            {
              v336 = 0;
              v337 = 0;
              v338 = 0;
              v339 = *(_QWORD *)(v65 + 152);
              v340 = v232[19];
              v341 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  v342 = 0;
                  v343 = v334 + 1;
                  do
                  {
                    *(_BYTE *)(v341 + v342) = *((_BYTE *)v340 + v337 + v342) * *(_BYTE *)(v339 + v338 + v342);
                    --v343;
                    ++v342;
                  }
                  while (v343 > 1);
                  v65 = *a1;
                  v232 = (int **)*a2;
                  v335 = **(_DWORD **)*a1;
                }
                v338 += **(_QWORD **)(v65 + 24);
                v337 += *(_QWORD *)v232[3];
                v341 += (int)v334;
                ++v336;
              }
              while (v336 < v335);
            }
          }
          else if (v64[6])
          {
            v1916 = v232[19];
            v1931 = *(_QWORD *)(v65 + 152);
            v1960 = (int)v334;
            v1990 = 0;
            v1901 = v334 + 1;
            v1197 = v64[19];
            do
            {
              v1198 = *(_QWORD *)*a1;
              v1199 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1198) >> 2;
              v1200 = 0;
              v1201 = (v1199 - 1);
              if ((int)v1199 - 1 >= 0)
              {
                v1202 = *(_QWORD *)(*a1 + 24);
                v1203 = v1990;
                do
                {
                  v1204 = ldiv(v1203, *(int *)(v1198 + 4 * v1201));
                  v1203 = v1204.quot;
                  v1200 += *(_QWORD *)(v1202 + 8 * v1201--) * v1204.rem;
                }
                while (v1201 != -1);
              }
              v1205 = *(_QWORD *)*a2;
              v1206 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1205) >> 2;
              v1207 = 0;
              v1208 = (v1206 - 1);
              if ((int)v1206 - 1 >= 0)
              {
                v1209 = *(_QWORD *)(*a2 + 24);
                v1210 = v1990;
                do
                {
                  v1211 = ldiv(v1210, *(int *)(v1205 + 4 * v1208));
                  v1210 = v1211.quot;
                  v1207 += *(_QWORD *)(v1209 + 8 * v1208--) * v1211.rem;
                }
                while (v1208 != -1);
              }
              if ((int)v1997 >= 1)
              {
                v1212 = 0;
                v1213 = v1901;
                do
                {
                  *(_BYTE *)(v1197 + v1212) = *((_BYTE *)v1916 + (int)v1207 + v1212)
                                            * *(_BYTE *)(v1931 + (int)v1200 + v1212);
                  --v1213;
                  ++v1212;
                }
                while (v1213 > 1);
                v64 = *(_QWORD **)a3;
              }
              v1197 += v1960;
              v1990 += v1960;
            }
            while (v1990 < v64[6]);
          }
          break;
        default:
LABEL_371:
          switch(v330)
          {
            case 1uLL:
              if (v64[6])
              {
                v344 = 0;
                v345 = 0;
                v346 = 0;
                v347 = *(_QWORD *)(v65 + 152);
                v348 = v232[19];
                v349 = v64[19];
                do
                {
                  *(_BYTE *)(v349 + v344) = *((_BYTE *)v348 + v345) * *(_BYTE *)(v347 + v346);
                  v346 += **(_QWORD **)(*a1 + 24);
                  v345 += **(_QWORD **)(*a2 + 24);
                  ++v344;
                }
                while (v344 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v553 = *v66;
              if (*v66)
              {
                v554 = 0;
                v555 = 0;
                v556 = 0;
                v557 = 0;
                v558 = *(_QWORD *)(v65 + 152);
                v559 = v232[19];
                v560 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    v561 = 0;
                    do
                    {
                      *(_BYTE *)(v560 + v555 + v561) = *((_BYTE *)v559 + v556) * *(_BYTE *)(v558 + v557);
                      v65 = *a1;
                      v562 = *(_QWORD **)(*a1 + 24);
                      v563 = v562[1];
                      v557 += v563;
                      v232 = (int **)*a2;
                      v564 = *(int **)(*a2 + 24);
                      v565 = *((_QWORD *)v564 + 1);
                      v556 += v565;
                      ++v561;
                      v66 = *(int **)*a1;
                      v566 = v66[1];
                    }
                    while (v561 < v566);
                    v553 = *v66;
                    v233 = *v232;
                    v555 += v561;
                  }
                  else
                  {
                    v566 = 0;
                    v562 = *(_QWORD **)(v65 + 24);
                    v563 = v562[1];
                    v564 = v232[3];
                    v565 = *((_QWORD *)v564 + 1);
                  }
                  v557 = *v562 + v557 - v566 * v563;
                  v556 = *(_QWORD *)v564 + v556 - v565 * v233[1];
                  ++v554;
                }
                while (v554 < v553);
              }
              break;
            case 3uLL:
              v567 = *v66;
              if (*v66)
              {
                v568 = 0;
                v569 = 0;
                v570 = 0;
                v571 = 0;
                v572 = *(_QWORD *)(v65 + 152);
                v573 = v232[19];
                v574 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    v575 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        v576 = 0;
                        do
                        {
                          *(_BYTE *)(v574 + v569 + v576) = *((_BYTE *)v573 + v570) * *(_BYTE *)(v572 + v571);
                          v65 = *a1;
                          v577 = *(_QWORD **)(*a1 + 24);
                          v578 = v577[2];
                          v571 += v578;
                          v232 = (int **)*a2;
                          v579 = *(int **)(*a2 + 24);
                          v580 = *((_QWORD *)v579 + 2);
                          v570 += v580;
                          ++v576;
                          v66 = *(int **)*a1;
                          v581 = v66[2];
                        }
                        while (v576 < v581);
                        v233 = *v232;
                        v569 += v576;
                      }
                      else
                      {
                        v581 = 0;
                        v577 = *(_QWORD **)(v65 + 24);
                        v578 = v577[2];
                        v579 = v232[3];
                        v580 = *((_QWORD *)v579 + 2);
                      }
                      v582 = v577[1];
                      v571 = v582 + v571 - v581 * v578;
                      v570 = *((_QWORD *)v579 + 1) + v570 - v580 * v233[2];
                      ++v575;
                      v583 = v66[1];
                    }
                    while (v575 < v583);
                    v567 = *v66;
                  }
                  else
                  {
                    v583 = 0;
                    v577 = *(_QWORD **)(v65 + 24);
                    v582 = v577[1];
                  }
                  v571 = *v577 + v571 - v583 * v582;
                  v570 = *(_QWORD *)v232[3] + v570 - *((_QWORD *)v232[3] + 1) * v233[1];
                  ++v568;
                }
                while (v568 < v567);
              }
              break;
            case 4uLL:
              v584 = *v66;
              if (*v66)
              {
                v585 = 0;
                v586 = 0;
                v587 = 0;
                v588 = 0;
                v589 = *(_QWORD *)(v65 + 152);
                v590 = v232[19];
                v591 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    v592 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        v593 = 0;
                        do
                        {
                          if (v66[3])
                          {
                            v594 = 0;
                            do
                            {
                              *(_BYTE *)(v591 + v586 + v594) = *((_BYTE *)v590 + v587) * *(_BYTE *)(v589 + v588);
                              v65 = *a1;
                              v595 = *(_QWORD **)(*a1 + 24);
                              v596 = v595[3];
                              v588 += v596;
                              v232 = (int **)*a2;
                              v597 = *(int **)(*a2 + 24);
                              v598 = *((_QWORD *)v597 + 3);
                              v587 += v598;
                              ++v594;
                              v66 = *(int **)*a1;
                              v599 = v66[3];
                            }
                            while (v594 < v599);
                            v233 = *v232;
                            v586 += v594;
                          }
                          else
                          {
                            v599 = 0;
                            v595 = *(_QWORD **)(v65 + 24);
                            v596 = v595[3];
                            v597 = v232[3];
                            v598 = *((_QWORD *)v597 + 3);
                          }
                          v600 = v595[2];
                          v588 = v600 + v588 - v599 * v596;
                          v587 = *((_QWORD *)v597 + 2) + v587 - v598 * v233[3];
                          ++v593;
                          v601 = v66[2];
                        }
                        while (v593 < v601);
                      }
                      else
                      {
                        v601 = 0;
                        v595 = *(_QWORD **)(v65 + 24);
                        v600 = v595[2];
                      }
                      v588 = v595[1] + v588 - v601 * v600;
                      v587 = *((_QWORD *)v232[3] + 1) + v587 - *((_QWORD *)v232[3] + 2) * v233[2];
                      ++v592;
                      v602 = v66[1];
                    }
                    while (v592 < v602);
                    v584 = *v66;
                  }
                  else
                  {
                    v602 = 0;
                  }
                  v588 = **(_QWORD **)(v65 + 24) + v588 - *(_QWORD *)(*(_QWORD *)(v65 + 24) + 8) * v602;
                  v587 = *(_QWORD *)v232[3] + v587 - *((_QWORD *)v232[3] + 1) * v233[1];
                  ++v585;
                }
                while (v585 < v584);
              }
              break;
            default:
              if (v64[6])
              {
                v537 = 0;
                v1986 = v232[19];
                v2004 = *(_QWORD *)(v65 + 152);
                v538 = v64[19];
                do
                {
                  v539 = *(_QWORD *)*a1;
                  v540 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v539) >> 2;
                  v541 = 0;
                  v542 = (v540 - 1);
                  if ((int)v540 - 1 >= 0)
                  {
                    v543 = *(_QWORD *)(*a1 + 24);
                    v544 = v537;
                    do
                    {
                      v545 = ldiv(v544, *(int *)(v539 + 4 * v542));
                      v544 = v545.quot;
                      v541 += *(_QWORD *)(v543 + 8 * v542--) * v545.rem;
                    }
                    while (v542 != -1);
                  }
                  v546 = *(_QWORD *)*a2;
                  v547 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v546) >> 2;
                  v548 = 0;
                  v549 = (v547 - 1);
                  if ((int)v547 - 1 >= 0)
                  {
                    v550 = *(_QWORD *)(*a2 + 24);
                    v551 = v537;
                    do
                    {
                      v552 = ldiv(v551, *(int *)(v546 + 4 * v549));
                      v551 = v552.quot;
                      v548 += *(_QWORD *)(v550 + 8 * v549--) * v552.rem;
                    }
                    while (v549 != -1);
                  }
                  *(_BYTE *)(v538 + v537++) = *((_BYTE *)v1986 + (int)v548) * *(_BYTE *)(v2004 + (int)v541);
                }
                while (v537 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v16)
      {
        case 0:
          goto LABEL_23;
        case 1:
          v17 = *(_DWORD *)(*a2 + 160);
          if (v17 >= 1)
          {
            v18 = **(_DWORD **)(*a1 + 152);
            v19 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v20 = *(int **)(*a2 + 152);
            v21 = v17 + 1;
            do
            {
              v22 = *v20++;
              *v19++ = v22 * v18;
              --v21;
            }
            while (v21 > 1);
          }
          return;
        case 2:
          v95 = *(_DWORD *)(*a1 + 160);
          if (v95 >= 1)
          {
            v96 = **(_DWORD **)(*a2 + 152);
            v97 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v98 = *(int **)(*a1 + 152);
            v99 = v95 + 1;
            do
            {
              v100 = *v98++;
              *v97++ = v100 * v96;
              --v99;
            }
            while (v99 > 1);
          }
          return;
        case 3:
          v101 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v101 >= 1)
          {
            v102 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v103 = *(int **)(*a2 + 152);
            v104 = *(int **)(*a1 + 152);
            v105 = v101 + 1;
            do
            {
              v107 = *v104++;
              v106 = v107;
              v108 = *v103++;
              *v102++ = v108 * v106;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        default:
          v86 = *(_QWORD **)a3;
          v87 = (_QWORD *)*a1;
          v88 = *(int **)*a1;
          v89 = (v87[1] - (_QWORD)v88) >> 2;
          v90 = (v89 - 1);
          if ((int)v90 >= -1)
            v91 = -1;
          else
            v91 = v89 - 1;
          v92 = v91 + 1;
          v93 = v89 + 1;
          break;
      }
      while (1)
      {
        v94 = v93 - 2;
        if (v93 - 2 < 0)
          break;
        --v93;
        if (*(_QWORD *)(v87[3] + 8 * v94) != *(_QWORD *)(v86[3] + 8 * v94))
          goto LABEL_185;
      }
      v93 = v92;
LABEL_185:
      v239 = (_QWORD *)*a2;
      v240 = *(int **)*a2;
      v241 = (v239[1] - (_QWORD)v240) >> 2;
      v242 = (v241 - 1);
      if ((int)v242 >= -1)
        v243 = -1;
      else
        v243 = v241 - 1;
      v244 = v243 + 1;
      v245 = v241 + 1;
      while (1)
      {
        v246 = v245 - 2;
        if (v245 - 2 < 0)
          break;
        --v245;
        if (*(_QWORD *)(v239[3] + 8 * v246) != *(_QWORD *)(v86[3] + 8 * v246))
          goto LABEL_234;
      }
      v245 = v244;
LABEL_234:
      v282 = v89 + 1;
      while (1)
      {
        v283 = v282 - 2;
        if (v282 - 2 < 0)
          break;
        --v282;
        if (*(_QWORD *)(v87[3] + 8 * v283))
          goto LABEL_269;
      }
      v282 = v92;
LABEL_269:
      v296 = v241 + 1;
      while (1)
      {
        v297 = v296 - 2;
        if (v296 - 2 < 0)
          break;
        --v296;
        if (*(_QWORD *)(v239[3] + 8 * v297))
          goto LABEL_377;
      }
      v296 = v244;
LABEL_377:
      v350 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v93 <= v245)
        v351 = v245;
      else
        v351 = v93;
      if (v93 <= v296)
        v93 = v296;
      if (v282 > v245)
        v245 = v282;
      if (v350 > v245)
      {
        v352 = 1;
      }
      else
      {
        v245 = (uint64_t)(v86[1] - *v86) >> 2;
        v352 = 4;
      }
      if (v350 > v93)
      {
        v353 = 2;
      }
      else
      {
        v93 = v245;
        v353 = v352;
      }
      if (v350 > v351)
      {
        v93 = v351;
        v353 = 3;
      }
      v1981 = v242;
      v1998 = v90;
      if (!v93)
        goto LABEL_407;
      v354 = *(_QWORD *)(v86[3] + 8 * (v93 - 1));
      if (v354 < 0x10)
        goto LABEL_407;
      switch(v353)
      {
        case 1:
          if (v93 == 2)
          {
            v1524 = *v88;
            if (*v88)
            {
              v1525 = 0;
              v1526 = 0;
              v1527 = 0;
              v1528 = v87[19];
              v1529 = v239[19];
              v1530 = v86[19];
              v1531 = (uint64_t *)v87[3];
              v1532 = *v1531;
              v1533 = v1531[1];
              v1534 = (uint64_t *)v239[3];
              v1535 = *v1534;
              v1536 = v1534[1];
              v1537 = v88[1];
              v1538 = v1537;
              do
              {
                if (v1538)
                {
                  v1539 = 0;
                  v1540 = v1529 + 4 * v1526;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      v1541 = 0;
                      v1542 = *(_DWORD *)(v1528 + 4 * v1527);
                      v1543 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1530 + v1541) = *(_DWORD *)(v1540 + v1541) * v1542;
                        --v1543;
                        v1541 += 4;
                      }
                      while (v1543 > 1);
                      v1537 = v88[1];
                    }
                    v1527 += v1533;
                    v1526 += v1536;
                    v1530 += 4 * (int)v354;
                    ++v1539;
                    v1540 += 4 * v1536;
                  }
                  while (v1539 < v1537);
                  v1544 = v1537;
                  v1524 = *v88;
                  v1538 = v1537;
                }
                else
                {
                  v1544 = 0;
                }
                v1527 = v1527 + v1532 - v1544 * v1533;
                v1526 = v1526 + v1535 - v1536 * v240[1];
                ++v1525;
              }
              while (v1525 < v1524);
            }
          }
          else if (v93 == 1)
          {
            v1038 = *v88;
            if (*v88)
            {
              v1039 = 0;
              v1040 = 0;
              v1041 = v87[19];
              v1042 = v239[19];
              v1043 = v86[19];
              v1044 = *(_QWORD *)v87[3];
              v1045 = 4 * *(_QWORD *)v239[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  v1046 = 0;
                  v1047 = *(_DWORD *)(v1041 + 4 * v1040);
                  v1048 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1043 + v1046) = *(_DWORD *)(v1042 + v1046) * v1047;
                    --v1048;
                    v1046 += 4;
                  }
                  while (v1048 > 1);
                  v1038 = *v88;
                }
                v1040 += v1044;
                ++v1039;
                v1043 += 4 * (int)v354;
                v1042 += v1045;
              }
              while (v1039 < v1038);
            }
          }
          else
          {
            v1941 = v86[6];
            if (v1941)
            {
              v1970 = 0;
              v1876 = v239[19];
              v1891 = v87[19];
              v1545 = v86[19];
              do
              {
                v1546 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  v1547 = v87[3];
                  v1548 = v90;
                  v1549 = v1970;
                  do
                  {
                    v1550 = ldiv(v1549, v88[v1548]);
                    v1549 = v1550.quot;
                    v1546 += *(_QWORD *)(v1547 + 8 * v1548--) * v1550.rem;
                  }
                  while (v1548 != -1);
                }
                v1551 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1552) = 0;
                }
                else
                {
                  v1552 = 0;
                  v1553 = v239[3];
                  v1554 = v1970;
                  do
                  {
                    v1555 = ldiv(v1554, v240[v1551]);
                    v1554 = v1555.quot;
                    v1552 += *(_QWORD *)(v1553 + 8 * v1551--) * v1555.rem;
                  }
                  while (v1551 != -1);
                }
                v90 = v1998;
                if ((int)v354 >= 1)
                {
                  v1556 = 0;
                  v1557 = *(_DWORD *)(v1891 + 4 * (int)v1546);
                  v1558 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1545 + v1556) = *(_DWORD *)(v1876 + 4 * (int)v1552 + v1556) * v1557;
                    --v1558;
                    v1556 += 4;
                  }
                  while (v1558 > 1);
                }
                v1545 += 4 * (int)v354;
                v1970 += (int)v354;
              }
              while (v1970 < v1941);
            }
          }
          break;
        case 2:
          if (v93 == 2)
          {
            v1559 = *v88;
            if (*v88)
            {
              v1560 = 0;
              v1561 = 0;
              v1562 = 0;
              v1563 = v87[19];
              v1564 = v239[19];
              v1565 = v86[19];
              v1566 = (uint64_t *)v87[3];
              v1567 = *v1566;
              v1568 = v1566[1];
              v1569 = (uint64_t *)v239[3];
              v1570 = *v1569;
              v1571 = v1569[1];
              v1572 = v88[1];
              v1573 = v1572;
              do
              {
                if (v1573)
                {
                  v1574 = 0;
                  v1575 = v1563 + 4 * v1562;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      v1576 = 0;
                      v1577 = *(_DWORD *)(v1564 + 4 * v1561);
                      v1578 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1565 + v1576) = *(_DWORD *)(v1575 + v1576) * v1577;
                        --v1578;
                        v1576 += 4;
                      }
                      while (v1578 > 1);
                      v1572 = v88[1];
                    }
                    v1562 += v1568;
                    v1561 += v1571;
                    v1565 += 4 * (int)v354;
                    ++v1574;
                    v1575 += 4 * v1568;
                  }
                  while (v1574 < v1572);
                  v1579 = v1572;
                  v1559 = *v88;
                  v1573 = v1572;
                }
                else
                {
                  v1579 = 0;
                }
                v1562 = v1562 + v1567 - v1579 * v1568;
                v1561 = v1561 + v1570 - v1571 * v240[1];
                ++v1560;
              }
              while (v1560 < v1559);
            }
          }
          else if (v93 == 1)
          {
            v1049 = *v88;
            if (*v88)
            {
              v1050 = 0;
              v1051 = 0;
              v1052 = v87[19];
              v1053 = v239[19];
              v1054 = v86[19];
              v1055 = *(_QWORD *)v239[3];
              v1056 = 4 * *(_QWORD *)v87[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  v1057 = 0;
                  v1058 = *(_DWORD *)(v1053 + 4 * v1051);
                  v1059 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1054 + v1057) = *(_DWORD *)(v1052 + v1057) * v1058;
                    --v1059;
                    v1057 += 4;
                  }
                  while (v1059 > 1);
                  v1049 = *v88;
                }
                v1051 += v1055;
                ++v1050;
                v1054 += 4 * (int)v354;
                v1052 += v1056;
              }
              while (v1050 < v1049);
            }
          }
          else
          {
            v1942 = v86[6];
            if (v1942)
            {
              v1971 = 0;
              v1877 = v239[19];
              v1892 = v87[19];
              v1580 = v86[19];
              do
              {
                v1581 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  v1582 = v87[3];
                  v1583 = v90;
                  v1584 = v1971;
                  do
                  {
                    v1585 = ldiv(v1584, v88[v1583]);
                    v1584 = v1585.quot;
                    v1581 += *(_QWORD *)(v1582 + 8 * v1583--) * v1585.rem;
                  }
                  while (v1583 != -1);
                }
                v1586 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1587) = 0;
                }
                else
                {
                  v1587 = 0;
                  v1588 = v239[3];
                  v1589 = v1971;
                  do
                  {
                    v1590 = ldiv(v1589, v240[v1586]);
                    v1589 = v1590.quot;
                    v1587 += *(_QWORD *)(v1588 + 8 * v1586--) * v1590.rem;
                  }
                  while (v1586 != -1);
                }
                v90 = v1998;
                if ((int)v354 >= 1)
                {
                  v1591 = 0;
                  v1592 = *(_DWORD *)(v1877 + 4 * (int)v1587);
                  v1593 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1580 + v1591) = *(_DWORD *)(v1892 + 4 * (int)v1581 + v1591) * v1592;
                    --v1593;
                    v1591 += 4;
                  }
                  while (v1593 > 1);
                }
                v1580 += 4 * (int)v354;
                v1971 += (int)v354;
              }
              while (v1971 < v1942);
            }
          }
          break;
        case 3:
          if (v93 == 2)
          {
            v1214 = *v88;
            if (*v88)
            {
              v1215 = 0;
              v1216 = 0;
              v1217 = 0;
              v1218 = v87[19];
              v1219 = v239[19];
              v1220 = v86[19];
              v1221 = (uint64_t *)v87[3];
              v1222 = *v1221;
              v1223 = v1221[1];
              v1224 = (uint64_t *)v239[3];
              v1225 = *v1224;
              v1226 = v1224[1];
              v1227 = v88[1];
              v1228 = v1227;
              do
              {
                if (v1228)
                {
                  v1229 = 0;
                  v1230 = v1219 + 4 * v1216;
                  v1231 = v1218 + 4 * v1217;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      v1232 = 0;
                      v1233 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1220 + v1232) = *(_DWORD *)(v1230 + v1232) * *(_DWORD *)(v1231 + v1232);
                        --v1233;
                        v1232 += 4;
                      }
                      while (v1233 > 1);
                      v1227 = v88[1];
                    }
                    v1217 += v1223;
                    v1216 += v1226;
                    v1220 += 4 * (int)v354;
                    ++v1229;
                    v1230 += 4 * v1226;
                    v1231 += 4 * v1223;
                  }
                  while (v1229 < v1227);
                  v1234 = v1227;
                  v1214 = *v88;
                  v1228 = v1227;
                }
                else
                {
                  v1234 = 0;
                }
                v1217 = v1217 + v1222 - v1234 * v1223;
                v1216 = v1216 + v1225 - v1226 * v240[1];
                ++v1215;
              }
              while (v1215 < v1214);
            }
          }
          else if (v93 == 1)
          {
            v355 = *v88;
            if (*v88)
            {
              v356 = 0;
              v357 = v87[19];
              v358 = v239[19];
              v359 = v86[19];
              v360 = 4 * *(_QWORD *)v239[3];
              v361 = 4 * *(_QWORD *)v87[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  v362 = 0;
                  v363 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v359 + v362) = *(_DWORD *)(v358 + v362) * *(_DWORD *)(v357 + v362);
                    --v363;
                    v362 += 4;
                  }
                  while (v363 > 1);
                  v355 = *v88;
                }
                ++v356;
                v359 += 4 * (int)v354;
                v358 += v360;
                v357 += v361;
              }
              while (v356 < v355);
            }
          }
          else
          {
            v1932 = v86[6];
            if (v1932)
            {
              v1961 = 0;
              v1872 = v239[19];
              v1885 = v87[19];
              v1235 = v86[19];
              do
              {
                v1236 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  v1237 = v87[3];
                  v1238 = v90;
                  v1239 = v1961;
                  do
                  {
                    v1240 = ldiv(v1239, v88[v1238]);
                    v1239 = v1240.quot;
                    v1236 += *(_QWORD *)(v1237 + 8 * v1238--) * v1240.rem;
                  }
                  while (v1238 != -1);
                }
                v1241 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1242) = 0;
                }
                else
                {
                  v1242 = 0;
                  v1243 = v239[3];
                  v1244 = v1961;
                  do
                  {
                    v1245 = ldiv(v1244, v240[v1241]);
                    v1244 = v1245.quot;
                    v1242 += *(_QWORD *)(v1243 + 8 * v1241--) * v1245.rem;
                  }
                  while (v1241 != -1);
                }
                v90 = v1998;
                if ((int)v354 >= 1)
                {
                  v1246 = 0;
                  v1247 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1235 + v1246) = *(_DWORD *)(v1872 + 4 * (int)v1242 + v1246)
                                               * *(_DWORD *)(v1885 + 4 * (int)v1236 + v1246);
                    --v1247;
                    v1246 += 4;
                  }
                  while (v1247 > 1);
                }
                v1235 += 4 * (int)v354;
                v1961 += (int)v354;
              }
              while (v1961 < v1932);
            }
          }
          break;
        default:
LABEL_407:
          switch(v350)
          {
            case 1uLL:
              v364 = v86[6];
              if (v364)
              {
                v365 = (_DWORD *)v87[19];
                v366 = (_DWORD *)v239[19];
                v367 = (_DWORD *)v86[19];
                v368 = 4 * *(_QWORD *)v239[3];
                v369 = 4 * *(_QWORD *)v87[3];
                do
                {
                  *v367++ = *v366 * *v365;
                  v366 = (_DWORD *)((char *)v366 + v368);
                  v365 = (_DWORD *)((char *)v365 + v369);
                  --v364;
                }
                while (v364);
              }
              break;
            case 2uLL:
              v615 = *v88;
              if (*v88)
              {
                v616 = 0;
                v617 = 0;
                v618 = 0;
                v619 = 0;
                v620 = v87[19];
                v621 = v239[19];
                v622 = v86[19];
                v623 = (uint64_t *)v87[3];
                v624 = *v623;
                v625 = v623[1];
                v626 = (uint64_t *)v239[3];
                v628 = *v626;
                v627 = v626[1];
                v629 = v88[1];
                do
                {
                  if (v629)
                  {
                    for (i = 0; i < v629; ++i)
                    {
                      *(_DWORD *)(v622 + 4 * v617 + 4 * i) = *(_DWORD *)(v621 + 4 * v618) * *(_DWORD *)(v620 + 4 * v619);
                      v619 += v625;
                      v618 += v627;
                      v629 = v88[1];
                    }
                    v631 = v629;
                    v615 = *v88;
                    v617 += i;
                  }
                  else
                  {
                    v631 = 0;
                  }
                  v619 = v619 + v624 - v631 * v625;
                  v618 = v618 + v628 - v627 * v240[1];
                  ++v616;
                }
                while (v616 < v615);
              }
              break;
            case 3uLL:
              v632 = *v88;
              if (*v88)
              {
                v633 = 0;
                v634 = 0;
                v635 = 0;
                v636 = 0;
                v637 = v87[19];
                v638 = v239[19];
                v639 = v86[19];
                v640 = (uint64_t *)v87[3];
                v641 = *v640;
                v642 = v640[1];
                v643 = (uint64_t *)v239[3];
                v644 = *v643;
                v645 = v643[1];
                v646 = v88[1];
                v647 = v646;
                do
                {
                  if (v647)
                  {
                    v648 = 0;
                    v649 = v640[2];
                    v650 = v643[2];
                    v651 = v88[2];
                    do
                    {
                      if (v651)
                      {
                        for (j = 0; j < v651; ++j)
                        {
                          *(_DWORD *)(v639 + 4 * v634 + 4 * j) = *(_DWORD *)(v638 + 4 * v635)
                                                               * *(_DWORD *)(v637 + 4 * v636);
                          v636 += v649;
                          v635 += v650;
                          v651 = v88[2];
                        }
                        v653 = v651;
                        v646 = v88[1];
                        v634 += j;
                      }
                      else
                      {
                        v653 = 0;
                      }
                      v636 = v636 + v642 - v653 * v649;
                      v635 = v635 + v645 - v650 * v240[2];
                      ++v648;
                    }
                    while (v648 < v646);
                    v654 = v646;
                    v632 = *v88;
                    v647 = v646;
                  }
                  else
                  {
                    v654 = 0;
                  }
                  v636 = v636 + v641 - v654 * v642;
                  v635 = v635 + v644 - v645 * v240[1];
                  ++v633;
                }
                while (v633 < v632);
              }
              break;
            case 4uLL:
              v655 = *v88;
              if (*v88)
              {
                v656 = 0;
                v657 = 0;
                v658 = 0;
                v659 = 0;
                v660 = v87[19];
                v661 = v239[19];
                v662 = v86[19];
                v663 = (uint64_t *)v87[3];
                v664 = *v663;
                v665 = v663[1];
                v666 = (uint64_t *)v239[3];
                v667 = *v666;
                v668 = v666[1];
                v669 = v88[1];
                v670 = v669;
                do
                {
                  if (v670)
                  {
                    v671 = 0;
                    v672 = v663[2];
                    v673 = v666[2];
                    v674 = v88[2];
                    v675 = v674;
                    do
                    {
                      if (v675)
                      {
                        v676 = 0;
                        v677 = v663[3];
                        v678 = v666[3];
                        v679 = v88[3];
                        do
                        {
                          if (v679)
                          {
                            for (k = 0; k < v679; ++k)
                            {
                              *(_DWORD *)(v662 + 4 * v657 + 4 * k) = *(_DWORD *)(v661 + 4 * v658)
                                                                   * *(_DWORD *)(v660 + 4 * v659);
                              v659 += v677;
                              v658 += v678;
                              v679 = v88[3];
                            }
                            v681 = v679;
                            v674 = v88[2];
                            v657 += k;
                          }
                          else
                          {
                            v681 = 0;
                          }
                          v659 = v659 + v672 - v681 * v677;
                          v658 = v658 + v673 - v678 * v240[3];
                          ++v676;
                        }
                        while (v676 < v674);
                        v682 = v674;
                        v669 = v88[1];
                        v675 = v674;
                      }
                      else
                      {
                        v682 = 0;
                      }
                      v659 = v659 + v665 - v682 * v672;
                      v658 = v658 + v668 - v673 * v240[2];
                      ++v671;
                    }
                    while (v671 < v669);
                    v683 = v669;
                    v655 = *v88;
                    v670 = v669;
                  }
                  else
                  {
                    v683 = 0;
                  }
                  v659 = v659 + v664 - v683 * v665;
                  v658 = v658 + v667 - v668 * v240[1];
                  ++v656;
                }
                while (v656 < v655);
              }
              break;
            default:
              v603 = v86[6];
              if (v603)
              {
                v604 = 0;
                v1924 = v239[19];
                v1953 = v87[19];
                v1911 = v86[19];
                do
                {
                  v605 = 0;
                  if ((v90 & 0x80000000) == 0)
                  {
                    v606 = v87[3];
                    v607 = v90;
                    v608 = v604;
                    do
                    {
                      v609 = ldiv(v608, v88[v607]);
                      v608 = v609.quot;
                      v605 += *(_QWORD *)(v606 + 8 * v607--) * v609.rem;
                    }
                    while (v607 != -1);
                  }
                  v610 = v1981;
                  if ((v1981 & 0x80000000) != 0)
                  {
                    LODWORD(v611) = 0;
                  }
                  else
                  {
                    v611 = 0;
                    v612 = v239[3];
                    v613 = v604;
                    do
                    {
                      v614 = ldiv(v613, v240[v610]);
                      v613 = v614.quot;
                      v611 += *(_QWORD *)(v612 + 8 * v610--) * v614.rem;
                    }
                    while (v610 != -1);
                  }
                  *(_DWORD *)(v1911 + 4 * v604++) = *(_DWORD *)(v1924 + 4 * (int)v611)
                                                  * *(_DWORD *)(v1953 + 4 * (int)v605);
                  v90 = v1998;
                }
                while (v604 != v603);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v23)
      {
        case 0:
LABEL_20:
          v8 = **(_BYTE **)(*a2 + 152) * **(_BYTE **)(*a1 + 152);
LABEL_21:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v8;
          return;
        case 1:
          v117 = *(_DWORD *)(*a2 + 160);
          if (v117 >= 1)
          {
            v118 = **(_BYTE **)(*a1 + 152);
            v119 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v120 = *(char **)(*a2 + 152);
            v121 = v117 + 1;
            do
            {
              v122 = *v120++;
              *v119++ = v122 * v118;
              --v121;
            }
            while (v121 > 1);
          }
          return;
        case 2:
          v123 = *(_DWORD *)(*a1 + 160);
          if (v123 >= 1)
          {
            v124 = **(_BYTE **)(*a2 + 152);
            v125 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v126 = *(char **)(*a1 + 152);
            v127 = v123 + 1;
            do
            {
              v128 = *v126++;
              *v125++ = v128 * v124;
              --v127;
            }
            while (v127 > 1);
          }
          return;
        case 3:
          v129 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v129 >= 1)
          {
            v130 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v131 = *(char **)(*a2 + 152);
            v132 = *(char **)(*a1 + 152);
            v133 = v129 + 1;
            do
            {
              v135 = *v132++;
              v134 = v135;
              v136 = *v131++;
              *v130++ = v136 * v134;
              --v133;
            }
            while (v133 > 1);
          }
          return;
        default:
          v109 = *(_QWORD **)a3;
          v110 = *a1;
          v111 = *(int **)*a1;
          v112 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v111) >> 2;
          v113 = v112 - 1;
          if ((int)v112 - 1 >= -1)
            v113 = -1;
          v114 = v113 + 1;
          v115 = v112 + 1;
          while (1)
          {
            v116 = v115 - 2;
            if (v115 - 2 < 0)
              break;
            --v115;
            if (*(_QWORD *)(*(_QWORD *)(v110 + 24) + 8 * v116) != *(_QWORD *)(v109[3] + 8 * v116))
              goto LABEL_193;
          }
          v115 = v114;
LABEL_193:
          v247 = (int **)*a2;
          v248 = *(int **)*a2;
          v249 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v248) >> 2;
          v250 = v249 - 1;
          if ((int)v249 - 1 >= -1)
            v250 = -1;
          v251 = v250 + 1;
          v252 = v249 + 1;
          while (1)
          {
            v253 = v252 - 2;
            if (v252 - 2 < 0)
              break;
            --v252;
            if (*(_QWORD *)&v247[3][2 * v253] != *(_QWORD *)(v109[3] + 8 * v253))
              goto LABEL_239;
          }
          v252 = v251;
LABEL_239:
          v284 = v112 + 1;
          while (1)
          {
            v285 = v284 - 2;
            if (v284 - 2 < 0)
              break;
            --v284;
            if (*(_QWORD *)(*(_QWORD *)(v110 + 24) + 8 * v285))
              goto LABEL_274;
          }
          v284 = v114;
LABEL_274:
          v298 = v249 + 1;
          while (1)
          {
            v299 = v298 - 2;
            if (v298 - 2 < 0)
              break;
            --v298;
            if (*(_QWORD *)&v247[3][2 * v299])
              goto LABEL_413;
          }
          v298 = v251;
LABEL_413:
          v370 = (uint64_t)(v109[1] - *v109) >> 2;
          if (v115 <= v252)
            v371 = v252;
          else
            v371 = v115;
          if (v115 <= v298)
            v115 = v298;
          if (v284 > v252)
            v252 = v284;
          if (v370 > v252)
          {
            v372 = 1;
          }
          else
          {
            v252 = (uint64_t)(v109[1] - *v109) >> 2;
            v372 = 4;
          }
          if (v370 > v115)
          {
            v373 = 2;
          }
          else
          {
            v115 = v252;
            v373 = v372;
          }
          if (v370 > v371)
          {
            v115 = v371;
            v373 = 3;
          }
          if (!v115)
            goto LABEL_443;
          v374 = *(_QWORD *)(v109[3] + 8 * (v115 - 1));
          if (v374 < 0x10)
            goto LABEL_443;
          v1999 = *(_QWORD *)(v109[3] + 8 * (v115 - 1));
          switch(v373)
          {
            case 1:
              if (v115 == 2)
              {
                v1594 = *v111;
                if (*v111)
                {
                  v1595 = 0;
                  v1596 = 0;
                  v1597 = 0;
                  v1598 = *(_QWORD *)(v110 + 152);
                  v1599 = v247[19];
                  v1600 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      v1601 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          v1602 = 0;
                          v1603 = *(_BYTE *)(v1598 + v1597);
                          v1604 = v374 + 1;
                          do
                          {
                            *(_BYTE *)(v1600 + v1602) = *((_BYTE *)v1599 + v1596 + v1602) * v1603;
                            --v1604;
                            ++v1602;
                          }
                          while (v1604 > 1);
                          v110 = *a1;
                          v247 = (int **)*a2;
                          v111 = *(int **)*a1;
                        }
                        v1605 = *(_QWORD **)(v110 + 24);
                        v1606 = v1605[1];
                        v1597 += v1606;
                        v1596 += *((_QWORD *)v247[3] + 1);
                        v1600 += (int)v374;
                        ++v1601;
                        v1607 = v111[1];
                      }
                      while (v1601 < v1607);
                      v1594 = *v111;
                      v248 = *v247;
                    }
                    else
                    {
                      v1607 = 0;
                      v1605 = *(_QWORD **)(v110 + 24);
                      v1606 = v1605[1];
                    }
                    v1597 = *v1605 + v1597 - v1607 * v1606;
                    v1596 = *(_QWORD *)v247[3] + v1596 - *((_QWORD *)v247[3] + 1) * v248[1];
                    ++v1595;
                  }
                  while (v1595 < v1594);
                }
              }
              else if (v115 == 1)
              {
                v1060 = *v111;
                if (*v111)
                {
                  v1061 = 0;
                  v1062 = 0;
                  v1063 = 0;
                  v1064 = *(_QWORD *)(v110 + 152);
                  v1065 = v247[19];
                  v1066 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      v1067 = 0;
                      v1068 = *(_BYTE *)(v1064 + v1063);
                      v1069 = v374 + 1;
                      do
                      {
                        *(_BYTE *)(v1066 + v1067) = *((_BYTE *)v1065 + v1062 + v1067) * v1068;
                        --v1069;
                        ++v1067;
                      }
                      while (v1069 > 1);
                      v110 = *a1;
                      v247 = (int **)*a2;
                      v1060 = **(_DWORD **)*a1;
                    }
                    v1063 += **(_QWORD **)(v110 + 24);
                    v1062 += *(_QWORD *)v247[3];
                    v1066 += (int)v374;
                    ++v1061;
                  }
                  while (v1061 < v1060);
                }
              }
              else if (v109[6])
              {
                v1920 = v247[19];
                v1943 = *(_QWORD *)(v110 + 152);
                v1972 = (int)v374;
                v1994 = 0;
                v1907 = v374 + 1;
                v1608 = v109[19];
                do
                {
                  v1609 = *(_QWORD *)*a1;
                  v1610 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1609) >> 2;
                  v1611 = 0;
                  v1612 = (v1610 - 1);
                  if ((int)v1610 - 1 >= 0)
                  {
                    v1613 = *(_QWORD *)(*a1 + 24);
                    v1614 = v1994;
                    do
                    {
                      v1615 = ldiv(v1614, *(int *)(v1609 + 4 * v1612));
                      v1614 = v1615.quot;
                      v1611 += *(_QWORD *)(v1613 + 8 * v1612--) * v1615.rem;
                    }
                    while (v1612 != -1);
                  }
                  v1616 = *(_QWORD *)*a2;
                  v1617 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1616) >> 2;
                  v1618 = 0;
                  v1619 = (v1617 - 1);
                  if ((int)v1617 - 1 >= 0)
                  {
                    v1620 = *(_QWORD *)(*a2 + 24);
                    v1621 = v1994;
                    do
                    {
                      v1622 = ldiv(v1621, *(int *)(v1616 + 4 * v1619));
                      v1621 = v1622.quot;
                      v1618 += *(_QWORD *)(v1620 + 8 * v1619--) * v1622.rem;
                    }
                    while (v1619 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    v1623 = 0;
                    v1624 = *(_BYTE *)(v1943 + (int)v1611);
                    v1625 = v1907;
                    do
                    {
                      *(_BYTE *)(v1608 + v1623) = *((_BYTE *)v1920 + (int)v1618 + v1623) * v1624;
                      --v1625;
                      ++v1623;
                    }
                    while (v1625 > 1);
                    v109 = *(_QWORD **)a3;
                  }
                  v1608 += v1972;
                  v1994 += v1972;
                }
                while (v1994 < v109[6]);
              }
              break;
            case 2:
              if (v115 == 2)
              {
                v1626 = *v111;
                if (*v111)
                {
                  v1627 = 0;
                  v1628 = 0;
                  v1629 = 0;
                  v1630 = *(_QWORD *)(v110 + 152);
                  v1631 = v247[19];
                  v1632 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      v1633 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          v1634 = 0;
                          v1635 = *((_BYTE *)v1631 + v1628);
                          v1636 = v374 + 1;
                          do
                          {
                            *(_BYTE *)(v1632 + v1634) = *(_BYTE *)(v1630 + v1629 + v1634) * v1635;
                            --v1636;
                            ++v1634;
                          }
                          while (v1636 > 1);
                          v110 = *a1;
                          v247 = (int **)*a2;
                          v111 = *(int **)*a1;
                        }
                        v1637 = *(_QWORD **)(v110 + 24);
                        v1638 = v1637[1];
                        v1629 += v1638;
                        v1628 += *((_QWORD *)v247[3] + 1);
                        v1632 += (int)v374;
                        ++v1633;
                        v1639 = v111[1];
                      }
                      while (v1633 < v1639);
                      v1626 = *v111;
                      v248 = *v247;
                    }
                    else
                    {
                      v1639 = 0;
                      v1637 = *(_QWORD **)(v110 + 24);
                      v1638 = v1637[1];
                    }
                    v1629 = *v1637 + v1629 - v1639 * v1638;
                    v1628 = *(_QWORD *)v247[3] + v1628 - *((_QWORD *)v247[3] + 1) * v248[1];
                    ++v1627;
                  }
                  while (v1627 < v1626);
                }
              }
              else if (v115 == 1)
              {
                v1070 = *v111;
                if (*v111)
                {
                  v1071 = 0;
                  v1072 = 0;
                  v1073 = 0;
                  v1074 = *(_QWORD *)(v110 + 152);
                  v1075 = v247[19];
                  v1076 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      v1077 = 0;
                      v1078 = *((_BYTE *)v1075 + v1072);
                      v1079 = v374 + 1;
                      do
                      {
                        *(_BYTE *)(v1076 + v1077) = *(_BYTE *)(v1074 + v1073 + v1077) * v1078;
                        --v1079;
                        ++v1077;
                      }
                      while (v1079 > 1);
                      v110 = *a1;
                      v247 = (int **)*a2;
                      v1070 = **(_DWORD **)*a1;
                    }
                    v1073 += **(_QWORD **)(v110 + 24);
                    v1072 += *(_QWORD *)v247[3];
                    v1076 += (int)v374;
                    ++v1071;
                  }
                  while (v1071 < v1070);
                }
              }
              else if (v109[6])
              {
                v1921 = v247[19];
                v1944 = *(_QWORD *)(v110 + 152);
                v1973 = (int)v374;
                v1995 = 0;
                v1908 = v374 + 1;
                v1640 = v109[19];
                do
                {
                  v1641 = *(_QWORD *)*a1;
                  v1642 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1641) >> 2;
                  v1643 = 0;
                  v1644 = (v1642 - 1);
                  if ((int)v1642 - 1 >= 0)
                  {
                    v1645 = *(_QWORD *)(*a1 + 24);
                    v1646 = v1995;
                    do
                    {
                      v1647 = ldiv(v1646, *(int *)(v1641 + 4 * v1644));
                      v1646 = v1647.quot;
                      v1643 += *(_QWORD *)(v1645 + 8 * v1644--) * v1647.rem;
                    }
                    while (v1644 != -1);
                  }
                  v1648 = *(_QWORD *)*a2;
                  v1649 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1648) >> 2;
                  v1650 = 0;
                  v1651 = (v1649 - 1);
                  if ((int)v1649 - 1 >= 0)
                  {
                    v1652 = *(_QWORD *)(*a2 + 24);
                    v1653 = v1995;
                    do
                    {
                      v1654 = ldiv(v1653, *(int *)(v1648 + 4 * v1651));
                      v1653 = v1654.quot;
                      v1650 += *(_QWORD *)(v1652 + 8 * v1651--) * v1654.rem;
                    }
                    while (v1651 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    v1655 = 0;
                    v1656 = *((_BYTE *)v1921 + (int)v1650);
                    v1657 = v1908;
                    do
                    {
                      *(_BYTE *)(v1640 + v1655) = *(_BYTE *)(v1944 + (int)v1643 + v1655) * v1656;
                      --v1657;
                      ++v1655;
                    }
                    while (v1657 > 1);
                    v109 = *(_QWORD **)a3;
                  }
                  v1640 += v1973;
                  v1995 += v1973;
                }
                while (v1995 < v109[6]);
              }
              break;
            case 3:
              if (v115 == 2)
              {
                v1248 = *v111;
                if (*v111)
                {
                  v1249 = 0;
                  v1250 = 0;
                  v1251 = 0;
                  v1252 = *(_QWORD *)(v110 + 152);
                  v1253 = v247[19];
                  v1254 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      v1255 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          v1256 = 0;
                          v1257 = v374 + 1;
                          do
                          {
                            *(_BYTE *)(v1254 + v1256) = *((_BYTE *)v1253 + v1250 + v1256)
                                                      * *(_BYTE *)(v1252 + v1251 + v1256);
                            --v1257;
                            ++v1256;
                          }
                          while (v1257 > 1);
                          v110 = *a1;
                          v247 = (int **)*a2;
                          v111 = *(int **)*a1;
                        }
                        v1258 = *(_QWORD **)(v110 + 24);
                        v1259 = v1258[1];
                        v1251 += v1259;
                        v1250 += *((_QWORD *)v247[3] + 1);
                        v1254 += (int)v374;
                        ++v1255;
                        v1260 = v111[1];
                      }
                      while (v1255 < v1260);
                      v1248 = *v111;
                      v248 = *v247;
                    }
                    else
                    {
                      v1260 = 0;
                      v1258 = *(_QWORD **)(v110 + 24);
                      v1259 = v1258[1];
                    }
                    v1251 = *v1258 + v1251 - v1260 * v1259;
                    v1250 = *(_QWORD *)v247[3] + v1250 - *((_QWORD *)v247[3] + 1) * v248[1];
                    ++v1249;
                  }
                  while (v1249 < v1248);
                }
              }
              else if (v115 == 1)
              {
                v375 = *v111;
                if (*v111)
                {
                  v376 = 0;
                  v377 = 0;
                  v378 = 0;
                  v379 = *(_QWORD *)(v110 + 152);
                  v380 = v247[19];
                  v381 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      v382 = 0;
                      v383 = v374 + 1;
                      do
                      {
                        *(_BYTE *)(v381 + v382) = *((_BYTE *)v380 + v377 + v382) * *(_BYTE *)(v379 + v378 + v382);
                        --v383;
                        ++v382;
                      }
                      while (v383 > 1);
                      v110 = *a1;
                      v247 = (int **)*a2;
                      v375 = **(_DWORD **)*a1;
                    }
                    v378 += **(_QWORD **)(v110 + 24);
                    v377 += *(_QWORD *)v247[3];
                    v381 += (int)v374;
                    ++v376;
                  }
                  while (v376 < v375);
                }
              }
              else if (v109[6])
              {
                v1917 = v247[19];
                v1933 = *(_QWORD *)(v110 + 152);
                v1962 = (int)v374;
                v1991 = 0;
                v1902 = v374 + 1;
                v1261 = v109[19];
                do
                {
                  v1262 = *(_QWORD *)*a1;
                  v1263 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1262) >> 2;
                  v1264 = 0;
                  v1265 = (v1263 - 1);
                  if ((int)v1263 - 1 >= 0)
                  {
                    v1266 = *(_QWORD *)(*a1 + 24);
                    v1267 = v1991;
                    do
                    {
                      v1268 = ldiv(v1267, *(int *)(v1262 + 4 * v1265));
                      v1267 = v1268.quot;
                      v1264 += *(_QWORD *)(v1266 + 8 * v1265--) * v1268.rem;
                    }
                    while (v1265 != -1);
                  }
                  v1269 = *(_QWORD *)*a2;
                  v1270 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1269) >> 2;
                  v1271 = 0;
                  v1272 = (v1270 - 1);
                  if ((int)v1270 - 1 >= 0)
                  {
                    v1273 = *(_QWORD *)(*a2 + 24);
                    v1274 = v1991;
                    do
                    {
                      v1275 = ldiv(v1274, *(int *)(v1269 + 4 * v1272));
                      v1274 = v1275.quot;
                      v1271 += *(_QWORD *)(v1273 + 8 * v1272--) * v1275.rem;
                    }
                    while (v1272 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    v1276 = 0;
                    v1277 = v1902;
                    do
                    {
                      *(_BYTE *)(v1261 + v1276) = *((_BYTE *)v1917 + (int)v1271 + v1276)
                                                * *(_BYTE *)(v1933 + (int)v1264 + v1276);
                      --v1277;
                      ++v1276;
                    }
                    while (v1277 > 1);
                    v109 = *(_QWORD **)a3;
                  }
                  v1261 += v1962;
                  v1991 += v1962;
                }
                while (v1991 < v109[6]);
              }
              break;
            default:
LABEL_443:
              switch(v370)
              {
                case 1uLL:
                  if (v109[6])
                  {
                    v384 = 0;
                    v385 = 0;
                    v386 = 0;
                    v387 = *(_QWORD *)(v110 + 152);
                    v388 = v247[19];
                    v389 = v109[19];
                    do
                    {
                      *(_BYTE *)(v389 + v384) = *((_BYTE *)v388 + v385) * *(_BYTE *)(v387 + v386);
                      v386 += **(_QWORD **)(*a1 + 24);
                      v385 += **(_QWORD **)(*a2 + 24);
                      ++v384;
                    }
                    while (v384 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  v700 = *v111;
                  if (*v111)
                  {
                    v701 = 0;
                    v702 = 0;
                    v703 = 0;
                    v704 = 0;
                    v705 = *(_QWORD *)(v110 + 152);
                    v706 = v247[19];
                    v707 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        v708 = 0;
                        do
                        {
                          *(_BYTE *)(v707 + v702 + v708) = *((_BYTE *)v706 + v703) * *(_BYTE *)(v705 + v704);
                          v110 = *a1;
                          v709 = *(_QWORD **)(*a1 + 24);
                          v710 = v709[1];
                          v704 += v710;
                          v247 = (int **)*a2;
                          v711 = *(int **)(*a2 + 24);
                          v712 = *((_QWORD *)v711 + 1);
                          v703 += v712;
                          ++v708;
                          v111 = *(int **)*a1;
                          v713 = v111[1];
                        }
                        while (v708 < v713);
                        v700 = *v111;
                        v248 = *v247;
                        v702 += v708;
                      }
                      else
                      {
                        v713 = 0;
                        v709 = *(_QWORD **)(v110 + 24);
                        v710 = v709[1];
                        v711 = v247[3];
                        v712 = *((_QWORD *)v711 + 1);
                      }
                      v704 = *v709 + v704 - v713 * v710;
                      v703 = *(_QWORD *)v711 + v703 - v712 * v248[1];
                      ++v701;
                    }
                    while (v701 < v700);
                  }
                  break;
                case 3uLL:
                  v714 = *v111;
                  if (*v111)
                  {
                    v715 = 0;
                    v716 = 0;
                    v717 = 0;
                    v718 = 0;
                    v719 = *(_QWORD *)(v110 + 152);
                    v720 = v247[19];
                    v721 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        v722 = 0;
                        do
                        {
                          if (v111[2])
                          {
                            v723 = 0;
                            do
                            {
                              *(_BYTE *)(v721 + v716 + v723) = *((_BYTE *)v720 + v717) * *(_BYTE *)(v719 + v718);
                              v110 = *a1;
                              v724 = *(_QWORD **)(*a1 + 24);
                              v725 = v724[2];
                              v718 += v725;
                              v247 = (int **)*a2;
                              v726 = *(int **)(*a2 + 24);
                              v727 = *((_QWORD *)v726 + 2);
                              v717 += v727;
                              ++v723;
                              v111 = *(int **)*a1;
                              v728 = v111[2];
                            }
                            while (v723 < v728);
                            v248 = *v247;
                            v716 += v723;
                          }
                          else
                          {
                            v728 = 0;
                            v724 = *(_QWORD **)(v110 + 24);
                            v725 = v724[2];
                            v726 = v247[3];
                            v727 = *((_QWORD *)v726 + 2);
                          }
                          v729 = v724[1];
                          v718 = v729 + v718 - v728 * v725;
                          v717 = *((_QWORD *)v726 + 1) + v717 - v727 * v248[2];
                          ++v722;
                          v730 = v111[1];
                        }
                        while (v722 < v730);
                        v714 = *v111;
                      }
                      else
                      {
                        v730 = 0;
                        v724 = *(_QWORD **)(v110 + 24);
                        v729 = v724[1];
                      }
                      v718 = *v724 + v718 - v730 * v729;
                      v717 = *(_QWORD *)v247[3] + v717 - *((_QWORD *)v247[3] + 1) * v248[1];
                      ++v715;
                    }
                    while (v715 < v714);
                  }
                  break;
                case 4uLL:
                  v731 = *v111;
                  if (*v111)
                  {
                    v732 = 0;
                    v733 = 0;
                    v734 = 0;
                    v735 = 0;
                    v736 = *(_QWORD *)(v110 + 152);
                    v737 = v247[19];
                    v738 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        v739 = 0;
                        do
                        {
                          if (v111[2])
                          {
                            v740 = 0;
                            do
                            {
                              if (v111[3])
                              {
                                v741 = 0;
                                do
                                {
                                  *(_BYTE *)(v738 + v733 + v741) = *((_BYTE *)v737 + v734) * *(_BYTE *)(v736 + v735);
                                  v110 = *a1;
                                  v742 = *(_QWORD **)(*a1 + 24);
                                  v743 = v742[3];
                                  v735 += v743;
                                  v247 = (int **)*a2;
                                  v744 = *(int **)(*a2 + 24);
                                  v745 = *((_QWORD *)v744 + 3);
                                  v734 += v745;
                                  ++v741;
                                  v111 = *(int **)*a1;
                                  v746 = v111[3];
                                }
                                while (v741 < v746);
                                v248 = *v247;
                                v733 += v741;
                              }
                              else
                              {
                                v746 = 0;
                                v742 = *(_QWORD **)(v110 + 24);
                                v743 = v742[3];
                                v744 = v247[3];
                                v745 = *((_QWORD *)v744 + 3);
                              }
                              v747 = v742[2];
                              v735 = v747 + v735 - v746 * v743;
                              v734 = *((_QWORD *)v744 + 2) + v734 - v745 * v248[3];
                              ++v740;
                              v748 = v111[2];
                            }
                            while (v740 < v748);
                          }
                          else
                          {
                            v748 = 0;
                            v742 = *(_QWORD **)(v110 + 24);
                            v747 = v742[2];
                          }
                          v735 = v742[1] + v735 - v748 * v747;
                          v734 = *((_QWORD *)v247[3] + 1) + v734 - *((_QWORD *)v247[3] + 2) * v248[2];
                          ++v739;
                          v749 = v111[1];
                        }
                        while (v739 < v749);
                        v731 = *v111;
                      }
                      else
                      {
                        v749 = 0;
                      }
                      v735 = **(_QWORD **)(v110 + 24) + v735 - *(_QWORD *)(*(_QWORD *)(v110 + 24) + 8) * v749;
                      v734 = *(_QWORD *)v247[3] + v734 - *((_QWORD *)v247[3] + 1) * v248[1];
                      ++v732;
                    }
                    while (v732 < v731);
                  }
                  break;
                default:
                  if (v109[6])
                  {
                    v684 = 0;
                    v1987 = v247[19];
                    v2005 = *(_QWORD *)(v110 + 152);
                    v685 = v109[19];
                    do
                    {
                      v686 = *(_QWORD *)*a1;
                      v687 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v686) >> 2;
                      v688 = 0;
                      v689 = (v687 - 1);
                      if ((int)v687 - 1 >= 0)
                      {
                        v690 = *(_QWORD *)(*a1 + 24);
                        v691 = v684;
                        do
                        {
                          v692 = ldiv(v691, *(int *)(v686 + 4 * v689));
                          v691 = v692.quot;
                          v688 += *(_QWORD *)(v690 + 8 * v689--) * v692.rem;
                        }
                        while (v689 != -1);
                      }
                      v693 = *(_QWORD *)*a2;
                      v694 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v693) >> 2;
                      v695 = 0;
                      v696 = (v694 - 1);
                      if ((int)v694 - 1 >= 0)
                      {
                        v697 = *(_QWORD *)(*a2 + 24);
                        v698 = v684;
                        do
                        {
                          v699 = ldiv(v698, *(int *)(v693 + 4 * v696));
                          v698 = v699.quot;
                          v695 += *(_QWORD *)(v697 + 8 * v696--) * v699.rem;
                        }
                        while (v696 != -1);
                      }
                      *(_BYTE *)(v685 + v684++) = *((_BYTE *)v1987 + (int)v695) * *(_BYTE *)(v2005 + (int)v688);
                    }
                    while (v684 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v24)
      {
        case 0:
LABEL_23:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a2 + 152) * **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          v146 = *(_DWORD *)(*a2 + 160);
          if (v146 >= 1)
          {
            v147 = **(_DWORD **)(*a1 + 152);
            v148 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v149 = *(int **)(*a2 + 152);
            v150 = v146 + 1;
            do
            {
              v151 = *v149++;
              *v148++ = v151 * v147;
              --v150;
            }
            while (v150 > 1);
          }
          return;
        case 2:
          v152 = *(_DWORD *)(*a1 + 160);
          if (v152 >= 1)
          {
            v153 = **(_DWORD **)(*a2 + 152);
            v154 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v155 = *(int **)(*a1 + 152);
            v156 = v152 + 1;
            do
            {
              v157 = *v155++;
              *v154++ = v157 * v153;
              --v156;
            }
            while (v156 > 1);
          }
          return;
        case 3:
          v158 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v158 >= 1)
          {
            v159 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v160 = *(int **)(*a2 + 152);
            v161 = *(int **)(*a1 + 152);
            v162 = v158 + 1;
            do
            {
              v164 = *v161++;
              v163 = v164;
              v165 = *v160++;
              *v159++ = v165 * v163;
              --v162;
            }
            while (v162 > 1);
          }
          return;
        default:
          v137 = *(_QWORD **)a3;
          v138 = (_QWORD *)*a1;
          v139 = *(int **)*a1;
          v140 = (v138[1] - (_QWORD)v139) >> 2;
          v141 = (v140 - 1);
          if ((int)v141 >= -1)
            v142 = -1;
          else
            v142 = v140 - 1;
          v143 = v142 + 1;
          v144 = v140 + 1;
          while (1)
          {
            v145 = v144 - 2;
            if (v144 - 2 < 0)
              break;
            --v144;
            if (*(_QWORD *)(v138[3] + 8 * v145) != *(_QWORD *)(v137[3] + 8 * v145))
              goto LABEL_200;
          }
          v144 = v143;
LABEL_200:
          v254 = (_QWORD *)*a2;
          v255 = *(int **)*a2;
          v256 = (v254[1] - (_QWORD)v255) >> 2;
          v257 = (v256 - 1);
          if ((int)v257 >= -1)
            v258 = -1;
          else
            v258 = v256 - 1;
          v259 = v258 + 1;
          v260 = v256 + 1;
          while (1)
          {
            v261 = v260 - 2;
            if (v260 - 2 < 0)
              break;
            --v260;
            if (*(_QWORD *)(v254[3] + 8 * v261) != *(_QWORD *)(v137[3] + 8 * v261))
              goto LABEL_244;
          }
          v260 = v259;
LABEL_244:
          v286 = v140 + 1;
          while (1)
          {
            v287 = v286 - 2;
            if (v286 - 2 < 0)
              break;
            --v286;
            if (*(_QWORD *)(v138[3] + 8 * v287))
              goto LABEL_279;
          }
          v286 = v143;
LABEL_279:
          v300 = v256 + 1;
          while (1)
          {
            v301 = v300 - 2;
            if (v300 - 2 < 0)
              break;
            --v300;
            if (*(_QWORD *)(v254[3] + 8 * v301))
              goto LABEL_449;
          }
          v300 = v259;
LABEL_449:
          v390 = (uint64_t)(v137[1] - *v137) >> 2;
          if (v144 <= v260)
            v391 = v260;
          else
            v391 = v144;
          if (v144 <= v300)
            v144 = v300;
          if (v286 > v260)
            v260 = v286;
          if (v390 > v260)
          {
            v392 = 1;
          }
          else
          {
            v260 = (uint64_t)(v137[1] - *v137) >> 2;
            v392 = 4;
          }
          if (v390 > v144)
          {
            v393 = 2;
          }
          else
          {
            v144 = v260;
            v393 = v392;
          }
          if (v390 > v391)
          {
            v144 = v391;
            v393 = 3;
          }
          v1982 = v257;
          v2000 = v141;
          if (!v144)
            goto LABEL_479;
          v394 = *(_QWORD *)(v137[3] + 8 * (v144 - 1));
          if (v394 < 0x10)
            goto LABEL_479;
          switch(v393)
          {
            case 1:
              if (v144 == 2)
              {
                v1658 = *v139;
                if (*v139)
                {
                  v1659 = 0;
                  v1660 = 0;
                  v1661 = 0;
                  v1662 = v138[19];
                  v1663 = v254[19];
                  v1664 = v137[19];
                  v1665 = (uint64_t *)v138[3];
                  v1666 = *v1665;
                  v1667 = v1665[1];
                  v1668 = (uint64_t *)v254[3];
                  v1669 = *v1668;
                  v1670 = v1668[1];
                  v1671 = v139[1];
                  v1672 = v1671;
                  do
                  {
                    if (v1672)
                    {
                      v1673 = 0;
                      v1674 = v1663 + 4 * v1660;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          v1675 = 0;
                          v1676 = *(_DWORD *)(v1662 + 4 * v1661);
                          v1677 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1664 + v1675) = *(_DWORD *)(v1674 + v1675) * v1676;
                            --v1677;
                            v1675 += 4;
                          }
                          while (v1677 > 1);
                          v1671 = v139[1];
                        }
                        v1661 += v1667;
                        v1660 += v1670;
                        v1664 += 4 * (int)v394;
                        ++v1673;
                        v1674 += 4 * v1670;
                      }
                      while (v1673 < v1671);
                      v1678 = v1671;
                      v1658 = *v139;
                      v1672 = v1671;
                    }
                    else
                    {
                      v1678 = 0;
                    }
                    v1661 = v1661 + v1666 - v1678 * v1667;
                    v1660 = v1660 + v1669 - v1670 * v255[1];
                    ++v1659;
                  }
                  while (v1659 < v1658);
                }
              }
              else if (v144 == 1)
              {
                v1080 = *v139;
                if (*v139)
                {
                  v1081 = 0;
                  v1082 = 0;
                  v1083 = v138[19];
                  v1084 = v254[19];
                  v1085 = v137[19];
                  v1086 = *(_QWORD *)v138[3];
                  v1087 = 4 * *(_QWORD *)v254[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      v1088 = 0;
                      v1089 = *(_DWORD *)(v1083 + 4 * v1082);
                      v1090 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1085 + v1088) = *(_DWORD *)(v1084 + v1088) * v1089;
                        --v1090;
                        v1088 += 4;
                      }
                      while (v1090 > 1);
                      v1080 = *v139;
                    }
                    v1082 += v1086;
                    ++v1081;
                    v1085 += 4 * (int)v394;
                    v1084 += v1087;
                  }
                  while (v1081 < v1080);
                }
              }
              else
              {
                v1945 = v137[6];
                if (v1945)
                {
                  v1974 = 0;
                  v1878 = v254[19];
                  v1893 = v138[19];
                  v1679 = v137[19];
                  do
                  {
                    v1680 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      v1681 = v138[3];
                      v1682 = v141;
                      v1683 = v1974;
                      do
                      {
                        v1684 = ldiv(v1683, v139[v1682]);
                        v1683 = v1684.quot;
                        v1680 += *(_QWORD *)(v1681 + 8 * v1682--) * v1684.rem;
                      }
                      while (v1682 != -1);
                    }
                    v1685 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1686) = 0;
                    }
                    else
                    {
                      v1686 = 0;
                      v1687 = v254[3];
                      v1688 = v1974;
                      do
                      {
                        v1689 = ldiv(v1688, v255[v1685]);
                        v1688 = v1689.quot;
                        v1686 += *(_QWORD *)(v1687 + 8 * v1685--) * v1689.rem;
                      }
                      while (v1685 != -1);
                    }
                    v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      v1690 = 0;
                      v1691 = *(_DWORD *)(v1893 + 4 * (int)v1680);
                      v1692 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1679 + v1690) = *(_DWORD *)(v1878 + 4 * (int)v1686 + v1690) * v1691;
                        --v1692;
                        v1690 += 4;
                      }
                      while (v1692 > 1);
                    }
                    v1679 += 4 * (int)v394;
                    v1974 += (int)v394;
                  }
                  while (v1974 < v1945);
                }
              }
              break;
            case 2:
              if (v144 == 2)
              {
                v1693 = *v139;
                if (*v139)
                {
                  v1694 = 0;
                  v1695 = 0;
                  v1696 = 0;
                  v1697 = v138[19];
                  v1698 = v254[19];
                  v1699 = v137[19];
                  v1700 = (uint64_t *)v138[3];
                  v1701 = *v1700;
                  v1702 = v1700[1];
                  v1703 = (uint64_t *)v254[3];
                  v1704 = *v1703;
                  v1705 = v1703[1];
                  v1706 = v139[1];
                  v1707 = v1706;
                  do
                  {
                    if (v1707)
                    {
                      v1708 = 0;
                      v1709 = v1697 + 4 * v1696;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          v1710 = 0;
                          v1711 = *(_DWORD *)(v1698 + 4 * v1695);
                          v1712 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1699 + v1710) = *(_DWORD *)(v1709 + v1710) * v1711;
                            --v1712;
                            v1710 += 4;
                          }
                          while (v1712 > 1);
                          v1706 = v139[1];
                        }
                        v1696 += v1702;
                        v1695 += v1705;
                        v1699 += 4 * (int)v394;
                        ++v1708;
                        v1709 += 4 * v1702;
                      }
                      while (v1708 < v1706);
                      v1713 = v1706;
                      v1693 = *v139;
                      v1707 = v1706;
                    }
                    else
                    {
                      v1713 = 0;
                    }
                    v1696 = v1696 + v1701 - v1713 * v1702;
                    v1695 = v1695 + v1704 - v1705 * v255[1];
                    ++v1694;
                  }
                  while (v1694 < v1693);
                }
              }
              else if (v144 == 1)
              {
                v1091 = *v139;
                if (*v139)
                {
                  v1092 = 0;
                  v1093 = 0;
                  v1094 = v138[19];
                  v1095 = v254[19];
                  v1096 = v137[19];
                  v1097 = *(_QWORD *)v254[3];
                  v1098 = 4 * *(_QWORD *)v138[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      v1099 = 0;
                      v1100 = *(_DWORD *)(v1095 + 4 * v1093);
                      v1101 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1096 + v1099) = *(_DWORD *)(v1094 + v1099) * v1100;
                        --v1101;
                        v1099 += 4;
                      }
                      while (v1101 > 1);
                      v1091 = *v139;
                    }
                    v1093 += v1097;
                    ++v1092;
                    v1096 += 4 * (int)v394;
                    v1094 += v1098;
                  }
                  while (v1092 < v1091);
                }
              }
              else
              {
                v1946 = v137[6];
                if (v1946)
                {
                  v1975 = 0;
                  v1879 = v254[19];
                  v1894 = v138[19];
                  v1714 = v137[19];
                  do
                  {
                    v1715 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      v1716 = v138[3];
                      v1717 = v141;
                      v1718 = v1975;
                      do
                      {
                        v1719 = ldiv(v1718, v139[v1717]);
                        v1718 = v1719.quot;
                        v1715 += *(_QWORD *)(v1716 + 8 * v1717--) * v1719.rem;
                      }
                      while (v1717 != -1);
                    }
                    v1720 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1721) = 0;
                    }
                    else
                    {
                      v1721 = 0;
                      v1722 = v254[3];
                      v1723 = v1975;
                      do
                      {
                        v1724 = ldiv(v1723, v255[v1720]);
                        v1723 = v1724.quot;
                        v1721 += *(_QWORD *)(v1722 + 8 * v1720--) * v1724.rem;
                      }
                      while (v1720 != -1);
                    }
                    v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      v1725 = 0;
                      v1726 = *(_DWORD *)(v1879 + 4 * (int)v1721);
                      v1727 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1714 + v1725) = *(_DWORD *)(v1894 + 4 * (int)v1715 + v1725) * v1726;
                        --v1727;
                        v1725 += 4;
                      }
                      while (v1727 > 1);
                    }
                    v1714 += 4 * (int)v394;
                    v1975 += (int)v394;
                  }
                  while (v1975 < v1946);
                }
              }
              break;
            case 3:
              if (v144 == 2)
              {
                v1278 = *v139;
                if (*v139)
                {
                  v1279 = 0;
                  v1280 = 0;
                  v1281 = 0;
                  v1282 = v138[19];
                  v1283 = v254[19];
                  v1284 = v137[19];
                  v1285 = (uint64_t *)v138[3];
                  v1286 = *v1285;
                  v1287 = v1285[1];
                  v1288 = (uint64_t *)v254[3];
                  v1289 = *v1288;
                  v1290 = v1288[1];
                  v1291 = v139[1];
                  v1292 = v1291;
                  do
                  {
                    if (v1292)
                    {
                      v1293 = 0;
                      v1294 = v1283 + 4 * v1280;
                      v1295 = v1282 + 4 * v1281;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          v1296 = 0;
                          v1297 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1284 + v1296) = *(_DWORD *)(v1294 + v1296) * *(_DWORD *)(v1295 + v1296);
                            --v1297;
                            v1296 += 4;
                          }
                          while (v1297 > 1);
                          v1291 = v139[1];
                        }
                        v1281 += v1287;
                        v1280 += v1290;
                        v1284 += 4 * (int)v394;
                        ++v1293;
                        v1294 += 4 * v1290;
                        v1295 += 4 * v1287;
                      }
                      while (v1293 < v1291);
                      v1298 = v1291;
                      v1278 = *v139;
                      v1292 = v1291;
                    }
                    else
                    {
                      v1298 = 0;
                    }
                    v1281 = v1281 + v1286 - v1298 * v1287;
                    v1280 = v1280 + v1289 - v1290 * v255[1];
                    ++v1279;
                  }
                  while (v1279 < v1278);
                }
              }
              else if (v144 == 1)
              {
                v395 = *v139;
                if (*v139)
                {
                  v396 = 0;
                  v397 = v138[19];
                  v398 = v254[19];
                  v399 = v137[19];
                  v400 = 4 * *(_QWORD *)v254[3];
                  v401 = 4 * *(_QWORD *)v138[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      v402 = 0;
                      v403 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v399 + v402) = *(_DWORD *)(v398 + v402) * *(_DWORD *)(v397 + v402);
                        --v403;
                        v402 += 4;
                      }
                      while (v403 > 1);
                      v395 = *v139;
                    }
                    ++v396;
                    v399 += 4 * (int)v394;
                    v398 += v400;
                    v397 += v401;
                  }
                  while (v396 < v395);
                }
              }
              else
              {
                v1934 = v137[6];
                if (v1934)
                {
                  v1963 = 0;
                  v1873 = v254[19];
                  v1886 = v138[19];
                  v1299 = v137[19];
                  do
                  {
                    v1300 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      v1301 = v138[3];
                      v1302 = v141;
                      v1303 = v1963;
                      do
                      {
                        v1304 = ldiv(v1303, v139[v1302]);
                        v1303 = v1304.quot;
                        v1300 += *(_QWORD *)(v1301 + 8 * v1302--) * v1304.rem;
                      }
                      while (v1302 != -1);
                    }
                    v1305 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1306) = 0;
                    }
                    else
                    {
                      v1306 = 0;
                      v1307 = v254[3];
                      v1308 = v1963;
                      do
                      {
                        v1309 = ldiv(v1308, v255[v1305]);
                        v1308 = v1309.quot;
                        v1306 += *(_QWORD *)(v1307 + 8 * v1305--) * v1309.rem;
                      }
                      while (v1305 != -1);
                    }
                    v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      v1310 = 0;
                      v1311 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1299 + v1310) = *(_DWORD *)(v1873 + 4 * (int)v1306 + v1310)
                                                   * *(_DWORD *)(v1886 + 4 * (int)v1300 + v1310);
                        --v1311;
                        v1310 += 4;
                      }
                      while (v1311 > 1);
                    }
                    v1299 += 4 * (int)v394;
                    v1963 += (int)v394;
                  }
                  while (v1963 < v1934);
                }
              }
              break;
            default:
LABEL_479:
              switch(v390)
              {
                case 1uLL:
                  v404 = v137[6];
                  if (v404)
                  {
                    v405 = (_DWORD *)v138[19];
                    v406 = (_DWORD *)v254[19];
                    v407 = (_DWORD *)v137[19];
                    v408 = 4 * *(_QWORD *)v254[3];
                    v409 = 4 * *(_QWORD *)v138[3];
                    do
                    {
                      *v407++ = *v406 * *v405;
                      v406 = (_DWORD *)((char *)v406 + v408);
                      v405 = (_DWORD *)((char *)v405 + v409);
                      --v404;
                    }
                    while (v404);
                  }
                  break;
                case 2uLL:
                  v762 = *v139;
                  if (*v139)
                  {
                    v763 = 0;
                    v764 = 0;
                    v765 = 0;
                    v766 = 0;
                    v767 = v138[19];
                    v768 = v254[19];
                    v769 = v137[19];
                    v770 = (uint64_t *)v138[3];
                    v771 = *v770;
                    v772 = v770[1];
                    v773 = (uint64_t *)v254[3];
                    v775 = *v773;
                    v774 = v773[1];
                    v776 = v139[1];
                    do
                    {
                      if (v776)
                      {
                        for (m = 0; m < v776; ++m)
                        {
                          *(_DWORD *)(v769 + 4 * v764 + 4 * m) = *(_DWORD *)(v768 + 4 * v765)
                                                               * *(_DWORD *)(v767 + 4 * v766);
                          v766 += v772;
                          v765 += v774;
                          v776 = v139[1];
                        }
                        v778 = v776;
                        v762 = *v139;
                        v764 += m;
                      }
                      else
                      {
                        v778 = 0;
                      }
                      v766 = v766 + v771 - v778 * v772;
                      v765 = v765 + v775 - v774 * v255[1];
                      ++v763;
                    }
                    while (v763 < v762);
                  }
                  break;
                case 3uLL:
                  v779 = *v139;
                  if (*v139)
                  {
                    v780 = 0;
                    v781 = 0;
                    v782 = 0;
                    v783 = 0;
                    v784 = v138[19];
                    v785 = v254[19];
                    v786 = v137[19];
                    v787 = (uint64_t *)v138[3];
                    v788 = *v787;
                    v789 = v787[1];
                    v790 = (uint64_t *)v254[3];
                    v791 = *v790;
                    v792 = v790[1];
                    v793 = v139[1];
                    v794 = v793;
                    do
                    {
                      if (v794)
                      {
                        v795 = 0;
                        v796 = v787[2];
                        v797 = v790[2];
                        v798 = v139[2];
                        do
                        {
                          if (v798)
                          {
                            for (n = 0; n < v798; ++n)
                            {
                              *(_DWORD *)(v786 + 4 * v781 + 4 * n) = *(_DWORD *)(v785 + 4 * v782)
                                                                   * *(_DWORD *)(v784 + 4 * v783);
                              v783 += v796;
                              v782 += v797;
                              v798 = v139[2];
                            }
                            v800 = v798;
                            v793 = v139[1];
                            v781 += n;
                          }
                          else
                          {
                            v800 = 0;
                          }
                          v783 = v783 + v789 - v800 * v796;
                          v782 = v782 + v792 - v797 * v255[2];
                          ++v795;
                        }
                        while (v795 < v793);
                        v801 = v793;
                        v779 = *v139;
                        v794 = v793;
                      }
                      else
                      {
                        v801 = 0;
                      }
                      v783 = v783 + v788 - v801 * v789;
                      v782 = v782 + v791 - v792 * v255[1];
                      ++v780;
                    }
                    while (v780 < v779);
                  }
                  break;
                case 4uLL:
                  v802 = *v139;
                  if (*v139)
                  {
                    v803 = 0;
                    v804 = 0;
                    v805 = 0;
                    v806 = 0;
                    v807 = v138[19];
                    v808 = v254[19];
                    v809 = v137[19];
                    v810 = (uint64_t *)v138[3];
                    v811 = *v810;
                    v812 = v810[1];
                    v813 = (uint64_t *)v254[3];
                    v814 = *v813;
                    v815 = v813[1];
                    v816 = v139[1];
                    v817 = v816;
                    do
                    {
                      if (v817)
                      {
                        v818 = 0;
                        v819 = v810[2];
                        v820 = v813[2];
                        v821 = v139[2];
                        v822 = v821;
                        do
                        {
                          if (v822)
                          {
                            v823 = 0;
                            v824 = v810[3];
                            v825 = v813[3];
                            v826 = v139[3];
                            do
                            {
                              if (v826)
                              {
                                for (ii = 0; ii < v826; ++ii)
                                {
                                  *(_DWORD *)(v809 + 4 * v804 + 4 * ii) = *(_DWORD *)(v808 + 4 * v805)
                                                                        * *(_DWORD *)(v807 + 4 * v806);
                                  v806 += v824;
                                  v805 += v825;
                                  v826 = v139[3];
                                }
                                v828 = v826;
                                v821 = v139[2];
                                v804 += ii;
                              }
                              else
                              {
                                v828 = 0;
                              }
                              v806 = v806 + v819 - v828 * v824;
                              v805 = v805 + v820 - v825 * v255[3];
                              ++v823;
                            }
                            while (v823 < v821);
                            v829 = v821;
                            v816 = v139[1];
                            v822 = v821;
                          }
                          else
                          {
                            v829 = 0;
                          }
                          v806 = v806 + v812 - v829 * v819;
                          v805 = v805 + v815 - v820 * v255[2];
                          ++v818;
                        }
                        while (v818 < v816);
                        v830 = v816;
                        v802 = *v139;
                        v817 = v816;
                      }
                      else
                      {
                        v830 = 0;
                      }
                      v806 = v806 + v811 - v830 * v812;
                      v805 = v805 + v814 - v815 * v255[1];
                      ++v803;
                    }
                    while (v803 < v802);
                  }
                  break;
                default:
                  v750 = v137[6];
                  if (v750)
                  {
                    v751 = 0;
                    v1925 = v254[19];
                    v1954 = v138[19];
                    v1912 = v137[19];
                    do
                    {
                      v752 = 0;
                      if ((v141 & 0x80000000) == 0)
                      {
                        v753 = v138[3];
                        v754 = v141;
                        v755 = v751;
                        do
                        {
                          v756 = ldiv(v755, v139[v754]);
                          v755 = v756.quot;
                          v752 += *(_QWORD *)(v753 + 8 * v754--) * v756.rem;
                        }
                        while (v754 != -1);
                      }
                      v757 = v1982;
                      if ((v1982 & 0x80000000) != 0)
                      {
                        LODWORD(v758) = 0;
                      }
                      else
                      {
                        v758 = 0;
                        v759 = v254[3];
                        v760 = v751;
                        do
                        {
                          v761 = ldiv(v760, v255[v757]);
                          v760 = v761.quot;
                          v758 += *(_QWORD *)(v759 + 8 * v757--) * v761.rem;
                        }
                        while (v757 != -1);
                      }
                      *(_DWORD *)(v1912 + 4 * v751++) = *(_DWORD *)(v1925 + 4 * (int)v758)
                                                      * *(_DWORD *)(v1954 + 4 * (int)v752);
                      v141 = v2000;
                    }
                    while (v751 != v750);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v25)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a2 + 152) * **(_QWORD **)(*a1 + 152);
          return;
        case 1:
          v175 = *(_DWORD *)(*a2 + 160);
          if (v175 >= 1)
          {
            v176 = **(_QWORD **)(*a1 + 152);
            v177 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v178 = *(uint64_t **)(*a2 + 152);
            v179 = v175 + 1;
            do
            {
              v180 = *v178++;
              *v177++ = v180 * v176;
              --v179;
            }
            while (v179 > 1);
          }
          return;
        case 2:
          v181 = *(_DWORD *)(*a1 + 160);
          if (v181 >= 1)
          {
            v182 = **(_QWORD **)(*a2 + 152);
            v183 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v184 = *(uint64_t **)(*a1 + 152);
            v185 = v181 + 1;
            do
            {
              v186 = *v184++;
              *v183++ = v186 * v182;
              --v185;
            }
            while (v185 > 1);
          }
          return;
        case 3:
          v187 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v187 >= 1)
          {
            v188 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v189 = *(uint64_t **)(*a2 + 152);
            v190 = *(uint64_t **)(*a1 + 152);
            v191 = v187 + 1;
            do
            {
              v193 = *v190++;
              v192 = v193;
              v194 = *v189++;
              *v188++ = v194 * v192;
              --v191;
            }
            while (v191 > 1);
          }
          return;
        default:
          v166 = *(_QWORD **)a3;
          v167 = (_QWORD *)*a1;
          v168 = *(int **)*a1;
          v169 = (v167[1] - (_QWORD)v168) >> 2;
          v170 = (v169 - 1);
          if ((int)v170 >= -1)
            v171 = -1;
          else
            v171 = v169 - 1;
          v172 = v171 + 1;
          v173 = v169 + 1;
          while (1)
          {
            v174 = v173 - 2;
            if (v173 - 2 < 0)
              break;
            --v173;
            if (*(_QWORD *)(v167[3] + 8 * v174) != *(_QWORD *)(v166[3] + 8 * v174))
              goto LABEL_208;
          }
          v173 = v172;
LABEL_208:
          v262 = (_QWORD *)*a2;
          v263 = *(int **)*a2;
          v264 = (v262[1] - (_QWORD)v263) >> 2;
          v265 = (v264 - 1);
          if ((int)v265 >= -1)
            v266 = -1;
          else
            v266 = v264 - 1;
          v267 = v266 + 1;
          v268 = v264 + 1;
          while (1)
          {
            v269 = v268 - 2;
            if (v268 - 2 < 0)
              break;
            --v268;
            if (*(_QWORD *)(v262[3] + 8 * v269) != *(_QWORD *)(v166[3] + 8 * v269))
              goto LABEL_249;
          }
          v268 = v267;
LABEL_249:
          v288 = v169 + 1;
          while (1)
          {
            v289 = v288 - 2;
            if (v288 - 2 < 0)
              break;
            --v288;
            if (*(_QWORD *)(v167[3] + 8 * v289))
              goto LABEL_284;
          }
          v288 = v172;
LABEL_284:
          v302 = v264 + 1;
          while (1)
          {
            v303 = v302 - 2;
            if (v302 - 2 < 0)
              break;
            --v302;
            if (*(_QWORD *)(v262[3] + 8 * v303))
              goto LABEL_485;
          }
          v302 = v267;
LABEL_485:
          v410 = (uint64_t)(v166[1] - *v166) >> 2;
          if (v173 <= v268)
            v411 = v268;
          else
            v411 = v173;
          if (v173 <= v302)
            v173 = v302;
          if (v288 > v268)
            v268 = v288;
          if (v410 > v268)
          {
            v412 = 1;
          }
          else
          {
            v268 = (uint64_t)(v166[1] - *v166) >> 2;
            v412 = 4;
          }
          if (v410 > v173)
          {
            v413 = 2;
          }
          else
          {
            v173 = v268;
            v413 = v412;
          }
          if (v410 > v411)
          {
            v173 = v411;
            v413 = 3;
          }
          v1983 = v265;
          v2001 = v170;
          if (!v173)
            goto LABEL_514;
          v414 = *(_QWORD *)(v166[3] + 8 * (v173 - 1));
          if (v414 < 0x10)
            goto LABEL_514;
          switch(v413)
          {
            case 1:
              if (v173 == 2)
              {
                v1728 = *v168;
                if ((_DWORD)v1728)
                {
                  v1729 = 0;
                  v1730 = 0;
                  v1731 = 0;
                  v1732 = v167[19];
                  v1733 = v262[19];
                  v1734 = v166[19];
                  v1735 = v168[1];
                  v1736 = (uint64_t *)v167[3];
                  v1737 = *v1736;
                  v1738 = v1736[1];
                  v1739 = (uint64_t *)v262[3];
                  v1740 = *v1739;
                  v1741 = v1739[1];
                  if (v1735 <= 1)
                    v1742 = 1;
                  else
                    v1742 = v168[1];
                  v1743 = v1737 - v1738 * v1735;
                  v1744 = v1740 - v1741 * v263[1];
                  do
                  {
                    if ((_DWORD)v1735)
                    {
                      v1745 = 0;
                      v1746 = v1733 + 8 * v1730;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          v1747 = 0;
                          v1748 = *(_QWORD *)(v1732 + 8 * v1731);
                          v1749 = v414 + 1;
                          do
                          {
                            *(_QWORD *)(v1734 + v1747) = *(_QWORD *)(v1746 + v1747) * v1748;
                            --v1749;
                            v1747 += 8;
                          }
                          while (v1749 > 1);
                        }
                        v1731 += v1738;
                        v1730 += v1741;
                        v1734 += 8 * (int)v414;
                        ++v1745;
                        v1746 += 8 * v1741;
                      }
                      while (v1745 != v1742);
                    }
                    v1731 += v1743;
                    v1730 += v1744;
                    ++v1729;
                  }
                  while (v1729 != v1728);
                }
              }
              else if (v173 == 1)
              {
                v1102 = *v168;
                if ((_DWORD)v1102)
                {
                  v1103 = 0;
                  v1104 = 0;
                  v1105 = v167[19];
                  v1106 = v262[19];
                  v1107 = v166[19];
                  v1108 = *(_QWORD *)v167[3];
                  v1109 = 8 * *(_QWORD *)v262[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      v1110 = 0;
                      v1111 = *(_QWORD *)(v1105 + 8 * v1104);
                      v1112 = v414 + 1;
                      do
                      {
                        *(_QWORD *)(v1107 + v1110) = *(_QWORD *)(v1106 + v1110) * v1111;
                        --v1112;
                        v1110 += 8;
                      }
                      while (v1112 > 1);
                    }
                    v1104 += v1108;
                    ++v1103;
                    v1107 += 8 * (int)v414;
                    v1106 += v1109;
                  }
                  while (v1103 != v1102);
                }
              }
              else
              {
                v1947 = v166[6];
                if (v1947)
                {
                  v1976 = 0;
                  v1880 = v262[19];
                  v1895 = v167[19];
                  v1750 = v166[19];
                  do
                  {
                    v1751 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      v1752 = v167[3];
                      v1753 = v170;
                      v1754 = v1976;
                      do
                      {
                        v1755 = ldiv(v1754, v168[v1753]);
                        v1754 = v1755.quot;
                        v1751 += *(_QWORD *)(v1752 + 8 * v1753--) * v1755.rem;
                      }
                      while (v1753 != -1);
                    }
                    v1756 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1757) = 0;
                    }
                    else
                    {
                      v1757 = 0;
                      v1758 = v262[3];
                      v1759 = v1976;
                      do
                      {
                        v1760 = ldiv(v1759, v263[v1756]);
                        v1759 = v1760.quot;
                        v1757 += *(_QWORD *)(v1758 + 8 * v1756--) * v1760.rem;
                      }
                      while (v1756 != -1);
                    }
                    v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      v1761 = 0;
                      v1762 = *(_QWORD *)(v1895 + 8 * (int)v1751);
                      v1763 = v414 + 1;
                      do
                      {
                        *(_QWORD *)(v1750 + v1761) = *(_QWORD *)(v1880 + 8 * (int)v1757 + v1761) * v1762;
                        --v1763;
                        v1761 += 8;
                      }
                      while (v1763 > 1);
                    }
                    v1750 += 8 * (int)v414;
                    v1976 += (int)v414;
                  }
                  while (v1976 < v1947);
                }
              }
              break;
            case 2:
              if (v173 == 2)
              {
                v1764 = *v168;
                if ((_DWORD)v1764)
                {
                  v1765 = 0;
                  v1766 = 0;
                  v1767 = 0;
                  v1768 = v167[19];
                  v1769 = v262[19];
                  v1770 = v166[19];
                  v1771 = v168[1];
                  v1772 = (uint64_t *)v167[3];
                  v1773 = *v1772;
                  v1774 = v1772[1];
                  v1775 = (uint64_t *)v262[3];
                  v1776 = *v1775;
                  v1777 = v1775[1];
                  if (v1771 <= 1)
                    v1778 = 1;
                  else
                    v1778 = v168[1];
                  v1779 = v1773 - v1774 * v1771;
                  v1780 = v1776 - v1777 * v263[1];
                  do
                  {
                    if ((_DWORD)v1771)
                    {
                      v1781 = 0;
                      v1782 = v1768 + 8 * v1767;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          v1783 = 0;
                          v1784 = *(_QWORD *)(v1769 + 8 * v1766);
                          v1785 = v414 + 1;
                          do
                          {
                            *(_QWORD *)(v1770 + v1783) = *(_QWORD *)(v1782 + v1783) * v1784;
                            --v1785;
                            v1783 += 8;
                          }
                          while (v1785 > 1);
                        }
                        v1767 += v1774;
                        v1766 += v1777;
                        v1770 += 8 * (int)v414;
                        ++v1781;
                        v1782 += 8 * v1774;
                      }
                      while (v1781 != v1778);
                    }
                    v1767 += v1779;
                    v1766 += v1780;
                    ++v1765;
                  }
                  while (v1765 != v1764);
                }
              }
              else if (v173 == 1)
              {
                v1113 = *v168;
                if ((_DWORD)v1113)
                {
                  v1114 = 0;
                  v1115 = 0;
                  v1116 = v167[19];
                  v1117 = v262[19];
                  v1118 = v166[19];
                  v1119 = *(_QWORD *)v262[3];
                  v1120 = 8 * *(_QWORD *)v167[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      v1121 = 0;
                      v1122 = *(_QWORD *)(v1117 + 8 * v1115);
                      v1123 = v414 + 1;
                      do
                      {
                        *(_QWORD *)(v1118 + v1121) = *(_QWORD *)(v1116 + v1121) * v1122;
                        --v1123;
                        v1121 += 8;
                      }
                      while (v1123 > 1);
                    }
                    v1115 += v1119;
                    ++v1114;
                    v1118 += 8 * (int)v414;
                    v1116 += v1120;
                  }
                  while (v1114 != v1113);
                }
              }
              else
              {
                v1948 = v166[6];
                if (v1948)
                {
                  v1977 = 0;
                  v1881 = v262[19];
                  v1896 = v167[19];
                  v1786 = v166[19];
                  do
                  {
                    v1787 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      v1788 = v167[3];
                      v1789 = v170;
                      v1790 = v1977;
                      do
                      {
                        v1791 = ldiv(v1790, v168[v1789]);
                        v1790 = v1791.quot;
                        v1787 += *(_QWORD *)(v1788 + 8 * v1789--) * v1791.rem;
                      }
                      while (v1789 != -1);
                    }
                    v1792 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1793) = 0;
                    }
                    else
                    {
                      v1793 = 0;
                      v1794 = v262[3];
                      v1795 = v1977;
                      do
                      {
                        v1796 = ldiv(v1795, v263[v1792]);
                        v1795 = v1796.quot;
                        v1793 += *(_QWORD *)(v1794 + 8 * v1792--) * v1796.rem;
                      }
                      while (v1792 != -1);
                    }
                    v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      v1797 = 0;
                      v1798 = *(_QWORD *)(v1881 + 8 * (int)v1793);
                      v1799 = v414 + 1;
                      do
                      {
                        *(_QWORD *)(v1786 + v1797) = *(_QWORD *)(v1896 + 8 * (int)v1787 + v1797) * v1798;
                        --v1799;
                        v1797 += 8;
                      }
                      while (v1799 > 1);
                    }
                    v1786 += 8 * (int)v414;
                    v1977 += (int)v414;
                  }
                  while (v1977 < v1948);
                }
              }
              break;
            case 3:
              if (v173 == 2)
              {
                v1312 = *v168;
                if ((_DWORD)v1312)
                {
                  v1313 = 0;
                  v1314 = 0;
                  v1315 = 0;
                  v1316 = v167[19];
                  v1317 = v262[19];
                  v1318 = v166[19];
                  v1319 = v168[1];
                  v1320 = (uint64_t *)v167[3];
                  v1321 = *v1320;
                  v1322 = v1320[1];
                  v1323 = (uint64_t *)v262[3];
                  v1324 = *v1323;
                  v1325 = v1323[1];
                  if (v1319 <= 1)
                    v1326 = 1;
                  else
                    v1326 = v168[1];
                  v1327 = v1321 - v1322 * v1319;
                  v1328 = v1324 - v1325 * v263[1];
                  do
                  {
                    if ((_DWORD)v1319)
                    {
                      v1329 = 0;
                      v1330 = v1317 + 8 * v1314;
                      v1331 = v1316 + 8 * v1315;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          v1332 = 0;
                          v1333 = v414 + 1;
                          do
                          {
                            *(_QWORD *)(v1318 + v1332) = *(_QWORD *)(v1330 + v1332) * *(_QWORD *)(v1331 + v1332);
                            --v1333;
                            v1332 += 8;
                          }
                          while (v1333 > 1);
                        }
                        v1315 += v1322;
                        v1314 += v1325;
                        v1318 += 8 * (int)v414;
                        ++v1329;
                        v1330 += 8 * v1325;
                        v1331 += 8 * v1322;
                      }
                      while (v1329 != v1326);
                    }
                    v1315 += v1327;
                    v1314 += v1328;
                    ++v1313;
                  }
                  while (v1313 != v1312);
                }
              }
              else if (v173 == 1)
              {
                v415 = *v168;
                if ((_DWORD)v415)
                {
                  v416 = 0;
                  v417 = v167[19];
                  v418 = v262[19];
                  v419 = v166[19];
                  v420 = 8 * *(_QWORD *)v262[3];
                  v421 = 8 * *(_QWORD *)v167[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      v422 = 0;
                      v423 = v414 + 1;
                      do
                      {
                        *(_QWORD *)(v419 + v422) = *(_QWORD *)(v418 + v422) * *(_QWORD *)(v417 + v422);
                        --v423;
                        v422 += 8;
                      }
                      while (v423 > 1);
                    }
                    ++v416;
                    v419 += 8 * (int)v414;
                    v418 += v420;
                    v417 += v421;
                  }
                  while (v416 != v415);
                }
              }
              else
              {
                v1935 = v166[6];
                if (v1935)
                {
                  v1964 = 0;
                  v1874 = v262[19];
                  v1887 = v167[19];
                  v1334 = v166[19];
                  do
                  {
                    v1335 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      v1336 = v167[3];
                      v1337 = v170;
                      v1338 = v1964;
                      do
                      {
                        v1339 = ldiv(v1338, v168[v1337]);
                        v1338 = v1339.quot;
                        v1335 += *(_QWORD *)(v1336 + 8 * v1337--) * v1339.rem;
                      }
                      while (v1337 != -1);
                    }
                    v1340 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1341) = 0;
                    }
                    else
                    {
                      v1341 = 0;
                      v1342 = v262[3];
                      v1343 = v1964;
                      do
                      {
                        v1344 = ldiv(v1343, v263[v1340]);
                        v1343 = v1344.quot;
                        v1341 += *(_QWORD *)(v1342 + 8 * v1340--) * v1344.rem;
                      }
                      while (v1340 != -1);
                    }
                    v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      v1345 = 0;
                      v1346 = v414 + 1;
                      do
                      {
                        *(_QWORD *)(v1334 + v1345) = *(_QWORD *)(v1874 + 8 * (int)v1341 + v1345)
                                                   * *(_QWORD *)(v1887 + 8 * (int)v1335 + v1345);
                        --v1346;
                        v1345 += 8;
                      }
                      while (v1346 > 1);
                    }
                    v1334 += 8 * (int)v414;
                    v1964 += (int)v414;
                  }
                  while (v1964 < v1935);
                }
              }
              break;
            default:
LABEL_514:
              switch(v410)
              {
                case 1uLL:
                  v424 = v166[6];
                  if (v424)
                  {
                    v425 = (_QWORD *)v167[19];
                    v426 = (_QWORD *)v262[19];
                    v427 = (_QWORD *)v166[19];
                    v428 = 8 * *(_QWORD *)v262[3];
                    v429 = 8 * *(_QWORD *)v167[3];
                    do
                    {
                      *v427++ = *v426 * *v425;
                      v426 = (_QWORD *)((char *)v426 + v428);
                      v425 = (_QWORD *)((char *)v425 + v429);
                      --v424;
                    }
                    while (v424);
                  }
                  break;
                case 2uLL:
                  v843 = *v168;
                  if ((_DWORD)v843)
                  {
                    v844 = 0;
                    v845 = 0;
                    v846 = 0;
                    v847 = 0;
                    v848 = v167[19];
                    v849 = v262[19];
                    v850 = v166[19];
                    v851 = v168[1];
                    v852 = (uint64_t *)v167[3];
                    v853 = *v852;
                    v854 = v852[1];
                    v855 = (uint64_t *)v262[3];
                    v856 = *v855;
                    v857 = v855[1];
                    v858 = v856 - v857 * v263[1];
                    if (v851 <= 1)
                      v859 = 1;
                    else
                      v859 = v168[1];
                    v860 = v853 - v854 * v851;
                    do
                    {
                      if ((_DWORD)v851)
                      {
                        v861 = v845 + v859;
                        v862 = (_QWORD *)(v850 + 8 * v845);
                        v863 = v859;
                        do
                        {
                          *v862++ = *(_QWORD *)(v849 + 8 * v846) * *(_QWORD *)(v848 + 8 * v847);
                          v847 += v854;
                          v846 += v857;
                          --v863;
                        }
                        while (v863);
                        v845 = v861;
                      }
                      v847 += v860;
                      v846 += v858;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 3uLL:
                  v864 = *v168;
                  if ((_DWORD)v864)
                  {
                    v865 = 0;
                    v866 = 0;
                    v867 = 0;
                    v868 = 0;
                    v869 = v167[19];
                    v870 = v262[19];
                    v871 = v166[19];
                    v872 = v168[1];
                    v873 = (_QWORD *)v167[3];
                    v874 = v873[1];
                    v875 = (_QWORD *)v262[3];
                    v876 = v875[1];
                    v877 = *v875 - v876 * v263[1];
                    if (v872 <= 1)
                      v878 = 1;
                    else
                      v878 = v168[1];
                    v879 = *v873 - v874 * v872;
                    do
                    {
                      if ((_DWORD)v872)
                      {
                        v880 = 0;
                        v881 = v168[2];
                        v882 = v873[2];
                        v883 = v875[2];
                        if (v881 <= 1)
                          v884 = 1;
                        else
                          v884 = v168[2];
                        v885 = v876 - v883 * v263[2];
                        do
                        {
                          v886 = v884;
                          if ((_DWORD)v881)
                          {
                            do
                            {
                              *(_QWORD *)(v871 + 8 * v866++) = *(_QWORD *)(v870 + 8 * v867)
                                                             * *(_QWORD *)(v869 + 8 * v868);
                              v868 += v882;
                              v867 += v883;
                              --v886;
                            }
                            while (v886);
                          }
                          v868 += v874 - v882 * v881;
                          v867 += v885;
                          ++v880;
                        }
                        while (v880 != v878);
                      }
                      v868 += v879;
                      v867 += v877;
                      ++v865;
                    }
                    while (v865 != v864);
                  }
                  break;
                case 4uLL:
                  v2006 = *v168;
                  if ((_DWORD)v2006)
                  {
                    v887 = 0;
                    v888 = 0;
                    v889 = 0;
                    v890 = 0;
                    v891 = v167[19];
                    v892 = v262[19];
                    v893 = v166[19];
                    v894 = v168[1];
                    v895 = (_QWORD *)v167[3];
                    v896 = (_QWORD *)v262[3];
                    v1899 = v896[1];
                    v1914 = v895[1];
                    v1956 = *v896 - v1899 * v263[1];
                    v1988 = v168[1];
                    if (v894 <= 1)
                      v897 = 1;
                    else
                      v897 = v168[1];
                    v1927 = *v895 - v895[1] * v894;
                    do
                    {
                      if (v1988)
                      {
                        v898 = 0;
                        v899 = v168[2];
                        v900 = v895[2];
                        v901 = v896[2];
                        if (v899 <= 1)
                          v902 = 1;
                        else
                          v902 = v168[2];
                        v903 = v1899 - v901 * v263[2];
                        do
                        {
                          if ((_DWORD)v899)
                          {
                            v904 = 0;
                            v905 = v168[3];
                            v906 = v895[3];
                            v907 = v896[3];
                            if (v905 <= 1)
                              v908 = 1;
                            else
                              v908 = v168[3];
                            v909 = v901 - v907 * v263[3];
                            do
                            {
                              v910 = v908;
                              if ((_DWORD)v905)
                              {
                                do
                                {
                                  *(_QWORD *)(v893 + 8 * v888++) = *(_QWORD *)(v892 + 8 * v889)
                                                                 * *(_QWORD *)(v891 + 8 * v890);
                                  v890 += v906;
                                  v889 += v907;
                                  --v910;
                                }
                                while (v910);
                              }
                              v890 += v900 - v906 * v905;
                              v889 += v909;
                              ++v904;
                            }
                            while (v904 != v902);
                          }
                          v890 += v1914 - v900 * v899;
                          v889 += v903;
                          ++v898;
                        }
                        while (v898 != v897);
                      }
                      v890 += v1927;
                      v889 += v1956;
                      ++v887;
                    }
                    while (v887 != v2006);
                  }
                  break;
                default:
                  v831 = v166[6];
                  if (v831)
                  {
                    v832 = 0;
                    v1926 = v262[19];
                    v1955 = v167[19];
                    v1913 = v166[19];
                    do
                    {
                      v833 = 0;
                      if ((v170 & 0x80000000) == 0)
                      {
                        v834 = v167[3];
                        v835 = v170;
                        v836 = v832;
                        do
                        {
                          v837 = ldiv(v836, v168[v835]);
                          v836 = v837.quot;
                          v833 += *(_QWORD *)(v834 + 8 * v835--) * v837.rem;
                        }
                        while (v835 != -1);
                      }
                      v838 = v1983;
                      if ((v1983 & 0x80000000) != 0)
                      {
                        LODWORD(v839) = 0;
                      }
                      else
                      {
                        v839 = 0;
                        v840 = v262[3];
                        v841 = v832;
                        do
                        {
                          v842 = ldiv(v841, v263[v838]);
                          v841 = v842.quot;
                          v839 += *(_QWORD *)(v840 + 8 * v838--) * v842.rem;
                        }
                        while (v838 != -1);
                      }
                      *(_QWORD *)(v1913 + 8 * v832++) = *(_QWORD *)(v1926 + 8 * (int)v839)
                                                      * *(_QWORD *)(v1955 + 8 * (int)v833);
                      v170 = v2001;
                    }
                    while (v832 != v831);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v26)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) * **(float **)(*a2 + 152);
          return;
        case 1:
          v204 = *(_DWORD *)(*a2 + 160);
          if (v204 >= 1)
          {
            v205 = **(float **)(*a1 + 152);
            v206 = *(float **)(*(_QWORD *)a3 + 152);
            v207 = *(float **)(*a2 + 152);
            v208 = v204 + 1;
            do
            {
              v209 = *v207++;
              *v206++ = v205 * v209;
              --v208;
            }
            while (v208 > 1);
          }
          return;
        case 2:
          v210 = *(_DWORD *)(*a1 + 160);
          if (v210 >= 1)
          {
            v211 = **(float **)(*a2 + 152);
            v212 = *(float **)(*(_QWORD *)a3 + 152);
            v213 = *(float **)(*a1 + 152);
            v214 = v210 + 1;
            do
            {
              v215 = *v213++;
              *v212++ = v211 * v215;
              --v214;
            }
            while (v214 > 1);
          }
          return;
        case 3:
          v216 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v216 >= 1)
          {
            v217 = *(float **)(*(_QWORD *)a3 + 152);
            v218 = *(float **)(*a2 + 152);
            v219 = *(float **)(*a1 + 152);
            v220 = v216 + 1;
            do
            {
              v221 = *v219++;
              v222 = v221;
              v223 = *v218++;
              *v217++ = v222 * v223;
              --v220;
            }
            while (v220 > 1);
          }
          return;
        default:
          v195 = *(_QWORD **)a3;
          v196 = (_QWORD *)*a1;
          v197 = *(int **)*a1;
          v198 = (v196[1] - (_QWORD)v197) >> 2;
          v199 = (v198 - 1);
          if ((int)v199 >= -1)
            v200 = -1;
          else
            v200 = v198 - 1;
          v201 = v200 + 1;
          v202 = v198 + 1;
          while (1)
          {
            v203 = v202 - 2;
            if (v202 - 2 < 0)
              break;
            --v202;
            if (*(_QWORD *)(v196[3] + 8 * v203) != *(_QWORD *)(v195[3] + 8 * v203))
              goto LABEL_216;
          }
          v202 = v201;
LABEL_216:
          v270 = (_QWORD *)*a2;
          v271 = *(int **)*a2;
          v272 = (v270[1] - (_QWORD)v271) >> 2;
          v273 = (v272 - 1);
          if ((int)v273 >= -1)
            v274 = -1;
          else
            v274 = v272 - 1;
          v275 = v274 + 1;
          v276 = v272 + 1;
          while (1)
          {
            v277 = v276 - 2;
            if (v276 - 2 < 0)
              break;
            --v276;
            if (*(_QWORD *)(v270[3] + 8 * v277) != *(_QWORD *)(v195[3] + 8 * v277))
              goto LABEL_254;
          }
          v276 = v275;
LABEL_254:
          v290 = v198 + 1;
          while (1)
          {
            v291 = v290 - 2;
            if (v290 - 2 < 0)
              break;
            --v290;
            if (*(_QWORD *)(v196[3] + 8 * v291))
              goto LABEL_289;
          }
          v290 = v201;
LABEL_289:
          v304 = v272 + 1;
          while (1)
          {
            v305 = v304 - 2;
            if (v304 - 2 < 0)
              break;
            --v304;
            if (*(_QWORD *)(v270[3] + 8 * v305))
              goto LABEL_520;
          }
          v304 = v275;
LABEL_520:
          v430 = (uint64_t)(v195[1] - *v195) >> 2;
          if (v202 <= v276)
            v431 = v276;
          else
            v431 = v202;
          if (v202 <= v304)
            v202 = v304;
          if (v290 > v276)
            v276 = v290;
          if (v430 > v276)
          {
            v432 = 1;
          }
          else
          {
            v276 = (uint64_t)(v195[1] - *v195) >> 2;
            v432 = 4;
          }
          if (v430 > v202)
          {
            v433 = 2;
          }
          else
          {
            v202 = v276;
            v433 = v432;
          }
          if (v430 > v431)
          {
            v202 = v431;
            v433 = 3;
          }
          v1984 = v273;
          v2002 = v199;
          if (!v202)
            goto LABEL_549;
          v434 = *(_QWORD *)(v195[3] + 8 * (v202 - 1));
          if (v434 < 0x10)
            goto LABEL_549;
          switch(v433)
          {
            case 1:
              if (v202 == 2)
              {
                v1800 = *v197;
                if ((_DWORD)v1800)
                {
                  v1801 = 0;
                  v1802 = 0;
                  v1803 = 0;
                  v1804 = v196[19];
                  v1805 = v270[19];
                  v1806 = v195[19];
                  v1807 = v197[1];
                  v1808 = (uint64_t *)v196[3];
                  v1809 = *v1808;
                  v1810 = v1808[1];
                  v1811 = (uint64_t *)v270[3];
                  v1812 = *v1811;
                  v1813 = v1811[1];
                  if (v1807 <= 1)
                    v1814 = 1;
                  else
                    v1814 = v197[1];
                  v1815 = v1809 - v1810 * v1807;
                  v1816 = v1812 - v1813 * v271[1];
                  do
                  {
                    if ((_DWORD)v1807)
                    {
                      v1817 = 0;
                      v1818 = v1805 + 4 * v1802;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          v1819 = 0;
                          v1820 = *(float *)(v1804 + 4 * v1803);
                          v1821 = v434 + 1;
                          do
                          {
                            *(float *)(v1806 + v1819) = v1820 * *(float *)(v1818 + v1819);
                            --v1821;
                            v1819 += 4;
                          }
                          while (v1821 > 1);
                        }
                        v1803 += v1810;
                        v1802 += v1813;
                        v1806 += 4 * (int)v434;
                        ++v1817;
                        v1818 += 4 * v1813;
                      }
                      while (v1817 != v1814);
                    }
                    v1803 += v1815;
                    v1802 += v1816;
                    ++v1801;
                  }
                  while (v1801 != v1800);
                }
              }
              else if (v202 == 1)
              {
                v1124 = *v197;
                if ((_DWORD)v1124)
                {
                  v1125 = 0;
                  v1126 = 0;
                  v1127 = v196[19];
                  v1128 = v270[19];
                  v1129 = v195[19];
                  v1130 = *(_QWORD *)v196[3];
                  v1131 = 4 * *(_QWORD *)v270[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      v1132 = 0;
                      v1133 = *(float *)(v1127 + 4 * v1126);
                      v1134 = v434 + 1;
                      do
                      {
                        *(float *)(v1129 + v1132) = v1133 * *(float *)(v1128 + v1132);
                        --v1134;
                        v1132 += 4;
                      }
                      while (v1134 > 1);
                    }
                    v1126 += v1130;
                    ++v1125;
                    v1129 += 4 * (int)v434;
                    v1128 += v1131;
                  }
                  while (v1125 != v1124);
                }
              }
              else
              {
                v1949 = v195[6];
                if (v1949)
                {
                  v1978 = 0;
                  v1882 = v270[19];
                  v1897 = v196[19];
                  v1822 = v195[19];
                  do
                  {
                    v1823 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      v1824 = v196[3];
                      v1825 = v199;
                      v1826 = v1978;
                      do
                      {
                        v1827 = ldiv(v1826, v197[v1825]);
                        v1826 = v1827.quot;
                        v1823 += *(_QWORD *)(v1824 + 8 * v1825--) * v1827.rem;
                      }
                      while (v1825 != -1);
                    }
                    v1828 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1829) = 0;
                    }
                    else
                    {
                      v1829 = 0;
                      v1830 = v270[3];
                      v1831 = v1978;
                      do
                      {
                        v1832 = ldiv(v1831, v271[v1828]);
                        v1831 = v1832.quot;
                        v1829 += *(_QWORD *)(v1830 + 8 * v1828--) * v1832.rem;
                      }
                      while (v1828 != -1);
                    }
                    v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      v1833 = 0;
                      v1834 = *(float *)(v1897 + 4 * (int)v1823);
                      v1835 = v434 + 1;
                      do
                      {
                        *(float *)(v1822 + v1833) = v1834 * *(float *)(v1882 + 4 * (int)v1829 + v1833);
                        --v1835;
                        v1833 += 4;
                      }
                      while (v1835 > 1);
                    }
                    v1822 += 4 * (int)v434;
                    v1978 += (int)v434;
                  }
                  while (v1978 < v1949);
                }
              }
              break;
            case 2:
              if (v202 == 2)
              {
                v1836 = *v197;
                if ((_DWORD)v1836)
                {
                  v1837 = 0;
                  v1838 = 0;
                  v1839 = 0;
                  v1840 = v196[19];
                  v1841 = v270[19];
                  v1842 = v195[19];
                  v1843 = v197[1];
                  v1844 = (uint64_t *)v196[3];
                  v1845 = *v1844;
                  v1846 = v1844[1];
                  v1847 = (uint64_t *)v270[3];
                  v1848 = *v1847;
                  v1849 = v1847[1];
                  if (v1843 <= 1)
                    v1850 = 1;
                  else
                    v1850 = v197[1];
                  v1851 = v1845 - v1846 * v1843;
                  v1852 = v1848 - v1849 * v271[1];
                  do
                  {
                    if ((_DWORD)v1843)
                    {
                      v1853 = 0;
                      v1854 = v1840 + 4 * v1839;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          v1855 = 0;
                          v1856 = *(float *)(v1841 + 4 * v1838);
                          v1857 = v434 + 1;
                          do
                          {
                            *(float *)(v1842 + v1855) = v1856 * *(float *)(v1854 + v1855);
                            --v1857;
                            v1855 += 4;
                          }
                          while (v1857 > 1);
                        }
                        v1839 += v1846;
                        v1838 += v1849;
                        v1842 += 4 * (int)v434;
                        ++v1853;
                        v1854 += 4 * v1846;
                      }
                      while (v1853 != v1850);
                    }
                    v1839 += v1851;
                    v1838 += v1852;
                    ++v1837;
                  }
                  while (v1837 != v1836);
                }
              }
              else if (v202 == 1)
              {
                v1135 = *v197;
                if ((_DWORD)v1135)
                {
                  v1136 = 0;
                  v1137 = 0;
                  v1138 = v196[19];
                  v1139 = v270[19];
                  v1140 = v195[19];
                  v1141 = *(_QWORD *)v270[3];
                  v1142 = 4 * *(_QWORD *)v196[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      v1143 = 0;
                      v1144 = *(float *)(v1139 + 4 * v1137);
                      v1145 = v434 + 1;
                      do
                      {
                        *(float *)(v1140 + v1143) = v1144 * *(float *)(v1138 + v1143);
                        --v1145;
                        v1143 += 4;
                      }
                      while (v1145 > 1);
                    }
                    v1137 += v1141;
                    ++v1136;
                    v1140 += 4 * (int)v434;
                    v1138 += v1142;
                  }
                  while (v1136 != v1135);
                }
              }
              else
              {
                v1950 = v195[6];
                if (v1950)
                {
                  v1979 = 0;
                  v1883 = v270[19];
                  v1898 = v196[19];
                  v1858 = v195[19];
                  do
                  {
                    v1859 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      v1860 = v196[3];
                      v1861 = v199;
                      v1862 = v1979;
                      do
                      {
                        v1863 = ldiv(v1862, v197[v1861]);
                        v1862 = v1863.quot;
                        v1859 += *(_QWORD *)(v1860 + 8 * v1861--) * v1863.rem;
                      }
                      while (v1861 != -1);
                    }
                    v1864 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1865) = 0;
                    }
                    else
                    {
                      v1865 = 0;
                      v1866 = v270[3];
                      v1867 = v1979;
                      do
                      {
                        v1868 = ldiv(v1867, v271[v1864]);
                        v1867 = v1868.quot;
                        v1865 += *(_QWORD *)(v1866 + 8 * v1864--) * v1868.rem;
                      }
                      while (v1864 != -1);
                    }
                    v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      v1869 = 0;
                      v1870 = *(float *)(v1883 + 4 * (int)v1865);
                      v1871 = v434 + 1;
                      do
                      {
                        *(float *)(v1858 + v1869) = v1870 * *(float *)(v1898 + 4 * (int)v1859 + v1869);
                        --v1871;
                        v1869 += 4;
                      }
                      while (v1871 > 1);
                    }
                    v1858 += 4 * (int)v434;
                    v1979 += (int)v434;
                  }
                  while (v1979 < v1950);
                }
              }
              break;
            case 3:
              if (v202 == 2)
              {
                v1347 = *v197;
                if ((_DWORD)v1347)
                {
                  v1348 = 0;
                  v1349 = 0;
                  v1350 = 0;
                  v1351 = v196[19];
                  v1352 = v270[19];
                  v1353 = v195[19];
                  v1354 = v197[1];
                  v1355 = (uint64_t *)v196[3];
                  v1356 = *v1355;
                  v1357 = v1355[1];
                  v1358 = (uint64_t *)v270[3];
                  v1359 = *v1358;
                  v1360 = v1358[1];
                  if (v1354 <= 1)
                    v1361 = 1;
                  else
                    v1361 = v197[1];
                  v1362 = v1356 - v1357 * v1354;
                  v1363 = v1359 - v1360 * v271[1];
                  do
                  {
                    if ((_DWORD)v1354)
                    {
                      v1364 = 0;
                      v1365 = v1352 + 4 * v1349;
                      v1366 = v1351 + 4 * v1350;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          v1367 = 0;
                          v1368 = v434 + 1;
                          do
                          {
                            *(float *)(v1353 + v1367) = *(float *)(v1366 + v1367) * *(float *)(v1365 + v1367);
                            --v1368;
                            v1367 += 4;
                          }
                          while (v1368 > 1);
                        }
                        v1350 += v1357;
                        v1349 += v1360;
                        v1353 += 4 * (int)v434;
                        ++v1364;
                        v1365 += 4 * v1360;
                        v1366 += 4 * v1357;
                      }
                      while (v1364 != v1361);
                    }
                    v1350 += v1362;
                    v1349 += v1363;
                    ++v1348;
                  }
                  while (v1348 != v1347);
                }
              }
              else if (v202 == 1)
              {
                v435 = *v197;
                if ((_DWORD)v435)
                {
                  v436 = 0;
                  v437 = v196[19];
                  v438 = v270[19];
                  v439 = v195[19];
                  v440 = 4 * *(_QWORD *)v270[3];
                  v441 = 4 * *(_QWORD *)v196[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      v442 = 0;
                      v443 = v434 + 1;
                      do
                      {
                        *(float *)(v439 + v442) = *(float *)(v437 + v442) * *(float *)(v438 + v442);
                        --v443;
                        v442 += 4;
                      }
                      while (v443 > 1);
                    }
                    ++v436;
                    v439 += 4 * (int)v434;
                    v438 += v440;
                    v437 += v441;
                  }
                  while (v436 != v435);
                }
              }
              else
              {
                v1936 = v195[6];
                if (v1936)
                {
                  v1965 = 0;
                  v1875 = v270[19];
                  v1888 = v196[19];
                  v1369 = v195[19];
                  do
                  {
                    v1370 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      v1371 = v196[3];
                      v1372 = v199;
                      v1373 = v1965;
                      do
                      {
                        v1374 = ldiv(v1373, v197[v1372]);
                        v1373 = v1374.quot;
                        v1370 += *(_QWORD *)(v1371 + 8 * v1372--) * v1374.rem;
                      }
                      while (v1372 != -1);
                    }
                    v1375 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1376) = 0;
                    }
                    else
                    {
                      v1376 = 0;
                      v1377 = v270[3];
                      v1378 = v1965;
                      do
                      {
                        v1379 = ldiv(v1378, v271[v1375]);
                        v1378 = v1379.quot;
                        v1376 += *(_QWORD *)(v1377 + 8 * v1375--) * v1379.rem;
                      }
                      while (v1375 != -1);
                    }
                    v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      v1380 = 0;
                      v1381 = v434 + 1;
                      do
                      {
                        *(float *)(v1369 + v1380) = *(float *)(v1888 + 4 * (int)v1370 + v1380)
                                                  * *(float *)(v1875 + 4 * (int)v1376 + v1380);
                        --v1381;
                        v1380 += 4;
                      }
                      while (v1381 > 1);
                    }
                    v1369 += 4 * (int)v434;
                    v1965 += (int)v434;
                  }
                  while (v1965 < v1936);
                }
              }
              break;
            default:
LABEL_549:
              switch(v430)
              {
                case 1uLL:
                  v444 = v195[6];
                  if (v444)
                  {
                    v445 = (float *)v196[19];
                    v446 = (float *)v270[19];
                    v447 = (float *)v195[19];
                    v448 = 4 * *(_QWORD *)v270[3];
                    v449 = 4 * *(_QWORD *)v196[3];
                    do
                    {
                      *v447++ = *v445 * *v446;
                      v446 = (float *)((char *)v446 + v448);
                      v445 = (float *)((char *)v445 + v449);
                      --v444;
                    }
                    while (v444);
                  }
                  break;
                case 2uLL:
                  v923 = *v197;
                  if ((_DWORD)v923)
                  {
                    v924 = 0;
                    v925 = 0;
                    v926 = 0;
                    v927 = 0;
                    v928 = v196[19];
                    v929 = v270[19];
                    v930 = v195[19];
                    v931 = v197[1];
                    v932 = (uint64_t *)v196[3];
                    v933 = *v932;
                    v934 = v932[1];
                    v935 = (uint64_t *)v270[3];
                    v936 = *v935;
                    v937 = v935[1];
                    v938 = v936 - v937 * v271[1];
                    if (v931 <= 1)
                      v939 = 1;
                    else
                      v939 = v197[1];
                    v940 = v933 - v934 * v931;
                    do
                    {
                      if ((_DWORD)v931)
                      {
                        v941 = v925 + v939;
                        v942 = (float *)(v930 + 4 * v925);
                        v943 = v939;
                        do
                        {
                          *v942++ = *(float *)(v928 + 4 * v927) * *(float *)(v929 + 4 * v926);
                          v927 += v934;
                          v926 += v937;
                          --v943;
                        }
                        while (v943);
                        v925 = v941;
                      }
                      v927 += v940;
                      v926 += v938;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 3uLL:
                  v944 = *v197;
                  if ((_DWORD)v944)
                  {
                    v945 = 0;
                    v946 = 0;
                    v947 = 0;
                    v948 = 0;
                    v949 = v196[19];
                    v950 = v270[19];
                    v951 = v195[19];
                    v952 = v197[1];
                    v953 = (_QWORD *)v196[3];
                    v954 = v953[1];
                    v955 = (_QWORD *)v270[3];
                    v956 = v955[1];
                    v957 = *v955 - v956 * v271[1];
                    if (v952 <= 1)
                      v958 = 1;
                    else
                      v958 = v197[1];
                    v959 = *v953 - v954 * v952;
                    do
                    {
                      if ((_DWORD)v952)
                      {
                        v960 = 0;
                        v961 = v197[2];
                        v962 = v953[2];
                        v963 = v955[2];
                        if (v961 <= 1)
                          v964 = 1;
                        else
                          v964 = v197[2];
                        v965 = v956 - v963 * v271[2];
                        do
                        {
                          v966 = v964;
                          if ((_DWORD)v961)
                          {
                            do
                            {
                              *(float *)(v951 + 4 * v946++) = *(float *)(v949 + 4 * v948) * *(float *)(v950 + 4 * v947);
                              v948 += v962;
                              v947 += v963;
                              --v966;
                            }
                            while (v966);
                          }
                          v948 += v954 - v962 * v961;
                          v947 += v965;
                          ++v960;
                        }
                        while (v960 != v958);
                      }
                      v948 += v959;
                      v947 += v957;
                      ++v945;
                    }
                    while (v945 != v944);
                  }
                  break;
                case 4uLL:
                  v2007 = *v197;
                  if ((_DWORD)v2007)
                  {
                    v967 = 0;
                    v968 = 0;
                    v969 = 0;
                    v970 = 0;
                    v971 = v196[19];
                    v972 = v270[19];
                    v973 = v195[19];
                    v974 = v197[1];
                    v975 = (_QWORD *)v196[3];
                    v976 = (_QWORD *)v270[3];
                    v1929 = v976[1];
                    v1958 = v975[1];
                    v1989 = *v976 - v1929 * v271[1];
                    if (v974 <= 1)
                      v977 = 1;
                    else
                      v977 = v197[1];
                    v978 = *v975 - v975[1] * v974;
                    do
                    {
                      if ((_DWORD)v974)
                      {
                        v979 = 0;
                        v980 = v197[2];
                        v981 = v975[2];
                        v982 = v976[2];
                        if (v980 <= 1)
                          v983 = 1;
                        else
                          v983 = v197[2];
                        v984 = v1929 - v982 * v271[2];
                        do
                        {
                          if ((_DWORD)v980)
                          {
                            v985 = 0;
                            v986 = v197[3];
                            v987 = v975[3];
                            v988 = v976[3];
                            if (v986 <= 1)
                              v989 = 1;
                            else
                              v989 = v197[3];
                            v990 = v982 - v988 * v271[3];
                            do
                            {
                              v991 = v989;
                              if ((_DWORD)v986)
                              {
                                do
                                {
                                  *(float *)(v973 + 4 * v968++) = *(float *)(v971 + 4 * v970)
                                                                * *(float *)(v972 + 4 * v969);
                                  v970 += v987;
                                  v969 += v988;
                                  --v991;
                                }
                                while (v991);
                              }
                              v970 += v981 - v987 * v986;
                              v969 += v990;
                              ++v985;
                            }
                            while (v985 != v983);
                          }
                          v970 += v1958 - v981 * v980;
                          v969 += v984;
                          ++v979;
                        }
                        while (v979 != v977);
                      }
                      v970 += v978;
                      v969 += v1989;
                      ++v967;
                    }
                    while (v967 != v2007);
                  }
                  break;
                default:
                  v911 = v195[6];
                  if (v911)
                  {
                    v912 = 0;
                    v1928 = v270[19];
                    v1957 = v196[19];
                    v1915 = v195[19];
                    do
                    {
                      v913 = 0;
                      if ((v199 & 0x80000000) == 0)
                      {
                        v914 = v196[3];
                        v915 = v199;
                        v916 = v912;
                        do
                        {
                          v917 = ldiv(v916, v197[v915]);
                          v916 = v917.quot;
                          v913 += *(_QWORD *)(v914 + 8 * v915--) * v917.rem;
                        }
                        while (v915 != -1);
                      }
                      v918 = v1984;
                      if ((v1984 & 0x80000000) != 0)
                      {
                        LODWORD(v919) = 0;
                      }
                      else
                      {
                        v919 = 0;
                        v920 = v270[3];
                        v921 = v912;
                        do
                        {
                          v922 = ldiv(v921, v271[v918]);
                          v921 = v922.quot;
                          v919 += *(_QWORD *)(v920 + 8 * v918--) * v922.rem;
                        }
                        while (v918 != -1);
                      }
                      *(float *)(v1915 + 4 * v912++) = *(float *)(v1957 + 4 * (int)v913)
                                                     * *(float *)(v1928 + 4 * (int)v919);
                      v199 = v2002;
                    }
                    while (v912 != v911);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

float mlx::core::Negative::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  mlx::core::scheduler *v9;
  float result;
  void **v11;
  uint64_t v12;
  int *v13;
  mlx::core::scheduler *v14;
  void **v15;
  uint64_t v16;
  int *v17;
  mlx::core::scheduler *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  mlx::core::scheduler *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  mlx::core::scheduler *v26;
  void **v27;
  uint64_t v28;
  uint64_t *v29;
  mlx::core::scheduler *v30;
  void **v31;
  uint64_t v32;
  float *v33;
  mlx::core::scheduler *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  ldiv_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  ldiv_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  ldiv_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int quot;
  ldiv_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  ldiv_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  ldiv_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  ldiv_t v133;
  void *v134;
  uint64_t (*v135)(mlx::core::allocator *);
  void **v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Negative::eval_cpu();
  v5 = *(uint64_t **)v3;
  if (*(_DWORD *)(*(_QWORD *)v3 + 56) == 6 && (v5[21] & 1) != 0)
  {
    vDSP_vneg(*(const float **)(*(_QWORD *)v3 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)v3 + 160));
    return result;
  }
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  switch((int)v7)
  {
    case 0:
      v8 = (char *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v134);
        v11 = v136;
        if (v136 == &v134)
        {
          v12 = 4;
          v11 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_91;
          v12 = 5;
        }
        (*((void (**)(void))*v11 + v12))();
LABEL_91:
        v89 = *(_QWORD *)a3;
        v90 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v90)
        {
          v91 = 0;
          v92 = *(_QWORD *)(v89 + 152);
          v93 = *(uint64_t **)v3;
          v94 = *v93;
          v95 = ((unint64_t)(v93[1] - *v93) >> 2) - 1;
          do
          {
            v96 = 0;
            if ((v95 & 0x80000000) == 0)
            {
              v97 = v93[3];
              v98 = v95;
              quot = v91;
              do
              {
                v100 = ldiv(quot, *(int *)(v94 + 4 * v98));
                quot = v100.quot;
                v96 += *(_QWORD *)(v97 + 8 * v98--) * v100.rem;
              }
              while (v98 != -1);
            }
            *(_BYTE *)(v92 + v91++) = v8[(int)v96];
          }
          while (v91 != v90);
        }
        return result;
      }
      v45 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v45)
      {
        v46 = *(_BYTE **)(*(_QWORD *)a3 + 152);
        do
        {
          v47 = *v8++;
          *v46++ = v47;
          --v45;
        }
        while (v45);
      }
      return result;
    case 1:
      v25 = v5[19];
      if ((v5[21] & 1) == 0)
      {
        v26 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v26, (uint64_t)&v134);
        v27 = v136;
        if (v136 == &v134)
        {
          v28 = 4;
          v27 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_100;
          v28 = 5;
        }
        (*((void (**)(void))*v27 + v28))();
LABEL_100:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v101 = 0;
          v102 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v103 = **(_QWORD **)v3;
            v104 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v103) >> 2;
            v105 = 0;
            v106 = (v104 - 1);
            if ((int)v104 - 1 >= 0)
            {
              v107 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v108 = v101;
              do
              {
                v109 = ldiv(v108, *(int *)(v103 + 4 * v106));
                v108 = v109.quot;
                v105 += *(_QWORD *)(v107 + 8 * v106--) * v109.rem;
              }
              while (v106 != -1);
            }
            *(_BYTE *)(v102 + v101++) = -*(_BYTE *)(v25 + (int)v105);
          }
          while (v101 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v48 = 0;
        v49 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          *(_BYTE *)(v49 + v48) = -*(_BYTE *)(v25 + v48);
          ++v48;
        }
        while (v48 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 2:
      v17 = (int *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v18 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v18, (uint64_t)&v134);
        v19 = v136;
        if (v136 == &v134)
        {
          v20 = 4;
          v19 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_73;
          v20 = 5;
        }
        (*((void (**)(void))*v19 + v20))();
LABEL_73:
        v68 = *(_QWORD *)a3;
        v69 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v69)
        {
          v70 = 0;
          v71 = *(_QWORD *)(v68 + 152);
          v72 = *(uint64_t **)v3;
          v73 = *v72;
          v74 = ((unint64_t)(v72[1] - *v72) >> 2) - 1;
          do
          {
            v75 = 0;
            if ((v74 & 0x80000000) == 0)
            {
              v76 = v72[3];
              v77 = v74;
              v78 = v70;
              do
              {
                v79 = ldiv(v78, *(int *)(v73 + 4 * v77));
                v78 = v79.quot;
                v75 += *(_QWORD *)(v76 + 8 * v77--) * v79.rem;
              }
              while (v77 != -1);
            }
            *(_DWORD *)(v71 + 4 * v70++) = -v17[(int)v75];
          }
          while (v70 != v69);
        }
        return result;
      }
      v40 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v40)
      {
        v41 = *(_DWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v42 = *v17++;
          *v41++ = -v42;
          --v40;
        }
        while (v40);
      }
      return result;
    case 3:
      v21 = v5[19];
      if ((v5[21] & 1) == 0)
      {
        v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v22, (uint64_t)&v134);
        v23 = v136;
        if (v136 == &v134)
        {
          v24 = 4;
          v23 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_82;
          v24 = 5;
        }
        (*((void (**)(void))*v23 + v24))();
LABEL_82:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v80 = 0;
          v81 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v82 = **(_QWORD **)v3;
            v83 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v82) >> 2;
            v84 = 0;
            v85 = (v83 - 1);
            if ((int)v83 - 1 >= 0)
            {
              v86 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v87 = v80;
              do
              {
                v88 = ldiv(v87, *(int *)(v82 + 4 * v85));
                v87 = v88.quot;
                v84 += *(_QWORD *)(v86 + 8 * v85--) * v88.rem;
              }
              while (v85 != -1);
            }
            *(_BYTE *)(v81 + v80++) = -*(_BYTE *)(v21 + (int)v84);
          }
          while (v80 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v43 = 0;
        v44 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          *(_BYTE *)(v44 + v43) = -*(_BYTE *)(v21 + v43);
          ++v43;
        }
        while (v43 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 4:
      v13 = (int *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v14, (uint64_t)&v134);
        v15 = v136;
        if (v136 == &v134)
        {
          v16 = 4;
          v15 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_64;
          v16 = 5;
        }
        (*((void (**)(void))*v15 + v16))();
LABEL_64:
        v56 = *(_QWORD *)a3;
        v57 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v57)
        {
          v58 = 0;
          v59 = *(_QWORD *)(v56 + 152);
          v60 = *(uint64_t **)v3;
          v61 = *v60;
          v62 = ((unint64_t)(v60[1] - *v60) >> 2) - 1;
          do
          {
            v63 = 0;
            if ((v62 & 0x80000000) == 0)
            {
              v64 = v60[3];
              v65 = v62;
              v66 = v58;
              do
              {
                v67 = ldiv(v66, *(int *)(v61 + 4 * v65));
                v66 = v67.quot;
                v63 += *(_QWORD *)(v64 + 8 * v65--) * v67.rem;
              }
              while (v65 != -1);
            }
            *(_DWORD *)(v59 + 4 * v58++) = -v13[(int)v63];
          }
          while (v58 != v57);
        }
        return result;
      }
      v37 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v37)
      {
        v38 = *(_DWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v39 = *v13++;
          *v38++ = -v39;
          --v37;
        }
        while (v37);
      }
      return result;
    case 5:
      v29 = (uint64_t *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v30, (uint64_t)&v134);
        v31 = v136;
        if (v136 == &v134)
        {
          v32 = 4;
          v31 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_109;
          v32 = 5;
        }
        (*((void (**)(void))*v31 + v32))();
LABEL_109:
        v110 = *(_QWORD *)a3;
        v111 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v111)
        {
          v112 = 0;
          v113 = *(_QWORD *)(v110 + 152);
          v114 = *(uint64_t **)v3;
          v115 = *v114;
          v116 = ((unint64_t)(v114[1] - *v114) >> 2) - 1;
          do
          {
            v117 = 0;
            if ((v116 & 0x80000000) == 0)
            {
              v118 = v114[3];
              v119 = v116;
              v120 = v112;
              do
              {
                v121 = ldiv(v120, *(int *)(v115 + 4 * v119));
                v120 = v121.quot;
                v117 += *(_QWORD *)(v118 + 8 * v119--) * v121.rem;
              }
              while (v119 != -1);
            }
            *(_QWORD *)(v113 + 8 * v112++) = -v29[(int)v117];
          }
          while (v112 != v111);
        }
        return result;
      }
      v50 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v50)
      {
        v51 = *(_QWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v52 = *v29++;
          *v51++ = -v52;
          --v50;
        }
        while (v50);
      }
      return result;
    case 6:
      v33 = (float *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v34 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v34, (uint64_t)&v134);
        v35 = v136;
        if (v136 == &v134)
        {
          v36 = 4;
          v35 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_118;
          v36 = 5;
        }
        (*((void (**)(void))*v35 + v36))();
LABEL_118:
        v122 = *(_QWORD *)a3;
        v123 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v123)
        {
          v124 = 0;
          v125 = *(_QWORD *)(v122 + 152);
          v126 = *(uint64_t **)v3;
          v127 = *v126;
          v128 = ((unint64_t)(v126[1] - *v126) >> 2) - 1;
          do
          {
            v129 = 0;
            if ((v128 & 0x80000000) == 0)
            {
              v130 = v126[3];
              v131 = v128;
              v132 = v124;
              do
              {
                v133 = ldiv(v132, *(int *)(v127 + 4 * v131));
                v132 = v133.quot;
                v129 += *(_QWORD *)(v130 + 8 * v131--) * v133.rem;
              }
              while (v131 != -1);
            }
            result = -v33[(int)v129];
            *(float *)(v125 + 4 * v124++) = result;
          }
          while (v124 != v123);
        }
        return result;
      }
      v53 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v53)
      {
        v54 = *(float **)(*(_QWORD *)a3 + 152);
        do
        {
          v55 = *v33++;
          result = -v55;
          *v54++ = -v55;
          --v53;
        }
        while (v53);
      }
      return result;
    default:
      return result;
  }
}

void sub_2424EE960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Power::eval_cpu(uint64_t a1, const mlx::core::array **a2, mlx::core::array *this)
{
  const mlx::core::array *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const mlx::core::array *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlx::core::scheduler *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  mlx::core::array *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (a2[1] - *a2 != 32)
    mlx::core::Power::eval_cpu();
  v6 = *(_QWORD *)this;
  v7 = *(_QWORD *)(*(_QWORD *)this + 56);
  if ((_DWORD)v7 != 6
    || (v8 = *(_QWORD **)v3, (*(_BYTE *)(*(_QWORD *)v3 + 168) & 2) == 0)
    || (v9 = (const mlx::core::array *)((char *)v3 + 16), v10 = *((_QWORD *)v3 + 2), (*(_BYTE *)(v10 + 168) & 2) == 0))
  {
    mlx::core::Power::eval(a1, (uint64_t)a2, this);
    return;
  }
  v19 = v8[6];
  v11 = *((_QWORD *)v3 + 1);
  if (v11)
  {
    if (!*(_QWORD *)(v11 + 8))
    {
      v16 = v8[18];
      if (v16)
      {
        if (!*(_QWORD *)(v16 + 8) && ((v7 ^ v8[7]) & 0xFF00000000) == 0)
        {
          v17 = this;
          v9 = v3;
LABEL_24:
          mlx::core::array::copy_shared_buffer(v17, v9);
          goto LABEL_15;
        }
      }
    }
  }
  v12 = *((_QWORD *)v3 + 3);
  if (v12)
  {
    if (!*(_QWORD *)(v12 + 8))
    {
      v18 = *(_QWORD *)(v10 + 144);
      if (v18)
      {
        if (!*(_QWORD *)(v18 + 8) && ((v7 ^ *(_QWORD *)(v10 + 56)) & 0xFF00000000) == 0)
        {
          v17 = this;
          goto LABEL_24;
        }
      }
    }
  }
  v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(BYTE4(v7) * *(_QWORD *)(v6 + 48)));
  v20[0] = &unk_2513463C8;
  v20[1] = mlx::core::allocator::free;
  v21 = v20;
  mlx::core::array::set_data((int ***)this, (uint64_t)v13, (uint64_t)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_14;
  }
  if (v21)
  {
    v15 = 5;
LABEL_14:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
LABEL_15:
  vvpowf(*(float **)(*(_QWORD *)this + 152), *(const float **)(*((_QWORD *)v3 + 2) + 152), *(const float **)(*(_QWORD *)v3 + 152), &v19);
}

void sub_2424EEB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Scan::eval_cpu(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  mlx::core::array *v3;
  int *v6;
  mlx::core::scheduler *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  vDSP_Length v13;
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float __S;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (a2[1] - *a2 != 16)
    mlx::core::Scan::eval_cpu();
  if (*(_DWORD *)(a1 + 20) != 2
    || (v6 = (*a3)[7], (_DWORD)v6 != 6)
    || (*(_BYTE *)(*(_QWORD *)v3 + 168) & 2) == 0
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * *(int *)(a1 + 24)) != 1
    || *(_BYTE *)(a1 + 29))
  {
    mlx::core::Scan::eval(a1, (uint64_t)a2, a3);
    return;
  }
  v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
  v24[0] = &unk_2513463C8;
  v24[1] = mlx::core::allocator::free;
  v25 = v24;
  mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)v24);
  v8 = v25;
  if (v25 == v24)
  {
    v9 = 4;
    v8 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  v10 = mlx::core::array::shape(v3, *(_DWORD *)(a1 + 24));
  v11 = *(_QWORD *)v3;
  v12 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  v13 = v10;
  v14 = *(_QWORD *)(v11 + 152);
  v15 = (*a3)[19];
  __S = 1.0;
  v16 = *(unsigned __int8 *)(a1 + 28);
  v17 = v12 / v10;
  if (v16)
  {
    if ((int)v17 >= 1)
    {
      v18 = 4 * (v10 - 1);
      v19 = v18 + 4;
      v20 = v14 + 4;
      do
      {
        vDSP_vrsum((const float *)(v20 + v18), -1, &__S, (float *)((char *)v15 + v18), -1, v13);
        v18 += v19;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
    }
  }
  else if ((int)v17 >= 1)
  {
    v21 = 0;
    v22 = v14 - 4;
    do
    {
      vDSP_vrsum((const float *)(v22 + v21 * 4), 1, &__S, (float *)&v15[v21], 1, v13);
      v21 += v13;
      LODWORD(v17) = v17 - 1;
    }
    while ((_DWORD)v17);
  }
}

void sub_2424EEDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Sin::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sin::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvsinf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Sin::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::Sinh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sinh::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvsinhf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Sinh::eval(a1, a2, (int ***)a3);
  }
}

float mlx::core::Square::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  mlx::core::scheduler *v9;
  float result;
  void **v11;
  uint64_t v12;
  int *v13;
  mlx::core::scheduler *v14;
  void **v15;
  uint64_t v16;
  int *v17;
  mlx::core::scheduler *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  mlx::core::scheduler *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  mlx::core::scheduler *v26;
  void **v27;
  uint64_t v28;
  uint64_t *v29;
  mlx::core::scheduler *v30;
  void **v31;
  uint64_t v32;
  float *v33;
  mlx::core::scheduler *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  ldiv_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  ldiv_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  ldiv_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int quot;
  ldiv_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  ldiv_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  ldiv_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  ldiv_t v133;
  void *v134;
  uint64_t (*v135)(mlx::core::allocator *);
  void **v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Square::eval_cpu();
  v5 = *(uint64_t **)v3;
  if (*(_DWORD *)(*(_QWORD *)v3 + 56) == 6 && (v5[21] & 1) != 0)
  {
    vDSP_vsq(*(const float **)(*(_QWORD *)v3 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)v3 + 160));
    return result;
  }
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  switch((int)v7)
  {
    case 0:
      v8 = (char *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v134);
        v11 = v136;
        if (v136 == &v134)
        {
          v12 = 4;
          v11 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_91;
          v12 = 5;
        }
        (*((void (**)(void))*v11 + v12))();
LABEL_91:
        v89 = *(_QWORD *)a3;
        v90 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v90)
        {
          v91 = 0;
          v92 = *(_QWORD *)(v89 + 152);
          v93 = *(uint64_t **)v3;
          v94 = *v93;
          v95 = ((unint64_t)(v93[1] - *v93) >> 2) - 1;
          do
          {
            v96 = 0;
            if ((v95 & 0x80000000) == 0)
            {
              v97 = v93[3];
              v98 = v95;
              quot = v91;
              do
              {
                v100 = ldiv(quot, *(int *)(v94 + 4 * v98));
                quot = v100.quot;
                v96 += *(_QWORD *)(v97 + 8 * v98--) * v100.rem;
              }
              while (v98 != -1);
            }
            *(_BYTE *)(v92 + v91++) = v8[(int)v96];
          }
          while (v91 != v90);
        }
        return result;
      }
      v45 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v45)
      {
        v46 = *(_BYTE **)(*(_QWORD *)a3 + 152);
        do
        {
          v47 = *v8++;
          *v46++ = v47;
          --v45;
        }
        while (v45);
      }
      return result;
    case 1:
      v25 = v5[19];
      if ((v5[21] & 1) == 0)
      {
        v26 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v26, (uint64_t)&v134);
        v27 = v136;
        if (v136 == &v134)
        {
          v28 = 4;
          v27 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_100;
          v28 = 5;
        }
        (*((void (**)(void))*v27 + v28))();
LABEL_100:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v101 = 0;
          v102 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v103 = **(_QWORD **)v3;
            v104 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v103) >> 2;
            v105 = 0;
            v106 = (v104 - 1);
            if ((int)v104 - 1 >= 0)
            {
              v107 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v108 = v101;
              do
              {
                v109 = ldiv(v108, *(int *)(v103 + 4 * v106));
                v108 = v109.quot;
                v105 += *(_QWORD *)(v107 + 8 * v106--) * v109.rem;
              }
              while (v106 != -1);
            }
            *(_BYTE *)(v102 + v101++) = *(_BYTE *)(v25 + (int)v105) * *(_BYTE *)(v25 + (int)v105);
          }
          while (v101 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v48 = 0;
        v49 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          *(_BYTE *)(v49 + v48) = *(_BYTE *)(v25 + v48) * *(_BYTE *)(v25 + v48);
          ++v48;
        }
        while (v48 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 2:
      v17 = (int *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v18 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v18, (uint64_t)&v134);
        v19 = v136;
        if (v136 == &v134)
        {
          v20 = 4;
          v19 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_73;
          v20 = 5;
        }
        (*((void (**)(void))*v19 + v20))();
LABEL_73:
        v68 = *(_QWORD *)a3;
        v69 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v69)
        {
          v70 = 0;
          v71 = *(_QWORD *)(v68 + 152);
          v72 = *(uint64_t **)v3;
          v73 = *v72;
          v74 = ((unint64_t)(v72[1] - *v72) >> 2) - 1;
          do
          {
            v75 = 0;
            if ((v74 & 0x80000000) == 0)
            {
              v76 = v72[3];
              v77 = v74;
              v78 = v70;
              do
              {
                v79 = ldiv(v78, *(int *)(v73 + 4 * v77));
                v78 = v79.quot;
                v75 += *(_QWORD *)(v76 + 8 * v77--) * v79.rem;
              }
              while (v77 != -1);
            }
            *(_DWORD *)(v71 + 4 * v70++) = v17[(int)v75] * v17[(int)v75];
          }
          while (v70 != v69);
        }
        return result;
      }
      v40 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v40)
      {
        v41 = *(_DWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v42 = *v17++;
          *v41++ = v42 * v42;
          --v40;
        }
        while (v40);
      }
      return result;
    case 3:
      v21 = v5[19];
      if ((v5[21] & 1) == 0)
      {
        v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v22, (uint64_t)&v134);
        v23 = v136;
        if (v136 == &v134)
        {
          v24 = 4;
          v23 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_82;
          v24 = 5;
        }
        (*((void (**)(void))*v23 + v24))();
LABEL_82:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v80 = 0;
          v81 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v82 = **(_QWORD **)v3;
            v83 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v82) >> 2;
            v84 = 0;
            v85 = (v83 - 1);
            if ((int)v83 - 1 >= 0)
            {
              v86 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v87 = v80;
              do
              {
                v88 = ldiv(v87, *(int *)(v82 + 4 * v85));
                v87 = v88.quot;
                v84 += *(_QWORD *)(v86 + 8 * v85--) * v88.rem;
              }
              while (v85 != -1);
            }
            *(_BYTE *)(v81 + v80++) = *(_BYTE *)(v21 + (int)v84) * *(_BYTE *)(v21 + (int)v84);
          }
          while (v80 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v43 = 0;
        v44 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          *(_BYTE *)(v44 + v43) = *(_BYTE *)(v21 + v43) * *(_BYTE *)(v21 + v43);
          ++v43;
        }
        while (v43 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 4:
      v13 = (int *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v14, (uint64_t)&v134);
        v15 = v136;
        if (v136 == &v134)
        {
          v16 = 4;
          v15 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_64;
          v16 = 5;
        }
        (*((void (**)(void))*v15 + v16))();
LABEL_64:
        v56 = *(_QWORD *)a3;
        v57 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v57)
        {
          v58 = 0;
          v59 = *(_QWORD *)(v56 + 152);
          v60 = *(uint64_t **)v3;
          v61 = *v60;
          v62 = ((unint64_t)(v60[1] - *v60) >> 2) - 1;
          do
          {
            v63 = 0;
            if ((v62 & 0x80000000) == 0)
            {
              v64 = v60[3];
              v65 = v62;
              v66 = v58;
              do
              {
                v67 = ldiv(v66, *(int *)(v61 + 4 * v65));
                v66 = v67.quot;
                v63 += *(_QWORD *)(v64 + 8 * v65--) * v67.rem;
              }
              while (v65 != -1);
            }
            *(_DWORD *)(v59 + 4 * v58++) = v13[(int)v63] * v13[(int)v63];
          }
          while (v58 != v57);
        }
        return result;
      }
      v37 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v37)
      {
        v38 = *(_DWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v39 = *v13++;
          *v38++ = v39 * v39;
          --v37;
        }
        while (v37);
      }
      return result;
    case 5:
      v29 = (uint64_t *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v30, (uint64_t)&v134);
        v31 = v136;
        if (v136 == &v134)
        {
          v32 = 4;
          v31 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_109;
          v32 = 5;
        }
        (*((void (**)(void))*v31 + v32))();
LABEL_109:
        v110 = *(_QWORD *)a3;
        v111 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v111)
        {
          v112 = 0;
          v113 = *(_QWORD *)(v110 + 152);
          v114 = *(uint64_t **)v3;
          v115 = *v114;
          v116 = ((unint64_t)(v114[1] - *v114) >> 2) - 1;
          do
          {
            v117 = 0;
            if ((v116 & 0x80000000) == 0)
            {
              v118 = v114[3];
              v119 = v116;
              v120 = v112;
              do
              {
                v121 = ldiv(v120, *(int *)(v115 + 4 * v119));
                v120 = v121.quot;
                v117 += *(_QWORD *)(v118 + 8 * v119--) * v121.rem;
              }
              while (v119 != -1);
            }
            *(_QWORD *)(v113 + 8 * v112++) = v29[(int)v117] * v29[(int)v117];
          }
          while (v112 != v111);
        }
        return result;
      }
      v50 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v50)
      {
        v51 = *(_QWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v52 = *v29++;
          *v51++ = v52 * v52;
          --v50;
        }
        while (v50);
      }
      return result;
    case 6:
      v33 = (float *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v34 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v34, (uint64_t)&v134);
        v35 = v136;
        if (v136 == &v134)
        {
          v36 = 4;
          v35 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_118;
          v36 = 5;
        }
        (*((void (**)(void))*v35 + v36))();
LABEL_118:
        v122 = *(_QWORD *)a3;
        v123 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v123)
        {
          v124 = 0;
          v125 = *(_QWORD *)(v122 + 152);
          v126 = *(uint64_t **)v3;
          v127 = *v126;
          v128 = ((unint64_t)(v126[1] - *v126) >> 2) - 1;
          do
          {
            v129 = 0;
            if ((v128 & 0x80000000) == 0)
            {
              v130 = v126[3];
              v131 = v128;
              v132 = v124;
              do
              {
                v133 = ldiv(v132, *(int *)(v127 + 4 * v131));
                v132 = v133.quot;
                v129 += *(_QWORD *)(v130 + 8 * v131--) * v133.rem;
              }
              while (v131 != -1);
            }
            result = v33[(int)v129] * v33[(int)v129];
            *(float *)(v125 + 4 * v124++) = result;
          }
          while (v124 != v123);
        }
        return result;
      }
      v53 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v53)
      {
        v54 = *(float **)(*(_QWORD *)a3 + 152);
        do
        {
          v55 = *v33++;
          result = v55 * v55;
          *v54++ = v55 * v55;
          --v53;
        }
        while (v53);
      }
      return result;
    default:
      return result;
  }
}

void sub_2424EF8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Sqrt::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v6;
  float *v7;
  int v8;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sqrt::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)v3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v6 = *(const float **)(*(_QWORD *)v3 + 152);
    v8 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    v7 = *(float **)(*(_QWORD *)a3 + 152);
    if (*(_BYTE *)(a1 + 20))
      vvrsqrtf(v7, v6, &v8);
    else
      vvsqrtf(v7, v6, &v8);
  }
  else
  {
    mlx::core::Sqrt::eval(a1, a2, a3);
  }
}

void mlx::core::Subtract::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::Subtract::eval_cpu();
  v4 = v3 + 2;
  v5 = *(_DWORD *)(*v3 + 56);
  if (v5 == 4)
  {
  }
  else if (v5 == 6)
  {
  }
  else
  {
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  float *v9;
  const float *v10;
  vDSP_Length v11;
  int v12;
  int v13;
  float v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const float *v19;
  float *v20;
  const float *v21;
  vDSP_Length v22;
  _QWORD *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  int **v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int **v92;
  int *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  int **v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int **v107;
  int *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int **v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  int **v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int **v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unint64_t v166;
  int v167;
  int v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int *v175;
  vDSP_Length v176;
  float *v177;
  uint64_t v178;
  unsigned __int8 *v179;
  int *v180;
  BOOL *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  int v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  vDSP_Length v194;
  float *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  int v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  vDSP_Length v212;
  uint64_t v213;
  float *v214;
  uint64_t v215;
  _DWORD *v216;
  int *v217;
  _DWORD *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  int v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  vDSP_Length v231;
  float *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int *v237;
  uint64_t v238;
  unint64_t v239;
  int v240;
  int v241;
  int v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int *v248;
  vDSP_Length v249;
  uint64_t v250;
  float *v251;
  uint64_t v252;
  _DWORD *v253;
  int *v254;
  _DWORD *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  int v259;
  int v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int *v267;
  vDSP_Length v268;
  uint64_t v269;
  float *v270;
  uint64_t v271;
  _QWORD *v272;
  int *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  int v279;
  int v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int *v286;
  vDSP_Length v287;
  uint64_t v288;
  float *v289;
  uint64_t v290;
  float *v291;
  float *v292;
  float *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  ldiv_t v301;
  uint64_t v302;
  int *v303;
  uint64_t v304;
  int v305;
  ldiv_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  int *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  BOOL *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int *v334;
  uint64_t v335;
  unint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  int *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int *v356;
  uint64_t v357;
  unint64_t v358;
  _QWORD *v359;
  int *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  ldiv_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  ldiv_t v390;
  int v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int *v397;
  uint64_t v398;
  unint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  int *v402;
  uint64_t v403;
  unint64_t v404;
  int v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int *v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  int *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  int v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  int *v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  ldiv_t v446;
  uint64_t v447;
  int *v448;
  uint64_t v449;
  int v450;
  ldiv_t v451;
  int v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int *v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  int *v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  unint64_t i;
  uint64_t v468;
  int v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int *v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  int *v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  int v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  unint64_t j;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int *v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  int *v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  int v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  int v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  unint64_t k;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  ldiv_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  ldiv_t v536;
  int v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  int *v543;
  uint64_t v544;
  unint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  int *v548;
  uint64_t v549;
  unint64_t v550;
  int v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int *v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  _QWORD *v561;
  uint64_t v562;
  int *v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  int v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int *v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v577;
  unint64_t v578;
  _QWORD *v579;
  uint64_t v580;
  int *v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  ldiv_t v592;
  uint64_t v593;
  int *v594;
  uint64_t v595;
  int v596;
  ldiv_t v597;
  int v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  int *v604;
  uint64_t v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t v608;
  int *v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  unint64_t m;
  uint64_t v614;
  int v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int *v621;
  uint64_t v622;
  uint64_t *v623;
  uint64_t v624;
  uint64_t v625;
  int *v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  int v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  int v634;
  unint64_t n;
  uint64_t v636;
  uint64_t v637;
  int v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int *v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  int *v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  int v653;
  unint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  int v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  unint64_t ii;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  ldiv_t v672;
  uint64_t v673;
  int *v674;
  uint64_t v675;
  int v676;
  ldiv_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int *v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t *v687;
  uint64_t v688;
  uint64_t v689;
  int *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  _QWORD *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int *v705;
  uint64_t v706;
  unint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  int *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  int *v727;
  uint64_t v728;
  unint64_t v729;
  _QWORD *v730;
  int *v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  ldiv_t v751;
  uint64_t v752;
  int *v753;
  uint64_t v754;
  int v755;
  ldiv_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  int *v763;
  uint64_t v764;
  unint64_t v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  int *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  float *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  int *v784;
  uint64_t v785;
  unint64_t v786;
  _QWORD *v787;
  uint64_t v788;
  int *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int *v806;
  uint64_t v807;
  unint64_t v808;
  _QWORD *v809;
  int *v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int *v830;
  vDSP_Length v831;
  float *v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  int *v837;
  vDSP_Length v838;
  float *v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int *v844;
  vDSP_Length v845;
  float *v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int *v851;
  vDSP_Length v852;
  float *v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  int *v858;
  vDSP_Length v859;
  uint64_t v860;
  float *v861;
  unint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int *v866;
  vDSP_Length v867;
  uint64_t v868;
  float *v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int *v874;
  vDSP_Length v875;
  float *v876;
  unint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int *v881;
  vDSP_Length v882;
  float *v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  int *v888;
  vDSP_Length v889;
  uint64_t v890;
  float *v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  int *v896;
  vDSP_Length v897;
  uint64_t v898;
  float *v899;
  unint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int *v904;
  vDSP_Length v905;
  uint64_t v906;
  float *v907;
  unint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int *v912;
  vDSP_Length v913;
  uint64_t v914;
  float *v915;
  unint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int *v920;
  vDSP_Length v921;
  uint64_t v922;
  float *v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  int *v928;
  vDSP_Length v929;
  uint64_t v930;
  float *v931;
  int v932;
  uint64_t v933;
  uint64_t v934;
  float *v935;
  int *v936;
  unint64_t v937;
  _QWORD *v938;
  uint64_t v939;
  int *v940;
  uint64_t v941;
  unint64_t v942;
  unint64_t v943;
  float *v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  ldiv_t v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  int v957;
  ldiv_t v958;
  int v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  int *v964;
  vDSP_Length v965;
  float *v966;
  unint64_t v967;
  _QWORD *v968;
  uint64_t v969;
  int *v970;
  uint64_t v971;
  unint64_t v972;
  unint64_t v973;
  float *v974;
  uint64_t v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  ldiv_t v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  int v987;
  ldiv_t v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  float *v992;
  uint64_t v993;
  unint64_t v994;
  _QWORD *v995;
  uint64_t v996;
  int *v997;
  uint64_t v998;
  unint64_t v999;
  unint64_t v1000;
  float *v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int v1007;
  ldiv_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int v1014;
  ldiv_t v1015;
  int v1016;
  unint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  int *v1021;
  vDSP_Length v1022;
  float *v1023;
  unint64_t v1024;
  _QWORD *v1025;
  uint64_t v1026;
  int *v1027;
  uint64_t v1028;
  unint64_t v1029;
  unint64_t v1030;
  float *v1031;
  uint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  ldiv_t v1038;
  uint64_t v1039;
  unint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  int v1044;
  ldiv_t v1045;
  int v1046;
  uint64_t v1047;
  uint64_t v1048;
  float *v1049;
  uint64_t v1050;
  unint64_t v1051;
  _QWORD *v1052;
  uint64_t v1053;
  int *v1054;
  uint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  float *v1058;
  uint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064;
  ldiv_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  int v1071;
  ldiv_t v1072;
  int v1073;
  uint64_t v1074;
  uint64_t v1075;
  float *v1076;
  uint64_t v1077;
  unint64_t v1078;
  _QWORD *v1079;
  uint64_t v1080;
  int *v1081;
  uint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  float *v1085;
  uint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  ldiv_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  int v1098;
  ldiv_t v1099;
  int v1100;
  uint64_t v1101;
  uint64_t v1102;
  float *v1103;
  uint64_t v1104;
  unint64_t v1105;
  _QWORD *v1106;
  uint64_t v1107;
  int *v1108;
  uint64_t v1109;
  unint64_t v1110;
  unint64_t v1111;
  float *v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  ldiv_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  int v1125;
  ldiv_t v1126;
  int v1127;
  uint64_t v1128;
  uint64_t v1129;
  float *v1130;
  int *v1131;
  unint64_t v1132;
  _QWORD *v1133;
  uint64_t v1134;
  int *v1135;
  uint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  float *v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  int quot;
  ldiv_t v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  int v1152;
  ldiv_t v1153;
  int v1154;
  uint64_t v1155;
  uint64_t v1156;
  float *v1157;
  int *v1158;
  unint64_t v1159;
  _QWORD *v1160;
  uint64_t v1161;
  int *v1162;
  uint64_t v1163;
  unint64_t v1164;
  unint64_t v1165;
  float *v1166;
  uint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  ldiv_t v1173;
  uint64_t v1174;
  unint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  int v1179;
  ldiv_t v1180;
  int v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  int *v1185;
  vDSP_Length v1186;
  float *v1187;
  unint64_t v1188;
  _QWORD *v1189;
  uint64_t v1190;
  int *v1191;
  uint64_t v1192;
  unint64_t v1193;
  unint64_t v1194;
  float *v1195;
  uint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  int v1201;
  ldiv_t v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  int v1208;
  ldiv_t v1209;
  int v1210;
  unint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  int *v1215;
  vDSP_Length v1216;
  float *v1217;
  unint64_t v1218;
  _QWORD *v1219;
  uint64_t v1220;
  int *v1221;
  uint64_t v1222;
  unint64_t v1223;
  unint64_t v1224;
  float *v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  int v1231;
  ldiv_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  ldiv_t v1239;
  int v1240;
  uint64_t v1241;
  uint64_t v1242;
  float *v1243;
  uint64_t v1244;
  unint64_t v1245;
  _QWORD *v1246;
  uint64_t v1247;
  int *v1248;
  uint64_t v1249;
  unint64_t v1250;
  unint64_t v1251;
  float *v1252;
  uint64_t v1253;
  unint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  int v1258;
  ldiv_t v1259;
  uint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  int v1265;
  ldiv_t v1266;
  int v1267;
  uint64_t v1268;
  uint64_t v1269;
  float *v1270;
  uint64_t v1271;
  unint64_t v1272;
  _QWORD *v1273;
  uint64_t v1274;
  int *v1275;
  uint64_t v1276;
  unint64_t v1277;
  unint64_t v1278;
  float *v1279;
  uint64_t v1280;
  unint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  int v1285;
  ldiv_t v1286;
  uint64_t v1287;
  unint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  int v1292;
  ldiv_t v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  int *v1298;
  vDSP_Length v1299;
  float *v1300;
  unint64_t v1301;
  _QWORD *v1302;
  uint64_t v1303;
  int *v1304;
  uint64_t v1305;
  unint64_t v1306;
  unint64_t v1307;
  float *v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  int v1314;
  ldiv_t v1315;
  uint64_t v1316;
  unint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  int v1321;
  ldiv_t v1322;
  int v1323;
  unint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  int *v1328;
  vDSP_Length v1329;
  float *v1330;
  unint64_t v1331;
  _QWORD *v1332;
  uint64_t v1333;
  int *v1334;
  uint64_t v1335;
  unint64_t v1336;
  unint64_t v1337;
  float *v1338;
  uint64_t v1339;
  unint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  int v1344;
  ldiv_t v1345;
  uint64_t v1346;
  unint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int v1351;
  ldiv_t v1352;
  int v1353;
  uint64_t v1354;
  uint64_t v1355;
  float *v1356;
  uint64_t v1357;
  unint64_t v1358;
  _QWORD *v1359;
  uint64_t v1360;
  int *v1361;
  uint64_t v1362;
  unint64_t v1363;
  unint64_t v1364;
  float *v1365;
  uint64_t v1366;
  unint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  int v1371;
  ldiv_t v1372;
  uint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  int v1378;
  ldiv_t v1379;
  int v1380;
  uint64_t v1381;
  uint64_t v1382;
  float *v1383;
  uint64_t v1384;
  unint64_t v1385;
  _QWORD *v1386;
  uint64_t v1387;
  int *v1388;
  uint64_t v1389;
  unint64_t v1390;
  unint64_t v1391;
  float *v1392;
  uint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  int v1398;
  ldiv_t v1399;
  uint64_t v1400;
  unint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  int v1405;
  ldiv_t v1406;
  int v1407;
  uint64_t v1408;
  uint64_t v1409;
  float *v1410;
  uint64_t v1411;
  unint64_t v1412;
  _QWORD *v1413;
  uint64_t v1414;
  int *v1415;
  uint64_t v1416;
  unint64_t v1417;
  unint64_t v1418;
  float *v1419;
  uint64_t v1420;
  unint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  int v1425;
  ldiv_t v1426;
  uint64_t v1427;
  unint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  int v1432;
  ldiv_t v1433;
  int v1434;
  uint64_t v1435;
  uint64_t v1436;
  float *v1437;
  uint64_t v1438;
  unint64_t v1439;
  _QWORD *v1440;
  uint64_t v1441;
  int *v1442;
  uint64_t v1443;
  unint64_t v1444;
  unint64_t v1445;
  float *v1446;
  uint64_t v1447;
  unint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  int v1452;
  ldiv_t v1453;
  uint64_t v1454;
  unint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  int v1459;
  ldiv_t v1460;
  int v1461;
  uint64_t v1462;
  uint64_t v1463;
  float *v1464;
  uint64_t v1465;
  unint64_t v1466;
  _QWORD *v1467;
  uint64_t v1468;
  int *v1469;
  uint64_t v1470;
  unint64_t v1471;
  unint64_t v1472;
  float *v1473;
  uint64_t v1474;
  unint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  int v1479;
  ldiv_t v1480;
  uint64_t v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  int v1486;
  ldiv_t v1487;
  int v1488;
  uint64_t v1489;
  uint64_t v1490;
  float *v1491;
  uint64_t v1492;
  unint64_t v1493;
  _QWORD *v1494;
  uint64_t v1495;
  int *v1496;
  uint64_t v1497;
  unint64_t v1498;
  unint64_t v1499;
  float *v1500;
  uint64_t v1501;
  unint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  int v1506;
  ldiv_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  int v1513;
  ldiv_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  int *v1524;
  unint64_t v1525;
  int *v1526;
  int *v1527;
  int *v1528;
  unint64_t v1529;
  int *v1530;
  uint64_t v1531;
  unint64_t v1532;
  unint64_t v1533;
  unint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  unint64_t v1537;
  unint64_t v1538;
  unint64_t v1539;
  unint64_t v1540;
  unint64_t v1541;
  unint64_t v1542;
  unint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  unint64_t v1552;
  vDSP_Length v1553;
  vDSP_Length v1554;
  vDSP_Length v1555;
  vDSP_Length v1556;
  vDSP_Length v1557;
  vDSP_Length v1558;
  vDSP_Length v1559;
  vDSP_Length v1560;
  vDSP_Length v1561;
  vDSP_Length v1562;
  vDSP_Length v1563;
  unint64_t v1564;
  vDSP_Length v1565;
  unint64_t v1566;
  vDSP_Length v1567;
  vDSP_Length v1568;
  vDSP_Length v1569;
  vDSP_Length v1570;
  vDSP_Length v1571;
  vDSP_Length v1572;
  vDSP_Length v1573;
  vDSP_Length v1574;
  vDSP_Length v1575;
  vDSP_Length v1576;
  vDSP_Length v1577;
  vDSP_Length v1578;
  vDSP_Length v1579;
  vDSP_Length v1580;
  vDSP_Length v1581;
  vDSP_Length v1582;
  vDSP_Length v1583;
  vDSP_Length v1584;
  vDSP_Length v1585;
  vDSP_Length v1586;
  vDSP_Length v1587;
  uint64_t v1588;
  int v1589;
  int *v1590;
  uint64_t v1591;
  int *v1592;
  uint64_t v1593;
  uint64_t v1594;
  int v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  int *v1599;
  int *v1600;
  int *v1601;
  int *v1602;
  int *v1603;
  int *v1604;
  int *v1605;
  int *v1606;
  int *v1607;
  int *v1608;
  int *v1609;
  uint64_t v1610;
  int *v1611;
  uint64_t v1612;
  int *v1613;
  int *v1614;
  int *v1615;
  int *v1616;
  int *v1617;
  int *v1618;
  int *v1619;
  int *v1620;
  int *v1621;
  int *v1622;
  int *v1623;
  int *v1624;
  int *v1625;
  int *v1626;
  int *v1627;
  int *v1628;
  int *v1629;
  int *v1630;
  int *v1631;
  int *v1632;
  int *v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  vDSP_Length v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  vDSP_Length v1656;
  uint64_t v1657;
  vDSP_Length v1658;
  uint64_t v1659;
  unint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  unint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  float __B;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(char **)(*a2 + 152) != **(unsigned __int8 **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          goto LABEL_17;
        case 2:
          goto LABEL_5;
        case 3:
          goto LABEL_18;
        default:
          v23 = *(_QWORD **)a3;
          v24 = *a1;
          v25 = *(int **)*a1;
          v26 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v25) >> 2;
          v27 = (v26 - 1);
          if ((int)v27 >= -1)
            v28 = -1;
          else
            v28 = v26 - 1;
          v29 = v28 + 1;
          v30 = v26 + 1;
          break;
      }
      while (1)
      {
        v31 = v30 - 2;
        if (v30 - 2 < 0)
          break;
        --v30;
        if (*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8 * v31) != *(_QWORD *)(v23[3] + 8 * v31))
          goto LABEL_74;
      }
      v30 = v29;
LABEL_74:
      v84 = (int **)*a2;
      v85 = *(int **)*a2;
      v86 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v85) >> 2;
      v87 = (v86 - 1);
      if ((int)v87 >= -1)
        v88 = -1;
      else
        v88 = v86 - 1;
      v89 = v88 + 1;
      v90 = v86 + 1;
      while (1)
      {
        v91 = v90 - 2;
        if (v90 - 2 < 0)
          break;
        --v90;
        if (*(_QWORD *)&v84[3][2 * v91] != *(_QWORD *)(v23[3] + 8 * v91))
          goto LABEL_128;
      }
      v90 = v89;
LABEL_128:
      v138 = v26 + 1;
      while (1)
      {
        v139 = v138 - 2;
        if (v138 - 2 < 0)
          break;
        --v138;
        if (*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8 * v139))
          goto LABEL_163;
      }
      v138 = v29;
LABEL_163:
      v152 = v86 + 1;
      while (1)
      {
        v153 = v152 - 2;
        if (v152 - 2 < 0)
          break;
        --v152;
        if (*(_QWORD *)&v84[3][2 * v153])
          goto LABEL_198;
      }
      v152 = v89;
LABEL_198:
      v166 = (uint64_t)(v23[1] - *v23) >> 2;
      if (v30 <= v90)
        v167 = v90;
      else
        v167 = v30;
      if (v30 <= v152)
        v30 = v152;
      if (v138 > v90)
        v90 = v138;
      if (v166 > v90)
        v168 = 1;
      else
        v168 = 4;
      if (v166 <= v90)
        v90 = (uint64_t)(v23[1] - *v23) >> 2;
      if (v166 <= v30)
        v30 = v90;
      else
        v168 = 2;
      if (v166 <= v167)
      {
        v169 = v30;
      }
      else
      {
        v168 = 3;
        v169 = v167;
      }
      if (!v169)
        goto LABEL_227;
      v170 = *(_QWORD *)(v23[3] + 8 * (v169 - 1));
      if (v170 < 0x10)
        goto LABEL_227;
      switch(v168)
      {
        case 1:
          if (v169 == 2)
          {
            v1127 = *v25;
            if (*v25)
            {
              v1128 = 0;
              v1129 = 0;
              v1564 = 0;
              v1610 = *(_QWORD *)(v24 + 152);
              v1656 = (int)v170;
              v1130 = (float *)v23[19];
              v1131 = v84[19];
              do
              {
                if (v25[1])
                {
                  v1132 = 0;
                  do
                  {
                    __B = -1.0;
                    vDSP_vsmsa((const float *)((char *)v1131 + v1128), 1, &__B, (const float *)(v1610 + v1129), v1130, 1, v1656);
                    v24 = *a1;
                    v1133 = *(_QWORD **)(*a1 + 24);
                    v1134 = v1133[1];
                    v1129 += v1134;
                    v84 = (int **)*a2;
                    v1135 = *(int **)(*a2 + 24);
                    v1136 = *((_QWORD *)v1135 + 1);
                    v1128 += v1136;
                    v1130 = (float *)((char *)v1130 + v1656);
                    ++v1132;
                    v25 = *(int **)*a1;
                    v1137 = v25[1];
                  }
                  while (v1132 < v1137);
                  v1127 = *v25;
                  v85 = *v84;
                }
                else
                {
                  v1137 = 0;
                  v1133 = *(_QWORD **)(v24 + 24);
                  v1134 = v1133[1];
                  v1135 = v84[3];
                  v1136 = *((_QWORD *)v1135 + 1);
                }
                v1129 = *v1133 + v1129 - v1137 * v1134;
                v1128 = *(_QWORD *)v1135 + v1128 - v1136 * v85[1];
                ++v1564;
              }
              while (v1564 < v1127);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              v826 = 0;
              v827 = 0;
              v828 = 0;
              v829 = *(_QWORD *)(v24 + 152);
              v830 = v84[19];
              v831 = (int)v170;
              v832 = (float *)v23[19];
              do
              {
                __B = -1.0;
                vDSP_vsmsa((const float *)((char *)v830 + v827), 1, &__B, (const float *)(v829 + v828), v832, 1, v831);
                v828 += **(_QWORD **)(*a1 + 24);
                v827 += **(_QWORD **)(*a2 + 24);
                v832 = (float *)((char *)v832 + v831);
                ++v826;
              }
              while (v826 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            v1138 = 0;
            v1611 = v84[19];
            v1657 = *(_QWORD *)(v24 + 152);
            v1565 = (int)v170;
            v1139 = (float *)v23[19];
            do
            {
              v1140 = *(_QWORD *)*a1;
              v1141 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1140) >> 2;
              v1142 = 0;
              v1143 = (v1141 - 1);
              if ((int)v1141 - 1 >= 0)
              {
                v1144 = *(_QWORD *)(*a1 + 24);
                quot = v1138;
                do
                {
                  v1146 = ldiv(quot, *(int *)(v1140 + 4 * v1143));
                  quot = v1146.quot;
                  v1142 += *(_QWORD *)(v1144 + 8 * v1143--) * v1146.rem;
                }
                while (v1143 != -1);
              }
              v1147 = *(_QWORD *)*a2;
              v1148 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1147) >> 2;
              v1149 = 0;
              v1150 = (v1148 - 1);
              if ((int)v1148 - 1 >= 0)
              {
                v1151 = *(_QWORD *)(*a2 + 24);
                v1152 = v1138;
                do
                {
                  v1153 = ldiv(v1152, *(int *)(v1147 + 4 * v1150));
                  v1152 = v1153.quot;
                  v1149 += *(_QWORD *)(v1151 + 8 * v1150--) * v1153.rem;
                }
                while (v1150 != -1);
              }
              __B = -1.0;
              vDSP_vsmsa((const float *)((char *)v1611 + (int)v1149), 1, &__B, (const float *)(v1657 + (int)v1142), v1139, 1, v1565);
              v1139 = (float *)((char *)v1139 + v1565);
              v1138 += v1565;
            }
            while (v1138 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v169 == 2)
          {
            v1154 = *v25;
            if (*v25)
            {
              v1155 = 0;
              v1156 = 0;
              v1566 = 0;
              v1612 = *(_QWORD *)(v24 + 152);
              v1658 = (int)v170;
              v1157 = (float *)v23[19];
              v1158 = v84[19];
              do
              {
                if (v25[1])
                {
                  v1159 = 0;
                  do
                  {
                    __B = (float)-*((unsigned __int8 *)v1158 + v1155);
                    vDSP_vsadd((const float *)(v1612 + v1156), 1, &__B, v1157, 1, v1658);
                    v24 = *a1;
                    v1160 = *(_QWORD **)(*a1 + 24);
                    v1161 = v1160[1];
                    v1156 += v1161;
                    v84 = (int **)*a2;
                    v1162 = *(int **)(*a2 + 24);
                    v1163 = *((_QWORD *)v1162 + 1);
                    v1155 += v1163;
                    v1157 = (float *)((char *)v1157 + v1658);
                    ++v1159;
                    v25 = *(int **)*a1;
                    v1164 = v25[1];
                  }
                  while (v1159 < v1164);
                  v1154 = *v25;
                  v85 = *v84;
                }
                else
                {
                  v1164 = 0;
                  v1160 = *(_QWORD **)(v24 + 24);
                  v1161 = v1160[1];
                  v1162 = v84[3];
                  v1163 = *((_QWORD *)v1162 + 1);
                }
                v1156 = *v1160 + v1156 - v1164 * v1161;
                v1155 = *(_QWORD *)v1162 + v1155 - v1163 * v85[1];
                ++v1566;
              }
              while (v1566 < v1154);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              v833 = 0;
              v834 = 0;
              v835 = 0;
              v836 = *(_QWORD *)(v24 + 152);
              v837 = v84[19];
              v838 = (int)v170;
              v839 = (float *)v23[19];
              do
              {
                __B = (float)-*((unsigned __int8 *)v837 + v834);
                vDSP_vsadd((const float *)(v836 + v835), 1, &__B, v839, 1, v838);
                v835 += **(_QWORD **)(*a1 + 24);
                v834 += **(_QWORD **)(*a2 + 24);
                v839 = (float *)((char *)v839 + v838);
                ++v833;
              }
              while (v833 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            v1165 = 0;
            v1613 = v84[19];
            v1659 = *(_QWORD *)(v24 + 152);
            v1567 = (int)v170;
            v1166 = (float *)v23[19];
            do
            {
              v1167 = *(_QWORD *)*a1;
              v1168 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1167) >> 2;
              v1169 = 0;
              v1170 = (v1168 - 1);
              if ((int)v1168 - 1 >= 0)
              {
                v1171 = *(_QWORD *)(*a1 + 24);
                v1172 = v1165;
                do
                {
                  v1173 = ldiv(v1172, *(int *)(v1167 + 4 * v1170));
                  v1172 = v1173.quot;
                  v1169 += *(_QWORD *)(v1171 + 8 * v1170--) * v1173.rem;
                }
                while (v1170 != -1);
              }
              v1174 = *(_QWORD *)*a2;
              v1175 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1174) >> 2;
              v1176 = 0;
              v1177 = (v1175 - 1);
              if ((int)v1175 - 1 >= 0)
              {
                v1178 = *(_QWORD *)(*a2 + 24);
                v1179 = v1165;
                do
                {
                  v1180 = ldiv(v1179, *(int *)(v1174 + 4 * v1177));
                  v1179 = v1180.quot;
                  v1176 += *(_QWORD *)(v1178 + 8 * v1177--) * v1180.rem;
                }
                while (v1177 != -1);
              }
              __B = (float)-*((unsigned __int8 *)v1613 + (int)v1176);
              vDSP_vsadd((const float *)(v1659 + (int)v1169), 1, &__B, v1166, 1, v1567);
              v1166 = (float *)((char *)v1166 + v1567);
              v1165 += v1567;
            }
            while (v1165 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v169 == 2)
          {
            v932 = *v25;
            if (*v25)
            {
              v933 = 0;
              v934 = 0;
              v1552 = 0;
              v1598 = *(_QWORD *)(v24 + 152);
              v1644 = (int)v170;
              v935 = (float *)v23[19];
              v936 = v84[19];
              do
              {
                if (v25[1])
                {
                  v937 = 0;
                  do
                  {
                    vDSP_vsub((const float *)((char *)v936 + v933), 1, (const float *)(v1598 + v934), 1, v935, 1, v1644);
                    v24 = *a1;
                    v938 = *(_QWORD **)(*a1 + 24);
                    v939 = v938[1];
                    v934 += v939;
                    v84 = (int **)*a2;
                    v940 = *(int **)(*a2 + 24);
                    v941 = *((_QWORD *)v940 + 1);
                    v933 += v941;
                    v935 = (float *)((char *)v935 + v1644);
                    ++v937;
                    v25 = *(int **)*a1;
                    v942 = v25[1];
                  }
                  while (v937 < v942);
                  v932 = *v25;
                  v85 = *v84;
                }
                else
                {
                  v942 = 0;
                  v938 = *(_QWORD **)(v24 + 24);
                  v939 = v938[1];
                  v940 = v84[3];
                  v941 = *((_QWORD *)v940 + 1);
                }
                v934 = *v938 + v934 - v942 * v939;
                v933 = *(_QWORD *)v940 + v933 - v941 * v85[1];
                ++v1552;
              }
              while (v1552 < v932);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              v171 = 0;
              v172 = 0;
              v173 = 0;
              v174 = *(_QWORD *)(v24 + 152);
              v175 = v84[19];
              v176 = (int)v170;
              v177 = (float *)v23[19];
              do
              {
                vDSP_vsub((const float *)((char *)v175 + v172), 1, (const float *)(v174 + v173), 1, v177, 1, v176);
                v173 += **(_QWORD **)(*a1 + 24);
                v172 += **(_QWORD **)(*a2 + 24);
                v177 = (float *)((char *)v177 + v176);
                ++v171;
              }
              while (v171 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            v943 = 0;
            v1599 = v84[19];
            v1645 = *(_QWORD *)(v24 + 152);
            v1553 = (int)v170;
            v944 = (float *)v23[19];
            do
            {
              v945 = *(_QWORD *)*a1;
              v946 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v945) >> 2;
              v947 = 0;
              v948 = (v946 - 1);
              if ((int)v946 - 1 >= 0)
              {
                v949 = *(_QWORD *)(*a1 + 24);
                v950 = v943;
                do
                {
                  v951 = ldiv(v950, *(int *)(v945 + 4 * v948));
                  v950 = v951.quot;
                  v947 += *(_QWORD *)(v949 + 8 * v948--) * v951.rem;
                }
                while (v948 != -1);
              }
              v952 = *(_QWORD *)*a2;
              v953 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v952) >> 2;
              v954 = 0;
              v955 = (v953 - 1);
              if ((int)v953 - 1 >= 0)
              {
                v956 = *(_QWORD *)(*a2 + 24);
                v957 = v943;
                do
                {
                  v958 = ldiv(v957, *(int *)(v952 + 4 * v955));
                  v957 = v958.quot;
                  v954 += *(_QWORD *)(v956 + 8 * v955--) * v958.rem;
                }
                while (v955 != -1);
              }
              vDSP_vsub((const float *)((char *)v1599 + (int)v954), 1, (const float *)(v1645 + (int)v947), 1, v944, 1, v1553);
              v944 = (float *)((char *)v944 + v1553);
              v943 += v1553;
            }
            while (v943 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_227:
          switch(v166)
          {
            case 1uLL:
              v178 = v23[6];
              if (v178)
              {
                v179 = *(unsigned __int8 **)(v24 + 152);
                v180 = v84[19];
                v181 = (BOOL *)v23[19];
                v182 = **(_QWORD **)(v24 + 24);
                v183 = *(_QWORD *)v84[3];
                do
                {
                  *v181++ = *(char *)v180 != *v179;
                  v180 = (int *)((char *)v180 + v183);
                  v179 += v182;
                  --v178;
                }
                while (v178);
              }
              break;
            case 2uLL:
              v307 = *v25;
              if ((_DWORD)v307)
              {
                v308 = 0;
                v309 = 0;
                v310 = 0;
                v311 = 0;
                v312 = *(_QWORD *)(v24 + 152);
                v313 = v84[19];
                v314 = v23[19];
                v315 = v25[1];
                v316 = *(uint64_t **)(v24 + 24);
                v317 = *v316;
                v318 = v316[1];
                v319 = v84[3];
                v320 = *(_QWORD *)v319;
                v321 = *((_QWORD *)v319 + 1);
                v322 = v320 - v321 * v85[1];
                if (v315 <= 1)
                  v323 = 1;
                else
                  v323 = v25[1];
                v324 = v317 - v318 * v315;
                do
                {
                  if ((_DWORD)v315)
                  {
                    v325 = v309 + v323;
                    v326 = (BOOL *)(v314 + v309);
                    v327 = v323;
                    do
                    {
                      *v326++ = *((char *)v313 + v310) != *(unsigned __int8 *)(v312 + v311);
                      v311 += v318;
                      v310 += v321;
                      --v327;
                    }
                    while (v327);
                    v309 = v325;
                  }
                  v311 += v324;
                  v310 += v322;
                  ++v308;
                }
                while (v308 != v307);
              }
              break;
            case 3uLL:
              v328 = *v25;
              if ((_DWORD)v328)
              {
                v329 = 0;
                v330 = 0;
                v331 = 0;
                v332 = 0;
                v333 = *(_QWORD *)(v24 + 152);
                v334 = v84[19];
                v335 = v23[19];
                v336 = v25[1];
                v337 = *(_QWORD **)(v24 + 24);
                v338 = v337[1];
                v339 = v84[3];
                v340 = *((_QWORD *)v339 + 1);
                v341 = *(_QWORD *)v339 - v340 * v85[1];
                if (v336 <= 1)
                  v342 = 1;
                else
                  v342 = v25[1];
                v343 = *v337 - v338 * v336;
                do
                {
                  if ((_DWORD)v336)
                  {
                    v344 = 0;
                    v345 = v25[2];
                    v346 = v337[2];
                    v347 = *((_QWORD *)v339 + 2);
                    if (v345 <= 1)
                      v348 = 1;
                    else
                      v348 = v25[2];
                    v349 = v340 - v347 * v85[2];
                    do
                    {
                      v350 = v348;
                      if ((_DWORD)v345)
                      {
                        do
                        {
                          *(_BYTE *)(v335 + v330++) = *((char *)v334 + v331) != *(unsigned __int8 *)(v333 + v332);
                          v332 += v346;
                          v331 += v347;
                          --v350;
                        }
                        while (v350);
                      }
                      v332 += v338 - v346 * v345;
                      v331 += v349;
                      ++v344;
                    }
                    while (v344 != v342);
                  }
                  v332 += v343;
                  v331 += v341;
                  ++v329;
                }
                while (v329 != v328);
              }
              break;
            case 4uLL:
              v1635 = *v25;
              if ((_DWORD)v1635)
              {
                v351 = 0;
                v352 = 0;
                v353 = 0;
                v354 = 0;
                v355 = *(_QWORD *)(v24 + 152);
                v356 = v84[19];
                v357 = v23[19];
                v358 = v25[1];
                v359 = *(_QWORD **)(v24 + 24);
                v360 = v84[3];
                v1515 = *((_QWORD *)v360 + 1);
                v1518 = v359[1];
                v1545 = *(_QWORD *)v360 - v1515 * v85[1];
                v1589 = v25[1];
                if (v358 <= 1)
                  v361 = 1;
                else
                  v361 = v25[1];
                v1525 = *v359 - v359[1] * v358;
                do
                {
                  if (v1589)
                  {
                    v362 = 0;
                    v363 = v25[2];
                    v364 = v359[2];
                    v365 = *((_QWORD *)v360 + 2);
                    if (v363 <= 1)
                      v366 = 1;
                    else
                      v366 = v25[2];
                    v367 = v1515 - v365 * v85[2];
                    do
                    {
                      if ((_DWORD)v363)
                      {
                        v368 = 0;
                        v369 = v25[3];
                        v370 = v359[3];
                        v371 = *((_QWORD *)v360 + 3);
                        if (v369 <= 1)
                          v372 = 1;
                        else
                          v372 = v25[3];
                        v373 = v365 - v371 * v85[3];
                        do
                        {
                          v374 = v372;
                          if ((_DWORD)v369)
                          {
                            do
                            {
                              *(_BYTE *)(v357 + v352++) = *((char *)v356 + v353) != *(unsigned __int8 *)(v355 + v354);
                              v354 += v370;
                              v353 += v371;
                              --v374;
                            }
                            while (v374);
                          }
                          v354 += v364 - v370 * v369;
                          v353 += v373;
                          ++v368;
                        }
                        while (v368 != v366);
                      }
                      v354 += v1518 - v364 * v363;
                      v353 += v367;
                      ++v362;
                    }
                    while (v362 != v361);
                  }
                  v354 += v1525;
                  v353 += v1545;
                  ++v351;
                }
                while (v351 != v1635);
              }
              break;
            default:
              v1588 = v23[6];
              v1634 = v27;
              if (v1588)
              {
                v296 = 0;
                v1524 = v84[19];
                v1544 = *(_QWORD *)(v24 + 152);
                v1517 = v23[19];
                do
                {
                  v297 = v1634;
                  if ((v1634 & 0x80000000) != 0)
                  {
                    LODWORD(v298) = 0;
                  }
                  else
                  {
                    v298 = 0;
                    v299 = *(_QWORD *)(v24 + 24);
                    v300 = v296;
                    do
                    {
                      v301 = ldiv(v300, v25[v297]);
                      v300 = v301.quot;
                      v298 += *(_QWORD *)(v299 + 8 * v297--) * v301.rem;
                    }
                    while (v297 != -1);
                  }
                  v302 = 0;
                  if ((v87 & 0x80000000) == 0)
                  {
                    v303 = v84[3];
                    v304 = v87;
                    v305 = v296;
                    do
                    {
                      v306 = ldiv(v305, v85[v304]);
                      v305 = v306.quot;
                      v302 += *(_QWORD *)&v303[2 * v304--] * v306.rem;
                    }
                    while (v304 != -1);
                  }
                  *(_BYTE *)(v1517 + v296++) = *((char *)v1524 + (int)v302) != *(unsigned __int8 *)(v1544 + (int)v298);
                }
                while (v296 != v1588);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_9;
        case 1:
          goto LABEL_17;
        case 2:
LABEL_5:
          v9 = *(float **)(*(_QWORD *)a3 + 152);
          v10 = *(const float **)(*a1 + 152);
          v11 = *(_QWORD *)(*a1 + 160);
          v12 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_54;
        case 3:
          goto LABEL_18;
        default:
          v32 = *(_QWORD **)a3;
          v33 = *a1;
          v34 = *(int **)*a1;
          v35 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v34) >> 2;
          v36 = v35 - 1;
          if ((int)v35 - 1 >= -1)
            v36 = -1;
          v37 = v36 + 1;
          v38 = v35 + 1;
          break;
      }
      while (1)
      {
        v39 = v38 - 2;
        if (v38 - 2 < 0)
          break;
        --v38;
        if (*(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * v39) != *(_QWORD *)(v32[3] + 8 * v39))
          goto LABEL_82;
      }
      v38 = v37;
LABEL_82:
      v92 = (int **)*a2;
      v93 = *(int **)*a2;
      v94 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v93) >> 2;
      v95 = v94 - 1;
      if ((int)v94 - 1 >= -1)
        v95 = -1;
      v96 = v95 + 1;
      v97 = v94 + 1;
      while (1)
      {
        v98 = v97 - 2;
        if (v97 - 2 < 0)
          break;
        --v97;
        if (*(_QWORD *)&v92[3][2 * v98] != *(_QWORD *)(v32[3] + 8 * v98))
          goto LABEL_133;
      }
      v97 = v96;
LABEL_133:
      v140 = v35 + 1;
      while (1)
      {
        v141 = v140 - 2;
        if (v140 - 2 < 0)
          break;
        --v140;
        if (*(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * v141))
          goto LABEL_168;
      }
      v140 = v37;
LABEL_168:
      v154 = v94 + 1;
      while (1)
      {
        v155 = v154 - 2;
        if (v154 - 2 < 0)
          break;
        --v154;
        if (*(_QWORD *)&v92[3][2 * v155])
          goto LABEL_233;
      }
      v154 = v96;
LABEL_233:
      v184 = (uint64_t)(v32[1] - *v32) >> 2;
      if (v38 <= v97)
        v185 = v97;
      else
        v185 = v38;
      if (v38 <= v154)
        v38 = v154;
      if (v140 > v97)
        v97 = v140;
      if (v184 > v97)
        v186 = 1;
      else
        v186 = 4;
      if (v184 <= v97)
        v97 = (uint64_t)(v32[1] - *v32) >> 2;
      if (v184 <= v38)
        v38 = v97;
      else
        v186 = 2;
      if (v184 <= v185)
      {
        v187 = v38;
      }
      else
      {
        v186 = 3;
        v187 = v185;
      }
      if (!v187)
        goto LABEL_262;
      v188 = *(_QWORD *)(v32[3] + 8 * (v187 - 1));
      if (v188 < 0x10)
        goto LABEL_262;
      switch(v186)
      {
        case 1:
          if (v187 == 2)
          {
            v1181 = *v34;
            if (*v34)
            {
              v1660 = 0;
              v1182 = 0;
              v1183 = 0;
              v1184 = *(_QWORD *)(v33 + 152);
              v1185 = v92[19];
              v1186 = (int)v188;
              v1187 = (float *)v32[19];
              do
              {
                if (v34[1])
                {
                  v1188 = 0;
                  do
                  {
                    __B = -1.0;
                    vDSP_vsmsa((const float *)((char *)v1185 + v1182), 1, &__B, (const float *)(v1184 + v1183), v1187, 1, v1186);
                    v33 = *a1;
                    v1189 = *(_QWORD **)(*a1 + 24);
                    v1190 = v1189[1];
                    v1183 += v1190;
                    v92 = (int **)*a2;
                    v1191 = *(int **)(*a2 + 24);
                    v1192 = *((_QWORD *)v1191 + 1);
                    v1182 += v1192;
                    v1187 = (float *)((char *)v1187 + v1186);
                    ++v1188;
                    v34 = *(int **)*a1;
                    v1193 = v34[1];
                  }
                  while (v1188 < v1193);
                  v1181 = *v34;
                  v93 = *v92;
                }
                else
                {
                  v1193 = 0;
                  v1189 = *(_QWORD **)(v33 + 24);
                  v1190 = v1189[1];
                  v1191 = v92[3];
                  v1192 = *((_QWORD *)v1191 + 1);
                }
                v1183 = *v1189 + v1183 - v1193 * v1190;
                v1182 = *(_QWORD *)v1191 + v1182 - v1192 * v93[1];
                ++v1660;
              }
              while (v1660 < v1181);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              v840 = 0;
              v841 = 0;
              v842 = 0;
              v843 = *(_QWORD *)(v33 + 152);
              v844 = v92[19];
              v845 = (int)v188;
              v846 = (float *)v32[19];
              do
              {
                __B = -1.0;
                vDSP_vsmsa((const float *)((char *)v844 + v841), 1, &__B, (const float *)(v843 + v842), v846, 1, v845);
                v842 += **(_QWORD **)(*a1 + 24);
                v841 += **(_QWORD **)(*a2 + 24);
                v846 = (float *)((char *)v846 + v845);
                ++v840;
              }
              while (v840 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            v1194 = 0;
            v1614 = v92[19];
            v1661 = *(_QWORD *)(v33 + 152);
            v1568 = (int)v188;
            v1195 = (float *)v32[19];
            do
            {
              v1196 = *(_QWORD *)*a1;
              v1197 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1196) >> 2;
              v1198 = 0;
              v1199 = (v1197 - 1);
              if ((int)v1197 - 1 >= 0)
              {
                v1200 = *(_QWORD *)(*a1 + 24);
                v1201 = v1194;
                do
                {
                  v1202 = ldiv(v1201, *(int *)(v1196 + 4 * v1199));
                  v1201 = v1202.quot;
                  v1198 += *(_QWORD *)(v1200 + 8 * v1199--) * v1202.rem;
                }
                while (v1199 != -1);
              }
              v1203 = *(_QWORD *)*a2;
              v1204 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1203) >> 2;
              v1205 = 0;
              v1206 = (v1204 - 1);
              if ((int)v1204 - 1 >= 0)
              {
                v1207 = *(_QWORD *)(*a2 + 24);
                v1208 = v1194;
                do
                {
                  v1209 = ldiv(v1208, *(int *)(v1203 + 4 * v1206));
                  v1208 = v1209.quot;
                  v1205 += *(_QWORD *)(v1207 + 8 * v1206--) * v1209.rem;
                }
                while (v1206 != -1);
              }
              __B = -1.0;
              vDSP_vsmsa((const float *)((char *)v1614 + (int)v1205), 1, &__B, (const float *)(v1661 + (int)v1198), v1195, 1, v1568);
              v1195 = (float *)((char *)v1195 + v1568);
              v1194 += v1568;
            }
            while (v1194 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v187 == 2)
          {
            v1210 = *v34;
            if (*v34)
            {
              v1211 = 0;
              v1212 = 0;
              v1213 = 0;
              v1214 = *(_QWORD *)(v33 + 152);
              v1215 = v92[19];
              v1216 = (int)v188;
              v1217 = (float *)v32[19];
              do
              {
                if (v34[1])
                {
                  v1218 = 0;
                  do
                  {
                    __B = (float)-*((unsigned __int8 *)v1215 + v1212);
                    vDSP_vsadd((const float *)(v1214 + v1213), 1, &__B, v1217, 1, v1216);
                    v33 = *a1;
                    v1219 = *(_QWORD **)(*a1 + 24);
                    v1220 = v1219[1];
                    v1213 += v1220;
                    v92 = (int **)*a2;
                    v1221 = *(int **)(*a2 + 24);
                    v1222 = *((_QWORD *)v1221 + 1);
                    v1212 += v1222;
                    v1217 = (float *)((char *)v1217 + v1216);
                    ++v1218;
                    v34 = *(int **)*a1;
                    v1223 = v34[1];
                  }
                  while (v1218 < v1223);
                  v1210 = *v34;
                  v93 = *v92;
                }
                else
                {
                  v1223 = 0;
                  v1219 = *(_QWORD **)(v33 + 24);
                  v1220 = v1219[1];
                  v1221 = v92[3];
                  v1222 = *((_QWORD *)v1221 + 1);
                }
                v1213 = *v1219 + v1213 - v1223 * v1220;
                v1212 = *(_QWORD *)v1221 + v1212 - v1222 * v93[1];
                ++v1211;
              }
              while (v1211 < v1210);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              v847 = 0;
              v848 = 0;
              v849 = 0;
              v850 = *(_QWORD *)(v33 + 152);
              v851 = v92[19];
              v852 = (int)v188;
              v853 = (float *)v32[19];
              do
              {
                __B = (float)-*((unsigned __int8 *)v851 + v848);
                vDSP_vsadd((const float *)(v850 + v849), 1, &__B, v853, 1, v852);
                v849 += **(_QWORD **)(*a1 + 24);
                v848 += **(_QWORD **)(*a2 + 24);
                v853 = (float *)((char *)v853 + v852);
                ++v847;
              }
              while (v847 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            v1224 = 0;
            v1615 = v92[19];
            v1662 = *(_QWORD *)(v33 + 152);
            v1569 = (int)v188;
            v1225 = (float *)v32[19];
            do
            {
              v1226 = *(_QWORD *)*a1;
              v1227 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1226) >> 2;
              v1228 = 0;
              v1229 = (v1227 - 1);
              if ((int)v1227 - 1 >= 0)
              {
                v1230 = *(_QWORD *)(*a1 + 24);
                v1231 = v1224;
                do
                {
                  v1232 = ldiv(v1231, *(int *)(v1226 + 4 * v1229));
                  v1231 = v1232.quot;
                  v1228 += *(_QWORD *)(v1230 + 8 * v1229--) * v1232.rem;
                }
                while (v1229 != -1);
              }
              v1233 = *(_QWORD *)*a2;
              v1234 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1233) >> 2;
              v1235 = 0;
              v1236 = (v1234 - 1);
              if ((int)v1234 - 1 >= 0)
              {
                v1237 = *(_QWORD *)(*a2 + 24);
                v1238 = v1224;
                do
                {
                  v1239 = ldiv(v1238, *(int *)(v1233 + 4 * v1236));
                  v1238 = v1239.quot;
                  v1235 += *(_QWORD *)(v1237 + 8 * v1236--) * v1239.rem;
                }
                while (v1236 != -1);
              }
              __B = (float)-*((unsigned __int8 *)v1615 + (int)v1235);
              vDSP_vsadd((const float *)(v1662 + (int)v1228), 1, &__B, v1225, 1, v1569);
              v1225 = (float *)((char *)v1225 + v1569);
              v1224 += v1569;
            }
            while (v1224 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v187 == 2)
          {
            v959 = *v34;
            if (*v34)
            {
              v960 = 0;
              v961 = 0;
              v962 = 0;
              v963 = *(_QWORD *)(v33 + 152);
              v964 = v92[19];
              v965 = (int)v188;
              v966 = (float *)v32[19];
              do
              {
                if (v34[1])
                {
                  v967 = 0;
                  do
                  {
                    vDSP_vsub((const float *)((char *)v964 + v961), 1, (const float *)(v963 + v962), 1, v966, 1, v965);
                    v33 = *a1;
                    v968 = *(_QWORD **)(*a1 + 24);
                    v969 = v968[1];
                    v962 += v969;
                    v92 = (int **)*a2;
                    v970 = *(int **)(*a2 + 24);
                    v971 = *((_QWORD *)v970 + 1);
                    v961 += v971;
                    v966 = (float *)((char *)v966 + v965);
                    ++v967;
                    v34 = *(int **)*a1;
                    v972 = v34[1];
                  }
                  while (v967 < v972);
                  v959 = *v34;
                  v93 = *v92;
                }
                else
                {
                  v972 = 0;
                  v968 = *(_QWORD **)(v33 + 24);
                  v969 = v968[1];
                  v970 = v92[3];
                  v971 = *((_QWORD *)v970 + 1);
                }
                v962 = *v968 + v962 - v972 * v969;
                v961 = *(_QWORD *)v970 + v961 - v971 * v93[1];
                ++v960;
              }
              while (v960 < v959);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              v189 = 0;
              v190 = 0;
              v191 = 0;
              v192 = *(_QWORD *)(v33 + 152);
              v193 = v92[19];
              v194 = (int)v188;
              v195 = (float *)v32[19];
              do
              {
                vDSP_vsub((const float *)((char *)v193 + v190), 1, (const float *)(v192 + v191), 1, v195, 1, v194);
                v191 += **(_QWORD **)(*a1 + 24);
                v190 += **(_QWORD **)(*a2 + 24);
                v195 = (float *)((char *)v195 + v194);
                ++v189;
              }
              while (v189 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            v973 = 0;
            v1600 = v92[19];
            v1646 = *(_QWORD *)(v33 + 152);
            v1554 = (int)v188;
            v974 = (float *)v32[19];
            do
            {
              v975 = *(_QWORD *)*a1;
              v976 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v975) >> 2;
              v977 = 0;
              v978 = (v976 - 1);
              if ((int)v976 - 1 >= 0)
              {
                v979 = *(_QWORD *)(*a1 + 24);
                v980 = v973;
                do
                {
                  v981 = ldiv(v980, *(int *)(v975 + 4 * v978));
                  v980 = v981.quot;
                  v977 += *(_QWORD *)(v979 + 8 * v978--) * v981.rem;
                }
                while (v978 != -1);
              }
              v982 = *(_QWORD *)*a2;
              v983 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v982) >> 2;
              v984 = 0;
              v985 = (v983 - 1);
              if ((int)v983 - 1 >= 0)
              {
                v986 = *(_QWORD *)(*a2 + 24);
                v987 = v973;
                do
                {
                  v988 = ldiv(v987, *(int *)(v982 + 4 * v985));
                  v987 = v988.quot;
                  v984 += *(_QWORD *)(v986 + 8 * v985--) * v988.rem;
                }
                while (v985 != -1);
              }
              vDSP_vsub((const float *)((char *)v1600 + (int)v984), 1, (const float *)(v1646 + (int)v977), 1, v974, 1, v1554);
              v974 = (float *)((char *)v974 + v1554);
              v973 += v1554;
            }
            while (v973 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_262:
          switch(v184)
          {
            case 1uLL:
              if (v32[6])
              {
                v196 = 0;
                v197 = 0;
                v198 = 0;
                v199 = *(_QWORD *)(v33 + 152);
                v200 = v92[19];
                v201 = v32[19];
                do
                {
                  *(_BYTE *)(v201 + v196) = *(_BYTE *)(v199 + v198) - *((_BYTE *)v200 + v197);
                  v198 += **(_QWORD **)(*a1 + 24);
                  v197 += **(_QWORD **)(*a2 + 24);
                  ++v196;
                }
                while (v196 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v391 = *v34;
              if (*v34)
              {
                v392 = 0;
                v393 = 0;
                v394 = 0;
                v395 = 0;
                v396 = *(_QWORD *)(v33 + 152);
                v397 = v92[19];
                v398 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    v399 = 0;
                    do
                    {
                      *(_BYTE *)(v398 + v393 + v399) = *(_BYTE *)(v396 + v395) - *((_BYTE *)v397 + v394);
                      v33 = *a1;
                      v400 = *(_QWORD **)(*a1 + 24);
                      v401 = v400[1];
                      v395 += v401;
                      v92 = (int **)*a2;
                      v402 = *(int **)(*a2 + 24);
                      v403 = *((_QWORD *)v402 + 1);
                      v394 += v403;
                      ++v399;
                      v34 = *(int **)*a1;
                      v404 = v34[1];
                    }
                    while (v399 < v404);
                    v391 = *v34;
                    v93 = *v92;
                    v393 += v399;
                  }
                  else
                  {
                    v404 = 0;
                    v400 = *(_QWORD **)(v33 + 24);
                    v401 = v400[1];
                    v402 = v92[3];
                    v403 = *((_QWORD *)v402 + 1);
                  }
                  v395 = *v400 + v395 - v404 * v401;
                  v394 = *(_QWORD *)v402 + v394 - v403 * v93[1];
                  ++v392;
                }
                while (v392 < v391);
              }
              break;
            case 3uLL:
              v405 = *v34;
              if (*v34)
              {
                v406 = 0;
                v407 = 0;
                v408 = 0;
                v409 = 0;
                v410 = *(_QWORD *)(v33 + 152);
                v411 = v92[19];
                v412 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    v413 = 0;
                    do
                    {
                      if (v34[2])
                      {
                        v414 = 0;
                        do
                        {
                          *(_BYTE *)(v412 + v407 + v414) = *(_BYTE *)(v410 + v409) - *((_BYTE *)v411 + v408);
                          v33 = *a1;
                          v415 = *(_QWORD **)(*a1 + 24);
                          v416 = v415[2];
                          v409 += v416;
                          v92 = (int **)*a2;
                          v417 = *(int **)(*a2 + 24);
                          v418 = *((_QWORD *)v417 + 2);
                          v408 += v418;
                          ++v414;
                          v34 = *(int **)*a1;
                          v419 = v34[2];
                        }
                        while (v414 < v419);
                        v93 = *v92;
                        v407 += v414;
                      }
                      else
                      {
                        v419 = 0;
                        v415 = *(_QWORD **)(v33 + 24);
                        v416 = v415[2];
                        v417 = v92[3];
                        v418 = *((_QWORD *)v417 + 2);
                      }
                      v420 = v415[1];
                      v409 = v420 + v409 - v419 * v416;
                      v408 = *((_QWORD *)v417 + 1) + v408 - v418 * v93[2];
                      ++v413;
                      v421 = v34[1];
                    }
                    while (v413 < v421);
                    v405 = *v34;
                  }
                  else
                  {
                    v421 = 0;
                    v415 = *(_QWORD **)(v33 + 24);
                    v420 = v415[1];
                  }
                  v409 = *v415 + v409 - v421 * v420;
                  v408 = *(_QWORD *)v92[3] + v408 - *((_QWORD *)v92[3] + 1) * v93[1];
                  ++v406;
                }
                while (v406 < v405);
              }
              break;
            case 4uLL:
              v422 = *v34;
              if (*v34)
              {
                v423 = 0;
                v424 = 0;
                v425 = 0;
                v426 = 0;
                v427 = *(_QWORD *)(v33 + 152);
                v428 = v92[19];
                v429 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    v430 = 0;
                    do
                    {
                      if (v34[2])
                      {
                        v431 = 0;
                        do
                        {
                          if (v34[3])
                          {
                            v432 = 0;
                            do
                            {
                              *(_BYTE *)(v429 + v424 + v432) = *(_BYTE *)(v427 + v426) - *((_BYTE *)v428 + v425);
                              v33 = *a1;
                              v433 = *(_QWORD **)(*a1 + 24);
                              v434 = v433[3];
                              v426 += v434;
                              v92 = (int **)*a2;
                              v435 = *(int **)(*a2 + 24);
                              v436 = *((_QWORD *)v435 + 3);
                              v425 += v436;
                              ++v432;
                              v34 = *(int **)*a1;
                              v437 = v34[3];
                            }
                            while (v432 < v437);
                            v93 = *v92;
                            v424 += v432;
                          }
                          else
                          {
                            v437 = 0;
                            v433 = *(_QWORD **)(v33 + 24);
                            v434 = v433[3];
                            v435 = v92[3];
                            v436 = *((_QWORD *)v435 + 3);
                          }
                          v438 = v433[2];
                          v426 = v438 + v426 - v437 * v434;
                          v425 = *((_QWORD *)v435 + 2) + v425 - v436 * v93[3];
                          ++v431;
                          v439 = v34[2];
                        }
                        while (v431 < v439);
                      }
                      else
                      {
                        v439 = 0;
                        v433 = *(_QWORD **)(v33 + 24);
                        v438 = v433[2];
                      }
                      v426 = v433[1] + v426 - v439 * v438;
                      v425 = *((_QWORD *)v92[3] + 1) + v425 - *((_QWORD *)v92[3] + 2) * v93[2];
                      ++v430;
                      v440 = v34[1];
                    }
                    while (v430 < v440);
                    v422 = *v34;
                  }
                  else
                  {
                    v440 = 0;
                  }
                  v426 = **(_QWORD **)(v33 + 24) + v426 - *(_QWORD *)(*(_QWORD *)(v33 + 24) + 8) * v440;
                  v425 = *(_QWORD *)v92[3] + v425 - *((_QWORD *)v92[3] + 1) * v93[1];
                  ++v423;
                }
                while (v423 < v422);
              }
              break;
            default:
              if (v32[6])
              {
                v375 = 0;
                v1590 = v92[19];
                v1636 = *(_QWORD *)(v33 + 152);
                v376 = v32[19];
                do
                {
                  v377 = *(_QWORD *)*a1;
                  v378 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v377) >> 2;
                  v379 = 0;
                  v380 = (v378 - 1);
                  if ((int)v378 - 1 >= 0)
                  {
                    v381 = *(_QWORD *)(*a1 + 24);
                    v382 = v375;
                    do
                    {
                      v383 = ldiv(v382, *(int *)(v377 + 4 * v380));
                      v382 = v383.quot;
                      v379 += *(_QWORD *)(v381 + 8 * v380--) * v383.rem;
                    }
                    while (v380 != -1);
                  }
                  v384 = *(_QWORD *)*a2;
                  v385 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v384) >> 2;
                  v386 = 0;
                  v387 = (v385 - 1);
                  if ((int)v385 - 1 >= 0)
                  {
                    v388 = *(_QWORD *)(*a2 + 24);
                    v389 = v375;
                    do
                    {
                      v390 = ldiv(v389, *(int *)(v384 + 4 * v387));
                      v389 = v390.quot;
                      v386 += *(_QWORD *)(v388 + 8 * v387--) * v390.rem;
                    }
                    while (v387 != -1);
                  }
                  *(_BYTE *)(v376 + v375++) = *(_BYTE *)(v1636 + (int)v379) - *((_BYTE *)v1590 + (int)v386);
                }
                while (v375 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v13)
      {
        case 0:
          goto LABEL_12;
        case 1:
          goto LABEL_17;
        case 2:
          v9 = *(float **)(*(_QWORD *)a3 + 152);
          v10 = *(const float **)(*a1 + 152);
          v11 = *(_QWORD *)(*a1 + 160);
          v14 = (float)-**(_DWORD **)(*a2 + 152);
          goto LABEL_55;
        case 3:
          goto LABEL_18;
        default:
          v40 = *(_QWORD **)a3;
          v41 = *a1;
          v42 = *(int **)*a1;
          v43 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v42) >> 2;
          v44 = (v43 - 1);
          if ((int)v44 >= -1)
            v45 = -1;
          else
            v45 = v43 - 1;
          v46 = v45 + 1;
          v47 = v43 + 1;
          break;
      }
      while (1)
      {
        v48 = v47 - 2;
        if (v47 - 2 < 0)
          break;
        --v47;
        if (*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8 * v48) != *(_QWORD *)(v40[3] + 8 * v48))
          goto LABEL_89;
      }
      v47 = v46;
LABEL_89:
      v99 = (int **)*a2;
      v100 = *(int **)*a2;
      v101 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v100) >> 2;
      v102 = (v101 - 1);
      if ((int)v102 >= -1)
        v103 = -1;
      else
        v103 = v101 - 1;
      v104 = v103 + 1;
      v105 = v101 + 1;
      while (1)
      {
        v106 = v105 - 2;
        if (v105 - 2 < 0)
          break;
        --v105;
        if (*(_QWORD *)&v99[3][2 * v106] != *(_QWORD *)(v40[3] + 8 * v106))
          goto LABEL_138;
      }
      v105 = v104;
LABEL_138:
      v142 = v43 + 1;
      while (1)
      {
        v143 = v142 - 2;
        if (v142 - 2 < 0)
          break;
        --v142;
        if (*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8 * v143))
          goto LABEL_173;
      }
      v142 = v46;
LABEL_173:
      v156 = v101 + 1;
      while (1)
      {
        v157 = v156 - 2;
        if (v156 - 2 < 0)
          break;
        --v156;
        if (*(_QWORD *)&v99[3][2 * v157])
          goto LABEL_268;
      }
      v156 = v104;
LABEL_268:
      v202 = (uint64_t)(v40[1] - *v40) >> 2;
      if (v47 <= v105)
        v203 = v105;
      else
        v203 = v47;
      if (v47 <= v156)
        v47 = v156;
      if (v142 > v105)
        v105 = v142;
      if (v202 > v105)
        v204 = 1;
      else
        v204 = 4;
      if (v202 <= v105)
        v105 = (uint64_t)(v40[1] - *v40) >> 2;
      if (v202 <= v47)
        v47 = v105;
      else
        v204 = 2;
      if (v202 <= v203)
      {
        v205 = v47;
      }
      else
      {
        v204 = 3;
        v205 = v203;
      }
      if (!v205)
        goto LABEL_297;
      v206 = *(_QWORD *)(v40[3] + 8 * (v205 - 1));
      if (v206 < 0x10)
        goto LABEL_297;
      switch(v204)
      {
        case 1:
          if (v205 == 2)
          {
            v1240 = *v42;
            if (*v42)
            {
              v1241 = 0;
              v1242 = 0;
              v1663 = *(_QWORD *)(v41 + 152);
              v1616 = v99[19];
              v1243 = (float *)v40[19];
              v1536 = 0;
              v1570 = (int)v206;
              v1244 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  v1245 = 0;
                  do
                  {
                    __B = -1.0;
                    vDSP_vsmsa((const float *)&v1616[v1241], 1, &__B, (const float *)(v1663 + 4 * v1242), v1243, 1, v1570);
                    v41 = *a1;
                    v1246 = *(_QWORD **)(*a1 + 24);
                    v1247 = v1246[1];
                    v1242 += v1247;
                    v99 = (int **)*a2;
                    v1248 = *(int **)(*a2 + 24);
                    v1249 = *((_QWORD *)v1248 + 1);
                    v1241 += v1249;
                    ++v1245;
                    v42 = *(int **)*a1;
                    v1250 = v42[1];
                    v1243 = (float *)((char *)v1243 + v1244);
                  }
                  while (v1245 < v1250);
                  v1240 = *v42;
                  v100 = *v99;
                }
                else
                {
                  v1250 = 0;
                  v1246 = *(_QWORD **)(v41 + 24);
                  v1247 = v1246[1];
                  v1248 = v99[3];
                  v1249 = *((_QWORD *)v1248 + 1);
                }
                v1242 = *v1246 + v1242 - v1250 * v1247;
                v1241 = *(_QWORD *)v1248 + v1241 - v1249 * v100[1];
                ++v1536;
              }
              while (v1536 < v1240);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              v854 = 0;
              v855 = 0;
              v856 = 0;
              v857 = *(_QWORD *)(v41 + 152);
              v858 = v99[19];
              v859 = (int)v206;
              v860 = 4 * (int)v206;
              v861 = (float *)v40[19];
              do
              {
                __B = -1.0;
                vDSP_vsmsa((const float *)&v858[v855], 1, &__B, (const float *)(v857 + 4 * v856), v861, 1, v859);
                v856 += **(_QWORD **)(*a1 + 24);
                v855 += **(_QWORD **)(*a2 + 24);
                ++v854;
                v861 = (float *)((char *)v861 + v860);
              }
              while (v854 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            v1251 = 0;
            v1617 = v99[19];
            v1664 = *(_QWORD *)(v41 + 152);
            v1571 = (int)v206;
            v1252 = (float *)v40[19];
            do
            {
              v1253 = *(_QWORD *)*a1;
              v1254 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1253) >> 2;
              v1255 = 0;
              v1256 = (v1254 - 1);
              if ((int)v1254 - 1 >= 0)
              {
                v1257 = *(_QWORD *)(*a1 + 24);
                v1258 = v1251;
                do
                {
                  v1259 = ldiv(v1258, *(int *)(v1253 + 4 * v1256));
                  v1258 = v1259.quot;
                  v1255 += *(_QWORD *)(v1257 + 8 * v1256--) * v1259.rem;
                }
                while (v1256 != -1);
              }
              v1260 = *(_QWORD *)*a2;
              v1261 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1260) >> 2;
              v1262 = 0;
              v1263 = (v1261 - 1);
              if ((int)v1261 - 1 >= 0)
              {
                v1264 = *(_QWORD *)(*a2 + 24);
                v1265 = v1251;
                do
                {
                  v1266 = ldiv(v1265, *(int *)(v1260 + 4 * v1263));
                  v1265 = v1266.quot;
                  v1262 += *(_QWORD *)(v1264 + 8 * v1263--) * v1266.rem;
                }
                while (v1263 != -1);
              }
              __B = -1.0;
              vDSP_vsmsa((const float *)&v1617[(int)v1262], 1, &__B, (const float *)(v1664 + 4 * (int)v1255), v1252, 1, v1571);
              v1252 += v1571;
              v1251 += v1571;
            }
            while (v1251 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v205 == 2)
          {
            v1267 = *v42;
            if (*v42)
            {
              v1268 = 0;
              v1269 = 0;
              v1665 = *(_QWORD *)(v41 + 152);
              v1618 = v99[19];
              v1270 = (float *)v40[19];
              v1537 = 0;
              v1572 = (int)v206;
              v1271 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  v1272 = 0;
                  do
                  {
                    __B = (float)-v1618[v1268];
                    vDSP_vsadd((const float *)(v1665 + 4 * v1269), 1, &__B, v1270, 1, v1572);
                    v41 = *a1;
                    v1273 = *(_QWORD **)(*a1 + 24);
                    v1274 = v1273[1];
                    v1269 += v1274;
                    v99 = (int **)*a2;
                    v1275 = *(int **)(*a2 + 24);
                    v1276 = *((_QWORD *)v1275 + 1);
                    v1268 += v1276;
                    ++v1272;
                    v42 = *(int **)*a1;
                    v1277 = v42[1];
                    v1270 = (float *)((char *)v1270 + v1271);
                  }
                  while (v1272 < v1277);
                  v1267 = *v42;
                  v100 = *v99;
                }
                else
                {
                  v1277 = 0;
                  v1273 = *(_QWORD **)(v41 + 24);
                  v1274 = v1273[1];
                  v1275 = v99[3];
                  v1276 = *((_QWORD *)v1275 + 1);
                }
                v1269 = *v1273 + v1269 - v1277 * v1274;
                v1268 = *(_QWORD *)v1275 + v1268 - v1276 * v100[1];
                ++v1537;
              }
              while (v1537 < v1267);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              v862 = 0;
              v863 = 0;
              v864 = 0;
              v865 = *(_QWORD *)(v41 + 152);
              v866 = v99[19];
              v867 = (int)v206;
              v868 = 4 * (int)v206;
              v869 = (float *)v40[19];
              do
              {
                __B = (float)-v866[v863];
                vDSP_vsadd((const float *)(v865 + 4 * v864), 1, &__B, v869, 1, v867);
                v864 += **(_QWORD **)(*a1 + 24);
                v863 += **(_QWORD **)(*a2 + 24);
                ++v862;
                v869 = (float *)((char *)v869 + v868);
              }
              while (v862 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            v1278 = 0;
            v1619 = v99[19];
            v1666 = *(_QWORD *)(v41 + 152);
            v1573 = (int)v206;
            v1279 = (float *)v40[19];
            do
            {
              v1280 = *(_QWORD *)*a1;
              v1281 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1280) >> 2;
              v1282 = 0;
              v1283 = (v1281 - 1);
              if ((int)v1281 - 1 >= 0)
              {
                v1284 = *(_QWORD *)(*a1 + 24);
                v1285 = v1278;
                do
                {
                  v1286 = ldiv(v1285, *(int *)(v1280 + 4 * v1283));
                  v1285 = v1286.quot;
                  v1282 += *(_QWORD *)(v1284 + 8 * v1283--) * v1286.rem;
                }
                while (v1283 != -1);
              }
              v1287 = *(_QWORD *)*a2;
              v1288 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1287) >> 2;
              v1289 = 0;
              v1290 = (v1288 - 1);
              if ((int)v1288 - 1 >= 0)
              {
                v1291 = *(_QWORD *)(*a2 + 24);
                v1292 = v1278;
                do
                {
                  v1293 = ldiv(v1292, *(int *)(v1287 + 4 * v1290));
                  v1292 = v1293.quot;
                  v1289 += *(_QWORD *)(v1291 + 8 * v1290--) * v1293.rem;
                }
                while (v1290 != -1);
              }
              __B = (float)-v1619[(int)v1289];
              vDSP_vsadd((const float *)(v1666 + 4 * (int)v1282), 1, &__B, v1279, 1, v1573);
              v1279 += v1573;
              v1278 += v1573;
            }
            while (v1278 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v205 == 2)
          {
            v989 = *v42;
            if (*v42)
            {
              v990 = 0;
              v991 = 0;
              v1647 = *(_QWORD *)(v41 + 152);
              v1601 = v99[19];
              v992 = (float *)v40[19];
              v1532 = 0;
              v1555 = (int)v206;
              v993 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  v994 = 0;
                  do
                  {
                    vDSP_vsub((const float *)&v1601[v990], 1, (const float *)(v1647 + 4 * v991), 1, v992, 1, v1555);
                    v41 = *a1;
                    v995 = *(_QWORD **)(*a1 + 24);
                    v996 = v995[1];
                    v991 += v996;
                    v99 = (int **)*a2;
                    v997 = *(int **)(*a2 + 24);
                    v998 = *((_QWORD *)v997 + 1);
                    v990 += v998;
                    ++v994;
                    v42 = *(int **)*a1;
                    v999 = v42[1];
                    v992 = (float *)((char *)v992 + v993);
                  }
                  while (v994 < v999);
                  v989 = *v42;
                  v100 = *v99;
                }
                else
                {
                  v999 = 0;
                  v995 = *(_QWORD **)(v41 + 24);
                  v996 = v995[1];
                  v997 = v99[3];
                  v998 = *((_QWORD *)v997 + 1);
                }
                v991 = *v995 + v991 - v999 * v996;
                v990 = *(_QWORD *)v997 + v990 - v998 * v100[1];
                ++v1532;
              }
              while (v1532 < v989);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              v207 = 0;
              v208 = 0;
              v209 = 0;
              v210 = *(_QWORD *)(v41 + 152);
              v211 = v99[19];
              v212 = (int)v206;
              v213 = 4 * (int)v206;
              v214 = (float *)v40[19];
              do
              {
                vDSP_vsub((const float *)&v211[v208], 1, (const float *)(v210 + 4 * v209), 1, v214, 1, v212);
                v209 += **(_QWORD **)(*a1 + 24);
                v208 += **(_QWORD **)(*a2 + 24);
                ++v207;
                v214 = (float *)((char *)v214 + v213);
              }
              while (v207 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            v1000 = 0;
            v1602 = v99[19];
            v1648 = *(_QWORD *)(v41 + 152);
            v1556 = (int)v206;
            v1001 = (float *)v40[19];
            do
            {
              v1002 = *(_QWORD *)*a1;
              v1003 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1002) >> 2;
              v1004 = 0;
              v1005 = (v1003 - 1);
              if ((int)v1003 - 1 >= 0)
              {
                v1006 = *(_QWORD *)(*a1 + 24);
                v1007 = v1000;
                do
                {
                  v1008 = ldiv(v1007, *(int *)(v1002 + 4 * v1005));
                  v1007 = v1008.quot;
                  v1004 += *(_QWORD *)(v1006 + 8 * v1005--) * v1008.rem;
                }
                while (v1005 != -1);
              }
              v1009 = *(_QWORD *)*a2;
              v1010 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1009) >> 2;
              v1011 = 0;
              v1012 = (v1010 - 1);
              if ((int)v1010 - 1 >= 0)
              {
                v1013 = *(_QWORD *)(*a2 + 24);
                v1014 = v1000;
                do
                {
                  v1015 = ldiv(v1014, *(int *)(v1009 + 4 * v1012));
                  v1014 = v1015.quot;
                  v1011 += *(_QWORD *)(v1013 + 8 * v1012--) * v1015.rem;
                }
                while (v1012 != -1);
              }
              vDSP_vsub((const float *)&v1602[(int)v1011], 1, (const float *)(v1648 + 4 * (int)v1004), 1, v1001, 1, v1556);
              v1001 += v1556;
              v1000 += v1556;
            }
            while (v1000 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_297:
          switch(v202)
          {
            case 1uLL:
              v215 = v40[6];
              if (v215)
              {
                v216 = *(_DWORD **)(v41 + 152);
                v217 = v99[19];
                v218 = (_DWORD *)v40[19];
                v219 = 4 * *(_QWORD *)v99[3];
                v220 = 4 * **(_QWORD **)(v41 + 24);
                do
                {
                  *v218++ = *v216 - *v217;
                  v217 = (int *)((char *)v217 + v219);
                  v216 = (_DWORD *)((char *)v216 + v220);
                  --v215;
                }
                while (v215);
              }
              break;
            case 2uLL:
              v452 = *v42;
              if (*v42)
              {
                v453 = 0;
                v454 = 0;
                v455 = 0;
                v456 = 0;
                v457 = *(_QWORD *)(v41 + 152);
                v458 = v99[19];
                v459 = v40[19];
                v460 = *(uint64_t **)(v41 + 24);
                v461 = *v460;
                v462 = v460[1];
                v463 = v99[3];
                v465 = *(_QWORD *)v463;
                v464 = *((_QWORD *)v463 + 1);
                v466 = v42[1];
                do
                {
                  if (v466)
                  {
                    for (i = 0; i < v466; ++i)
                    {
                      *(_DWORD *)(v459 + 4 * v454 + 4 * i) = *(_DWORD *)(v457 + 4 * v456) - v458[v455];
                      v456 += v462;
                      v455 += v464;
                      v466 = v42[1];
                    }
                    v468 = v466;
                    v452 = *v42;
                    v454 += i;
                  }
                  else
                  {
                    v468 = 0;
                  }
                  v456 = v456 + v461 - v468 * v462;
                  v455 = v455 + v465 - v464 * v100[1];
                  ++v453;
                }
                while (v453 < v452);
              }
              break;
            case 3uLL:
              v469 = *v42;
              if (*v42)
              {
                v470 = 0;
                v471 = 0;
                v472 = 0;
                v473 = 0;
                v474 = *(_QWORD *)(v41 + 152);
                v475 = v99[19];
                v476 = v40[19];
                v477 = *(uint64_t **)(v41 + 24);
                v478 = *v477;
                v479 = v477[1];
                v480 = v99[3];
                v481 = *(_QWORD *)v480;
                v482 = *((_QWORD *)v480 + 1);
                v483 = v42[1];
                v484 = v483;
                do
                {
                  if (v484)
                  {
                    v485 = 0;
                    v486 = v477[2];
                    v487 = *((_QWORD *)v480 + 2);
                    v488 = v42[2];
                    do
                    {
                      if (v488)
                      {
                        for (j = 0; j < v488; ++j)
                        {
                          *(_DWORD *)(v476 + 4 * v471 + 4 * j) = *(_DWORD *)(v474 + 4 * v473) - v475[v472];
                          v473 += v486;
                          v472 += v487;
                          v488 = v42[2];
                        }
                        v490 = v488;
                        v483 = v42[1];
                        v471 += j;
                      }
                      else
                      {
                        v490 = 0;
                      }
                      v473 = v473 + v479 - v490 * v486;
                      v472 = v472 + v482 - v487 * v100[2];
                      ++v485;
                    }
                    while (v485 < v483);
                    v491 = v483;
                    v469 = *v42;
                    v484 = v483;
                  }
                  else
                  {
                    v491 = 0;
                  }
                  v473 = v473 + v478 - v491 * v479;
                  v472 = v472 + v481 - v482 * v100[1];
                  ++v470;
                }
                while (v470 < v469);
              }
              break;
            case 4uLL:
              v492 = *v42;
              if (*v42)
              {
                v493 = 0;
                v494 = 0;
                v495 = 0;
                v496 = 0;
                v497 = *(_QWORD *)(v41 + 152);
                v498 = v99[19];
                v499 = v40[19];
                v500 = *(uint64_t **)(v41 + 24);
                v501 = *v500;
                v502 = v500[1];
                v503 = v99[3];
                v504 = *(_QWORD *)v503;
                v505 = *((_QWORD *)v503 + 1);
                v506 = v42[1];
                v507 = v506;
                do
                {
                  if (v507)
                  {
                    v508 = 0;
                    v509 = v500[2];
                    v510 = *((_QWORD *)v503 + 2);
                    v511 = v42[2];
                    v512 = v511;
                    do
                    {
                      if (v512)
                      {
                        v513 = 0;
                        v514 = v500[3];
                        v515 = *((_QWORD *)v503 + 3);
                        v516 = v42[3];
                        do
                        {
                          if (v516)
                          {
                            for (k = 0; k < v516; ++k)
                            {
                              *(_DWORD *)(v499 + 4 * v494 + 4 * k) = *(_DWORD *)(v497 + 4 * v496) - v498[v495];
                              v496 += v514;
                              v495 += v515;
                              v516 = v42[3];
                            }
                            v518 = v516;
                            v511 = v42[2];
                            v494 += k;
                          }
                          else
                          {
                            v518 = 0;
                          }
                          v496 = v496 + v509 - v518 * v514;
                          v495 = v495 + v510 - v515 * v100[3];
                          ++v513;
                        }
                        while (v513 < v511);
                        v519 = v511;
                        v506 = v42[1];
                        v512 = v511;
                      }
                      else
                      {
                        v519 = 0;
                      }
                      v496 = v496 + v502 - v519 * v509;
                      v495 = v495 + v505 - v510 * v100[2];
                      ++v508;
                    }
                    while (v508 < v506);
                    v520 = v506;
                    v492 = *v42;
                    v507 = v506;
                  }
                  else
                  {
                    v520 = 0;
                  }
                  v496 = v496 + v501 - v520 * v502;
                  v495 = v495 + v504 - v505 * v100[1];
                  ++v493;
                }
                while (v493 < v492);
              }
              break;
            default:
              v1591 = v40[6];
              v1637 = v44;
              if (v1591)
              {
                v441 = 0;
                v1526 = v99[19];
                v1546 = *(_QWORD *)(v41 + 152);
                v1519 = v40[19];
                do
                {
                  v442 = v1637;
                  if ((v1637 & 0x80000000) != 0)
                  {
                    LODWORD(v443) = 0;
                  }
                  else
                  {
                    v443 = 0;
                    v444 = *(_QWORD *)(v41 + 24);
                    v445 = v441;
                    do
                    {
                      v446 = ldiv(v445, v42[v442]);
                      v445 = v446.quot;
                      v443 += *(_QWORD *)(v444 + 8 * v442--) * v446.rem;
                    }
                    while (v442 != -1);
                  }
                  v447 = 0;
                  if ((v102 & 0x80000000) == 0)
                  {
                    v448 = v99[3];
                    v449 = v102;
                    v450 = v441;
                    do
                    {
                      v451 = ldiv(v450, v100[v449]);
                      v450 = v451.quot;
                      v447 += *(_QWORD *)&v448[2 * v449--] * v451.rem;
                    }
                    while (v449 != -1);
                  }
                  *(_DWORD *)(v1519 + 4 * v441++) = *(_DWORD *)(v1546 + 4 * (int)v443) - v1526[(int)v447];
                }
                while (v441 != v1591);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v15)
      {
        case 0:
LABEL_9:
          v7 = **(_BYTE **)(*a1 + 152) - **(_BYTE **)(*a2 + 152);
LABEL_10:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_17;
        case 2:
          v9 = *(float **)(*(_QWORD *)a3 + 152);
          v10 = *(const float **)(*a1 + 152);
          v11 = *(_QWORD *)(*a1 + 160);
          v12 = **(char **)(*a2 + 152);
          goto LABEL_54;
        case 3:
          goto LABEL_18;
        default:
          v49 = *(_QWORD **)a3;
          v50 = *a1;
          v51 = *(int **)*a1;
          v52 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v51) >> 2;
          v53 = v52 - 1;
          if ((int)v52 - 1 >= -1)
            v53 = -1;
          v54 = v53 + 1;
          v55 = v52 + 1;
          break;
      }
      while (1)
      {
        v56 = v55 - 2;
        if (v55 - 2 < 0)
          break;
        --v55;
        if (*(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v56) != *(_QWORD *)(v49[3] + 8 * v56))
          goto LABEL_97;
      }
      v55 = v54;
LABEL_97:
      v107 = (int **)*a2;
      v108 = *(int **)*a2;
      v109 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v108) >> 2;
      v110 = v109 - 1;
      if ((int)v109 - 1 >= -1)
        v110 = -1;
      v111 = v110 + 1;
      v112 = v109 + 1;
      while (1)
      {
        v113 = v112 - 2;
        if (v112 - 2 < 0)
          break;
        --v112;
        if (*(_QWORD *)&v107[3][2 * v113] != *(_QWORD *)(v49[3] + 8 * v113))
          goto LABEL_143;
      }
      v112 = v111;
LABEL_143:
      v144 = v52 + 1;
      while (1)
      {
        v145 = v144 - 2;
        if (v144 - 2 < 0)
          break;
        --v144;
        if (*(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v145))
          goto LABEL_178;
      }
      v144 = v54;
LABEL_178:
      v158 = v109 + 1;
      while (1)
      {
        v159 = v158 - 2;
        if (v158 - 2 < 0)
          break;
        --v158;
        if (*(_QWORD *)&v107[3][2 * v159])
          goto LABEL_303;
      }
      v158 = v111;
LABEL_303:
      v221 = (uint64_t)(v49[1] - *v49) >> 2;
      if (v55 <= v112)
        v222 = v112;
      else
        v222 = v55;
      if (v55 <= v158)
        v55 = v158;
      if (v144 > v112)
        v112 = v144;
      if (v221 > v112)
        v223 = 1;
      else
        v223 = 4;
      if (v221 <= v112)
        v112 = (uint64_t)(v49[1] - *v49) >> 2;
      if (v221 <= v55)
        v55 = v112;
      else
        v223 = 2;
      if (v221 <= v222)
      {
        v224 = v55;
      }
      else
      {
        v223 = 3;
        v224 = v222;
      }
      if (!v224)
        goto LABEL_332;
      v225 = *(_QWORD *)(v49[3] + 8 * (v224 - 1));
      if (v225 < 0x10)
        goto LABEL_332;
      switch(v223)
      {
        case 1:
          if (v224 == 2)
          {
            v1294 = *v51;
            if (*v51)
            {
              v1667 = 0;
              v1295 = 0;
              v1296 = 0;
              v1297 = *(_QWORD *)(v50 + 152);
              v1298 = v107[19];
              v1299 = (int)v225;
              v1300 = (float *)v49[19];
              do
              {
                if (v51[1])
                {
                  v1301 = 0;
                  do
                  {
                    __B = -1.0;
                    vDSP_vsmsa((const float *)((char *)v1298 + v1295), 1, &__B, (const float *)(v1297 + v1296), v1300, 1, v1299);
                    v50 = *a1;
                    v1302 = *(_QWORD **)(*a1 + 24);
                    v1303 = v1302[1];
                    v1296 += v1303;
                    v107 = (int **)*a2;
                    v1304 = *(int **)(*a2 + 24);
                    v1305 = *((_QWORD *)v1304 + 1);
                    v1295 += v1305;
                    v1300 = (float *)((char *)v1300 + v1299);
                    ++v1301;
                    v51 = *(int **)*a1;
                    v1306 = v51[1];
                  }
                  while (v1301 < v1306);
                  v1294 = *v51;
                  v108 = *v107;
                }
                else
                {
                  v1306 = 0;
                  v1302 = *(_QWORD **)(v50 + 24);
                  v1303 = v1302[1];
                  v1304 = v107[3];
                  v1305 = *((_QWORD *)v1304 + 1);
                }
                v1296 = *v1302 + v1296 - v1306 * v1303;
                v1295 = *(_QWORD *)v1304 + v1295 - v1305 * v108[1];
                ++v1667;
              }
              while (v1667 < v1294);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              v870 = 0;
              v871 = 0;
              v872 = 0;
              v873 = *(_QWORD *)(v50 + 152);
              v874 = v107[19];
              v875 = (int)v225;
              v876 = (float *)v49[19];
              do
              {
                __B = -1.0;
                vDSP_vsmsa((const float *)((char *)v874 + v871), 1, &__B, (const float *)(v873 + v872), v876, 1, v875);
                v872 += **(_QWORD **)(*a1 + 24);
                v871 += **(_QWORD **)(*a2 + 24);
                v876 = (float *)((char *)v876 + v875);
                ++v870;
              }
              while (v870 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            v1307 = 0;
            v1620 = v107[19];
            v1668 = *(_QWORD *)(v50 + 152);
            v1574 = (int)v225;
            v1308 = (float *)v49[19];
            do
            {
              v1309 = *(_QWORD *)*a1;
              v1310 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1309) >> 2;
              v1311 = 0;
              v1312 = (v1310 - 1);
              if ((int)v1310 - 1 >= 0)
              {
                v1313 = *(_QWORD *)(*a1 + 24);
                v1314 = v1307;
                do
                {
                  v1315 = ldiv(v1314, *(int *)(v1309 + 4 * v1312));
                  v1314 = v1315.quot;
                  v1311 += *(_QWORD *)(v1313 + 8 * v1312--) * v1315.rem;
                }
                while (v1312 != -1);
              }
              v1316 = *(_QWORD *)*a2;
              v1317 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1316) >> 2;
              v1318 = 0;
              v1319 = (v1317 - 1);
              if ((int)v1317 - 1 >= 0)
              {
                v1320 = *(_QWORD *)(*a2 + 24);
                v1321 = v1307;
                do
                {
                  v1322 = ldiv(v1321, *(int *)(v1316 + 4 * v1319));
                  v1321 = v1322.quot;
                  v1318 += *(_QWORD *)(v1320 + 8 * v1319--) * v1322.rem;
                }
                while (v1319 != -1);
              }
              __B = -1.0;
              vDSP_vsmsa((const float *)((char *)v1620 + (int)v1318), 1, &__B, (const float *)(v1668 + (int)v1311), v1308, 1, v1574);
              v1308 = (float *)((char *)v1308 + v1574);
              v1307 += v1574;
            }
            while (v1307 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v224 == 2)
          {
            v1323 = *v51;
            if (*v51)
            {
              v1324 = 0;
              v1325 = 0;
              v1326 = 0;
              v1327 = *(_QWORD *)(v50 + 152);
              v1328 = v107[19];
              v1329 = (int)v225;
              v1330 = (float *)v49[19];
              do
              {
                if (v51[1])
                {
                  v1331 = 0;
                  do
                  {
                    __B = (float)-*((char *)v1328 + v1325);
                    vDSP_vsadd((const float *)(v1327 + v1326), 1, &__B, v1330, 1, v1329);
                    v50 = *a1;
                    v1332 = *(_QWORD **)(*a1 + 24);
                    v1333 = v1332[1];
                    v1326 += v1333;
                    v107 = (int **)*a2;
                    v1334 = *(int **)(*a2 + 24);
                    v1335 = *((_QWORD *)v1334 + 1);
                    v1325 += v1335;
                    v1330 = (float *)((char *)v1330 + v1329);
                    ++v1331;
                    v51 = *(int **)*a1;
                    v1336 = v51[1];
                  }
                  while (v1331 < v1336);
                  v1323 = *v51;
                  v108 = *v107;
                }
                else
                {
                  v1336 = 0;
                  v1332 = *(_QWORD **)(v50 + 24);
                  v1333 = v1332[1];
                  v1334 = v107[3];
                  v1335 = *((_QWORD *)v1334 + 1);
                }
                v1326 = *v1332 + v1326 - v1336 * v1333;
                v1325 = *(_QWORD *)v1334 + v1325 - v1335 * v108[1];
                ++v1324;
              }
              while (v1324 < v1323);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              v877 = 0;
              v878 = 0;
              v879 = 0;
              v880 = *(_QWORD *)(v50 + 152);
              v881 = v107[19];
              v882 = (int)v225;
              v883 = (float *)v49[19];
              do
              {
                __B = (float)-*((char *)v881 + v878);
                vDSP_vsadd((const float *)(v880 + v879), 1, &__B, v883, 1, v882);
                v879 += **(_QWORD **)(*a1 + 24);
                v878 += **(_QWORD **)(*a2 + 24);
                v883 = (float *)((char *)v883 + v882);
                ++v877;
              }
              while (v877 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            v1337 = 0;
            v1621 = v107[19];
            v1669 = *(_QWORD *)(v50 + 152);
            v1575 = (int)v225;
            v1338 = (float *)v49[19];
            do
            {
              v1339 = *(_QWORD *)*a1;
              v1340 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1339) >> 2;
              v1341 = 0;
              v1342 = (v1340 - 1);
              if ((int)v1340 - 1 >= 0)
              {
                v1343 = *(_QWORD *)(*a1 + 24);
                v1344 = v1337;
                do
                {
                  v1345 = ldiv(v1344, *(int *)(v1339 + 4 * v1342));
                  v1344 = v1345.quot;
                  v1341 += *(_QWORD *)(v1343 + 8 * v1342--) * v1345.rem;
                }
                while (v1342 != -1);
              }
              v1346 = *(_QWORD *)*a2;
              v1347 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1346) >> 2;
              v1348 = 0;
              v1349 = (v1347 - 1);
              if ((int)v1347 - 1 >= 0)
              {
                v1350 = *(_QWORD *)(*a2 + 24);
                v1351 = v1337;
                do
                {
                  v1352 = ldiv(v1351, *(int *)(v1346 + 4 * v1349));
                  v1351 = v1352.quot;
                  v1348 += *(_QWORD *)(v1350 + 8 * v1349--) * v1352.rem;
                }
                while (v1349 != -1);
              }
              __B = (float)-*((char *)v1621 + (int)v1348);
              vDSP_vsadd((const float *)(v1669 + (int)v1341), 1, &__B, v1338, 1, v1575);
              v1338 = (float *)((char *)v1338 + v1575);
              v1337 += v1575;
            }
            while (v1337 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v224 == 2)
          {
            v1016 = *v51;
            if (*v51)
            {
              v1017 = 0;
              v1018 = 0;
              v1019 = 0;
              v1020 = *(_QWORD *)(v50 + 152);
              v1021 = v107[19];
              v1022 = (int)v225;
              v1023 = (float *)v49[19];
              do
              {
                if (v51[1])
                {
                  v1024 = 0;
                  do
                  {
                    vDSP_vsub((const float *)((char *)v1021 + v1018), 1, (const float *)(v1020 + v1019), 1, v1023, 1, v1022);
                    v50 = *a1;
                    v1025 = *(_QWORD **)(*a1 + 24);
                    v1026 = v1025[1];
                    v1019 += v1026;
                    v107 = (int **)*a2;
                    v1027 = *(int **)(*a2 + 24);
                    v1028 = *((_QWORD *)v1027 + 1);
                    v1018 += v1028;
                    v1023 = (float *)((char *)v1023 + v1022);
                    ++v1024;
                    v51 = *(int **)*a1;
                    v1029 = v51[1];
                  }
                  while (v1024 < v1029);
                  v1016 = *v51;
                  v108 = *v107;
                }
                else
                {
                  v1029 = 0;
                  v1025 = *(_QWORD **)(v50 + 24);
                  v1026 = v1025[1];
                  v1027 = v107[3];
                  v1028 = *((_QWORD *)v1027 + 1);
                }
                v1019 = *v1025 + v1019 - v1029 * v1026;
                v1018 = *(_QWORD *)v1027 + v1018 - v1028 * v108[1];
                ++v1017;
              }
              while (v1017 < v1016);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              v226 = 0;
              v227 = 0;
              v228 = 0;
              v229 = *(_QWORD *)(v50 + 152);
              v230 = v107[19];
              v231 = (int)v225;
              v232 = (float *)v49[19];
              do
              {
                vDSP_vsub((const float *)((char *)v230 + v227), 1, (const float *)(v229 + v228), 1, v232, 1, v231);
                v228 += **(_QWORD **)(*a1 + 24);
                v227 += **(_QWORD **)(*a2 + 24);
                v232 = (float *)((char *)v232 + v231);
                ++v226;
              }
              while (v226 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            v1030 = 0;
            v1603 = v107[19];
            v1649 = *(_QWORD *)(v50 + 152);
            v1557 = (int)v225;
            v1031 = (float *)v49[19];
            do
            {
              v1032 = *(_QWORD *)*a1;
              v1033 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1032) >> 2;
              v1034 = 0;
              v1035 = (v1033 - 1);
              if ((int)v1033 - 1 >= 0)
              {
                v1036 = *(_QWORD *)(*a1 + 24);
                v1037 = v1030;
                do
                {
                  v1038 = ldiv(v1037, *(int *)(v1032 + 4 * v1035));
                  v1037 = v1038.quot;
                  v1034 += *(_QWORD *)(v1036 + 8 * v1035--) * v1038.rem;
                }
                while (v1035 != -1);
              }
              v1039 = *(_QWORD *)*a2;
              v1040 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1039) >> 2;
              v1041 = 0;
              v1042 = (v1040 - 1);
              if ((int)v1040 - 1 >= 0)
              {
                v1043 = *(_QWORD *)(*a2 + 24);
                v1044 = v1030;
                do
                {
                  v1045 = ldiv(v1044, *(int *)(v1039 + 4 * v1042));
                  v1044 = v1045.quot;
                  v1041 += *(_QWORD *)(v1043 + 8 * v1042--) * v1045.rem;
                }
                while (v1042 != -1);
              }
              vDSP_vsub((const float *)((char *)v1603 + (int)v1041), 1, (const float *)(v1649 + (int)v1034), 1, v1031, 1, v1557);
              v1031 = (float *)((char *)v1031 + v1557);
              v1030 += v1557;
            }
            while (v1030 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_332:
          switch(v221)
          {
            case 1uLL:
              if (v49[6])
              {
                v233 = 0;
                v234 = 0;
                v235 = 0;
                v236 = *(_QWORD *)(v50 + 152);
                v237 = v107[19];
                v238 = v49[19];
                do
                {
                  *(_BYTE *)(v238 + v233) = *(_BYTE *)(v236 + v235) - *((_BYTE *)v237 + v234);
                  v235 += **(_QWORD **)(*a1 + 24);
                  v234 += **(_QWORD **)(*a2 + 24);
                  ++v233;
                }
                while (v233 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v537 = *v51;
              if (*v51)
              {
                v538 = 0;
                v539 = 0;
                v540 = 0;
                v541 = 0;
                v542 = *(_QWORD *)(v50 + 152);
                v543 = v107[19];
                v544 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    v545 = 0;
                    do
                    {
                      *(_BYTE *)(v544 + v539 + v545) = *(_BYTE *)(v542 + v541) - *((_BYTE *)v543 + v540);
                      v50 = *a1;
                      v546 = *(_QWORD **)(*a1 + 24);
                      v547 = v546[1];
                      v541 += v547;
                      v107 = (int **)*a2;
                      v548 = *(int **)(*a2 + 24);
                      v549 = *((_QWORD *)v548 + 1);
                      v540 += v549;
                      ++v545;
                      v51 = *(int **)*a1;
                      v550 = v51[1];
                    }
                    while (v545 < v550);
                    v537 = *v51;
                    v108 = *v107;
                    v539 += v545;
                  }
                  else
                  {
                    v550 = 0;
                    v546 = *(_QWORD **)(v50 + 24);
                    v547 = v546[1];
                    v548 = v107[3];
                    v549 = *((_QWORD *)v548 + 1);
                  }
                  v541 = *v546 + v541 - v550 * v547;
                  v540 = *(_QWORD *)v548 + v540 - v549 * v108[1];
                  ++v538;
                }
                while (v538 < v537);
              }
              break;
            case 3uLL:
              v551 = *v51;
              if (*v51)
              {
                v552 = 0;
                v553 = 0;
                v554 = 0;
                v555 = 0;
                v556 = *(_QWORD *)(v50 + 152);
                v557 = v107[19];
                v558 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    v559 = 0;
                    do
                    {
                      if (v51[2])
                      {
                        v560 = 0;
                        do
                        {
                          *(_BYTE *)(v558 + v553 + v560) = *(_BYTE *)(v556 + v555) - *((_BYTE *)v557 + v554);
                          v50 = *a1;
                          v561 = *(_QWORD **)(*a1 + 24);
                          v562 = v561[2];
                          v555 += v562;
                          v107 = (int **)*a2;
                          v563 = *(int **)(*a2 + 24);
                          v564 = *((_QWORD *)v563 + 2);
                          v554 += v564;
                          ++v560;
                          v51 = *(int **)*a1;
                          v565 = v51[2];
                        }
                        while (v560 < v565);
                        v108 = *v107;
                        v553 += v560;
                      }
                      else
                      {
                        v565 = 0;
                        v561 = *(_QWORD **)(v50 + 24);
                        v562 = v561[2];
                        v563 = v107[3];
                        v564 = *((_QWORD *)v563 + 2);
                      }
                      v566 = v561[1];
                      v555 = v566 + v555 - v565 * v562;
                      v554 = *((_QWORD *)v563 + 1) + v554 - v564 * v108[2];
                      ++v559;
                      v567 = v51[1];
                    }
                    while (v559 < v567);
                    v551 = *v51;
                  }
                  else
                  {
                    v567 = 0;
                    v561 = *(_QWORD **)(v50 + 24);
                    v566 = v561[1];
                  }
                  v555 = *v561 + v555 - v567 * v566;
                  v554 = *(_QWORD *)v107[3] + v554 - *((_QWORD *)v107[3] + 1) * v108[1];
                  ++v552;
                }
                while (v552 < v551);
              }
              break;
            case 4uLL:
              v568 = *v51;
              if (*v51)
              {
                v569 = 0;
                v570 = 0;
                v571 = 0;
                v572 = 0;
                v573 = *(_QWORD *)(v50 + 152);
                v574 = v107[19];
                v575 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    v576 = 0;
                    do
                    {
                      if (v51[2])
                      {
                        v577 = 0;
                        do
                        {
                          if (v51[3])
                          {
                            v578 = 0;
                            do
                            {
                              *(_BYTE *)(v575 + v570 + v578) = *(_BYTE *)(v573 + v572) - *((_BYTE *)v574 + v571);
                              v50 = *a1;
                              v579 = *(_QWORD **)(*a1 + 24);
                              v580 = v579[3];
                              v572 += v580;
                              v107 = (int **)*a2;
                              v581 = *(int **)(*a2 + 24);
                              v582 = *((_QWORD *)v581 + 3);
                              v571 += v582;
                              ++v578;
                              v51 = *(int **)*a1;
                              v583 = v51[3];
                            }
                            while (v578 < v583);
                            v108 = *v107;
                            v570 += v578;
                          }
                          else
                          {
                            v583 = 0;
                            v579 = *(_QWORD **)(v50 + 24);
                            v580 = v579[3];
                            v581 = v107[3];
                            v582 = *((_QWORD *)v581 + 3);
                          }
                          v584 = v579[2];
                          v572 = v584 + v572 - v583 * v580;
                          v571 = *((_QWORD *)v581 + 2) + v571 - v582 * v108[3];
                          ++v577;
                          v585 = v51[2];
                        }
                        while (v577 < v585);
                      }
                      else
                      {
                        v585 = 0;
                        v579 = *(_QWORD **)(v50 + 24);
                        v584 = v579[2];
                      }
                      v572 = v579[1] + v572 - v585 * v584;
                      v571 = *((_QWORD *)v107[3] + 1) + v571 - *((_QWORD *)v107[3] + 2) * v108[2];
                      ++v576;
                      v586 = v51[1];
                    }
                    while (v576 < v586);
                    v568 = *v51;
                  }
                  else
                  {
                    v586 = 0;
                  }
                  v572 = **(_QWORD **)(v50 + 24) + v572 - *(_QWORD *)(*(_QWORD *)(v50 + 24) + 8) * v586;
                  v571 = *(_QWORD *)v107[3] + v571 - *((_QWORD *)v107[3] + 1) * v108[1];
                  ++v569;
                }
                while (v569 < v568);
              }
              break;
            default:
              if (v49[6])
              {
                v521 = 0;
                v1592 = v107[19];
                v1638 = *(_QWORD *)(v50 + 152);
                v522 = v49[19];
                do
                {
                  v523 = *(_QWORD *)*a1;
                  v524 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v523) >> 2;
                  v525 = 0;
                  v526 = (v524 - 1);
                  if ((int)v524 - 1 >= 0)
                  {
                    v527 = *(_QWORD *)(*a1 + 24);
                    v528 = v521;
                    do
                    {
                      v529 = ldiv(v528, *(int *)(v523 + 4 * v526));
                      v528 = v529.quot;
                      v525 += *(_QWORD *)(v527 + 8 * v526--) * v529.rem;
                    }
                    while (v526 != -1);
                  }
                  v530 = *(_QWORD *)*a2;
                  v531 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v530) >> 2;
                  v532 = 0;
                  v533 = (v531 - 1);
                  if ((int)v531 - 1 >= 0)
                  {
                    v534 = *(_QWORD *)(*a2 + 24);
                    v535 = v521;
                    do
                    {
                      v536 = ldiv(v535, *(int *)(v530 + 4 * v533));
                      v535 = v536.quot;
                      v532 += *(_QWORD *)(v534 + 8 * v533--) * v536.rem;
                    }
                    while (v533 != -1);
                  }
                  *(_BYTE *)(v522 + v521++) = *(_BYTE *)(v1638 + (int)v525) - *((_BYTE *)v1592 + (int)v532);
                }
                while (v521 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v16)
      {
        case 0:
LABEL_12:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          goto LABEL_17;
        case 2:
          v9 = *(float **)(*(_QWORD *)a3 + 152);
          v10 = *(const float **)(*a1 + 152);
          v11 = *(_QWORD *)(*a1 + 160);
          v12 = **(_DWORD **)(*a2 + 152);
LABEL_54:
          v14 = (float)-v12;
          goto LABEL_55;
        case 3:
          goto LABEL_18;
        default:
          v57 = *(_QWORD **)a3;
          v58 = *a1;
          v59 = *(int **)*a1;
          v60 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v59) >> 2;
          v61 = (v60 - 1);
          if ((int)v61 >= -1)
            v62 = -1;
          else
            v62 = v60 - 1;
          v63 = v62 + 1;
          v64 = v60 + 1;
          break;
      }
      while (1)
      {
        v65 = v64 - 2;
        if (v64 - 2 < 0)
          break;
        --v64;
        if (*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v65) != *(_QWORD *)(v57[3] + 8 * v65))
          goto LABEL_104;
      }
      v64 = v63;
LABEL_104:
      v114 = (int **)*a2;
      v115 = *(int **)*a2;
      v116 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v115) >> 2;
      v117 = (v116 - 1);
      if ((int)v117 >= -1)
        v118 = -1;
      else
        v118 = v116 - 1;
      v119 = v118 + 1;
      v120 = v116 + 1;
      while (1)
      {
        v121 = v120 - 2;
        if (v120 - 2 < 0)
          break;
        --v120;
        if (*(_QWORD *)&v114[3][2 * v121] != *(_QWORD *)(v57[3] + 8 * v121))
          goto LABEL_148;
      }
      v120 = v119;
LABEL_148:
      v146 = v60 + 1;
      while (1)
      {
        v147 = v146 - 2;
        if (v146 - 2 < 0)
          break;
        --v146;
        if (*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v147))
          goto LABEL_183;
      }
      v146 = v63;
LABEL_183:
      v160 = v116 + 1;
      while (1)
      {
        v161 = v160 - 2;
        if (v160 - 2 < 0)
          break;
        --v160;
        if (*(_QWORD *)&v114[3][2 * v161])
          goto LABEL_338;
      }
      v160 = v119;
LABEL_338:
      v239 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v64 <= v120)
        v240 = v120;
      else
        v240 = v64;
      if (v64 <= v160)
        v64 = v160;
      if (v146 > v120)
        v120 = v146;
      if (v239 > v120)
        v241 = 1;
      else
        v241 = 4;
      if (v239 <= v120)
        v120 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v239 <= v64)
        v64 = v120;
      else
        v241 = 2;
      if (v239 <= v240)
      {
        v242 = v64;
      }
      else
      {
        v241 = 3;
        v242 = v240;
      }
      if (!v242)
        goto LABEL_367;
      v243 = *(_QWORD *)(v57[3] + 8 * (v242 - 1));
      if (v243 < 0x10)
        goto LABEL_367;
      switch(v241)
      {
        case 1:
          if (v242 == 2)
          {
            v1353 = *v59;
            if (*v59)
            {
              v1354 = 0;
              v1355 = 0;
              v1670 = *(_QWORD *)(v58 + 152);
              v1622 = v114[19];
              v1356 = (float *)v57[19];
              v1538 = 0;
              v1576 = (int)v243;
              v1357 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  v1358 = 0;
                  do
                  {
                    __B = -1.0;
                    vDSP_vsmsa((const float *)&v1622[v1354], 1, &__B, (const float *)(v1670 + 4 * v1355), v1356, 1, v1576);
                    v58 = *a1;
                    v1359 = *(_QWORD **)(*a1 + 24);
                    v1360 = v1359[1];
                    v1355 += v1360;
                    v114 = (int **)*a2;
                    v1361 = *(int **)(*a2 + 24);
                    v1362 = *((_QWORD *)v1361 + 1);
                    v1354 += v1362;
                    ++v1358;
                    v59 = *(int **)*a1;
                    v1363 = v59[1];
                    v1356 = (float *)((char *)v1356 + v1357);
                  }
                  while (v1358 < v1363);
                  v1353 = *v59;
                  v115 = *v114;
                }
                else
                {
                  v1363 = 0;
                  v1359 = *(_QWORD **)(v58 + 24);
                  v1360 = v1359[1];
                  v1361 = v114[3];
                  v1362 = *((_QWORD *)v1361 + 1);
                }
                v1355 = *v1359 + v1355 - v1363 * v1360;
                v1354 = *(_QWORD *)v1361 + v1354 - v1362 * v115[1];
                ++v1538;
              }
              while (v1538 < v1353);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              v884 = 0;
              v885 = 0;
              v886 = 0;
              v887 = *(_QWORD *)(v58 + 152);
              v888 = v114[19];
              v889 = (int)v243;
              v890 = 4 * (int)v243;
              v891 = (float *)v57[19];
              do
              {
                __B = -1.0;
                vDSP_vsmsa((const float *)&v888[v885], 1, &__B, (const float *)(v887 + 4 * v886), v891, 1, v889);
                v886 += **(_QWORD **)(*a1 + 24);
                v885 += **(_QWORD **)(*a2 + 24);
                ++v884;
                v891 = (float *)((char *)v891 + v890);
              }
              while (v884 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            v1364 = 0;
            v1623 = v114[19];
            v1671 = *(_QWORD *)(v58 + 152);
            v1577 = (int)v243;
            v1365 = (float *)v57[19];
            do
            {
              v1366 = *(_QWORD *)*a1;
              v1367 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1366) >> 2;
              v1368 = 0;
              v1369 = (v1367 - 1);
              if ((int)v1367 - 1 >= 0)
              {
                v1370 = *(_QWORD *)(*a1 + 24);
                v1371 = v1364;
                do
                {
                  v1372 = ldiv(v1371, *(int *)(v1366 + 4 * v1369));
                  v1371 = v1372.quot;
                  v1368 += *(_QWORD *)(v1370 + 8 * v1369--) * v1372.rem;
                }
                while (v1369 != -1);
              }
              v1373 = *(_QWORD *)*a2;
              v1374 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1373) >> 2;
              v1375 = 0;
              v1376 = (v1374 - 1);
              if ((int)v1374 - 1 >= 0)
              {
                v1377 = *(_QWORD *)(*a2 + 24);
                v1378 = v1364;
                do
                {
                  v1379 = ldiv(v1378, *(int *)(v1373 + 4 * v1376));
                  v1378 = v1379.quot;
                  v1375 += *(_QWORD *)(v1377 + 8 * v1376--) * v1379.rem;
                }
                while (v1376 != -1);
              }
              __B = -1.0;
              vDSP_vsmsa((const float *)&v1623[(int)v1375], 1, &__B, (const float *)(v1671 + 4 * (int)v1368), v1365, 1, v1577);
              v1365 += v1577;
              v1364 += v1577;
            }
            while (v1364 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v242 == 2)
          {
            v1380 = *v59;
            if (*v59)
            {
              v1381 = 0;
              v1382 = 0;
              v1672 = *(_QWORD *)(v58 + 152);
              v1624 = v114[19];
              v1383 = (float *)v57[19];
              v1539 = 0;
              v1578 = (int)v243;
              v1384 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  v1385 = 0;
                  do
                  {
                    __B = (float)-v1624[v1381];
                    vDSP_vsadd((const float *)(v1672 + 4 * v1382), 1, &__B, v1383, 1, v1578);
                    v58 = *a1;
                    v1386 = *(_QWORD **)(*a1 + 24);
                    v1387 = v1386[1];
                    v1382 += v1387;
                    v114 = (int **)*a2;
                    v1388 = *(int **)(*a2 + 24);
                    v1389 = *((_QWORD *)v1388 + 1);
                    v1381 += v1389;
                    ++v1385;
                    v59 = *(int **)*a1;
                    v1390 = v59[1];
                    v1383 = (float *)((char *)v1383 + v1384);
                  }
                  while (v1385 < v1390);
                  v1380 = *v59;
                  v115 = *v114;
                }
                else
                {
                  v1390 = 0;
                  v1386 = *(_QWORD **)(v58 + 24);
                  v1387 = v1386[1];
                  v1388 = v114[3];
                  v1389 = *((_QWORD *)v1388 + 1);
                }
                v1382 = *v1386 + v1382 - v1390 * v1387;
                v1381 = *(_QWORD *)v1388 + v1381 - v1389 * v115[1];
                ++v1539;
              }
              while (v1539 < v1380);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              v892 = 0;
              v893 = 0;
              v894 = 0;
              v895 = *(_QWORD *)(v58 + 152);
              v896 = v114[19];
              v897 = (int)v243;
              v898 = 4 * (int)v243;
              v899 = (float *)v57[19];
              do
              {
                __B = (float)-v896[v893];
                vDSP_vsadd((const float *)(v895 + 4 * v894), 1, &__B, v899, 1, v897);
                v894 += **(_QWORD **)(*a1 + 24);
                v893 += **(_QWORD **)(*a2 + 24);
                ++v892;
                v899 = (float *)((char *)v899 + v898);
              }
              while (v892 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            v1391 = 0;
            v1625 = v114[19];
            v1673 = *(_QWORD *)(v58 + 152);
            v1579 = (int)v243;
            v1392 = (float *)v57[19];
            do
            {
              v1393 = *(_QWORD *)*a1;
              v1394 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1393) >> 2;
              v1395 = 0;
              v1396 = (v1394 - 1);
              if ((int)v1394 - 1 >= 0)
              {
                v1397 = *(_QWORD *)(*a1 + 24);
                v1398 = v1391;
                do
                {
                  v1399 = ldiv(v1398, *(int *)(v1393 + 4 * v1396));
                  v1398 = v1399.quot;
                  v1395 += *(_QWORD *)(v1397 + 8 * v1396--) * v1399.rem;
                }
                while (v1396 != -1);
              }
              v1400 = *(_QWORD *)*a2;
              v1401 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1400) >> 2;
              v1402 = 0;
              v1403 = (v1401 - 1);
              if ((int)v1401 - 1 >= 0)
              {
                v1404 = *(_QWORD *)(*a2 + 24);
                v1405 = v1391;
                do
                {
                  v1406 = ldiv(v1405, *(int *)(v1400 + 4 * v1403));
                  v1405 = v1406.quot;
                  v1402 += *(_QWORD *)(v1404 + 8 * v1403--) * v1406.rem;
                }
                while (v1403 != -1);
              }
              __B = (float)-v1625[(int)v1402];
              vDSP_vsadd((const float *)(v1673 + 4 * (int)v1395), 1, &__B, v1392, 1, v1579);
              v1392 += v1579;
              v1391 += v1579;
            }
            while (v1391 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v242 == 2)
          {
            v1046 = *v59;
            if (*v59)
            {
              v1047 = 0;
              v1048 = 0;
              v1650 = *(_QWORD *)(v58 + 152);
              v1604 = v114[19];
              v1049 = (float *)v57[19];
              v1533 = 0;
              v1558 = (int)v243;
              v1050 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  v1051 = 0;
                  do
                  {
                    vDSP_vsub((const float *)&v1604[v1047], 1, (const float *)(v1650 + 4 * v1048), 1, v1049, 1, v1558);
                    v58 = *a1;
                    v1052 = *(_QWORD **)(*a1 + 24);
                    v1053 = v1052[1];
                    v1048 += v1053;
                    v114 = (int **)*a2;
                    v1054 = *(int **)(*a2 + 24);
                    v1055 = *((_QWORD *)v1054 + 1);
                    v1047 += v1055;
                    ++v1051;
                    v59 = *(int **)*a1;
                    v1056 = v59[1];
                    v1049 = (float *)((char *)v1049 + v1050);
                  }
                  while (v1051 < v1056);
                  v1046 = *v59;
                  v115 = *v114;
                }
                else
                {
                  v1056 = 0;
                  v1052 = *(_QWORD **)(v58 + 24);
                  v1053 = v1052[1];
                  v1054 = v114[3];
                  v1055 = *((_QWORD *)v1054 + 1);
                }
                v1048 = *v1052 + v1048 - v1056 * v1053;
                v1047 = *(_QWORD *)v1054 + v1047 - v1055 * v115[1];
                ++v1533;
              }
              while (v1533 < v1046);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              v244 = 0;
              v245 = 0;
              v246 = 0;
              v247 = *(_QWORD *)(v58 + 152);
              v248 = v114[19];
              v249 = (int)v243;
              v250 = 4 * (int)v243;
              v251 = (float *)v57[19];
              do
              {
                vDSP_vsub((const float *)&v248[v245], 1, (const float *)(v247 + 4 * v246), 1, v251, 1, v249);
                v246 += **(_QWORD **)(*a1 + 24);
                v245 += **(_QWORD **)(*a2 + 24);
                ++v244;
                v251 = (float *)((char *)v251 + v250);
              }
              while (v244 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            v1057 = 0;
            v1605 = v114[19];
            v1651 = *(_QWORD *)(v58 + 152);
            v1559 = (int)v243;
            v1058 = (float *)v57[19];
            do
            {
              v1059 = *(_QWORD *)*a1;
              v1060 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1059) >> 2;
              v1061 = 0;
              v1062 = (v1060 - 1);
              if ((int)v1060 - 1 >= 0)
              {
                v1063 = *(_QWORD *)(*a1 + 24);
                v1064 = v1057;
                do
                {
                  v1065 = ldiv(v1064, *(int *)(v1059 + 4 * v1062));
                  v1064 = v1065.quot;
                  v1061 += *(_QWORD *)(v1063 + 8 * v1062--) * v1065.rem;
                }
                while (v1062 != -1);
              }
              v1066 = *(_QWORD *)*a2;
              v1067 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1066) >> 2;
              v1068 = 0;
              v1069 = (v1067 - 1);
              if ((int)v1067 - 1 >= 0)
              {
                v1070 = *(_QWORD *)(*a2 + 24);
                v1071 = v1057;
                do
                {
                  v1072 = ldiv(v1071, *(int *)(v1066 + 4 * v1069));
                  v1071 = v1072.quot;
                  v1068 += *(_QWORD *)(v1070 + 8 * v1069--) * v1072.rem;
                }
                while (v1069 != -1);
              }
              vDSP_vsub((const float *)&v1605[(int)v1068], 1, (const float *)(v1651 + 4 * (int)v1061), 1, v1058, 1, v1559);
              v1058 += v1559;
              v1057 += v1559;
            }
            while (v1057 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_367:
          switch(v239)
          {
            case 1uLL:
              v252 = v57[6];
              if (v252)
              {
                v253 = *(_DWORD **)(v58 + 152);
                v254 = v114[19];
                v255 = (_DWORD *)v57[19];
                v256 = 4 * *(_QWORD *)v114[3];
                v257 = 4 * **(_QWORD **)(v58 + 24);
                do
                {
                  *v255++ = *v253 - *v254;
                  v254 = (int *)((char *)v254 + v256);
                  v253 = (_DWORD *)((char *)v253 + v257);
                  --v252;
                }
                while (v252);
              }
              break;
            case 2uLL:
              v598 = *v59;
              if (*v59)
              {
                v599 = 0;
                v600 = 0;
                v601 = 0;
                v602 = 0;
                v603 = *(_QWORD *)(v58 + 152);
                v604 = v114[19];
                v605 = v57[19];
                v606 = *(uint64_t **)(v58 + 24);
                v607 = *v606;
                v608 = v606[1];
                v609 = v114[3];
                v611 = *(_QWORD *)v609;
                v610 = *((_QWORD *)v609 + 1);
                v612 = v59[1];
                do
                {
                  if (v612)
                  {
                    for (m = 0; m < v612; ++m)
                    {
                      *(_DWORD *)(v605 + 4 * v600 + 4 * m) = *(_DWORD *)(v603 + 4 * v602) - v604[v601];
                      v602 += v608;
                      v601 += v610;
                      v612 = v59[1];
                    }
                    v614 = v612;
                    v598 = *v59;
                    v600 += m;
                  }
                  else
                  {
                    v614 = 0;
                  }
                  v602 = v602 + v607 - v614 * v608;
                  v601 = v601 + v611 - v610 * v115[1];
                  ++v599;
                }
                while (v599 < v598);
              }
              break;
            case 3uLL:
              v615 = *v59;
              if (*v59)
              {
                v616 = 0;
                v617 = 0;
                v618 = 0;
                v619 = 0;
                v620 = *(_QWORD *)(v58 + 152);
                v621 = v114[19];
                v622 = v57[19];
                v623 = *(uint64_t **)(v58 + 24);
                v624 = *v623;
                v625 = v623[1];
                v626 = v114[3];
                v627 = *(_QWORD *)v626;
                v628 = *((_QWORD *)v626 + 1);
                v629 = v59[1];
                v630 = v629;
                do
                {
                  if (v630)
                  {
                    v631 = 0;
                    v632 = v623[2];
                    v633 = *((_QWORD *)v626 + 2);
                    v634 = v59[2];
                    do
                    {
                      if (v634)
                      {
                        for (n = 0; n < v634; ++n)
                        {
                          *(_DWORD *)(v622 + 4 * v617 + 4 * n) = *(_DWORD *)(v620 + 4 * v619) - v621[v618];
                          v619 += v632;
                          v618 += v633;
                          v634 = v59[2];
                        }
                        v636 = v634;
                        v629 = v59[1];
                        v617 += n;
                      }
                      else
                      {
                        v636 = 0;
                      }
                      v619 = v619 + v625 - v636 * v632;
                      v618 = v618 + v628 - v633 * v115[2];
                      ++v631;
                    }
                    while (v631 < v629);
                    v637 = v629;
                    v615 = *v59;
                    v630 = v629;
                  }
                  else
                  {
                    v637 = 0;
                  }
                  v619 = v619 + v624 - v637 * v625;
                  v618 = v618 + v627 - v628 * v115[1];
                  ++v616;
                }
                while (v616 < v615);
              }
              break;
            case 4uLL:
              v638 = *v59;
              if (*v59)
              {
                v639 = 0;
                v640 = 0;
                v641 = 0;
                v642 = 0;
                v643 = *(_QWORD *)(v58 + 152);
                v644 = v114[19];
                v645 = v57[19];
                v646 = *(uint64_t **)(v58 + 24);
                v647 = *v646;
                v648 = v646[1];
                v649 = v114[3];
                v650 = *(_QWORD *)v649;
                v651 = *((_QWORD *)v649 + 1);
                v652 = v59[1];
                v653 = v652;
                do
                {
                  if (v653)
                  {
                    v654 = 0;
                    v655 = v646[2];
                    v656 = *((_QWORD *)v649 + 2);
                    v657 = v59[2];
                    v658 = v657;
                    do
                    {
                      if (v658)
                      {
                        v659 = 0;
                        v660 = v646[3];
                        v661 = *((_QWORD *)v649 + 3);
                        v662 = v59[3];
                        do
                        {
                          if (v662)
                          {
                            for (ii = 0; ii < v662; ++ii)
                            {
                              *(_DWORD *)(v645 + 4 * v640 + 4 * ii) = *(_DWORD *)(v643 + 4 * v642) - v644[v641];
                              v642 += v660;
                              v641 += v661;
                              v662 = v59[3];
                            }
                            v664 = v662;
                            v657 = v59[2];
                            v640 += ii;
                          }
                          else
                          {
                            v664 = 0;
                          }
                          v642 = v642 + v655 - v664 * v660;
                          v641 = v641 + v656 - v661 * v115[3];
                          ++v659;
                        }
                        while (v659 < v657);
                        v665 = v657;
                        v652 = v59[1];
                        v658 = v657;
                      }
                      else
                      {
                        v665 = 0;
                      }
                      v642 = v642 + v648 - v665 * v655;
                      v641 = v641 + v651 - v656 * v115[2];
                      ++v654;
                    }
                    while (v654 < v652);
                    v666 = v652;
                    v638 = *v59;
                    v653 = v652;
                  }
                  else
                  {
                    v666 = 0;
                  }
                  v642 = v642 + v647 - v666 * v648;
                  v641 = v641 + v650 - v651 * v115[1];
                  ++v639;
                }
                while (v639 < v638);
              }
              break;
            default:
              v1593 = v57[6];
              v1639 = v61;
              if (v1593)
              {
                v587 = 0;
                v1527 = v114[19];
                v1547 = *(_QWORD *)(v58 + 152);
                v1520 = v57[19];
                do
                {
                  v588 = v1639;
                  if ((v1639 & 0x80000000) != 0)
                  {
                    LODWORD(v589) = 0;
                  }
                  else
                  {
                    v589 = 0;
                    v590 = *(_QWORD *)(v58 + 24);
                    v591 = v587;
                    do
                    {
                      v592 = ldiv(v591, v59[v588]);
                      v591 = v592.quot;
                      v589 += *(_QWORD *)(v590 + 8 * v588--) * v592.rem;
                    }
                    while (v588 != -1);
                  }
                  v593 = 0;
                  if ((v117 & 0x80000000) == 0)
                  {
                    v594 = v114[3];
                    v595 = v117;
                    v596 = v587;
                    do
                    {
                      v597 = ldiv(v596, v115[v595]);
                      v596 = v597.quot;
                      v593 += *(_QWORD *)&v594[2 * v595--] * v597.rem;
                    }
                    while (v595 != -1);
                  }
                  *(_DWORD *)(v1520 + 4 * v587++) = *(_DWORD *)(v1547 + 4 * (int)v589) - v1527[(int)v593];
                }
                while (v587 != v1593);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v17)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a1 + 152) - **(_QWORD **)(*a2 + 152);
          return;
        case 1:
          goto LABEL_17;
        case 2:
          v9 = *(float **)(*(_QWORD *)a3 + 152);
          v10 = *(const float **)(*a1 + 152);
          v11 = *(_QWORD *)(*a1 + 160);
          v14 = (float)(uint64_t)-**(_QWORD **)(*a2 + 152);
          goto LABEL_55;
        case 3:
          goto LABEL_18;
        default:
          v66 = *(_QWORD **)a3;
          v67 = *a1;
          v68 = *(int **)*a1;
          v69 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v68) >> 2;
          v70 = (v69 - 1);
          if ((int)v70 >= -1)
            v71 = -1;
          else
            v71 = v69 - 1;
          v72 = v71 + 1;
          v73 = v69 + 1;
          break;
      }
      while (1)
      {
        v74 = v73 - 2;
        if (v73 - 2 < 0)
          break;
        --v73;
        if (*(_QWORD *)(*(_QWORD *)(v67 + 24) + 8 * v74) != *(_QWORD *)(v66[3] + 8 * v74))
          goto LABEL_112;
      }
      v73 = v72;
LABEL_112:
      v122 = (int **)*a2;
      v123 = *(int **)*a2;
      v124 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v123) >> 2;
      v125 = (v124 - 1);
      if ((int)v125 >= -1)
        v126 = -1;
      else
        v126 = v124 - 1;
      v127 = v126 + 1;
      v128 = v124 + 1;
      while (1)
      {
        v129 = v128 - 2;
        if (v128 - 2 < 0)
          break;
        --v128;
        if (*(_QWORD *)&v122[3][2 * v129] != *(_QWORD *)(v66[3] + 8 * v129))
          goto LABEL_153;
      }
      v128 = v127;
LABEL_153:
      v148 = v69 + 1;
      while (1)
      {
        v149 = v148 - 2;
        if (v148 - 2 < 0)
          break;
        --v148;
        if (*(_QWORD *)(*(_QWORD *)(v67 + 24) + 8 * v149))
          goto LABEL_188;
      }
      v148 = v72;
LABEL_188:
      v162 = v124 + 1;
      while (1)
      {
        v163 = v162 - 2;
        if (v162 - 2 < 0)
          break;
        --v162;
        if (*(_QWORD *)&v122[3][2 * v163])
          goto LABEL_373;
      }
      v162 = v127;
LABEL_373:
      v258 = (uint64_t)(v66[1] - *v66) >> 2;
      if (v73 <= v128)
        v259 = v128;
      else
        v259 = v73;
      if (v73 <= v162)
        v73 = v162;
      if (v148 > v128)
        v128 = v148;
      if (v258 > v128)
        v260 = 1;
      else
        v260 = 4;
      if (v258 <= v128)
        v128 = (uint64_t)(v66[1] - *v66) >> 2;
      if (v258 <= v73)
        v73 = v128;
      else
        v260 = 2;
      if (v258 <= v259)
      {
        v261 = v73;
      }
      else
      {
        v260 = 3;
        v261 = v259;
      }
      if (!v261)
        goto LABEL_402;
      v262 = *(_QWORD *)(v66[3] + 8 * (v261 - 1));
      if (v262 < 0x10)
        goto LABEL_402;
      switch(v260)
      {
        case 1:
          if (v261 == 2)
          {
            v1407 = *v68;
            if (*v68)
            {
              v1408 = 0;
              v1409 = 0;
              v1674 = *(_QWORD *)(v67 + 152);
              v1626 = v122[19];
              v1410 = (float *)v66[19];
              v1540 = 0;
              v1580 = (int)v262;
              v1411 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  v1412 = 0;
                  do
                  {
                    __B = -1.0;
                    vDSP_vsmsa((const float *)&v1626[2 * v1408], 1, &__B, (const float *)(v1674 + 8 * v1409), v1410, 1, v1580);
                    v67 = *a1;
                    v1413 = *(_QWORD **)(*a1 + 24);
                    v1414 = v1413[1];
                    v1409 += v1414;
                    v122 = (int **)*a2;
                    v1415 = *(int **)(*a2 + 24);
                    v1416 = *((_QWORD *)v1415 + 1);
                    v1408 += v1416;
                    ++v1412;
                    v68 = *(int **)*a1;
                    v1417 = v68[1];
                    v1410 = (float *)((char *)v1410 + v1411);
                  }
                  while (v1412 < v1417);
                  v1407 = *v68;
                  v123 = *v122;
                }
                else
                {
                  v1417 = 0;
                  v1413 = *(_QWORD **)(v67 + 24);
                  v1414 = v1413[1];
                  v1415 = v122[3];
                  v1416 = *((_QWORD *)v1415 + 1);
                }
                v1409 = *v1413 + v1409 - v1417 * v1414;
                v1408 = *(_QWORD *)v1415 + v1408 - v1416 * v123[1];
                ++v1540;
              }
              while (v1540 < v1407);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              v900 = 0;
              v901 = 0;
              v902 = 0;
              v903 = *(_QWORD *)(v67 + 152);
              v904 = v122[19];
              v905 = (int)v262;
              v906 = 8 * (int)v262;
              v907 = (float *)v66[19];
              do
              {
                __B = -1.0;
                vDSP_vsmsa((const float *)&v904[2 * v901], 1, &__B, (const float *)(v903 + 8 * v902), v907, 1, v905);
                v902 += **(_QWORD **)(*a1 + 24);
                v901 += **(_QWORD **)(*a2 + 24);
                ++v900;
                v907 = (float *)((char *)v907 + v906);
              }
              while (v900 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            v1418 = 0;
            v1627 = v122[19];
            v1675 = *(_QWORD *)(v67 + 152);
            v1581 = (int)v262;
            v1419 = (float *)v66[19];
            do
            {
              v1420 = *(_QWORD *)*a1;
              v1421 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1420) >> 2;
              v1422 = 0;
              v1423 = (v1421 - 1);
              if ((int)v1421 - 1 >= 0)
              {
                v1424 = *(_QWORD *)(*a1 + 24);
                v1425 = v1418;
                do
                {
                  v1426 = ldiv(v1425, *(int *)(v1420 + 4 * v1423));
                  v1425 = v1426.quot;
                  v1422 += *(_QWORD *)(v1424 + 8 * v1423--) * v1426.rem;
                }
                while (v1423 != -1);
              }
              v1427 = *(_QWORD *)*a2;
              v1428 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1427) >> 2;
              v1429 = 0;
              v1430 = (v1428 - 1);
              if ((int)v1428 - 1 >= 0)
              {
                v1431 = *(_QWORD *)(*a2 + 24);
                v1432 = v1418;
                do
                {
                  v1433 = ldiv(v1432, *(int *)(v1427 + 4 * v1430));
                  v1432 = v1433.quot;
                  v1429 += *(_QWORD *)(v1431 + 8 * v1430--) * v1433.rem;
                }
                while (v1430 != -1);
              }
              __B = -1.0;
              vDSP_vsmsa((const float *)&v1627[2 * (int)v1429], 1, &__B, (const float *)(v1675 + 8 * (int)v1422), v1419, 1, v1581);
              v1419 += 2 * v1581;
              v1418 += v1581;
            }
            while (v1418 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v261 == 2)
          {
            v1434 = *v68;
            if (*v68)
            {
              v1435 = 0;
              v1436 = 0;
              v1676 = *(_QWORD *)(v67 + 152);
              v1628 = v122[19];
              v1437 = (float *)v66[19];
              v1541 = 0;
              v1582 = (int)v262;
              v1438 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  v1439 = 0;
                  do
                  {
                    __B = (float)(uint64_t)-*(_QWORD *)&v1628[2 * v1435];
                    vDSP_vsadd((const float *)(v1676 + 8 * v1436), 1, &__B, v1437, 1, v1582);
                    v67 = *a1;
                    v1440 = *(_QWORD **)(*a1 + 24);
                    v1441 = v1440[1];
                    v1436 += v1441;
                    v122 = (int **)*a2;
                    v1442 = *(int **)(*a2 + 24);
                    v1443 = *((_QWORD *)v1442 + 1);
                    v1435 += v1443;
                    ++v1439;
                    v68 = *(int **)*a1;
                    v1444 = v68[1];
                    v1437 = (float *)((char *)v1437 + v1438);
                  }
                  while (v1439 < v1444);
                  v1434 = *v68;
                  v123 = *v122;
                }
                else
                {
                  v1444 = 0;
                  v1440 = *(_QWORD **)(v67 + 24);
                  v1441 = v1440[1];
                  v1442 = v122[3];
                  v1443 = *((_QWORD *)v1442 + 1);
                }
                v1436 = *v1440 + v1436 - v1444 * v1441;
                v1435 = *(_QWORD *)v1442 + v1435 - v1443 * v123[1];
                ++v1541;
              }
              while (v1541 < v1434);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              v908 = 0;
              v909 = 0;
              v910 = 0;
              v911 = *(_QWORD *)(v67 + 152);
              v912 = v122[19];
              v913 = (int)v262;
              v914 = 8 * (int)v262;
              v915 = (float *)v66[19];
              do
              {
                __B = (float)(uint64_t)-*(_QWORD *)&v912[2 * v909];
                vDSP_vsadd((const float *)(v911 + 8 * v910), 1, &__B, v915, 1, v913);
                v910 += **(_QWORD **)(*a1 + 24);
                v909 += **(_QWORD **)(*a2 + 24);
                ++v908;
                v915 = (float *)((char *)v915 + v914);
              }
              while (v908 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            v1445 = 0;
            v1629 = v122[19];
            v1677 = *(_QWORD *)(v67 + 152);
            v1583 = (int)v262;
            v1446 = (float *)v66[19];
            do
            {
              v1447 = *(_QWORD *)*a1;
              v1448 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1447) >> 2;
              v1449 = 0;
              v1450 = (v1448 - 1);
              if ((int)v1448 - 1 >= 0)
              {
                v1451 = *(_QWORD *)(*a1 + 24);
                v1452 = v1445;
                do
                {
                  v1453 = ldiv(v1452, *(int *)(v1447 + 4 * v1450));
                  v1452 = v1453.quot;
                  v1449 += *(_QWORD *)(v1451 + 8 * v1450--) * v1453.rem;
                }
                while (v1450 != -1);
              }
              v1454 = *(_QWORD *)*a2;
              v1455 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1454) >> 2;
              v1456 = 0;
              v1457 = (v1455 - 1);
              if ((int)v1455 - 1 >= 0)
              {
                v1458 = *(_QWORD *)(*a2 + 24);
                v1459 = v1445;
                do
                {
                  v1460 = ldiv(v1459, *(int *)(v1454 + 4 * v1457));
                  v1459 = v1460.quot;
                  v1456 += *(_QWORD *)(v1458 + 8 * v1457--) * v1460.rem;
                }
                while (v1457 != -1);
              }
              __B = (float)(uint64_t)-*(_QWORD *)&v1629[2 * (int)v1456];
              vDSP_vsadd((const float *)(v1677 + 8 * (int)v1449), 1, &__B, v1446, 1, v1583);
              v1446 += 2 * v1583;
              v1445 += v1583;
            }
            while (v1445 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v261 == 2)
          {
            v1073 = *v68;
            if (*v68)
            {
              v1074 = 0;
              v1075 = 0;
              v1652 = *(_QWORD *)(v67 + 152);
              v1606 = v122[19];
              v1076 = (float *)v66[19];
              v1534 = 0;
              v1560 = (int)v262;
              v1077 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  v1078 = 0;
                  do
                  {
                    vDSP_vsub((const float *)&v1606[2 * v1074], 1, (const float *)(v1652 + 8 * v1075), 1, v1076, 1, v1560);
                    v67 = *a1;
                    v1079 = *(_QWORD **)(*a1 + 24);
                    v1080 = v1079[1];
                    v1075 += v1080;
                    v122 = (int **)*a2;
                    v1081 = *(int **)(*a2 + 24);
                    v1082 = *((_QWORD *)v1081 + 1);
                    v1074 += v1082;
                    ++v1078;
                    v68 = *(int **)*a1;
                    v1083 = v68[1];
                    v1076 = (float *)((char *)v1076 + v1077);
                  }
                  while (v1078 < v1083);
                  v1073 = *v68;
                  v123 = *v122;
                }
                else
                {
                  v1083 = 0;
                  v1079 = *(_QWORD **)(v67 + 24);
                  v1080 = v1079[1];
                  v1081 = v122[3];
                  v1082 = *((_QWORD *)v1081 + 1);
                }
                v1075 = *v1079 + v1075 - v1083 * v1080;
                v1074 = *(_QWORD *)v1081 + v1074 - v1082 * v123[1];
                ++v1534;
              }
              while (v1534 < v1073);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              v263 = 0;
              v264 = 0;
              v265 = 0;
              v266 = *(_QWORD *)(v67 + 152);
              v267 = v122[19];
              v268 = (int)v262;
              v269 = 8 * (int)v262;
              v270 = (float *)v66[19];
              do
              {
                vDSP_vsub((const float *)&v267[2 * v264], 1, (const float *)(v266 + 8 * v265), 1, v270, 1, v268);
                v265 += **(_QWORD **)(*a1 + 24);
                v264 += **(_QWORD **)(*a2 + 24);
                ++v263;
                v270 = (float *)((char *)v270 + v269);
              }
              while (v263 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            v1084 = 0;
            v1607 = v122[19];
            v1653 = *(_QWORD *)(v67 + 152);
            v1561 = (int)v262;
            v1085 = (float *)v66[19];
            do
            {
              v1086 = *(_QWORD *)*a1;
              v1087 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1086) >> 2;
              v1088 = 0;
              v1089 = (v1087 - 1);
              if ((int)v1087 - 1 >= 0)
              {
                v1090 = *(_QWORD *)(*a1 + 24);
                v1091 = v1084;
                do
                {
                  v1092 = ldiv(v1091, *(int *)(v1086 + 4 * v1089));
                  v1091 = v1092.quot;
                  v1088 += *(_QWORD *)(v1090 + 8 * v1089--) * v1092.rem;
                }
                while (v1089 != -1);
              }
              v1093 = *(_QWORD *)*a2;
              v1094 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1093) >> 2;
              v1095 = 0;
              v1096 = (v1094 - 1);
              if ((int)v1094 - 1 >= 0)
              {
                v1097 = *(_QWORD *)(*a2 + 24);
                v1098 = v1084;
                do
                {
                  v1099 = ldiv(v1098, *(int *)(v1093 + 4 * v1096));
                  v1098 = v1099.quot;
                  v1095 += *(_QWORD *)(v1097 + 8 * v1096--) * v1099.rem;
                }
                while (v1096 != -1);
              }
              vDSP_vsub((const float *)&v1607[2 * (int)v1095], 1, (const float *)(v1653 + 8 * (int)v1088), 1, v1085, 1, v1561);
              v1085 += 2 * v1561;
              v1084 += v1561;
            }
            while (v1084 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_402:
          switch(v258)
          {
            case 1uLL:
              v271 = v66[6];
              if (v271)
              {
                v272 = *(_QWORD **)(v67 + 152);
                v273 = v122[19];
                v274 = (_QWORD *)v66[19];
                v275 = 8 * *(_QWORD *)v122[3];
                v276 = 8 * **(_QWORD **)(v67 + 24);
                do
                {
                  *v274++ = *v272 - *(_QWORD *)v273;
                  v273 = (int *)((char *)v273 + v275);
                  v272 = (_QWORD *)((char *)v272 + v276);
                  --v271;
                }
                while (v271);
              }
              break;
            case 2uLL:
              v678 = *v68;
              if ((_DWORD)v678)
              {
                v679 = 0;
                v680 = 0;
                v681 = 0;
                v682 = 0;
                v683 = *(_QWORD *)(v67 + 152);
                v684 = v122[19];
                v685 = v66[19];
                v686 = v68[1];
                v687 = *(uint64_t **)(v67 + 24);
                v688 = *v687;
                v689 = v687[1];
                v690 = v122[3];
                v691 = *(_QWORD *)v690;
                v692 = *((_QWORD *)v690 + 1);
                v693 = v691 - v692 * v123[1];
                if (v686 <= 1)
                  v694 = 1;
                else
                  v694 = v68[1];
                v695 = v688 - v689 * v686;
                do
                {
                  if ((_DWORD)v686)
                  {
                    v696 = v680 + v694;
                    v697 = (_QWORD *)(v685 + 8 * v680);
                    v698 = v694;
                    do
                    {
                      *v697++ = *(_QWORD *)(v683 + 8 * v682) - *(_QWORD *)&v684[2 * v681];
                      v682 += v689;
                      v681 += v692;
                      --v698;
                    }
                    while (v698);
                    v680 = v696;
                  }
                  v682 += v695;
                  v681 += v693;
                  ++v679;
                }
                while (v679 != v678);
              }
              break;
            case 3uLL:
              v699 = *v68;
              if ((_DWORD)v699)
              {
                v700 = 0;
                v701 = 0;
                v702 = 0;
                v703 = 0;
                v704 = *(_QWORD *)(v67 + 152);
                v705 = v122[19];
                v706 = v66[19];
                v707 = v68[1];
                v708 = *(_QWORD **)(v67 + 24);
                v709 = v708[1];
                v710 = v122[3];
                v711 = *((_QWORD *)v710 + 1);
                v712 = *(_QWORD *)v710 - v711 * v123[1];
                if (v707 <= 1)
                  v713 = 1;
                else
                  v713 = v68[1];
                v714 = *v708 - v709 * v707;
                do
                {
                  if ((_DWORD)v707)
                  {
                    v715 = 0;
                    v716 = v68[2];
                    v717 = v708[2];
                    v718 = *((_QWORD *)v710 + 2);
                    if (v716 <= 1)
                      v719 = 1;
                    else
                      v719 = v68[2];
                    v720 = v711 - v718 * v123[2];
                    do
                    {
                      v721 = v719;
                      if ((_DWORD)v716)
                      {
                        do
                        {
                          *(_QWORD *)(v706 + 8 * v701++) = *(_QWORD *)(v704 + 8 * v703) - *(_QWORD *)&v705[2 * v702];
                          v703 += v717;
                          v702 += v718;
                          --v721;
                        }
                        while (v721);
                      }
                      v703 += v709 - v717 * v716;
                      v702 += v720;
                      ++v715;
                    }
                    while (v715 != v713);
                  }
                  v703 += v714;
                  v702 += v712;
                  ++v700;
                }
                while (v700 != v699);
              }
              break;
            case 4uLL:
              v1641 = *v68;
              if ((_DWORD)v1641)
              {
                v722 = 0;
                v723 = 0;
                v724 = 0;
                v725 = 0;
                v726 = *(_QWORD *)(v67 + 152);
                v727 = v122[19];
                v728 = v66[19];
                v729 = v68[1];
                v730 = *(_QWORD **)(v67 + 24);
                v731 = v122[3];
                v1516 = *((_QWORD *)v731 + 1);
                v1522 = v730[1];
                v1549 = *(_QWORD *)v731 - v1516 * v123[1];
                v1595 = v68[1];
                if (v729 <= 1)
                  v732 = 1;
                else
                  v732 = v68[1];
                v1529 = *v730 - v730[1] * v729;
                do
                {
                  if (v1595)
                  {
                    v733 = 0;
                    v734 = v68[2];
                    v735 = v730[2];
                    v736 = *((_QWORD *)v731 + 2);
                    if (v734 <= 1)
                      v737 = 1;
                    else
                      v737 = v68[2];
                    v738 = v1516 - v736 * v123[2];
                    do
                    {
                      if ((_DWORD)v734)
                      {
                        v739 = 0;
                        v740 = v68[3];
                        v741 = v730[3];
                        v742 = *((_QWORD *)v731 + 3);
                        if (v740 <= 1)
                          v743 = 1;
                        else
                          v743 = v68[3];
                        v744 = v736 - v742 * v123[3];
                        do
                        {
                          v745 = v743;
                          if ((_DWORD)v740)
                          {
                            do
                            {
                              *(_QWORD *)(v728 + 8 * v723++) = *(_QWORD *)(v726 + 8 * v725) - *(_QWORD *)&v727[2 * v724];
                              v725 += v741;
                              v724 += v742;
                              --v745;
                            }
                            while (v745);
                          }
                          v725 += v735 - v741 * v740;
                          v724 += v744;
                          ++v739;
                        }
                        while (v739 != v737);
                      }
                      v725 += v1522 - v735 * v734;
                      v724 += v738;
                      ++v733;
                    }
                    while (v733 != v732);
                  }
                  v725 += v1529;
                  v724 += v1549;
                  ++v722;
                }
                while (v722 != v1641);
              }
              break;
            default:
              v1594 = v66[6];
              v1640 = v70;
              if (v1594)
              {
                v667 = 0;
                v1528 = v122[19];
                v1548 = *(_QWORD *)(v67 + 152);
                v1521 = v66[19];
                do
                {
                  v668 = v1640;
                  if ((v1640 & 0x80000000) != 0)
                  {
                    LODWORD(v669) = 0;
                  }
                  else
                  {
                    v669 = 0;
                    v670 = *(_QWORD *)(v67 + 24);
                    v671 = v667;
                    do
                    {
                      v672 = ldiv(v671, v68[v668]);
                      v671 = v672.quot;
                      v669 += *(_QWORD *)(v670 + 8 * v668--) * v672.rem;
                    }
                    while (v668 != -1);
                  }
                  v673 = 0;
                  if ((v125 & 0x80000000) == 0)
                  {
                    v674 = v122[3];
                    v675 = v125;
                    v676 = v667;
                    do
                    {
                      v677 = ldiv(v676, v123[v675]);
                      v676 = v677.quot;
                      v673 += *(_QWORD *)&v674[2 * v675--] * v677.rem;
                    }
                    while (v675 != -1);
                  }
                  *(_QWORD *)(v1521 + 8 * v667++) = *(_QWORD *)(v1548 + 8 * (int)v669)
                                                  - *(_QWORD *)&v1528[2 * (int)v673];
                }
                while (v667 != v1594);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v18)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_17:
          v19 = *(const float **)(*a1 + 152);
          v20 = *(float **)(*(_QWORD *)a3 + 152);
          v21 = *(const float **)(*a2 + 152);
          v22 = *(_QWORD *)(*a2 + 160);
          __B = -1.0;
          vDSP_vsmsa(v21, 1, &__B, v19, v20, 1, v22);
          return;
        case 2:
          v9 = *(float **)(*(_QWORD *)a3 + 152);
          v10 = *(const float **)(*a1 + 152);
          v11 = *(_QWORD *)(*a1 + 160);
          v14 = -**(float **)(*a2 + 152);
LABEL_55:
          __B = v14;
          vDSP_vsadd(v10, 1, &__B, v9, 1, v11);
          return;
        case 3:
LABEL_18:
          vDSP_vsub(*(const float **)(*a2 + 152), 1, *(const float **)(*a1 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)a3 + 48));
          return;
        default:
          v75 = *(_QWORD **)a3;
          v76 = *a1;
          v77 = *(int **)*a1;
          v78 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v77) >> 2;
          v79 = (v78 - 1);
          if ((int)v79 >= -1)
            v80 = -1;
          else
            v80 = v78 - 1;
          v81 = v80 + 1;
          v82 = v78 + 1;
          while (1)
          {
            v83 = v82 - 2;
            if (v82 - 2 < 0)
              break;
            --v82;
            if (*(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v83) != *(_QWORD *)(v75[3] + 8 * v83))
              goto LABEL_120;
          }
          v82 = v81;
LABEL_120:
          v130 = (int **)*a2;
          v131 = *(int **)*a2;
          v132 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v131) >> 2;
          v133 = (v132 - 1);
          if ((int)v133 >= -1)
            v134 = -1;
          else
            v134 = v132 - 1;
          v135 = v134 + 1;
          v136 = v132 + 1;
          while (1)
          {
            v137 = v136 - 2;
            if (v136 - 2 < 0)
              break;
            --v136;
            if (*(_QWORD *)&v130[3][2 * v137] != *(_QWORD *)(v75[3] + 8 * v137))
              goto LABEL_158;
          }
          v136 = v135;
LABEL_158:
          v150 = v78 + 1;
          while (1)
          {
            v151 = v150 - 2;
            if (v150 - 2 < 0)
              break;
            --v150;
            if (*(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v151))
              goto LABEL_193;
          }
          v150 = v81;
LABEL_193:
          v164 = v132 + 1;
          while (1)
          {
            v165 = v164 - 2;
            if (v164 - 2 < 0)
              break;
            --v164;
            if (*(_QWORD *)&v130[3][2 * v165])
              goto LABEL_408;
          }
          v164 = v135;
LABEL_408:
          v277 = (uint64_t)(v75[1] - *v75) >> 2;
          if (v82 <= v136)
            v278 = v136;
          else
            v278 = v82;
          if (v82 <= v164)
            v82 = v164;
          if (v150 > v136)
            v136 = v150;
          if (v277 > v136)
            v279 = 1;
          else
            v279 = 4;
          if (v277 <= v136)
            v136 = (uint64_t)(v75[1] - *v75) >> 2;
          if (v277 <= v82)
            v82 = v136;
          else
            v279 = 2;
          if (v277 <= v278)
          {
            v280 = v82;
          }
          else
          {
            v279 = 3;
            v280 = v278;
          }
          if (!v280)
            goto LABEL_437;
          v281 = *(_QWORD *)(v75[3] + 8 * (v280 - 1));
          if (v281 < 0x10)
            goto LABEL_437;
          switch(v279)
          {
            case 1:
              if (v280 == 2)
              {
                v1461 = *v77;
                if (*v77)
                {
                  v1462 = 0;
                  v1463 = 0;
                  v1678 = *(_QWORD *)(v76 + 152);
                  v1630 = v130[19];
                  v1464 = (float *)v75[19];
                  v1542 = 0;
                  v1584 = (int)v281;
                  v1465 = 4 * (int)v281;
                  do
                  {
                    if (v77[1])
                    {
                      v1466 = 0;
                      do
                      {
                        __B = -1.0;
                        vDSP_vsmsa((const float *)&v1630[v1462], 1, &__B, (const float *)(v1678 + 4 * v1463), v1464, 1, v1584);
                        v76 = *a1;
                        v1467 = *(_QWORD **)(*a1 + 24);
                        v1468 = v1467[1];
                        v1463 += v1468;
                        v130 = (int **)*a2;
                        v1469 = *(int **)(*a2 + 24);
                        v1470 = *((_QWORD *)v1469 + 1);
                        v1462 += v1470;
                        ++v1466;
                        v77 = *(int **)*a1;
                        v1471 = v77[1];
                        v1464 = (float *)((char *)v1464 + v1465);
                      }
                      while (v1466 < v1471);
                      v1461 = *v77;
                      v131 = *v130;
                    }
                    else
                    {
                      v1471 = 0;
                      v1467 = *(_QWORD **)(v76 + 24);
                      v1468 = v1467[1];
                      v1469 = v130[3];
                      v1470 = *((_QWORD *)v1469 + 1);
                    }
                    v1463 = *v1467 + v1463 - v1471 * v1468;
                    v1462 = *(_QWORD *)v1469 + v1462 - v1470 * v131[1];
                    ++v1542;
                  }
                  while (v1542 < v1461);
                }
              }
              else if (v280 == 1)
              {
                if (*v77)
                {
                  v916 = 0;
                  v917 = 0;
                  v918 = 0;
                  v919 = *(_QWORD *)(v76 + 152);
                  v920 = v130[19];
                  v921 = (int)v281;
                  v922 = 4 * (int)v281;
                  v923 = (float *)v75[19];
                  do
                  {
                    __B = -1.0;
                    vDSP_vsmsa((const float *)&v920[v917], 1, &__B, (const float *)(v919 + 4 * v918), v923, 1, v921);
                    v918 += **(_QWORD **)(*a1 + 24);
                    v917 += **(_QWORD **)(*a2 + 24);
                    ++v916;
                    v923 = (float *)((char *)v923 + v922);
                  }
                  while (v916 < **(int **)*a1);
                }
              }
              else if (v75[6])
              {
                v1472 = 0;
                v1631 = v130[19];
                v1679 = *(_QWORD *)(v76 + 152);
                v1585 = (int)v281;
                v1473 = (float *)v75[19];
                do
                {
                  v1474 = *(_QWORD *)*a1;
                  v1475 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1474) >> 2;
                  v1476 = 0;
                  v1477 = (v1475 - 1);
                  if ((int)v1475 - 1 >= 0)
                  {
                    v1478 = *(_QWORD *)(*a1 + 24);
                    v1479 = v1472;
                    do
                    {
                      v1480 = ldiv(v1479, *(int *)(v1474 + 4 * v1477));
                      v1479 = v1480.quot;
                      v1476 += *(_QWORD *)(v1478 + 8 * v1477--) * v1480.rem;
                    }
                    while (v1477 != -1);
                  }
                  v1481 = *(_QWORD *)*a2;
                  v1482 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1481) >> 2;
                  v1483 = 0;
                  v1484 = (v1482 - 1);
                  if ((int)v1482 - 1 >= 0)
                  {
                    v1485 = *(_QWORD *)(*a2 + 24);
                    v1486 = v1472;
                    do
                    {
                      v1487 = ldiv(v1486, *(int *)(v1481 + 4 * v1484));
                      v1486 = v1487.quot;
                      v1483 += *(_QWORD *)(v1485 + 8 * v1484--) * v1487.rem;
                    }
                    while (v1484 != -1);
                  }
                  __B = -1.0;
                  vDSP_vsmsa((const float *)&v1631[(int)v1483], 1, &__B, (const float *)(v1679 + 4 * (int)v1476), v1473, 1, v1585);
                  v1473 += v1585;
                  v1472 += v1585;
                }
                while (v1472 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2:
              if (v280 == 2)
              {
                v1488 = *v77;
                if (*v77)
                {
                  v1489 = 0;
                  v1490 = 0;
                  v1680 = *(_QWORD *)(v76 + 152);
                  v1632 = v130[19];
                  v1491 = (float *)v75[19];
                  v1543 = 0;
                  v1586 = (int)v281;
                  v1492 = 4 * (int)v281;
                  do
                  {
                    if (v77[1])
                    {
                      v1493 = 0;
                      do
                      {
                        __B = -*(float *)&v1632[v1489];
                        vDSP_vsadd((const float *)(v1680 + 4 * v1490), 1, &__B, v1491, 1, v1586);
                        v76 = *a1;
                        v1494 = *(_QWORD **)(*a1 + 24);
                        v1495 = v1494[1];
                        v1490 += v1495;
                        v130 = (int **)*a2;
                        v1496 = *(int **)(*a2 + 24);
                        v1497 = *((_QWORD *)v1496 + 1);
                        v1489 += v1497;
                        ++v1493;
                        v77 = *(int **)*a1;
                        v1498 = v77[1];
                        v1491 = (float *)((char *)v1491 + v1492);
                      }
                      while (v1493 < v1498);
                      v1488 = *v77;
                      v131 = *v130;
                    }
                    else
                    {
                      v1498 = 0;
                      v1494 = *(_QWORD **)(v76 + 24);
                      v1495 = v1494[1];
                      v1496 = v130[3];
                      v1497 = *((_QWORD *)v1496 + 1);
                    }
                    v1490 = *v1494 + v1490 - v1498 * v1495;
                    v1489 = *(_QWORD *)v1496 + v1489 - v1497 * v131[1];
                    ++v1543;
                  }
                  while (v1543 < v1488);
                }
              }
              else if (v280 == 1)
              {
                if (*v77)
                {
                  v924 = 0;
                  v925 = 0;
                  v926 = 0;
                  v927 = *(_QWORD *)(v76 + 152);
                  v928 = v130[19];
                  v929 = (int)v281;
                  v930 = 4 * (int)v281;
                  v931 = (float *)v75[19];
                  do
                  {
                    __B = -*(float *)&v928[v925];
                    vDSP_vsadd((const float *)(v927 + 4 * v926), 1, &__B, v931, 1, v929);
                    v926 += **(_QWORD **)(*a1 + 24);
                    v925 += **(_QWORD **)(*a2 + 24);
                    ++v924;
                    v931 = (float *)((char *)v931 + v930);
                  }
                  while (v924 < **(int **)*a1);
                }
              }
              else if (v75[6])
              {
                v1499 = 0;
                v1633 = v130[19];
                v1681 = *(_QWORD *)(v76 + 152);
                v1587 = (int)v281;
                v1500 = (float *)v75[19];
                do
                {
                  v1501 = *(_QWORD *)*a1;
                  v1502 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1501) >> 2;
                  v1503 = 0;
                  v1504 = (v1502 - 1);
                  if ((int)v1502 - 1 >= 0)
                  {
                    v1505 = *(_QWORD *)(*a1 + 24);
                    v1506 = v1499;
                    do
                    {
                      v1507 = ldiv(v1506, *(int *)(v1501 + 4 * v1504));
                      v1506 = v1507.quot;
                      v1503 += *(_QWORD *)(v1505 + 8 * v1504--) * v1507.rem;
                    }
                    while (v1504 != -1);
                  }
                  v1508 = *(_QWORD *)*a2;
                  v1509 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1508) >> 2;
                  v1510 = 0;
                  v1511 = (v1509 - 1);
                  if ((int)v1509 - 1 >= 0)
                  {
                    v1512 = *(_QWORD *)(*a2 + 24);
                    v1513 = v1499;
                    do
                    {
                      v1514 = ldiv(v1513, *(int *)(v1508 + 4 * v1511));
                      v1513 = v1514.quot;
                      v1510 += *(_QWORD *)(v1512 + 8 * v1511--) * v1514.rem;
                    }
                    while (v1511 != -1);
                  }
                  __B = -*(float *)&v1633[(int)v1510];
                  vDSP_vsadd((const float *)(v1681 + 4 * (int)v1503), 1, &__B, v1500, 1, v1587);
                  v1500 += v1587;
                  v1499 += v1587;
                }
                while (v1499 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 3:
              if (v280 == 2)
              {
                v1100 = *v77;
                if (*v77)
                {
                  v1101 = 0;
                  v1102 = 0;
                  v1654 = *(_QWORD *)(v76 + 152);
                  v1608 = v130[19];
                  v1103 = (float *)v75[19];
                  v1535 = 0;
                  v1562 = (int)v281;
                  v1104 = 4 * (int)v281;
                  do
                  {
                    if (v77[1])
                    {
                      v1105 = 0;
                      do
                      {
                        vDSP_vsub((const float *)&v1608[v1101], 1, (const float *)(v1654 + 4 * v1102), 1, v1103, 1, v1562);
                        v76 = *a1;
                        v1106 = *(_QWORD **)(*a1 + 24);
                        v1107 = v1106[1];
                        v1102 += v1107;
                        v130 = (int **)*a2;
                        v1108 = *(int **)(*a2 + 24);
                        v1109 = *((_QWORD *)v1108 + 1);
                        v1101 += v1109;
                        ++v1105;
                        v77 = *(int **)*a1;
                        v1110 = v77[1];
                        v1103 = (float *)((char *)v1103 + v1104);
                      }
                      while (v1105 < v1110);
                      v1100 = *v77;
                      v131 = *v130;
                    }
                    else
                    {
                      v1110 = 0;
                      v1106 = *(_QWORD **)(v76 + 24);
                      v1107 = v1106[1];
                      v1108 = v130[3];
                      v1109 = *((_QWORD *)v1108 + 1);
                    }
                    v1102 = *v1106 + v1102 - v1110 * v1107;
                    v1101 = *(_QWORD *)v1108 + v1101 - v1109 * v131[1];
                    ++v1535;
                  }
                  while (v1535 < v1100);
                }
              }
              else if (v280 == 1)
              {
                if (*v77)
                {
                  v282 = 0;
                  v283 = 0;
                  v284 = 0;
                  v285 = *(_QWORD *)(v76 + 152);
                  v286 = v130[19];
                  v287 = (int)v281;
                  v288 = 4 * (int)v281;
                  v289 = (float *)v75[19];
                  do
                  {
                    vDSP_vsub((const float *)&v286[v283], 1, (const float *)(v285 + 4 * v284), 1, v289, 1, v287);
                    v284 += **(_QWORD **)(*a1 + 24);
                    v283 += **(_QWORD **)(*a2 + 24);
                    ++v282;
                    v289 = (float *)((char *)v289 + v288);
                  }
                  while (v282 < **(int **)*a1);
                }
              }
              else if (v75[6])
              {
                v1111 = 0;
                v1609 = v130[19];
                v1655 = *(_QWORD *)(v76 + 152);
                v1563 = (int)v281;
                v1112 = (float *)v75[19];
                do
                {
                  v1113 = *(_QWORD *)*a1;
                  v1114 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1113) >> 2;
                  v1115 = 0;
                  v1116 = (v1114 - 1);
                  if ((int)v1114 - 1 >= 0)
                  {
                    v1117 = *(_QWORD *)(*a1 + 24);
                    v1118 = v1111;
                    do
                    {
                      v1119 = ldiv(v1118, *(int *)(v1113 + 4 * v1116));
                      v1118 = v1119.quot;
                      v1115 += *(_QWORD *)(v1117 + 8 * v1116--) * v1119.rem;
                    }
                    while (v1116 != -1);
                  }
                  v1120 = *(_QWORD *)*a2;
                  v1121 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1120) >> 2;
                  v1122 = 0;
                  v1123 = (v1121 - 1);
                  if ((int)v1121 - 1 >= 0)
                  {
                    v1124 = *(_QWORD *)(*a2 + 24);
                    v1125 = v1111;
                    do
                    {
                      v1126 = ldiv(v1125, *(int *)(v1120 + 4 * v1123));
                      v1125 = v1126.quot;
                      v1122 += *(_QWORD *)(v1124 + 8 * v1123--) * v1126.rem;
                    }
                    while (v1123 != -1);
                  }
                  vDSP_vsub((const float *)&v1609[(int)v1122], 1, (const float *)(v1655 + 4 * (int)v1115), 1, v1112, 1, v1563);
                  v1112 += v1563;
                  v1111 += v1563;
                }
                while (v1111 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            default:
LABEL_437:
              switch(v277)
              {
                case 1uLL:
                  v290 = v75[6];
                  if (v290)
                  {
                    v291 = *(float **)(v76 + 152);
                    v292 = (float *)v130[19];
                    v293 = (float *)v75[19];
                    v294 = 4 * *(_QWORD *)v130[3];
                    v295 = 4 * **(_QWORD **)(v76 + 24);
                    do
                    {
                      *v293++ = *v291 - *v292;
                      v292 = (float *)((char *)v292 + v294);
                      v291 = (float *)((char *)v291 + v295);
                      --v290;
                    }
                    while (v290);
                  }
                  break;
                case 2uLL:
                  v757 = *v77;
                  if ((_DWORD)v757)
                  {
                    v758 = 0;
                    v759 = 0;
                    v760 = 0;
                    v761 = 0;
                    v762 = *(_QWORD *)(v76 + 152);
                    v763 = v130[19];
                    v764 = v75[19];
                    v765 = v77[1];
                    v766 = *(uint64_t **)(v76 + 24);
                    v767 = *v766;
                    v768 = v766[1];
                    v769 = v130[3];
                    v770 = *(_QWORD *)v769;
                    v771 = *((_QWORD *)v769 + 1);
                    v772 = v770 - v771 * v131[1];
                    if (v765 <= 1)
                      v773 = 1;
                    else
                      v773 = v77[1];
                    v774 = v767 - v768 * v765;
                    do
                    {
                      if ((_DWORD)v765)
                      {
                        v775 = v759 + v773;
                        v776 = (float *)(v764 + 4 * v759);
                        v777 = v773;
                        do
                        {
                          *v776++ = *(float *)(v762 + 4 * v761) - *(float *)&v763[v760];
                          v761 += v768;
                          v760 += v771;
                          --v777;
                        }
                        while (v777);
                        v759 = v775;
                      }
                      v761 += v774;
                      v760 += v772;
                      ++v758;
                    }
                    while (v758 != v757);
                  }
                  break;
                case 3uLL:
                  v778 = *v77;
                  if ((_DWORD)v778)
                  {
                    v779 = 0;
                    v780 = 0;
                    v781 = 0;
                    v782 = 0;
                    v783 = *(_QWORD *)(v76 + 152);
                    v784 = v130[19];
                    v785 = v75[19];
                    v786 = v77[1];
                    v787 = *(_QWORD **)(v76 + 24);
                    v788 = v787[1];
                    v789 = v130[3];
                    v790 = *((_QWORD *)v789 + 1);
                    v791 = *(_QWORD *)v789 - v790 * v131[1];
                    if (v786 <= 1)
                      v792 = 1;
                    else
                      v792 = v77[1];
                    v793 = *v787 - v788 * v786;
                    do
                    {
                      if ((_DWORD)v786)
                      {
                        v794 = 0;
                        v795 = v77[2];
                        v796 = v787[2];
                        v797 = *((_QWORD *)v789 + 2);
                        if (v795 <= 1)
                          v798 = 1;
                        else
                          v798 = v77[2];
                        v799 = v790 - v797 * v131[2];
                        do
                        {
                          v800 = v798;
                          if ((_DWORD)v795)
                          {
                            do
                            {
                              *(float *)(v785 + 4 * v780++) = *(float *)(v783 + 4 * v782) - *(float *)&v784[v781];
                              v782 += v796;
                              v781 += v797;
                              --v800;
                            }
                            while (v800);
                          }
                          v782 += v788 - v796 * v795;
                          v781 += v799;
                          ++v794;
                        }
                        while (v794 != v792);
                      }
                      v782 += v793;
                      v781 += v791;
                      ++v779;
                    }
                    while (v779 != v778);
                  }
                  break;
                case 4uLL:
                  v1643 = *v77;
                  if ((_DWORD)v1643)
                  {
                    v801 = 0;
                    v802 = 0;
                    v803 = 0;
                    v804 = 0;
                    v805 = *(_QWORD *)(v76 + 152);
                    v806 = v130[19];
                    v807 = v75[19];
                    v808 = v77[1];
                    v809 = *(_QWORD **)(v76 + 24);
                    v810 = v130[3];
                    v1531 = *((_QWORD *)v810 + 1);
                    v1551 = v809[1];
                    v1597 = *(_QWORD *)v810 - v1531 * v131[1];
                    if (v808 <= 1)
                      v811 = 1;
                    else
                      v811 = v77[1];
                    v812 = *v809 - v809[1] * v808;
                    do
                    {
                      if ((_DWORD)v808)
                      {
                        v813 = 0;
                        v814 = v77[2];
                        v815 = v809[2];
                        v816 = *((_QWORD *)v810 + 2);
                        if (v814 <= 1)
                          v817 = 1;
                        else
                          v817 = v77[2];
                        v818 = v1531 - v816 * v131[2];
                        do
                        {
                          if ((_DWORD)v814)
                          {
                            v819 = 0;
                            v820 = v77[3];
                            v821 = v809[3];
                            v822 = *((_QWORD *)v810 + 3);
                            if (v820 <= 1)
                              v823 = 1;
                            else
                              v823 = v77[3];
                            v824 = v816 - v822 * v131[3];
                            do
                            {
                              v825 = v823;
                              if ((_DWORD)v820)
                              {
                                do
                                {
                                  *(float *)(v807 + 4 * v802++) = *(float *)(v805 + 4 * v804) - *(float *)&v806[v803];
                                  v804 += v821;
                                  v803 += v822;
                                  --v825;
                                }
                                while (v825);
                              }
                              v804 += v815 - v821 * v820;
                              v803 += v824;
                              ++v819;
                            }
                            while (v819 != v817);
                          }
                          v804 += v1551 - v815 * v814;
                          v803 += v818;
                          ++v813;
                        }
                        while (v813 != v811);
                      }
                      v804 += v812;
                      v803 += v1597;
                      ++v801;
                    }
                    while (v801 != v1643);
                  }
                  break;
                default:
                  v1596 = v75[6];
                  v1642 = v79;
                  if (v1596)
                  {
                    v746 = 0;
                    v1530 = v130[19];
                    v1550 = *(_QWORD *)(v76 + 152);
                    v1523 = v75[19];
                    do
                    {
                      v747 = v1642;
                      if ((v1642 & 0x80000000) != 0)
                      {
                        LODWORD(v748) = 0;
                      }
                      else
                      {
                        v748 = 0;
                        v749 = *(_QWORD *)(v76 + 24);
                        v750 = v746;
                        do
                        {
                          v751 = ldiv(v750, v77[v747]);
                          v750 = v751.quot;
                          v748 += *(_QWORD *)(v749 + 8 * v747--) * v751.rem;
                        }
                        while (v747 != -1);
                      }
                      v752 = 0;
                      if ((v133 & 0x80000000) == 0)
                      {
                        v753 = v130[3];
                        v754 = v133;
                        v755 = v746;
                        do
                        {
                          v756 = ldiv(v755, v131[v754]);
                          v755 = v756.quot;
                          v752 += *(_QWORD *)&v753[2 * v754--] * v756.rem;
                        }
                        while (v754 != -1);
                      }
                      *(float *)(v1523 + 4 * v746++) = *(float *)(v1550 + 4 * (int)v748) - *(float *)&v1530[(int)v752];
                    }
                    while (v746 != v1596);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4,mlx::core::`anonymous namespace'::UseDefaultBinaryOp,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_5,mlx::core::`anonymous namespace'::UseDefaultBinaryOp>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  char v10;
  _BYTE *v11;
  char *v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  int *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  const int *v27;
  vDSP_Length v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  BOOL *v40;
  char *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL *v46;
  char *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  unsigned int v65;
  char v66;
  char v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  _DWORD *v79;
  int *v80;
  int *v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  char v95;
  _BYTE *v96;
  char *v97;
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  _BYTE *v102;
  char *v103;
  char *v104;
  unsigned int v105;
  char v106;
  char v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  _DWORD *v120;
  int *v121;
  unsigned int v122;
  int v123;
  int v124;
  _DWORD *v125;
  int *v126;
  int *v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  _QWORD *v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;
  uint64_t *v149;
  uint64_t *v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  float v165;
  float *v166;
  float *v167;
  unsigned int v168;
  float v169;
  int v170;
  float *v171;
  float *v172;
  float *v173;
  unsigned int v174;
  float v175;
  float v176;
  float v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  int **v186;
  int *v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  int *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  unsigned int v200;
  int **v201;
  int *v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  int *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  int v248;
  int v249;
  int v250;
  unsigned int v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  unint64_t v260;
  int v261;
  int v262;
  int v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  unsigned __int8 *v275;
  char *v276;
  BOOL *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  int v281;
  int v282;
  int v283;
  unint64_t v284;
  int v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int *v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  uint64_t v299;
  unint64_t v300;
  int v301;
  int v302;
  int v303;
  unint64_t v304;
  int v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  _DWORD *v315;
  _DWORD *v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  int v321;
  int v322;
  int v323;
  unint64_t v324;
  int v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int *v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int *v338;
  uint64_t v339;
  unint64_t v340;
  int v341;
  int v342;
  int v343;
  unint64_t v344;
  int v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  _DWORD *v355;
  _DWORD *v356;
  _DWORD *v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  int v361;
  int v362;
  int v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  int v381;
  int v382;
  int v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int v393;
  uint64_t v394;
  float *v395;
  float *v396;
  float *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  ldiv_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  ldiv_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  BOOL *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  _QWORD *v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  ldiv_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  ldiv_t v496;
  int v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int *v503;
  uint64_t v504;
  unint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  int *v508;
  uint64_t v509;
  unint64_t v510;
  int v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  int *v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  int *v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t v527;
  int v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int *v534;
  uint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  int *v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  ldiv_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  ldiv_t v559;
  int v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t *v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  unint64_t i;
  uint64_t v576;
  int v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  int v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  unint64_t j;
  uint64_t v598;
  uint64_t v599;
  int v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  int v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  int v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  unint64_t k;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  ldiv_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  ldiv_t v644;
  int v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int *v651;
  uint64_t v652;
  unint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  int *v656;
  uint64_t v657;
  unint64_t v658;
  int v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  _QWORD *v669;
  uint64_t v670;
  int *v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  unint64_t v675;
  int v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int *v682;
  uint64_t v683;
  unint64_t v684;
  unint64_t v685;
  unint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  int *v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  int v701;
  ldiv_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  int v706;
  ldiv_t v707;
  int v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t *v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  unint64_t m;
  uint64_t v724;
  int v725;
  unint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t *v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  int v740;
  unint64_t v741;
  uint64_t v742;
  uint64_t v743;
  int v744;
  unint64_t n;
  uint64_t v746;
  uint64_t v747;
  int v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  uint64_t v761;
  int v762;
  int v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  int v768;
  unint64_t v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  unint64_t ii;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  ldiv_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  ldiv_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  _QWORD *v820;
  uint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  _QWORD *v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  int v864;
  ldiv_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  ldiv_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  uint64_t *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t *v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  float *v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  unint64_t v900;
  _QWORD *v901;
  uint64_t v902;
  _QWORD *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  _QWORD *v923;
  _QWORD *v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  vDSP_Length v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  int v949;
  unsigned int v950;
  unint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  vDSP_Length v956;
  int *v957;
  int v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  int *v963;
  uint64_t v964;
  uint64_t v965;
  char v966;
  unsigned int v967;
  unint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int *v972;
  vDSP_Length v973;
  int *v974;
  int v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int v984;
  unsigned int v985;
  unint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  vDSP_Length v991;
  uint64_t v992;
  int *v993;
  int v994;
  unint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  int *v999;
  uint64_t v1000;
  uint64_t v1001;
  char v1002;
  unsigned int v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int *v1008;
  vDSP_Length v1009;
  int *v1010;
  int v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  int v1020;
  unsigned int v1021;
  unint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  vDSP_Length v1027;
  uint64_t v1028;
  int *v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  unsigned int v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  vDSP_Length v1046;
  uint64_t v1047;
  int *v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  float v1058;
  unsigned int v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  vDSP_Length v1065;
  uint64_t v1066;
  int *v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t *v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  unsigned int v1089;
  unint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  int v1095;
  ldiv_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  int v1100;
  ldiv_t v1101;
  uint64_t v1102;
  unsigned int v1103;
  int v1104;
  unint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  int *v1109;
  uint64_t v1110;
  unint64_t v1111;
  uint64_t v1112;
  unsigned int v1113;
  _QWORD *v1114;
  uint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  unint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  int v1123;
  ldiv_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  ldiv_t v1131;
  uint64_t v1132;
  unsigned int v1133;
  int v1134;
  unint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t *v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t *v1144;
  uint64_t v1145;
  uint64_t v1146;
  int v1147;
  int v1148;
  unint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unsigned int v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  int v1160;
  ldiv_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  ldiv_t v1166;
  uint64_t v1167;
  unsigned int v1168;
  int v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int *v1174;
  uint64_t v1175;
  unint64_t v1176;
  uint64_t v1177;
  unsigned int v1178;
  _QWORD *v1179;
  uint64_t v1180;
  unint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  unint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  int v1188;
  ldiv_t v1189;
  uint64_t v1190;
  unint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  int v1195;
  ldiv_t v1196;
  uint64_t v1197;
  unsigned int v1198;
  int v1199;
  unint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t *v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t *v1209;
  uint64_t v1210;
  uint64_t v1211;
  int v1212;
  int v1213;
  unint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  unsigned int v1218;
  uint64_t v1219;
  unint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  int v1225;
  ldiv_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  int v1230;
  ldiv_t v1231;
  uint64_t v1232;
  unsigned int v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  uint64_t *v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t *v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  unsigned int v1255;
  unint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  int v1261;
  ldiv_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  int v1266;
  ldiv_t v1267;
  uint64_t v1268;
  unsigned int v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  unint64_t v1277;
  uint64_t *v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t *v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  unsigned int v1291;
  unint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  ldiv_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  int v1302;
  ldiv_t v1303;
  uint64_t v1304;
  unsigned int v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  uint64_t *v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t *v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  int v1326;
  unsigned int v1327;
  unint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  int quot;
  ldiv_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  int v1338;
  ldiv_t v1339;
  uint64_t v1340;
  int v1341;
  unsigned int v1342;
  int v1343;
  uint64_t v1344;
  uint64_t v1345;
  vDSP_Length v1346;
  int *v1347;
  uint64_t v1348;
  unint64_t v1349;
  _QWORD *v1350;
  uint64_t v1351;
  _QWORD *v1352;
  uint64_t v1353;
  unint64_t v1354;
  unint64_t v1355;
  int *v1356;
  uint64_t v1357;
  unint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  int v1362;
  ldiv_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  int v1369;
  ldiv_t v1370;
  int v1371;
  unint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  int *v1376;
  uint64_t v1377;
  unint64_t v1378;
  uint64_t v1379;
  char v1380;
  unsigned int v1381;
  _QWORD *v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  unint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  int v1391;
  ldiv_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  int v1398;
  ldiv_t v1399;
  uint64_t v1400;
  char v1401;
  unsigned int v1402;
  int v1403;
  unint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  int *v1408;
  vDSP_Length v1409;
  int *v1410;
  unint64_t v1411;
  _QWORD *v1412;
  uint64_t v1413;
  int *v1414;
  uint64_t v1415;
  unint64_t v1416;
  unint64_t v1417;
  int *v1418;
  uint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  int v1424;
  ldiv_t v1425;
  uint64_t v1426;
  unint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  int v1431;
  ldiv_t v1432;
  int v1433;
  unint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t *v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t *v1443;
  uint64_t v1444;
  uint64_t v1445;
  int v1446;
  int v1447;
  unint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  int v1451;
  unsigned int v1452;
  uint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  int v1459;
  ldiv_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  int v1464;
  ldiv_t v1465;
  uint64_t v1466;
  int v1467;
  unsigned int v1468;
  int v1469;
  uint64_t v1470;
  uint64_t v1471;
  int *v1472;
  vDSP_Length v1473;
  uint64_t v1474;
  unint64_t v1475;
  _QWORD *v1476;
  uint64_t v1477;
  _QWORD *v1478;
  uint64_t v1479;
  unint64_t v1480;
  unint64_t v1481;
  int *v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  int v1488;
  ldiv_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  int v1495;
  ldiv_t v1496;
  int v1497;
  unint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  int *v1502;
  uint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  char v1506;
  unsigned int v1507;
  _QWORD *v1508;
  uint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  unint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  int v1517;
  ldiv_t v1518;
  uint64_t v1519;
  unint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  int v1524;
  ldiv_t v1525;
  uint64_t v1526;
  char v1527;
  unsigned int v1528;
  int v1529;
  unint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  int *v1534;
  vDSP_Length v1535;
  int *v1536;
  unint64_t v1537;
  _QWORD *v1538;
  uint64_t v1539;
  int *v1540;
  uint64_t v1541;
  unint64_t v1542;
  unint64_t v1543;
  int *v1544;
  uint64_t v1545;
  unint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  int v1550;
  ldiv_t v1551;
  uint64_t v1552;
  unint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  int v1557;
  ldiv_t v1558;
  int v1559;
  unint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t *v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t *v1569;
  uint64_t v1570;
  uint64_t v1571;
  int v1572;
  int v1573;
  unint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  int v1577;
  unsigned int v1578;
  uint64_t v1579;
  unint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  int v1585;
  ldiv_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  int v1590;
  ldiv_t v1591;
  uint64_t v1592;
  int v1593;
  unsigned int v1594;
  int v1595;
  uint64_t v1596;
  uint64_t v1597;
  int *v1598;
  vDSP_Length v1599;
  uint64_t v1600;
  unint64_t v1601;
  _QWORD *v1602;
  uint64_t v1603;
  _QWORD *v1604;
  uint64_t v1605;
  unint64_t v1606;
  unint64_t v1607;
  int *v1608;
  uint64_t v1609;
  unint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  int v1614;
  ldiv_t v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  int v1621;
  ldiv_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  unint64_t v1630;
  uint64_t *v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t *v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  unsigned int v1644;
  unint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  int v1650;
  ldiv_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  int v1655;
  ldiv_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  unsigned int v1659;
  int v1660;
  uint64_t v1661;
  uint64_t v1662;
  int *v1663;
  uint64_t v1664;
  unint64_t v1665;
  _QWORD *v1666;
  uint64_t v1667;
  _QWORD *v1668;
  uint64_t v1669;
  int *v1670;
  unint64_t v1671;
  unint64_t v1672;
  int *v1673;
  uint64_t v1674;
  unint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  int v1679;
  ldiv_t v1680;
  uint64_t v1681;
  unint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  int v1686;
  ldiv_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  unint64_t v1695;
  uint64_t *v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t *v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  float v1708;
  unsigned int v1709;
  unint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  int v1715;
  ldiv_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  int v1720;
  ldiv_t v1721;
  uint64_t v1722;
  float v1723;
  unsigned int v1724;
  int v1725;
  uint64_t v1726;
  uint64_t v1727;
  int *v1728;
  uint64_t v1729;
  unint64_t v1730;
  _QWORD *v1731;
  uint64_t v1732;
  _QWORD *v1733;
  uint64_t v1734;
  int *v1735;
  unint64_t v1736;
  unint64_t v1737;
  int *v1738;
  uint64_t v1739;
  unint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  int v1744;
  ldiv_t v1745;
  uint64_t v1746;
  unint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  int v1751;
  ldiv_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  unsigned int v1774;
  unsigned int v1775;
  uint64_t v1776;
  unsigned int v1777;
  unsigned int v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  unint64_t v1786;
  int *v1787;
  unint64_t v1788;
  int *v1789;
  unint64_t v1790;
  unint64_t v1791;
  unint64_t v1792;
  unint64_t v1793;
  int *v1794;
  unint64_t v1795;
  int *v1796;
  unint64_t v1797;
  unint64_t v1798;
  uint64_t v1799;
  unint64_t v1800;
  uint64_t v1801;
  vDSP_Length __N;
  vDSP_Length __Na;
  vDSP_Length __Nb;
  vDSP_Length __Nc;
  vDSP_Length __Nd;
  vDSP_Length __Ne;
  vDSP_Length __Nf;
  vDSP_Length __Ng;
  vDSP_Length __Nh;
  vDSP_Length __Ni;
  vDSP_Length __Nj;
  vDSP_Length __Nk;
  vDSP_Length __Nl;
  vDSP_Length __Nm;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  vDSP_Length v1836;
  uint64_t v1837;
  vDSP_Length v1838;
  uint64_t v1839;
  vDSP_Length v1840;
  uint64_t v1841;
  vDSP_Length v1842;
  uint64_t v1843;
  vDSP_Length v1844;
  uint64_t v1845;
  vDSP_Length v1846;
  uint64_t v1847;
  vDSP_Length v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  int v1856;
  int *v1857;
  int *v1858;
  int v1859;
  vDSP_Length v1860;
  uint64_t v1861;
  uint64_t v1862;
  int *v1863;
  unint64_t v1864;
  uint64_t v1865;
  int *v1866;
  unint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  unint64_t v1881;
  unint64_t v1882;
  unint64_t v1883;
  uint64_t v1884;
  unint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  unint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  unint64_t v1893;
  uint64_t v1894;
  unint64_t v1895;
  uint64_t v1896;
  int __B;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(char **)(*a2 + 152) != **(unsigned __int8 **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          v39 = *(_DWORD *)(*a2 + 160);
          if (v39 >= 1)
          {
            v40 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v41 = *(char **)(*a2 + 152);
            v42 = -**(unsigned __int8 **)(*a1 + 152);
            v43 = v39 + 1;
            do
            {
              v44 = *v41++;
              *v40++ = v44 + v42 != 0;
              --v43;
            }
            while (v43 > 1);
          }
          return;
        case 2:
          goto LABEL_24;
        case 3:
          v45 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v45 >= 1)
          {
            v46 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v47 = *(char **)(*a2 + 152);
            v48 = *(unsigned __int8 **)(*a1 + 152);
            v49 = v45 + 1;
            do
            {
              v51 = *v48++;
              v50 = v51;
              v52 = *v47++;
              *v46++ = v52 != v50;
              --v49;
            }
            while (v49 > 1);
          }
          return;
        default:
          v30 = *(_QWORD **)a3;
          v31 = *a1;
          v32 = *(int **)*a1;
          v33 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v32) >> 2;
          v34 = (v33 - 1);
          if ((int)v34 >= -1)
            v35 = -1;
          else
            v35 = v33 - 1;
          v36 = v35 + 1;
          v37 = v33 + 1;
          break;
      }
      while (1)
      {
        v38 = v37 - 2;
        if (v37 - 2 < 0)
          break;
        --v37;
        if (*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8 * v38) != *(_QWORD *)(v30[3] + 8 * v38))
          goto LABEL_126;
      }
      v37 = v36;
LABEL_126:
      v178 = *a2;
      v179 = *(int **)*a2;
      v180 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v179) >> 2;
      v181 = (v180 - 1);
      if ((int)v181 >= -1)
        v182 = -1;
      else
        v182 = v180 - 1;
      v183 = v182 + 1;
      v184 = v180 + 1;
      while (1)
      {
        v185 = v184 - 2;
        if (v184 - 2 < 0)
          break;
        --v184;
        if (*(_QWORD *)(*(_QWORD *)(v178 + 24) + 8 * v185) != *(_QWORD *)(v30[3] + 8 * v185))
          goto LABEL_180;
      }
      v184 = v183;
LABEL_180:
      v232 = v33 + 1;
      while (1)
      {
        v233 = v232 - 2;
        if (v232 - 2 < 0)
          break;
        --v232;
        if (*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8 * v233))
          goto LABEL_215;
      }
      v232 = v36;
LABEL_215:
      v246 = v180 + 1;
      while (1)
      {
        v247 = v246 - 2;
        if (v246 - 2 < 0)
          break;
        --v246;
        if (*(_QWORD *)(*(_QWORD *)(v178 + 24) + 8 * v247))
          goto LABEL_250;
      }
      v246 = v183;
LABEL_250:
      v260 = (uint64_t)(v30[1] - *v30) >> 2;
      if (v37 <= v184)
        v261 = v184;
      else
        v261 = v37;
      if (v37 <= v246)
        v37 = v246;
      if (v232 > v184)
        v184 = v232;
      if (v260 > v184)
      {
        v262 = 1;
      }
      else
      {
        v184 = (uint64_t)(v30[1] - *v30) >> 2;
        v262 = 4;
      }
      if (v260 > v37)
      {
        v263 = 2;
      }
      else
      {
        v37 = v184;
        v263 = v262;
      }
      if (v260 > v261)
      {
        v37 = v261;
        v263 = 3;
      }
      v1849 = v181;
      v1871 = v34;
      if (!v37)
        goto LABEL_279;
      v264 = *(_QWORD *)(v30[3] + 8 * (v37 - 1));
      if (v264 < 0x10)
        goto LABEL_279;
      switch(v263)
      {
        case 1:
          if (v37 == 2)
          {
            v1306 = *v32;
            if ((_DWORD)v1306)
            {
              v1307 = 0;
              v1308 = 0;
              v1309 = 0;
              v1310 = *(_QWORD *)(v31 + 152);
              v1311 = *(_QWORD *)(v178 + 152);
              v1312 = v30[19];
              v1313 = v32[1];
              v1314 = *(uint64_t **)(v31 + 24);
              v1315 = *v1314;
              v1316 = v1314[1];
              v1317 = *(uint64_t **)(v178 + 24);
              v1319 = *v1317;
              v1318 = v1317[1];
              if (v1313 <= 1)
                v1320 = 1;
              else
                v1320 = v32[1];
              v1321 = v1315 - v1316 * v1313;
              v1322 = v1319 - v1318 * v179[1];
              do
              {
                if ((_DWORD)v1313)
                {
                  v1323 = 0;
                  v1324 = v1311 + v1308;
                  do
                  {
                    if ((int)v264 >= 1)
                    {
                      v1325 = 0;
                      v1326 = -*(unsigned __int8 *)(v1310 + v1309);
                      v1327 = v264 + 1;
                      do
                      {
                        *(_BYTE *)(v1312 + v1325) = *(char *)(v1324 + v1325) + v1326 != 0;
                        --v1327;
                        ++v1325;
                      }
                      while (v1327 > 1);
                    }
                    v1309 += v1316;
                    v1308 += v1318;
                    v1312 += (int)v264;
                    ++v1323;
                    v1324 += v1318;
                  }
                  while (v1323 != v1320);
                }
                v1309 += v1321;
                v1308 += v1322;
                ++v1307;
              }
              while (v1307 != v1306);
            }
          }
          else
          {
            v1829 = *a1;
            if (v37 == 1)
            {
              v940 = *v32;
              if ((_DWORD)v940)
              {
                v941 = 0;
                v942 = 0;
                v943 = *(_QWORD *)(v31 + 152);
                v944 = *(_QWORD *)(v178 + 152);
                v945 = v30[19];
                v946 = **(_QWORD **)(v31 + 24);
                v947 = **(_QWORD **)(v178 + 24);
                do
                {
                  if ((int)v264 >= 1)
                  {
                    v948 = 0;
                    v949 = -*(unsigned __int8 *)(v943 + v942);
                    v950 = v264 + 1;
                    do
                    {
                      *(_BYTE *)(v945 + v948) = *(char *)(v944 + v948) + v949 != 0;
                      --v950;
                      ++v948;
                    }
                    while (v950 > 1);
                  }
                  v942 += v946;
                  v945 += (int)v264;
                  ++v941;
                  v944 += v947;
                }
                while (v941 != v940);
              }
            }
            else
            {
              v1793 = v30[6];
              if (v1793)
              {
                v1328 = 0;
                v1766 = *(_QWORD *)(v178 + 152);
                v1776 = *(_QWORD *)(v31 + 152);
                v1329 = v30[19];
                do
                {
                  v1330 = v1871;
                  if ((v1871 & 0x80000000) != 0)
                  {
                    LODWORD(v1331) = 0;
                  }
                  else
                  {
                    v1331 = 0;
                    v1332 = *(_QWORD *)(v1829 + 24);
                    quot = v1328;
                    do
                    {
                      v1334 = ldiv(quot, v32[v1330]);
                      quot = v1334.quot;
                      v1331 += *(_QWORD *)(v1332 + 8 * v1330--) * v1334.rem;
                    }
                    while (v1330 != -1);
                  }
                  v1335 = v1849;
                  if ((v1849 & 0x80000000) != 0)
                  {
                    LODWORD(v1336) = 0;
                  }
                  else
                  {
                    v1336 = 0;
                    v1337 = *(_QWORD *)(v178 + 24);
                    v1338 = v1328;
                    do
                    {
                      v1339 = ldiv(v1338, v179[v1335]);
                      v1338 = v1339.quot;
                      v1336 += *(_QWORD *)(v1337 + 8 * v1335--) * v1339.rem;
                    }
                    while (v1335 != -1);
                  }
                  if ((int)v264 >= 1)
                  {
                    v1340 = 0;
                    v1341 = -*(unsigned __int8 *)(v1776 + (int)v1331);
                    v1342 = v264 + 1;
                    do
                    {
                      *(_BYTE *)(v1329 + v1340) = *(char *)(v1766 + (int)v1336 + v1340) + v1341 != 0;
                      --v1342;
                      ++v1340;
                    }
                    while (v1342 > 1);
                  }
                  v1329 += (int)v264;
                  v1328 += (int)v264;
                }
                while (v1328 < v1793);
              }
            }
          }
          break;
        case 2:
          if (v37 == 2)
          {
            v1343 = *v32;
            if (*v32)
            {
              v1344 = 0;
              v1345 = 0;
              v1861 = *(_QWORD *)(v31 + 152);
              v1883 = 0;
              v1346 = (int)v264;
              v1347 = (int *)v30[19];
              v1348 = *(_QWORD *)(v178 + 152);
              do
              {
                if (v32[1])
                {
                  v1349 = 0;
                  do
                  {
                    __B = -*(unsigned __int8 *)(v1348 + v1344);
                    vDSP_vsaddi((const int *)(v1861 + v1345), 1, &__B, v1347, 1, v1346);
                    v31 = *a1;
                    v1350 = *(_QWORD **)(*a1 + 24);
                    v1351 = v1350[1];
                    v1345 += v1351;
                    v1352 = *(_QWORD **)(*a2 + 24);
                    v1353 = v1352[1];
                    v1344 += v1353;
                    v1347 = (int *)((char *)v1347 + v1346);
                    ++v1349;
                    v32 = *(int **)*a1;
                    v1354 = v32[1];
                  }
                  while (v1349 < v1354);
                  v1343 = *v32;
                  v178 = *a2;
                  v179 = *(int **)*a2;
                }
                else
                {
                  v1354 = 0;
                  v1350 = *(_QWORD **)(v31 + 24);
                  v1351 = v1350[1];
                  v1352 = *(_QWORD **)(v178 + 24);
                  v1353 = v1352[1];
                }
                v1345 = *v1350 + v1345 - v1354 * v1351;
                v1344 = *v1352 + v1344 - v1353 * v179[1];
                ++v1883;
              }
              while (v1883 < v1343);
            }
          }
          else if (v37 == 1)
          {
            if (*v32)
            {
              v951 = 0;
              v952 = 0;
              v953 = 0;
              v954 = *(_QWORD *)(v31 + 152);
              v955 = *(_QWORD *)(v178 + 152);
              v956 = (int)v264;
              v957 = (int *)v30[19];
              do
              {
                __B = -*(unsigned __int8 *)(v955 + v952);
                vDSP_vsaddi((const int *)(v954 + v953), 1, &__B, v957, 1, v956);
                v953 += **(_QWORD **)(*a1 + 24);
                v952 += **(_QWORD **)(*a2 + 24);
                v957 = (int *)((char *)v957 + v956);
                ++v951;
              }
              while (v951 < **(int **)*a1);
            }
          }
          else if (v30[6])
          {
            v1355 = 0;
            v1862 = *(_QWORD *)(v178 + 152);
            v1884 = *(_QWORD *)(v31 + 152);
            v1836 = (int)v264;
            v1356 = (int *)v30[19];
            do
            {
              v1357 = *(_QWORD *)*a1;
              v1358 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1357) >> 2;
              v1359 = 0;
              v1360 = (v1358 - 1);
              if ((int)v1358 - 1 >= 0)
              {
                v1361 = *(_QWORD *)(*a1 + 24);
                v1362 = v1355;
                do
                {
                  v1363 = ldiv(v1362, *(int *)(v1357 + 4 * v1360));
                  v1362 = v1363.quot;
                  v1359 += *(_QWORD *)(v1361 + 8 * v1360--) * v1363.rem;
                }
                while (v1360 != -1);
              }
              v1364 = *(_QWORD *)*a2;
              v1365 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1364) >> 2;
              v1366 = 0;
              v1367 = (v1365 - 1);
              if ((int)v1365 - 1 >= 0)
              {
                v1368 = *(_QWORD *)(*a2 + 24);
                v1369 = v1355;
                do
                {
                  v1370 = ldiv(v1369, *(int *)(v1364 + 4 * v1367));
                  v1369 = v1370.quot;
                  v1366 += *(_QWORD *)(v1368 + 8 * v1367--) * v1370.rem;
                }
                while (v1367 != -1);
              }
              __B = -*(unsigned __int8 *)(v1862 + (int)v1366);
              vDSP_vsaddi((const int *)(v1884 + (int)v1359), 1, &__B, v1356, 1, v1836);
              v1356 = (int *)((char *)v1356 + v1836);
              v1355 += v1836;
            }
            while (v1355 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v37 == 2)
          {
            v1068 = *v32;
            if ((_DWORD)v1068)
            {
              v1069 = 0;
              v1070 = 0;
              v1071 = 0;
              v1072 = *(_QWORD *)(v31 + 152);
              v1073 = *(_QWORD *)(v178 + 152);
              v1074 = v30[19];
              v1075 = v32[1];
              v1076 = *(uint64_t **)(v31 + 24);
              v1077 = *v1076;
              v1078 = v1076[1];
              v1079 = *(uint64_t **)(v178 + 24);
              v1081 = *v1079;
              v1080 = v1079[1];
              if (v1075 <= 1)
                v1082 = 1;
              else
                v1082 = v32[1];
              v1083 = v1077 - v1078 * v1075;
              v1084 = v1081 - v1080 * v179[1];
              do
              {
                if ((_DWORD)v1075)
                {
                  v1085 = 0;
                  v1086 = v1073 + v1070;
                  v1087 = v1072 + v1071;
                  do
                  {
                    if ((int)v264 >= 1)
                    {
                      v1088 = 0;
                      v1089 = v264 + 1;
                      do
                      {
                        *(_BYTE *)(v1074 + v1088) = *(char *)(v1086 + v1088) != *(unsigned __int8 *)(v1087 + v1088);
                        --v1089;
                        ++v1088;
                      }
                      while (v1089 > 1);
                    }
                    v1071 += v1078;
                    v1070 += v1080;
                    v1074 += (int)v264;
                    ++v1085;
                    v1086 += v1080;
                    v1087 += v1078;
                  }
                  while (v1085 != v1082);
                }
                v1071 += v1083;
                v1070 += v1084;
                ++v1069;
              }
              while (v1069 != v1068);
            }
          }
          else
          {
            v1816 = *a1;
            if (v37 == 1)
            {
              v265 = *v32;
              if ((_DWORD)v265)
              {
                v266 = 0;
                v267 = *(_QWORD *)(v31 + 152);
                v268 = *(_QWORD *)(v178 + 152);
                v269 = v30[19];
                v270 = **(_QWORD **)(v31 + 24);
                v271 = **(_QWORD **)(v178 + 24);
                do
                {
                  if ((int)v264 >= 1)
                  {
                    v272 = 0;
                    v273 = v264 + 1;
                    do
                    {
                      *(_BYTE *)(v269 + v272) = *(char *)(v268 + v272) != *(unsigned __int8 *)(v267 + v272);
                      --v273;
                      ++v272;
                    }
                    while (v273 > 1);
                  }
                  v269 += (int)v264;
                  ++v266;
                  v268 += v271;
                  v267 += v270;
                }
                while (v266 != v265);
              }
            }
            else
            {
              v1786 = v30[6];
              if (v1786)
              {
                v1090 = 0;
                v1761 = *(_QWORD *)(v178 + 152);
                v1773 = *(_QWORD *)(v31 + 152);
                v1091 = v30[19];
                do
                {
                  v1092 = v1871;
                  if ((v1871 & 0x80000000) != 0)
                  {
                    LODWORD(v1093) = 0;
                  }
                  else
                  {
                    v1093 = 0;
                    v1094 = *(_QWORD *)(v1816 + 24);
                    v1095 = v1090;
                    do
                    {
                      v1096 = ldiv(v1095, v32[v1092]);
                      v1095 = v1096.quot;
                      v1093 += *(_QWORD *)(v1094 + 8 * v1092--) * v1096.rem;
                    }
                    while (v1092 != -1);
                  }
                  v1097 = v1849;
                  if ((v1849 & 0x80000000) != 0)
                  {
                    LODWORD(v1098) = 0;
                  }
                  else
                  {
                    v1098 = 0;
                    v1099 = *(_QWORD *)(v178 + 24);
                    v1100 = v1090;
                    do
                    {
                      v1101 = ldiv(v1100, v179[v1097]);
                      v1100 = v1101.quot;
                      v1098 += *(_QWORD *)(v1099 + 8 * v1097--) * v1101.rem;
                    }
                    while (v1097 != -1);
                  }
                  if ((int)v264 >= 1)
                  {
                    v1102 = 0;
                    v1103 = v264 + 1;
                    do
                    {
                      *(_BYTE *)(v1091 + v1102) = *(char *)(v1761 + (int)v1098 + v1102) != *(unsigned __int8 *)(v1773 + (int)v1093 + v1102);
                      --v1103;
                      ++v1102;
                    }
                    while (v1103 > 1);
                  }
                  v1091 += (int)v264;
                  v1090 += (int)v264;
                }
                while (v1090 < v1786);
              }
            }
          }
          break;
        default:
LABEL_279:
          switch(v260)
          {
            case 1uLL:
              v274 = v30[6];
              if (v274)
              {
                v275 = *(unsigned __int8 **)(v31 + 152);
                v276 = *(char **)(v178 + 152);
                v277 = (BOOL *)v30[19];
                v278 = **(_QWORD **)(v31 + 24);
                v279 = **(_QWORD **)(v178 + 24);
                do
                {
                  *v277++ = *v276 != *v275;
                  v276 += v279;
                  v275 += v278;
                  --v274;
                }
                while (v274);
              }
              break;
            case 2uLL:
              v413 = *v32;
              if ((_DWORD)v413)
              {
                v414 = 0;
                v415 = 0;
                v416 = 0;
                v417 = 0;
                v418 = *(_QWORD *)(v31 + 152);
                v419 = *(_QWORD *)(v178 + 152);
                v420 = v30[19];
                v421 = v32[1];
                v422 = *(uint64_t **)(v31 + 24);
                v423 = *v422;
                v424 = v422[1];
                v425 = *(uint64_t **)(v178 + 24);
                v426 = *v425;
                v427 = v425[1];
                v428 = v426 - v427 * v179[1];
                if (v421 <= 1)
                  v429 = 1;
                else
                  v429 = v32[1];
                v430 = v423 - v424 * v421;
                do
                {
                  if ((_DWORD)v421)
                  {
                    v431 = v415 + v429;
                    v432 = (BOOL *)(v420 + v415);
                    v433 = v429;
                    do
                    {
                      *v432++ = *(char *)(v419 + v416) != *(unsigned __int8 *)(v418 + v417);
                      v417 += v424;
                      v416 += v427;
                      --v433;
                    }
                    while (v433);
                    v415 = v431;
                  }
                  v417 += v430;
                  v416 += v428;
                  ++v414;
                }
                while (v414 != v413);
              }
              break;
            case 3uLL:
              v434 = *v32;
              if ((_DWORD)v434)
              {
                v435 = 0;
                v436 = 0;
                v437 = 0;
                v438 = 0;
                v439 = *(_QWORD *)(v31 + 152);
                v440 = *(_QWORD *)(v178 + 152);
                v441 = v30[19];
                v442 = v32[1];
                v443 = *(_QWORD **)(v31 + 24);
                v444 = v443[1];
                v445 = *(_QWORD **)(v178 + 24);
                v446 = v445[1];
                v447 = *v445 - v446 * v179[1];
                if (v442 <= 1)
                  v448 = 1;
                else
                  v448 = v32[1];
                v449 = *v443 - v444 * v442;
                do
                {
                  if ((_DWORD)v442)
                  {
                    v450 = 0;
                    v451 = v32[2];
                    v452 = v443[2];
                    v453 = v445[2];
                    if (v451 <= 1)
                      v454 = 1;
                    else
                      v454 = v32[2];
                    v455 = v446 - v453 * v179[2];
                    do
                    {
                      v456 = v454;
                      if ((_DWORD)v451)
                      {
                        do
                        {
                          *(_BYTE *)(v441 + v436++) = *(char *)(v440 + v437) != *(unsigned __int8 *)(v439 + v438);
                          v438 += v452;
                          v437 += v453;
                          --v456;
                        }
                        while (v456);
                      }
                      v438 += v444 - v452 * v451;
                      v437 += v455;
                      ++v450;
                    }
                    while (v450 != v448);
                  }
                  v438 += v449;
                  v437 += v447;
                  ++v435;
                }
                while (v435 != v434);
              }
              break;
            case 4uLL:
              v1876 = *v32;
              if ((_DWORD)v1876)
              {
                v457 = 0;
                v458 = 0;
                v459 = 0;
                v460 = 0;
                v461 = *(_QWORD *)(v31 + 152);
                v462 = *(_QWORD *)(v178 + 152);
                v463 = v30[19];
                v464 = v32[1];
                v465 = *(_QWORD **)(v31 + 24);
                v466 = *(_QWORD **)(v178 + 24);
                v1771 = v466[1];
                v1780 = v465[1];
                v1822 = *v466 - v1771 * v179[1];
                v1856 = v32[1];
                if (v464 <= 1)
                  v467 = 1;
                else
                  v467 = v32[1];
                __Na = *v465 - v465[1] * v464;
                do
                {
                  if (v1856)
                  {
                    v468 = 0;
                    v469 = v32[2];
                    v470 = v465[2];
                    v471 = v466[2];
                    if (v469 <= 1)
                      v472 = 1;
                    else
                      v472 = v32[2];
                    v473 = v1771 - v471 * v179[2];
                    do
                    {
                      if ((_DWORD)v469)
                      {
                        v474 = 0;
                        v475 = v32[3];
                        v476 = v465[3];
                        v477 = v466[3];
                        if (v475 <= 1)
                          v478 = 1;
                        else
                          v478 = v32[3];
                        v479 = v471 - v477 * v179[3];
                        do
                        {
                          v480 = v478;
                          if ((_DWORD)v475)
                          {
                            do
                            {
                              *(_BYTE *)(v463 + v458++) = *(char *)(v462 + v459) != *(unsigned __int8 *)(v461 + v460);
                              v460 += v476;
                              v459 += v477;
                              --v480;
                            }
                            while (v480);
                          }
                          v460 += v470 - v476 * v475;
                          v459 += v479;
                          ++v474;
                        }
                        while (v474 != v472);
                      }
                      v460 += v1780 - v470 * v469;
                      v459 += v473;
                      ++v468;
                    }
                    while (v468 != v467);
                  }
                  v460 += __Na;
                  v459 += v1822;
                  ++v457;
                }
                while (v457 != v1876);
              }
              break;
            default:
              v400 = v30[6];
              if (v400)
              {
                v401 = v31;
                v402 = 0;
                __N = *(_QWORD *)(v178 + 152);
                v1821 = *(_QWORD *)(v31 + 152);
                v1779 = v30[19];
                do
                {
                  v403 = v1871;
                  if ((v1871 & 0x80000000) != 0)
                  {
                    LODWORD(v404) = 0;
                  }
                  else
                  {
                    v404 = 0;
                    v405 = *(_QWORD *)(v401 + 24);
                    v406 = v402;
                    do
                    {
                      v407 = ldiv(v406, v32[v403]);
                      v406 = v407.quot;
                      v404 += *(_QWORD *)(v405 + 8 * v403--) * v407.rem;
                    }
                    while (v403 != -1);
                  }
                  v408 = v1849;
                  if ((v1849 & 0x80000000) != 0)
                  {
                    LODWORD(v409) = 0;
                  }
                  else
                  {
                    v409 = 0;
                    v410 = *(_QWORD *)(v178 + 24);
                    v411 = v402;
                    do
                    {
                      v412 = ldiv(v411, v179[v408]);
                      v411 = v412.quot;
                      v409 += *(_QWORD *)(v410 + 8 * v408--) * v412.rem;
                    }
                    while (v408 != -1);
                  }
                  *(_BYTE *)(v1779 + v402++) = *(char *)(__N + (int)v409) != *(unsigned __int8 *)(v1821 + (int)v404);
                }
                while (v402 != v400);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            v10 = **(_BYTE **)(*a1 + 152);
            v11 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v12 = *(char **)(*a2 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = v10 - v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
LABEL_24:
          v26 = *(int **)(*(_QWORD *)a3 + 152);
          v27 = *(const int **)(*a1 + 152);
          v28 = *(_QWORD *)(*a1 + 160);
          v29 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_72;
        case 3:
          v61 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v61 >= 1)
          {
            v62 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v63 = *(char **)(*a2 + 152);
            v64 = *(char **)(*a1 + 152);
            v65 = v61 + 1;
            do
            {
              v67 = *v64++;
              v66 = v67;
              v68 = *v63++;
              *v62++ = v66 - v68;
              --v65;
            }
            while (v65 > 1);
          }
          return;
        default:
          v53 = *(_QWORD **)a3;
          v54 = *a1;
          v55 = *(int **)*a1;
          v56 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v55) >> 2;
          v57 = v56 - 1;
          if ((int)v56 - 1 >= -1)
            v57 = -1;
          v58 = v57 + 1;
          v59 = v56 + 1;
          break;
      }
      while (1)
      {
        v60 = v59 - 2;
        if (v59 - 2 < 0)
          break;
        --v59;
        if (*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8 * v60) != *(_QWORD *)(v53[3] + 8 * v60))
          goto LABEL_134;
      }
      v59 = v58;
LABEL_134:
      v186 = (int **)*a2;
      v187 = *(int **)*a2;
      v188 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v187) >> 2;
      v189 = v188 - 1;
      if ((int)v188 - 1 >= -1)
        v189 = -1;
      v190 = v189 + 1;
      v191 = v188 + 1;
      while (1)
      {
        v192 = v191 - 2;
        if (v191 - 2 < 0)
          break;
        --v191;
        if (*(_QWORD *)&v186[3][2 * v192] != *(_QWORD *)(v53[3] + 8 * v192))
          goto LABEL_185;
      }
      v191 = v190;
LABEL_185:
      v234 = v56 + 1;
      while (1)
      {
        v235 = v234 - 2;
        if (v234 - 2 < 0)
          break;
        --v234;
        if (*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8 * v235))
          goto LABEL_220;
      }
      v234 = v58;
LABEL_220:
      v248 = v188 + 1;
      while (1)
      {
        v249 = v248 - 2;
        if (v248 - 2 < 0)
          break;
        --v248;
        if (*(_QWORD *)&v186[3][2 * v249])
          goto LABEL_285;
      }
      v248 = v190;
LABEL_285:
      v280 = (uint64_t)(v53[1] - *v53) >> 2;
      if (v59 <= v191)
        v281 = v191;
      else
        v281 = v59;
      if (v59 <= v248)
        v59 = v248;
      if (v234 > v191)
        v191 = v234;
      if (v280 > v191)
      {
        v282 = 1;
      }
      else
      {
        v191 = (uint64_t)(v53[1] - *v53) >> 2;
        v282 = 4;
      }
      if (v280 > v59)
      {
        v283 = 2;
      }
      else
      {
        v59 = v191;
        v283 = v282;
      }
      if (v280 > v281)
      {
        v59 = v281;
        v283 = 3;
      }
      if (!v59)
        goto LABEL_315;
      v284 = *(_QWORD *)(v53[3] + 8 * (v59 - 1));
      if (v284 < 0x10)
        goto LABEL_315;
      v1850 = *(_QWORD *)(v53[3] + 8 * (v59 - 1));
      switch(v283)
      {
        case 1:
          if (v59 == 2)
          {
            v1371 = *v55;
            if (*v55)
            {
              v1372 = 0;
              v1373 = 0;
              v1374 = 0;
              v1375 = *(_QWORD *)(v54 + 152);
              v1376 = v186[19];
              v1377 = v53[19];
              do
              {
                if (v55[1])
                {
                  v1378 = 0;
                  do
                  {
                    if ((int)v284 >= 1)
                    {
                      v1379 = 0;
                      v1380 = *(_BYTE *)(v1375 + v1374);
                      v1381 = v284 + 1;
                      do
                      {
                        *(_BYTE *)(v1377 + v1379) = v1380 - *((_BYTE *)v1376 + v1373 + v1379);
                        --v1381;
                        ++v1379;
                      }
                      while (v1381 > 1);
                      v54 = *a1;
                      v186 = (int **)*a2;
                      v55 = *(int **)*a1;
                    }
                    v1382 = *(_QWORD **)(v54 + 24);
                    v1383 = v1382[1];
                    v1374 += v1383;
                    v1373 += *((_QWORD *)v186[3] + 1);
                    v1377 += (int)v284;
                    ++v1378;
                    v1384 = v55[1];
                  }
                  while (v1378 < v1384);
                  v1371 = *v55;
                  v187 = *v186;
                }
                else
                {
                  v1384 = 0;
                  v1382 = *(_QWORD **)(v54 + 24);
                  v1383 = v1382[1];
                }
                v1374 = *v1382 + v1374 - v1384 * v1383;
                v1373 = *(_QWORD *)v186[3] + v1373 - *((_QWORD *)v186[3] + 1) * v187[1];
                ++v1372;
              }
              while (v1372 < v1371);
            }
          }
          else if (v59 == 1)
          {
            v958 = *v55;
            if (*v55)
            {
              v959 = 0;
              v960 = 0;
              v961 = 0;
              v962 = *(_QWORD *)(v54 + 152);
              v963 = v186[19];
              v964 = v53[19];
              do
              {
                if ((int)v284 >= 1)
                {
                  v965 = 0;
                  v966 = *(_BYTE *)(v962 + v961);
                  v967 = v284 + 1;
                  do
                  {
                    *(_BYTE *)(v964 + v965) = v966 - *((_BYTE *)v963 + v960 + v965);
                    --v967;
                    ++v965;
                  }
                  while (v967 > 1);
                  v54 = *a1;
                  v186 = (int **)*a2;
                  v958 = **(_DWORD **)*a1;
                }
                v961 += **(_QWORD **)(v54 + 24);
                v960 += *(_QWORD *)v186[3];
                v964 += (int)v284;
                ++v959;
              }
              while (v959 < v958);
            }
          }
          else if (v53[6])
          {
            v1885 = 0;
            v1794 = v186[19];
            __Nj = *(_QWORD *)(v54 + 152);
            v1837 = (int)v284;
            v1777 = v284 + 1;
            v1385 = v53[19];
            do
            {
              v1386 = *(_QWORD *)*a1;
              v1387 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1386) >> 2;
              v1388 = 0;
              v1389 = (v1387 - 1);
              if ((int)v1387 - 1 >= 0)
              {
                v1390 = *(_QWORD *)(*a1 + 24);
                v1391 = v1885;
                do
                {
                  v1392 = ldiv(v1391, *(int *)(v1386 + 4 * v1389));
                  v1391 = v1392.quot;
                  v1388 += *(_QWORD *)(v1390 + 8 * v1389--) * v1392.rem;
                }
                while (v1389 != -1);
              }
              v1393 = *(_QWORD *)*a2;
              v1394 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1393) >> 2;
              v1395 = 0;
              v1396 = (v1394 - 1);
              if ((int)v1394 - 1 >= 0)
              {
                v1397 = *(_QWORD *)(*a2 + 24);
                v1398 = v1885;
                do
                {
                  v1399 = ldiv(v1398, *(int *)(v1393 + 4 * v1396));
                  v1398 = v1399.quot;
                  v1395 += *(_QWORD *)(v1397 + 8 * v1396--) * v1399.rem;
                }
                while (v1396 != -1);
              }
              if ((int)v1850 >= 1)
              {
                v1400 = 0;
                v1401 = *(_BYTE *)(__Nj + (int)v1388);
                v1402 = v1777;
                do
                {
                  *(_BYTE *)(v1385 + v1400) = v1401 - *((_BYTE *)v1794 + (int)v1395 + v1400);
                  --v1402;
                  ++v1400;
                }
                while (v1402 > 1);
                v53 = *(_QWORD **)a3;
              }
              v1385 += v1837;
              v1885 += v1837;
            }
            while (v1885 < v53[6]);
          }
          break;
        case 2:
          if (v59 == 2)
          {
            v1403 = *v55;
            if (*v55)
            {
              v1404 = 0;
              v1405 = 0;
              v1406 = 0;
              v1407 = *(_QWORD *)(v54 + 152);
              v1408 = v186[19];
              v1409 = (int)v284;
              v1410 = (int *)v53[19];
              do
              {
                if (v55[1])
                {
                  v1411 = 0;
                  do
                  {
                    __B = -*((unsigned __int8 *)v1408 + v1405);
                    vDSP_vsaddi((const int *)(v1407 + v1406), 1, &__B, v1410, 1, v1409);
                    v54 = *a1;
                    v1412 = *(_QWORD **)(*a1 + 24);
                    v1413 = v1412[1];
                    v1406 += v1413;
                    v186 = (int **)*a2;
                    v1414 = *(int **)(*a2 + 24);
                    v1415 = *((_QWORD *)v1414 + 1);
                    v1405 += v1415;
                    v1410 = (int *)((char *)v1410 + v1409);
                    ++v1411;
                    v55 = *(int **)*a1;
                    v1416 = v55[1];
                  }
                  while (v1411 < v1416);
                  v1403 = *v55;
                  v187 = *v186;
                }
                else
                {
                  v1416 = 0;
                  v1412 = *(_QWORD **)(v54 + 24);
                  v1413 = v1412[1];
                  v1414 = v186[3];
                  v1415 = *((_QWORD *)v1414 + 1);
                }
                v1406 = *v1412 + v1406 - v1416 * v1413;
                v1405 = *(_QWORD *)v1414 + v1405 - v1415 * v187[1];
                ++v1404;
              }
              while (v1404 < v1403);
            }
          }
          else if (v59 == 1)
          {
            if (*v55)
            {
              v968 = 0;
              v969 = 0;
              v970 = 0;
              v971 = *(_QWORD *)(v54 + 152);
              v972 = v186[19];
              v973 = (int)v284;
              v974 = (int *)v53[19];
              do
              {
                __B = -*((unsigned __int8 *)v972 + v969);
                vDSP_vsaddi((const int *)(v971 + v970), 1, &__B, v974, 1, v973);
                v970 += **(_QWORD **)(*a1 + 24);
                v969 += **(_QWORD **)(*a2 + 24);
                v974 = (int *)((char *)v974 + v973);
                ++v968;
              }
              while (v968 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            v1417 = 0;
            v1863 = v186[19];
            v1886 = *(_QWORD *)(v54 + 152);
            v1838 = (int)v284;
            v1418 = (int *)v53[19];
            do
            {
              v1419 = *(_QWORD *)*a1;
              v1420 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1419) >> 2;
              v1421 = 0;
              v1422 = (v1420 - 1);
              if ((int)v1420 - 1 >= 0)
              {
                v1423 = *(_QWORD *)(*a1 + 24);
                v1424 = v1417;
                do
                {
                  v1425 = ldiv(v1424, *(int *)(v1419 + 4 * v1422));
                  v1424 = v1425.quot;
                  v1421 += *(_QWORD *)(v1423 + 8 * v1422--) * v1425.rem;
                }
                while (v1422 != -1);
              }
              v1426 = *(_QWORD *)*a2;
              v1427 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1426) >> 2;
              v1428 = 0;
              v1429 = (v1427 - 1);
              if ((int)v1427 - 1 >= 0)
              {
                v1430 = *(_QWORD *)(*a2 + 24);
                v1431 = v1417;
                do
                {
                  v1432 = ldiv(v1431, *(int *)(v1426 + 4 * v1429));
                  v1431 = v1432.quot;
                  v1428 += *(_QWORD *)(v1430 + 8 * v1429--) * v1432.rem;
                }
                while (v1429 != -1);
              }
              __B = -*((unsigned __int8 *)v1863 + (int)v1428);
              vDSP_vsaddi((const int *)(v1886 + (int)v1421), 1, &__B, v1418, 1, v1838);
              v1418 = (int *)((char *)v1418 + v1838);
              v1417 += v1838;
            }
            while (v1417 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v59 == 2)
          {
            v1104 = *v55;
            if (*v55)
            {
              v1105 = 0;
              v1106 = 0;
              v1107 = 0;
              v1108 = *(_QWORD *)(v54 + 152);
              v1109 = v186[19];
              v1110 = v53[19];
              do
              {
                if (v55[1])
                {
                  v1111 = 0;
                  do
                  {
                    if ((int)v284 >= 1)
                    {
                      v1112 = 0;
                      v1113 = v284 + 1;
                      do
                      {
                        *(_BYTE *)(v1110 + v1112) = *(_BYTE *)(v1108 + v1107 + v1112)
                                                  - *((_BYTE *)v1109 + v1106 + v1112);
                        --v1113;
                        ++v1112;
                      }
                      while (v1113 > 1);
                      v54 = *a1;
                      v186 = (int **)*a2;
                      v55 = *(int **)*a1;
                    }
                    v1114 = *(_QWORD **)(v54 + 24);
                    v1115 = v1114[1];
                    v1107 += v1115;
                    v1106 += *((_QWORD *)v186[3] + 1);
                    v1110 += (int)v284;
                    ++v1111;
                    v1116 = v55[1];
                  }
                  while (v1111 < v1116);
                  v1104 = *v55;
                  v187 = *v186;
                }
                else
                {
                  v1116 = 0;
                  v1114 = *(_QWORD **)(v54 + 24);
                  v1115 = v1114[1];
                }
                v1107 = *v1114 + v1107 - v1116 * v1115;
                v1106 = *(_QWORD *)v186[3] + v1106 - *((_QWORD *)v186[3] + 1) * v187[1];
                ++v1105;
              }
              while (v1105 < v1104);
            }
          }
          else if (v59 == 1)
          {
            v285 = *v55;
            if (*v55)
            {
              v286 = 0;
              v287 = 0;
              v288 = 0;
              v289 = *(_QWORD *)(v54 + 152);
              v290 = v186[19];
              v291 = v53[19];
              do
              {
                if ((int)v284 >= 1)
                {
                  v292 = 0;
                  v293 = v284 + 1;
                  do
                  {
                    *(_BYTE *)(v291 + v292) = *(_BYTE *)(v289 + v288 + v292) - *((_BYTE *)v290 + v287 + v292);
                    --v293;
                    ++v292;
                  }
                  while (v293 > 1);
                  v54 = *a1;
                  v186 = (int **)*a2;
                  v285 = **(_DWORD **)*a1;
                }
                v288 += **(_QWORD **)(v54 + 24);
                v287 += *(_QWORD *)v186[3];
                v291 += (int)v284;
                ++v286;
              }
              while (v286 < v285);
            }
          }
          else if (v53[6])
          {
            v1881 = 0;
            v1787 = v186[19];
            __Nh = *(_QWORD *)(v54 + 152);
            v1834 = (int)v284;
            v1774 = v284 + 1;
            v1117 = v53[19];
            do
            {
              v1118 = *(_QWORD *)*a1;
              v1119 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1118) >> 2;
              v1120 = 0;
              v1121 = (v1119 - 1);
              if ((int)v1119 - 1 >= 0)
              {
                v1122 = *(_QWORD *)(*a1 + 24);
                v1123 = v1881;
                do
                {
                  v1124 = ldiv(v1123, *(int *)(v1118 + 4 * v1121));
                  v1123 = v1124.quot;
                  v1120 += *(_QWORD *)(v1122 + 8 * v1121--) * v1124.rem;
                }
                while (v1121 != -1);
              }
              v1125 = *(_QWORD *)*a2;
              v1126 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1125) >> 2;
              v1127 = 0;
              v1128 = (v1126 - 1);
              if ((int)v1126 - 1 >= 0)
              {
                v1129 = *(_QWORD *)(*a2 + 24);
                v1130 = v1881;
                do
                {
                  v1131 = ldiv(v1130, *(int *)(v1125 + 4 * v1128));
                  v1130 = v1131.quot;
                  v1127 += *(_QWORD *)(v1129 + 8 * v1128--) * v1131.rem;
                }
                while (v1128 != -1);
              }
              if ((int)v1850 >= 1)
              {
                v1132 = 0;
                v1133 = v1774;
                do
                {
                  *(_BYTE *)(v1117 + v1132) = *(_BYTE *)(__Nh + (int)v1120 + v1132)
                                            - *((_BYTE *)v1787 + (int)v1127 + v1132);
                  --v1133;
                  ++v1132;
                }
                while (v1133 > 1);
                v53 = *(_QWORD **)a3;
              }
              v1117 += v1834;
              v1881 += v1834;
            }
            while (v1881 < v53[6]);
          }
          break;
        default:
LABEL_315:
          switch(v280)
          {
            case 1uLL:
              if (v53[6])
              {
                v294 = 0;
                v295 = 0;
                v296 = 0;
                v297 = *(_QWORD *)(v54 + 152);
                v298 = v186[19];
                v299 = v53[19];
                do
                {
                  *(_BYTE *)(v299 + v294) = *(_BYTE *)(v297 + v296) - *((_BYTE *)v298 + v295);
                  v296 += **(_QWORD **)(*a1 + 24);
                  v295 += **(_QWORD **)(*a2 + 24);
                  ++v294;
                }
                while (v294 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v497 = *v55;
              if (*v55)
              {
                v498 = 0;
                v499 = 0;
                v500 = 0;
                v501 = 0;
                v502 = *(_QWORD *)(v54 + 152);
                v503 = v186[19];
                v504 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v505 = 0;
                    do
                    {
                      *(_BYTE *)(v504 + v499 + v505) = *(_BYTE *)(v502 + v501) - *((_BYTE *)v503 + v500);
                      v54 = *a1;
                      v506 = *(_QWORD **)(*a1 + 24);
                      v507 = v506[1];
                      v501 += v507;
                      v186 = (int **)*a2;
                      v508 = *(int **)(*a2 + 24);
                      v509 = *((_QWORD *)v508 + 1);
                      v500 += v509;
                      ++v505;
                      v55 = *(int **)*a1;
                      v510 = v55[1];
                    }
                    while (v505 < v510);
                    v497 = *v55;
                    v187 = *v186;
                    v499 += v505;
                  }
                  else
                  {
                    v510 = 0;
                    v506 = *(_QWORD **)(v54 + 24);
                    v507 = v506[1];
                    v508 = v186[3];
                    v509 = *((_QWORD *)v508 + 1);
                  }
                  v501 = *v506 + v501 - v510 * v507;
                  v500 = *(_QWORD *)v508 + v500 - v509 * v187[1];
                  ++v498;
                }
                while (v498 < v497);
              }
              break;
            case 3uLL:
              v511 = *v55;
              if (*v55)
              {
                v512 = 0;
                v513 = 0;
                v514 = 0;
                v515 = 0;
                v516 = *(_QWORD *)(v54 + 152);
                v517 = v186[19];
                v518 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v519 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v520 = 0;
                        do
                        {
                          *(_BYTE *)(v518 + v513 + v520) = *(_BYTE *)(v516 + v515) - *((_BYTE *)v517 + v514);
                          v54 = *a1;
                          v521 = *(_QWORD **)(*a1 + 24);
                          v522 = v521[2];
                          v515 += v522;
                          v186 = (int **)*a2;
                          v523 = *(int **)(*a2 + 24);
                          v524 = *((_QWORD *)v523 + 2);
                          v514 += v524;
                          ++v520;
                          v55 = *(int **)*a1;
                          v525 = v55[2];
                        }
                        while (v520 < v525);
                        v187 = *v186;
                        v513 += v520;
                      }
                      else
                      {
                        v525 = 0;
                        v521 = *(_QWORD **)(v54 + 24);
                        v522 = v521[2];
                        v523 = v186[3];
                        v524 = *((_QWORD *)v523 + 2);
                      }
                      v526 = v521[1];
                      v515 = v526 + v515 - v525 * v522;
                      v514 = *((_QWORD *)v523 + 1) + v514 - v524 * v187[2];
                      ++v519;
                      v527 = v55[1];
                    }
                    while (v519 < v527);
                    v511 = *v55;
                  }
                  else
                  {
                    v527 = 0;
                    v521 = *(_QWORD **)(v54 + 24);
                    v526 = v521[1];
                  }
                  v515 = *v521 + v515 - v527 * v526;
                  v514 = *(_QWORD *)v186[3] + v514 - *((_QWORD *)v186[3] + 1) * v187[1];
                  ++v512;
                }
                while (v512 < v511);
              }
              break;
            case 4uLL:
              v528 = *v55;
              if (*v55)
              {
                v529 = 0;
                v530 = 0;
                v531 = 0;
                v532 = 0;
                v533 = *(_QWORD *)(v54 + 152);
                v534 = v186[19];
                v535 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v536 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v537 = 0;
                        do
                        {
                          if (v55[3])
                          {
                            v538 = 0;
                            do
                            {
                              *(_BYTE *)(v535 + v530 + v538) = *(_BYTE *)(v533 + v532) - *((_BYTE *)v534 + v531);
                              v54 = *a1;
                              v539 = *(_QWORD **)(*a1 + 24);
                              v540 = v539[3];
                              v532 += v540;
                              v186 = (int **)*a2;
                              v541 = *(int **)(*a2 + 24);
                              v542 = *((_QWORD *)v541 + 3);
                              v531 += v542;
                              ++v538;
                              v55 = *(int **)*a1;
                              v543 = v55[3];
                            }
                            while (v538 < v543);
                            v187 = *v186;
                            v530 += v538;
                          }
                          else
                          {
                            v543 = 0;
                            v539 = *(_QWORD **)(v54 + 24);
                            v540 = v539[3];
                            v541 = v186[3];
                            v542 = *((_QWORD *)v541 + 3);
                          }
                          v544 = v539[2];
                          v532 = v544 + v532 - v543 * v540;
                          v531 = *((_QWORD *)v541 + 2) + v531 - v542 * v187[3];
                          ++v537;
                          v545 = v55[2];
                        }
                        while (v537 < v545);
                      }
                      else
                      {
                        v545 = 0;
                        v539 = *(_QWORD **)(v54 + 24);
                        v544 = v539[2];
                      }
                      v532 = v539[1] + v532 - v545 * v544;
                      v531 = *((_QWORD *)v186[3] + 1) + v531 - *((_QWORD *)v186[3] + 2) * v187[2];
                      ++v536;
                      v546 = v55[1];
                    }
                    while (v536 < v546);
                    v528 = *v55;
                  }
                  else
                  {
                    v546 = 0;
                  }
                  v532 = **(_QWORD **)(v54 + 24) + v532 - *(_QWORD *)(*(_QWORD *)(v54 + 24) + 8) * v546;
                  v531 = *(_QWORD *)v186[3] + v531 - *((_QWORD *)v186[3] + 1) * v187[1];
                  ++v529;
                }
                while (v529 < v528);
              }
              break;
            default:
              if (v53[6])
              {
                v481 = 0;
                v1857 = v186[19];
                v1877 = *(_QWORD *)(v54 + 152);
                v482 = v53[19];
                do
                {
                  v483 = *(_QWORD *)*a1;
                  v484 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v483) >> 2;
                  v485 = 0;
                  v486 = (v484 - 1);
                  if ((int)v484 - 1 >= 0)
                  {
                    v487 = *(_QWORD *)(*a1 + 24);
                    v488 = v481;
                    do
                    {
                      v489 = ldiv(v488, *(int *)(v483 + 4 * v486));
                      v488 = v489.quot;
                      v485 += *(_QWORD *)(v487 + 8 * v486--) * v489.rem;
                    }
                    while (v486 != -1);
                  }
                  v490 = *(_QWORD *)*a2;
                  v491 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v490) >> 2;
                  v492 = 0;
                  v493 = (v491 - 1);
                  if ((int)v491 - 1 >= 0)
                  {
                    v494 = *(_QWORD *)(*a2 + 24);
                    v495 = v481;
                    do
                    {
                      v496 = ldiv(v495, *(int *)(v490 + 4 * v493));
                      v495 = v496.quot;
                      v492 += *(_QWORD *)(v494 + 8 * v493--) * v496.rem;
                    }
                    while (v493 != -1);
                  }
                  *(_BYTE *)(v482 + v481++) = *(_BYTE *)(v1877 + (int)v485) - *((_BYTE *)v1857 + (int)v492);
                }
                while (v481 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            v17 = **(_DWORD **)(*a1 + 152);
            v18 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v19 = *(int **)(*a2 + 152);
            v20 = v16 + 1;
            do
            {
              v21 = *v19++;
              *v18++ = v17 - v21;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          goto LABEL_23;
        case 3:
          v78 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v78 >= 1)
          {
            v79 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v80 = *(int **)(*a2 + 152);
            v81 = *(int **)(*a1 + 152);
            v82 = v78 + 1;
            do
            {
              v84 = *v81++;
              v83 = v84;
              v85 = *v80++;
              *v79++ = v83 - v85;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          v69 = *(_QWORD **)a3;
          v70 = *a1;
          v71 = *(int **)*a1;
          v72 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v71) >> 2;
          v73 = (v72 - 1);
          if ((int)v73 >= -1)
            v74 = -1;
          else
            v74 = v72 - 1;
          v75 = v74 + 1;
          v76 = v72 + 1;
          break;
      }
      while (1)
      {
        v77 = v76 - 2;
        if (v76 - 2 < 0)
          break;
        --v76;
        if (*(_QWORD *)(*(_QWORD *)(v70 + 24) + 8 * v77) != *(_QWORD *)(v69[3] + 8 * v77))
          goto LABEL_141;
      }
      v76 = v75;
LABEL_141:
      v193 = *a2;
      v194 = *(int **)*a2;
      v195 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v194) >> 2;
      v196 = (v195 - 1);
      if ((int)v196 >= -1)
        v197 = -1;
      else
        v197 = v195 - 1;
      v198 = v197 + 1;
      v199 = v195 + 1;
      while (1)
      {
        v200 = v199 - 2;
        if (v199 - 2 < 0)
          break;
        --v199;
        if (*(_QWORD *)(*(_QWORD *)(v193 + 24) + 8 * v200) != *(_QWORD *)(v69[3] + 8 * v200))
          goto LABEL_190;
      }
      v199 = v198;
LABEL_190:
      v236 = v72 + 1;
      while (1)
      {
        v237 = v236 - 2;
        if (v236 - 2 < 0)
          break;
        --v236;
        if (*(_QWORD *)(*(_QWORD *)(v70 + 24) + 8 * v237))
          goto LABEL_225;
      }
      v236 = v75;
LABEL_225:
      v250 = v195 + 1;
      while (1)
      {
        v251 = v250 - 2;
        if (v250 - 2 < 0)
          break;
        --v250;
        if (*(_QWORD *)(*(_QWORD *)(v193 + 24) + 8 * v251))
          goto LABEL_321;
      }
      v250 = v198;
LABEL_321:
      v300 = (uint64_t)(v69[1] - *v69) >> 2;
      if (v76 <= v199)
        v301 = v199;
      else
        v301 = v76;
      if (v76 <= v250)
        v76 = v250;
      if (v236 > v199)
        v199 = v236;
      if (v300 > v199)
      {
        v302 = 1;
      }
      else
      {
        v199 = (uint64_t)(v69[1] - *v69) >> 2;
        v302 = 4;
      }
      if (v300 > v76)
      {
        v303 = 2;
      }
      else
      {
        v76 = v199;
        v303 = v302;
      }
      if (v300 > v301)
      {
        v76 = v301;
        v303 = 3;
      }
      v1851 = v196;
      v1872 = v73;
      if (!v76)
        goto LABEL_351;
      v304 = *(_QWORD *)(v69[3] + 8 * (v76 - 1));
      if (v304 < 0x10)
        goto LABEL_351;
      switch(v303)
      {
        case 1:
          if (v76 == 2)
          {
            v1433 = *v71;
            if (*v71)
            {
              v1434 = 0;
              v1435 = 0;
              v1436 = 0;
              v1437 = *(_QWORD *)(v70 + 152);
              v1438 = *(_QWORD *)(v193 + 152);
              v1439 = v69[19];
              v1440 = *(uint64_t **)(v70 + 24);
              v1441 = *v1440;
              v1442 = v1440[1];
              v1443 = *(uint64_t **)(v193 + 24);
              v1444 = *v1443;
              v1445 = v1443[1];
              v1446 = v71[1];
              v1447 = v1446;
              do
              {
                if (v1447)
                {
                  v1448 = 0;
                  v1449 = v1438 + 4 * v1435;
                  do
                  {
                    if ((int)v304 >= 1)
                    {
                      v1450 = 0;
                      v1451 = *(_DWORD *)(v1437 + 4 * v1436);
                      v1452 = v304 + 1;
                      do
                      {
                        *(_DWORD *)(v1439 + v1450) = v1451 - *(_DWORD *)(v1449 + v1450);
                        --v1452;
                        v1450 += 4;
                      }
                      while (v1452 > 1);
                      v1446 = v71[1];
                    }
                    v1436 += v1442;
                    v1435 += v1445;
                    v1439 += 4 * (int)v304;
                    ++v1448;
                    v1449 += 4 * v1445;
                  }
                  while (v1448 < v1446);
                  v1453 = v1446;
                  v1433 = *v71;
                  v1447 = v1446;
                }
                else
                {
                  v1453 = 0;
                }
                v1436 = v1436 + v1441 - v1453 * v1442;
                v1435 = v1435 + v1444 - v1445 * v194[1];
                ++v1434;
              }
              while (v1434 < v1433);
            }
          }
          else
          {
            v1830 = *a1;
            if (v76 == 1)
            {
              v975 = *v71;
              if (*v71)
              {
                v976 = 0;
                v977 = 0;
                v978 = *(_QWORD *)(v70 + 152);
                v979 = *(_QWORD *)(v193 + 152);
                v980 = v69[19];
                v981 = **(_QWORD **)(v70 + 24);
                v982 = 4 * **(_QWORD **)(v193 + 24);
                do
                {
                  if ((int)v304 >= 1)
                  {
                    v983 = 0;
                    v984 = *(_DWORD *)(v978 + 4 * v977);
                    v985 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v980 + v983) = v984 - *(_DWORD *)(v979 + v983);
                      --v985;
                      v983 += 4;
                    }
                    while (v985 > 1);
                    v975 = *v71;
                  }
                  v977 += v981;
                  ++v976;
                  v980 += 4 * (int)v304;
                  v979 += v982;
                }
                while (v976 < v975);
              }
            }
            else
            {
              v1795 = v69[6];
              if (v1795)
              {
                v1454 = 0;
                v1757 = *(_QWORD *)(v193 + 152);
                v1767 = *(_QWORD *)(v70 + 152);
                v1455 = v69[19];
                do
                {
                  v1456 = v1872;
                  if ((v1872 & 0x80000000) != 0)
                  {
                    LODWORD(v1457) = 0;
                  }
                  else
                  {
                    v1457 = 0;
                    v1458 = *(_QWORD *)(v1830 + 24);
                    v1459 = v1454;
                    do
                    {
                      v1460 = ldiv(v1459, v71[v1456]);
                      v1459 = v1460.quot;
                      v1457 += *(_QWORD *)(v1458 + 8 * v1456--) * v1460.rem;
                    }
                    while (v1456 != -1);
                  }
                  v1461 = v1851;
                  if ((v1851 & 0x80000000) != 0)
                  {
                    LODWORD(v1462) = 0;
                  }
                  else
                  {
                    v1462 = 0;
                    v1463 = *(_QWORD *)(v193 + 24);
                    v1464 = v1454;
                    do
                    {
                      v1465 = ldiv(v1464, v194[v1461]);
                      v1464 = v1465.quot;
                      v1462 += *(_QWORD *)(v1463 + 8 * v1461--) * v1465.rem;
                    }
                    while (v1461 != -1);
                  }
                  if ((int)v304 >= 1)
                  {
                    v1466 = 0;
                    v1467 = *(_DWORD *)(v1767 + 4 * (int)v1457);
                    v1468 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v1455 + v1466) = v1467 - *(_DWORD *)(v1757 + 4 * (int)v1462 + v1466);
                      --v1468;
                      v1466 += 4;
                    }
                    while (v1468 > 1);
                  }
                  v1455 += 4 * (int)v304;
                  v1454 += (int)v304;
                }
                while (v1454 < v1795);
              }
            }
          }
          break;
        case 2:
          if (v76 == 2)
          {
            v1469 = *v71;
            if (*v71)
            {
              v1470 = 0;
              v1471 = 0;
              v1864 = 0;
              v1887 = *(_QWORD *)(v70 + 152);
              v1472 = (int *)v69[19];
              v1839 = *(_QWORD *)(v193 + 152);
              v1473 = (int)v304;
              v1474 = 4 * (int)v304;
              do
              {
                if (v71[1])
                {
                  v1475 = 0;
                  do
                  {
                    __B = -*(_DWORD *)(v1839 + 4 * v1470);
                    vDSP_vsaddi((const int *)(v1887 + 4 * v1471), 1, &__B, v1472, 1, v1473);
                    v70 = *a1;
                    v1476 = *(_QWORD **)(*a1 + 24);
                    v1477 = v1476[1];
                    v1471 += v1477;
                    v1478 = *(_QWORD **)(*a2 + 24);
                    v1479 = v1478[1];
                    v1470 += v1479;
                    ++v1475;
                    v71 = *(int **)*a1;
                    v1480 = v71[1];
                    v1472 = (int *)((char *)v1472 + v1474);
                  }
                  while (v1475 < v1480);
                  v1469 = *v71;
                  v193 = *a2;
                  v194 = *(int **)*a2;
                }
                else
                {
                  v1480 = 0;
                  v1476 = *(_QWORD **)(v70 + 24);
                  v1477 = v1476[1];
                  v1478 = *(_QWORD **)(v193 + 24);
                  v1479 = v1478[1];
                }
                v1471 = *v1476 + v1471 - v1480 * v1477;
                v1470 = *v1478 + v1470 - v1479 * v194[1];
                ++v1864;
              }
              while (v1864 < v1469);
            }
          }
          else if (v76 == 1)
          {
            if (*v71)
            {
              v986 = 0;
              v987 = 0;
              v988 = 0;
              v989 = *(_QWORD *)(v70 + 152);
              v990 = *(_QWORD *)(v193 + 152);
              v991 = (int)v304;
              v992 = 4 * (int)v304;
              v993 = (int *)v69[19];
              do
              {
                __B = -*(_DWORD *)(v990 + 4 * v987);
                vDSP_vsaddi((const int *)(v989 + 4 * v988), 1, &__B, v993, 1, v991);
                v988 += **(_QWORD **)(*a1 + 24);
                v987 += **(_QWORD **)(*a2 + 24);
                ++v986;
                v993 = (int *)((char *)v993 + v992);
              }
              while (v986 < **(int **)*a1);
            }
          }
          else if (v69[6])
          {
            v1481 = 0;
            v1865 = *(_QWORD *)(v193 + 152);
            v1888 = *(_QWORD *)(v70 + 152);
            v1840 = (int)v304;
            v1482 = (int *)v69[19];
            do
            {
              v1483 = *(_QWORD *)*a1;
              v1484 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1483) >> 2;
              v1485 = 0;
              v1486 = (v1484 - 1);
              if ((int)v1484 - 1 >= 0)
              {
                v1487 = *(_QWORD *)(*a1 + 24);
                v1488 = v1481;
                do
                {
                  v1489 = ldiv(v1488, *(int *)(v1483 + 4 * v1486));
                  v1488 = v1489.quot;
                  v1485 += *(_QWORD *)(v1487 + 8 * v1486--) * v1489.rem;
                }
                while (v1486 != -1);
              }
              v1490 = *(_QWORD *)*a2;
              v1491 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1490) >> 2;
              v1492 = 0;
              v1493 = (v1491 - 1);
              if ((int)v1491 - 1 >= 0)
              {
                v1494 = *(_QWORD *)(*a2 + 24);
                v1495 = v1481;
                do
                {
                  v1496 = ldiv(v1495, *(int *)(v1490 + 4 * v1493));
                  v1495 = v1496.quot;
                  v1492 += *(_QWORD *)(v1494 + 8 * v1493--) * v1496.rem;
                }
                while (v1493 != -1);
              }
              __B = -*(_DWORD *)(v1865 + 4 * (int)v1492);
              vDSP_vsaddi((const int *)(v1888 + 4 * (int)v1485), 1, &__B, v1482, 1, v1840);
              v1482 += v1840;
              v1481 += v1840;
            }
            while (v1481 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v76 == 2)
          {
            v1134 = *v71;
            if (*v71)
            {
              v1135 = 0;
              v1136 = 0;
              v1137 = 0;
              v1138 = *(_QWORD *)(v70 + 152);
              v1139 = *(_QWORD *)(v193 + 152);
              v1140 = v69[19];
              v1141 = *(uint64_t **)(v70 + 24);
              v1142 = *v1141;
              v1143 = v1141[1];
              v1144 = *(uint64_t **)(v193 + 24);
              v1145 = *v1144;
              v1146 = v1144[1];
              v1147 = v71[1];
              v1148 = v1147;
              do
              {
                if (v1148)
                {
                  v1149 = 0;
                  v1150 = v1139 + 4 * v1136;
                  v1151 = v1138 + 4 * v1137;
                  do
                  {
                    if ((int)v304 >= 1)
                    {
                      v1152 = 0;
                      v1153 = v304 + 1;
                      do
                      {
                        *(_DWORD *)(v1140 + v1152) = *(_DWORD *)(v1151 + v1152) - *(_DWORD *)(v1150 + v1152);
                        --v1153;
                        v1152 += 4;
                      }
                      while (v1153 > 1);
                      v1147 = v71[1];
                    }
                    v1137 += v1143;
                    v1136 += v1146;
                    v1140 += 4 * (int)v304;
                    ++v1149;
                    v1150 += 4 * v1146;
                    v1151 += 4 * v1143;
                  }
                  while (v1149 < v1147);
                  v1154 = v1147;
                  v1134 = *v71;
                  v1148 = v1147;
                }
                else
                {
                  v1154 = 0;
                }
                v1137 = v1137 + v1142 - v1154 * v1143;
                v1136 = v1136 + v1145 - v1146 * v194[1];
                ++v1135;
              }
              while (v1135 < v1134);
            }
          }
          else
          {
            v1817 = *a1;
            if (v76 == 1)
            {
              v305 = *v71;
              if (*v71)
              {
                v306 = 0;
                v307 = *(_QWORD *)(v70 + 152);
                v308 = *(_QWORD *)(v193 + 152);
                v309 = v69[19];
                v310 = 4 * **(_QWORD **)(v193 + 24);
                v311 = 4 * **(_QWORD **)(v70 + 24);
                do
                {
                  if ((int)v304 >= 1)
                  {
                    v312 = 0;
                    v313 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v309 + v312) = *(_DWORD *)(v307 + v312) - *(_DWORD *)(v308 + v312);
                      --v313;
                      v312 += 4;
                    }
                    while (v313 > 1);
                    v305 = *v71;
                  }
                  ++v306;
                  v309 += 4 * (int)v304;
                  v308 += v310;
                  v307 += v311;
                }
                while (v306 < v305);
              }
            }
            else
            {
              v1788 = v69[6];
              if (v1788)
              {
                v1155 = 0;
                v1753 = *(_QWORD *)(v193 + 152);
                v1762 = *(_QWORD *)(v70 + 152);
                v1156 = v69[19];
                do
                {
                  v1157 = v1872;
                  if ((v1872 & 0x80000000) != 0)
                  {
                    LODWORD(v1158) = 0;
                  }
                  else
                  {
                    v1158 = 0;
                    v1159 = *(_QWORD *)(v1817 + 24);
                    v1160 = v1155;
                    do
                    {
                      v1161 = ldiv(v1160, v71[v1157]);
                      v1160 = v1161.quot;
                      v1158 += *(_QWORD *)(v1159 + 8 * v1157--) * v1161.rem;
                    }
                    while (v1157 != -1);
                  }
                  v1162 = v1851;
                  if ((v1851 & 0x80000000) != 0)
                  {
                    LODWORD(v1163) = 0;
                  }
                  else
                  {
                    v1163 = 0;
                    v1164 = *(_QWORD *)(v193 + 24);
                    v1165 = v1155;
                    do
                    {
                      v1166 = ldiv(v1165, v194[v1162]);
                      v1165 = v1166.quot;
                      v1163 += *(_QWORD *)(v1164 + 8 * v1162--) * v1166.rem;
                    }
                    while (v1162 != -1);
                  }
                  if ((int)v304 >= 1)
                  {
                    v1167 = 0;
                    v1168 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v1156 + v1167) = *(_DWORD *)(v1762 + 4 * (int)v1158 + v1167)
                                                 - *(_DWORD *)(v1753 + 4 * (int)v1163 + v1167);
                      --v1168;
                      v1167 += 4;
                    }
                    while (v1168 > 1);
                  }
                  v1156 += 4 * (int)v304;
                  v1155 += (int)v304;
                }
                while (v1155 < v1788);
              }
            }
          }
          break;
        default:
LABEL_351:
          switch(v300)
          {
            case 1uLL:
              v314 = v69[6];
              if (v314)
              {
                v315 = *(_DWORD **)(v70 + 152);
                v316 = *(_DWORD **)(v193 + 152);
                v317 = (_DWORD *)v69[19];
                v318 = 4 * **(_QWORD **)(v193 + 24);
                v319 = 4 * **(_QWORD **)(v70 + 24);
                do
                {
                  *v317++ = *v315 - *v316;
                  v316 = (_DWORD *)((char *)v316 + v318);
                  v315 = (_DWORD *)((char *)v315 + v319);
                  --v314;
                }
                while (v314);
              }
              break;
            case 2uLL:
              v560 = *v71;
              if (*v71)
              {
                v561 = 0;
                v562 = 0;
                v563 = 0;
                v564 = 0;
                v565 = *(_QWORD *)(v70 + 152);
                v566 = *(_QWORD *)(v193 + 152);
                v567 = v69[19];
                v568 = *(uint64_t **)(v70 + 24);
                v569 = *v568;
                v570 = v568[1];
                v571 = *(uint64_t **)(v193 + 24);
                v573 = *v571;
                v572 = v571[1];
                v574 = v71[1];
                do
                {
                  if (v574)
                  {
                    for (i = 0; i < v574; ++i)
                    {
                      *(_DWORD *)(v567 + 4 * v562 + 4 * i) = *(_DWORD *)(v565 + 4 * v564) - *(_DWORD *)(v566 + 4 * v563);
                      v564 += v570;
                      v563 += v572;
                      v574 = v71[1];
                    }
                    v576 = v574;
                    v560 = *v71;
                    v562 += i;
                  }
                  else
                  {
                    v576 = 0;
                  }
                  v564 = v564 + v569 - v576 * v570;
                  v563 = v563 + v573 - v572 * v194[1];
                  ++v561;
                }
                while (v561 < v560);
              }
              break;
            case 3uLL:
              v577 = *v71;
              if (*v71)
              {
                v578 = 0;
                v579 = 0;
                v580 = 0;
                v581 = 0;
                v582 = *(_QWORD *)(v70 + 152);
                v583 = *(_QWORD *)(v193 + 152);
                v584 = v69[19];
                v585 = *(uint64_t **)(v70 + 24);
                v586 = *v585;
                v587 = v585[1];
                v588 = *(uint64_t **)(v193 + 24);
                v589 = *v588;
                v590 = v588[1];
                v591 = v71[1];
                v592 = v591;
                do
                {
                  if (v592)
                  {
                    v593 = 0;
                    v594 = v585[2];
                    v595 = v588[2];
                    v596 = v71[2];
                    do
                    {
                      if (v596)
                      {
                        for (j = 0; j < v596; ++j)
                        {
                          *(_DWORD *)(v584 + 4 * v579 + 4 * j) = *(_DWORD *)(v582 + 4 * v581)
                                                               - *(_DWORD *)(v583 + 4 * v580);
                          v581 += v594;
                          v580 += v595;
                          v596 = v71[2];
                        }
                        v598 = v596;
                        v591 = v71[1];
                        v579 += j;
                      }
                      else
                      {
                        v598 = 0;
                      }
                      v581 = v581 + v587 - v598 * v594;
                      v580 = v580 + v590 - v595 * v194[2];
                      ++v593;
                    }
                    while (v593 < v591);
                    v599 = v591;
                    v577 = *v71;
                    v592 = v591;
                  }
                  else
                  {
                    v599 = 0;
                  }
                  v581 = v581 + v586 - v599 * v587;
                  v580 = v580 + v589 - v590 * v194[1];
                  ++v578;
                }
                while (v578 < v577);
              }
              break;
            case 4uLL:
              v600 = *v71;
              if (*v71)
              {
                v601 = 0;
                v602 = 0;
                v603 = 0;
                v604 = 0;
                v605 = *(_QWORD *)(v70 + 152);
                v606 = *(_QWORD *)(v193 + 152);
                v607 = v69[19];
                v608 = *(uint64_t **)(v70 + 24);
                v609 = *v608;
                v610 = v608[1];
                v611 = *(uint64_t **)(v193 + 24);
                v612 = *v611;
                v613 = v611[1];
                v614 = v71[1];
                v615 = v614;
                do
                {
                  if (v615)
                  {
                    v616 = 0;
                    v617 = v608[2];
                    v618 = v611[2];
                    v619 = v71[2];
                    v620 = v619;
                    do
                    {
                      if (v620)
                      {
                        v621 = 0;
                        v622 = v608[3];
                        v623 = v611[3];
                        v624 = v71[3];
                        do
                        {
                          if (v624)
                          {
                            for (k = 0; k < v624; ++k)
                            {
                              *(_DWORD *)(v607 + 4 * v602 + 4 * k) = *(_DWORD *)(v605 + 4 * v604)
                                                                   - *(_DWORD *)(v606 + 4 * v603);
                              v604 += v622;
                              v603 += v623;
                              v624 = v71[3];
                            }
                            v626 = v624;
                            v619 = v71[2];
                            v602 += k;
                          }
                          else
                          {
                            v626 = 0;
                          }
                          v604 = v604 + v617 - v626 * v622;
                          v603 = v603 + v618 - v623 * v194[3];
                          ++v621;
                        }
                        while (v621 < v619);
                        v627 = v619;
                        v614 = v71[1];
                        v620 = v619;
                      }
                      else
                      {
                        v627 = 0;
                      }
                      v604 = v604 + v610 - v627 * v617;
                      v603 = v603 + v613 - v618 * v194[2];
                      ++v616;
                    }
                    while (v616 < v614);
                    v628 = v614;
                    v600 = *v71;
                    v615 = v614;
                  }
                  else
                  {
                    v628 = 0;
                  }
                  v604 = v604 + v609 - v628 * v610;
                  v603 = v603 + v612 - v613 * v194[1];
                  ++v601;
                }
                while (v601 < v600);
              }
              break;
            default:
              v547 = v69[6];
              if (v547)
              {
                v548 = v70;
                v549 = 0;
                __Nb = *(_QWORD *)(v193 + 152);
                v1823 = *(_QWORD *)(v70 + 152);
                v1781 = v69[19];
                do
                {
                  v550 = v1872;
                  if ((v1872 & 0x80000000) != 0)
                  {
                    LODWORD(v551) = 0;
                  }
                  else
                  {
                    v551 = 0;
                    v552 = *(_QWORD *)(v548 + 24);
                    v553 = v549;
                    do
                    {
                      v554 = ldiv(v553, v71[v550]);
                      v553 = v554.quot;
                      v551 += *(_QWORD *)(v552 + 8 * v550--) * v554.rem;
                    }
                    while (v550 != -1);
                  }
                  v555 = v1851;
                  if ((v1851 & 0x80000000) != 0)
                  {
                    LODWORD(v556) = 0;
                  }
                  else
                  {
                    v556 = 0;
                    v557 = *(_QWORD *)(v193 + 24);
                    v558 = v549;
                    do
                    {
                      v559 = ldiv(v558, v194[v555]);
                      v558 = v559.quot;
                      v556 += *(_QWORD *)(v557 + 8 * v555--) * v559.rem;
                    }
                    while (v555 != -1);
                  }
                  *(_DWORD *)(v1781 + 4 * v549++) = *(_DWORD *)(v1823 + 4 * (int)v551)
                                                  - *(_DWORD *)(__Nb + 4 * (int)v556);
                }
                while (v549 != v547);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          v7 = **(_BYTE **)(*a1 + 152) - **(_BYTE **)(*a2 + 152);
LABEL_16:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          v94 = *(_DWORD *)(*a2 + 160);
          if (v94 >= 1)
          {
            v95 = **(_BYTE **)(*a1 + 152);
            v96 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v97 = *(char **)(*a2 + 152);
            v98 = v94 + 1;
            do
            {
              v99 = *v97++;
              *v96++ = v95 - v99;
              --v98;
            }
            while (v98 > 1);
          }
          return;
        case 2:
          v26 = *(int **)(*(_QWORD *)a3 + 152);
          v27 = *(const int **)(*a1 + 152);
          v28 = *(_QWORD *)(*a1 + 160);
          v29 = **(char **)(*a2 + 152);
          goto LABEL_72;
        case 3:
          v101 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v101 >= 1)
          {
            v102 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v103 = *(char **)(*a2 + 152);
            v104 = *(char **)(*a1 + 152);
            v105 = v101 + 1;
            do
            {
              v107 = *v104++;
              v106 = v107;
              v108 = *v103++;
              *v102++ = v106 - v108;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        default:
          v86 = *(_QWORD **)a3;
          v87 = *a1;
          v88 = *(int **)*a1;
          v89 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v88) >> 2;
          v90 = v89 - 1;
          if ((int)v89 - 1 >= -1)
            v90 = -1;
          v91 = v90 + 1;
          v92 = v89 + 1;
          break;
      }
      while (1)
      {
        v93 = v92 - 2;
        if (v92 - 2 < 0)
          break;
        --v92;
        if (*(_QWORD *)(*(_QWORD *)(v87 + 24) + 8 * v93) != *(_QWORD *)(v86[3] + 8 * v93))
          goto LABEL_149;
      }
      v92 = v91;
LABEL_149:
      v201 = (int **)*a2;
      v202 = *(int **)*a2;
      v203 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v202) >> 2;
      v204 = v203 - 1;
      if ((int)v203 - 1 >= -1)
        v204 = -1;
      v205 = v204 + 1;
      v206 = v203 + 1;
      while (1)
      {
        v207 = v206 - 2;
        if (v206 - 2 < 0)
          break;
        --v206;
        if (*(_QWORD *)&v201[3][2 * v207] != *(_QWORD *)(v86[3] + 8 * v207))
          goto LABEL_195;
      }
      v206 = v205;
LABEL_195:
      v238 = v89 + 1;
      while (1)
      {
        v239 = v238 - 2;
        if (v238 - 2 < 0)
          break;
        --v238;
        if (*(_QWORD *)(*(_QWORD *)(v87 + 24) + 8 * v239))
          goto LABEL_230;
      }
      v238 = v91;
LABEL_230:
      v252 = v203 + 1;
      while (1)
      {
        v253 = v252 - 2;
        if (v252 - 2 < 0)
          break;
        --v252;
        if (*(_QWORD *)&v201[3][2 * v253])
          goto LABEL_357;
      }
      v252 = v205;
LABEL_357:
      v320 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v92 <= v206)
        v321 = v206;
      else
        v321 = v92;
      if (v92 <= v252)
        v92 = v252;
      if (v238 > v206)
        v206 = v238;
      if (v320 > v206)
      {
        v322 = 1;
      }
      else
      {
        v206 = (uint64_t)(v86[1] - *v86) >> 2;
        v322 = 4;
      }
      if (v320 > v92)
      {
        v323 = 2;
      }
      else
      {
        v92 = v206;
        v323 = v322;
      }
      if (v320 > v321)
      {
        v92 = v321;
        v323 = 3;
      }
      if (!v92)
        goto LABEL_387;
      v324 = *(_QWORD *)(v86[3] + 8 * (v92 - 1));
      if (v324 < 0x10)
        goto LABEL_387;
      v1852 = *(_QWORD *)(v86[3] + 8 * (v92 - 1));
      switch(v323)
      {
        case 1:
          if (v92 == 2)
          {
            v1497 = *v88;
            if (*v88)
            {
              v1498 = 0;
              v1499 = 0;
              v1500 = 0;
              v1501 = *(_QWORD *)(v87 + 152);
              v1502 = v201[19];
              v1503 = v86[19];
              do
              {
                if (v88[1])
                {
                  v1504 = 0;
                  do
                  {
                    if ((int)v324 >= 1)
                    {
                      v1505 = 0;
                      v1506 = *(_BYTE *)(v1501 + v1500);
                      v1507 = v324 + 1;
                      do
                      {
                        *(_BYTE *)(v1503 + v1505) = v1506 - *((_BYTE *)v1502 + v1499 + v1505);
                        --v1507;
                        ++v1505;
                      }
                      while (v1507 > 1);
                      v87 = *a1;
                      v201 = (int **)*a2;
                      v88 = *(int **)*a1;
                    }
                    v1508 = *(_QWORD **)(v87 + 24);
                    v1509 = v1508[1];
                    v1500 += v1509;
                    v1499 += *((_QWORD *)v201[3] + 1);
                    v1503 += (int)v324;
                    ++v1504;
                    v1510 = v88[1];
                  }
                  while (v1504 < v1510);
                  v1497 = *v88;
                  v202 = *v201;
                }
                else
                {
                  v1510 = 0;
                  v1508 = *(_QWORD **)(v87 + 24);
                  v1509 = v1508[1];
                }
                v1500 = *v1508 + v1500 - v1510 * v1509;
                v1499 = *(_QWORD *)v201[3] + v1499 - *((_QWORD *)v201[3] + 1) * v202[1];
                ++v1498;
              }
              while (v1498 < v1497);
            }
          }
          else if (v92 == 1)
          {
            v994 = *v88;
            if (*v88)
            {
              v995 = 0;
              v996 = 0;
              v997 = 0;
              v998 = *(_QWORD *)(v87 + 152);
              v999 = v201[19];
              v1000 = v86[19];
              do
              {
                if ((int)v324 >= 1)
                {
                  v1001 = 0;
                  v1002 = *(_BYTE *)(v998 + v997);
                  v1003 = v324 + 1;
                  do
                  {
                    *(_BYTE *)(v1000 + v1001) = v1002 - *((_BYTE *)v999 + v996 + v1001);
                    --v1003;
                    ++v1001;
                  }
                  while (v1003 > 1);
                  v87 = *a1;
                  v201 = (int **)*a2;
                  v994 = **(_DWORD **)*a1;
                }
                v997 += **(_QWORD **)(v87 + 24);
                v996 += *(_QWORD *)v201[3];
                v1000 += (int)v324;
                ++v995;
              }
              while (v995 < v994);
            }
          }
          else if (v86[6])
          {
            v1889 = 0;
            v1796 = v201[19];
            __Nk = *(_QWORD *)(v87 + 152);
            v1841 = (int)v324;
            v1778 = v324 + 1;
            v1511 = v86[19];
            do
            {
              v1512 = *(_QWORD *)*a1;
              v1513 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1512) >> 2;
              v1514 = 0;
              v1515 = (v1513 - 1);
              if ((int)v1513 - 1 >= 0)
              {
                v1516 = *(_QWORD *)(*a1 + 24);
                v1517 = v1889;
                do
                {
                  v1518 = ldiv(v1517, *(int *)(v1512 + 4 * v1515));
                  v1517 = v1518.quot;
                  v1514 += *(_QWORD *)(v1516 + 8 * v1515--) * v1518.rem;
                }
                while (v1515 != -1);
              }
              v1519 = *(_QWORD *)*a2;
              v1520 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1519) >> 2;
              v1521 = 0;
              v1522 = (v1520 - 1);
              if ((int)v1520 - 1 >= 0)
              {
                v1523 = *(_QWORD *)(*a2 + 24);
                v1524 = v1889;
                do
                {
                  v1525 = ldiv(v1524, *(int *)(v1519 + 4 * v1522));
                  v1524 = v1525.quot;
                  v1521 += *(_QWORD *)(v1523 + 8 * v1522--) * v1525.rem;
                }
                while (v1522 != -1);
              }
              if ((int)v1852 >= 1)
              {
                v1526 = 0;
                v1527 = *(_BYTE *)(__Nk + (int)v1514);
                v1528 = v1778;
                do
                {
                  *(_BYTE *)(v1511 + v1526) = v1527 - *((_BYTE *)v1796 + (int)v1521 + v1526);
                  --v1528;
                  ++v1526;
                }
                while (v1528 > 1);
                v86 = *(_QWORD **)a3;
              }
              v1511 += v1841;
              v1889 += v1841;
            }
            while (v1889 < v86[6]);
          }
          break;
        case 2:
          if (v92 == 2)
          {
            v1529 = *v88;
            if (*v88)
            {
              v1530 = 0;
              v1531 = 0;
              v1532 = 0;
              v1533 = *(_QWORD *)(v87 + 152);
              v1534 = v201[19];
              v1535 = (int)v324;
              v1536 = (int *)v86[19];
              do
              {
                if (v88[1])
                {
                  v1537 = 0;
                  do
                  {
                    __B = -*((char *)v1534 + v1531);
                    vDSP_vsaddi((const int *)(v1533 + v1532), 1, &__B, v1536, 1, v1535);
                    v87 = *a1;
                    v1538 = *(_QWORD **)(*a1 + 24);
                    v1539 = v1538[1];
                    v1532 += v1539;
                    v201 = (int **)*a2;
                    v1540 = *(int **)(*a2 + 24);
                    v1541 = *((_QWORD *)v1540 + 1);
                    v1531 += v1541;
                    v1536 = (int *)((char *)v1536 + v1535);
                    ++v1537;
                    v88 = *(int **)*a1;
                    v1542 = v88[1];
                  }
                  while (v1537 < v1542);
                  v1529 = *v88;
                  v202 = *v201;
                }
                else
                {
                  v1542 = 0;
                  v1538 = *(_QWORD **)(v87 + 24);
                  v1539 = v1538[1];
                  v1540 = v201[3];
                  v1541 = *((_QWORD *)v1540 + 1);
                }
                v1532 = *v1538 + v1532 - v1542 * v1539;
                v1531 = *(_QWORD *)v1540 + v1531 - v1541 * v202[1];
                ++v1530;
              }
              while (v1530 < v1529);
            }
          }
          else if (v92 == 1)
          {
            if (*v88)
            {
              v1004 = 0;
              v1005 = 0;
              v1006 = 0;
              v1007 = *(_QWORD *)(v87 + 152);
              v1008 = v201[19];
              v1009 = (int)v324;
              v1010 = (int *)v86[19];
              do
              {
                __B = -*((char *)v1008 + v1005);
                vDSP_vsaddi((const int *)(v1007 + v1006), 1, &__B, v1010, 1, v1009);
                v1006 += **(_QWORD **)(*a1 + 24);
                v1005 += **(_QWORD **)(*a2 + 24);
                v1010 = (int *)((char *)v1010 + v1009);
                ++v1004;
              }
              while (v1004 < **(int **)*a1);
            }
          }
          else if (v86[6])
          {
            v1543 = 0;
            v1866 = v201[19];
            v1890 = *(_QWORD *)(v87 + 152);
            v1842 = (int)v324;
            v1544 = (int *)v86[19];
            do
            {
              v1545 = *(_QWORD *)*a1;
              v1546 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1545) >> 2;
              v1547 = 0;
              v1548 = (v1546 - 1);
              if ((int)v1546 - 1 >= 0)
              {
                v1549 = *(_QWORD *)(*a1 + 24);
                v1550 = v1543;
                do
                {
                  v1551 = ldiv(v1550, *(int *)(v1545 + 4 * v1548));
                  v1550 = v1551.quot;
                  v1547 += *(_QWORD *)(v1549 + 8 * v1548--) * v1551.rem;
                }
                while (v1548 != -1);
              }
              v1552 = *(_QWORD *)*a2;
              v1553 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1552) >> 2;
              v1554 = 0;
              v1555 = (v1553 - 1);
              if ((int)v1553 - 1 >= 0)
              {
                v1556 = *(_QWORD *)(*a2 + 24);
                v1557 = v1543;
                do
                {
                  v1558 = ldiv(v1557, *(int *)(v1552 + 4 * v1555));
                  v1557 = v1558.quot;
                  v1554 += *(_QWORD *)(v1556 + 8 * v1555--) * v1558.rem;
                }
                while (v1555 != -1);
              }
              __B = -*((char *)v1866 + (int)v1554);
              vDSP_vsaddi((const int *)(v1890 + (int)v1547), 1, &__B, v1544, 1, v1842);
              v1544 = (int *)((char *)v1544 + v1842);
              v1543 += v1842;
            }
            while (v1543 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v92 == 2)
          {
            v1169 = *v88;
            if (*v88)
            {
              v1170 = 0;
              v1171 = 0;
              v1172 = 0;
              v1173 = *(_QWORD *)(v87 + 152);
              v1174 = v201[19];
              v1175 = v86[19];
              do
              {
                if (v88[1])
                {
                  v1176 = 0;
                  do
                  {
                    if ((int)v324 >= 1)
                    {
                      v1177 = 0;
                      v1178 = v324 + 1;
                      do
                      {
                        *(_BYTE *)(v1175 + v1177) = *(_BYTE *)(v1173 + v1172 + v1177)
                                                  - *((_BYTE *)v1174 + v1171 + v1177);
                        --v1178;
                        ++v1177;
                      }
                      while (v1178 > 1);
                      v87 = *a1;
                      v201 = (int **)*a2;
                      v88 = *(int **)*a1;
                    }
                    v1179 = *(_QWORD **)(v87 + 24);
                    v1180 = v1179[1];
                    v1172 += v1180;
                    v1171 += *((_QWORD *)v201[3] + 1);
                    v1175 += (int)v324;
                    ++v1176;
                    v1181 = v88[1];
                  }
                  while (v1176 < v1181);
                  v1169 = *v88;
                  v202 = *v201;
                }
                else
                {
                  v1181 = 0;
                  v1179 = *(_QWORD **)(v87 + 24);
                  v1180 = v1179[1];
                }
                v1172 = *v1179 + v1172 - v1181 * v1180;
                v1171 = *(_QWORD *)v201[3] + v1171 - *((_QWORD *)v201[3] + 1) * v202[1];
                ++v1170;
              }
              while (v1170 < v1169);
            }
          }
          else if (v92 == 1)
          {
            v325 = *v88;
            if (*v88)
            {
              v326 = 0;
              v327 = 0;
              v328 = 0;
              v329 = *(_QWORD *)(v87 + 152);
              v330 = v201[19];
              v331 = v86[19];
              do
              {
                if ((int)v324 >= 1)
                {
                  v332 = 0;
                  v333 = v324 + 1;
                  do
                  {
                    *(_BYTE *)(v331 + v332) = *(_BYTE *)(v329 + v328 + v332) - *((_BYTE *)v330 + v327 + v332);
                    --v333;
                    ++v332;
                  }
                  while (v333 > 1);
                  v87 = *a1;
                  v201 = (int **)*a2;
                  v325 = **(_DWORD **)*a1;
                }
                v328 += **(_QWORD **)(v87 + 24);
                v327 += *(_QWORD *)v201[3];
                v331 += (int)v324;
                ++v326;
              }
              while (v326 < v325);
            }
          }
          else if (v86[6])
          {
            v1882 = 0;
            v1789 = v201[19];
            __Ni = *(_QWORD *)(v87 + 152);
            v1835 = (int)v324;
            v1775 = v324 + 1;
            v1182 = v86[19];
            do
            {
              v1183 = *(_QWORD *)*a1;
              v1184 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1183) >> 2;
              v1185 = 0;
              v1186 = (v1184 - 1);
              if ((int)v1184 - 1 >= 0)
              {
                v1187 = *(_QWORD *)(*a1 + 24);
                v1188 = v1882;
                do
                {
                  v1189 = ldiv(v1188, *(int *)(v1183 + 4 * v1186));
                  v1188 = v1189.quot;
                  v1185 += *(_QWORD *)(v1187 + 8 * v1186--) * v1189.rem;
                }
                while (v1186 != -1);
              }
              v1190 = *(_QWORD *)*a2;
              v1191 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1190) >> 2;
              v1192 = 0;
              v1193 = (v1191 - 1);
              if ((int)v1191 - 1 >= 0)
              {
                v1194 = *(_QWORD *)(*a2 + 24);
                v1195 = v1882;
                do
                {
                  v1196 = ldiv(v1195, *(int *)(v1190 + 4 * v1193));
                  v1195 = v1196.quot;
                  v1192 += *(_QWORD *)(v1194 + 8 * v1193--) * v1196.rem;
                }
                while (v1193 != -1);
              }
              if ((int)v1852 >= 1)
              {
                v1197 = 0;
                v1198 = v1775;
                do
                {
                  *(_BYTE *)(v1182 + v1197) = *(_BYTE *)(__Ni + (int)v1185 + v1197)
                                            - *((_BYTE *)v1789 + (int)v1192 + v1197);
                  --v1198;
                  ++v1197;
                }
                while (v1198 > 1);
                v86 = *(_QWORD **)a3;
              }
              v1182 += v1835;
              v1882 += v1835;
            }
            while (v1882 < v86[6]);
          }
          break;
        default:
LABEL_387:
          switch(v320)
          {
            case 1uLL:
              if (v86[6])
              {
                v334 = 0;
                v335 = 0;
                v336 = 0;
                v337 = *(_QWORD *)(v87 + 152);
                v338 = v201[19];
                v339 = v86[19];
                do
                {
                  *(_BYTE *)(v339 + v334) = *(_BYTE *)(v337 + v336) - *((_BYTE *)v338 + v335);
                  v336 += **(_QWORD **)(*a1 + 24);
                  v335 += **(_QWORD **)(*a2 + 24);
                  ++v334;
                }
                while (v334 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v645 = *v88;
              if (*v88)
              {
                v646 = 0;
                v647 = 0;
                v648 = 0;
                v649 = 0;
                v650 = *(_QWORD *)(v87 + 152);
                v651 = v201[19];
                v652 = v86[19];
                do
                {
                  if (v88[1])
                  {
                    v653 = 0;
                    do
                    {
                      *(_BYTE *)(v652 + v647 + v653) = *(_BYTE *)(v650 + v649) - *((_BYTE *)v651 + v648);
                      v87 = *a1;
                      v654 = *(_QWORD **)(*a1 + 24);
                      v655 = v654[1];
                      v649 += v655;
                      v201 = (int **)*a2;
                      v656 = *(int **)(*a2 + 24);
                      v657 = *((_QWORD *)v656 + 1);
                      v648 += v657;
                      ++v653;
                      v88 = *(int **)*a1;
                      v658 = v88[1];
                    }
                    while (v653 < v658);
                    v645 = *v88;
                    v202 = *v201;
                    v647 += v653;
                  }
                  else
                  {
                    v658 = 0;
                    v654 = *(_QWORD **)(v87 + 24);
                    v655 = v654[1];
                    v656 = v201[3];
                    v657 = *((_QWORD *)v656 + 1);
                  }
                  v649 = *v654 + v649 - v658 * v655;
                  v648 = *(_QWORD *)v656 + v648 - v657 * v202[1];
                  ++v646;
                }
                while (v646 < v645);
              }
              break;
            case 3uLL:
              v659 = *v88;
              if (*v88)
              {
                v660 = 0;
                v661 = 0;
                v662 = 0;
                v663 = 0;
                v664 = *(_QWORD *)(v87 + 152);
                v665 = v201[19];
                v666 = v86[19];
                do
                {
                  if (v88[1])
                  {
                    v667 = 0;
                    do
                    {
                      if (v88[2])
                      {
                        v668 = 0;
                        do
                        {
                          *(_BYTE *)(v666 + v661 + v668) = *(_BYTE *)(v664 + v663) - *((_BYTE *)v665 + v662);
                          v87 = *a1;
                          v669 = *(_QWORD **)(*a1 + 24);
                          v670 = v669[2];
                          v663 += v670;
                          v201 = (int **)*a2;
                          v671 = *(int **)(*a2 + 24);
                          v672 = *((_QWORD *)v671 + 2);
                          v662 += v672;
                          ++v668;
                          v88 = *(int **)*a1;
                          v673 = v88[2];
                        }
                        while (v668 < v673);
                        v202 = *v201;
                        v661 += v668;
                      }
                      else
                      {
                        v673 = 0;
                        v669 = *(_QWORD **)(v87 + 24);
                        v670 = v669[2];
                        v671 = v201[3];
                        v672 = *((_QWORD *)v671 + 2);
                      }
                      v674 = v669[1];
                      v663 = v674 + v663 - v673 * v670;
                      v662 = *((_QWORD *)v671 + 1) + v662 - v672 * v202[2];
                      ++v667;
                      v675 = v88[1];
                    }
                    while (v667 < v675);
                    v659 = *v88;
                  }
                  else
                  {
                    v675 = 0;
                    v669 = *(_QWORD **)(v87 + 24);
                    v674 = v669[1];
                  }
                  v663 = *v669 + v663 - v675 * v674;
                  v662 = *(_QWORD *)v201[3] + v662 - *((_QWORD *)v201[3] + 1) * v202[1];
                  ++v660;
                }
                while (v660 < v659);
              }
              break;
            case 4uLL:
              v676 = *v88;
              if (*v88)
              {
                v677 = 0;
                v678 = 0;
                v679 = 0;
                v680 = 0;
                v681 = *(_QWORD *)(v87 + 152);
                v682 = v201[19];
                v683 = v86[19];
                do
                {
                  if (v88[1])
                  {
                    v684 = 0;
                    do
                    {
                      if (v88[2])
                      {
                        v685 = 0;
                        do
                        {
                          if (v88[3])
                          {
                            v686 = 0;
                            do
                            {
                              *(_BYTE *)(v683 + v678 + v686) = *(_BYTE *)(v681 + v680) - *((_BYTE *)v682 + v679);
                              v87 = *a1;
                              v687 = *(_QWORD **)(*a1 + 24);
                              v688 = v687[3];
                              v680 += v688;
                              v201 = (int **)*a2;
                              v689 = *(int **)(*a2 + 24);
                              v690 = *((_QWORD *)v689 + 3);
                              v679 += v690;
                              ++v686;
                              v88 = *(int **)*a1;
                              v691 = v88[3];
                            }
                            while (v686 < v691);
                            v202 = *v201;
                            v678 += v686;
                          }
                          else
                          {
                            v691 = 0;
                            v687 = *(_QWORD **)(v87 + 24);
                            v688 = v687[3];
                            v689 = v201[3];
                            v690 = *((_QWORD *)v689 + 3);
                          }
                          v692 = v687[2];
                          v680 = v692 + v680 - v691 * v688;
                          v679 = *((_QWORD *)v689 + 2) + v679 - v690 * v202[3];
                          ++v685;
                          v693 = v88[2];
                        }
                        while (v685 < v693);
                      }
                      else
                      {
                        v693 = 0;
                        v687 = *(_QWORD **)(v87 + 24);
                        v692 = v687[2];
                      }
                      v680 = v687[1] + v680 - v693 * v692;
                      v679 = *((_QWORD *)v201[3] + 1) + v679 - *((_QWORD *)v201[3] + 2) * v202[2];
                      ++v684;
                      v694 = v88[1];
                    }
                    while (v684 < v694);
                    v676 = *v88;
                  }
                  else
                  {
                    v694 = 0;
                  }
                  v680 = **(_QWORD **)(v87 + 24) + v680 - *(_QWORD *)(*(_QWORD *)(v87 + 24) + 8) * v694;
                  v679 = *(_QWORD *)v201[3] + v679 - *((_QWORD *)v201[3] + 1) * v202[1];
                  ++v677;
                }
                while (v677 < v676);
              }
              break;
            default:
              if (v86[6])
              {
                v629 = 0;
                v1858 = v201[19];
                v1878 = *(_QWORD *)(v87 + 152);
                v630 = v86[19];
                do
                {
                  v631 = *(_QWORD *)*a1;
                  v632 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v631) >> 2;
                  v633 = 0;
                  v634 = (v632 - 1);
                  if ((int)v632 - 1 >= 0)
                  {
                    v635 = *(_QWORD *)(*a1 + 24);
                    v636 = v629;
                    do
                    {
                      v637 = ldiv(v636, *(int *)(v631 + 4 * v634));
                      v636 = v637.quot;
                      v633 += *(_QWORD *)(v635 + 8 * v634--) * v637.rem;
                    }
                    while (v634 != -1);
                  }
                  v638 = *(_QWORD *)*a2;
                  v639 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v638) >> 2;
                  v640 = 0;
                  v641 = (v639 - 1);
                  if ((int)v639 - 1 >= 0)
                  {
                    v642 = *(_QWORD *)(*a2 + 24);
                    v643 = v629;
                    do
                    {
                      v644 = ldiv(v643, *(int *)(v638 + 4 * v641));
                      v643 = v644.quot;
                      v640 += *(_QWORD *)(v642 + 8 * v641--) * v644.rem;
                    }
                    while (v641 != -1);
                  }
                  *(_BYTE *)(v630 + v629++) = *(_BYTE *)(v1878 + (int)v633) - *((_BYTE *)v1858 + (int)v640);
                }
                while (v629 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          v118 = *(_DWORD *)(*a2 + 160);
          if (v118 >= 1)
          {
            v119 = **(_DWORD **)(*a1 + 152);
            v120 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v121 = *(int **)(*a2 + 152);
            v122 = v118 + 1;
            do
            {
              v123 = *v121++;
              *v120++ = v119 - v123;
              --v122;
            }
            while (v122 > 1);
          }
          return;
        case 2:
          goto LABEL_23;
        case 3:
          v124 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v124 >= 1)
          {
            v125 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v126 = *(int **)(*a2 + 152);
            v127 = *(int **)(*a1 + 152);
            v128 = v124 + 1;
            do
            {
              v130 = *v127++;
              v129 = v130;
              v131 = *v126++;
              *v125++ = v129 - v131;
              --v128;
            }
            while (v128 > 1);
          }
          return;
        default:
          v109 = *(_QWORD **)a3;
          v110 = *a1;
          v111 = *(int **)*a1;
          v112 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v111) >> 2;
          v113 = (v112 - 1);
          if ((int)v113 >= -1)
            v114 = -1;
          else
            v114 = v112 - 1;
          v115 = v114 + 1;
          v116 = v112 + 1;
          break;
      }
      while (1)
      {
        v117 = v116 - 2;
        if (v116 - 2 < 0)
          break;
        --v116;
        if (*(_QWORD *)(*(_QWORD *)(v110 + 24) + 8 * v117) != *(_QWORD *)(v109[3] + 8 * v117))
          goto LABEL_156;
      }
      v116 = v115;
LABEL_156:
      v208 = *a2;
      v209 = *(int **)*a2;
      v210 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v209) >> 2;
      v211 = (v210 - 1);
      if ((int)v211 >= -1)
        v212 = -1;
      else
        v212 = v210 - 1;
      v213 = v212 + 1;
      v214 = v210 + 1;
      while (1)
      {
        v215 = v214 - 2;
        if (v214 - 2 < 0)
          break;
        --v214;
        if (*(_QWORD *)(*(_QWORD *)(v208 + 24) + 8 * v215) != *(_QWORD *)(v109[3] + 8 * v215))
          goto LABEL_200;
      }
      v214 = v213;
LABEL_200:
      v240 = v112 + 1;
      while (1)
      {
        v241 = v240 - 2;
        if (v240 - 2 < 0)
          break;
        --v240;
        if (*(_QWORD *)(*(_QWORD *)(v110 + 24) + 8 * v241))
          goto LABEL_235;
      }
      v240 = v115;
LABEL_235:
      v254 = v210 + 1;
      while (1)
      {
        v255 = v254 - 2;
        if (v254 - 2 < 0)
          break;
        --v254;
        if (*(_QWORD *)(*(_QWORD *)(v208 + 24) + 8 * v255))
          goto LABEL_393;
      }
      v254 = v213;
LABEL_393:
      v340 = (uint64_t)(v109[1] - *v109) >> 2;
      if (v116 <= v214)
        v341 = v214;
      else
        v341 = v116;
      if (v116 <= v254)
        v116 = v254;
      if (v240 > v214)
        v214 = v240;
      if (v340 > v214)
      {
        v342 = 1;
      }
      else
      {
        v214 = (uint64_t)(v109[1] - *v109) >> 2;
        v342 = 4;
      }
      if (v340 > v116)
      {
        v343 = 2;
      }
      else
      {
        v116 = v214;
        v343 = v342;
      }
      if (v340 > v341)
      {
        v116 = v341;
        v343 = 3;
      }
      v1853 = v211;
      v1873 = v113;
      if (!v116)
        goto LABEL_423;
      v344 = *(_QWORD *)(v109[3] + 8 * (v116 - 1));
      if (v344 < 0x10)
        goto LABEL_423;
      switch(v343)
      {
        case 1:
          if (v116 == 2)
          {
            v1559 = *v111;
            if (*v111)
            {
              v1560 = 0;
              v1561 = 0;
              v1562 = 0;
              v1563 = *(_QWORD *)(v110 + 152);
              v1564 = *(_QWORD *)(v208 + 152);
              v1565 = v109[19];
              v1566 = *(uint64_t **)(v110 + 24);
              v1567 = *v1566;
              v1568 = v1566[1];
              v1569 = *(uint64_t **)(v208 + 24);
              v1570 = *v1569;
              v1571 = v1569[1];
              v1572 = v111[1];
              v1573 = v1572;
              do
              {
                if (v1573)
                {
                  v1574 = 0;
                  v1575 = v1564 + 4 * v1561;
                  do
                  {
                    if ((int)v344 >= 1)
                    {
                      v1576 = 0;
                      v1577 = *(_DWORD *)(v1563 + 4 * v1562);
                      v1578 = v344 + 1;
                      do
                      {
                        *(_DWORD *)(v1565 + v1576) = v1577 - *(_DWORD *)(v1575 + v1576);
                        --v1578;
                        v1576 += 4;
                      }
                      while (v1578 > 1);
                      v1572 = v111[1];
                    }
                    v1562 += v1568;
                    v1561 += v1571;
                    v1565 += 4 * (int)v344;
                    ++v1574;
                    v1575 += 4 * v1571;
                  }
                  while (v1574 < v1572);
                  v1579 = v1572;
                  v1559 = *v111;
                  v1573 = v1572;
                }
                else
                {
                  v1579 = 0;
                }
                v1562 = v1562 + v1567 - v1579 * v1568;
                v1561 = v1561 + v1570 - v1571 * v209[1];
                ++v1560;
              }
              while (v1560 < v1559);
            }
          }
          else
          {
            v1831 = *a1;
            if (v116 == 1)
            {
              v1011 = *v111;
              if (*v111)
              {
                v1012 = 0;
                v1013 = 0;
                v1014 = *(_QWORD *)(v110 + 152);
                v1015 = *(_QWORD *)(v208 + 152);
                v1016 = v109[19];
                v1017 = **(_QWORD **)(v110 + 24);
                v1018 = 4 * **(_QWORD **)(v208 + 24);
                do
                {
                  if ((int)v344 >= 1)
                  {
                    v1019 = 0;
                    v1020 = *(_DWORD *)(v1014 + 4 * v1013);
                    v1021 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v1016 + v1019) = v1020 - *(_DWORD *)(v1015 + v1019);
                      --v1021;
                      v1019 += 4;
                    }
                    while (v1021 > 1);
                    v1011 = *v111;
                  }
                  v1013 += v1017;
                  ++v1012;
                  v1016 += 4 * (int)v344;
                  v1015 += v1018;
                }
                while (v1012 < v1011);
              }
            }
            else
            {
              v1797 = v109[6];
              if (v1797)
              {
                v1580 = 0;
                v1758 = *(_QWORD *)(v208 + 152);
                v1768 = *(_QWORD *)(v110 + 152);
                v1581 = v109[19];
                do
                {
                  v1582 = v1873;
                  if ((v1873 & 0x80000000) != 0)
                  {
                    LODWORD(v1583) = 0;
                  }
                  else
                  {
                    v1583 = 0;
                    v1584 = *(_QWORD *)(v1831 + 24);
                    v1585 = v1580;
                    do
                    {
                      v1586 = ldiv(v1585, v111[v1582]);
                      v1585 = v1586.quot;
                      v1583 += *(_QWORD *)(v1584 + 8 * v1582--) * v1586.rem;
                    }
                    while (v1582 != -1);
                  }
                  v1587 = v1853;
                  if ((v1853 & 0x80000000) != 0)
                  {
                    LODWORD(v1588) = 0;
                  }
                  else
                  {
                    v1588 = 0;
                    v1589 = *(_QWORD *)(v208 + 24);
                    v1590 = v1580;
                    do
                    {
                      v1591 = ldiv(v1590, v209[v1587]);
                      v1590 = v1591.quot;
                      v1588 += *(_QWORD *)(v1589 + 8 * v1587--) * v1591.rem;
                    }
                    while (v1587 != -1);
                  }
                  if ((int)v344 >= 1)
                  {
                    v1592 = 0;
                    v1593 = *(_DWORD *)(v1768 + 4 * (int)v1583);
                    v1594 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v1581 + v1592) = v1593 - *(_DWORD *)(v1758 + 4 * (int)v1588 + v1592);
                      --v1594;
                      v1592 += 4;
                    }
                    while (v1594 > 1);
                  }
                  v1581 += 4 * (int)v344;
                  v1580 += (int)v344;
                }
                while (v1580 < v1797);
              }
            }
          }
          break;
        case 2:
          if (v116 == 2)
          {
            v1595 = *v111;
            if (*v111)
            {
              v1596 = 0;
              v1597 = 0;
              v1867 = 0;
              v1891 = *(_QWORD *)(v110 + 152);
              v1598 = (int *)v109[19];
              v1843 = *(_QWORD *)(v208 + 152);
              v1599 = (int)v344;
              v1600 = 4 * (int)v344;
              do
              {
                if (v111[1])
                {
                  v1601 = 0;
                  do
                  {
                    __B = -*(_DWORD *)(v1843 + 4 * v1596);
                    vDSP_vsaddi((const int *)(v1891 + 4 * v1597), 1, &__B, v1598, 1, v1599);
                    v110 = *a1;
                    v1602 = *(_QWORD **)(*a1 + 24);
                    v1603 = v1602[1];
                    v1597 += v1603;
                    v1604 = *(_QWORD **)(*a2 + 24);
                    v1605 = v1604[1];
                    v1596 += v1605;
                    ++v1601;
                    v111 = *(int **)*a1;
                    v1606 = v111[1];
                    v1598 = (int *)((char *)v1598 + v1600);
                  }
                  while (v1601 < v1606);
                  v1595 = *v111;
                  v208 = *a2;
                  v209 = *(int **)*a2;
                }
                else
                {
                  v1606 = 0;
                  v1602 = *(_QWORD **)(v110 + 24);
                  v1603 = v1602[1];
                  v1604 = *(_QWORD **)(v208 + 24);
                  v1605 = v1604[1];
                }
                v1597 = *v1602 + v1597 - v1606 * v1603;
                v1596 = *v1604 + v1596 - v1605 * v209[1];
                ++v1867;
              }
              while (v1867 < v1595);
            }
          }
          else if (v116 == 1)
          {
            if (*v111)
            {
              v1022 = 0;
              v1023 = 0;
              v1024 = 0;
              v1025 = *(_QWORD *)(v110 + 152);
              v1026 = *(_QWORD *)(v208 + 152);
              v1027 = (int)v344;
              v1028 = 4 * (int)v344;
              v1029 = (int *)v109[19];
              do
              {
                __B = -*(_DWORD *)(v1026 + 4 * v1023);
                vDSP_vsaddi((const int *)(v1025 + 4 * v1024), 1, &__B, v1029, 1, v1027);
                v1024 += **(_QWORD **)(*a1 + 24);
                v1023 += **(_QWORD **)(*a2 + 24);
                ++v1022;
                v1029 = (int *)((char *)v1029 + v1028);
              }
              while (v1022 < **(int **)*a1);
            }
          }
          else if (v109[6])
          {
            v1607 = 0;
            v1868 = *(_QWORD *)(v208 + 152);
            v1892 = *(_QWORD *)(v110 + 152);
            v1844 = (int)v344;
            v1608 = (int *)v109[19];
            do
            {
              v1609 = *(_QWORD *)*a1;
              v1610 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1609) >> 2;
              v1611 = 0;
              v1612 = (v1610 - 1);
              if ((int)v1610 - 1 >= 0)
              {
                v1613 = *(_QWORD *)(*a1 + 24);
                v1614 = v1607;
                do
                {
                  v1615 = ldiv(v1614, *(int *)(v1609 + 4 * v1612));
                  v1614 = v1615.quot;
                  v1611 += *(_QWORD *)(v1613 + 8 * v1612--) * v1615.rem;
                }
                while (v1612 != -1);
              }
              v1616 = *(_QWORD *)*a2;
              v1617 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1616) >> 2;
              v1618 = 0;
              v1619 = (v1617 - 1);
              if ((int)v1617 - 1 >= 0)
              {
                v1620 = *(_QWORD *)(*a2 + 24);
                v1621 = v1607;
                do
                {
                  v1622 = ldiv(v1621, *(int *)(v1616 + 4 * v1619));
                  v1621 = v1622.quot;
                  v1618 += *(_QWORD *)(v1620 + 8 * v1619--) * v1622.rem;
                }
                while (v1619 != -1);
              }
              __B = -*(_DWORD *)(v1868 + 4 * (int)v1618);
              vDSP_vsaddi((const int *)(v1892 + 4 * (int)v1611), 1, &__B, v1608, 1, v1844);
              v1608 += v1844;
              v1607 += v1844;
            }
            while (v1607 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v116 == 2)
          {
            v1199 = *v111;
            if (*v111)
            {
              v1200 = 0;
              v1201 = 0;
              v1202 = 0;
              v1203 = *(_QWORD *)(v110 + 152);
              v1204 = *(_QWORD *)(v208 + 152);
              v1205 = v109[19];
              v1206 = *(uint64_t **)(v110 + 24);
              v1207 = *v1206;
              v1208 = v1206[1];
              v1209 = *(uint64_t **)(v208 + 24);
              v1210 = *v1209;
              v1211 = v1209[1];
              v1212 = v111[1];
              v1213 = v1212;
              do
              {
                if (v1213)
                {
                  v1214 = 0;
                  v1215 = v1204 + 4 * v1201;
                  v1216 = v1203 + 4 * v1202;
                  do
                  {
                    if ((int)v344 >= 1)
                    {
                      v1217 = 0;
                      v1218 = v344 + 1;
                      do
                      {
                        *(_DWORD *)(v1205 + v1217) = *(_DWORD *)(v1216 + v1217) - *(_DWORD *)(v1215 + v1217);
                        --v1218;
                        v1217 += 4;
                      }
                      while (v1218 > 1);
                      v1212 = v111[1];
                    }
                    v1202 += v1208;
                    v1201 += v1211;
                    v1205 += 4 * (int)v344;
                    ++v1214;
                    v1215 += 4 * v1211;
                    v1216 += 4 * v1208;
                  }
                  while (v1214 < v1212);
                  v1219 = v1212;
                  v1199 = *v111;
                  v1213 = v1212;
                }
                else
                {
                  v1219 = 0;
                }
                v1202 = v1202 + v1207 - v1219 * v1208;
                v1201 = v1201 + v1210 - v1211 * v209[1];
                ++v1200;
              }
              while (v1200 < v1199);
            }
          }
          else
          {
            v1818 = *a1;
            if (v116 == 1)
            {
              v345 = *v111;
              if (*v111)
              {
                v346 = 0;
                v347 = *(_QWORD *)(v110 + 152);
                v348 = *(_QWORD *)(v208 + 152);
                v349 = v109[19];
                v350 = 4 * **(_QWORD **)(v208 + 24);
                v351 = 4 * **(_QWORD **)(v110 + 24);
                do
                {
                  if ((int)v344 >= 1)
                  {
                    v352 = 0;
                    v353 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v349 + v352) = *(_DWORD *)(v347 + v352) - *(_DWORD *)(v348 + v352);
                      --v353;
                      v352 += 4;
                    }
                    while (v353 > 1);
                    v345 = *v111;
                  }
                  ++v346;
                  v349 += 4 * (int)v344;
                  v348 += v350;
                  v347 += v351;
                }
                while (v346 < v345);
              }
            }
            else
            {
              v1790 = v109[6];
              if (v1790)
              {
                v1220 = 0;
                v1754 = *(_QWORD *)(v208 + 152);
                v1763 = *(_QWORD *)(v110 + 152);
                v1221 = v109[19];
                do
                {
                  v1222 = v1873;
                  if ((v1873 & 0x80000000) != 0)
                  {
                    LODWORD(v1223) = 0;
                  }
                  else
                  {
                    v1223 = 0;
                    v1224 = *(_QWORD *)(v1818 + 24);
                    v1225 = v1220;
                    do
                    {
                      v1226 = ldiv(v1225, v111[v1222]);
                      v1225 = v1226.quot;
                      v1223 += *(_QWORD *)(v1224 + 8 * v1222--) * v1226.rem;
                    }
                    while (v1222 != -1);
                  }
                  v1227 = v1853;
                  if ((v1853 & 0x80000000) != 0)
                  {
                    LODWORD(v1228) = 0;
                  }
                  else
                  {
                    v1228 = 0;
                    v1229 = *(_QWORD *)(v208 + 24);
                    v1230 = v1220;
                    do
                    {
                      v1231 = ldiv(v1230, v209[v1227]);
                      v1230 = v1231.quot;
                      v1228 += *(_QWORD *)(v1229 + 8 * v1227--) * v1231.rem;
                    }
                    while (v1227 != -1);
                  }
                  if ((int)v344 >= 1)
                  {
                    v1232 = 0;
                    v1233 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v1221 + v1232) = *(_DWORD *)(v1763 + 4 * (int)v1223 + v1232)
                                                 - *(_DWORD *)(v1754 + 4 * (int)v1228 + v1232);
                      --v1233;
                      v1232 += 4;
                    }
                    while (v1233 > 1);
                  }
                  v1221 += 4 * (int)v344;
                  v1220 += (int)v344;
                }
                while (v1220 < v1790);
              }
            }
          }
          break;
        default:
LABEL_423:
          switch(v340)
          {
            case 1uLL:
              v354 = v109[6];
              if (v354)
              {
                v355 = *(_DWORD **)(v110 + 152);
                v356 = *(_DWORD **)(v208 + 152);
                v357 = (_DWORD *)v109[19];
                v358 = 4 * **(_QWORD **)(v208 + 24);
                v359 = 4 * **(_QWORD **)(v110 + 24);
                do
                {
                  *v357++ = *v355 - *v356;
                  v356 = (_DWORD *)((char *)v356 + v358);
                  v355 = (_DWORD *)((char *)v355 + v359);
                  --v354;
                }
                while (v354);
              }
              break;
            case 2uLL:
              v708 = *v111;
              if (*v111)
              {
                v709 = 0;
                v710 = 0;
                v711 = 0;
                v712 = 0;
                v713 = *(_QWORD *)(v110 + 152);
                v714 = *(_QWORD *)(v208 + 152);
                v715 = v109[19];
                v716 = *(uint64_t **)(v110 + 24);
                v717 = *v716;
                v718 = v716[1];
                v719 = *(uint64_t **)(v208 + 24);
                v721 = *v719;
                v720 = v719[1];
                v722 = v111[1];
                do
                {
                  if (v722)
                  {
                    for (m = 0; m < v722; ++m)
                    {
                      *(_DWORD *)(v715 + 4 * v710 + 4 * m) = *(_DWORD *)(v713 + 4 * v712) - *(_DWORD *)(v714 + 4 * v711);
                      v712 += v718;
                      v711 += v720;
                      v722 = v111[1];
                    }
                    v724 = v722;
                    v708 = *v111;
                    v710 += m;
                  }
                  else
                  {
                    v724 = 0;
                  }
                  v712 = v712 + v717 - v724 * v718;
                  v711 = v711 + v721 - v720 * v209[1];
                  ++v709;
                }
                while (v709 < v708);
              }
              break;
            case 3uLL:
              v725 = *v111;
              if (*v111)
              {
                v726 = 0;
                v727 = 0;
                v728 = 0;
                v729 = 0;
                v730 = *(_QWORD *)(v110 + 152);
                v731 = *(_QWORD *)(v208 + 152);
                v732 = v109[19];
                v733 = *(uint64_t **)(v110 + 24);
                v734 = *v733;
                v735 = v733[1];
                v736 = *(uint64_t **)(v208 + 24);
                v737 = *v736;
                v738 = v736[1];
                v739 = v111[1];
                v740 = v739;
                do
                {
                  if (v740)
                  {
                    v741 = 0;
                    v742 = v733[2];
                    v743 = v736[2];
                    v744 = v111[2];
                    do
                    {
                      if (v744)
                      {
                        for (n = 0; n < v744; ++n)
                        {
                          *(_DWORD *)(v732 + 4 * v727 + 4 * n) = *(_DWORD *)(v730 + 4 * v729)
                                                               - *(_DWORD *)(v731 + 4 * v728);
                          v729 += v742;
                          v728 += v743;
                          v744 = v111[2];
                        }
                        v746 = v744;
                        v739 = v111[1];
                        v727 += n;
                      }
                      else
                      {
                        v746 = 0;
                      }
                      v729 = v729 + v735 - v746 * v742;
                      v728 = v728 + v738 - v743 * v209[2];
                      ++v741;
                    }
                    while (v741 < v739);
                    v747 = v739;
                    v725 = *v111;
                    v740 = v739;
                  }
                  else
                  {
                    v747 = 0;
                  }
                  v729 = v729 + v734 - v747 * v735;
                  v728 = v728 + v737 - v738 * v209[1];
                  ++v726;
                }
                while (v726 < v725);
              }
              break;
            case 4uLL:
              v748 = *v111;
              if (*v111)
              {
                v749 = 0;
                v750 = 0;
                v751 = 0;
                v752 = 0;
                v753 = *(_QWORD *)(v110 + 152);
                v754 = *(_QWORD *)(v208 + 152);
                v755 = v109[19];
                v756 = *(uint64_t **)(v110 + 24);
                v757 = *v756;
                v758 = v756[1];
                v759 = *(uint64_t **)(v208 + 24);
                v760 = *v759;
                v761 = v759[1];
                v762 = v111[1];
                v763 = v762;
                do
                {
                  if (v763)
                  {
                    v764 = 0;
                    v765 = v756[2];
                    v766 = v759[2];
                    v767 = v111[2];
                    v768 = v767;
                    do
                    {
                      if (v768)
                      {
                        v769 = 0;
                        v770 = v756[3];
                        v771 = v759[3];
                        v772 = v111[3];
                        do
                        {
                          if (v772)
                          {
                            for (ii = 0; ii < v772; ++ii)
                            {
                              *(_DWORD *)(v755 + 4 * v750 + 4 * ii) = *(_DWORD *)(v753 + 4 * v752)
                                                                    - *(_DWORD *)(v754 + 4 * v751);
                              v752 += v770;
                              v751 += v771;
                              v772 = v111[3];
                            }
                            v774 = v772;
                            v767 = v111[2];
                            v750 += ii;
                          }
                          else
                          {
                            v774 = 0;
                          }
                          v752 = v752 + v765 - v774 * v770;
                          v751 = v751 + v766 - v771 * v209[3];
                          ++v769;
                        }
                        while (v769 < v767);
                        v775 = v767;
                        v762 = v111[1];
                        v768 = v767;
                      }
                      else
                      {
                        v775 = 0;
                      }
                      v752 = v752 + v758 - v775 * v765;
                      v751 = v751 + v761 - v766 * v209[2];
                      ++v764;
                    }
                    while (v764 < v762);
                    v776 = v762;
                    v748 = *v111;
                    v763 = v762;
                  }
                  else
                  {
                    v776 = 0;
                  }
                  v752 = v752 + v757 - v776 * v758;
                  v751 = v751 + v760 - v761 * v209[1];
                  ++v749;
                }
                while (v749 < v748);
              }
              break;
            default:
              v695 = v109[6];
              if (v695)
              {
                v696 = v110;
                v697 = 0;
                __Nc = *(_QWORD *)(v208 + 152);
                v1824 = *(_QWORD *)(v110 + 152);
                v1782 = v109[19];
                do
                {
                  v698 = v1873;
                  if ((v1873 & 0x80000000) != 0)
                  {
                    LODWORD(v699) = 0;
                  }
                  else
                  {
                    v699 = 0;
                    v700 = *(_QWORD *)(v696 + 24);
                    v701 = v697;
                    do
                    {
                      v702 = ldiv(v701, v111[v698]);
                      v701 = v702.quot;
                      v699 += *(_QWORD *)(v700 + 8 * v698--) * v702.rem;
                    }
                    while (v698 != -1);
                  }
                  v703 = v1853;
                  if ((v1853 & 0x80000000) != 0)
                  {
                    LODWORD(v704) = 0;
                  }
                  else
                  {
                    v704 = 0;
                    v705 = *(_QWORD *)(v208 + 24);
                    v706 = v697;
                    do
                    {
                      v707 = ldiv(v706, v209[v703]);
                      v706 = v707.quot;
                      v704 += *(_QWORD *)(v705 + 8 * v703--) * v707.rem;
                    }
                    while (v703 != -1);
                  }
                  *(_DWORD *)(v1782 + 4 * v697++) = *(_DWORD *)(v1824 + 4 * (int)v699)
                                                  - *(_DWORD *)(__Nc + 4 * (int)v704);
                }
                while (v697 != v695);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v24)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a1 + 152) - **(_QWORD **)(*a2 + 152);
          return;
        case 1:
          v141 = *(_DWORD *)(*a2 + 160);
          if (v141 >= 1)
          {
            v142 = **(_QWORD **)(*a1 + 152);
            v143 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v144 = *(uint64_t **)(*a2 + 152);
            v145 = v141 + 1;
            do
            {
              v146 = *v144++;
              *v143++ = v142 - v146;
              --v145;
            }
            while (v145 > 1);
          }
          return;
        case 2:
LABEL_23:
          v26 = *(int **)(*(_QWORD *)a3 + 152);
          v27 = *(const int **)(*a1 + 152);
          v28 = *(_QWORD *)(*a1 + 160);
          v29 = **(_DWORD **)(*a2 + 152);
LABEL_72:
          v100 = -v29;
          goto LABEL_73;
        case 3:
          v147 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v147 >= 1)
          {
            v148 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v149 = *(uint64_t **)(*a2 + 152);
            v150 = *(uint64_t **)(*a1 + 152);
            v151 = v147 + 1;
            do
            {
              v153 = *v150++;
              v152 = v153;
              v154 = *v149++;
              *v148++ = v152 - v154;
              --v151;
            }
            while (v151 > 1);
          }
          return;
        default:
          v132 = *(_QWORD **)a3;
          v133 = *a1;
          v134 = *(int **)*a1;
          v135 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v134) >> 2;
          v136 = (v135 - 1);
          if ((int)v136 >= -1)
            v137 = -1;
          else
            v137 = v135 - 1;
          v138 = v137 + 1;
          v139 = v135 + 1;
          break;
      }
      while (1)
      {
        v140 = v139 - 2;
        if (v139 - 2 < 0)
          break;
        --v139;
        if (*(_QWORD *)(*(_QWORD *)(v133 + 24) + 8 * v140) != *(_QWORD *)(v132[3] + 8 * v140))
          goto LABEL_164;
      }
      v139 = v138;
LABEL_164:
      v216 = *a2;
      v217 = *(int **)*a2;
      v218 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v217) >> 2;
      v219 = (v218 - 1);
      if ((int)v219 >= -1)
        v220 = -1;
      else
        v220 = v218 - 1;
      v221 = v220 + 1;
      v222 = v218 + 1;
      while (1)
      {
        v223 = v222 - 2;
        if (v222 - 2 < 0)
          break;
        --v222;
        if (*(_QWORD *)(*(_QWORD *)(v216 + 24) + 8 * v223) != *(_QWORD *)(v132[3] + 8 * v223))
          goto LABEL_205;
      }
      v222 = v221;
LABEL_205:
      v242 = v135 + 1;
      while (1)
      {
        v243 = v242 - 2;
        if (v242 - 2 < 0)
          break;
        --v242;
        if (*(_QWORD *)(*(_QWORD *)(v133 + 24) + 8 * v243))
          goto LABEL_240;
      }
      v242 = v138;
LABEL_240:
      v256 = v218 + 1;
      while (1)
      {
        v257 = v256 - 2;
        if (v256 - 2 < 0)
          break;
        --v256;
        if (*(_QWORD *)(*(_QWORD *)(v216 + 24) + 8 * v257))
          goto LABEL_429;
      }
      v256 = v221;
LABEL_429:
      v360 = (uint64_t)(v132[1] - *v132) >> 2;
      if (v139 <= v222)
        v361 = v222;
      else
        v361 = v139;
      if (v139 <= v256)
        v139 = v256;
      if (v242 > v222)
        v222 = v242;
      if (v360 > v222)
      {
        v362 = 1;
      }
      else
      {
        v222 = (uint64_t)(v132[1] - *v132) >> 2;
        v362 = 4;
      }
      if (v360 > v139)
      {
        v363 = 2;
      }
      else
      {
        v139 = v222;
        v363 = v362;
      }
      if (v360 > v361)
      {
        v139 = v361;
        v363 = 3;
      }
      v1854 = v219;
      v1874 = v136;
      if (!v139)
        goto LABEL_458;
      v364 = *(_QWORD *)(v132[3] + 8 * (v139 - 1));
      if (v364 < 0x10)
        goto LABEL_458;
      switch(v363)
      {
        case 1:
          if (v139 == 2)
          {
            v1623 = *v134;
            if ((_DWORD)v1623)
            {
              v1624 = 0;
              v1625 = 0;
              v1626 = 0;
              v1627 = *(_QWORD *)(v133 + 152);
              v1628 = *(_QWORD *)(v216 + 152);
              v1629 = v132[19];
              v1630 = v134[1];
              v1631 = *(uint64_t **)(v133 + 24);
              v1632 = *v1631;
              v1633 = v1631[1];
              v1634 = *(uint64_t **)(v216 + 24);
              v1635 = *v1634;
              v1636 = v1634[1];
              if (v1630 <= 1)
                v1637 = 1;
              else
                v1637 = v134[1];
              v1638 = v1632 - v1633 * v1630;
              v1639 = v1635 - v1636 * v217[1];
              do
              {
                if ((_DWORD)v1630)
                {
                  v1640 = 0;
                  v1641 = v1628 + 8 * v1625;
                  do
                  {
                    if ((int)v364 >= 1)
                    {
                      v1642 = 0;
                      v1643 = *(_QWORD *)(v1627 + 8 * v1626);
                      v1644 = v364 + 1;
                      do
                      {
                        *(_QWORD *)(v1629 + v1642) = v1643 - *(_QWORD *)(v1641 + v1642);
                        --v1644;
                        v1642 += 8;
                      }
                      while (v1644 > 1);
                    }
                    v1626 += v1633;
                    v1625 += v1636;
                    v1629 += 8 * (int)v364;
                    ++v1640;
                    v1641 += 8 * v1636;
                  }
                  while (v1640 != v1637);
                }
                v1626 += v1638;
                v1625 += v1639;
                ++v1624;
              }
              while (v1624 != v1623);
            }
          }
          else
          {
            v1832 = *a1;
            if (v139 == 1)
            {
              v1030 = *v134;
              if ((_DWORD)v1030)
              {
                v1031 = 0;
                v1032 = 0;
                v1033 = *(_QWORD *)(v133 + 152);
                v1034 = *(_QWORD *)(v216 + 152);
                v1035 = v132[19];
                v1036 = **(_QWORD **)(v133 + 24);
                v1037 = 8 * **(_QWORD **)(v216 + 24);
                do
                {
                  if ((int)v364 >= 1)
                  {
                    v1038 = 0;
                    v1039 = *(_QWORD *)(v1033 + 8 * v1032);
                    v1040 = v364 + 1;
                    do
                    {
                      *(_QWORD *)(v1035 + v1038) = v1039 - *(_QWORD *)(v1034 + v1038);
                      --v1040;
                      v1038 += 8;
                    }
                    while (v1040 > 1);
                  }
                  v1032 += v1036;
                  ++v1031;
                  v1035 += 8 * (int)v364;
                  v1034 += v1037;
                }
                while (v1031 != v1030);
              }
            }
            else
            {
              v1798 = v132[6];
              if (v1798)
              {
                v1645 = 0;
                v1759 = *(_QWORD *)(v216 + 152);
                v1769 = *(_QWORD *)(v133 + 152);
                v1646 = v132[19];
                do
                {
                  v1647 = v1874;
                  if ((v1874 & 0x80000000) != 0)
                  {
                    LODWORD(v1648) = 0;
                  }
                  else
                  {
                    v1648 = 0;
                    v1649 = *(_QWORD *)(v1832 + 24);
                    v1650 = v1645;
                    do
                    {
                      v1651 = ldiv(v1650, v134[v1647]);
                      v1650 = v1651.quot;
                      v1648 += *(_QWORD *)(v1649 + 8 * v1647--) * v1651.rem;
                    }
                    while (v1647 != -1);
                  }
                  v1652 = v1854;
                  if ((v1854 & 0x80000000) != 0)
                  {
                    LODWORD(v1653) = 0;
                  }
                  else
                  {
                    v1653 = 0;
                    v1654 = *(_QWORD *)(v216 + 24);
                    v1655 = v1645;
                    do
                    {
                      v1656 = ldiv(v1655, v217[v1652]);
                      v1655 = v1656.quot;
                      v1653 += *(_QWORD *)(v1654 + 8 * v1652--) * v1656.rem;
                    }
                    while (v1652 != -1);
                  }
                  if ((int)v364 >= 1)
                  {
                    v1657 = 0;
                    v1658 = *(_QWORD *)(v1769 + 8 * (int)v1648);
                    v1659 = v364 + 1;
                    do
                    {
                      *(_QWORD *)(v1646 + v1657) = v1658 - *(_QWORD *)(v1759 + 8 * (int)v1653 + v1657);
                      --v1659;
                      v1657 += 8;
                    }
                    while (v1659 > 1);
                  }
                  v1646 += 8 * (int)v364;
                  v1645 += (int)v364;
                }
                while (v1645 < v1798);
              }
            }
          }
          break;
        case 2:
          if (v139 == 2)
          {
            v1660 = *v134;
            if (*v134)
            {
              v1661 = 0;
              v1662 = 0;
              v1893 = 0;
              v1663 = (int *)v132[19];
              __Nl = (int)v364;
              v1845 = *(_QWORD *)(v216 + 152);
              v1799 = 8 * (int)v364;
              v1664 = *(_QWORD *)(v133 + 152);
              do
              {
                if (v134[1])
                {
                  v1665 = 0;
                  do
                  {
                    __B = -*(_DWORD *)(v1845 + 8 * v1661);
                    vDSP_vsaddi((const int *)(v1664 + 8 * v1662), 1, &__B, v1663, 1, __Nl);
                    v133 = *a1;
                    v1666 = *(_QWORD **)(*a1 + 24);
                    v1667 = v1666[1];
                    v1662 += v1667;
                    v1668 = *(_QWORD **)(*a2 + 24);
                    v1669 = v1668[1];
                    v1661 += v1669;
                    ++v1665;
                    v1670 = *(int **)*a1;
                    v1671 = v1670[1];
                    v1663 = (int *)((char *)v1663 + v1799);
                  }
                  while (v1665 < v1671);
                  v1660 = *v1670;
                  v216 = *a2;
                  v217 = *(int **)*a2;
                  v134 = *(int **)*a1;
                }
                else
                {
                  v1671 = 0;
                  v1666 = *(_QWORD **)(v133 + 24);
                  v1667 = v1666[1];
                  v1668 = *(_QWORD **)(v216 + 24);
                  v1669 = v1668[1];
                }
                v1662 = *v1666 + v1662 - v1671 * v1667;
                v1661 = *v1668 + v1661 - v1669 * v217[1];
                ++v1893;
              }
              while (v1893 < v1660);
            }
          }
          else if (v139 == 1)
          {
            if (*v134)
            {
              v1041 = 0;
              v1042 = 0;
              v1043 = 0;
              v1044 = *(_QWORD *)(v133 + 152);
              v1045 = *(_QWORD *)(v216 + 152);
              v1046 = (int)v364;
              v1047 = 8 * (int)v364;
              v1048 = (int *)v132[19];
              do
              {
                __B = -*(_DWORD *)(v1045 + 8 * v1042);
                vDSP_vsaddi((const int *)(v1044 + 8 * v1043), 1, &__B, v1048, 1, v1046);
                v1043 += **(_QWORD **)(*a1 + 24);
                v1042 += **(_QWORD **)(*a2 + 24);
                ++v1041;
                v1048 = (int *)((char *)v1048 + v1047);
              }
              while (v1041 < **(int **)*a1);
            }
          }
          else if (v132[6])
          {
            v1672 = 0;
            v1869 = *(_QWORD *)(v216 + 152);
            v1894 = *(_QWORD *)(v133 + 152);
            v1846 = (int)v364;
            v1673 = (int *)v132[19];
            do
            {
              v1674 = *(_QWORD *)*a1;
              v1675 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1674) >> 2;
              v1676 = 0;
              v1677 = (v1675 - 1);
              if ((int)v1675 - 1 >= 0)
              {
                v1678 = *(_QWORD *)(*a1 + 24);
                v1679 = v1672;
                do
                {
                  v1680 = ldiv(v1679, *(int *)(v1674 + 4 * v1677));
                  v1679 = v1680.quot;
                  v1676 += *(_QWORD *)(v1678 + 8 * v1677--) * v1680.rem;
                }
                while (v1677 != -1);
              }
              v1681 = *(_QWORD *)*a2;
              v1682 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1681) >> 2;
              v1683 = 0;
              v1684 = (v1682 - 1);
              if ((int)v1682 - 1 >= 0)
              {
                v1685 = *(_QWORD *)(*a2 + 24);
                v1686 = v1672;
                do
                {
                  v1687 = ldiv(v1686, *(int *)(v1681 + 4 * v1684));
                  v1686 = v1687.quot;
                  v1683 += *(_QWORD *)(v1685 + 8 * v1684--) * v1687.rem;
                }
                while (v1684 != -1);
              }
              __B = -*(_DWORD *)(v1869 + 8 * (int)v1683);
              vDSP_vsaddi((const int *)(v1894 + 8 * (int)v1676), 1, &__B, v1673, 1, v1846);
              v1673 += 2 * v1846;
              v1672 += v1846;
            }
            while (v1672 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v139 == 2)
          {
            v1234 = *v134;
            if ((_DWORD)v1234)
            {
              v1235 = 0;
              v1236 = 0;
              v1237 = 0;
              v1238 = *(_QWORD *)(v133 + 152);
              v1239 = *(_QWORD *)(v216 + 152);
              v1240 = v132[19];
              v1241 = v134[1];
              v1242 = *(uint64_t **)(v133 + 24);
              v1243 = *v1242;
              v1244 = v1242[1];
              v1245 = *(uint64_t **)(v216 + 24);
              v1246 = *v1245;
              v1247 = v1245[1];
              if (v1241 <= 1)
                v1248 = 1;
              else
                v1248 = v134[1];
              v1249 = v1243 - v1244 * v1241;
              v1250 = v1246 - v1247 * v217[1];
              do
              {
                if ((_DWORD)v1241)
                {
                  v1251 = 0;
                  v1252 = v1239 + 8 * v1236;
                  v1253 = v1238 + 8 * v1237;
                  do
                  {
                    if ((int)v364 >= 1)
                    {
                      v1254 = 0;
                      v1255 = v364 + 1;
                      do
                      {
                        *(_QWORD *)(v1240 + v1254) = *(_QWORD *)(v1253 + v1254) - *(_QWORD *)(v1252 + v1254);
                        --v1255;
                        v1254 += 8;
                      }
                      while (v1255 > 1);
                    }
                    v1237 += v1244;
                    v1236 += v1247;
                    v1240 += 8 * (int)v364;
                    ++v1251;
                    v1252 += 8 * v1247;
                    v1253 += 8 * v1244;
                  }
                  while (v1251 != v1248);
                }
                v1237 += v1249;
                v1236 += v1250;
                ++v1235;
              }
              while (v1235 != v1234);
            }
          }
          else
          {
            v1819 = *a1;
            if (v139 == 1)
            {
              v365 = *v134;
              if ((_DWORD)v365)
              {
                v366 = 0;
                v367 = *(_QWORD *)(v133 + 152);
                v368 = *(_QWORD *)(v216 + 152);
                v369 = v132[19];
                v370 = 8 * **(_QWORD **)(v216 + 24);
                v371 = 8 * **(_QWORD **)(v133 + 24);
                do
                {
                  if ((int)v364 >= 1)
                  {
                    v372 = 0;
                    v373 = v364 + 1;
                    do
                    {
                      *(_QWORD *)(v369 + v372) = *(_QWORD *)(v367 + v372) - *(_QWORD *)(v368 + v372);
                      --v373;
                      v372 += 8;
                    }
                    while (v373 > 1);
                  }
                  ++v366;
                  v369 += 8 * (int)v364;
                  v368 += v370;
                  v367 += v371;
                }
                while (v366 != v365);
              }
            }
            else
            {
              v1791 = v132[6];
              if (v1791)
              {
                v1256 = 0;
                v1755 = *(_QWORD *)(v216 + 152);
                v1764 = *(_QWORD *)(v133 + 152);
                v1257 = v132[19];
                do
                {
                  v1258 = v1874;
                  if ((v1874 & 0x80000000) != 0)
                  {
                    LODWORD(v1259) = 0;
                  }
                  else
                  {
                    v1259 = 0;
                    v1260 = *(_QWORD *)(v1819 + 24);
                    v1261 = v1256;
                    do
                    {
                      v1262 = ldiv(v1261, v134[v1258]);
                      v1261 = v1262.quot;
                      v1259 += *(_QWORD *)(v1260 + 8 * v1258--) * v1262.rem;
                    }
                    while (v1258 != -1);
                  }
                  v1263 = v1854;
                  if ((v1854 & 0x80000000) != 0)
                  {
                    LODWORD(v1264) = 0;
                  }
                  else
                  {
                    v1264 = 0;
                    v1265 = *(_QWORD *)(v216 + 24);
                    v1266 = v1256;
                    do
                    {
                      v1267 = ldiv(v1266, v217[v1263]);
                      v1266 = v1267.quot;
                      v1264 += *(_QWORD *)(v1265 + 8 * v1263--) * v1267.rem;
                    }
                    while (v1263 != -1);
                  }
                  if ((int)v364 >= 1)
                  {
                    v1268 = 0;
                    v1269 = v364 + 1;
                    do
                    {
                      *(_QWORD *)(v1257 + v1268) = *(_QWORD *)(v1764 + 8 * (int)v1259 + v1268)
                                                 - *(_QWORD *)(v1755 + 8 * (int)v1264 + v1268);
                      --v1269;
                      v1268 += 8;
                    }
                    while (v1269 > 1);
                  }
                  v1257 += 8 * (int)v364;
                  v1256 += (int)v364;
                }
                while (v1256 < v1791);
              }
            }
          }
          break;
        default:
LABEL_458:
          switch(v360)
          {
            case 1uLL:
              v374 = v132[6];
              if (v374)
              {
                v375 = *(_QWORD **)(v133 + 152);
                v376 = *(_QWORD **)(v216 + 152);
                v377 = (_QWORD *)v132[19];
                v378 = 8 * **(_QWORD **)(v216 + 24);
                v379 = 8 * **(_QWORD **)(v133 + 24);
                do
                {
                  *v377++ = *v375 - *v376;
                  v376 = (_QWORD *)((char *)v376 + v378);
                  v375 = (_QWORD *)((char *)v375 + v379);
                  --v374;
                }
                while (v374);
              }
              break;
            case 2uLL:
              v790 = *v134;
              if ((_DWORD)v790)
              {
                v791 = 0;
                v792 = 0;
                v793 = 0;
                v794 = 0;
                v795 = *(_QWORD *)(v133 + 152);
                v796 = *(_QWORD *)(v216 + 152);
                v797 = v132[19];
                v798 = v134[1];
                v799 = *(uint64_t **)(v133 + 24);
                v800 = *v799;
                v801 = v799[1];
                v802 = *(uint64_t **)(v216 + 24);
                v803 = *v802;
                v804 = v802[1];
                v805 = v803 - v804 * v217[1];
                if (v798 <= 1)
                  v806 = 1;
                else
                  v806 = v134[1];
                v807 = v800 - v801 * v798;
                do
                {
                  if ((_DWORD)v798)
                  {
                    v808 = v792 + v806;
                    v809 = (_QWORD *)(v797 + 8 * v792);
                    v810 = v806;
                    do
                    {
                      *v809++ = *(_QWORD *)(v795 + 8 * v794) - *(_QWORD *)(v796 + 8 * v793);
                      v794 += v801;
                      v793 += v804;
                      --v810;
                    }
                    while (v810);
                    v792 = v808;
                  }
                  v794 += v807;
                  v793 += v805;
                  ++v791;
                }
                while (v791 != v790);
              }
              break;
            case 3uLL:
              v811 = *v134;
              if ((_DWORD)v811)
              {
                v812 = 0;
                v813 = 0;
                v814 = 0;
                v815 = 0;
                v816 = *(_QWORD *)(v133 + 152);
                v817 = *(_QWORD *)(v216 + 152);
                v818 = v132[19];
                v819 = v134[1];
                v820 = *(_QWORD **)(v133 + 24);
                v821 = v820[1];
                v822 = *(_QWORD **)(v216 + 24);
                v823 = v822[1];
                v824 = *v822 - v823 * v217[1];
                if (v819 <= 1)
                  v825 = 1;
                else
                  v825 = v134[1];
                v826 = *v820 - v821 * v819;
                do
                {
                  if ((_DWORD)v819)
                  {
                    v827 = 0;
                    v828 = v134[2];
                    v829 = v820[2];
                    v830 = v822[2];
                    if (v828 <= 1)
                      v831 = 1;
                    else
                      v831 = v134[2];
                    v832 = v823 - v830 * v217[2];
                    do
                    {
                      v833 = v831;
                      if ((_DWORD)v828)
                      {
                        do
                        {
                          *(_QWORD *)(v818 + 8 * v813++) = *(_QWORD *)(v816 + 8 * v815) - *(_QWORD *)(v817 + 8 * v814);
                          v815 += v829;
                          v814 += v830;
                          --v833;
                        }
                        while (v833);
                      }
                      v815 += v821 - v829 * v828;
                      v814 += v832;
                      ++v827;
                    }
                    while (v827 != v825);
                  }
                  v815 += v826;
                  v814 += v824;
                  ++v812;
                }
                while (v812 != v811);
              }
              break;
            case 4uLL:
              v1879 = *v134;
              if ((_DWORD)v1879)
              {
                v834 = 0;
                v835 = 0;
                v836 = 0;
                v837 = 0;
                v838 = *(_QWORD *)(v133 + 152);
                v839 = *(_QWORD *)(v216 + 152);
                v840 = v132[19];
                v841 = v134[1];
                v842 = *(_QWORD **)(v133 + 24);
                v843 = *(_QWORD **)(v216 + 24);
                v1772 = v843[1];
                v1784 = v842[1];
                v1826 = *v843 - v1772 * v217[1];
                v1859 = v134[1];
                if (v841 <= 1)
                  v844 = 1;
                else
                  v844 = v134[1];
                __Ne = *v842 - v842[1] * v841;
                do
                {
                  if (v1859)
                  {
                    v845 = 0;
                    v846 = v134[2];
                    v847 = v842[2];
                    v848 = v843[2];
                    if (v846 <= 1)
                      v849 = 1;
                    else
                      v849 = v134[2];
                    v850 = v1772 - v848 * v217[2];
                    do
                    {
                      if ((_DWORD)v846)
                      {
                        v851 = 0;
                        v852 = v134[3];
                        v853 = v842[3];
                        v854 = v843[3];
                        if (v852 <= 1)
                          v855 = 1;
                        else
                          v855 = v134[3];
                        v856 = v848 - v854 * v217[3];
                        do
                        {
                          v857 = v855;
                          if ((_DWORD)v852)
                          {
                            do
                            {
                              *(_QWORD *)(v840 + 8 * v835++) = *(_QWORD *)(v838 + 8 * v837)
                                                             - *(_QWORD *)(v839 + 8 * v836);
                              v837 += v853;
                              v836 += v854;
                              --v857;
                            }
                            while (v857);
                          }
                          v837 += v847 - v853 * v852;
                          v836 += v856;
                          ++v851;
                        }
                        while (v851 != v849);
                      }
                      v837 += v1784 - v847 * v846;
                      v836 += v850;
                      ++v845;
                    }
                    while (v845 != v844);
                  }
                  v837 += __Ne;
                  v836 += v1826;
                  ++v834;
                }
                while (v834 != v1879);
              }
              break;
            default:
              v777 = v132[6];
              if (v777)
              {
                v778 = v133;
                v779 = 0;
                __Nd = *(_QWORD *)(v216 + 152);
                v1825 = *(_QWORD *)(v133 + 152);
                v1783 = v132[19];
                do
                {
                  v780 = v1874;
                  if ((v1874 & 0x80000000) != 0)
                  {
                    LODWORD(v781) = 0;
                  }
                  else
                  {
                    v781 = 0;
                    v782 = *(_QWORD *)(v778 + 24);
                    v783 = v779;
                    do
                    {
                      v784 = ldiv(v783, v134[v780]);
                      v783 = v784.quot;
                      v781 += *(_QWORD *)(v782 + 8 * v780--) * v784.rem;
                    }
                    while (v780 != -1);
                  }
                  v785 = v1854;
                  if ((v1854 & 0x80000000) != 0)
                  {
                    LODWORD(v786) = 0;
                  }
                  else
                  {
                    v786 = 0;
                    v787 = *(_QWORD *)(v216 + 24);
                    v788 = v779;
                    do
                    {
                      v789 = ldiv(v788, v217[v785]);
                      v788 = v789.quot;
                      v786 += *(_QWORD *)(v787 + 8 * v785--) * v789.rem;
                    }
                    while (v785 != -1);
                  }
                  *(_QWORD *)(v1783 + 8 * v779++) = *(_QWORD *)(v1825 + 8 * (int)v781)
                                                  - *(_QWORD *)(__Nd + 8 * (int)v786);
                }
                while (v779 != v777);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
          v164 = *(_DWORD *)(*a2 + 160);
          if (v164 >= 1)
          {
            v165 = **(float **)(*a1 + 152);
            v166 = *(float **)(*(_QWORD *)a3 + 152);
            v167 = *(float **)(*a2 + 152);
            v168 = v164 + 1;
            do
            {
              v169 = *v167++;
              *v166++ = v165 - v169;
              --v168;
            }
            while (v168 > 1);
          }
          return;
        case 2:
          v26 = *(int **)(*(_QWORD *)a3 + 152);
          v27 = *(const int **)(*a1 + 152);
          v28 = *(_QWORD *)(*a1 + 160);
          v100 = (int)(float)-**(float **)(*a2 + 152);
LABEL_73:
          __B = v100;
          vDSP_vsaddi(v27, 1, &__B, v26, 1, v28);
          return;
        case 3:
          v170 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v170 >= 1)
          {
            v171 = *(float **)(*(_QWORD *)a3 + 152);
            v172 = *(float **)(*a2 + 152);
            v173 = *(float **)(*a1 + 152);
            v174 = v170 + 1;
            do
            {
              v175 = *v173++;
              v176 = v175;
              v177 = *v172++;
              *v171++ = v176 - v177;
              --v174;
            }
            while (v174 > 1);
          }
          return;
        default:
          v155 = *(_QWORD **)a3;
          v156 = *a1;
          v157 = *(int **)*a1;
          v158 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v157) >> 2;
          v159 = (v158 - 1);
          if ((int)v159 >= -1)
            v160 = -1;
          else
            v160 = v158 - 1;
          v161 = v160 + 1;
          v162 = v158 + 1;
          while (1)
          {
            v163 = v162 - 2;
            if (v162 - 2 < 0)
              break;
            --v162;
            if (*(_QWORD *)(*(_QWORD *)(v156 + 24) + 8 * v163) != *(_QWORD *)(v155[3] + 8 * v163))
              goto LABEL_172;
          }
          v162 = v161;
LABEL_172:
          v224 = *a2;
          v225 = *(int **)*a2;
          v226 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v225) >> 2;
          v227 = (v226 - 1);
          if ((int)v227 >= -1)
            v228 = -1;
          else
            v228 = v226 - 1;
          v229 = v228 + 1;
          v230 = v226 + 1;
          while (1)
          {
            v231 = v230 - 2;
            if (v230 - 2 < 0)
              break;
            --v230;
            if (*(_QWORD *)(*(_QWORD *)(v224 + 24) + 8 * v231) != *(_QWORD *)(v155[3] + 8 * v231))
              goto LABEL_210;
          }
          v230 = v229;
LABEL_210:
          v244 = v158 + 1;
          while (1)
          {
            v245 = v244 - 2;
            if (v244 - 2 < 0)
              break;
            --v244;
            if (*(_QWORD *)(*(_QWORD *)(v156 + 24) + 8 * v245))
              goto LABEL_245;
          }
          v244 = v161;
LABEL_245:
          v258 = v226 + 1;
          while (1)
          {
            v259 = v258 - 2;
            if (v258 - 2 < 0)
              break;
            --v258;
            if (*(_QWORD *)(*(_QWORD *)(v224 + 24) + 8 * v259))
              goto LABEL_464;
          }
          v258 = v229;
LABEL_464:
          v380 = (uint64_t)(v155[1] - *v155) >> 2;
          if (v162 <= v230)
            v381 = v230;
          else
            v381 = v162;
          if (v162 <= v258)
            v162 = v258;
          if (v244 > v230)
            v230 = v244;
          if (v380 > v230)
          {
            v382 = 1;
          }
          else
          {
            v230 = (uint64_t)(v155[1] - *v155) >> 2;
            v382 = 4;
          }
          if (v380 > v162)
          {
            v383 = 2;
          }
          else
          {
            v162 = v230;
            v383 = v382;
          }
          if (v380 > v381)
          {
            v162 = v381;
            v383 = 3;
          }
          v1855 = v227;
          v1875 = v159;
          if (!v162)
            goto LABEL_493;
          v384 = *(_QWORD *)(v155[3] + 8 * (v162 - 1));
          if (v384 < 0x10)
            goto LABEL_493;
          switch(v383)
          {
            case 1:
              if (v162 == 2)
              {
                v1688 = *v157;
                if ((_DWORD)v1688)
                {
                  v1689 = 0;
                  v1690 = 0;
                  v1691 = 0;
                  v1692 = *(_QWORD *)(v156 + 152);
                  v1693 = *(_QWORD *)(v224 + 152);
                  v1694 = v155[19];
                  v1695 = v157[1];
                  v1696 = *(uint64_t **)(v156 + 24);
                  v1697 = *v1696;
                  v1698 = v1696[1];
                  v1699 = *(uint64_t **)(v224 + 24);
                  v1700 = *v1699;
                  v1701 = v1699[1];
                  if (v1695 <= 1)
                    v1702 = 1;
                  else
                    v1702 = v157[1];
                  v1703 = v1697 - v1698 * v1695;
                  v1704 = v1700 - v1701 * v225[1];
                  do
                  {
                    if ((_DWORD)v1695)
                    {
                      v1705 = 0;
                      v1706 = v1693 + 4 * v1690;
                      do
                      {
                        if ((int)v384 >= 1)
                        {
                          v1707 = 0;
                          v1708 = *(float *)(v1692 + 4 * v1691);
                          v1709 = v384 + 1;
                          do
                          {
                            *(float *)(v1694 + v1707) = v1708 - *(float *)(v1706 + v1707);
                            --v1709;
                            v1707 += 4;
                          }
                          while (v1709 > 1);
                        }
                        v1691 += v1698;
                        v1690 += v1701;
                        v1694 += 4 * (int)v384;
                        ++v1705;
                        v1706 += 4 * v1701;
                      }
                      while (v1705 != v1702);
                    }
                    v1691 += v1703;
                    v1690 += v1704;
                    ++v1689;
                  }
                  while (v1689 != v1688);
                }
              }
              else
              {
                v1833 = *a1;
                if (v162 == 1)
                {
                  v1049 = *v157;
                  if ((_DWORD)v1049)
                  {
                    v1050 = 0;
                    v1051 = 0;
                    v1052 = *(_QWORD *)(v156 + 152);
                    v1053 = *(_QWORD *)(v224 + 152);
                    v1054 = v155[19];
                    v1055 = **(_QWORD **)(v156 + 24);
                    v1056 = 4 * **(_QWORD **)(v224 + 24);
                    do
                    {
                      if ((int)v384 >= 1)
                      {
                        v1057 = 0;
                        v1058 = *(float *)(v1052 + 4 * v1051);
                        v1059 = v384 + 1;
                        do
                        {
                          *(float *)(v1054 + v1057) = v1058 - *(float *)(v1053 + v1057);
                          --v1059;
                          v1057 += 4;
                        }
                        while (v1059 > 1);
                      }
                      v1051 += v1055;
                      ++v1050;
                      v1054 += 4 * (int)v384;
                      v1053 += v1056;
                    }
                    while (v1050 != v1049);
                  }
                }
                else
                {
                  v1800 = v155[6];
                  if (v1800)
                  {
                    v1710 = 0;
                    v1760 = *(_QWORD *)(v224 + 152);
                    v1770 = *(_QWORD *)(v156 + 152);
                    v1711 = v155[19];
                    do
                    {
                      v1712 = v1875;
                      if ((v1875 & 0x80000000) != 0)
                      {
                        LODWORD(v1713) = 0;
                      }
                      else
                      {
                        v1713 = 0;
                        v1714 = *(_QWORD *)(v1833 + 24);
                        v1715 = v1710;
                        do
                        {
                          v1716 = ldiv(v1715, v157[v1712]);
                          v1715 = v1716.quot;
                          v1713 += *(_QWORD *)(v1714 + 8 * v1712--) * v1716.rem;
                        }
                        while (v1712 != -1);
                      }
                      v1717 = v1855;
                      if ((v1855 & 0x80000000) != 0)
                      {
                        LODWORD(v1718) = 0;
                      }
                      else
                      {
                        v1718 = 0;
                        v1719 = *(_QWORD *)(v224 + 24);
                        v1720 = v1710;
                        do
                        {
                          v1721 = ldiv(v1720, v225[v1717]);
                          v1720 = v1721.quot;
                          v1718 += *(_QWORD *)(v1719 + 8 * v1717--) * v1721.rem;
                        }
                        while (v1717 != -1);
                      }
                      if ((int)v384 >= 1)
                      {
                        v1722 = 0;
                        v1723 = *(float *)(v1770 + 4 * (int)v1713);
                        v1724 = v384 + 1;
                        do
                        {
                          *(float *)(v1711 + v1722) = v1723 - *(float *)(v1760 + 4 * (int)v1718 + v1722);
                          --v1724;
                          v1722 += 4;
                        }
                        while (v1724 > 1);
                      }
                      v1711 += 4 * (int)v384;
                      v1710 += (int)v384;
                    }
                    while (v1710 < v1800);
                  }
                }
              }
              break;
            case 2:
              if (v162 == 2)
              {
                v1725 = *v157;
                if (*v157)
                {
                  v1726 = 0;
                  v1727 = 0;
                  v1895 = 0;
                  v1728 = (int *)v155[19];
                  __Nm = (int)v384;
                  v1847 = *(_QWORD *)(v224 + 152);
                  v1801 = 4 * (int)v384;
                  v1729 = *(_QWORD *)(v156 + 152);
                  do
                  {
                    if (v157[1])
                    {
                      v1730 = 0;
                      do
                      {
                        __B = (int)(float)-*(float *)(v1847 + 4 * v1726);
                        vDSP_vsaddi((const int *)(v1729 + 4 * v1727), 1, &__B, v1728, 1, __Nm);
                        v156 = *a1;
                        v1731 = *(_QWORD **)(*a1 + 24);
                        v1732 = v1731[1];
                        v1727 += v1732;
                        v1733 = *(_QWORD **)(*a2 + 24);
                        v1734 = v1733[1];
                        v1726 += v1734;
                        ++v1730;
                        v1735 = *(int **)*a1;
                        v1736 = v1735[1];
                        v1728 = (int *)((char *)v1728 + v1801);
                      }
                      while (v1730 < v1736);
                      v1725 = *v1735;
                      v224 = *a2;
                      v225 = *(int **)*a2;
                      v157 = *(int **)*a1;
                    }
                    else
                    {
                      v1736 = 0;
                      v1731 = *(_QWORD **)(v156 + 24);
                      v1732 = v1731[1];
                      v1733 = *(_QWORD **)(v224 + 24);
                      v1734 = v1733[1];
                    }
                    v1727 = *v1731 + v1727 - v1736 * v1732;
                    v1726 = *v1733 + v1726 - v1734 * v225[1];
                    ++v1895;
                  }
                  while (v1895 < v1725);
                }
              }
              else if (v162 == 1)
              {
                if (*v157)
                {
                  v1060 = 0;
                  v1061 = 0;
                  v1062 = 0;
                  v1063 = *(_QWORD *)(v156 + 152);
                  v1064 = *(_QWORD *)(v224 + 152);
                  v1065 = (int)v384;
                  v1066 = 4 * (int)v384;
                  v1067 = (int *)v155[19];
                  do
                  {
                    __B = (int)(float)-*(float *)(v1064 + 4 * v1061);
                    vDSP_vsaddi((const int *)(v1063 + 4 * v1062), 1, &__B, v1067, 1, v1065);
                    v1062 += **(_QWORD **)(*a1 + 24);
                    v1061 += **(_QWORD **)(*a2 + 24);
                    ++v1060;
                    v1067 = (int *)((char *)v1067 + v1066);
                  }
                  while (v1060 < **(int **)*a1);
                }
              }
              else if (v155[6])
              {
                v1737 = 0;
                v1870 = *(_QWORD *)(v224 + 152);
                v1896 = *(_QWORD *)(v156 + 152);
                v1848 = (int)v384;
                v1738 = (int *)v155[19];
                do
                {
                  v1739 = *(_QWORD *)*a1;
                  v1740 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1739) >> 2;
                  v1741 = 0;
                  v1742 = (v1740 - 1);
                  if ((int)v1740 - 1 >= 0)
                  {
                    v1743 = *(_QWORD *)(*a1 + 24);
                    v1744 = v1737;
                    do
                    {
                      v1745 = ldiv(v1744, *(int *)(v1739 + 4 * v1742));
                      v1744 = v1745.quot;
                      v1741 += *(_QWORD *)(v1743 + 8 * v1742--) * v1745.rem;
                    }
                    while (v1742 != -1);
                  }
                  v1746 = *(_QWORD *)*a2;
                  v1747 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1746) >> 2;
                  v1748 = 0;
                  v1749 = (v1747 - 1);
                  if ((int)v1747 - 1 >= 0)
                  {
                    v1750 = *(_QWORD *)(*a2 + 24);
                    v1751 = v1737;
                    do
                    {
                      v1752 = ldiv(v1751, *(int *)(v1746 + 4 * v1749));
                      v1751 = v1752.quot;
                      v1748 += *(_QWORD *)(v1750 + 8 * v1749--) * v1752.rem;
                    }
                    while (v1749 != -1);
                  }
                  __B = (int)(float)-*(float *)(v1870 + 4 * (int)v1748);
                  vDSP_vsaddi((const int *)(v1896 + 4 * (int)v1741), 1, &__B, v1738, 1, v1848);
                  v1738 += v1848;
                  v1737 += v1848;
                }
                while (v1737 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 3:
              if (v162 == 2)
              {
                v1270 = *v157;
                if ((_DWORD)v1270)
                {
                  v1271 = 0;
                  v1272 = 0;
                  v1273 = 0;
                  v1274 = *(_QWORD *)(v156 + 152);
                  v1275 = *(_QWORD *)(v224 + 152);
                  v1276 = v155[19];
                  v1277 = v157[1];
                  v1278 = *(uint64_t **)(v156 + 24);
                  v1279 = *v1278;
                  v1280 = v1278[1];
                  v1281 = *(uint64_t **)(v224 + 24);
                  v1282 = *v1281;
                  v1283 = v1281[1];
                  if (v1277 <= 1)
                    v1284 = 1;
                  else
                    v1284 = v157[1];
                  v1285 = v1279 - v1280 * v1277;
                  v1286 = v1282 - v1283 * v225[1];
                  do
                  {
                    if ((_DWORD)v1277)
                    {
                      v1287 = 0;
                      v1288 = v1275 + 4 * v1272;
                      v1289 = v1274 + 4 * v1273;
                      do
                      {
                        if ((int)v384 >= 1)
                        {
                          v1290 = 0;
                          v1291 = v384 + 1;
                          do
                          {
                            *(float *)(v1276 + v1290) = *(float *)(v1289 + v1290) - *(float *)(v1288 + v1290);
                            --v1291;
                            v1290 += 4;
                          }
                          while (v1291 > 1);
                        }
                        v1273 += v1280;
                        v1272 += v1283;
                        v1276 += 4 * (int)v384;
                        ++v1287;
                        v1288 += 4 * v1283;
                        v1289 += 4 * v1280;
                      }
                      while (v1287 != v1284);
                    }
                    v1273 += v1285;
                    v1272 += v1286;
                    ++v1271;
                  }
                  while (v1271 != v1270);
                }
              }
              else
              {
                v1820 = *a1;
                if (v162 == 1)
                {
                  v385 = *v157;
                  if ((_DWORD)v385)
                  {
                    v386 = 0;
                    v387 = *(_QWORD *)(v156 + 152);
                    v388 = *(_QWORD *)(v224 + 152);
                    v389 = v155[19];
                    v390 = 4 * **(_QWORD **)(v224 + 24);
                    v391 = 4 * **(_QWORD **)(v156 + 24);
                    do
                    {
                      if ((int)v384 >= 1)
                      {
                        v392 = 0;
                        v393 = v384 + 1;
                        do
                        {
                          *(float *)(v389 + v392) = *(float *)(v387 + v392) - *(float *)(v388 + v392);
                          --v393;
                          v392 += 4;
                        }
                        while (v393 > 1);
                      }
                      ++v386;
                      v389 += 4 * (int)v384;
                      v388 += v390;
                      v387 += v391;
                    }
                    while (v386 != v385);
                  }
                }
                else
                {
                  v1792 = v155[6];
                  if (v1792)
                  {
                    v1292 = 0;
                    v1756 = *(_QWORD *)(v224 + 152);
                    v1765 = *(_QWORD *)(v156 + 152);
                    v1293 = v155[19];
                    do
                    {
                      v1294 = v1875;
                      if ((v1875 & 0x80000000) != 0)
                      {
                        LODWORD(v1295) = 0;
                      }
                      else
                      {
                        v1295 = 0;
                        v1296 = *(_QWORD *)(v1820 + 24);
                        v1297 = v1292;
                        do
                        {
                          v1298 = ldiv(v1297, v157[v1294]);
                          v1297 = v1298.quot;
                          v1295 += *(_QWORD *)(v1296 + 8 * v1294--) * v1298.rem;
                        }
                        while (v1294 != -1);
                      }
                      v1299 = v1855;
                      if ((v1855 & 0x80000000) != 0)
                      {
                        LODWORD(v1300) = 0;
                      }
                      else
                      {
                        v1300 = 0;
                        v1301 = *(_QWORD *)(v224 + 24);
                        v1302 = v1292;
                        do
                        {
                          v1303 = ldiv(v1302, v225[v1299]);
                          v1302 = v1303.quot;
                          v1300 += *(_QWORD *)(v1301 + 8 * v1299--) * v1303.rem;
                        }
                        while (v1299 != -1);
                      }
                      if ((int)v384 >= 1)
                      {
                        v1304 = 0;
                        v1305 = v384 + 1;
                        do
                        {
                          *(float *)(v1293 + v1304) = *(float *)(v1765 + 4 * (int)v1295 + v1304)
                                                    - *(float *)(v1756 + 4 * (int)v1300 + v1304);
                          --v1305;
                          v1304 += 4;
                        }
                        while (v1305 > 1);
                      }
                      v1293 += 4 * (int)v384;
                      v1292 += (int)v384;
                    }
                    while (v1292 < v1792);
                  }
                }
              }
              break;
            default:
LABEL_493:
              switch(v380)
              {
                case 1uLL:
                  v394 = v155[6];
                  if (v394)
                  {
                    v395 = *(float **)(v156 + 152);
                    v396 = *(float **)(v224 + 152);
                    v397 = (float *)v155[19];
                    v398 = 4 * **(_QWORD **)(v224 + 24);
                    v399 = 4 * **(_QWORD **)(v156 + 24);
                    do
                    {
                      *v397++ = *v395 - *v396;
                      v396 = (float *)((char *)v396 + v398);
                      v395 = (float *)((char *)v395 + v399);
                      --v394;
                    }
                    while (v394);
                  }
                  break;
                case 2uLL:
                  v871 = *v157;
                  if ((_DWORD)v871)
                  {
                    v872 = 0;
                    v873 = 0;
                    v874 = 0;
                    v875 = 0;
                    v876 = *(_QWORD *)(v156 + 152);
                    v877 = *(_QWORD *)(v224 + 152);
                    v878 = v155[19];
                    v879 = v157[1];
                    v880 = *(uint64_t **)(v156 + 24);
                    v881 = *v880;
                    v882 = v880[1];
                    v883 = *(uint64_t **)(v224 + 24);
                    v884 = *v883;
                    v885 = v883[1];
                    v886 = v884 - v885 * v225[1];
                    if (v879 <= 1)
                      v887 = 1;
                    else
                      v887 = v157[1];
                    v888 = v881 - v882 * v879;
                    do
                    {
                      if ((_DWORD)v879)
                      {
                        v889 = v873 + v887;
                        v890 = (float *)(v878 + 4 * v873);
                        v891 = v887;
                        do
                        {
                          *v890++ = *(float *)(v876 + 4 * v875) - *(float *)(v877 + 4 * v874);
                          v875 += v882;
                          v874 += v885;
                          --v891;
                        }
                        while (v891);
                        v873 = v889;
                      }
                      v875 += v888;
                      v874 += v886;
                      ++v872;
                    }
                    while (v872 != v871);
                  }
                  break;
                case 3uLL:
                  v892 = *v157;
                  if ((_DWORD)v892)
                  {
                    v893 = 0;
                    v894 = 0;
                    v895 = 0;
                    v896 = 0;
                    v897 = *(_QWORD *)(v156 + 152);
                    v898 = *(_QWORD *)(v224 + 152);
                    v899 = v155[19];
                    v900 = v157[1];
                    v901 = *(_QWORD **)(v156 + 24);
                    v902 = v901[1];
                    v903 = *(_QWORD **)(v224 + 24);
                    v904 = v903[1];
                    v905 = *v903 - v904 * v225[1];
                    if (v900 <= 1)
                      v906 = 1;
                    else
                      v906 = v157[1];
                    v907 = *v901 - v902 * v900;
                    do
                    {
                      if ((_DWORD)v900)
                      {
                        v908 = 0;
                        v909 = v157[2];
                        v910 = v901[2];
                        v911 = v903[2];
                        if (v909 <= 1)
                          v912 = 1;
                        else
                          v912 = v157[2];
                        v913 = v904 - v911 * v225[2];
                        do
                        {
                          v914 = v912;
                          if ((_DWORD)v909)
                          {
                            do
                            {
                              *(float *)(v899 + 4 * v894++) = *(float *)(v897 + 4 * v896) - *(float *)(v898 + 4 * v895);
                              v896 += v910;
                              v895 += v911;
                              --v914;
                            }
                            while (v914);
                          }
                          v896 += v902 - v910 * v909;
                          v895 += v913;
                          ++v908;
                        }
                        while (v908 != v906);
                      }
                      v896 += v907;
                      v895 += v905;
                      ++v893;
                    }
                    while (v893 != v892);
                  }
                  break;
                case 4uLL:
                  v1880 = *v157;
                  if ((_DWORD)v1880)
                  {
                    v915 = 0;
                    v916 = 0;
                    v917 = 0;
                    v918 = 0;
                    v919 = *(_QWORD *)(v156 + 152);
                    v920 = *(_QWORD *)(v224 + 152);
                    v921 = v155[19];
                    v922 = v157[1];
                    v923 = *(_QWORD **)(v156 + 24);
                    v924 = *(_QWORD **)(v224 + 24);
                    __Ng = v924[1];
                    v1828 = v923[1];
                    v1860 = *v924 - __Ng * v225[1];
                    if (v922 <= 1)
                      v925 = 1;
                    else
                      v925 = v157[1];
                    v926 = *v923 - v923[1] * v922;
                    do
                    {
                      if ((_DWORD)v922)
                      {
                        v927 = 0;
                        v928 = v157[2];
                        v929 = v923[2];
                        v930 = v924[2];
                        if (v928 <= 1)
                          v931 = 1;
                        else
                          v931 = v157[2];
                        v932 = __Ng - v930 * v225[2];
                        do
                        {
                          if ((_DWORD)v928)
                          {
                            v933 = 0;
                            v934 = v157[3];
                            v935 = v923[3];
                            v936 = v924[3];
                            if (v934 <= 1)
                              v937 = 1;
                            else
                              v937 = v157[3];
                            v938 = v930 - v936 * v225[3];
                            do
                            {
                              v939 = v937;
                              if ((_DWORD)v934)
                              {
                                do
                                {
                                  *(float *)(v921 + 4 * v916++) = *(float *)(v919 + 4 * v918)
                                                                - *(float *)(v920 + 4 * v917);
                                  v918 += v935;
                                  v917 += v936;
                                  --v939;
                                }
                                while (v939);
                              }
                              v918 += v929 - v935 * v934;
                              v917 += v938;
                              ++v933;
                            }
                            while (v933 != v931);
                          }
                          v918 += v1828 - v929 * v928;
                          v917 += v932;
                          ++v927;
                        }
                        while (v927 != v925);
                      }
                      v918 += v926;
                      v917 += v1860;
                      ++v915;
                    }
                    while (v915 != v1880);
                  }
                  break;
                default:
                  v858 = v155[6];
                  if (v858)
                  {
                    v859 = v156;
                    v860 = 0;
                    __Nf = *(_QWORD *)(v224 + 152);
                    v1827 = *(_QWORD *)(v156 + 152);
                    v1785 = v155[19];
                    do
                    {
                      v861 = v1875;
                      if ((v1875 & 0x80000000) != 0)
                      {
                        LODWORD(v862) = 0;
                      }
                      else
                      {
                        v862 = 0;
                        v863 = *(_QWORD *)(v859 + 24);
                        v864 = v860;
                        do
                        {
                          v865 = ldiv(v864, v157[v861]);
                          v864 = v865.quot;
                          v862 += *(_QWORD *)(v863 + 8 * v861--) * v865.rem;
                        }
                        while (v861 != -1);
                      }
                      v866 = v1855;
                      if ((v1855 & 0x80000000) != 0)
                      {
                        LODWORD(v867) = 0;
                      }
                      else
                      {
                        v867 = 0;
                        v868 = *(_QWORD *)(v224 + 24);
                        v869 = v860;
                        do
                        {
                          v870 = ldiv(v869, v225[v866]);
                          v869 = v870.quot;
                          v867 += *(_QWORD *)(v868 + 8 * v866--) * v870.rem;
                        }
                        while (v866 != -1);
                      }
                      *(float *)(v1785 + 4 * v860++) = *(float *)(v1827 + 4 * (int)v862)
                                                     - *(float *)(__Nf + 4 * (int)v867);
                    }
                    while (v860 != v858);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_6>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  char v10;
  _BYTE *v11;
  char *v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  int *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  BOOL *v36;
  char *v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL *v42;
  unsigned __int8 *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  BOOL *v48;
  char *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  char v64;
  _BYTE *v65;
  char *v66;
  unsigned int v67;
  char v68;
  int v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  unsigned int v73;
  char v74;
  char v75;
  char v76;
  _QWORD *v77;
  _QWORD *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  _DWORD *v88;
  int *v89;
  unsigned int v90;
  int v91;
  int v92;
  _DWORD *v93;
  int *v94;
  int *v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  char v109;
  _BYTE *v110;
  char *v111;
  unsigned int v112;
  char v113;
  int v114;
  char v115;
  _BYTE *v116;
  char *v117;
  unsigned int v118;
  char v119;
  int v120;
  _BYTE *v121;
  char *v122;
  char *v123;
  unsigned int v124;
  char v125;
  char v126;
  char v127;
  _QWORD *v128;
  _QWORD *v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  _DWORD *v139;
  int *v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  _DWORD *v145;
  int *v146;
  unsigned int v147;
  int v148;
  int v149;
  _DWORD *v150;
  int *v151;
  int *v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  _QWORD *v157;
  _QWORD *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  float v196;
  float *v197;
  float *v198;
  unsigned int v199;
  float v200;
  int v201;
  float v202;
  float *v203;
  float *v204;
  unsigned int v205;
  float v206;
  int v207;
  float *v208;
  float *v209;
  float *v210;
  unsigned int v211;
  float v212;
  float v213;
  float v214;
  _QWORD *v215;
  int *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int **v223;
  int *v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  _QWORD *v230;
  int *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  int **v238;
  int *v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  unsigned int v244;
  _QWORD *v245;
  int *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  int v251;
  unsigned int v252;
  _QWORD *v253;
  int *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  _QWORD *v261;
  int *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  unint64_t v297;
  int v298;
  int v299;
  int v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  unsigned __int8 *v312;
  char *v313;
  BOOL *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  int v320;
  unint64_t v321;
  int v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int *v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int *v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  int v339;
  int v340;
  unint64_t v341;
  int v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  _DWORD *v352;
  _DWORD *v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  int v358;
  int v359;
  int v360;
  unint64_t v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  unint64_t v377;
  int v378;
  int v379;
  int v380;
  unint64_t v381;
  int v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  _DWORD *v392;
  _DWORD *v393;
  _DWORD *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  int v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  int v418;
  int v419;
  int v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  float *v432;
  float *v433;
  float *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  ldiv_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  ldiv_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  BOOL *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  ldiv_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  ldiv_t v531;
  int v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  unint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  int *v543;
  uint64_t v544;
  unint64_t v545;
  int v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int *v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  int *v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  int v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int *v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  int *v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  ldiv_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  ldiv_t v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  unint64_t i;
  uint64_t v610;
  int v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  int v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  unint64_t j;
  uint64_t v632;
  uint64_t v633;
  int v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  int v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  int v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  unint64_t k;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  ldiv_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  ldiv_t v678;
  int v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int *v685;
  uint64_t v686;
  unint64_t v687;
  _QWORD *v688;
  uint64_t v689;
  int *v690;
  uint64_t v691;
  unint64_t v692;
  int v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  int *v699;
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  _QWORD *v703;
  uint64_t v704;
  int *v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  int v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int *v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  _QWORD *v721;
  uint64_t v722;
  int *v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  unint64_t v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  ldiv_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  ldiv_t v740;
  int v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t *v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  unint64_t m;
  uint64_t v757;
  int v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  unint64_t v774;
  uint64_t v775;
  uint64_t v776;
  int v777;
  unint64_t n;
  uint64_t v779;
  uint64_t v780;
  int v781;
  unint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t *v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  int v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  unint64_t ii;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  int v815;
  ldiv_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  ldiv_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  _QWORD *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  _QWORD *v852;
  uint64_t v853;
  _QWORD *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  _QWORD *v874;
  _QWORD *v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  ldiv_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  ldiv_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  float *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  _QWORD *v932;
  uint64_t v933;
  _QWORD *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  _QWORD *v954;
  _QWORD *v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  unsigned int v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int v991;
  unsigned int v992;
  int v993;
  unint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  int *v998;
  uint64_t v999;
  uint64_t v1000;
  char v1001;
  unsigned int v1002;
  int v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int *v1008;
  uint64_t v1009;
  uint64_t v1010;
  char v1011;
  unsigned int v1012;
  int v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  int v1022;
  unsigned int v1023;
  int v1024;
  unint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int v1033;
  unsigned int v1034;
  int v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int *v1040;
  uint64_t v1041;
  uint64_t v1042;
  char v1043;
  unsigned int v1044;
  int v1045;
  unint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  int *v1050;
  uint64_t v1051;
  uint64_t v1052;
  char v1053;
  unsigned int v1054;
  int v1055;
  unint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064;
  unsigned int v1065;
  int v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int v1075;
  unsigned int v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unsigned int v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  unsigned int v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  float v1108;
  unsigned int v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  float v1119;
  unsigned int v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  uint64_t *v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t *v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  unsigned int v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  int v1146;
  ldiv_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  int v1151;
  ldiv_t v1152;
  uint64_t v1153;
  unsigned int v1154;
  int v1155;
  unint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  int *v1160;
  uint64_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  unsigned int v1164;
  _QWORD *v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int v1174;
  ldiv_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  int v1181;
  ldiv_t v1182;
  uint64_t v1183;
  unsigned int v1184;
  int v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t *v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t *v1195;
  uint64_t v1196;
  uint64_t v1197;
  int v1198;
  int v1199;
  unint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  unsigned int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int v1210;
  ldiv_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  int v1215;
  ldiv_t v1216;
  uint64_t v1217;
  unsigned int v1218;
  int v1219;
  unint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  int *v1224;
  uint64_t v1225;
  unint64_t v1226;
  uint64_t v1227;
  unsigned int v1228;
  _QWORD *v1229;
  uint64_t v1230;
  unint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  ldiv_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  int v1245;
  ldiv_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  int v1249;
  unint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t *v1259;
  uint64_t v1260;
  uint64_t v1261;
  int v1262;
  int v1263;
  unint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  unsigned int v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  int v1274;
  ldiv_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  int v1279;
  ldiv_t v1280;
  uint64_t v1281;
  unsigned int v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  uint64_t *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t *v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unsigned int v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  int v1309;
  ldiv_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  int v1314;
  ldiv_t v1315;
  uint64_t v1316;
  unsigned int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  unsigned int v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  int v1344;
  ldiv_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  int v1349;
  ldiv_t v1350;
  uint64_t v1351;
  unsigned int v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  uint64_t *v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int v1373;
  unsigned int v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  int quot;
  ldiv_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  int v1383;
  ldiv_t v1384;
  uint64_t v1385;
  int v1386;
  unsigned int v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  uint64_t *v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t *v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  int v1408;
  unsigned int v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  int v1413;
  ldiv_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  int v1418;
  ldiv_t v1419;
  uint64_t v1420;
  int v1421;
  unsigned int v1422;
  int v1423;
  unint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  int *v1428;
  uint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  char v1432;
  unsigned int v1433;
  _QWORD *v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  int v1443;
  ldiv_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  ldiv_t v1451;
  uint64_t v1452;
  char v1453;
  unsigned int v1454;
  int v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  int *v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  char v1464;
  unsigned int v1465;
  _QWORD *v1466;
  uint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  int v1475;
  ldiv_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  int v1482;
  ldiv_t v1483;
  uint64_t v1484;
  char v1485;
  unsigned int v1486;
  int v1487;
  unint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t *v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t *v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  int v1501;
  unint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  int v1505;
  unsigned int v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  int v1512;
  ldiv_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  int v1517;
  ldiv_t v1518;
  uint64_t v1519;
  int v1520;
  unsigned int v1521;
  int v1522;
  unint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t *v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t *v1532;
  uint64_t v1533;
  uint64_t v1534;
  int v1535;
  int v1536;
  unint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  int v1540;
  unsigned int v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  int v1547;
  ldiv_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  int v1552;
  ldiv_t v1553;
  uint64_t v1554;
  int v1555;
  unsigned int v1556;
  int v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  int *v1562;
  uint64_t v1563;
  unint64_t v1564;
  uint64_t v1565;
  char v1566;
  unsigned int v1567;
  _QWORD *v1568;
  uint64_t v1569;
  unint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  int v1577;
  ldiv_t v1578;
  uint64_t v1579;
  unint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  int v1584;
  ldiv_t v1585;
  uint64_t v1586;
  char v1587;
  unsigned int v1588;
  int v1589;
  unint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  int *v1594;
  uint64_t v1595;
  unint64_t v1596;
  uint64_t v1597;
  char v1598;
  unsigned int v1599;
  _QWORD *v1600;
  uint64_t v1601;
  unint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  unint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  int v1609;
  ldiv_t v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  int v1616;
  ldiv_t v1617;
  uint64_t v1618;
  char v1619;
  unsigned int v1620;
  int v1621;
  unint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t *v1631;
  uint64_t v1632;
  uint64_t v1633;
  int v1634;
  int v1635;
  unint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  int v1639;
  unsigned int v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  int v1646;
  ldiv_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  int v1651;
  ldiv_t v1652;
  uint64_t v1653;
  int v1654;
  unsigned int v1655;
  int v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t *v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t *v1666;
  uint64_t v1667;
  uint64_t v1668;
  int v1669;
  int v1670;
  unint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  int v1674;
  unsigned int v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  int v1681;
  ldiv_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  int v1686;
  ldiv_t v1687;
  uint64_t v1688;
  int v1689;
  unsigned int v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  uint64_t *v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t *v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  unsigned int v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  int v1717;
  ldiv_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  int v1722;
  ldiv_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  unsigned int v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  unint64_t v1734;
  uint64_t *v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t *v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  unsigned int v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  int v1753;
  ldiv_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  int v1758;
  ldiv_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  unsigned int v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  unint64_t v1770;
  uint64_t *v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t *v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  float v1783;
  unsigned int v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  int v1789;
  ldiv_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  int v1794;
  ldiv_t v1795;
  uint64_t v1796;
  float v1797;
  unsigned int v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  unint64_t v1806;
  uint64_t *v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t *v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  float v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  int v1825;
  ldiv_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  int v1830;
  ldiv_t v1831;
  uint64_t v1832;
  float v1833;
  unsigned int v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  unsigned int v1865;
  unsigned int v1866;
  uint64_t v1867;
  uint64_t v1868;
  unsigned int v1869;
  unsigned int v1870;
  unsigned int v1871;
  unsigned int v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  int *v1880;
  int *v1881;
  int *v1882;
  int *v1883;
  int *v1884;
  int *v1885;
  uint64_t v1886;
  unint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  unint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  unint64_t v1894;
  uint64_t v1895;
  unint64_t v1896;
  uint64_t v1897;
  unint64_t v1898;
  unint64_t v1899;
  unint64_t v1900;
  unint64_t v1901;
  unint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  unint64_t v1905;
  unint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  unint64_t v1909;
  unint64_t v1910;
  unint64_t v1911;
  unint64_t v1912;
  unint64_t v1913;
  unint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  uint64_t v1924;
  unint64_t v1925;
  uint64_t v1926;
  unint64_t v1927;
  unint64_t v1928;
  unint64_t v1929;
  unint64_t v1930;
  unint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  unint64_t v1934;
  unint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  unint64_t v1938;
  unint64_t v1939;
  unint64_t v1940;
  unint64_t v1941;
  unint64_t v1942;
  unint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  int v1949;
  int *v1950;
  int *v1951;
  int v1952;
  uint64_t v1953;
  unint64_t v1954;
  unint64_t v1955;
  unint64_t v1956;
  unint64_t v1957;
  unint64_t v1958;
  unint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(char **)(*a2 + 152) != **(unsigned __int8 **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          v35 = *(_DWORD *)(*a2 + 160);
          if (v35 >= 1)
          {
            v36 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v37 = *(char **)(*a2 + 152);
            v38 = -**(unsigned __int8 **)(*a1 + 152);
            v39 = v35 + 1;
            do
            {
              v40 = *v37++;
              *v36++ = v40 + v38 != 0;
              --v39;
            }
            while (v39 > 1);
          }
          return;
        case 2:
          v41 = *(_DWORD *)(*a1 + 160);
          if (v41 >= 1)
          {
            v42 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v43 = *(unsigned __int8 **)(*a1 + 152);
            v44 = -**(char **)(*a2 + 152);
            v45 = v41 + 1;
            do
            {
              v46 = *v43++;
              *v42++ = v44 + v46 != 0;
              --v45;
            }
            while (v45 > 1);
          }
          return;
        case 3:
          v47 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v47 >= 1)
          {
            v48 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v49 = *(char **)(*a2 + 152);
            v50 = *(unsigned __int8 **)(*a1 + 152);
            v51 = v47 + 1;
            do
            {
              v53 = *v50++;
              v52 = v53;
              v54 = *v49++;
              *v48++ = v54 != v52;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          v26 = *(_QWORD **)a3;
          v27 = (_QWORD *)*a1;
          v28 = *(int **)*a1;
          v29 = (v27[1] - (_QWORD)v28) >> 2;
          v30 = (v29 - 1);
          if ((int)v30 >= -1)
            v31 = -1;
          else
            v31 = v29 - 1;
          v32 = v31 + 1;
          v33 = v29 + 1;
          break;
      }
      while (1)
      {
        v34 = v33 - 2;
        if (v33 - 2 < 0)
          break;
        --v33;
        if (*(_QWORD *)(v27[3] + 8 * v34) != *(_QWORD *)(v26[3] + 8 * v34))
          goto LABEL_147;
      }
      v33 = v32;
LABEL_147:
      v215 = (_QWORD *)*a2;
      v216 = *(int **)*a2;
      v217 = (v215[1] - (_QWORD)v216) >> 2;
      v218 = (v217 - 1);
      if ((int)v218 >= -1)
        v219 = -1;
      else
        v219 = v217 - 1;
      v220 = v219 + 1;
      v221 = v217 + 1;
      while (1)
      {
        v222 = v221 - 2;
        if (v221 - 2 < 0)
          break;
        --v221;
        if (*(_QWORD *)(v215[3] + 8 * v222) != *(_QWORD *)(v26[3] + 8 * v222))
          goto LABEL_201;
      }
      v221 = v220;
LABEL_201:
      v269 = v29 + 1;
      while (1)
      {
        v270 = v269 - 2;
        if (v269 - 2 < 0)
          break;
        --v269;
        if (*(_QWORD *)(v27[3] + 8 * v270))
          goto LABEL_236;
      }
      v269 = v32;
LABEL_236:
      v283 = v217 + 1;
      while (1)
      {
        v284 = v283 - 2;
        if (v283 - 2 < 0)
          break;
        --v283;
        if (*(_QWORD *)(v215[3] + 8 * v284))
          goto LABEL_271;
      }
      v283 = v220;
LABEL_271:
      v297 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v33 <= v221)
        v298 = v221;
      else
        v298 = v33;
      if (v33 <= v283)
        v33 = v283;
      if (v269 > v221)
        v221 = v269;
      if (v297 > v221)
      {
        v299 = 1;
      }
      else
      {
        v221 = (uint64_t)(v26[1] - *v26) >> 2;
        v299 = 4;
      }
      if (v297 > v33)
      {
        v300 = 2;
      }
      else
      {
        v33 = v221;
        v300 = v299;
      }
      if (v297 > v298)
      {
        v33 = v298;
        v300 = 3;
      }
      v1944 = v218;
      v1960 = v30;
      if (!v33)
        goto LABEL_300;
      v301 = *(_QWORD *)(v26[3] + 8 * (v33 - 1));
      if (v301 < 0x10)
        goto LABEL_300;
      switch(v300)
      {
        case 1:
          if (v33 == 2)
          {
            v1353 = *v28;
            if ((_DWORD)v1353)
            {
              v1354 = 0;
              v1355 = 0;
              v1356 = 0;
              v1357 = v27[19];
              v1358 = v215[19];
              v1359 = v26[19];
              v1360 = v28[1];
              v1361 = (uint64_t *)v27[3];
              v1362 = *v1361;
              v1363 = v1361[1];
              v1364 = (uint64_t *)v215[3];
              v1366 = *v1364;
              v1365 = v1364[1];
              if (v1360 <= 1)
                v1367 = 1;
              else
                v1367 = v28[1];
              v1368 = v1362 - v1363 * v1360;
              v1369 = v1366 - v1365 * v216[1];
              do
              {
                if ((_DWORD)v1360)
                {
                  v1370 = 0;
                  v1371 = v1358 + v1355;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1372 = 0;
                      v1373 = -*(unsigned __int8 *)(v1357 + v1356);
                      v1374 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1359 + v1372) = *(char *)(v1371 + v1372) + v1373 != 0;
                        --v1374;
                        ++v1372;
                      }
                      while (v1374 > 1);
                    }
                    v1356 += v1363;
                    v1355 += v1365;
                    v1359 += (int)v301;
                    ++v1370;
                    v1371 += v1365;
                  }
                  while (v1370 != v1367);
                }
                v1356 += v1368;
                v1355 += v1369;
                ++v1354;
              }
              while (v1354 != v1353);
            }
          }
          else if (v33 == 1)
          {
            v971 = *v28;
            if ((_DWORD)v971)
            {
              v972 = 0;
              v973 = 0;
              v974 = v27[19];
              v975 = v215[19];
              v976 = v26[19];
              v977 = *(_QWORD *)v27[3];
              v978 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v979 = 0;
                  v980 = -*(unsigned __int8 *)(v974 + v973);
                  v981 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v976 + v979) = *(char *)(v975 + v979) + v980 != 0;
                    --v981;
                    ++v979;
                  }
                  while (v981 > 1);
                }
                v973 += v977;
                v976 += (int)v301;
                ++v972;
                v975 += v978;
              }
              while (v972 != v971);
            }
          }
          else
          {
            v1901 = v26[6];
            if (v1901)
            {
              v1930 = 0;
              v1852 = v215[19];
              v1867 = v27[19];
              v1375 = v26[19];
              do
              {
                v1376 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1377 = v27[3];
                  quot = v1930;
                  do
                  {
                    v1379 = ldiv(quot, v28[v30]);
                    quot = v1379.quot;
                    v1376 += *(_QWORD *)(v1377 + 8 * v30--) * v1379.rem;
                  }
                  while (v30 != -1);
                }
                v1380 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1381) = 0;
                }
                else
                {
                  v1381 = 0;
                  v1382 = v215[3];
                  v1383 = v1930;
                  do
                  {
                    v1384 = ldiv(v1383, v216[v1380]);
                    v1383 = v1384.quot;
                    v1381 += *(_QWORD *)(v1382 + 8 * v1380--) * v1384.rem;
                  }
                  while (v1380 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1385 = 0;
                  v1386 = -*(unsigned __int8 *)(v1867 + (int)v1376);
                  v1387 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1375 + v1385) = *(char *)(v1852 + (int)v1381 + v1385) + v1386 != 0;
                    --v1387;
                    ++v1385;
                  }
                  while (v1387 > 1);
                }
                v1375 += (int)v301;
                v1930 += (int)v301;
              }
              while (v1930 < v1901);
            }
          }
          break;
        case 2:
          if (v33 == 2)
          {
            v1388 = *v28;
            if ((_DWORD)v1388)
            {
              v1389 = 0;
              v1390 = 0;
              v1391 = 0;
              v1392 = v27[19];
              v1393 = v215[19];
              v1394 = v26[19];
              v1395 = v28[1];
              v1396 = (uint64_t *)v27[3];
              v1397 = *v1396;
              v1398 = v1396[1];
              v1399 = (uint64_t *)v215[3];
              v1401 = *v1399;
              v1400 = v1399[1];
              if (v1395 <= 1)
                v1402 = 1;
              else
                v1402 = v28[1];
              v1403 = v1397 - v1398 * v1395;
              v1404 = v1401 - v1400 * v216[1];
              do
              {
                if ((_DWORD)v1395)
                {
                  v1405 = 0;
                  v1406 = v1392 + v1391;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1407 = 0;
                      v1408 = -*(char *)(v1393 + v1390);
                      v1409 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1394 + v1407) = v1408 + *(unsigned __int8 *)(v1406 + v1407) != 0;
                        --v1409;
                        ++v1407;
                      }
                      while (v1409 > 1);
                    }
                    v1391 += v1398;
                    v1390 += v1400;
                    v1394 += (int)v301;
                    ++v1405;
                    v1406 += v1398;
                  }
                  while (v1405 != v1402);
                }
                v1391 += v1403;
                v1390 += v1404;
                ++v1389;
              }
              while (v1389 != v1388);
            }
          }
          else if (v33 == 1)
          {
            v982 = *v28;
            if ((_DWORD)v982)
            {
              v983 = 0;
              v984 = 0;
              v985 = v27[19];
              v986 = v215[19];
              v987 = v26[19];
              v988 = *(_QWORD *)v27[3];
              v989 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v990 = 0;
                  v991 = -*(char *)(v986 + v984);
                  v992 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v987 + v990) = v991 + *(unsigned __int8 *)(v985 + v990) != 0;
                    --v992;
                    ++v990;
                  }
                  while (v992 > 1);
                }
                v984 += v989;
                v987 += (int)v301;
                ++v983;
                v985 += v988;
              }
              while (v983 != v982);
            }
          }
          else
          {
            v1902 = v26[6];
            if (v1902)
            {
              v1931 = 0;
              v1853 = v215[19];
              v1868 = v27[19];
              v1410 = v26[19];
              do
              {
                v1411 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1412 = v27[3];
                  v1413 = v1931;
                  do
                  {
                    v1414 = ldiv(v1413, v28[v30]);
                    v1413 = v1414.quot;
                    v1411 += *(_QWORD *)(v1412 + 8 * v30--) * v1414.rem;
                  }
                  while (v30 != -1);
                }
                v1415 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1416) = 0;
                }
                else
                {
                  v1416 = 0;
                  v1417 = v215[3];
                  v1418 = v1931;
                  do
                  {
                    v1419 = ldiv(v1418, v216[v1415]);
                    v1418 = v1419.quot;
                    v1416 += *(_QWORD *)(v1417 + 8 * v1415--) * v1419.rem;
                  }
                  while (v1415 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1420 = 0;
                  v1421 = -*(char *)(v1853 + (int)v1416);
                  v1422 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1410 + v1420) = v1421 + *(unsigned __int8 *)(v1868 + (int)v1411 + v1420) != 0;
                    --v1422;
                    ++v1420;
                  }
                  while (v1422 > 1);
                }
                v1410 += (int)v301;
                v1931 += (int)v301;
              }
              while (v1931 < v1902);
            }
          }
          break;
        case 3:
          if (v33 == 2)
          {
            v1121 = *v28;
            if ((_DWORD)v1121)
            {
              v1122 = 0;
              v1123 = 0;
              v1124 = 0;
              v1125 = v27[19];
              v1126 = v215[19];
              v1127 = v26[19];
              v1128 = v28[1];
              v1129 = (uint64_t *)v27[3];
              v1130 = *v1129;
              v1131 = v1129[1];
              v1132 = (uint64_t *)v215[3];
              v1134 = *v1132;
              v1133 = v1132[1];
              if (v1128 <= 1)
                v1135 = 1;
              else
                v1135 = v28[1];
              v1136 = v1130 - v1131 * v1128;
              v1137 = v1134 - v1133 * v216[1];
              do
              {
                if ((_DWORD)v1128)
                {
                  v1138 = 0;
                  v1139 = v1126 + v1123;
                  v1140 = v1125 + v1124;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      v1141 = 0;
                      v1142 = v301 + 1;
                      do
                      {
                        *(_BYTE *)(v1127 + v1141) = *(char *)(v1139 + v1141) != *(unsigned __int8 *)(v1140 + v1141);
                        --v1142;
                        ++v1141;
                      }
                      while (v1142 > 1);
                    }
                    v1124 += v1131;
                    v1123 += v1133;
                    v1127 += (int)v301;
                    ++v1138;
                    v1139 += v1133;
                    v1140 += v1131;
                  }
                  while (v1138 != v1135);
                }
                v1124 += v1136;
                v1123 += v1137;
                ++v1122;
              }
              while (v1122 != v1121);
            }
          }
          else if (v33 == 1)
          {
            v302 = *v28;
            if ((_DWORD)v302)
            {
              v303 = 0;
              v304 = v27[19];
              v305 = v215[19];
              v306 = v26[19];
              v307 = *(_QWORD *)v27[3];
              v308 = *(_QWORD *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  v309 = 0;
                  v310 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v306 + v309) = *(char *)(v305 + v309) != *(unsigned __int8 *)(v304 + v309);
                    --v310;
                    ++v309;
                  }
                  while (v310 > 1);
                }
                v306 += (int)v301;
                ++v303;
                v305 += v308;
                v304 += v307;
              }
              while (v303 != v302);
            }
          }
          else
          {
            v1894 = v26[6];
            if (v1894)
            {
              v1923 = 0;
              v1847 = v215[19];
              v1864 = v27[19];
              v1143 = v26[19];
              do
              {
                v1144 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  v1145 = v27[3];
                  v1146 = v1923;
                  do
                  {
                    v1147 = ldiv(v1146, v28[v30]);
                    v1146 = v1147.quot;
                    v1144 += *(_QWORD *)(v1145 + 8 * v30--) * v1147.rem;
                  }
                  while (v30 != -1);
                }
                v1148 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1149) = 0;
                }
                else
                {
                  v1149 = 0;
                  v1150 = v215[3];
                  v1151 = v1923;
                  do
                  {
                    v1152 = ldiv(v1151, v216[v1148]);
                    v1151 = v1152.quot;
                    v1149 += *(_QWORD *)(v1150 + 8 * v1148--) * v1152.rem;
                  }
                  while (v1148 != -1);
                }
                v30 = v1960;
                if ((int)v301 >= 1)
                {
                  v1153 = 0;
                  v1154 = v301 + 1;
                  do
                  {
                    *(_BYTE *)(v1143 + v1153) = *(char *)(v1847 + (int)v1149 + v1153) != *(unsigned __int8 *)(v1864 + (int)v1144 + v1153);
                    --v1154;
                    ++v1153;
                  }
                  while (v1154 > 1);
                }
                v1143 += (int)v301;
                v1923 += (int)v301;
              }
              while (v1923 < v1894);
            }
          }
          break;
        default:
LABEL_300:
          switch(v297)
          {
            case 1uLL:
              v311 = v26[6];
              if (v311)
              {
                v312 = (unsigned __int8 *)v27[19];
                v313 = (char *)v215[19];
                v314 = (BOOL *)v26[19];
                v315 = *(_QWORD *)v27[3];
                v316 = *(_QWORD *)v215[3];
                do
                {
                  *v314++ = *v313 != *v312;
                  v313 += v316;
                  v312 += v315;
                  --v311;
                }
                while (v311);
              }
              break;
            case 2uLL:
              v448 = *v28;
              if ((_DWORD)v448)
              {
                v449 = 0;
                v450 = 0;
                v451 = 0;
                v452 = 0;
                v453 = v27[19];
                v454 = v215[19];
                v455 = v26[19];
                v456 = v28[1];
                v457 = (uint64_t *)v27[3];
                v458 = *v457;
                v459 = v457[1];
                v460 = (uint64_t *)v215[3];
                v461 = *v460;
                v462 = v460[1];
                v463 = v461 - v462 * v216[1];
                if (v456 <= 1)
                  v464 = 1;
                else
                  v464 = v28[1];
                v465 = v458 - v459 * v456;
                do
                {
                  if ((_DWORD)v456)
                  {
                    v466 = v450 + v464;
                    v467 = (BOOL *)(v455 + v450);
                    v468 = v464;
                    do
                    {
                      *v467++ = *(char *)(v454 + v451) != *(unsigned __int8 *)(v453 + v452);
                      v452 += v459;
                      v451 += v462;
                      --v468;
                    }
                    while (v468);
                    v450 = v466;
                  }
                  v452 += v465;
                  v451 += v463;
                  ++v449;
                }
                while (v449 != v448);
              }
              break;
            case 3uLL:
              v469 = *v28;
              if ((_DWORD)v469)
              {
                v470 = 0;
                v471 = 0;
                v472 = 0;
                v473 = 0;
                v474 = v27[19];
                v475 = v215[19];
                v476 = v26[19];
                v477 = v28[1];
                v478 = (_QWORD *)v27[3];
                v479 = v478[1];
                v480 = (_QWORD *)v215[3];
                v481 = v480[1];
                v482 = *v480 - v481 * v216[1];
                if (v477 <= 1)
                  v483 = 1;
                else
                  v483 = v28[1];
                v484 = *v478 - v479 * v477;
                do
                {
                  if ((_DWORD)v477)
                  {
                    v485 = 0;
                    v486 = v28[2];
                    v487 = v478[2];
                    v488 = v480[2];
                    if (v486 <= 1)
                      v489 = 1;
                    else
                      v489 = v28[2];
                    v490 = v481 - v488 * v216[2];
                    do
                    {
                      v491 = v489;
                      if ((_DWORD)v486)
                      {
                        do
                        {
                          *(_BYTE *)(v476 + v471++) = *(char *)(v475 + v472) != *(unsigned __int8 *)(v474 + v473);
                          v473 += v487;
                          v472 += v488;
                          --v491;
                        }
                        while (v491);
                      }
                      v473 += v479 - v487 * v486;
                      v472 += v490;
                      ++v485;
                    }
                    while (v485 != v483);
                  }
                  v473 += v484;
                  v472 += v482;
                  ++v470;
                }
                while (v470 != v469);
              }
              break;
            case 4uLL:
              v1967 = *v28;
              if ((_DWORD)v1967)
              {
                v492 = 0;
                v493 = 0;
                v494 = 0;
                v495 = 0;
                v496 = v27[19];
                v497 = v215[19];
                v498 = v26[19];
                v499 = v28[1];
                v500 = (_QWORD *)v27[3];
                v501 = (_QWORD *)v215[3];
                v1862 = v501[1];
                v1874 = v500[1];
                v1916 = *v501 - v1862 * v216[1];
                v1949 = v28[1];
                if (v499 <= 1)
                  v502 = 1;
                else
                  v502 = v28[1];
                v1887 = *v500 - v500[1] * v499;
                do
                {
                  if (v1949)
                  {
                    v503 = 0;
                    v504 = v28[2];
                    v505 = v500[2];
                    v506 = v501[2];
                    if (v504 <= 1)
                      v507 = 1;
                    else
                      v507 = v28[2];
                    v508 = v1862 - v506 * v216[2];
                    do
                    {
                      if ((_DWORD)v504)
                      {
                        v509 = 0;
                        v510 = v28[3];
                        v511 = v500[3];
                        v512 = v501[3];
                        if (v510 <= 1)
                          v513 = 1;
                        else
                          v513 = v28[3];
                        v514 = v506 - v512 * v216[3];
                        do
                        {
                          v515 = v513;
                          if ((_DWORD)v510)
                          {
                            do
                            {
                              *(_BYTE *)(v498 + v493++) = *(char *)(v497 + v494) != *(unsigned __int8 *)(v496 + v495);
                              v495 += v511;
                              v494 += v512;
                              --v515;
                            }
                            while (v515);
                          }
                          v495 += v505 - v511 * v510;
                          v494 += v514;
                          ++v509;
                        }
                        while (v509 != v507);
                      }
                      v495 += v1874 - v505 * v504;
                      v494 += v508;
                      ++v503;
                    }
                    while (v503 != v502);
                  }
                  v495 += v1887;
                  v494 += v1916;
                  ++v492;
                }
                while (v492 != v1967);
              }
              break;
            default:
              v437 = v26[6];
              if (v437)
              {
                v438 = 0;
                v1886 = v215[19];
                v1915 = v27[19];
                v1873 = v26[19];
                do
                {
                  v439 = 0;
                  if ((v30 & 0x80000000) == 0)
                  {
                    v440 = v27[3];
                    v441 = v438;
                    do
                    {
                      v442 = ldiv(v441, v28[v30]);
                      v441 = v442.quot;
                      v439 += *(_QWORD *)(v440 + 8 * v30--) * v442.rem;
                    }
                    while (v30 != -1);
                  }
                  v443 = v1944;
                  if ((v1944 & 0x80000000) != 0)
                  {
                    LODWORD(v444) = 0;
                  }
                  else
                  {
                    v444 = 0;
                    v445 = v215[3];
                    v446 = v438;
                    do
                    {
                      v447 = ldiv(v446, v216[v443]);
                      v446 = v447.quot;
                      v444 += *(_QWORD *)(v445 + 8 * v443--) * v447.rem;
                    }
                    while (v443 != -1);
                  }
                  *(_BYTE *)(v1873 + v438++) = *(char *)(v1886 + (int)v444) != *(unsigned __int8 *)(v1915 + (int)v439);
                  v30 = v1960;
                }
                while (v438 != v437);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            v10 = **(_BYTE **)(*a1 + 152);
            v11 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v12 = *(char **)(*a2 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = v10 - v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v63 = *(_DWORD *)(*a1 + 160);
          if (v63 >= 1)
          {
            v64 = **(_BYTE **)(*a2 + 152);
            v65 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v66 = *(char **)(*a1 + 152);
            v67 = v63 + 1;
            do
            {
              v68 = *v66++;
              *v65++ = v68 - v64;
              --v67;
            }
            while (v67 > 1);
          }
          return;
        case 3:
          v69 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v69 >= 1)
          {
            v70 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v71 = *(char **)(*a2 + 152);
            v72 = *(char **)(*a1 + 152);
            v73 = v69 + 1;
            do
            {
              v75 = *v72++;
              v74 = v75;
              v76 = *v71++;
              *v70++ = v74 - v76;
              --v73;
            }
            while (v73 > 1);
          }
          return;
        default:
          v55 = *(_QWORD **)a3;
          v56 = *a1;
          v57 = *(int **)*a1;
          v58 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v57) >> 2;
          v59 = v58 - 1;
          if ((int)v58 - 1 >= -1)
            v59 = -1;
          v60 = v59 + 1;
          v61 = v58 + 1;
          break;
      }
      while (1)
      {
        v62 = v61 - 2;
        if (v61 - 2 < 0)
          break;
        --v61;
        if (*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v62) != *(_QWORD *)(v55[3] + 8 * v62))
          goto LABEL_155;
      }
      v61 = v60;
LABEL_155:
      v223 = (int **)*a2;
      v224 = *(int **)*a2;
      v225 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v224) >> 2;
      v226 = v225 - 1;
      if ((int)v225 - 1 >= -1)
        v226 = -1;
      v227 = v226 + 1;
      v228 = v225 + 1;
      while (1)
      {
        v229 = v228 - 2;
        if (v228 - 2 < 0)
          break;
        --v228;
        if (*(_QWORD *)&v223[3][2 * v229] != *(_QWORD *)(v55[3] + 8 * v229))
          goto LABEL_206;
      }
      v228 = v227;
LABEL_206:
      v271 = v58 + 1;
      while (1)
      {
        v272 = v271 - 2;
        if (v271 - 2 < 0)
          break;
        --v271;
        if (*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v272))
          goto LABEL_241;
      }
      v271 = v60;
LABEL_241:
      v285 = v225 + 1;
      while (1)
      {
        v286 = v285 - 2;
        if (v285 - 2 < 0)
          break;
        --v285;
        if (*(_QWORD *)&v223[3][2 * v286])
          goto LABEL_306;
      }
      v285 = v227;
LABEL_306:
      v317 = (uint64_t)(v55[1] - *v55) >> 2;
      if (v61 <= v228)
        v318 = v228;
      else
        v318 = v61;
      if (v61 <= v285)
        v61 = v285;
      if (v271 > v228)
        v228 = v271;
      if (v317 > v228)
      {
        v319 = 1;
      }
      else
      {
        v228 = (uint64_t)(v55[1] - *v55) >> 2;
        v319 = 4;
      }
      if (v317 > v61)
      {
        v320 = 2;
      }
      else
      {
        v61 = v228;
        v320 = v319;
      }
      if (v317 > v318)
      {
        v61 = v318;
        v320 = 3;
      }
      if (!v61)
        goto LABEL_336;
      v321 = *(_QWORD *)(v55[3] + 8 * (v61 - 1));
      if (v321 < 0x10)
        goto LABEL_336;
      v1961 = *(_QWORD *)(v55[3] + 8 * (v61 - 1));
      switch(v320)
      {
        case 1:
          if (v61 == 2)
          {
            v1423 = *v57;
            if (*v57)
            {
              v1424 = 0;
              v1425 = 0;
              v1426 = 0;
              v1427 = *(_QWORD *)(v56 + 152);
              v1428 = v223[19];
              v1429 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1430 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1431 = 0;
                      v1432 = *(_BYTE *)(v1427 + v1426);
                      v1433 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1429 + v1431) = v1432 - *((_BYTE *)v1428 + v1425 + v1431);
                        --v1433;
                        ++v1431;
                      }
                      while (v1433 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1434 = *(_QWORD **)(v56 + 24);
                    v1435 = v1434[1];
                    v1426 += v1435;
                    v1425 += *((_QWORD *)v223[3] + 1);
                    v1429 += (int)v321;
                    ++v1430;
                    v1436 = v57[1];
                  }
                  while (v1430 < v1436);
                  v1423 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1436 = 0;
                  v1434 = *(_QWORD **)(v56 + 24);
                  v1435 = v1434[1];
                }
                v1426 = *v1434 + v1426 - v1436 * v1435;
                v1425 = *(_QWORD *)v223[3] + v1425 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1424;
              }
              while (v1424 < v1423);
            }
          }
          else if (v61 == 1)
          {
            v993 = *v57;
            if (*v57)
            {
              v994 = 0;
              v995 = 0;
              v996 = 0;
              v997 = *(_QWORD *)(v56 + 152);
              v998 = v223[19];
              v999 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v1000 = 0;
                  v1001 = *(_BYTE *)(v997 + v996);
                  v1002 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v999 + v1000) = v1001 - *((_BYTE *)v998 + v995 + v1000);
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v993 = **(_DWORD **)*a1;
                }
                v996 += **(_QWORD **)(v56 + 24);
                v995 += *(_QWORD *)v223[3];
                v999 += (int)v321;
                ++v994;
              }
              while (v994 < v993);
            }
          }
          else if (v55[6])
          {
            v1882 = v223[19];
            v1903 = *(_QWORD *)(v56 + 152);
            v1932 = (int)v321;
            v1956 = 0;
            v1869 = v321 + 1;
            v1437 = v55[19];
            do
            {
              v1438 = *(_QWORD *)*a1;
              v1439 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1438) >> 2;
              v1440 = 0;
              v1441 = (v1439 - 1);
              if ((int)v1439 - 1 >= 0)
              {
                v1442 = *(_QWORD *)(*a1 + 24);
                v1443 = v1956;
                do
                {
                  v1444 = ldiv(v1443, *(int *)(v1438 + 4 * v1441));
                  v1443 = v1444.quot;
                  v1440 += *(_QWORD *)(v1442 + 8 * v1441--) * v1444.rem;
                }
                while (v1441 != -1);
              }
              v1445 = *(_QWORD *)*a2;
              v1446 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1445) >> 2;
              v1447 = 0;
              v1448 = (v1446 - 1);
              if ((int)v1446 - 1 >= 0)
              {
                v1449 = *(_QWORD *)(*a2 + 24);
                v1450 = v1956;
                do
                {
                  v1451 = ldiv(v1450, *(int *)(v1445 + 4 * v1448));
                  v1450 = v1451.quot;
                  v1447 += *(_QWORD *)(v1449 + 8 * v1448--) * v1451.rem;
                }
                while (v1448 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1452 = 0;
                v1453 = *(_BYTE *)(v1903 + (int)v1440);
                v1454 = v1869;
                do
                {
                  *(_BYTE *)(v1437 + v1452) = v1453 - *((_BYTE *)v1882 + (int)v1447 + v1452);
                  --v1454;
                  ++v1452;
                }
                while (v1454 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1437 += v1932;
              v1956 += v1932;
            }
            while (v1956 < v55[6]);
          }
          break;
        case 2:
          if (v61 == 2)
          {
            v1455 = *v57;
            if (*v57)
            {
              v1456 = 0;
              v1457 = 0;
              v1458 = 0;
              v1459 = *(_QWORD *)(v56 + 152);
              v1460 = v223[19];
              v1461 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1462 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1463 = 0;
                      v1464 = *((_BYTE *)v1460 + v1457);
                      v1465 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1461 + v1463) = *(_BYTE *)(v1459 + v1458 + v1463) - v1464;
                        --v1465;
                        ++v1463;
                      }
                      while (v1465 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1466 = *(_QWORD **)(v56 + 24);
                    v1467 = v1466[1];
                    v1458 += v1467;
                    v1457 += *((_QWORD *)v223[3] + 1);
                    v1461 += (int)v321;
                    ++v1462;
                    v1468 = v57[1];
                  }
                  while (v1462 < v1468);
                  v1455 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1468 = 0;
                  v1466 = *(_QWORD **)(v56 + 24);
                  v1467 = v1466[1];
                }
                v1458 = *v1466 + v1458 - v1468 * v1467;
                v1457 = *(_QWORD *)v223[3] + v1457 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1456;
              }
              while (v1456 < v1455);
            }
          }
          else if (v61 == 1)
          {
            v1003 = *v57;
            if (*v57)
            {
              v1004 = 0;
              v1005 = 0;
              v1006 = 0;
              v1007 = *(_QWORD *)(v56 + 152);
              v1008 = v223[19];
              v1009 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v1010 = 0;
                  v1011 = *((_BYTE *)v1008 + v1005);
                  v1012 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v1009 + v1010) = *(_BYTE *)(v1007 + v1006 + v1010) - v1011;
                    --v1012;
                    ++v1010;
                  }
                  while (v1012 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v1003 = **(_DWORD **)*a1;
                }
                v1006 += **(_QWORD **)(v56 + 24);
                v1005 += *(_QWORD *)v223[3];
                v1009 += (int)v321;
                ++v1004;
              }
              while (v1004 < v1003);
            }
          }
          else if (v55[6])
          {
            v1883 = v223[19];
            v1904 = *(_QWORD *)(v56 + 152);
            v1933 = (int)v321;
            v1957 = 0;
            v1870 = v321 + 1;
            v1469 = v55[19];
            do
            {
              v1470 = *(_QWORD *)*a1;
              v1471 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1470) >> 2;
              v1472 = 0;
              v1473 = (v1471 - 1);
              if ((int)v1471 - 1 >= 0)
              {
                v1474 = *(_QWORD *)(*a1 + 24);
                v1475 = v1957;
                do
                {
                  v1476 = ldiv(v1475, *(int *)(v1470 + 4 * v1473));
                  v1475 = v1476.quot;
                  v1472 += *(_QWORD *)(v1474 + 8 * v1473--) * v1476.rem;
                }
                while (v1473 != -1);
              }
              v1477 = *(_QWORD *)*a2;
              v1478 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1477) >> 2;
              v1479 = 0;
              v1480 = (v1478 - 1);
              if ((int)v1478 - 1 >= 0)
              {
                v1481 = *(_QWORD *)(*a2 + 24);
                v1482 = v1957;
                do
                {
                  v1483 = ldiv(v1482, *(int *)(v1477 + 4 * v1480));
                  v1482 = v1483.quot;
                  v1479 += *(_QWORD *)(v1481 + 8 * v1480--) * v1483.rem;
                }
                while (v1480 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1484 = 0;
                v1485 = *((_BYTE *)v1883 + (int)v1479);
                v1486 = v1870;
                do
                {
                  *(_BYTE *)(v1469 + v1484) = *(_BYTE *)(v1904 + (int)v1472 + v1484) - v1485;
                  --v1486;
                  ++v1484;
                }
                while (v1486 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1469 += v1933;
              v1957 += v1933;
            }
            while (v1957 < v55[6]);
          }
          break;
        case 3:
          if (v61 == 2)
          {
            v1155 = *v57;
            if (*v57)
            {
              v1156 = 0;
              v1157 = 0;
              v1158 = 0;
              v1159 = *(_QWORD *)(v56 + 152);
              v1160 = v223[19];
              v1161 = v55[19];
              do
              {
                if (v57[1])
                {
                  v1162 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      v1163 = 0;
                      v1164 = v321 + 1;
                      do
                      {
                        *(_BYTE *)(v1161 + v1163) = *(_BYTE *)(v1159 + v1158 + v1163)
                                                  - *((_BYTE *)v1160 + v1157 + v1163);
                        --v1164;
                        ++v1163;
                      }
                      while (v1164 > 1);
                      v56 = *a1;
                      v223 = (int **)*a2;
                      v57 = *(int **)*a1;
                    }
                    v1165 = *(_QWORD **)(v56 + 24);
                    v1166 = v1165[1];
                    v1158 += v1166;
                    v1157 += *((_QWORD *)v223[3] + 1);
                    v1161 += (int)v321;
                    ++v1162;
                    v1167 = v57[1];
                  }
                  while (v1162 < v1167);
                  v1155 = *v57;
                  v224 = *v223;
                }
                else
                {
                  v1167 = 0;
                  v1165 = *(_QWORD **)(v56 + 24);
                  v1166 = v1165[1];
                }
                v1158 = *v1165 + v1158 - v1167 * v1166;
                v1157 = *(_QWORD *)v223[3] + v1157 - *((_QWORD *)v223[3] + 1) * v224[1];
                ++v1156;
              }
              while (v1156 < v1155);
            }
          }
          else if (v61 == 1)
          {
            v322 = *v57;
            if (*v57)
            {
              v323 = 0;
              v324 = 0;
              v325 = 0;
              v326 = *(_QWORD *)(v56 + 152);
              v327 = v223[19];
              v328 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  v329 = 0;
                  v330 = v321 + 1;
                  do
                  {
                    *(_BYTE *)(v328 + v329) = *(_BYTE *)(v326 + v325 + v329) - *((_BYTE *)v327 + v324 + v329);
                    --v330;
                    ++v329;
                  }
                  while (v330 > 1);
                  v56 = *a1;
                  v223 = (int **)*a2;
                  v322 = **(_DWORD **)*a1;
                }
                v325 += **(_QWORD **)(v56 + 24);
                v324 += *(_QWORD *)v223[3];
                v328 += (int)v321;
                ++v323;
              }
              while (v323 < v322);
            }
          }
          else if (v55[6])
          {
            v1880 = v223[19];
            v1895 = *(_QWORD *)(v56 + 152);
            v1924 = (int)v321;
            v1954 = 0;
            v1865 = v321 + 1;
            v1168 = v55[19];
            do
            {
              v1169 = *(_QWORD *)*a1;
              v1170 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1169) >> 2;
              v1171 = 0;
              v1172 = (v1170 - 1);
              if ((int)v1170 - 1 >= 0)
              {
                v1173 = *(_QWORD *)(*a1 + 24);
                v1174 = v1954;
                do
                {
                  v1175 = ldiv(v1174, *(int *)(v1169 + 4 * v1172));
                  v1174 = v1175.quot;
                  v1171 += *(_QWORD *)(v1173 + 8 * v1172--) * v1175.rem;
                }
                while (v1172 != -1);
              }
              v1176 = *(_QWORD *)*a2;
              v1177 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1176) >> 2;
              v1178 = 0;
              v1179 = (v1177 - 1);
              if ((int)v1177 - 1 >= 0)
              {
                v1180 = *(_QWORD *)(*a2 + 24);
                v1181 = v1954;
                do
                {
                  v1182 = ldiv(v1181, *(int *)(v1176 + 4 * v1179));
                  v1181 = v1182.quot;
                  v1178 += *(_QWORD *)(v1180 + 8 * v1179--) * v1182.rem;
                }
                while (v1179 != -1);
              }
              if ((int)v1961 >= 1)
              {
                v1183 = 0;
                v1184 = v1865;
                do
                {
                  *(_BYTE *)(v1168 + v1183) = *(_BYTE *)(v1895 + (int)v1171 + v1183)
                                            - *((_BYTE *)v1880 + (int)v1178 + v1183);
                  --v1184;
                  ++v1183;
                }
                while (v1184 > 1);
                v55 = *(_QWORD **)a3;
              }
              v1168 += v1924;
              v1954 += v1924;
            }
            while (v1954 < v55[6]);
          }
          break;
        default:
LABEL_336:
          switch(v317)
          {
            case 1uLL:
              if (v55[6])
              {
                v331 = 0;
                v332 = 0;
                v333 = 0;
                v334 = *(_QWORD *)(v56 + 152);
                v335 = v223[19];
                v336 = v55[19];
                do
                {
                  *(_BYTE *)(v336 + v331) = *(_BYTE *)(v334 + v333) - *((_BYTE *)v335 + v332);
                  v333 += **(_QWORD **)(*a1 + 24);
                  v332 += **(_QWORD **)(*a2 + 24);
                  ++v331;
                }
                while (v331 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v532 = *v57;
              if (*v57)
              {
                v533 = 0;
                v534 = 0;
                v535 = 0;
                v536 = 0;
                v537 = *(_QWORD *)(v56 + 152);
                v538 = v223[19];
                v539 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v540 = 0;
                    do
                    {
                      *(_BYTE *)(v539 + v534 + v540) = *(_BYTE *)(v537 + v536) - *((_BYTE *)v538 + v535);
                      v56 = *a1;
                      v541 = *(_QWORD **)(*a1 + 24);
                      v542 = v541[1];
                      v536 += v542;
                      v223 = (int **)*a2;
                      v543 = *(int **)(*a2 + 24);
                      v544 = *((_QWORD *)v543 + 1);
                      v535 += v544;
                      ++v540;
                      v57 = *(int **)*a1;
                      v545 = v57[1];
                    }
                    while (v540 < v545);
                    v532 = *v57;
                    v224 = *v223;
                    v534 += v540;
                  }
                  else
                  {
                    v545 = 0;
                    v541 = *(_QWORD **)(v56 + 24);
                    v542 = v541[1];
                    v543 = v223[3];
                    v544 = *((_QWORD *)v543 + 1);
                  }
                  v536 = *v541 + v536 - v545 * v542;
                  v535 = *(_QWORD *)v543 + v535 - v544 * v224[1];
                  ++v533;
                }
                while (v533 < v532);
              }
              break;
            case 3uLL:
              v546 = *v57;
              if (*v57)
              {
                v547 = 0;
                v548 = 0;
                v549 = 0;
                v550 = 0;
                v551 = *(_QWORD *)(v56 + 152);
                v552 = v223[19];
                v553 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v554 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        v555 = 0;
                        do
                        {
                          *(_BYTE *)(v553 + v548 + v555) = *(_BYTE *)(v551 + v550) - *((_BYTE *)v552 + v549);
                          v56 = *a1;
                          v556 = *(_QWORD **)(*a1 + 24);
                          v557 = v556[2];
                          v550 += v557;
                          v223 = (int **)*a2;
                          v558 = *(int **)(*a2 + 24);
                          v559 = *((_QWORD *)v558 + 2);
                          v549 += v559;
                          ++v555;
                          v57 = *(int **)*a1;
                          v560 = v57[2];
                        }
                        while (v555 < v560);
                        v224 = *v223;
                        v548 += v555;
                      }
                      else
                      {
                        v560 = 0;
                        v556 = *(_QWORD **)(v56 + 24);
                        v557 = v556[2];
                        v558 = v223[3];
                        v559 = *((_QWORD *)v558 + 2);
                      }
                      v561 = v556[1];
                      v550 = v561 + v550 - v560 * v557;
                      v549 = *((_QWORD *)v558 + 1) + v549 - v559 * v224[2];
                      ++v554;
                      v562 = v57[1];
                    }
                    while (v554 < v562);
                    v546 = *v57;
                  }
                  else
                  {
                    v562 = 0;
                    v556 = *(_QWORD **)(v56 + 24);
                    v561 = v556[1];
                  }
                  v550 = *v556 + v550 - v562 * v561;
                  v549 = *(_QWORD *)v223[3] + v549 - *((_QWORD *)v223[3] + 1) * v224[1];
                  ++v547;
                }
                while (v547 < v546);
              }
              break;
            case 4uLL:
              v563 = *v57;
              if (*v57)
              {
                v564 = 0;
                v565 = 0;
                v566 = 0;
                v567 = 0;
                v568 = *(_QWORD *)(v56 + 152);
                v569 = v223[19];
                v570 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    v571 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        v572 = 0;
                        do
                        {
                          if (v57[3])
                          {
                            v573 = 0;
                            do
                            {
                              *(_BYTE *)(v570 + v565 + v573) = *(_BYTE *)(v568 + v567) - *((_BYTE *)v569 + v566);
                              v56 = *a1;
                              v574 = *(_QWORD **)(*a1 + 24);
                              v575 = v574[3];
                              v567 += v575;
                              v223 = (int **)*a2;
                              v576 = *(int **)(*a2 + 24);
                              v577 = *((_QWORD *)v576 + 3);
                              v566 += v577;
                              ++v573;
                              v57 = *(int **)*a1;
                              v578 = v57[3];
                            }
                            while (v573 < v578);
                            v224 = *v223;
                            v565 += v573;
                          }
                          else
                          {
                            v578 = 0;
                            v574 = *(_QWORD **)(v56 + 24);
                            v575 = v574[3];
                            v576 = v223[3];
                            v577 = *((_QWORD *)v576 + 3);
                          }
                          v579 = v574[2];
                          v567 = v579 + v567 - v578 * v575;
                          v566 = *((_QWORD *)v576 + 2) + v566 - v577 * v224[3];
                          ++v572;
                          v580 = v57[2];
                        }
                        while (v572 < v580);
                      }
                      else
                      {
                        v580 = 0;
                        v574 = *(_QWORD **)(v56 + 24);
                        v579 = v574[2];
                      }
                      v567 = v574[1] + v567 - v580 * v579;
                      v566 = *((_QWORD *)v223[3] + 1) + v566 - *((_QWORD *)v223[3] + 2) * v224[2];
                      ++v571;
                      v581 = v57[1];
                    }
                    while (v571 < v581);
                    v563 = *v57;
                  }
                  else
                  {
                    v581 = 0;
                  }
                  v567 = **(_QWORD **)(v56 + 24) + v567 - *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8) * v581;
                  v566 = *(_QWORD *)v223[3] + v566 - *((_QWORD *)v223[3] + 1) * v224[1];
                  ++v564;
                }
                while (v564 < v563);
              }
              break;
            default:
              if (v55[6])
              {
                v516 = 0;
                v1950 = v223[19];
                v1968 = *(_QWORD *)(v56 + 152);
                v517 = v55[19];
                do
                {
                  v518 = *(_QWORD *)*a1;
                  v519 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v518) >> 2;
                  v520 = 0;
                  v521 = (v519 - 1);
                  if ((int)v519 - 1 >= 0)
                  {
                    v522 = *(_QWORD *)(*a1 + 24);
                    v523 = v516;
                    do
                    {
                      v524 = ldiv(v523, *(int *)(v518 + 4 * v521));
                      v523 = v524.quot;
                      v520 += *(_QWORD *)(v522 + 8 * v521--) * v524.rem;
                    }
                    while (v521 != -1);
                  }
                  v525 = *(_QWORD *)*a2;
                  v526 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v525) >> 2;
                  v527 = 0;
                  v528 = (v526 - 1);
                  if ((int)v526 - 1 >= 0)
                  {
                    v529 = *(_QWORD *)(*a2 + 24);
                    v530 = v516;
                    do
                    {
                      v531 = ldiv(v530, *(int *)(v525 + 4 * v528));
                      v530 = v531.quot;
                      v527 += *(_QWORD *)(v529 + 8 * v528--) * v531.rem;
                    }
                    while (v528 != -1);
                  }
                  *(_BYTE *)(v517 + v516++) = *(_BYTE *)(v1968 + (int)v520) - *((_BYTE *)v1950 + (int)v527);
                }
                while (v516 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            v17 = **(_DWORD **)(*a1 + 152);
            v18 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v19 = *(int **)(*a2 + 152);
            v20 = v16 + 1;
            do
            {
              v21 = *v19++;
              *v18++ = v17 - v21;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          v86 = *(_DWORD *)(*a1 + 160);
          if (v86 >= 1)
          {
            v87 = **(_DWORD **)(*a2 + 152);
            v88 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v89 = *(int **)(*a1 + 152);
            v90 = v86 + 1;
            do
            {
              v91 = *v89++;
              *v88++ = v91 - v87;
              --v90;
            }
            while (v90 > 1);
          }
          return;
        case 3:
          v92 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v92 >= 1)
          {
            v93 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v94 = *(int **)(*a2 + 152);
            v95 = *(int **)(*a1 + 152);
            v96 = v92 + 1;
            do
            {
              v98 = *v95++;
              v97 = v98;
              v99 = *v94++;
              *v93++ = v97 - v99;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          v77 = *(_QWORD **)a3;
          v78 = (_QWORD *)*a1;
          v79 = *(int **)*a1;
          v80 = (v78[1] - (_QWORD)v79) >> 2;
          v81 = (v80 - 1);
          if ((int)v81 >= -1)
            v82 = -1;
          else
            v82 = v80 - 1;
          v83 = v82 + 1;
          v84 = v80 + 1;
          break;
      }
      while (1)
      {
        v85 = v84 - 2;
        if (v84 - 2 < 0)
          break;
        --v84;
        if (*(_QWORD *)(v78[3] + 8 * v85) != *(_QWORD *)(v77[3] + 8 * v85))
          goto LABEL_162;
      }
      v84 = v83;
LABEL_162:
      v230 = (_QWORD *)*a2;
      v231 = *(int **)*a2;
      v232 = (v230[1] - (_QWORD)v231) >> 2;
      v233 = (v232 - 1);
      if ((int)v233 >= -1)
        v234 = -1;
      else
        v234 = v232 - 1;
      v235 = v234 + 1;
      v236 = v232 + 1;
      while (1)
      {
        v237 = v236 - 2;
        if (v236 - 2 < 0)
          break;
        --v236;
        if (*(_QWORD *)(v230[3] + 8 * v237) != *(_QWORD *)(v77[3] + 8 * v237))
          goto LABEL_211;
      }
      v236 = v235;
LABEL_211:
      v273 = v80 + 1;
      while (1)
      {
        v274 = v273 - 2;
        if (v273 - 2 < 0)
          break;
        --v273;
        if (*(_QWORD *)(v78[3] + 8 * v274))
          goto LABEL_246;
      }
      v273 = v83;
LABEL_246:
      v287 = v232 + 1;
      while (1)
      {
        v288 = v287 - 2;
        if (v287 - 2 < 0)
          break;
        --v287;
        if (*(_QWORD *)(v230[3] + 8 * v288))
          goto LABEL_342;
      }
      v287 = v235;
LABEL_342:
      v337 = (uint64_t)(v77[1] - *v77) >> 2;
      if (v84 <= v236)
        v338 = v236;
      else
        v338 = v84;
      if (v84 <= v287)
        v84 = v287;
      if (v273 > v236)
        v236 = v273;
      if (v337 > v236)
      {
        v339 = 1;
      }
      else
      {
        v236 = (uint64_t)(v77[1] - *v77) >> 2;
        v339 = 4;
      }
      if (v337 > v84)
      {
        v340 = 2;
      }
      else
      {
        v84 = v236;
        v340 = v339;
      }
      if (v337 > v338)
      {
        v84 = v338;
        v340 = 3;
      }
      v1945 = v233;
      v1962 = v81;
      if (!v84)
        goto LABEL_372;
      v341 = *(_QWORD *)(v77[3] + 8 * (v84 - 1));
      if (v341 < 0x10)
        goto LABEL_372;
      switch(v340)
      {
        case 1:
          if (v84 == 2)
          {
            v1487 = *v79;
            if (*v79)
            {
              v1488 = 0;
              v1489 = 0;
              v1490 = 0;
              v1491 = v78[19];
              v1492 = v230[19];
              v1493 = v77[19];
              v1494 = (uint64_t *)v78[3];
              v1495 = *v1494;
              v1496 = v1494[1];
              v1497 = (uint64_t *)v230[3];
              v1498 = *v1497;
              v1499 = v1497[1];
              v1500 = v79[1];
              v1501 = v1500;
              do
              {
                if (v1501)
                {
                  v1502 = 0;
                  v1503 = v1492 + 4 * v1489;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1504 = 0;
                      v1505 = *(_DWORD *)(v1491 + 4 * v1490);
                      v1506 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1493 + v1504) = v1505 - *(_DWORD *)(v1503 + v1504);
                        --v1506;
                        v1504 += 4;
                      }
                      while (v1506 > 1);
                      v1500 = v79[1];
                    }
                    v1490 += v1496;
                    v1489 += v1499;
                    v1493 += 4 * (int)v341;
                    ++v1502;
                    v1503 += 4 * v1499;
                  }
                  while (v1502 < v1500);
                  v1507 = v1500;
                  v1487 = *v79;
                  v1501 = v1500;
                }
                else
                {
                  v1507 = 0;
                }
                v1490 = v1490 + v1495 - v1507 * v1496;
                v1489 = v1489 + v1498 - v1499 * v231[1];
                ++v1488;
              }
              while (v1488 < v1487);
            }
          }
          else if (v84 == 1)
          {
            v1013 = *v79;
            if (*v79)
            {
              v1014 = 0;
              v1015 = 0;
              v1016 = v78[19];
              v1017 = v230[19];
              v1018 = v77[19];
              v1019 = *(_QWORD *)v78[3];
              v1020 = 4 * *(_QWORD *)v230[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v1021 = 0;
                  v1022 = *(_DWORD *)(v1016 + 4 * v1015);
                  v1023 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1018 + v1021) = v1022 - *(_DWORD *)(v1017 + v1021);
                    --v1023;
                    v1021 += 4;
                  }
                  while (v1023 > 1);
                  v1013 = *v79;
                }
                v1015 += v1019;
                ++v1014;
                v1018 += 4 * (int)v341;
                v1017 += v1020;
              }
              while (v1014 < v1013);
            }
          }
          else
          {
            v1905 = v77[6];
            if (v1905)
            {
              v1934 = 0;
              v1839 = v230[19];
              v1854 = v78[19];
              v1508 = v77[19];
              do
              {
                v1509 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1510 = v78[3];
                  v1511 = v81;
                  v1512 = v1934;
                  do
                  {
                    v1513 = ldiv(v1512, v79[v1511]);
                    v1512 = v1513.quot;
                    v1509 += *(_QWORD *)(v1510 + 8 * v1511--) * v1513.rem;
                  }
                  while (v1511 != -1);
                }
                v1514 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1515) = 0;
                }
                else
                {
                  v1515 = 0;
                  v1516 = v230[3];
                  v1517 = v1934;
                  do
                  {
                    v1518 = ldiv(v1517, v231[v1514]);
                    v1517 = v1518.quot;
                    v1515 += *(_QWORD *)(v1516 + 8 * v1514--) * v1518.rem;
                  }
                  while (v1514 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1519 = 0;
                  v1520 = *(_DWORD *)(v1854 + 4 * (int)v1509);
                  v1521 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1508 + v1519) = v1520 - *(_DWORD *)(v1839 + 4 * (int)v1515 + v1519);
                    --v1521;
                    v1519 += 4;
                  }
                  while (v1521 > 1);
                }
                v1508 += 4 * (int)v341;
                v1934 += (int)v341;
              }
              while (v1934 < v1905);
            }
          }
          break;
        case 2:
          if (v84 == 2)
          {
            v1522 = *v79;
            if (*v79)
            {
              v1523 = 0;
              v1524 = 0;
              v1525 = 0;
              v1526 = v78[19];
              v1527 = v230[19];
              v1528 = v77[19];
              v1529 = (uint64_t *)v78[3];
              v1530 = *v1529;
              v1531 = v1529[1];
              v1532 = (uint64_t *)v230[3];
              v1533 = *v1532;
              v1534 = v1532[1];
              v1535 = v79[1];
              v1536 = v1535;
              do
              {
                if (v1536)
                {
                  v1537 = 0;
                  v1538 = v1526 + 4 * v1525;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1539 = 0;
                      v1540 = *(_DWORD *)(v1527 + 4 * v1524);
                      v1541 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1528 + v1539) = *(_DWORD *)(v1538 + v1539) - v1540;
                        --v1541;
                        v1539 += 4;
                      }
                      while (v1541 > 1);
                      v1535 = v79[1];
                    }
                    v1525 += v1531;
                    v1524 += v1534;
                    v1528 += 4 * (int)v341;
                    ++v1537;
                    v1538 += 4 * v1531;
                  }
                  while (v1537 < v1535);
                  v1542 = v1535;
                  v1522 = *v79;
                  v1536 = v1535;
                }
                else
                {
                  v1542 = 0;
                }
                v1525 = v1525 + v1530 - v1542 * v1531;
                v1524 = v1524 + v1533 - v1534 * v231[1];
                ++v1523;
              }
              while (v1523 < v1522);
            }
          }
          else if (v84 == 1)
          {
            v1024 = *v79;
            if (*v79)
            {
              v1025 = 0;
              v1026 = 0;
              v1027 = v78[19];
              v1028 = v230[19];
              v1029 = v77[19];
              v1030 = *(_QWORD *)v230[3];
              v1031 = 4 * *(_QWORD *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v1032 = 0;
                  v1033 = *(_DWORD *)(v1028 + 4 * v1026);
                  v1034 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1029 + v1032) = *(_DWORD *)(v1027 + v1032) - v1033;
                    --v1034;
                    v1032 += 4;
                  }
                  while (v1034 > 1);
                  v1024 = *v79;
                }
                v1026 += v1030;
                ++v1025;
                v1029 += 4 * (int)v341;
                v1027 += v1031;
              }
              while (v1025 < v1024);
            }
          }
          else
          {
            v1906 = v77[6];
            if (v1906)
            {
              v1935 = 0;
              v1840 = v230[19];
              v1855 = v78[19];
              v1543 = v77[19];
              do
              {
                v1544 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1545 = v78[3];
                  v1546 = v81;
                  v1547 = v1935;
                  do
                  {
                    v1548 = ldiv(v1547, v79[v1546]);
                    v1547 = v1548.quot;
                    v1544 += *(_QWORD *)(v1545 + 8 * v1546--) * v1548.rem;
                  }
                  while (v1546 != -1);
                }
                v1549 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1550) = 0;
                }
                else
                {
                  v1550 = 0;
                  v1551 = v230[3];
                  v1552 = v1935;
                  do
                  {
                    v1553 = ldiv(v1552, v231[v1549]);
                    v1552 = v1553.quot;
                    v1550 += *(_QWORD *)(v1551 + 8 * v1549--) * v1553.rem;
                  }
                  while (v1549 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1554 = 0;
                  v1555 = *(_DWORD *)(v1840 + 4 * (int)v1550);
                  v1556 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1543 + v1554) = *(_DWORD *)(v1855 + 4 * (int)v1544 + v1554) - v1555;
                    --v1556;
                    v1554 += 4;
                  }
                  while (v1556 > 1);
                }
                v1543 += 4 * (int)v341;
                v1935 += (int)v341;
              }
              while (v1935 < v1906);
            }
          }
          break;
        case 3:
          if (v84 == 2)
          {
            v1185 = *v79;
            if (*v79)
            {
              v1186 = 0;
              v1187 = 0;
              v1188 = 0;
              v1189 = v78[19];
              v1190 = v230[19];
              v1191 = v77[19];
              v1192 = (uint64_t *)v78[3];
              v1193 = *v1192;
              v1194 = v1192[1];
              v1195 = (uint64_t *)v230[3];
              v1196 = *v1195;
              v1197 = v1195[1];
              v1198 = v79[1];
              v1199 = v1198;
              do
              {
                if (v1199)
                {
                  v1200 = 0;
                  v1201 = v1190 + 4 * v1187;
                  v1202 = v1189 + 4 * v1188;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      v1203 = 0;
                      v1204 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1191 + v1203) = *(_DWORD *)(v1202 + v1203) - *(_DWORD *)(v1201 + v1203);
                        --v1204;
                        v1203 += 4;
                      }
                      while (v1204 > 1);
                      v1198 = v79[1];
                    }
                    v1188 += v1194;
                    v1187 += v1197;
                    v1191 += 4 * (int)v341;
                    ++v1200;
                    v1201 += 4 * v1197;
                    v1202 += 4 * v1194;
                  }
                  while (v1200 < v1198);
                  v1205 = v1198;
                  v1185 = *v79;
                  v1199 = v1198;
                }
                else
                {
                  v1205 = 0;
                }
                v1188 = v1188 + v1193 - v1205 * v1194;
                v1187 = v1187 + v1196 - v1197 * v231[1];
                ++v1186;
              }
              while (v1186 < v1185);
            }
          }
          else if (v84 == 1)
          {
            v342 = *v79;
            if (*v79)
            {
              v343 = 0;
              v344 = v78[19];
              v345 = v230[19];
              v346 = v77[19];
              v347 = 4 * *(_QWORD *)v230[3];
              v348 = 4 * *(_QWORD *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  v349 = 0;
                  v350 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v346 + v349) = *(_DWORD *)(v344 + v349) - *(_DWORD *)(v345 + v349);
                    --v350;
                    v349 += 4;
                  }
                  while (v350 > 1);
                  v342 = *v79;
                }
                ++v343;
                v346 += 4 * (int)v341;
                v345 += v347;
                v344 += v348;
              }
              while (v343 < v342);
            }
          }
          else
          {
            v1896 = v77[6];
            if (v1896)
            {
              v1925 = 0;
              v1835 = v230[19];
              v1848 = v78[19];
              v1206 = v77[19];
              do
              {
                v1207 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  v1208 = v78[3];
                  v1209 = v81;
                  v1210 = v1925;
                  do
                  {
                    v1211 = ldiv(v1210, v79[v1209]);
                    v1210 = v1211.quot;
                    v1207 += *(_QWORD *)(v1208 + 8 * v1209--) * v1211.rem;
                  }
                  while (v1209 != -1);
                }
                v1212 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1213) = 0;
                }
                else
                {
                  v1213 = 0;
                  v1214 = v230[3];
                  v1215 = v1925;
                  do
                  {
                    v1216 = ldiv(v1215, v231[v1212]);
                    v1215 = v1216.quot;
                    v1213 += *(_QWORD *)(v1214 + 8 * v1212--) * v1216.rem;
                  }
                  while (v1212 != -1);
                }
                v81 = v1962;
                if ((int)v341 >= 1)
                {
                  v1217 = 0;
                  v1218 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1206 + v1217) = *(_DWORD *)(v1848 + 4 * (int)v1207 + v1217)
                                               - *(_DWORD *)(v1835 + 4 * (int)v1213 + v1217);
                    --v1218;
                    v1217 += 4;
                  }
                  while (v1218 > 1);
                }
                v1206 += 4 * (int)v341;
                v1925 += (int)v341;
              }
              while (v1925 < v1896);
            }
          }
          break;
        default:
LABEL_372:
          switch(v337)
          {
            case 1uLL:
              v351 = v77[6];
              if (v351)
              {
                v352 = (_DWORD *)v78[19];
                v353 = (_DWORD *)v230[19];
                v354 = (_DWORD *)v77[19];
                v355 = 4 * *(_QWORD *)v230[3];
                v356 = 4 * *(_QWORD *)v78[3];
                do
                {
                  *v354++ = *v352 - *v353;
                  v353 = (_DWORD *)((char *)v353 + v355);
                  v352 = (_DWORD *)((char *)v352 + v356);
                  --v351;
                }
                while (v351);
              }
              break;
            case 2uLL:
              v594 = *v79;
              if (*v79)
              {
                v595 = 0;
                v596 = 0;
                v597 = 0;
                v598 = 0;
                v599 = v78[19];
                v600 = v230[19];
                v601 = v77[19];
                v602 = (uint64_t *)v78[3];
                v603 = *v602;
                v604 = v602[1];
                v605 = (uint64_t *)v230[3];
                v607 = *v605;
                v606 = v605[1];
                v608 = v79[1];
                do
                {
                  if (v608)
                  {
                    for (i = 0; i < v608; ++i)
                    {
                      *(_DWORD *)(v601 + 4 * v596 + 4 * i) = *(_DWORD *)(v599 + 4 * v598) - *(_DWORD *)(v600 + 4 * v597);
                      v598 += v604;
                      v597 += v606;
                      v608 = v79[1];
                    }
                    v610 = v608;
                    v594 = *v79;
                    v596 += i;
                  }
                  else
                  {
                    v610 = 0;
                  }
                  v598 = v598 + v603 - v610 * v604;
                  v597 = v597 + v607 - v606 * v231[1];
                  ++v595;
                }
                while (v595 < v594);
              }
              break;
            case 3uLL:
              v611 = *v79;
              if (*v79)
              {
                v612 = 0;
                v613 = 0;
                v614 = 0;
                v615 = 0;
                v616 = v78[19];
                v617 = v230[19];
                v618 = v77[19];
                v619 = (uint64_t *)v78[3];
                v620 = *v619;
                v621 = v619[1];
                v622 = (uint64_t *)v230[3];
                v623 = *v622;
                v624 = v622[1];
                v625 = v79[1];
                v626 = v625;
                do
                {
                  if (v626)
                  {
                    v627 = 0;
                    v628 = v619[2];
                    v629 = v622[2];
                    v630 = v79[2];
                    do
                    {
                      if (v630)
                      {
                        for (j = 0; j < v630; ++j)
                        {
                          *(_DWORD *)(v618 + 4 * v613 + 4 * j) = *(_DWORD *)(v616 + 4 * v615)
                                                               - *(_DWORD *)(v617 + 4 * v614);
                          v615 += v628;
                          v614 += v629;
                          v630 = v79[2];
                        }
                        v632 = v630;
                        v625 = v79[1];
                        v613 += j;
                      }
                      else
                      {
                        v632 = 0;
                      }
                      v615 = v615 + v621 - v632 * v628;
                      v614 = v614 + v624 - v629 * v231[2];
                      ++v627;
                    }
                    while (v627 < v625);
                    v633 = v625;
                    v611 = *v79;
                    v626 = v625;
                  }
                  else
                  {
                    v633 = 0;
                  }
                  v615 = v615 + v620 - v633 * v621;
                  v614 = v614 + v623 - v624 * v231[1];
                  ++v612;
                }
                while (v612 < v611);
              }
              break;
            case 4uLL:
              v634 = *v79;
              if (*v79)
              {
                v635 = 0;
                v636 = 0;
                v637 = 0;
                v638 = 0;
                v639 = v78[19];
                v640 = v230[19];
                v641 = v77[19];
                v642 = (uint64_t *)v78[3];
                v643 = *v642;
                v644 = v642[1];
                v645 = (uint64_t *)v230[3];
                v646 = *v645;
                v647 = v645[1];
                v648 = v79[1];
                v649 = v648;
                do
                {
                  if (v649)
                  {
                    v650 = 0;
                    v651 = v642[2];
                    v652 = v645[2];
                    v653 = v79[2];
                    v654 = v653;
                    do
                    {
                      if (v654)
                      {
                        v655 = 0;
                        v656 = v642[3];
                        v657 = v645[3];
                        v658 = v79[3];
                        do
                        {
                          if (v658)
                          {
                            for (k = 0; k < v658; ++k)
                            {
                              *(_DWORD *)(v641 + 4 * v636 + 4 * k) = *(_DWORD *)(v639 + 4 * v638)
                                                                   - *(_DWORD *)(v640 + 4 * v637);
                              v638 += v656;
                              v637 += v657;
                              v658 = v79[3];
                            }
                            v660 = v658;
                            v653 = v79[2];
                            v636 += k;
                          }
                          else
                          {
                            v660 = 0;
                          }
                          v638 = v638 + v651 - v660 * v656;
                          v637 = v637 + v652 - v657 * v231[3];
                          ++v655;
                        }
                        while (v655 < v653);
                        v661 = v653;
                        v648 = v79[1];
                        v654 = v653;
                      }
                      else
                      {
                        v661 = 0;
                      }
                      v638 = v638 + v644 - v661 * v651;
                      v637 = v637 + v647 - v652 * v231[2];
                      ++v650;
                    }
                    while (v650 < v648);
                    v662 = v648;
                    v634 = *v79;
                    v649 = v648;
                  }
                  else
                  {
                    v662 = 0;
                  }
                  v638 = v638 + v643 - v662 * v644;
                  v637 = v637 + v646 - v647 * v231[1];
                  ++v635;
                }
                while (v635 < v634);
              }
              break;
            default:
              v582 = v77[6];
              if (v582)
              {
                v583 = 0;
                v1888 = v230[19];
                v1917 = v78[19];
                v1875 = v77[19];
                do
                {
                  v584 = 0;
                  if ((v81 & 0x80000000) == 0)
                  {
                    v585 = v78[3];
                    v586 = v81;
                    v587 = v583;
                    do
                    {
                      v588 = ldiv(v587, v79[v586]);
                      v587 = v588.quot;
                      v584 += *(_QWORD *)(v585 + 8 * v586--) * v588.rem;
                    }
                    while (v586 != -1);
                  }
                  v589 = v1945;
                  if ((v1945 & 0x80000000) != 0)
                  {
                    LODWORD(v590) = 0;
                  }
                  else
                  {
                    v590 = 0;
                    v591 = v230[3];
                    v592 = v583;
                    do
                    {
                      v593 = ldiv(v592, v231[v589]);
                      v592 = v593.quot;
                      v590 += *(_QWORD *)(v591 + 8 * v589--) * v593.rem;
                    }
                    while (v589 != -1);
                  }
                  *(_DWORD *)(v1875 + 4 * v583++) = *(_DWORD *)(v1917 + 4 * (int)v584)
                                                  - *(_DWORD *)(v1888 + 4 * (int)v590);
                  v81 = v1962;
                }
                while (v583 != v582);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          v7 = **(_BYTE **)(*a1 + 152) - **(_BYTE **)(*a2 + 152);
LABEL_16:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          v108 = *(_DWORD *)(*a2 + 160);
          if (v108 >= 1)
          {
            v109 = **(_BYTE **)(*a1 + 152);
            v110 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v111 = *(char **)(*a2 + 152);
            v112 = v108 + 1;
            do
            {
              v113 = *v111++;
              *v110++ = v109 - v113;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        case 2:
          v114 = *(_DWORD *)(*a1 + 160);
          if (v114 >= 1)
          {
            v115 = **(_BYTE **)(*a2 + 152);
            v116 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v117 = *(char **)(*a1 + 152);
            v118 = v114 + 1;
            do
            {
              v119 = *v117++;
              *v116++ = v119 - v115;
              --v118;
            }
            while (v118 > 1);
          }
          return;
        case 3:
          v120 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v120 >= 1)
          {
            v121 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v122 = *(char **)(*a2 + 152);
            v123 = *(char **)(*a1 + 152);
            v124 = v120 + 1;
            do
            {
              v126 = *v123++;
              v125 = v126;
              v127 = *v122++;
              *v121++ = v125 - v127;
              --v124;
            }
            while (v124 > 1);
          }
          return;
        default:
          v100 = *(_QWORD **)a3;
          v101 = *a1;
          v102 = *(int **)*a1;
          v103 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v102) >> 2;
          v104 = v103 - 1;
          if ((int)v103 - 1 >= -1)
            v104 = -1;
          v105 = v104 + 1;
          v106 = v103 + 1;
          while (1)
          {
            v107 = v106 - 2;
            if (v106 - 2 < 0)
              break;
            --v106;
            if (*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v107) != *(_QWORD *)(v100[3] + 8 * v107))
              goto LABEL_170;
          }
          v106 = v105;
LABEL_170:
          v238 = (int **)*a2;
          v239 = *(int **)*a2;
          v240 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v239) >> 2;
          v241 = v240 - 1;
          if ((int)v240 - 1 >= -1)
            v241 = -1;
          v242 = v241 + 1;
          v243 = v240 + 1;
          while (1)
          {
            v244 = v243 - 2;
            if (v243 - 2 < 0)
              break;
            --v243;
            if (*(_QWORD *)&v238[3][2 * v244] != *(_QWORD *)(v100[3] + 8 * v244))
              goto LABEL_216;
          }
          v243 = v242;
LABEL_216:
          v275 = v103 + 1;
          while (1)
          {
            v276 = v275 - 2;
            if (v275 - 2 < 0)
              break;
            --v275;
            if (*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v276))
              goto LABEL_251;
          }
          v275 = v105;
LABEL_251:
          v289 = v240 + 1;
          while (1)
          {
            v290 = v289 - 2;
            if (v289 - 2 < 0)
              break;
            --v289;
            if (*(_QWORD *)&v238[3][2 * v290])
              goto LABEL_378;
          }
          v289 = v242;
LABEL_378:
          v357 = (uint64_t)(v100[1] - *v100) >> 2;
          if (v106 <= v243)
            v358 = v243;
          else
            v358 = v106;
          if (v106 <= v289)
            v106 = v289;
          if (v275 > v243)
            v243 = v275;
          if (v357 > v243)
          {
            v359 = 1;
          }
          else
          {
            v243 = (uint64_t)(v100[1] - *v100) >> 2;
            v359 = 4;
          }
          if (v357 > v106)
          {
            v360 = 2;
          }
          else
          {
            v106 = v243;
            v360 = v359;
          }
          if (v357 > v358)
          {
            v106 = v358;
            v360 = 3;
          }
          if (!v106)
            goto LABEL_408;
          v361 = *(_QWORD *)(v100[3] + 8 * (v106 - 1));
          if (v361 < 0x10)
            goto LABEL_408;
          v1963 = *(_QWORD *)(v100[3] + 8 * (v106 - 1));
          switch(v360)
          {
            case 1:
              if (v106 == 2)
              {
                v1557 = *v102;
                if (*v102)
                {
                  v1558 = 0;
                  v1559 = 0;
                  v1560 = 0;
                  v1561 = *(_QWORD *)(v101 + 152);
                  v1562 = v238[19];
                  v1563 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1564 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1565 = 0;
                          v1566 = *(_BYTE *)(v1561 + v1560);
                          v1567 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1563 + v1565) = v1566 - *((_BYTE *)v1562 + v1559 + v1565);
                            --v1567;
                            ++v1565;
                          }
                          while (v1567 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1568 = *(_QWORD **)(v101 + 24);
                        v1569 = v1568[1];
                        v1560 += v1569;
                        v1559 += *((_QWORD *)v238[3] + 1);
                        v1563 += (int)v361;
                        ++v1564;
                        v1570 = v102[1];
                      }
                      while (v1564 < v1570);
                      v1557 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1570 = 0;
                      v1568 = *(_QWORD **)(v101 + 24);
                      v1569 = v1568[1];
                    }
                    v1560 = *v1568 + v1560 - v1570 * v1569;
                    v1559 = *(_QWORD *)v238[3] + v1559 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1558;
                  }
                  while (v1558 < v1557);
                }
              }
              else if (v106 == 1)
              {
                v1035 = *v102;
                if (*v102)
                {
                  v1036 = 0;
                  v1037 = 0;
                  v1038 = 0;
                  v1039 = *(_QWORD *)(v101 + 152);
                  v1040 = v238[19];
                  v1041 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v1042 = 0;
                      v1043 = *(_BYTE *)(v1039 + v1038);
                      v1044 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v1041 + v1042) = v1043 - *((_BYTE *)v1040 + v1037 + v1042);
                        --v1044;
                        ++v1042;
                      }
                      while (v1044 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v1035 = **(_DWORD **)*a1;
                    }
                    v1038 += **(_QWORD **)(v101 + 24);
                    v1037 += *(_QWORD *)v238[3];
                    v1041 += (int)v361;
                    ++v1036;
                  }
                  while (v1036 < v1035);
                }
              }
              else if (v100[6])
              {
                v1884 = v238[19];
                v1907 = *(_QWORD *)(v101 + 152);
                v1936 = (int)v361;
                v1958 = 0;
                v1871 = v361 + 1;
                v1571 = v100[19];
                do
                {
                  v1572 = *(_QWORD *)*a1;
                  v1573 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1572) >> 2;
                  v1574 = 0;
                  v1575 = (v1573 - 1);
                  if ((int)v1573 - 1 >= 0)
                  {
                    v1576 = *(_QWORD *)(*a1 + 24);
                    v1577 = v1958;
                    do
                    {
                      v1578 = ldiv(v1577, *(int *)(v1572 + 4 * v1575));
                      v1577 = v1578.quot;
                      v1574 += *(_QWORD *)(v1576 + 8 * v1575--) * v1578.rem;
                    }
                    while (v1575 != -1);
                  }
                  v1579 = *(_QWORD *)*a2;
                  v1580 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1579) >> 2;
                  v1581 = 0;
                  v1582 = (v1580 - 1);
                  if ((int)v1580 - 1 >= 0)
                  {
                    v1583 = *(_QWORD *)(*a2 + 24);
                    v1584 = v1958;
                    do
                    {
                      v1585 = ldiv(v1584, *(int *)(v1579 + 4 * v1582));
                      v1584 = v1585.quot;
                      v1581 += *(_QWORD *)(v1583 + 8 * v1582--) * v1585.rem;
                    }
                    while (v1582 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1586 = 0;
                    v1587 = *(_BYTE *)(v1907 + (int)v1574);
                    v1588 = v1871;
                    do
                    {
                      *(_BYTE *)(v1571 + v1586) = v1587 - *((_BYTE *)v1884 + (int)v1581 + v1586);
                      --v1588;
                      ++v1586;
                    }
                    while (v1588 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1571 += v1936;
                  v1958 += v1936;
                }
                while (v1958 < v100[6]);
              }
              break;
            case 2:
              if (v106 == 2)
              {
                v1589 = *v102;
                if (*v102)
                {
                  v1590 = 0;
                  v1591 = 0;
                  v1592 = 0;
                  v1593 = *(_QWORD *)(v101 + 152);
                  v1594 = v238[19];
                  v1595 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1596 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1597 = 0;
                          v1598 = *((_BYTE *)v1594 + v1591);
                          v1599 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1595 + v1597) = *(_BYTE *)(v1593 + v1592 + v1597) - v1598;
                            --v1599;
                            ++v1597;
                          }
                          while (v1599 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1600 = *(_QWORD **)(v101 + 24);
                        v1601 = v1600[1];
                        v1592 += v1601;
                        v1591 += *((_QWORD *)v238[3] + 1);
                        v1595 += (int)v361;
                        ++v1596;
                        v1602 = v102[1];
                      }
                      while (v1596 < v1602);
                      v1589 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1602 = 0;
                      v1600 = *(_QWORD **)(v101 + 24);
                      v1601 = v1600[1];
                    }
                    v1592 = *v1600 + v1592 - v1602 * v1601;
                    v1591 = *(_QWORD *)v238[3] + v1591 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1590;
                  }
                  while (v1590 < v1589);
                }
              }
              else if (v106 == 1)
              {
                v1045 = *v102;
                if (*v102)
                {
                  v1046 = 0;
                  v1047 = 0;
                  v1048 = 0;
                  v1049 = *(_QWORD *)(v101 + 152);
                  v1050 = v238[19];
                  v1051 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v1052 = 0;
                      v1053 = *((_BYTE *)v1050 + v1047);
                      v1054 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v1051 + v1052) = *(_BYTE *)(v1049 + v1048 + v1052) - v1053;
                        --v1054;
                        ++v1052;
                      }
                      while (v1054 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v1045 = **(_DWORD **)*a1;
                    }
                    v1048 += **(_QWORD **)(v101 + 24);
                    v1047 += *(_QWORD *)v238[3];
                    v1051 += (int)v361;
                    ++v1046;
                  }
                  while (v1046 < v1045);
                }
              }
              else if (v100[6])
              {
                v1885 = v238[19];
                v1908 = *(_QWORD *)(v101 + 152);
                v1937 = (int)v361;
                v1959 = 0;
                v1872 = v361 + 1;
                v1603 = v100[19];
                do
                {
                  v1604 = *(_QWORD *)*a1;
                  v1605 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1604) >> 2;
                  v1606 = 0;
                  v1607 = (v1605 - 1);
                  if ((int)v1605 - 1 >= 0)
                  {
                    v1608 = *(_QWORD *)(*a1 + 24);
                    v1609 = v1959;
                    do
                    {
                      v1610 = ldiv(v1609, *(int *)(v1604 + 4 * v1607));
                      v1609 = v1610.quot;
                      v1606 += *(_QWORD *)(v1608 + 8 * v1607--) * v1610.rem;
                    }
                    while (v1607 != -1);
                  }
                  v1611 = *(_QWORD *)*a2;
                  v1612 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1611) >> 2;
                  v1613 = 0;
                  v1614 = (v1612 - 1);
                  if ((int)v1612 - 1 >= 0)
                  {
                    v1615 = *(_QWORD *)(*a2 + 24);
                    v1616 = v1959;
                    do
                    {
                      v1617 = ldiv(v1616, *(int *)(v1611 + 4 * v1614));
                      v1616 = v1617.quot;
                      v1613 += *(_QWORD *)(v1615 + 8 * v1614--) * v1617.rem;
                    }
                    while (v1614 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1618 = 0;
                    v1619 = *((_BYTE *)v1885 + (int)v1613);
                    v1620 = v1872;
                    do
                    {
                      *(_BYTE *)(v1603 + v1618) = *(_BYTE *)(v1908 + (int)v1606 + v1618) - v1619;
                      --v1620;
                      ++v1618;
                    }
                    while (v1620 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1603 += v1937;
                  v1959 += v1937;
                }
                while (v1959 < v100[6]);
              }
              break;
            case 3:
              if (v106 == 2)
              {
                v1219 = *v102;
                if (*v102)
                {
                  v1220 = 0;
                  v1221 = 0;
                  v1222 = 0;
                  v1223 = *(_QWORD *)(v101 + 152);
                  v1224 = v238[19];
                  v1225 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      v1226 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          v1227 = 0;
                          v1228 = v361 + 1;
                          do
                          {
                            *(_BYTE *)(v1225 + v1227) = *(_BYTE *)(v1223 + v1222 + v1227)
                                                      - *((_BYTE *)v1224 + v1221 + v1227);
                            --v1228;
                            ++v1227;
                          }
                          while (v1228 > 1);
                          v101 = *a1;
                          v238 = (int **)*a2;
                          v102 = *(int **)*a1;
                        }
                        v1229 = *(_QWORD **)(v101 + 24);
                        v1230 = v1229[1];
                        v1222 += v1230;
                        v1221 += *((_QWORD *)v238[3] + 1);
                        v1225 += (int)v361;
                        ++v1226;
                        v1231 = v102[1];
                      }
                      while (v1226 < v1231);
                      v1219 = *v102;
                      v239 = *v238;
                    }
                    else
                    {
                      v1231 = 0;
                      v1229 = *(_QWORD **)(v101 + 24);
                      v1230 = v1229[1];
                    }
                    v1222 = *v1229 + v1222 - v1231 * v1230;
                    v1221 = *(_QWORD *)v238[3] + v1221 - *((_QWORD *)v238[3] + 1) * v239[1];
                    ++v1220;
                  }
                  while (v1220 < v1219);
                }
              }
              else if (v106 == 1)
              {
                v362 = *v102;
                if (*v102)
                {
                  v363 = 0;
                  v364 = 0;
                  v365 = 0;
                  v366 = *(_QWORD *)(v101 + 152);
                  v367 = v238[19];
                  v368 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      v369 = 0;
                      v370 = v361 + 1;
                      do
                      {
                        *(_BYTE *)(v368 + v369) = *(_BYTE *)(v366 + v365 + v369) - *((_BYTE *)v367 + v364 + v369);
                        --v370;
                        ++v369;
                      }
                      while (v370 > 1);
                      v101 = *a1;
                      v238 = (int **)*a2;
                      v362 = **(_DWORD **)*a1;
                    }
                    v365 += **(_QWORD **)(v101 + 24);
                    v364 += *(_QWORD *)v238[3];
                    v368 += (int)v361;
                    ++v363;
                  }
                  while (v363 < v362);
                }
              }
              else if (v100[6])
              {
                v1881 = v238[19];
                v1897 = *(_QWORD *)(v101 + 152);
                v1926 = (int)v361;
                v1955 = 0;
                v1866 = v361 + 1;
                v1232 = v100[19];
                do
                {
                  v1233 = *(_QWORD *)*a1;
                  v1234 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1233) >> 2;
                  v1235 = 0;
                  v1236 = (v1234 - 1);
                  if ((int)v1234 - 1 >= 0)
                  {
                    v1237 = *(_QWORD *)(*a1 + 24);
                    v1238 = v1955;
                    do
                    {
                      v1239 = ldiv(v1238, *(int *)(v1233 + 4 * v1236));
                      v1238 = v1239.quot;
                      v1235 += *(_QWORD *)(v1237 + 8 * v1236--) * v1239.rem;
                    }
                    while (v1236 != -1);
                  }
                  v1240 = *(_QWORD *)*a2;
                  v1241 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1240) >> 2;
                  v1242 = 0;
                  v1243 = (v1241 - 1);
                  if ((int)v1241 - 1 >= 0)
                  {
                    v1244 = *(_QWORD *)(*a2 + 24);
                    v1245 = v1955;
                    do
                    {
                      v1246 = ldiv(v1245, *(int *)(v1240 + 4 * v1243));
                      v1245 = v1246.quot;
                      v1242 += *(_QWORD *)(v1244 + 8 * v1243--) * v1246.rem;
                    }
                    while (v1243 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    v1247 = 0;
                    v1248 = v1866;
                    do
                    {
                      *(_BYTE *)(v1232 + v1247) = *(_BYTE *)(v1897 + (int)v1235 + v1247)
                                                - *((_BYTE *)v1881 + (int)v1242 + v1247);
                      --v1248;
                      ++v1247;
                    }
                    while (v1248 > 1);
                    v100 = *(_QWORD **)a3;
                  }
                  v1232 += v1926;
                  v1955 += v1926;
                }
                while (v1955 < v100[6]);
              }
              break;
            default:
LABEL_408:
              switch(v357)
              {
                case 1uLL:
                  if (v100[6])
                  {
                    v371 = 0;
                    v372 = 0;
                    v373 = 0;
                    v374 = *(_QWORD *)(v101 + 152);
                    v375 = v238[19];
                    v376 = v100[19];
                    do
                    {
                      *(_BYTE *)(v376 + v371) = *(_BYTE *)(v374 + v373) - *((_BYTE *)v375 + v372);
                      v373 += **(_QWORD **)(*a1 + 24);
                      v372 += **(_QWORD **)(*a2 + 24);
                      ++v371;
                    }
                    while (v371 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  v679 = *v102;
                  if (*v102)
                  {
                    v680 = 0;
                    v681 = 0;
                    v682 = 0;
                    v683 = 0;
                    v684 = *(_QWORD *)(v101 + 152);
                    v685 = v238[19];
                    v686 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v687 = 0;
                        do
                        {
                          *(_BYTE *)(v686 + v681 + v687) = *(_BYTE *)(v684 + v683) - *((_BYTE *)v685 + v682);
                          v101 = *a1;
                          v688 = *(_QWORD **)(*a1 + 24);
                          v689 = v688[1];
                          v683 += v689;
                          v238 = (int **)*a2;
                          v690 = *(int **)(*a2 + 24);
                          v691 = *((_QWORD *)v690 + 1);
                          v682 += v691;
                          ++v687;
                          v102 = *(int **)*a1;
                          v692 = v102[1];
                        }
                        while (v687 < v692);
                        v679 = *v102;
                        v239 = *v238;
                        v681 += v687;
                      }
                      else
                      {
                        v692 = 0;
                        v688 = *(_QWORD **)(v101 + 24);
                        v689 = v688[1];
                        v690 = v238[3];
                        v691 = *((_QWORD *)v690 + 1);
                      }
                      v683 = *v688 + v683 - v692 * v689;
                      v682 = *(_QWORD *)v690 + v682 - v691 * v239[1];
                      ++v680;
                    }
                    while (v680 < v679);
                  }
                  break;
                case 3uLL:
                  v693 = *v102;
                  if (*v102)
                  {
                    v694 = 0;
                    v695 = 0;
                    v696 = 0;
                    v697 = 0;
                    v698 = *(_QWORD *)(v101 + 152);
                    v699 = v238[19];
                    v700 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v701 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            v702 = 0;
                            do
                            {
                              *(_BYTE *)(v700 + v695 + v702) = *(_BYTE *)(v698 + v697) - *((_BYTE *)v699 + v696);
                              v101 = *a1;
                              v703 = *(_QWORD **)(*a1 + 24);
                              v704 = v703[2];
                              v697 += v704;
                              v238 = (int **)*a2;
                              v705 = *(int **)(*a2 + 24);
                              v706 = *((_QWORD *)v705 + 2);
                              v696 += v706;
                              ++v702;
                              v102 = *(int **)*a1;
                              v707 = v102[2];
                            }
                            while (v702 < v707);
                            v239 = *v238;
                            v695 += v702;
                          }
                          else
                          {
                            v707 = 0;
                            v703 = *(_QWORD **)(v101 + 24);
                            v704 = v703[2];
                            v705 = v238[3];
                            v706 = *((_QWORD *)v705 + 2);
                          }
                          v708 = v703[1];
                          v697 = v708 + v697 - v707 * v704;
                          v696 = *((_QWORD *)v705 + 1) + v696 - v706 * v239[2];
                          ++v701;
                          v709 = v102[1];
                        }
                        while (v701 < v709);
                        v693 = *v102;
                      }
                      else
                      {
                        v709 = 0;
                        v703 = *(_QWORD **)(v101 + 24);
                        v708 = v703[1];
                      }
                      v697 = *v703 + v697 - v709 * v708;
                      v696 = *(_QWORD *)v238[3] + v696 - *((_QWORD *)v238[3] + 1) * v239[1];
                      ++v694;
                    }
                    while (v694 < v693);
                  }
                  break;
                case 4uLL:
                  v710 = *v102;
                  if (*v102)
                  {
                    v711 = 0;
                    v712 = 0;
                    v713 = 0;
                    v714 = 0;
                    v715 = *(_QWORD *)(v101 + 152);
                    v716 = v238[19];
                    v717 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        v718 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            v719 = 0;
                            do
                            {
                              if (v102[3])
                              {
                                v720 = 0;
                                do
                                {
                                  *(_BYTE *)(v717 + v712 + v720) = *(_BYTE *)(v715 + v714) - *((_BYTE *)v716 + v713);
                                  v101 = *a1;
                                  v721 = *(_QWORD **)(*a1 + 24);
                                  v722 = v721[3];
                                  v714 += v722;
                                  v238 = (int **)*a2;
                                  v723 = *(int **)(*a2 + 24);
                                  v724 = *((_QWORD *)v723 + 3);
                                  v713 += v724;
                                  ++v720;
                                  v102 = *(int **)*a1;
                                  v725 = v102[3];
                                }
                                while (v720 < v725);
                                v239 = *v238;
                                v712 += v720;
                              }
                              else
                              {
                                v725 = 0;
                                v721 = *(_QWORD **)(v101 + 24);
                                v722 = v721[3];
                                v723 = v238[3];
                                v724 = *((_QWORD *)v723 + 3);
                              }
                              v726 = v721[2];
                              v714 = v726 + v714 - v725 * v722;
                              v713 = *((_QWORD *)v723 + 2) + v713 - v724 * v239[3];
                              ++v719;
                              v727 = v102[2];
                            }
                            while (v719 < v727);
                          }
                          else
                          {
                            v727 = 0;
                            v721 = *(_QWORD **)(v101 + 24);
                            v726 = v721[2];
                          }
                          v714 = v721[1] + v714 - v727 * v726;
                          v713 = *((_QWORD *)v238[3] + 1) + v713 - *((_QWORD *)v238[3] + 2) * v239[2];
                          ++v718;
                          v728 = v102[1];
                        }
                        while (v718 < v728);
                        v710 = *v102;
                      }
                      else
                      {
                        v728 = 0;
                      }
                      v714 = **(_QWORD **)(v101 + 24) + v714 - *(_QWORD *)(*(_QWORD *)(v101 + 24) + 8) * v728;
                      v713 = *(_QWORD *)v238[3] + v713 - *((_QWORD *)v238[3] + 1) * v239[1];
                      ++v711;
                    }
                    while (v711 < v710);
                  }
                  break;
                default:
                  if (v100[6])
                  {
                    v663 = 0;
                    v1951 = v238[19];
                    v1969 = *(_QWORD *)(v101 + 152);
                    v664 = v100[19];
                    do
                    {
                      v665 = *(_QWORD *)*a1;
                      v666 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v665) >> 2;
                      v667 = 0;
                      v668 = (v666 - 1);
                      if ((int)v666 - 1 >= 0)
                      {
                        v669 = *(_QWORD *)(*a1 + 24);
                        v670 = v663;
                        do
                        {
                          v671 = ldiv(v670, *(int *)(v665 + 4 * v668));
                          v670 = v671.quot;
                          v667 += *(_QWORD *)(v669 + 8 * v668--) * v671.rem;
                        }
                        while (v668 != -1);
                      }
                      v672 = *(_QWORD *)*a2;
                      v673 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v672) >> 2;
                      v674 = 0;
                      v675 = (v673 - 1);
                      if ((int)v673 - 1 >= 0)
                      {
                        v676 = *(_QWORD *)(*a2 + 24);
                        v677 = v663;
                        do
                        {
                          v678 = ldiv(v677, *(int *)(v672 + 4 * v675));
                          v677 = v678.quot;
                          v674 += *(_QWORD *)(v676 + 8 * v675--) * v678.rem;
                        }
                        while (v675 != -1);
                      }
                      *(_BYTE *)(v664 + v663++) = *(_BYTE *)(v1969 + (int)v667) - *((_BYTE *)v1951 + (int)v674);
                    }
                    while (v663 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          v137 = *(_DWORD *)(*a2 + 160);
          if (v137 >= 1)
          {
            v138 = **(_DWORD **)(*a1 + 152);
            v139 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v140 = *(int **)(*a2 + 152);
            v141 = v137 + 1;
            do
            {
              v142 = *v140++;
              *v139++ = v138 - v142;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        case 2:
          v143 = *(_DWORD *)(*a1 + 160);
          if (v143 >= 1)
          {
            v144 = **(_DWORD **)(*a2 + 152);
            v145 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v146 = *(int **)(*a1 + 152);
            v147 = v143 + 1;
            do
            {
              v148 = *v146++;
              *v145++ = v148 - v144;
              --v147;
            }
            while (v147 > 1);
          }
          return;
        case 3:
          v149 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v149 >= 1)
          {
            v150 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v151 = *(int **)(*a2 + 152);
            v152 = *(int **)(*a1 + 152);
            v153 = v149 + 1;
            do
            {
              v155 = *v152++;
              v154 = v155;
              v156 = *v151++;
              *v150++ = v154 - v156;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        default:
          v128 = *(_QWORD **)a3;
          v129 = (_QWORD *)*a1;
          v130 = *(int **)*a1;
          v131 = (v129[1] - (_QWORD)v130) >> 2;
          v132 = (v131 - 1);
          if ((int)v132 >= -1)
            v133 = -1;
          else
            v133 = v131 - 1;
          v134 = v133 + 1;
          v135 = v131 + 1;
          while (1)
          {
            v136 = v135 - 2;
            if (v135 - 2 < 0)
              break;
            --v135;
            if (*(_QWORD *)(v129[3] + 8 * v136) != *(_QWORD *)(v128[3] + 8 * v136))
              goto LABEL_177;
          }
          v135 = v134;
LABEL_177:
          v245 = (_QWORD *)*a2;
          v246 = *(int **)*a2;
          v247 = (v245[1] - (_QWORD)v246) >> 2;
          v248 = (v247 - 1);
          if ((int)v248 >= -1)
            v249 = -1;
          else
            v249 = v247 - 1;
          v250 = v249 + 1;
          v251 = v247 + 1;
          while (1)
          {
            v252 = v251 - 2;
            if (v251 - 2 < 0)
              break;
            --v251;
            if (*(_QWORD *)(v245[3] + 8 * v252) != *(_QWORD *)(v128[3] + 8 * v252))
              goto LABEL_221;
          }
          v251 = v250;
LABEL_221:
          v277 = v131 + 1;
          while (1)
          {
            v278 = v277 - 2;
            if (v277 - 2 < 0)
              break;
            --v277;
            if (*(_QWORD *)(v129[3] + 8 * v278))
              goto LABEL_256;
          }
          v277 = v134;
LABEL_256:
          v291 = v247 + 1;
          while (1)
          {
            v292 = v291 - 2;
            if (v291 - 2 < 0)
              break;
            --v291;
            if (*(_QWORD *)(v245[3] + 8 * v292))
              goto LABEL_414;
          }
          v291 = v250;
LABEL_414:
          v377 = (uint64_t)(v128[1] - *v128) >> 2;
          if (v135 <= v251)
            v378 = v251;
          else
            v378 = v135;
          if (v135 <= v291)
            v135 = v291;
          if (v277 > v251)
            v251 = v277;
          if (v377 > v251)
          {
            v379 = 1;
          }
          else
          {
            v251 = (uint64_t)(v128[1] - *v128) >> 2;
            v379 = 4;
          }
          if (v377 > v135)
          {
            v380 = 2;
          }
          else
          {
            v135 = v251;
            v380 = v379;
          }
          if (v377 > v378)
          {
            v135 = v378;
            v380 = 3;
          }
          v1946 = v248;
          v1964 = v132;
          if (!v135)
            goto LABEL_444;
          v381 = *(_QWORD *)(v128[3] + 8 * (v135 - 1));
          if (v381 < 0x10)
            goto LABEL_444;
          switch(v380)
          {
            case 1:
              if (v135 == 2)
              {
                v1621 = *v130;
                if (*v130)
                {
                  v1622 = 0;
                  v1623 = 0;
                  v1624 = 0;
                  v1625 = v129[19];
                  v1626 = v245[19];
                  v1627 = v128[19];
                  v1628 = (uint64_t *)v129[3];
                  v1629 = *v1628;
                  v1630 = v1628[1];
                  v1631 = (uint64_t *)v245[3];
                  v1632 = *v1631;
                  v1633 = v1631[1];
                  v1634 = v130[1];
                  v1635 = v1634;
                  do
                  {
                    if (v1635)
                    {
                      v1636 = 0;
                      v1637 = v1626 + 4 * v1623;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1638 = 0;
                          v1639 = *(_DWORD *)(v1625 + 4 * v1624);
                          v1640 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1627 + v1638) = v1639 - *(_DWORD *)(v1637 + v1638);
                            --v1640;
                            v1638 += 4;
                          }
                          while (v1640 > 1);
                          v1634 = v130[1];
                        }
                        v1624 += v1630;
                        v1623 += v1633;
                        v1627 += 4 * (int)v381;
                        ++v1636;
                        v1637 += 4 * v1633;
                      }
                      while (v1636 < v1634);
                      v1641 = v1634;
                      v1621 = *v130;
                      v1635 = v1634;
                    }
                    else
                    {
                      v1641 = 0;
                    }
                    v1624 = v1624 + v1629 - v1641 * v1630;
                    v1623 = v1623 + v1632 - v1633 * v246[1];
                    ++v1622;
                  }
                  while (v1622 < v1621);
                }
              }
              else if (v135 == 1)
              {
                v1055 = *v130;
                if (*v130)
                {
                  v1056 = 0;
                  v1057 = 0;
                  v1058 = v129[19];
                  v1059 = v245[19];
                  v1060 = v128[19];
                  v1061 = *(_QWORD *)v129[3];
                  v1062 = 4 * *(_QWORD *)v245[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v1063 = 0;
                      v1064 = *(_DWORD *)(v1058 + 4 * v1057);
                      v1065 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1060 + v1063) = v1064 - *(_DWORD *)(v1059 + v1063);
                        --v1065;
                        v1063 += 4;
                      }
                      while (v1065 > 1);
                      v1055 = *v130;
                    }
                    v1057 += v1061;
                    ++v1056;
                    v1060 += 4 * (int)v381;
                    v1059 += v1062;
                  }
                  while (v1056 < v1055);
                }
              }
              else
              {
                v1909 = v128[6];
                if (v1909)
                {
                  v1938 = 0;
                  v1841 = v245[19];
                  v1856 = v129[19];
                  v1642 = v128[19];
                  do
                  {
                    v1643 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1644 = v129[3];
                      v1645 = v132;
                      v1646 = v1938;
                      do
                      {
                        v1647 = ldiv(v1646, v130[v1645]);
                        v1646 = v1647.quot;
                        v1643 += *(_QWORD *)(v1644 + 8 * v1645--) * v1647.rem;
                      }
                      while (v1645 != -1);
                    }
                    v1648 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1649) = 0;
                    }
                    else
                    {
                      v1649 = 0;
                      v1650 = v245[3];
                      v1651 = v1938;
                      do
                      {
                        v1652 = ldiv(v1651, v246[v1648]);
                        v1651 = v1652.quot;
                        v1649 += *(_QWORD *)(v1650 + 8 * v1648--) * v1652.rem;
                      }
                      while (v1648 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1653 = 0;
                      v1654 = *(_DWORD *)(v1856 + 4 * (int)v1643);
                      v1655 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1642 + v1653) = v1654 - *(_DWORD *)(v1841 + 4 * (int)v1649 + v1653);
                        --v1655;
                        v1653 += 4;
                      }
                      while (v1655 > 1);
                    }
                    v1642 += 4 * (int)v381;
                    v1938 += (int)v381;
                  }
                  while (v1938 < v1909);
                }
              }
              break;
            case 2:
              if (v135 == 2)
              {
                v1656 = *v130;
                if (*v130)
                {
                  v1657 = 0;
                  v1658 = 0;
                  v1659 = 0;
                  v1660 = v129[19];
                  v1661 = v245[19];
                  v1662 = v128[19];
                  v1663 = (uint64_t *)v129[3];
                  v1664 = *v1663;
                  v1665 = v1663[1];
                  v1666 = (uint64_t *)v245[3];
                  v1667 = *v1666;
                  v1668 = v1666[1];
                  v1669 = v130[1];
                  v1670 = v1669;
                  do
                  {
                    if (v1670)
                    {
                      v1671 = 0;
                      v1672 = v1660 + 4 * v1659;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1673 = 0;
                          v1674 = *(_DWORD *)(v1661 + 4 * v1658);
                          v1675 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1662 + v1673) = *(_DWORD *)(v1672 + v1673) - v1674;
                            --v1675;
                            v1673 += 4;
                          }
                          while (v1675 > 1);
                          v1669 = v130[1];
                        }
                        v1659 += v1665;
                        v1658 += v1668;
                        v1662 += 4 * (int)v381;
                        ++v1671;
                        v1672 += 4 * v1665;
                      }
                      while (v1671 < v1669);
                      v1676 = v1669;
                      v1656 = *v130;
                      v1670 = v1669;
                    }
                    else
                    {
                      v1676 = 0;
                    }
                    v1659 = v1659 + v1664 - v1676 * v1665;
                    v1658 = v1658 + v1667 - v1668 * v246[1];
                    ++v1657;
                  }
                  while (v1657 < v1656);
                }
              }
              else if (v135 == 1)
              {
                v1066 = *v130;
                if (*v130)
                {
                  v1067 = 0;
                  v1068 = 0;
                  v1069 = v129[19];
                  v1070 = v245[19];
                  v1071 = v128[19];
                  v1072 = *(_QWORD *)v245[3];
                  v1073 = 4 * *(_QWORD *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v1074 = 0;
                      v1075 = *(_DWORD *)(v1070 + 4 * v1068);
                      v1076 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1071 + v1074) = *(_DWORD *)(v1069 + v1074) - v1075;
                        --v1076;
                        v1074 += 4;
                      }
                      while (v1076 > 1);
                      v1066 = *v130;
                    }
                    v1068 += v1072;
                    ++v1067;
                    v1071 += 4 * (int)v381;
                    v1069 += v1073;
                  }
                  while (v1067 < v1066);
                }
              }
              else
              {
                v1910 = v128[6];
                if (v1910)
                {
                  v1939 = 0;
                  v1842 = v245[19];
                  v1857 = v129[19];
                  v1677 = v128[19];
                  do
                  {
                    v1678 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1679 = v129[3];
                      v1680 = v132;
                      v1681 = v1939;
                      do
                      {
                        v1682 = ldiv(v1681, v130[v1680]);
                        v1681 = v1682.quot;
                        v1678 += *(_QWORD *)(v1679 + 8 * v1680--) * v1682.rem;
                      }
                      while (v1680 != -1);
                    }
                    v1683 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1684) = 0;
                    }
                    else
                    {
                      v1684 = 0;
                      v1685 = v245[3];
                      v1686 = v1939;
                      do
                      {
                        v1687 = ldiv(v1686, v246[v1683]);
                        v1686 = v1687.quot;
                        v1684 += *(_QWORD *)(v1685 + 8 * v1683--) * v1687.rem;
                      }
                      while (v1683 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1688 = 0;
                      v1689 = *(_DWORD *)(v1842 + 4 * (int)v1684);
                      v1690 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1677 + v1688) = *(_DWORD *)(v1857 + 4 * (int)v1678 + v1688) - v1689;
                        --v1690;
                        v1688 += 4;
                      }
                      while (v1690 > 1);
                    }
                    v1677 += 4 * (int)v381;
                    v1939 += (int)v381;
                  }
                  while (v1939 < v1910);
                }
              }
              break;
            case 3:
              if (v135 == 2)
              {
                v1249 = *v130;
                if (*v130)
                {
                  v1250 = 0;
                  v1251 = 0;
                  v1252 = 0;
                  v1253 = v129[19];
                  v1254 = v245[19];
                  v1255 = v128[19];
                  v1256 = (uint64_t *)v129[3];
                  v1257 = *v1256;
                  v1258 = v1256[1];
                  v1259 = (uint64_t *)v245[3];
                  v1260 = *v1259;
                  v1261 = v1259[1];
                  v1262 = v130[1];
                  v1263 = v1262;
                  do
                  {
                    if (v1263)
                    {
                      v1264 = 0;
                      v1265 = v1254 + 4 * v1251;
                      v1266 = v1253 + 4 * v1252;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          v1267 = 0;
                          v1268 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1255 + v1267) = *(_DWORD *)(v1266 + v1267) - *(_DWORD *)(v1265 + v1267);
                            --v1268;
                            v1267 += 4;
                          }
                          while (v1268 > 1);
                          v1262 = v130[1];
                        }
                        v1252 += v1258;
                        v1251 += v1261;
                        v1255 += 4 * (int)v381;
                        ++v1264;
                        v1265 += 4 * v1261;
                        v1266 += 4 * v1258;
                      }
                      while (v1264 < v1262);
                      v1269 = v1262;
                      v1249 = *v130;
                      v1263 = v1262;
                    }
                    else
                    {
                      v1269 = 0;
                    }
                    v1252 = v1252 + v1257 - v1269 * v1258;
                    v1251 = v1251 + v1260 - v1261 * v246[1];
                    ++v1250;
                  }
                  while (v1250 < v1249);
                }
              }
              else if (v135 == 1)
              {
                v382 = *v130;
                if (*v130)
                {
                  v383 = 0;
                  v384 = v129[19];
                  v385 = v245[19];
                  v386 = v128[19];
                  v387 = 4 * *(_QWORD *)v245[3];
                  v388 = 4 * *(_QWORD *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      v389 = 0;
                      v390 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v386 + v389) = *(_DWORD *)(v384 + v389) - *(_DWORD *)(v385 + v389);
                        --v390;
                        v389 += 4;
                      }
                      while (v390 > 1);
                      v382 = *v130;
                    }
                    ++v383;
                    v386 += 4 * (int)v381;
                    v385 += v387;
                    v384 += v388;
                  }
                  while (v383 < v382);
                }
              }
              else
              {
                v1898 = v128[6];
                if (v1898)
                {
                  v1927 = 0;
                  v1836 = v245[19];
                  v1849 = v129[19];
                  v1270 = v128[19];
                  do
                  {
                    v1271 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      v1272 = v129[3];
                      v1273 = v132;
                      v1274 = v1927;
                      do
                      {
                        v1275 = ldiv(v1274, v130[v1273]);
                        v1274 = v1275.quot;
                        v1271 += *(_QWORD *)(v1272 + 8 * v1273--) * v1275.rem;
                      }
                      while (v1273 != -1);
                    }
                    v1276 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1277) = 0;
                    }
                    else
                    {
                      v1277 = 0;
                      v1278 = v245[3];
                      v1279 = v1927;
                      do
                      {
                        v1280 = ldiv(v1279, v246[v1276]);
                        v1279 = v1280.quot;
                        v1277 += *(_QWORD *)(v1278 + 8 * v1276--) * v1280.rem;
                      }
                      while (v1276 != -1);
                    }
                    v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      v1281 = 0;
                      v1282 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1270 + v1281) = *(_DWORD *)(v1849 + 4 * (int)v1271 + v1281)
                                                   - *(_DWORD *)(v1836 + 4 * (int)v1277 + v1281);
                        --v1282;
                        v1281 += 4;
                      }
                      while (v1282 > 1);
                    }
                    v1270 += 4 * (int)v381;
                    v1927 += (int)v381;
                  }
                  while (v1927 < v1898);
                }
              }
              break;
            default:
LABEL_444:
              switch(v377)
              {
                case 1uLL:
                  v391 = v128[6];
                  if (v391)
                  {
                    v392 = (_DWORD *)v129[19];
                    v393 = (_DWORD *)v245[19];
                    v394 = (_DWORD *)v128[19];
                    v395 = 4 * *(_QWORD *)v245[3];
                    v396 = 4 * *(_QWORD *)v129[3];
                    do
                    {
                      *v394++ = *v392 - *v393;
                      v393 = (_DWORD *)((char *)v393 + v395);
                      v392 = (_DWORD *)((char *)v392 + v396);
                      --v391;
                    }
                    while (v391);
                  }
                  break;
                case 2uLL:
                  v741 = *v130;
                  if (*v130)
                  {
                    v742 = 0;
                    v743 = 0;
                    v744 = 0;
                    v745 = 0;
                    v746 = v129[19];
                    v747 = v245[19];
                    v748 = v128[19];
                    v749 = (uint64_t *)v129[3];
                    v750 = *v749;
                    v751 = v749[1];
                    v752 = (uint64_t *)v245[3];
                    v754 = *v752;
                    v753 = v752[1];
                    v755 = v130[1];
                    do
                    {
                      if (v755)
                      {
                        for (m = 0; m < v755; ++m)
                        {
                          *(_DWORD *)(v748 + 4 * v743 + 4 * m) = *(_DWORD *)(v746 + 4 * v745)
                                                               - *(_DWORD *)(v747 + 4 * v744);
                          v745 += v751;
                          v744 += v753;
                          v755 = v130[1];
                        }
                        v757 = v755;
                        v741 = *v130;
                        v743 += m;
                      }
                      else
                      {
                        v757 = 0;
                      }
                      v745 = v745 + v750 - v757 * v751;
                      v744 = v744 + v754 - v753 * v246[1];
                      ++v742;
                    }
                    while (v742 < v741);
                  }
                  break;
                case 3uLL:
                  v758 = *v130;
                  if (*v130)
                  {
                    v759 = 0;
                    v760 = 0;
                    v761 = 0;
                    v762 = 0;
                    v763 = v129[19];
                    v764 = v245[19];
                    v765 = v128[19];
                    v766 = (uint64_t *)v129[3];
                    v767 = *v766;
                    v768 = v766[1];
                    v769 = (uint64_t *)v245[3];
                    v770 = *v769;
                    v771 = v769[1];
                    v772 = v130[1];
                    v773 = v772;
                    do
                    {
                      if (v773)
                      {
                        v774 = 0;
                        v775 = v766[2];
                        v776 = v769[2];
                        v777 = v130[2];
                        do
                        {
                          if (v777)
                          {
                            for (n = 0; n < v777; ++n)
                            {
                              *(_DWORD *)(v765 + 4 * v760 + 4 * n) = *(_DWORD *)(v763 + 4 * v762)
                                                                   - *(_DWORD *)(v764 + 4 * v761);
                              v762 += v775;
                              v761 += v776;
                              v777 = v130[2];
                            }
                            v779 = v777;
                            v772 = v130[1];
                            v760 += n;
                          }
                          else
                          {
                            v779 = 0;
                          }
                          v762 = v762 + v768 - v779 * v775;
                          v761 = v761 + v771 - v776 * v246[2];
                          ++v774;
                        }
                        while (v774 < v772);
                        v780 = v772;
                        v758 = *v130;
                        v773 = v772;
                      }
                      else
                      {
                        v780 = 0;
                      }
                      v762 = v762 + v767 - v780 * v768;
                      v761 = v761 + v770 - v771 * v246[1];
                      ++v759;
                    }
                    while (v759 < v758);
                  }
                  break;
                case 4uLL:
                  v781 = *v130;
                  if (*v130)
                  {
                    v782 = 0;
                    v783 = 0;
                    v784 = 0;
                    v785 = 0;
                    v786 = v129[19];
                    v787 = v245[19];
                    v788 = v128[19];
                    v789 = (uint64_t *)v129[3];
                    v790 = *v789;
                    v791 = v789[1];
                    v792 = (uint64_t *)v245[3];
                    v793 = *v792;
                    v794 = v792[1];
                    v795 = v130[1];
                    v796 = v795;
                    do
                    {
                      if (v796)
                      {
                        v797 = 0;
                        v798 = v789[2];
                        v799 = v792[2];
                        v800 = v130[2];
                        v801 = v800;
                        do
                        {
                          if (v801)
                          {
                            v802 = 0;
                            v803 = v789[3];
                            v804 = v792[3];
                            v805 = v130[3];
                            do
                            {
                              if (v805)
                              {
                                for (ii = 0; ii < v805; ++ii)
                                {
                                  *(_DWORD *)(v788 + 4 * v783 + 4 * ii) = *(_DWORD *)(v786 + 4 * v785)
                                                                        - *(_DWORD *)(v787 + 4 * v784);
                                  v785 += v803;
                                  v784 += v804;
                                  v805 = v130[3];
                                }
                                v807 = v805;
                                v800 = v130[2];
                                v783 += ii;
                              }
                              else
                              {
                                v807 = 0;
                              }
                              v785 = v785 + v798 - v807 * v803;
                              v784 = v784 + v799 - v804 * v246[3];
                              ++v802;
                            }
                            while (v802 < v800);
                            v808 = v800;
                            v795 = v130[1];
                            v801 = v800;
                          }
                          else
                          {
                            v808 = 0;
                          }
                          v785 = v785 + v791 - v808 * v798;
                          v784 = v784 + v794 - v799 * v246[2];
                          ++v797;
                        }
                        while (v797 < v795);
                        v809 = v795;
                        v781 = *v130;
                        v796 = v795;
                      }
                      else
                      {
                        v809 = 0;
                      }
                      v785 = v785 + v790 - v809 * v791;
                      v784 = v784 + v793 - v794 * v246[1];
                      ++v782;
                    }
                    while (v782 < v781);
                  }
                  break;
                default:
                  v729 = v128[6];
                  if (v729)
                  {
                    v730 = 0;
                    v1889 = v245[19];
                    v1918 = v129[19];
                    v1876 = v128[19];
                    do
                    {
                      v731 = 0;
                      if ((v132 & 0x80000000) == 0)
                      {
                        v732 = v129[3];
                        v733 = v132;
                        v734 = v730;
                        do
                        {
                          v735 = ldiv(v734, v130[v733]);
                          v734 = v735.quot;
                          v731 += *(_QWORD *)(v732 + 8 * v733--) * v735.rem;
                        }
                        while (v733 != -1);
                      }
                      v736 = v1946;
                      if ((v1946 & 0x80000000) != 0)
                      {
                        LODWORD(v737) = 0;
                      }
                      else
                      {
                        v737 = 0;
                        v738 = v245[3];
                        v739 = v730;
                        do
                        {
                          v740 = ldiv(v739, v246[v736]);
                          v739 = v740.quot;
                          v737 += *(_QWORD *)(v738 + 8 * v736--) * v740.rem;
                        }
                        while (v736 != -1);
                      }
                      *(_DWORD *)(v1876 + 4 * v730++) = *(_DWORD *)(v1918 + 4 * (int)v731)
                                                      - *(_DWORD *)(v1889 + 4 * (int)v737);
                      v132 = v1964;
                    }
                    while (v730 != v729);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v24)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a1 + 152) - **(_QWORD **)(*a2 + 152);
          return;
        case 1:
          v166 = *(_DWORD *)(*a2 + 160);
          if (v166 >= 1)
          {
            v167 = **(_QWORD **)(*a1 + 152);
            v168 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v169 = *(uint64_t **)(*a2 + 152);
            v170 = v166 + 1;
            do
            {
              v171 = *v169++;
              *v168++ = v167 - v171;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 2:
          v172 = *(_DWORD *)(*a1 + 160);
          if (v172 >= 1)
          {
            v173 = **(_QWORD **)(*a2 + 152);
            v174 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v175 = *(uint64_t **)(*a1 + 152);
            v176 = v172 + 1;
            do
            {
              v177 = *v175++;
              *v174++ = v177 - v173;
              --v176;
            }
            while (v176 > 1);
          }
          return;
        case 3:
          v178 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v178 >= 1)
          {
            v179 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v180 = *(uint64_t **)(*a2 + 152);
            v181 = *(uint64_t **)(*a1 + 152);
            v182 = v178 + 1;
            do
            {
              v184 = *v181++;
              v183 = v184;
              v185 = *v180++;
              *v179++ = v183 - v185;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        default:
          v157 = *(_QWORD **)a3;
          v158 = (_QWORD *)*a1;
          v159 = *(int **)*a1;
          v160 = (v158[1] - (_QWORD)v159) >> 2;
          v161 = (v160 - 1);
          if ((int)v161 >= -1)
            v162 = -1;
          else
            v162 = v160 - 1;
          v163 = v162 + 1;
          v164 = v160 + 1;
          while (1)
          {
            v165 = v164 - 2;
            if (v164 - 2 < 0)
              break;
            --v164;
            if (*(_QWORD *)(v158[3] + 8 * v165) != *(_QWORD *)(v157[3] + 8 * v165))
              goto LABEL_185;
          }
          v164 = v163;
LABEL_185:
          v253 = (_QWORD *)*a2;
          v254 = *(int **)*a2;
          v255 = (v253[1] - (_QWORD)v254) >> 2;
          v256 = (v255 - 1);
          if ((int)v256 >= -1)
            v257 = -1;
          else
            v257 = v255 - 1;
          v258 = v257 + 1;
          v259 = v255 + 1;
          while (1)
          {
            v260 = v259 - 2;
            if (v259 - 2 < 0)
              break;
            --v259;
            if (*(_QWORD *)(v253[3] + 8 * v260) != *(_QWORD *)(v157[3] + 8 * v260))
              goto LABEL_226;
          }
          v259 = v258;
LABEL_226:
          v279 = v160 + 1;
          while (1)
          {
            v280 = v279 - 2;
            if (v279 - 2 < 0)
              break;
            --v279;
            if (*(_QWORD *)(v158[3] + 8 * v280))
              goto LABEL_261;
          }
          v279 = v163;
LABEL_261:
          v293 = v255 + 1;
          while (1)
          {
            v294 = v293 - 2;
            if (v293 - 2 < 0)
              break;
            --v293;
            if (*(_QWORD *)(v253[3] + 8 * v294))
              goto LABEL_450;
          }
          v293 = v258;
LABEL_450:
          v397 = (uint64_t)(v157[1] - *v157) >> 2;
          if (v164 <= v259)
            v398 = v259;
          else
            v398 = v164;
          if (v164 <= v293)
            v164 = v293;
          if (v279 > v259)
            v259 = v279;
          if (v397 > v259)
          {
            v399 = 1;
          }
          else
          {
            v259 = (uint64_t)(v157[1] - *v157) >> 2;
            v399 = 4;
          }
          if (v397 > v164)
          {
            v400 = 2;
          }
          else
          {
            v164 = v259;
            v400 = v399;
          }
          if (v397 > v398)
          {
            v164 = v398;
            v400 = 3;
          }
          v1947 = v256;
          v1965 = v161;
          if (!v164)
            goto LABEL_479;
          v401 = *(_QWORD *)(v157[3] + 8 * (v164 - 1));
          if (v401 < 0x10)
            goto LABEL_479;
          switch(v400)
          {
            case 1:
              if (v164 == 2)
              {
                v1691 = *v159;
                if ((_DWORD)v1691)
                {
                  v1692 = 0;
                  v1693 = 0;
                  v1694 = 0;
                  v1695 = v158[19];
                  v1696 = v253[19];
                  v1697 = v157[19];
                  v1698 = v159[1];
                  v1699 = (uint64_t *)v158[3];
                  v1700 = *v1699;
                  v1701 = v1699[1];
                  v1702 = (uint64_t *)v253[3];
                  v1703 = *v1702;
                  v1704 = v1702[1];
                  if (v1698 <= 1)
                    v1705 = 1;
                  else
                    v1705 = v159[1];
                  v1706 = v1700 - v1701 * v1698;
                  v1707 = v1703 - v1704 * v254[1];
                  do
                  {
                    if ((_DWORD)v1698)
                    {
                      v1708 = 0;
                      v1709 = v1696 + 8 * v1693;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1710 = 0;
                          v1711 = *(_QWORD *)(v1695 + 8 * v1694);
                          v1712 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1697 + v1710) = v1711 - *(_QWORD *)(v1709 + v1710);
                            --v1712;
                            v1710 += 8;
                          }
                          while (v1712 > 1);
                        }
                        v1694 += v1701;
                        v1693 += v1704;
                        v1697 += 8 * (int)v401;
                        ++v1708;
                        v1709 += 8 * v1704;
                      }
                      while (v1708 != v1705);
                    }
                    v1694 += v1706;
                    v1693 += v1707;
                    ++v1692;
                  }
                  while (v1692 != v1691);
                }
              }
              else if (v164 == 1)
              {
                v1077 = *v159;
                if ((_DWORD)v1077)
                {
                  v1078 = 0;
                  v1079 = 0;
                  v1080 = v158[19];
                  v1081 = v253[19];
                  v1082 = v157[19];
                  v1083 = *(_QWORD *)v158[3];
                  v1084 = 8 * *(_QWORD *)v253[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v1085 = 0;
                      v1086 = *(_QWORD *)(v1080 + 8 * v1079);
                      v1087 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1082 + v1085) = v1086 - *(_QWORD *)(v1081 + v1085);
                        --v1087;
                        v1085 += 8;
                      }
                      while (v1087 > 1);
                    }
                    v1079 += v1083;
                    ++v1078;
                    v1082 += 8 * (int)v401;
                    v1081 += v1084;
                  }
                  while (v1078 != v1077);
                }
              }
              else
              {
                v1911 = v157[6];
                if (v1911)
                {
                  v1940 = 0;
                  v1843 = v253[19];
                  v1858 = v158[19];
                  v1713 = v157[19];
                  do
                  {
                    v1714 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1715 = v158[3];
                      v1716 = v161;
                      v1717 = v1940;
                      do
                      {
                        v1718 = ldiv(v1717, v159[v1716]);
                        v1717 = v1718.quot;
                        v1714 += *(_QWORD *)(v1715 + 8 * v1716--) * v1718.rem;
                      }
                      while (v1716 != -1);
                    }
                    v1719 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1720) = 0;
                    }
                    else
                    {
                      v1720 = 0;
                      v1721 = v253[3];
                      v1722 = v1940;
                      do
                      {
                        v1723 = ldiv(v1722, v254[v1719]);
                        v1722 = v1723.quot;
                        v1720 += *(_QWORD *)(v1721 + 8 * v1719--) * v1723.rem;
                      }
                      while (v1719 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1724 = 0;
                      v1725 = *(_QWORD *)(v1858 + 8 * (int)v1714);
                      v1726 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1713 + v1724) = v1725 - *(_QWORD *)(v1843 + 8 * (int)v1720 + v1724);
                        --v1726;
                        v1724 += 8;
                      }
                      while (v1726 > 1);
                    }
                    v1713 += 8 * (int)v401;
                    v1940 += (int)v401;
                  }
                  while (v1940 < v1911);
                }
              }
              break;
            case 2:
              if (v164 == 2)
              {
                v1727 = *v159;
                if ((_DWORD)v1727)
                {
                  v1728 = 0;
                  v1729 = 0;
                  v1730 = 0;
                  v1731 = v158[19];
                  v1732 = v253[19];
                  v1733 = v157[19];
                  v1734 = v159[1];
                  v1735 = (uint64_t *)v158[3];
                  v1736 = *v1735;
                  v1737 = v1735[1];
                  v1738 = (uint64_t *)v253[3];
                  v1739 = *v1738;
                  v1740 = v1738[1];
                  if (v1734 <= 1)
                    v1741 = 1;
                  else
                    v1741 = v159[1];
                  v1742 = v1736 - v1737 * v1734;
                  v1743 = v1739 - v1740 * v254[1];
                  do
                  {
                    if ((_DWORD)v1734)
                    {
                      v1744 = 0;
                      v1745 = v1731 + 8 * v1730;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1746 = 0;
                          v1747 = *(_QWORD *)(v1732 + 8 * v1729);
                          v1748 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1733 + v1746) = *(_QWORD *)(v1745 + v1746) - v1747;
                            --v1748;
                            v1746 += 8;
                          }
                          while (v1748 > 1);
                        }
                        v1730 += v1737;
                        v1729 += v1740;
                        v1733 += 8 * (int)v401;
                        ++v1744;
                        v1745 += 8 * v1737;
                      }
                      while (v1744 != v1741);
                    }
                    v1730 += v1742;
                    v1729 += v1743;
                    ++v1728;
                  }
                  while (v1728 != v1727);
                }
              }
              else if (v164 == 1)
              {
                v1088 = *v159;
                if ((_DWORD)v1088)
                {
                  v1089 = 0;
                  v1090 = 0;
                  v1091 = v158[19];
                  v1092 = v253[19];
                  v1093 = v157[19];
                  v1094 = *(_QWORD *)v253[3];
                  v1095 = 8 * *(_QWORD *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v1096 = 0;
                      v1097 = *(_QWORD *)(v1092 + 8 * v1090);
                      v1098 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1093 + v1096) = *(_QWORD *)(v1091 + v1096) - v1097;
                        --v1098;
                        v1096 += 8;
                      }
                      while (v1098 > 1);
                    }
                    v1090 += v1094;
                    ++v1089;
                    v1093 += 8 * (int)v401;
                    v1091 += v1095;
                  }
                  while (v1089 != v1088);
                }
              }
              else
              {
                v1912 = v157[6];
                if (v1912)
                {
                  v1941 = 0;
                  v1844 = v253[19];
                  v1859 = v158[19];
                  v1749 = v157[19];
                  do
                  {
                    v1750 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1751 = v158[3];
                      v1752 = v161;
                      v1753 = v1941;
                      do
                      {
                        v1754 = ldiv(v1753, v159[v1752]);
                        v1753 = v1754.quot;
                        v1750 += *(_QWORD *)(v1751 + 8 * v1752--) * v1754.rem;
                      }
                      while (v1752 != -1);
                    }
                    v1755 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1756) = 0;
                    }
                    else
                    {
                      v1756 = 0;
                      v1757 = v253[3];
                      v1758 = v1941;
                      do
                      {
                        v1759 = ldiv(v1758, v254[v1755]);
                        v1758 = v1759.quot;
                        v1756 += *(_QWORD *)(v1757 + 8 * v1755--) * v1759.rem;
                      }
                      while (v1755 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1760 = 0;
                      v1761 = *(_QWORD *)(v1844 + 8 * (int)v1756);
                      v1762 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1749 + v1760) = *(_QWORD *)(v1859 + 8 * (int)v1750 + v1760) - v1761;
                        --v1762;
                        v1760 += 8;
                      }
                      while (v1762 > 1);
                    }
                    v1749 += 8 * (int)v401;
                    v1941 += (int)v401;
                  }
                  while (v1941 < v1912);
                }
              }
              break;
            case 3:
              if (v164 == 2)
              {
                v1283 = *v159;
                if ((_DWORD)v1283)
                {
                  v1284 = 0;
                  v1285 = 0;
                  v1286 = 0;
                  v1287 = v158[19];
                  v1288 = v253[19];
                  v1289 = v157[19];
                  v1290 = v159[1];
                  v1291 = (uint64_t *)v158[3];
                  v1292 = *v1291;
                  v1293 = v1291[1];
                  v1294 = (uint64_t *)v253[3];
                  v1295 = *v1294;
                  v1296 = v1294[1];
                  if (v1290 <= 1)
                    v1297 = 1;
                  else
                    v1297 = v159[1];
                  v1298 = v1292 - v1293 * v1290;
                  v1299 = v1295 - v1296 * v254[1];
                  do
                  {
                    if ((_DWORD)v1290)
                    {
                      v1300 = 0;
                      v1301 = v1288 + 8 * v1285;
                      v1302 = v1287 + 8 * v1286;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          v1303 = 0;
                          v1304 = v401 + 1;
                          do
                          {
                            *(_QWORD *)(v1289 + v1303) = *(_QWORD *)(v1302 + v1303) - *(_QWORD *)(v1301 + v1303);
                            --v1304;
                            v1303 += 8;
                          }
                          while (v1304 > 1);
                        }
                        v1286 += v1293;
                        v1285 += v1296;
                        v1289 += 8 * (int)v401;
                        ++v1300;
                        v1301 += 8 * v1296;
                        v1302 += 8 * v1293;
                      }
                      while (v1300 != v1297);
                    }
                    v1286 += v1298;
                    v1285 += v1299;
                    ++v1284;
                  }
                  while (v1284 != v1283);
                }
              }
              else if (v164 == 1)
              {
                v402 = *v159;
                if ((_DWORD)v402)
                {
                  v403 = 0;
                  v404 = v158[19];
                  v405 = v253[19];
                  v406 = v157[19];
                  v407 = 8 * *(_QWORD *)v253[3];
                  v408 = 8 * *(_QWORD *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      v409 = 0;
                      v410 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v406 + v409) = *(_QWORD *)(v404 + v409) - *(_QWORD *)(v405 + v409);
                        --v410;
                        v409 += 8;
                      }
                      while (v410 > 1);
                    }
                    ++v403;
                    v406 += 8 * (int)v401;
                    v405 += v407;
                    v404 += v408;
                  }
                  while (v403 != v402);
                }
              }
              else
              {
                v1899 = v157[6];
                if (v1899)
                {
                  v1928 = 0;
                  v1837 = v253[19];
                  v1850 = v158[19];
                  v1305 = v157[19];
                  do
                  {
                    v1306 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      v1307 = v158[3];
                      v1308 = v161;
                      v1309 = v1928;
                      do
                      {
                        v1310 = ldiv(v1309, v159[v1308]);
                        v1309 = v1310.quot;
                        v1306 += *(_QWORD *)(v1307 + 8 * v1308--) * v1310.rem;
                      }
                      while (v1308 != -1);
                    }
                    v1311 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1312) = 0;
                    }
                    else
                    {
                      v1312 = 0;
                      v1313 = v253[3];
                      v1314 = v1928;
                      do
                      {
                        v1315 = ldiv(v1314, v254[v1311]);
                        v1314 = v1315.quot;
                        v1312 += *(_QWORD *)(v1313 + 8 * v1311--) * v1315.rem;
                      }
                      while (v1311 != -1);
                    }
                    v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      v1316 = 0;
                      v1317 = v401 + 1;
                      do
                      {
                        *(_QWORD *)(v1305 + v1316) = *(_QWORD *)(v1850 + 8 * (int)v1306 + v1316)
                                                   - *(_QWORD *)(v1837 + 8 * (int)v1312 + v1316);
                        --v1317;
                        v1316 += 8;
                      }
                      while (v1317 > 1);
                    }
                    v1305 += 8 * (int)v401;
                    v1928 += (int)v401;
                  }
                  while (v1928 < v1899);
                }
              }
              break;
            default:
LABEL_479:
              switch(v397)
              {
                case 1uLL:
                  v411 = v157[6];
                  if (v411)
                  {
                    v412 = (_QWORD *)v158[19];
                    v413 = (_QWORD *)v253[19];
                    v414 = (_QWORD *)v157[19];
                    v415 = 8 * *(_QWORD *)v253[3];
                    v416 = 8 * *(_QWORD *)v158[3];
                    do
                    {
                      *v414++ = *v412 - *v413;
                      v413 = (_QWORD *)((char *)v413 + v415);
                      v412 = (_QWORD *)((char *)v412 + v416);
                      --v411;
                    }
                    while (v411);
                  }
                  break;
                case 2uLL:
                  v822 = *v159;
                  if ((_DWORD)v822)
                  {
                    v823 = 0;
                    v824 = 0;
                    v825 = 0;
                    v826 = 0;
                    v827 = v158[19];
                    v828 = v253[19];
                    v829 = v157[19];
                    v830 = v159[1];
                    v831 = (uint64_t *)v158[3];
                    v832 = *v831;
                    v833 = v831[1];
                    v834 = (uint64_t *)v253[3];
                    v835 = *v834;
                    v836 = v834[1];
                    v837 = v835 - v836 * v254[1];
                    if (v830 <= 1)
                      v838 = 1;
                    else
                      v838 = v159[1];
                    v839 = v832 - v833 * v830;
                    do
                    {
                      if ((_DWORD)v830)
                      {
                        v840 = v824 + v838;
                        v841 = (_QWORD *)(v829 + 8 * v824);
                        v842 = v838;
                        do
                        {
                          *v841++ = *(_QWORD *)(v827 + 8 * v826) - *(_QWORD *)(v828 + 8 * v825);
                          v826 += v833;
                          v825 += v836;
                          --v842;
                        }
                        while (v842);
                        v824 = v840;
                      }
                      v826 += v839;
                      v825 += v837;
                      ++v823;
                    }
                    while (v823 != v822);
                  }
                  break;
                case 3uLL:
                  v843 = *v159;
                  if ((_DWORD)v843)
                  {
                    v844 = 0;
                    v845 = 0;
                    v846 = 0;
                    v847 = 0;
                    v848 = v158[19];
                    v849 = v253[19];
                    v850 = v157[19];
                    v851 = v159[1];
                    v852 = (_QWORD *)v158[3];
                    v853 = v852[1];
                    v854 = (_QWORD *)v253[3];
                    v855 = v854[1];
                    v856 = *v854 - v855 * v254[1];
                    if (v851 <= 1)
                      v857 = 1;
                    else
                      v857 = v159[1];
                    v858 = *v852 - v853 * v851;
                    do
                    {
                      if ((_DWORD)v851)
                      {
                        v859 = 0;
                        v860 = v159[2];
                        v861 = v852[2];
                        v862 = v854[2];
                        if (v860 <= 1)
                          v863 = 1;
                        else
                          v863 = v159[2];
                        v864 = v855 - v862 * v254[2];
                        do
                        {
                          v865 = v863;
                          if ((_DWORD)v860)
                          {
                            do
                            {
                              *(_QWORD *)(v850 + 8 * v845++) = *(_QWORD *)(v848 + 8 * v847)
                                                             - *(_QWORD *)(v849 + 8 * v846);
                              v847 += v861;
                              v846 += v862;
                              --v865;
                            }
                            while (v865);
                          }
                          v847 += v853 - v861 * v860;
                          v846 += v864;
                          ++v859;
                        }
                        while (v859 != v857);
                      }
                      v847 += v858;
                      v846 += v856;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 4uLL:
                  v1970 = *v159;
                  if ((_DWORD)v1970)
                  {
                    v866 = 0;
                    v867 = 0;
                    v868 = 0;
                    v869 = 0;
                    v870 = v158[19];
                    v871 = v253[19];
                    v872 = v157[19];
                    v873 = v159[1];
                    v874 = (_QWORD *)v158[3];
                    v875 = (_QWORD *)v253[3];
                    v1863 = v875[1];
                    v1878 = v874[1];
                    v1920 = *v875 - v1863 * v254[1];
                    v1952 = v159[1];
                    if (v873 <= 1)
                      v876 = 1;
                    else
                      v876 = v159[1];
                    v1891 = *v874 - v874[1] * v873;
                    do
                    {
                      if (v1952)
                      {
                        v877 = 0;
                        v878 = v159[2];
                        v879 = v874[2];
                        v880 = v875[2];
                        if (v878 <= 1)
                          v881 = 1;
                        else
                          v881 = v159[2];
                        v882 = v1863 - v880 * v254[2];
                        do
                        {
                          if ((_DWORD)v878)
                          {
                            v883 = 0;
                            v884 = v159[3];
                            v885 = v874[3];
                            v886 = v875[3];
                            if (v884 <= 1)
                              v887 = 1;
                            else
                              v887 = v159[3];
                            v888 = v880 - v886 * v254[3];
                            do
                            {
                              v889 = v887;
                              if ((_DWORD)v884)
                              {
                                do
                                {
                                  *(_QWORD *)(v872 + 8 * v867++) = *(_QWORD *)(v870 + 8 * v869)
                                                                 - *(_QWORD *)(v871 + 8 * v868);
                                  v869 += v885;
                                  v868 += v886;
                                  --v889;
                                }
                                while (v889);
                              }
                              v869 += v879 - v885 * v884;
                              v868 += v888;
                              ++v883;
                            }
                            while (v883 != v881);
                          }
                          v869 += v1878 - v879 * v878;
                          v868 += v882;
                          ++v877;
                        }
                        while (v877 != v876);
                      }
                      v869 += v1891;
                      v868 += v1920;
                      ++v866;
                    }
                    while (v866 != v1970);
                  }
                  break;
                default:
                  v810 = v157[6];
                  if (v810)
                  {
                    v811 = 0;
                    v1890 = v253[19];
                    v1919 = v158[19];
                    v1877 = v157[19];
                    do
                    {
                      v812 = 0;
                      if ((v161 & 0x80000000) == 0)
                      {
                        v813 = v158[3];
                        v814 = v161;
                        v815 = v811;
                        do
                        {
                          v816 = ldiv(v815, v159[v814]);
                          v815 = v816.quot;
                          v812 += *(_QWORD *)(v813 + 8 * v814--) * v816.rem;
                        }
                        while (v814 != -1);
                      }
                      v817 = v1947;
                      if ((v1947 & 0x80000000) != 0)
                      {
                        LODWORD(v818) = 0;
                      }
                      else
                      {
                        v818 = 0;
                        v819 = v253[3];
                        v820 = v811;
                        do
                        {
                          v821 = ldiv(v820, v254[v817]);
                          v820 = v821.quot;
                          v818 += *(_QWORD *)(v819 + 8 * v817--) * v821.rem;
                        }
                        while (v817 != -1);
                      }
                      *(_QWORD *)(v1877 + 8 * v811++) = *(_QWORD *)(v1919 + 8 * (int)v812)
                                                      - *(_QWORD *)(v1890 + 8 * (int)v818);
                      v161 = v1965;
                    }
                    while (v811 != v810);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
          v195 = *(_DWORD *)(*a2 + 160);
          if (v195 >= 1)
          {
            v196 = **(float **)(*a1 + 152);
            v197 = *(float **)(*(_QWORD *)a3 + 152);
            v198 = *(float **)(*a2 + 152);
            v199 = v195 + 1;
            do
            {
              v200 = *v198++;
              *v197++ = v196 - v200;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 2:
          v201 = *(_DWORD *)(*a1 + 160);
          if (v201 >= 1)
          {
            v202 = **(float **)(*a2 + 152);
            v203 = *(float **)(*(_QWORD *)a3 + 152);
            v204 = *(float **)(*a1 + 152);
            v205 = v201 + 1;
            do
            {
              v206 = *v204++;
              *v203++ = v206 - v202;
              --v205;
            }
            while (v205 > 1);
          }
          return;
        case 3:
          v207 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v207 >= 1)
          {
            v208 = *(float **)(*(_QWORD *)a3 + 152);
            v209 = *(float **)(*a2 + 152);
            v210 = *(float **)(*a1 + 152);
            v211 = v207 + 1;
            do
            {
              v212 = *v210++;
              v213 = v212;
              v214 = *v209++;
              *v208++ = v213 - v214;
              --v211;
            }
            while (v211 > 1);
          }
          return;
        default:
          v186 = *(_QWORD **)a3;
          v187 = (_QWORD *)*a1;
          v188 = *(int **)*a1;
          v189 = (v187[1] - (_QWORD)v188) >> 2;
          v190 = (v189 - 1);
          if ((int)v190 >= -1)
            v191 = -1;
          else
            v191 = v189 - 1;
          v192 = v191 + 1;
          v193 = v189 + 1;
          while (1)
          {
            v194 = v193 - 2;
            if (v193 - 2 < 0)
              break;
            --v193;
            if (*(_QWORD *)(v187[3] + 8 * v194) != *(_QWORD *)(v186[3] + 8 * v194))
              goto LABEL_193;
          }
          v193 = v192;
LABEL_193:
          v261 = (_QWORD *)*a2;
          v262 = *(int **)*a2;
          v263 = (v261[1] - (_QWORD)v262) >> 2;
          v264 = (v263 - 1);
          if ((int)v264 >= -1)
            v265 = -1;
          else
            v265 = v263 - 1;
          v266 = v265 + 1;
          v267 = v263 + 1;
          while (1)
          {
            v268 = v267 - 2;
            if (v267 - 2 < 0)
              break;
            --v267;
            if (*(_QWORD *)(v261[3] + 8 * v268) != *(_QWORD *)(v186[3] + 8 * v268))
              goto LABEL_231;
          }
          v267 = v266;
LABEL_231:
          v281 = v189 + 1;
          while (1)
          {
            v282 = v281 - 2;
            if (v281 - 2 < 0)
              break;
            --v281;
            if (*(_QWORD *)(v187[3] + 8 * v282))
              goto LABEL_266;
          }
          v281 = v192;
LABEL_266:
          v295 = v263 + 1;
          while (1)
          {
            v296 = v295 - 2;
            if (v295 - 2 < 0)
              break;
            --v295;
            if (*(_QWORD *)(v261[3] + 8 * v296))
              goto LABEL_485;
          }
          v295 = v266;
LABEL_485:
          v417 = (uint64_t)(v186[1] - *v186) >> 2;
          if (v193 <= v267)
            v418 = v267;
          else
            v418 = v193;
          if (v193 <= v295)
            v193 = v295;
          if (v281 > v267)
            v267 = v281;
          if (v417 > v267)
          {
            v419 = 1;
          }
          else
          {
            v267 = (uint64_t)(v186[1] - *v186) >> 2;
            v419 = 4;
          }
          if (v417 > v193)
          {
            v420 = 2;
          }
          else
          {
            v193 = v267;
            v420 = v419;
          }
          if (v417 > v418)
          {
            v193 = v418;
            v420 = 3;
          }
          v1948 = v264;
          v1966 = v190;
          if (!v193)
            goto LABEL_514;
          v421 = *(_QWORD *)(v186[3] + 8 * (v193 - 1));
          if (v421 < 0x10)
            goto LABEL_514;
          switch(v420)
          {
            case 1:
              if (v193 == 2)
              {
                v1763 = *v188;
                if ((_DWORD)v1763)
                {
                  v1764 = 0;
                  v1765 = 0;
                  v1766 = 0;
                  v1767 = v187[19];
                  v1768 = v261[19];
                  v1769 = v186[19];
                  v1770 = v188[1];
                  v1771 = (uint64_t *)v187[3];
                  v1772 = *v1771;
                  v1773 = v1771[1];
                  v1774 = (uint64_t *)v261[3];
                  v1775 = *v1774;
                  v1776 = v1774[1];
                  if (v1770 <= 1)
                    v1777 = 1;
                  else
                    v1777 = v188[1];
                  v1778 = v1772 - v1773 * v1770;
                  v1779 = v1775 - v1776 * v262[1];
                  do
                  {
                    if ((_DWORD)v1770)
                    {
                      v1780 = 0;
                      v1781 = v1768 + 4 * v1765;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1782 = 0;
                          v1783 = *(float *)(v1767 + 4 * v1766);
                          v1784 = v421 + 1;
                          do
                          {
                            *(float *)(v1769 + v1782) = v1783 - *(float *)(v1781 + v1782);
                            --v1784;
                            v1782 += 4;
                          }
                          while (v1784 > 1);
                        }
                        v1766 += v1773;
                        v1765 += v1776;
                        v1769 += 4 * (int)v421;
                        ++v1780;
                        v1781 += 4 * v1776;
                      }
                      while (v1780 != v1777);
                    }
                    v1766 += v1778;
                    v1765 += v1779;
                    ++v1764;
                  }
                  while (v1764 != v1763);
                }
              }
              else if (v193 == 1)
              {
                v1099 = *v188;
                if ((_DWORD)v1099)
                {
                  v1100 = 0;
                  v1101 = 0;
                  v1102 = v187[19];
                  v1103 = v261[19];
                  v1104 = v186[19];
                  v1105 = *(_QWORD *)v187[3];
                  v1106 = 4 * *(_QWORD *)v261[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v1107 = 0;
                      v1108 = *(float *)(v1102 + 4 * v1101);
                      v1109 = v421 + 1;
                      do
                      {
                        *(float *)(v1104 + v1107) = v1108 - *(float *)(v1103 + v1107);
                        --v1109;
                        v1107 += 4;
                      }
                      while (v1109 > 1);
                    }
                    v1101 += v1105;
                    ++v1100;
                    v1104 += 4 * (int)v421;
                    v1103 += v1106;
                  }
                  while (v1100 != v1099);
                }
              }
              else
              {
                v1913 = v186[6];
                if (v1913)
                {
                  v1942 = 0;
                  v1845 = v261[19];
                  v1860 = v187[19];
                  v1785 = v186[19];
                  do
                  {
                    v1786 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1787 = v187[3];
                      v1788 = v190;
                      v1789 = v1942;
                      do
                      {
                        v1790 = ldiv(v1789, v188[v1788]);
                        v1789 = v1790.quot;
                        v1786 += *(_QWORD *)(v1787 + 8 * v1788--) * v1790.rem;
                      }
                      while (v1788 != -1);
                    }
                    v1791 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1792) = 0;
                    }
                    else
                    {
                      v1792 = 0;
                      v1793 = v261[3];
                      v1794 = v1942;
                      do
                      {
                        v1795 = ldiv(v1794, v262[v1791]);
                        v1794 = v1795.quot;
                        v1792 += *(_QWORD *)(v1793 + 8 * v1791--) * v1795.rem;
                      }
                      while (v1791 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1796 = 0;
                      v1797 = *(float *)(v1860 + 4 * (int)v1786);
                      v1798 = v421 + 1;
                      do
                      {
                        *(float *)(v1785 + v1796) = v1797 - *(float *)(v1845 + 4 * (int)v1792 + v1796);
                        --v1798;
                        v1796 += 4;
                      }
                      while (v1798 > 1);
                    }
                    v1785 += 4 * (int)v421;
                    v1942 += (int)v421;
                  }
                  while (v1942 < v1913);
                }
              }
              break;
            case 2:
              if (v193 == 2)
              {
                v1799 = *v188;
                if ((_DWORD)v1799)
                {
                  v1800 = 0;
                  v1801 = 0;
                  v1802 = 0;
                  v1803 = v187[19];
                  v1804 = v261[19];
                  v1805 = v186[19];
                  v1806 = v188[1];
                  v1807 = (uint64_t *)v187[3];
                  v1808 = *v1807;
                  v1809 = v1807[1];
                  v1810 = (uint64_t *)v261[3];
                  v1811 = *v1810;
                  v1812 = v1810[1];
                  if (v1806 <= 1)
                    v1813 = 1;
                  else
                    v1813 = v188[1];
                  v1814 = v1808 - v1809 * v1806;
                  v1815 = v1811 - v1812 * v262[1];
                  do
                  {
                    if ((_DWORD)v1806)
                    {
                      v1816 = 0;
                      v1817 = v1803 + 4 * v1802;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1818 = 0;
                          v1819 = *(float *)(v1804 + 4 * v1801);
                          v1820 = v421 + 1;
                          do
                          {
                            *(float *)(v1805 + v1818) = *(float *)(v1817 + v1818) - v1819;
                            --v1820;
                            v1818 += 4;
                          }
                          while (v1820 > 1);
                        }
                        v1802 += v1809;
                        v1801 += v1812;
                        v1805 += 4 * (int)v421;
                        ++v1816;
                        v1817 += 4 * v1809;
                      }
                      while (v1816 != v1813);
                    }
                    v1802 += v1814;
                    v1801 += v1815;
                    ++v1800;
                  }
                  while (v1800 != v1799);
                }
              }
              else if (v193 == 1)
              {
                v1110 = *v188;
                if ((_DWORD)v1110)
                {
                  v1111 = 0;
                  v1112 = 0;
                  v1113 = v187[19];
                  v1114 = v261[19];
                  v1115 = v186[19];
                  v1116 = *(_QWORD *)v261[3];
                  v1117 = 4 * *(_QWORD *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v1118 = 0;
                      v1119 = *(float *)(v1114 + 4 * v1112);
                      v1120 = v421 + 1;
                      do
                      {
                        *(float *)(v1115 + v1118) = *(float *)(v1113 + v1118) - v1119;
                        --v1120;
                        v1118 += 4;
                      }
                      while (v1120 > 1);
                    }
                    v1112 += v1116;
                    ++v1111;
                    v1115 += 4 * (int)v421;
                    v1113 += v1117;
                  }
                  while (v1111 != v1110);
                }
              }
              else
              {
                v1914 = v186[6];
                if (v1914)
                {
                  v1943 = 0;
                  v1846 = v261[19];
                  v1861 = v187[19];
                  v1821 = v186[19];
                  do
                  {
                    v1822 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1823 = v187[3];
                      v1824 = v190;
                      v1825 = v1943;
                      do
                      {
                        v1826 = ldiv(v1825, v188[v1824]);
                        v1825 = v1826.quot;
                        v1822 += *(_QWORD *)(v1823 + 8 * v1824--) * v1826.rem;
                      }
                      while (v1824 != -1);
                    }
                    v1827 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1828) = 0;
                    }
                    else
                    {
                      v1828 = 0;
                      v1829 = v261[3];
                      v1830 = v1943;
                      do
                      {
                        v1831 = ldiv(v1830, v262[v1827]);
                        v1830 = v1831.quot;
                        v1828 += *(_QWORD *)(v1829 + 8 * v1827--) * v1831.rem;
                      }
                      while (v1827 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1832 = 0;
                      v1833 = *(float *)(v1846 + 4 * (int)v1828);
                      v1834 = v421 + 1;
                      do
                      {
                        *(float *)(v1821 + v1832) = *(float *)(v1861 + 4 * (int)v1822 + v1832) - v1833;
                        --v1834;
                        v1832 += 4;
                      }
                      while (v1834 > 1);
                    }
                    v1821 += 4 * (int)v421;
                    v1943 += (int)v421;
                  }
                  while (v1943 < v1914);
                }
              }
              break;
            case 3:
              if (v193 == 2)
              {
                v1318 = *v188;
                if ((_DWORD)v1318)
                {
                  v1319 = 0;
                  v1320 = 0;
                  v1321 = 0;
                  v1322 = v187[19];
                  v1323 = v261[19];
                  v1324 = v186[19];
                  v1325 = v188[1];
                  v1326 = (uint64_t *)v187[3];
                  v1327 = *v1326;
                  v1328 = v1326[1];
                  v1329 = (uint64_t *)v261[3];
                  v1330 = *v1329;
                  v1331 = v1329[1];
                  if (v1325 <= 1)
                    v1332 = 1;
                  else
                    v1332 = v188[1];
                  v1333 = v1327 - v1328 * v1325;
                  v1334 = v1330 - v1331 * v262[1];
                  do
                  {
                    if ((_DWORD)v1325)
                    {
                      v1335 = 0;
                      v1336 = v1323 + 4 * v1320;
                      v1337 = v1322 + 4 * v1321;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          v1338 = 0;
                          v1339 = v421 + 1;
                          do
                          {
                            *(float *)(v1324 + v1338) = *(float *)(v1337 + v1338) - *(float *)(v1336 + v1338);
                            --v1339;
                            v1338 += 4;
                          }
                          while (v1339 > 1);
                        }
                        v1321 += v1328;
                        v1320 += v1331;
                        v1324 += 4 * (int)v421;
                        ++v1335;
                        v1336 += 4 * v1331;
                        v1337 += 4 * v1328;
                      }
                      while (v1335 != v1332);
                    }
                    v1321 += v1333;
                    v1320 += v1334;
                    ++v1319;
                  }
                  while (v1319 != v1318);
                }
              }
              else if (v193 == 1)
              {
                v422 = *v188;
                if ((_DWORD)v422)
                {
                  v423 = 0;
                  v424 = v187[19];
                  v425 = v261[19];
                  v426 = v186[19];
                  v427 = 4 * *(_QWORD *)v261[3];
                  v428 = 4 * *(_QWORD *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      v429 = 0;
                      v430 = v421 + 1;
                      do
                      {
                        *(float *)(v426 + v429) = *(float *)(v424 + v429) - *(float *)(v425 + v429);
                        --v430;
                        v429 += 4;
                      }
                      while (v430 > 1);
                    }
                    ++v423;
                    v426 += 4 * (int)v421;
                    v425 += v427;
                    v424 += v428;
                  }
                  while (v423 != v422);
                }
              }
              else
              {
                v1900 = v186[6];
                if (v1900)
                {
                  v1929 = 0;
                  v1838 = v261[19];
                  v1851 = v187[19];
                  v1340 = v186[19];
                  do
                  {
                    v1341 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      v1342 = v187[3];
                      v1343 = v190;
                      v1344 = v1929;
                      do
                      {
                        v1345 = ldiv(v1344, v188[v1343]);
                        v1344 = v1345.quot;
                        v1341 += *(_QWORD *)(v1342 + 8 * v1343--) * v1345.rem;
                      }
                      while (v1343 != -1);
                    }
                    v1346 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1347) = 0;
                    }
                    else
                    {
                      v1347 = 0;
                      v1348 = v261[3];
                      v1349 = v1929;
                      do
                      {
                        v1350 = ldiv(v1349, v262[v1346]);
                        v1349 = v1350.quot;
                        v1347 += *(_QWORD *)(v1348 + 8 * v1346--) * v1350.rem;
                      }
                      while (v1346 != -1);
                    }
                    v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      v1351 = 0;
                      v1352 = v421 + 1;
                      do
                      {
                        *(float *)(v1340 + v1351) = *(float *)(v1851 + 4 * (int)v1341 + v1351)
                                                  - *(float *)(v1838 + 4 * (int)v1347 + v1351);
                        --v1352;
                        v1351 += 4;
                      }
                      while (v1352 > 1);
                    }
                    v1340 += 4 * (int)v421;
                    v1929 += (int)v421;
                  }
                  while (v1929 < v1900);
                }
              }
              break;
            default:
LABEL_514:
              switch(v417)
              {
                case 1uLL:
                  v431 = v186[6];
                  if (v431)
                  {
                    v432 = (float *)v187[19];
                    v433 = (float *)v261[19];
                    v434 = (float *)v186[19];
                    v435 = 4 * *(_QWORD *)v261[3];
                    v436 = 4 * *(_QWORD *)v187[3];
                    do
                    {
                      *v434++ = *v432 - *v433;
                      v433 = (float *)((char *)v433 + v435);
                      v432 = (float *)((char *)v432 + v436);
                      --v431;
                    }
                    while (v431);
                  }
                  break;
                case 2uLL:
                  v902 = *v188;
                  if ((_DWORD)v902)
                  {
                    v903 = 0;
                    v904 = 0;
                    v905 = 0;
                    v906 = 0;
                    v907 = v187[19];
                    v908 = v261[19];
                    v909 = v186[19];
                    v910 = v188[1];
                    v911 = (uint64_t *)v187[3];
                    v912 = *v911;
                    v913 = v911[1];
                    v914 = (uint64_t *)v261[3];
                    v915 = *v914;
                    v916 = v914[1];
                    v917 = v915 - v916 * v262[1];
                    if (v910 <= 1)
                      v918 = 1;
                    else
                      v918 = v188[1];
                    v919 = v912 - v913 * v910;
                    do
                    {
                      if ((_DWORD)v910)
                      {
                        v920 = v904 + v918;
                        v921 = (float *)(v909 + 4 * v904);
                        v922 = v918;
                        do
                        {
                          *v921++ = *(float *)(v907 + 4 * v906) - *(float *)(v908 + 4 * v905);
                          v906 += v913;
                          v905 += v916;
                          --v922;
                        }
                        while (v922);
                        v904 = v920;
                      }
                      v906 += v919;
                      v905 += v917;
                      ++v903;
                    }
                    while (v903 != v902);
                  }
                  break;
                case 3uLL:
                  v923 = *v188;
                  if ((_DWORD)v923)
                  {
                    v924 = 0;
                    v925 = 0;
                    v926 = 0;
                    v927 = 0;
                    v928 = v187[19];
                    v929 = v261[19];
                    v930 = v186[19];
                    v931 = v188[1];
                    v932 = (_QWORD *)v187[3];
                    v933 = v932[1];
                    v934 = (_QWORD *)v261[3];
                    v935 = v934[1];
                    v936 = *v934 - v935 * v262[1];
                    if (v931 <= 1)
                      v937 = 1;
                    else
                      v937 = v188[1];
                    v938 = *v932 - v933 * v931;
                    do
                    {
                      if ((_DWORD)v931)
                      {
                        v939 = 0;
                        v940 = v188[2];
                        v941 = v932[2];
                        v942 = v934[2];
                        if (v940 <= 1)
                          v943 = 1;
                        else
                          v943 = v188[2];
                        v944 = v935 - v942 * v262[2];
                        do
                        {
                          v945 = v943;
                          if ((_DWORD)v940)
                          {
                            do
                            {
                              *(float *)(v930 + 4 * v925++) = *(float *)(v928 + 4 * v927) - *(float *)(v929 + 4 * v926);
                              v927 += v941;
                              v926 += v942;
                              --v945;
                            }
                            while (v945);
                          }
                          v927 += v933 - v941 * v940;
                          v926 += v944;
                          ++v939;
                        }
                        while (v939 != v937);
                      }
                      v927 += v938;
                      v926 += v936;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 4uLL:
                  v1971 = *v188;
                  if ((_DWORD)v1971)
                  {
                    v946 = 0;
                    v947 = 0;
                    v948 = 0;
                    v949 = 0;
                    v950 = v187[19];
                    v951 = v261[19];
                    v952 = v186[19];
                    v953 = v188[1];
                    v954 = (_QWORD *)v187[3];
                    v955 = (_QWORD *)v261[3];
                    v1893 = v955[1];
                    v1922 = v954[1];
                    v1953 = *v955 - v1893 * v262[1];
                    if (v953 <= 1)
                      v956 = 1;
                    else
                      v956 = v188[1];
                    v957 = *v954 - v954[1] * v953;
                    do
                    {
                      if ((_DWORD)v953)
                      {
                        v958 = 0;
                        v959 = v188[2];
                        v960 = v954[2];
                        v961 = v955[2];
                        if (v959 <= 1)
                          v962 = 1;
                        else
                          v962 = v188[2];
                        v963 = v1893 - v961 * v262[2];
                        do
                        {
                          if ((_DWORD)v959)
                          {
                            v964 = 0;
                            v965 = v188[3];
                            v966 = v954[3];
                            v967 = v955[3];
                            if (v965 <= 1)
                              v968 = 1;
                            else
                              v968 = v188[3];
                            v969 = v961 - v967 * v262[3];
                            do
                            {
                              v970 = v968;
                              if ((_DWORD)v965)
                              {
                                do
                                {
                                  *(float *)(v952 + 4 * v947++) = *(float *)(v950 + 4 * v949)
                                                                - *(float *)(v951 + 4 * v948);
                                  v949 += v966;
                                  v948 += v967;
                                  --v970;
                                }
                                while (v970);
                              }
                              v949 += v960 - v966 * v965;
                              v948 += v969;
                              ++v964;
                            }
                            while (v964 != v962);
                          }
                          v949 += v1922 - v960 * v959;
                          v948 += v963;
                          ++v958;
                        }
                        while (v958 != v956);
                      }
                      v949 += v957;
                      v948 += v1953;
                      ++v946;
                    }
                    while (v946 != v1971);
                  }
                  break;
                default:
                  v890 = v186[6];
                  if (v890)
                  {
                    v891 = 0;
                    v1892 = v261[19];
                    v1921 = v187[19];
                    v1879 = v186[19];
                    do
                    {
                      v892 = 0;
                      if ((v190 & 0x80000000) == 0)
                      {
                        v893 = v187[3];
                        v894 = v190;
                        v895 = v891;
                        do
                        {
                          v896 = ldiv(v895, v188[v894]);
                          v895 = v896.quot;
                          v892 += *(_QWORD *)(v893 + 8 * v894--) * v896.rem;
                        }
                        while (v894 != -1);
                      }
                      v897 = v1948;
                      if ((v1948 & 0x80000000) != 0)
                      {
                        LODWORD(v898) = 0;
                      }
                      else
                      {
                        v898 = 0;
                        v899 = v261[3];
                        v900 = v891;
                        do
                        {
                          v901 = ldiv(v900, v262[v897]);
                          v900 = v901.quot;
                          v898 += *(_QWORD *)(v899 + 8 * v897--) * v901.rem;
                        }
                        while (v897 != -1);
                      }
                      *(float *)(v1879 + 4 * v891++) = *(float *)(v1921 + 4 * (int)v892)
                                                     - *(float *)(v1892 + 4 * (int)v898);
                      v190 = v1966;
                    }
                    while (v891 != v890);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::Tan::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tan::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvtanf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Tan::eval(a1, a2, (int ***)a3);
  }
}

void mlx::core::Tanh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  const float *v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tanh::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)a3 + 56) == 6 && (*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(_QWORD *)v3 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
    vvtanhf(*(float **)(*(_QWORD *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Tanh::eval(a1, a2, (int ***)a3);
  }
}

_QWORD *mlx::core::Abs::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Abs", 3);
}

uint64_t mlx::core::Abs::is_equivalent()
{
  return 1;
}

void mlx::core::Abs::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242502708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Abs::~Abs(mlx::core::Abs *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Add::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Add", 3);
}

uint64_t mlx::core::Add::is_equivalent()
{
  return 1;
}

void mlx::core::Add::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242502840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Add::~Add(mlx::core::Add *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Arange::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Arange", 6);
}

void mlx::core::Arange::~Arange(mlx::core::Arange *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArcCos::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcCos", 6);
}

uint64_t mlx::core::ArcCos::is_equivalent()
{
  return 1;
}

void mlx::core::ArcCos::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425029A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcCos::~ArcCos(mlx::core::ArcCos *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArcCosh::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcCosh", 7);
}

uint64_t mlx::core::ArcCosh::is_equivalent()
{
  return 1;
}

void mlx::core::ArcCosh::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242502ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcCosh::~ArcCosh(mlx::core::ArcCosh *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArcSin::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcSin", 6);
}

uint64_t mlx::core::ArcSin::is_equivalent()
{
  return 1;
}

void mlx::core::ArcSin::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242502C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcSin::~ArcSin(mlx::core::ArcSin *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArcSinh::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcSinh", 7);
}

uint64_t mlx::core::ArcSinh::is_equivalent()
{
  return 1;
}

void mlx::core::ArcSinh::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242502D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcSinh::~ArcSinh(mlx::core::ArcSinh *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArcTan::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcTan", 6);
}

uint64_t mlx::core::ArcTan::is_equivalent()
{
  return 1;
}

void mlx::core::ArcTan::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242502E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan::~ArcTan(mlx::core::ArcTan *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArcTan2::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcTan2", 7);
}

uint64_t mlx::core::ArcTan2::is_equivalent()
{
  return 1;
}

void mlx::core::ArcTan2::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242502FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan2::~ArcTan2(mlx::core::ArcTan2 *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArcTanh::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcTanh", 7);
}

uint64_t mlx::core::ArcTanh::is_equivalent()
{
  return 1;
}

void mlx::core::ArcTanh::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425030F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcTanh::~ArcTanh(mlx::core::ArcTanh *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArgPartition::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArgPartition", 12);
}

void mlx::core::ArgPartition::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242503224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArgPartition::~ArgPartition(mlx::core::ArgPartition *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArgReduce::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArgReduce", 9);
}

void mlx::core::ArgReduce::~ArgReduce(mlx::core::ArgReduce *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ArgSort::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArgSort", 7);
}

void mlx::core::ArgSort::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242503380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::~ArgSort(mlx::core::ArgSort *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::AsType::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AsType", 6);
}

void mlx::core::AsType::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425034B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::AsType::~AsType(mlx::core::AsType *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::AsStrided::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AsStrided", 9);
}

void mlx::core::AsStrided::~AsStrided(mlx::core::AsStrided *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_251350B18;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_251350B18;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::BlockMaskedMM::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BlockMaskedMM", 13);
}

void mlx::core::BlockMaskedMM::~BlockMaskedMM(mlx::core::BlockMaskedMM *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::GatherMM::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"GatherMM", 8);
}

uint64_t mlx::core::GatherMM::is_equivalent()
{
  return 1;
}

void mlx::core::GatherMM::~GatherMM(mlx::core::GatherMM *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Broadcast::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Broadcast", 9);
}

void mlx::core::Broadcast::~Broadcast(mlx::core::Broadcast *this)
{
  void *v2;

  *(_QWORD *)this = off_251350CB0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_251350CB0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Ceil::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ceil", 4);
}

uint64_t mlx::core::Ceil::is_equivalent()
{
  return 1;
}

void mlx::core::Ceil::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425037A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Ceil::~Ceil(mlx::core::Ceil *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Concatenate::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Concatenate", 11);
}

void mlx::core::Concatenate::~Concatenate(mlx::core::Concatenate *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Copy::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Copy", 4);
}

uint64_t mlx::core::Copy::is_equivalent()
{
  return 1;
}

void mlx::core::Copy::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242503904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Copy::~Copy(mlx::core::Copy *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Cos::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cos", 3);
}

uint64_t mlx::core::Cos::is_equivalent()
{
  return 1;
}

void mlx::core::Cos::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242503A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Cos::~Cos(mlx::core::Cos *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Cosh::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cosh", 4);
}

uint64_t mlx::core::Cosh::is_equivalent()
{
  return 1;
}

void mlx::core::Cosh::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242503B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Cosh::~Cosh(mlx::core::Cosh *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::CustomVJP::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"CustomVJP", 9);
}

void mlx::core::CustomVJP::~CustomVJP(mlx::core::CustomVJP *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251350FE0;
  v1 = (char *)this + 24;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251350FE0;
  v1 = (char *)this + 24;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Depends::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Depends", 7);
}

void mlx::core::Depends::~Depends(mlx::core::Depends *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Divide::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Divide", 6);
}

uint64_t mlx::core::Divide::is_equivalent()
{
  return 1;
}

void mlx::core::Divide::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242503DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Divide::~Divide(mlx::core::Divide *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::DivMod::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"DivMod", 6);
}

uint64_t mlx::core::DivMod::is_equivalent()
{
  return 1;
}

void mlx::core::DivMod::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[3];
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = **a1;
  memset(v9, 0, sizeof(v9));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2);
  v5 = **a1;
  v11[0] = 0;
  v11[1] = 0;
  v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = operator new(0x30uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 6;
  v7 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)v9, (uint64_t)&v12, v6);
  do
  {
    v8 = (void *)v9[v7 + 3];
    if (v8)
    {
      v11[v7] = v8;
      operator delete(v8);
    }
    v7 -= 3;
  }
  while (v7 != -6);
}

void sub_242503F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  v18 = v17;
  *(_QWORD *)(v16 + 8) = v18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v20 = 0;
  while (1)
  {
    v21 = *(void **)((char *)&a15 + v20);
    if (v21)
    {
      *(uint64_t *)((char *)&a16 + v20) = (uint64_t)v21;
      operator delete(v21);
    }
    v20 -= 24;
    if (v20 == -48)
      _Unwind_Resume(a1);
  }
}

void mlx::core::DivMod::~DivMod(mlx::core::DivMod *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Select::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Select", 6);
}

uint64_t mlx::core::Select::is_equivalent()
{
  return 1;
}

void mlx::core::Select::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_24250409C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Select::~Select(mlx::core::Select *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Remainder::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Remainder", 9);
}

uint64_t mlx::core::Remainder::is_equivalent()
{
  return 1;
}

void mlx::core::Remainder::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425041D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::~Remainder(mlx::core::Remainder *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Equal::print(uint64_t a1, _QWORD *a2)
{
  if (*(_BYTE *)(a1 + 20))
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NaNEqual", 8);
  else
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Equal", 5);
}

uint64_t mlx::core::Equal::is_equivalent()
{
  return 1;
}

void mlx::core::Equal::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_24250432C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Equal::~Equal(mlx::core::Equal *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Erf::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Erf", 3);
}

uint64_t mlx::core::Erf::is_equivalent()
{
  return 1;
}

void mlx::core::Erf::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242504464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Erf::~Erf(mlx::core::Erf *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::ErfInv::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ErfInv", 6);
}

uint64_t mlx::core::ErfInv::is_equivalent()
{
  return 1;
}

void mlx::core::ErfInv::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_24250459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::~ErfInv(mlx::core::ErfInv *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Exp::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Exp", 3);
}

uint64_t mlx::core::Exp::is_equivalent()
{
  return 1;
}

void mlx::core::Exp::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425046D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Exp::~Exp(mlx::core::Exp *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Expm1::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Expm1", 5);
}

void mlx::core::Expm1::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242504804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::~Expm1(mlx::core::Expm1 *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Floor::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Floor", 5);
}

uint64_t mlx::core::Floor::is_equivalent()
{
  return 1;
}

void mlx::core::Floor::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_24250493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Floor::~Floor(mlx::core::Floor *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Full::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Full", 4);
}

uint64_t mlx::core::Full::is_equivalent()
{
  return 1;
}

void mlx::core::Full::~Full(mlx::core::Full *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Gather::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Gather", 6);
}

void mlx::core::Gather::~Gather(mlx::core::Gather *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_251351698;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_251351698;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Greater::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Greater", 7);
}

uint64_t mlx::core::Greater::is_equivalent()
{
  return 1;
}

void mlx::core::Greater::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242504B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Greater::~Greater(mlx::core::Greater *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::GreaterEqual::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"GreaterEqual", 12);
}

uint64_t mlx::core::GreaterEqual::is_equivalent()
{
  return 1;
}

void mlx::core::GreaterEqual::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242504C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::~GreaterEqual(mlx::core::GreaterEqual *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Less::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Less", 4);
}

uint64_t mlx::core::Less::is_equivalent()
{
  return 1;
}

void mlx::core::Less::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242504DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Less::~Less(mlx::core::Less *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::LessEqual::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LessEqual", 9);
}

uint64_t mlx::core::LessEqual::is_equivalent()
{
  return 1;
}

void mlx::core::LessEqual::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242504F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::~LessEqual(mlx::core::LessEqual *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Log::print(_QWORD *result, _QWORD *a2)
{
  int v2;

  v2 = *((_DWORD *)result + 5);
  switch(v2)
  {
    case 0:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log2", 4);
    case 1:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log10", 5);
    case 2:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log", 3);
  }
  return result;
}

uint64_t mlx::core::Log::is_equivalent()
{
  return 1;
}

void mlx::core::Log::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242505094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Log::~Log(mlx::core::Log *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Log1p::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log1p", 5);
}

void mlx::core::Log1p::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425051C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Log1p::~Log1p(mlx::core::Log1p *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::LogicalNot::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogicalNot", 10);
}

uint64_t mlx::core::LogicalNot::is_equivalent()
{
  return 1;
}

void mlx::core::LogicalNot::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425052FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogicalNot::~LogicalNot(mlx::core::LogicalNot *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::LogicalAnd::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogicalAnd", 10);
}

uint64_t mlx::core::LogicalAnd::is_equivalent()
{
  return 1;
}

void mlx::core::LogicalAnd::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242505434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::~LogicalAnd(mlx::core::LogicalAnd *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::LogicalOr::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogicalOr", 9);
}

uint64_t mlx::core::LogicalOr::is_equivalent()
{
  return 1;
}

void mlx::core::LogicalOr::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_24250556C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::~LogicalOr(mlx::core::LogicalOr *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::LogAddExp::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogAddExp", 9);
}

uint64_t mlx::core::LogAddExp::is_equivalent()
{
  return 1;
}

void mlx::core::LogAddExp::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425056A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::~LogAddExp(mlx::core::LogAddExp *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Maximum::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Maximum", 7);
}

uint64_t mlx::core::Maximum::is_equivalent()
{
  return 1;
}

void mlx::core::Maximum::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425057DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::~Maximum(mlx::core::Maximum *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Minimum::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Minimum", 7);
}

uint64_t mlx::core::Minimum::is_equivalent()
{
  return 1;
}

void mlx::core::Minimum::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242505914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::~Minimum(mlx::core::Minimum *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Multiply::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Multiply", 8);
}

uint64_t mlx::core::Multiply::is_equivalent()
{
  return 1;
}

void mlx::core::Multiply::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242505A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::~Multiply(mlx::core::Multiply *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Negative::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Negative", 8);
}

uint64_t mlx::core::Negative::is_equivalent()
{
  return 1;
}

void mlx::core::Negative::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242505B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Negative::~Negative(mlx::core::Negative *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::NotEqual::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NotEqual", 8);
}

uint64_t mlx::core::NotEqual::is_equivalent()
{
  return 1;
}

void mlx::core::NotEqual::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242505CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::~NotEqual(mlx::core::NotEqual *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::NumberOfElements::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NumberOfElements", 16);
}

void mlx::core::NumberOfElements::output_shapes(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  void *__p;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v4 = 0;
  v5 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v2 = operator new(0x18uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 3;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v6, v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_242505DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::NumberOfElements::~NumberOfElements(mlx::core::NumberOfElements *this)
{
  void *v2;

  *(_QWORD *)this = off_251351F18;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_251351F18;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Pad::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Pad", 3);
}

void mlx::core::Pad::~Pad(mlx::core::Pad *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_251351FA0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_251351FA0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Partition::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Partition", 9);
}

void mlx::core::Partition::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Partition::~Partition(mlx::core::Partition *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Power::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Power", 5);
}

uint64_t mlx::core::Power::is_equivalent()
{
  return 1;
}

void mlx::core::Power::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Power::~Power(mlx::core::Power *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::RandomBits::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"RandomBits", 10);
}

void mlx::core::RandomBits::~RandomBits(mlx::core::RandomBits *this)
{
  void *v2;

  *(_QWORD *)this = off_251352138;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_251352138;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Reshape::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Reshape", 7);
}

void mlx::core::Reshape::~Reshape(mlx::core::Reshape *this)
{
  void *v2;

  *(_QWORD *)this = off_2513521C0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_2513521C0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Round::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Round", 5);
}

uint64_t mlx::core::Round::is_equivalent()
{
  return 1;
}

void mlx::core::Round::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425063F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Round::~Round(mlx::core::Round *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Scan::print(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cum", 3);
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      v5 = "Max";
      goto LABEL_5;
    case 1:
      v5 = "Min";
      goto LABEL_5;
    case 2:
      v5 = "Sum";
LABEL_5:
      v6 = a2;
      v7 = 3;
      goto LABEL_7;
    case 3:
      v5 = "Prod";
      v6 = a2;
      v7 = 4;
LABEL_7:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5, v7);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::Scan::~Scan(mlx::core::Scan *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Scatter::print(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Scatter", 7);
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      v5 = " Max";
      goto LABEL_5;
    case 1:
      v5 = " Min";
      goto LABEL_5;
    case 2:
      v5 = " Sum";
LABEL_5:
      v6 = a2;
      v7 = 4;
      goto LABEL_7;
    case 3:
      v5 = " Prod";
      v6 = a2;
      v7 = 5;
LABEL_7:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5, v7);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::Scatter::~Scatter(mlx::core::Scatter *this)
{
  void *v2;

  *(_QWORD *)this = off_251352358;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_251352358;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Sigmoid::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sigmoid", 7);
}

uint64_t mlx::core::Sigmoid::is_equivalent()
{
  return 1;
}

void mlx::core::Sigmoid::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::~Sigmoid(mlx::core::Sigmoid *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Sign::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sign", 4);
}

uint64_t mlx::core::Sign::is_equivalent()
{
  return 1;
}

void mlx::core::Sign::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sign::~Sign(mlx::core::Sign *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Sin::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sin", 3);
}

uint64_t mlx::core::Sin::is_equivalent()
{
  return 1;
}

void mlx::core::Sin::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sin::~Sin(mlx::core::Sin *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Sinh::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sinh", 4);
}

uint64_t mlx::core::Sinh::is_equivalent()
{
  return 1;
}

void mlx::core::Sinh::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sinh::~Sinh(mlx::core::Sinh *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Slice::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Slice", 5);
}

void mlx::core::Slice::~Slice(mlx::core::Slice *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_251352600;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_251352600;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::SliceUpdate::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"SliceUpdate", 11);
}

void mlx::core::SliceUpdate::~SliceUpdate(mlx::core::SliceUpdate *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_251352688;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_251352688;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Sort::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sort", 4);
}

void mlx::core::Sort::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sort::~Sort(mlx::core::Sort *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Split::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Split", 5);
}

void mlx::core::Split::~Split(mlx::core::Split *this)
{
  void *v2;

  *(_QWORD *)this = &off_251352798;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_251352798;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Square::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Square", 6);
}

uint64_t mlx::core::Square::is_equivalent()
{
  return 1;
}

void mlx::core::Square::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242506F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Square::~Square(mlx::core::Square *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Sqrt::print(uint64_t a1, _QWORD *a2)
{
  if (*(_BYTE *)(a1 + 20))
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Rsqrt", 5);
  else
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sqrt", 4);
}

void mlx::core::Sqrt::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425070BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::~Sqrt(mlx::core::Sqrt *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::StopGradient::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"StopGradient", 12);
}

uint64_t mlx::core::StopGradient::is_equivalent()
{
  return 1;
}

void mlx::core::StopGradient::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_2425071F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::StopGradient::~StopGradient(mlx::core::StopGradient *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Subtract::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Subtract", 8);
}

uint64_t mlx::core::Subtract::is_equivalent()
{
  return 1;
}

void mlx::core::Subtract::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_24250732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::~Subtract(mlx::core::Subtract *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Tan::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Tan", 3);
}

uint64_t mlx::core::Tan::is_equivalent()
{
  return 1;
}

void mlx::core::Tan::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_242507464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Tan::~Tan(mlx::core::Tan *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Tanh::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Tanh", 4);
}

uint64_t mlx::core::Tanh::is_equivalent()
{
  return 1;
}

void mlx::core::Tanh::output_shapes(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_24250759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Tanh::~Tanh(mlx::core::Tanh *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Transpose::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Transpose", 9);
}

void mlx::core::Transpose::~Transpose(mlx::core::Transpose *this)
{
  void *v2;

  *(_QWORD *)this = off_251352B40;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_251352B40;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::QRF::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"QRF", 3);
}

void mlx::core::QRF::~QRF(mlx::core::QRF *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::SVD::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"SVD", 3);
}

void mlx::core::SVD::~SVD(mlx::core::SVD *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Inverse::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Inverse", 7);
}

void mlx::core::Inverse::~Inverse(mlx::core::Inverse *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *mlx::core::Cholesky::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cholesky", 8);
}

void mlx::core::Cholesky::~Cholesky(mlx::core::Cholesky *this)
{
  JUMPOUT(0x2426A82C4);
}

void sub_242507D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  char *v29;
  char *v31;
  uint64_t v32;

  v31 = a29;
  if (a29 == v29)
  {
    v32 = 4;
    v31 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_242507E64(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = mlx_vector_array_size(a1);
  v3 = result;
  if ((result & 0x8000000000000000) == 0)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v3)
      return result;
    v6 = MEMORY[0x24BEE4AF8];
    result = sub_2425A002C();
    v4 = 0;
    while (v3 != v4)
    {
      result = (uint64_t)mlx_vector_array_get(a1, v4);
      v5 = result;
      if (!result)
        goto LABEL_11;
      ++v4;
      type metadata accessor for MLXArray();
      *(_QWORD *)(swift_allocObject() + 16) = v5;
      sub_2425A0008();
      sub_2425A0038();
      sub_2425A0044();
      result = sub_2425A0014();
      if (v3 == v4)
        return v6;
    }
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_242507F54()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClosureCaptureState()
{
  return objc_opt_self();
}

BOOL sub_242507F98(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_242507FAC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_242507FBC(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

void type metadata accessor for mlx_array_dtype_()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_2571FC688)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_2571FC688);
  }
}

uint64_t MLXArray.deinit()
{
  uint64_t v0;

  mlx_free(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t MLXArray.__deallocating_deinit()
{
  uint64_t v0;

  mlx_free(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t MLXArray.itemSize.getter()
{
  uint64_t v0;

  return mlx_array_itemsize(*(_QWORD *)(v0 + 16));
}

uint64_t MLXArray.size.getter()
{
  uint64_t v0;

  return mlx_array_size(*(_QWORD *)(v0 + 16));
}

uint64_t MLXArray.count.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  mlx_array_ndim(v1);
  return (int)mlx_array_dim(v1, 0);
}

Swift::Int __swiftcall MLXArray.dim(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int result;
  BOOL v5;

  v3 = *(_QWORD *)(v1 + 16);
  result = mlx_array_ndim(v3);
  if ((a1 & 0x8000000000000000) == 0)
    goto LABEL_4;
  v5 = __OFADD__(a1, result);
  a1 += result;
  if (!v5)
  {
    if (a1 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
LABEL_7:
      __break(1u);
      goto LABEL_8;
    }
LABEL_4:
    if (a1 <= 0x7FFFFFFF)
      return (int)mlx_array_dim(v3, a1);
    goto LABEL_7;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t MLXArray.nbytes.getter()
{
  uint64_t v0;

  return mlx_array_nbytes(*(_QWORD *)(v0 + 16));
}

uint64_t MLXArray.ndim.getter()
{
  uint64_t v0;

  return mlx_array_ndim(*(_QWORD *)(v0 + 16));
}

uint64_t MLXArray.dtype.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t dtype;

  dtype = mlx_array_get_dtype(*(_QWORD *)(v1 + 16));
  return sub_242553C80(dtype, a1);
}

uint64_t MLXArray.shape.getter()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = mlx_array_ndim(*(_QWORD *)(v0 + 16));
  v2 = MEMORY[0x24BEE4AF8];
  if (v1 < 1)
    return v2;
  result = mlx_array_shape(*(_QWORD *)(v0 + 16));
  v4 = (int *)result;
  if (result)
  {
    sub_242509AE4(0, v1, 0);
    v5 = *(_QWORD *)(v2 + 16);
    do
    {
      v7 = *v4++;
      v6 = v7;
      v8 = *(_QWORD *)(v2 + 24);
      if (v5 >= v8 >> 1)
        sub_242509AE4(v8 > 1, v5 + 1, 1);
      *(_QWORD *)(v2 + 16) = v5 + 1;
      *(_QWORD *)(v2 + 8 * v5++ + 32) = v6;
      --v1;
    }
    while (v1);
    return v2;
  }
  __break(1u);
  return result;
}

int *MLXArray.shape2.getter()
{
  uint64_t v0;
  int *result;

  result = (int *)mlx_array_ndim(*(_QWORD *)(v0 + 16));
  if (result == (int *)2)
  {
    result = (int *)mlx_array_shape(*(_QWORD *)(v0 + 16));
    if (result)
      return (int *)*result;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

int *MLXArray.shape3.getter()
{
  uint64_t v0;
  int *result;

  result = (int *)mlx_array_ndim(*(_QWORD *)(v0 + 16));
  if (result == (int *)3)
  {
    result = (int *)mlx_array_shape(*(_QWORD *)(v0 + 16));
    if (result)
      return (int *)*result;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

int *MLXArray.shape4.getter()
{
  uint64_t v0;
  int *result;

  result = (int *)mlx_array_ndim(*(_QWORD *)(v0 + 16));
  if (result == (int *)4)
  {
    result = (int *)mlx_array_shape(*(_QWORD *)(v0 + 16));
    if (result)
      return (int *)*result;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.strides.getter()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = mlx_array_ndim(*(_QWORD *)(v0 + 16));
  v2 = MEMORY[0x24BEE4AF8];
  if (v1 < 1)
    return v2;
  result = mlx_array_strides(*(_QWORD *)(v0 + 16));
  v4 = (uint64_t *)result;
  if (result)
  {
    sub_242509AE4(0, v1, 0);
    v5 = *(_QWORD *)(v2 + 16);
    do
    {
      v7 = *v4++;
      v6 = v7;
      v8 = *(_QWORD *)(v2 + 24);
      if (v5 >= v8 >> 1)
        sub_242509AE4(v8 > 1, v5 + 1, 1);
      *(_QWORD *)(v2 + 16) = v5 + 1;
      *(_QWORD *)(v2 + 8 * v5++ + 32) = v6;
      --v1;
    }
    while (v1);
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.item<A>()(uint64_t a1, uint64_t a2)
{
  return MLXArray.item<A>(_:)(a1, a1, a2);
}

uint64_t MLXArray.item<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t, uint64_t);
  int v8;
  uint64_t dtype;
  int v10;
  uint64_t v11;
  int v12;
  mlx::core *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;

  mlx_array_eval(*(_QWORD *)(v3 + 16));
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16);
  v7(&v18, a2, a3);
  v8 = v18;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v3 + 16));
  sub_242553C80(dtype, &v20);
  v10 = v20;
  if (v8 != v20)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v7(&v18, a2, a3);
    v12 = v18;
    v13 = mlx_default_device();
    v14 = (uint64_t)v13;
    if (v13)
    {
      v15 = mlx_default_stream((uint64_t)v13);
      if (v15)
      {
        mlx_free(v14);
        mlx_free(v15);
        v16 = mlx_astype(v11, v12, v15);
        v6 = (uint64_t)v16;
        if (v16)
        {
          mlx_array_eval((uint64_t)v16);
          goto LABEL_6;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_6:
  if (swift_dynamicCastMetatype())
  {
    LOBYTE(v18) = mlx_array_item_BOOL(v6);
    result = swift_dynamicCast();
    if (v8 != v10)
      return mlx_free(v6);
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    LOBYTE(v18) = mlx_array_item_uint8(v6);
    result = swift_dynamicCast();
    if (v8 != v10)
      return mlx_free(v6);
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    LODWORD(v18) = mlx_array_item_uint32(v6);
    result = swift_dynamicCast();
    if (v8 != v10)
      return mlx_free(v6);
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    LOBYTE(v18) = mlx_array_item_int8(v6);
    result = swift_dynamicCast();
    if (v8 != v10)
      return mlx_free(v6);
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    LODWORD(v18) = mlx_array_item_int32(v6);
    result = swift_dynamicCast();
    if (v8 != v10)
      return mlx_free(v6);
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    v18 = mlx_array_item_int64(v6);
    result = swift_dynamicCast();
    if (v8 != v10)
      return mlx_free(v6);
    return result;
  }
  if (!swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype())
    {
      LODWORD(v18) = mlx_array_item_float32(v6);
      result = swift_dynamicCast();
      if (v8 != v10)
        return mlx_free(v6);
      return result;
    }
LABEL_34:
    v18 = 0;
    v19 = 0xE000000000000000;
    sub_24259FF84();
    swift_bridgeObjectRelease();
    v18 = 0xD000000000000018;
    v19 = 0x80000002425E4BA0;
    sub_2425A035C();
    sub_24259FB70();
    swift_bridgeObjectRelease();
    result = sub_2425A00E0();
    __break(1u);
    return result;
  }
  v18 = mlx_array_item_int64(v6);
  result = swift_dynamicCast();
  if (v8 != v10)
    return mlx_free(v6);
  return result;
}

Swift::Void __swiftcall MLXArray.eval()()
{
  uint64_t v0;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
}

_QWORD *MLXArray.asType(_:stream:)(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t dtype;
  _QWORD *result;
  _QWORD *v7;
  unsigned __int8 v8;

  v3 = *a1;
  v4 = *a2;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v2 + 16));
  sub_242553C80(dtype, &v8);
  if (v3 == v8)
  {
    swift_retain();
    return (_QWORD *)v2;
  }
  result = mlx_astype(*(_QWORD *)(v2 + 16), v3, *(_QWORD *)(v4 + 16));
  v7 = result;
  if (result)
  {
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v7;
    return (_QWORD *)v2;
  }
  __break(1u);
  return result;
}

_QWORD *MLXArray.asType<A>(_:stream:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v7, a3, a4);
  v6 = v4;
  return MLXArray.asType(_:stream:)((unsigned __int8 *)&v7, &v6);
}

uint64_t MLXArray.asArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void (*v8)(unint64_t *__return_ptr, uint64_t, uint64_t);
  int v9;
  uint64_t dtype;
  int v11;
  uint64_t v12;
  int v13;
  mlx::core *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v4 = v3;
  mlx_array_eval(*(_QWORD *)(v3 + 16));
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16);
  v8(&v33, a2, a3);
  v9 = v33;
  dtype = mlx_array_get_dtype(*(_QWORD *)(v3 + 16));
  sub_242553C80(dtype, &v32);
  v11 = v32;
  if (v9 != v32)
  {
    v12 = *(_QWORD *)(v3 + 16);
    v8(&v33, a2, a3);
    v13 = v33;
    v14 = mlx_default_device();
    v15 = (uint64_t)v14;
    if (!v14)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v16 = mlx_default_stream((uint64_t)v14);
    if (!v16)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    mlx_free(v15);
    mlx_free(v16);
    v17 = mlx_astype(v12, v13, v16);
    v7 = (uint64_t)v17;
    if (!v17)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    mlx_array_eval((uint64_t)v17);
  }
  if (swift_dynamicCastMetatype())
  {
    v18 = mlx_array_data_BOOL(v7);
    if (v18)
    {
      v33 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C0);
      sub_24259FA98();
      swift_dynamicCast();
      v19 = sub_242509064(v32, v4);
      if (v9 != v11)
        goto LABEL_36;
      return v19;
    }
    __break(1u);
    goto LABEL_39;
  }
  if (swift_dynamicCastMetatype())
  {
    v20 = mlx_array_data_uint8(v7);
    if (v20)
    {
      v33 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6B8);
      sub_24259FA98();
      swift_dynamicCast();
      v19 = sub_242509064(v32, v4);
      if (v9 != v11)
        goto LABEL_36;
      return v19;
    }
    goto LABEL_42;
  }
  if (swift_dynamicCastMetatype())
  {
    v21 = mlx_array_data_uint32(v7);
    if (v21)
    {
      v33 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6B0);
      sub_24259FA98();
      swift_dynamicCast();
      v19 = sub_242509064(v32, v4);
      if (v9 != v11)
        goto LABEL_36;
      return v19;
    }
    goto LABEL_43;
  }
  if (swift_dynamicCastMetatype())
  {
    v22 = mlx_array_data_int8(v7);
    if (v22)
    {
      v33 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6A8);
      sub_24259FA98();
      swift_dynamicCast();
      v19 = sub_242509064(v32, v4);
      if (v9 != v11)
        goto LABEL_36;
      return v19;
    }
    goto LABEL_44;
  }
  if (swift_dynamicCastMetatype())
  {
    v23 = mlx_array_data_int32(v7);
    if (v23)
    {
      v33 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6A0);
      sub_24259FA98();
      swift_dynamicCast();
      v19 = sub_242509064(v32, v4);
      if (v9 != v11)
        goto LABEL_36;
      return v19;
    }
    goto LABEL_45;
  }
  if (swift_dynamicCastMetatype())
  {
    v24 = mlx_array_data_int64(v7);
    if (v24)
    {
      v33 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC698);
      sub_24259FA98();
      swift_dynamicCast();
      v19 = sub_242509064(v32, v4);
      if (v9 != v11)
        goto LABEL_36;
      return v19;
    }
    goto LABEL_46;
  }
  if (swift_dynamicCastMetatype())
  {
    v25 = mlx_array_data_int64(v7);
    v26 = mlx_array_size(*(_QWORD *)(v4 + 16));
    MEMORY[0x24BDAC7A8](v26);
    v31[2] = a2;
    v31[3] = a3;
    v27 = sub_24259FD68();
    sub_2425090E0(MEMORY[0x24BEE1768], (uint64_t)sub_242509B48, (uint64_t)v31, v25, v26, MEMORY[0x24BEE4008], MEMORY[0x24BEE1768], MEMORY[0x24BEE4078], v27, MEMORY[0x24BEE40A8], v30);
    v19 = v33;
    if (v9 != v11)
      mlx_free(v7);
    return v19;
  }
  if (swift_dynamicCastMetatype())
  {
    v28 = mlx_array_data_float32(v7);
    if (v28)
    {
      v33 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC690);
      sub_24259FA98();
      swift_dynamicCast();
      v19 = sub_242509064(v32, v4);
      if (v9 != v11)
LABEL_36:
        mlx_free(v7);
      return v19;
    }
    goto LABEL_47;
  }
LABEL_48:
  v33 = 0;
  v34 = 0xE000000000000000;
  sub_24259FF84();
  swift_bridgeObjectRelease();
  v33 = 0xD000000000000018;
  v34 = 0x80000002425E4BA0;
  sub_2425A035C();
  sub_24259FB70();
  swift_bridgeObjectRelease();
  result = sub_2425A00E0();
  __break(1u);
  return result;
}

uint64_t sub_242509064(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  mlx_array_size(*(_QWORD *)(a2 + 16));
  sub_24259FABC();
  v2 = sub_24259FAC8();
  MEMORY[0x2426A87E0](MEMORY[0x24BEE09D8], v2);
  return sub_24259FD80();
}

uint64_t sub_2425090E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, char *);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];

  v13 = *(_QWORD *)(a8 - 8);
  v14 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v14);
  v24 = (char *)v29 - v23;
  if (v18)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72);
    v26 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
    if (v25 == v26)
      goto LABEL_10;
    v27 = v19 * v26;
    if ((unsigned __int128)(v19 * (__int128)v26) >> 64 == (v19 * v26) >> 63)
    {
      if (v25)
      {
        if (v25 != -1 || v27 != 0x8000000000000000)
        {
          v19 = v27 / v25;
LABEL_10:
          result = v22(v18, v19, v16);
          if (!v11)
            return result;
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  result = v22(0, 0, (char *)v29 - v23);
  v16 = v24;
  if (v11)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  return result;
}

void MLXArray.asData(noCopy:)()
{
  uint64_t v0;
  uint64_t dtype;
  char v2;

  mlx_array_eval(*(_QWORD *)(v0 + 16));
  dtype = mlx_array_get_dtype(*(_QWORD *)(v0 + 16));
  sub_242553C80(dtype, &v2);
  __asm { BR              X10 }
}

uint64_t sub_242509244()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  v2 = mlx_array_data_BOOL(*(_QWORD *)(v1 + 16));
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x242509254);
  }
  return sub_242509340(v2, v0 & 1, v1, sub_2425097F4);
}

uint64_t sub_242509340(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD);
  uint64_t v19;

  v8 = sub_24259F900();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if ((a2 & 1) != 0)
  {
    v13 = mlx_array_nbytes(v12);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDCDB98], v8);
    sub_24259F8F4();
    if (v13)
    {
      sub_24259F8E8();
      swift_allocObject();
      swift_retain();
      v14 = sub_24259F8AC();
      v15 = sub_24250B79C(v14, v13);
      swift_release();
    }
    else
    {
      v17 = (void (*)(uint64_t, _QWORD))sub_24259F8F4();
      v17(a1, 0);
      swift_release();
      swift_release();
      v15 = 0;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v16 = mlx_array_size(v12);
    return a4(a1, v16);
  }
  return v15;
}

uint64_t sub_2425094C8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v17;

  v6 = sub_24259F900();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  if ((a2 & 1) != 0)
  {
    v11 = mlx_array_nbytes(v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDCDB98], v6);
    sub_24259F8F4();
    if (v11)
    {
      sub_24259F8E8();
      swift_allocObject();
      swift_retain();
      v12 = sub_24259F8AC();
      v13 = sub_24250B79C(v12, v11);
      swift_release();
    }
    else
    {
      v15 = (void (*)(uint64_t, _QWORD))sub_24259F8F4();
      v15(a1, 0);
      swift_release();
      swift_release();
      v13 = 0;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v14 = mlx_array_size(v10);
    return sub_24250964C(a1, v14);
  }
  return v13;
}

uint64_t sub_24250964C(uint64_t __src, uint64_t a2)
{
  uint64_t v3;

  if (__src)
  {
    if ((unint64_t)(a2 - 0x1000000000000000) >> 61 == 7)
    {
      v3 = 8 * a2;
      if (8 * a2)
      {
        if (v3 <= 14)
        {
          return sub_24250B6DC((_BYTE *)__src, (_BYTE *)(__src + v3));
        }
        else
        {
          sub_24259F8E8();
          swift_allocObject();
          sub_24259F8B8();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            sub_24259F90C();
            __src = swift_allocObject();
            *(_QWORD *)(__src + 16) = 0;
            *(_QWORD *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 35;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

uint64_t sub_242509720(uint64_t __src, uint64_t a2)
{
  uint64_t v3;

  if (__src)
  {
    if ((unint64_t)(a2 - 0x2000000000000000) >> 62 == 3)
    {
      v3 = 4 * a2;
      if (4 * a2)
      {
        if (v3 <= 14)
        {
          return sub_24250B6DC((_BYTE *)__src, (_BYTE *)(__src + v3));
        }
        else
        {
          sub_24259F8E8();
          swift_allocObject();
          sub_24259F8B8();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            sub_24259F90C();
            __src = swift_allocObject();
            *(_QWORD *)(__src + 16) = 0;
            *(_QWORD *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 34;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

uint64_t sub_2425097F4(uint64_t __src, uint64_t a2)
{
  if (__src)
  {
    if (a2)
    {
      if (a2 <= 14)
      {
        return sub_24250B6DC((_BYTE *)__src, (_BYTE *)(__src + a2));
      }
      else
      {
        sub_24259F8E8();
        swift_allocObject();
        sub_24259F8B8();
        if ((unint64_t)a2 >= 0x7FFFFFFF)
        {
          sub_24259F90C();
          __src = swift_allocObject();
          *(_QWORD *)(__src + 16) = 0;
          *(_QWORD *)(__src + 24) = a2;
        }
        else
        {
          return a2 << 32;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return __src;
}

void MLXArray.realPart(stream:)()
{
  uint64_t v0;
  uint64_t dtype;
  char v2;

  dtype = mlx_array_get_dtype(*(_QWORD *)(v0 + 16));
  sub_242553C80(dtype, &v2);
  __break(1u);
}

uint64_t MLXArray.update(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result != *(_QWORD *)(v1 + 16))
  {
    mlx_retain(result);
    result = mlx_free(*(_QWORD *)(v1 + 16));
    *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t MLXArray.innerState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2425C4A80;
  *(_QWORD *)(v1 + 32) = v0;
  v3 = v1;
  sub_24259FCCC();
  swift_retain();
  return v3;
}

uint64_t sub_242509984()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571FC6C8);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2425C4A80;
  *(_QWORD *)(v2 + 32) = v1;
  v4 = v2;
  sub_24259FCCC();
  swift_retain();
  return v4;
}

uint64_t MLXArray.description.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = mlx_tostring(*(uint64_t (****)(_QWORD))(v0 + 16));
  v2 = result;
  if (result)
  {
    result = mlx_string_data(result);
    if (result)
    {
      v3 = sub_24259FB88();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_242509A58()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = mlx_tostring(*(uint64_t (****)(_QWORD))(*(_QWORD *)v0 + 16));
  v2 = result;
  if (result)
  {
    result = mlx_string_data(result);
    if (result)
    {
      v3 = sub_24259FB88();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

