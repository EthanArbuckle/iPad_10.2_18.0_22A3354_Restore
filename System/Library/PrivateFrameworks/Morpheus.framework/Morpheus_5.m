uint64_t mlx::core::`anonymous namespace'::copy<long long,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t *a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  float *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  float *v170;
  uint64_t *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  float *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  ldiv_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int *v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int *v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  ldiv_t v247;
  int *v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t *v255;
  uint64_t v256;
  int *v257;
  int v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int i;
  int v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  int *v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int j;
  int v277;
  int k;
  int v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  ldiv_t v293;
  int *v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  int *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t *v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  int *v319;
  int v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t *v330;
  uint64_t v331;
  int v332;
  int v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  ldiv_t v348;
  int *v349;
  int v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t *v356;
  uint64_t v357;
  int *v358;
  int v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  int m;
  int v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  int *v370;
  int v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  int n;
  int v378;
  int ii;
  int v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int *v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  ldiv_t v394;
  int *v395;
  int v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  int *v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  int v414;
  uint64_t *v415;
  uint64_t v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  int *v420;
  int v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  int v430;
  uint64_t *v431;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int *v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  ldiv_t v450;
  int v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t *v457;
  int v458;
  uint64_t v459;
  int *v460;
  int v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t *v467;
  int v468;
  uint64_t *v469;
  int v470;
  uint64_t v471;
  int *v472;
  int v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  int v480;
  uint64_t *v481;
  int v482;
  int v483;
  uint64_t *v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int *v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  ldiv_t v496;
  int v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  int *v506;
  int v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  int *v522;
  int v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  uint64_t *v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int *v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  ldiv_t v554;
  uint64_t v555;
  ldiv_t v556;
  int v557;
  int v558;
  uint64_t v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  _QWORD *v577;
  int v578;
  uint64_t v579;
  int v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  int *v594;
  int v595;
  int v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  int v621;
  uint64_t v622;
  int *v623;
  int v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  _QWORD *v650;
  int v651;
  uint64_t v652;
  int *v653;
  uint64_t *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  _QWORD *v678;
  int v679;
  uint64_t v680;
  uint64_t v681;
  int *v682;
  unint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t *v686;
  ldiv_t v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  int quot;
  ldiv_t v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  int v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  int v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  _QWORD *v716;
  uint64_t v717;
  int v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  int v726;
  int v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  _QWORD *v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  char *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  int *v750;
  uint64_t *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  ldiv_t v758;
  uint64_t v759;
  int v760;
  ldiv_t v761;
  int v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  int v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  int v774;
  int v775;
  _QWORD *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  int v781;
  _DWORD *v782;
  _QWORD *v783;
  uint64_t v784;
  int *v785;
  int v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  _DWORD *v801;
  _QWORD *v802;
  uint64_t v803;
  int *v804;
  int v805;
  int v806;
  uint64_t *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  int v824;
  _QWORD *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  _DWORD *v831;
  _QWORD *v832;
  uint64_t v833;
  int *v834;
  int v835;
  uint64_t *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  int v848;
  int v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  int v855;
  _QWORD *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  int v861;
  _DWORD *v862;
  _QWORD *v863;
  uint64_t v864;
  int *v865;
  uint64_t *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  int v891;
  _DWORD *v892;
  _QWORD *v893;
  uint64_t v894;
  uint64_t v895;
  int *v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t *v900;
  ldiv_t v901;
  uint64_t v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  ldiv_t v908;
  uint64_t v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  int v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  int v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  _QWORD *v930;
  uint64_t v931;
  int v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  int v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  int v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  _QWORD *v953;
  uint64_t v954;
  uint64_t v955;
  int v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  char *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  int *v964;
  uint64_t *v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  ldiv_t v972;
  uint64_t v973;
  int v974;
  ldiv_t v975;
  int v976;
  int v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  int v982;
  int v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  int v988;
  int v989;
  _QWORD *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  int v995;
  _DWORD *v996;
  _QWORD *v997;
  uint64_t v998;
  int *v999;
  int v1000;
  int v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int v1014;
  _DWORD *v1015;
  _QWORD *v1016;
  uint64_t v1017;
  int *v1018;
  int v1019;
  int v1020;
  uint64_t *v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  int v1038;
  _QWORD *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  int v1044;
  _DWORD *v1045;
  _QWORD *v1046;
  uint64_t v1047;
  int *v1048;
  int v1049;
  uint64_t *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  int v1062;
  int v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  int v1068;
  int v1069;
  _QWORD *v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int v1075;
  _DWORD *v1076;
  _QWORD *v1077;
  uint64_t v1078;
  int *v1079;
  uint64_t *v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  int v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  int v1093;
  int v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  int v1099;
  int v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  int v1105;
  _DWORD *v1106;
  _QWORD *v1107;
  char *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  int *v1113;
  uint64_t *v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  ldiv_t v1121;
  uint64_t v1122;
  ldiv_t v1123;
  int v1124;
  int v1125;
  int v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  int v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  int v1134;
  int v1135;
  _QWORD *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  _QWORD *v1141;
  uint64_t v1142;
  _QWORD *v1143;
  uint64_t v1144;
  int v1145;
  uint64_t v1146;
  int v1147;
  int v1148;
  uint64_t v1149;
  uint64_t *v1150;
  int v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  _QWORD *v1160;
  uint64_t v1161;
  _QWORD *v1162;
  uint64_t v1163;
  int v1164;
  uint64_t v1165;
  int *v1166;
  int v1167;
  int v1168;
  uint64_t v1169;
  uint64_t *v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  int v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  int v1183;
  int v1184;
  _QWORD *v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  _QWORD *v1190;
  uint64_t v1191;
  _QWORD *v1192;
  uint64_t v1193;
  int v1194;
  uint64_t v1195;
  int *v1196;
  uint64_t v1197;
  uint64_t *v1198;
  uint64_t v1199;
  uint64_t v1200;
  int v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  int v1206;
  int v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  int v1212;
  int v1213;
  _QWORD *v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  _QWORD *v1219;
  uint64_t v1220;
  uint64_t v1221;
  int v1222;
  uint64_t v1223;
  int *v1224;
  uint64_t v1225;
  uint64_t *v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  int v1231;
  int v1232;
  uint64_t v1233;
  int v1234;
  int v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  int v1240;
  int v1241;
  _QWORD *v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  _QWORD *v1247;
  uint64_t v1248;
  _QWORD *v1249;
  uint64_t v1250;
  int v1251;
  char *v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  int *v1257;
  uint64_t *v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  ldiv_t v1265;
  uint64_t v1266;
  ldiv_t v1267;
  int v1268;
  int v1269;
  int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  int v1275;
  int v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  int v1280;
  int v1281;
  _QWORD *v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  float *v1287;
  uint64_t *v1288;
  int v1289;
  uint64_t v1290;
  int v1291;
  int v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  int v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t *v1305;
  int v1306;
  uint64_t v1307;
  int *v1308;
  int v1309;
  int v1310;
  uint64_t v1311;
  uint64_t *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  int v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  int v1328;
  int v1329;
  _QWORD *v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  float *v1335;
  uint64_t *v1336;
  int v1337;
  uint64_t v1338;
  int *v1339;
  int v1340;
  uint64_t *v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  int v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  int v1356;
  int v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  int v1362;
  int v1363;
  _QWORD *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  float *v1369;
  uint64_t *v1370;
  int v1371;
  uint64_t v1372;
  int *v1373;
  uint64_t *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  int v1381;
  int v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  int v1387;
  int v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  int v1393;
  int v1394;
  _QWORD *v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  float *v1400;
  uint64_t *v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  unint64_t v1424;
  unint64_t v1425;
  unint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  unint64_t v1431;
  unint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  int v1475;
  int v1476;
  uint64_t v1477;
  uint64_t v1478;
  int v1479;
  uint64_t v1480;
  int v1481;
  int v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  int v1489;
  int v1490;
  int v1491;
  int v1492;
  int v1493;
  int v1494;
  uint64_t v1495;
  uint64_t v1496;
  int v1497;
  int v1498;
  uint64_t v1499;
  int v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  _QWORD *v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  _QWORD *v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  int v1552;
  uint64_t v1553;
  uint64_t v1554;
  int v1555;
  uint64_t v1556;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  int v1567;
  uint64_t v1568;
  int v1569;
  int v1570;
  uint64_t v1571;
  int v1572;
  uint64_t v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  int v1579;
  int v1580;
  int v1581;
  int v1582;
  int v1583;
  int v1584;
  int v1585;

  v8 = (uint64_t *)*a2;
  v12 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v13 = v8[6];
          if (v13)
            result = (uint64_t)memset((void *)v8[19], **(_QWORD **)(*(_QWORD *)result + 152) != 0, v13);
          break;
        case 1:
          v32 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v32)
          {
            v33 = *(uint64_t **)(*(_QWORD *)result + 152);
            v34 = (BOOL *)v8[19];
            v35 = 8 * v32;
            do
            {
              v36 = *v33++;
              *v34++ = v36 != 0;
              v35 -= 8;
            }
            while (v35);
          }
          break;
        case 2:
          v37 = *a7;
          v38 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v39 = **a4;
              if ((int)v39 >= 1)
              {
                v40 = (BOOL *)v8[19];
                v41 = (_QWORD *)(*(_QWORD *)(v38 + 152) + 8 * v37);
                v42 = 8 * **a5;
                do
                {
                  *v40++ = *v41 != 0;
                  v41 = (_QWORD *)((char *)v41 + v42);
                  --v39;
                }
                while (v39);
              }
              break;
            case 2:
              v194 = **a4;
              if (v194 >= 1)
              {
                v195 = 0;
                v196 = 0;
                v197 = *(_QWORD *)(v38 + 152);
                v198 = v8[19];
                v199 = (*a4)[1];
                v200 = (*a5)[1];
                v201 = **a5 - v200 * v199;
                do
                {
                  v202 = v199;
                  if ((int)v199 >= 1)
                  {
                    do
                    {
                      result = *(_QWORD *)(v197 + 8 * v37) != 0;
                      *(_BYTE *)(v198 + v196++) = result;
                      v37 += v200;
                      --v202;
                    }
                    while (v202);
                  }
                  v37 += v201;
                  ++v195;
                }
                while (v195 != v194);
              }
              break;
            case 3:
              v203 = *a4;
              v204 = **a4;
              if (v204 >= 1)
              {
                v205 = 0;
                result = 0;
                v206 = *(_QWORD *)(v38 + 152);
                v207 = v8[19];
                v208 = v203[1];
                v209 = *a5;
                v210 = (*a5)[1];
                v211 = **a5 - v210 * v208;
                do
                {
                  if ((int)v208 < 1)
                  {
                    v218 = result;
                  }
                  else
                  {
                    v212 = 0;
                    v213 = v203[2];
                    v214 = *a5;
                    v215 = v210 - v209[2] * v213;
                    do
                    {
                      if ((int)v213 < 1)
                      {
                        v218 = result;
                      }
                      else
                      {
                        v216 = v214[2];
                        v217 = v213;
                        do
                        {
                          v218 = result + 1;
                          *(_BYTE *)(v207 + result) = *(_QWORD *)(v206 + 8 * v37) != 0;
                          v37 += v216;
                          ++result;
                          --v217;
                        }
                        while (v217);
                      }
                      v37 += v215;
                      ++v212;
                      result = v218;
                    }
                    while (v212 != (_DWORD)v208);
                  }
                  v37 += v211;
                  ++v205;
                  result = v218;
                }
                while (v205 != v204);
              }
              break;
            case 4:
              v219 = *a4;
              v220 = **a4;
              if (v220 >= 1)
              {
                v221 = 0;
                result = 0;
                v222 = *(_QWORD *)(v38 + 152);
                v223 = v8[19];
                v224 = v219[1];
                v225 = *a5;
                v226 = (*a5)[1];
                v227 = **a5 - v226 * v224;
                do
                {
                  if ((int)v224 < 1)
                  {
                    v238 = result;
                  }
                  else
                  {
                    v228 = 0;
                    v229 = v219[2];
                    v230 = *a5;
                    v231 = v226 - v225[2] * v229;
                    do
                    {
                      if ((int)v229 < 1)
                      {
                        v238 = result;
                      }
                      else
                      {
                        v232 = 0;
                        v233 = v219[3];
                        v234 = *a5;
                        v235 = v230[2] - v230[3] * v233;
                        do
                        {
                          if ((int)v233 < 1)
                          {
                            v238 = result;
                          }
                          else
                          {
                            v236 = v234[3];
                            v237 = v233;
                            do
                            {
                              v238 = result + 1;
                              *(_BYTE *)(v223 + result) = *(_QWORD *)(v222 + 8 * v37) != 0;
                              v37 += v236;
                              ++result;
                              --v237;
                            }
                            while (v237);
                          }
                          v37 += v235;
                          ++v232;
                          result = v238;
                        }
                        while (v232 != (_DWORD)v229);
                      }
                      v37 += v231;
                      ++v228;
                      result = v238;
                    }
                    while (v228 != (_DWORD)v224);
                  }
                  v37 += v227;
                  ++v221;
                  result = v238;
                }
                while (v221 != v220);
              }
              break;
            default:
              v184 = v8[6];
              if (v184)
              {
                v185 = 0;
                v186 = *(_QWORD *)(v38 + 152) + 8 * v37;
                v187 = v8[19];
                v188 = *a4;
                v189 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v190 = *a5;
                do
                {
                  v191 = 0;
                  if ((v189 & 0x80000000) == 0)
                  {
                    v192 = v189;
                    LODWORD(result) = v185;
                    do
                    {
                      v193 = ldiv((int)result, v188[v192]);
                      result = v193.quot;
                      v191 += v190[v192--] * v193.rem;
                    }
                    while (v192 != -1);
                  }
                  *(_BYTE *)(v187 + v185++) = *(_QWORD *)(v186 + 8 * v191) != 0;
                }
                while (v185 != v184);
              }
              break;
          }
          break;
        case 3:
          v1433 = *a7;
          v43 = *a8;
          v44 = *(_QWORD **)result;
          v45 = v44[1] - *v44;
          switch(v45 >> 2)
          {
            case 1:
              v46 = (v45 << 30) - 0x100000000;
              v47 = *(int *)((char *)*a4 + (v46 >> 30));
              if (v47 >= 1)
              {
                v48 = v46 >> 29;
                v49 = *(uint64_t *)((char *)*a5 + v48);
                v50 = *(_QWORD *)(*a6 + v48);
                v51 = (BOOL *)(v8[19] + v43);
                v52 = (_QWORD *)(v44[19] + 8 * v1433);
                v53 = 8 * v49;
                do
                {
                  *v51 = *v52 != 0;
                  v51 += v50;
                  v52 = (_QWORD *)((char *)v52 + v53);
                  --v47;
                }
                while (v47);
              }
              break;
            case 2:
              v579 = (v45 << 30) - 0x200000000;
              v580 = *(int *)((char *)*a4 + (v579 >> 30));
              if (v580 >= 1)
              {
                v581 = 0;
                v582 = v579 >> 29;
                v583 = *(uint64_t *)((char *)*a5 + v582);
                v584 = *(_QWORD *)(*a6 + v582);
                v585 = (v45 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v585 >> 29));
                v586 = *(_QWORD *)(*a6 + (v585 >> 29));
                v587 = *(int *)((char *)*a4 + (v585 >> 30));
                v588 = 8 * v1433;
                v589 = 8 * v583;
                v590 = 8 * result;
                do
                {
                  if (v587 >= 1)
                  {
                    v591 = v8[19];
                    result = v44[19] + v588;
                    v592 = v587;
                    do
                    {
                      *(_BYTE *)(v591 + v43) = *(_QWORD *)result != 0;
                      v591 += v586;
                      result += v590;
                      --v592;
                    }
                    while (v592);
                  }
                  v43 += v584;
                  ++v581;
                  v588 += v589;
                }
                while (v581 != v580);
              }
              break;
            case 3:
              v593 = (v45 << 30) - 0x300000000;
              v594 = *a4;
              v595 = *(int *)((char *)*a4 + (v593 >> 30));
              if (v595 >= 1)
              {
                v596 = 0;
                v597 = v45 << 30;
                v598 = *a5;
                v599 = v593 >> 29;
                v600 = *(uint64_t *)((char *)*a5 + (v593 >> 29));
                v601 = *a6;
                v602 = *(_QWORD *)(*a6 + v599);
                v603 = v597 - 0x200000000;
                v604 = (v597 - 0x200000000) >> 29;
                v605 = v597 - 0x100000000;
                v606 = *(uint64_t *)((char *)*a5 + v604);
                v607 = *(_QWORD *)(*a6 + v604);
                v608 = *(int *)((char *)v594 + (v603 >> 30));
                v609 = v605 >> 32;
                v610 = 8 * v1433;
                result = 8 * v600;
                v611 = 8 * v606;
                do
                {
                  if (v608 >= 1)
                  {
                    v612 = 0;
                    v613 = *(_QWORD *)(v601 + 8 * v609);
                    v614 = v594[v609];
                    v615 = *a2;
                    v616 = 8 * v598[v609];
                    v617 = v610;
                    v618 = v43;
                    do
                    {
                      if (v614 >= 1)
                      {
                        v619 = *(_QWORD *)(v615 + 152);
                        v620 = (_QWORD *)(v44[19] + v617);
                        v621 = v614;
                        do
                        {
                          *(_BYTE *)(v619 + v618) = *v620 != 0;
                          v619 += v613;
                          v620 = (_QWORD *)((char *)v620 + v616);
                          --v621;
                        }
                        while (v621);
                      }
                      v618 += v607;
                      ++v612;
                      v617 += v611;
                    }
                    while (v612 != v608);
                  }
                  v43 += v602;
                  ++v596;
                  v610 += result;
                }
                while (v596 != v595);
              }
              break;
            case 4:
              v622 = (v45 << 30) - 0x400000000;
              v623 = *a4;
              v1576 = *(int *)((char *)*a4 + (v622 >> 30));
              if (v1576 >= 1)
              {
                v624 = 0;
                v625 = v45 << 30;
                v626 = *a5;
                v627 = v622 >> 29;
                v628 = *(uint64_t *)((char *)*a5 + v627);
                v629 = *a6;
                v1559 = *(_QWORD *)(*a6 + v627);
                v630 = (v45 << 30) - 0x300000000;
                v631 = *(_QWORD *)(*a6 + (v630 >> 29));
                v632 = *(int *)((char *)v623 + (v630 >> 30));
                v1525 = (v625 - 0x200000000) >> 32;
                v633 = (v625 - 0x100000000) >> 32;
                result = 8 * v1433;
                v634 = 8 * *(uint64_t *)((char *)*a5 + (v630 >> 29));
                do
                {
                  v635 = v43;
                  if (v632 >= 1)
                  {
                    v636 = 0;
                    v637 = *(_QWORD *)(v629 + 8 * v1525);
                    v638 = v623[v1525];
                    v639 = 8 * v626[v1525];
                    v640 = result;
                    v641 = v43;
                    do
                    {
                      if (v638 >= 1)
                      {
                        v642 = 0;
                        v643 = *(_QWORD *)(v629 + 8 * v633);
                        v644 = v623[v633];
                        v645 = *a2;
                        v646 = 8 * v626[v633];
                        v647 = v640;
                        v648 = v641;
                        do
                        {
                          if (v644 >= 1)
                          {
                            v649 = *(_QWORD *)(v645 + 152);
                            v650 = (_QWORD *)(v44[19] + v647);
                            v651 = v644;
                            do
                            {
                              *(_BYTE *)(v649 + v648) = *v650 != 0;
                              v649 += v643;
                              v650 = (_QWORD *)((char *)v650 + v646);
                              --v651;
                            }
                            while (v651);
                          }
                          v648 += v637;
                          ++v642;
                          v647 += v639;
                        }
                        while (v642 != v638);
                      }
                      v641 += v631;
                      ++v636;
                      v640 += v634;
                    }
                    while (v636 != v632);
                  }
                  v43 = v635 + v1559;
                  ++v624;
                  result += 8 * v628;
                }
                while (v624 != v1576);
              }
              break;
            case 5:
              v652 = (v45 << 30) - 0x500000000;
              v653 = *a4;
              v1490 = *(int *)((char *)*a4 + (v652 >> 30));
              if (v1490 >= 1)
              {
                v1500 = 0;
                v654 = *a5;
                v655 = v652 >> 29;
                v656 = *a6;
                v1480 = *(_QWORD *)(*a6 + v655);
                v657 = (v45 << 30) - 0x400000000;
                v1560 = *(_QWORD *)(*a6 + (v657 >> 29));
                v1577 = *(int *)((char *)v653 + (v657 >> 30));
                v1460 = ((v45 << 30) - 0x300000000) >> 32;
                v1526 = ((v45 << 30) - 0x200000000) >> 32;
                result = ((v45 << 30) - 0x100000000) >> 32;
                v1512 = 8 * v1433;
                v1470 = 8 * *(uint64_t *)((char *)*a5 + v655);
                v1542 = 8 * *(uint64_t *)((char *)*a5 + (v657 >> 29));
                do
                {
                  v1444 = v43;
                  if (v1577 >= 1)
                  {
                    v658 = 0;
                    v659 = *(_QWORD *)(v656 + 8 * v1460);
                    v660 = v653[v1460];
                    v661 = 8 * v654[v1460];
                    v662 = v1512;
                    v663 = v43;
                    do
                    {
                      if (v660 >= 1)
                      {
                        v664 = 0;
                        v665 = *(_QWORD *)(v656 + 8 * v1526);
                        v666 = v653[v1526];
                        v667 = 8 * v654[v1526];
                        v668 = v662;
                        v669 = v663;
                        do
                        {
                          if (v666 >= 1)
                          {
                            v670 = 0;
                            v671 = *(_QWORD *)(v656 + 8 * result);
                            v672 = v653[result];
                            v673 = *a2;
                            v674 = 8 * v654[result];
                            v675 = v668;
                            v676 = v669;
                            do
                            {
                              if (v672 >= 1)
                              {
                                v677 = *(_QWORD *)(v673 + 152);
                                v678 = (_QWORD *)(v44[19] + v675);
                                v679 = v672;
                                do
                                {
                                  *(_BYTE *)(v677 + v676) = *v678 != 0;
                                  v677 += v671;
                                  v678 = (_QWORD *)((char *)v678 + v674);
                                  --v679;
                                }
                                while (v679);
                              }
                              v676 += v665;
                              ++v670;
                              v675 += v667;
                            }
                            while (v670 != v666);
                          }
                          v669 += v659;
                          ++v664;
                          v668 += v661;
                        }
                        while (v664 != v660);
                      }
                      v663 += v1560;
                      ++v658;
                      v662 += v1542;
                    }
                    while (v658 != v1577);
                  }
                  v43 = v1444 + v1480;
                  v1512 += v1470;
                  ++v1500;
                }
                while (v1500 != v1490);
              }
              break;
            default:
              v542 = (char *)a4[1];
              LODWORD(v543) = 1;
              v544 = -20;
              do
              {
                v543 = *(int *)&v542[v544] * (uint64_t)(int)v543;
                v544 += 4;
              }
              while (v544);
              v1431 = v44[6];
              if (v1431)
              {
                v545 = 0;
                v546 = (v45 << 30) - 0x500000000;
                v547 = *a4;
                v1408 = *v8;
                v1418 = ((unint64_t)(v542 - (char *)*a4) >> 2) - 1;
                v548 = *a5;
                v549 = *a6;
                v1469 = *(_QWORD *)(*a6 + (v546 >> 29));
                v1479 = *(int *)((char *)*a4 + (v546 >> 30));
                v1413 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1403 = ((v45 << 30) - 0x400000000) >> 32;
                v1450 = ((v45 << 30) - 0x300000000) >> 32;
                v1524 = ((v45 << 30) - 0x200000000) >> 32;
                v550 = ((v45 << 30) - 0x100000000) >> 32;
                v1459 = 8 * *(uint64_t *)((char *)*a5 + (v546 >> 29));
                v1443 = *a8;
                v1423 = v543;
                do
                {
                  v551 = v1418;
                  if ((v1418 & 0x80000000) != 0)
                  {
                    v552 = 0;
                    v553 = v1413;
                  }
                  else
                  {
                    v552 = 0;
                    LODWORD(result) = v545;
                    v553 = v1413;
                    do
                    {
                      v554 = ldiv((int)result, v547[v551]);
                      result = v554.quot;
                      v552 += v548[v551--] * v554.rem;
                    }
                    while (v551 != -1);
                  }
                  v1439 = v545;
                  v555 = 0;
                  if ((v553 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v545;
                    do
                    {
                      v556 = ldiv((int)result, *(int *)(v1408 + 4 * v553));
                      result = v556.quot;
                      v555 += *(_QWORD *)(v549 + 8 * v553--) * v556.rem;
                    }
                    while (v553 != -1);
                  }
                  if (v1479 >= 1)
                  {
                    v557 = 0;
                    v1558 = *(_QWORD *)(v549 + 8 * v1403);
                    v1575 = v547[v1403];
                    v1499 = 8 * (v552 + v1433);
                    v1511 = v555 + v1443;
                    v1541 = 8 * v548[v1403];
                    do
                    {
                      v1489 = v557;
                      if (v1575 >= 1)
                      {
                        v558 = 0;
                        v559 = *(_QWORD *)(v549 + 8 * v1450);
                        v560 = v547[v1450];
                        v561 = 8 * v548[v1450];
                        v563 = v1499;
                        v562 = v1511;
                        do
                        {
                          if (v560 >= 1)
                          {
                            v564 = 0;
                            v565 = *(_QWORD *)(v549 + 8 * v1524);
                            v566 = v547[v1524];
                            v567 = 8 * v548[v1524];
                            result = v563;
                            v568 = v562;
                            do
                            {
                              if (v566 >= 1)
                              {
                                v569 = 0;
                                v570 = *(_QWORD *)(v549 + 8 * v550);
                                v571 = v547[v550];
                                v572 = *a2;
                                v573 = 8 * v548[v550];
                                v574 = result;
                                v575 = v568;
                                do
                                {
                                  if (v571 >= 1)
                                  {
                                    v576 = *(_QWORD *)(v572 + 152);
                                    v577 = (_QWORD *)(v44[19] + v574);
                                    v578 = v571;
                                    do
                                    {
                                      *(_BYTE *)(v576 + v575) = *v577 != 0;
                                      v576 += v570;
                                      v577 = (_QWORD *)((char *)v577 + v573);
                                      --v578;
                                    }
                                    while (v578);
                                  }
                                  v575 += v565;
                                  ++v569;
                                  v574 += v567;
                                }
                                while (v569 != v566);
                              }
                              v568 += v559;
                              ++v564;
                              result += v561;
                            }
                            while (v564 != v560);
                          }
                          v562 += v1558;
                          ++v558;
                          v563 += v1541;
                        }
                        while (v558 != v1575);
                      }
                      v1511 += v1469;
                      v557 = v1489 + 1;
                      v1499 += v1459;
                    }
                    while (v1489 + 1 != v1479);
                  }
                  v545 += v1423;
                }
                while (v1431 > v1439 + v1423);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v14 = 0;
            v15 = **(_BYTE **)(*(_QWORD *)result + 152);
            v16 = v8[19];
            do
              *(_BYTE *)(v16 + v14++) = v15;
            while (*(_QWORD *)(*a2 + 48) > v14);
          }
          break;
        case 1:
          v54 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v54)
          {
            v55 = *(uint64_t **)(*(_QWORD *)result + 152);
            v56 = (_BYTE *)v8[19];
            v57 = 8 * v54;
            do
            {
              v58 = *v55++;
              *v56++ = v58;
              v57 -= 8;
            }
            while (v57);
          }
          break;
        case 2:
          v59 = *a7;
          v60 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v61 = 0;
                v62 = *(_QWORD *)(v60 + 152);
                v63 = v8[19];
                do
                {
                  *(_BYTE *)(v63 + v61) = *(_QWORD *)(v62 + 8 * v59);
                  v59 += **a5;
                  ++v61;
                }
                while (**a4 > (int)v61);
              }
              break;
            case 2:
              v248 = *a4;
              v249 = **a4;
              if (v249 >= 1)
              {
                v250 = 0;
                v251 = 0;
                v252 = *(_QWORD *)(v60 + 152);
                v253 = v8[19];
                do
                {
                  v254 = v248[1];
                  if (v254 < 1)
                  {
                    v255 = *a5;
                    v256 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v253 + v251 + result) = *(_QWORD *)(v252 + 8 * v59);
                      v255 = *a5;
                      v256 = (*a5)[1];
                      v59 += v256;
                      v248 = *a4;
                      v254 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v254);
                    v249 = *v248;
                    v251 += result;
                  }
                  v59 = *v255 + v59 - v256 * v254;
                  ++v250;
                }
                while (v250 < v249);
              }
              break;
            case 3:
              v257 = *a4;
              v258 = **a4;
              if (v258 >= 1)
              {
                v259 = 0;
                v260 = 0;
                v261 = *(_QWORD *)(v60 + 152);
                v262 = v8[19];
                do
                {
                  v263 = v257[1];
                  if (v263 < 1)
                  {
                    v267 = *a5;
                    v268 = (*a5)[1];
                  }
                  else
                  {
                    for (i = 0; i < v263; ++i)
                    {
                      v265 = v257[2];
                      if (v265 < 1)
                      {
                        v267 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v266 = 0;
                        do
                        {
                          *(_BYTE *)(v262 + v260 + v266) = *(_QWORD *)(v261 + 8 * v59);
                          v267 = *a5;
                          result = (*a5)[2];
                          v59 += result;
                          v257 = *a4;
                          v265 = (*a4)[2];
                          ++v266;
                        }
                        while ((int)v266 < v265);
                        v260 += v266;
                      }
                      v268 = v267[1];
                      v59 = v268 + v59 - result * v265;
                      v263 = v257[1];
                    }
                    v258 = *v257;
                  }
                  v59 = *v267 + v59 - v268 * v263;
                  ++v259;
                }
                while (v259 < v258);
              }
              break;
            case 4:
              v269 = *a4;
              v270 = **a4;
              if (v270 >= 1)
              {
                v271 = 0;
                v272 = 0;
                v273 = *(_QWORD *)(v60 + 152);
                v274 = v8[19];
                do
                {
                  v275 = v269[1];
                  if (v275 < 1)
                  {
                    v281 = *a5;
                    v283 = (*a5)[1];
                  }
                  else
                  {
                    for (j = 0; j < v275; ++j)
                    {
                      v277 = v269[2];
                      if (v277 < 1)
                      {
                        v281 = *a5;
                        v282 = (*a5)[2];
                      }
                      else
                      {
                        for (k = 0; k < v277; ++k)
                        {
                          v279 = v269[3];
                          if (v279 < 1)
                          {
                            v281 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v280 = 0;
                            do
                            {
                              *(_BYTE *)(v274 + v272 + v280) = *(_QWORD *)(v273 + 8 * v59);
                              v281 = *a5;
                              result = (*a5)[3];
                              v59 += result;
                              v269 = *a4;
                              v279 = (*a4)[3];
                              ++v280;
                            }
                            while ((int)v280 < v279);
                            v272 += v280;
                          }
                          v282 = v281[2];
                          v59 = v282 + v59 - result * v279;
                          v277 = v269[2];
                        }
                      }
                      v283 = v281[1];
                      v59 = v283 + v59 - v282 * v277;
                      v275 = v269[1];
                    }
                    v270 = *v269;
                  }
                  v59 = *v281 + v59 - v283 * v275;
                  ++v271;
                }
                while (v271 < v270);
              }
              break;
            default:
              if (v8[6])
              {
                v239 = 0;
                v240 = *(_QWORD *)(v60 + 152) + 8 * v59;
                v241 = v8[19];
                do
                {
                  v242 = *a4;
                  v243 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v244 = 0;
                  v245 = (v243 - 1);
                  if ((int)v243 - 1 >= 0)
                  {
                    v246 = *a5;
                    LODWORD(result) = v239;
                    do
                    {
                      v247 = ldiv((int)result, v242[v245]);
                      result = v247.quot;
                      v244 += v246[v245--] * v247.rem;
                    }
                    while (v245 != -1);
                  }
                  *(_BYTE *)(v241 + v239++) = *(_QWORD *)(v240 + 8 * v244);
                }
                while (v239 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v1574 = *a7;
          v64 = *a8;
          v65 = *(_QWORD **)result;
          v66 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v66 >> 2)
          {
            case 1:
              v67 = (v66 << 30) - 0x100000000;
              v68 = *(int *)((char *)*a4 + (v67 >> 30));
              if (v68 >= 1)
              {
                v69 = v67 >> 29;
                v70 = *(uint64_t *)((char *)*a5 + v69);
                v71 = *(_QWORD *)(*a6 + v69);
                v72 = (_BYTE *)(v8[19] + v64);
                v73 = (_QWORD *)(v65[19] + 8 * v1574);
                v74 = 8 * v70;
                do
                {
                  *v72 = *v73;
                  v72 += v71;
                  v73 = (_QWORD *)((char *)v73 + v74);
                  --v68;
                }
                while (v68);
              }
              break;
            case 2:
              v702 = (v66 << 30) - 0x200000000;
              v703 = *(int *)((char *)*a4 + (v702 >> 30));
              if (v703 >= 1)
              {
                v704 = 0;
                v705 = v702 >> 29;
                v706 = *(uint64_t *)((char *)*a5 + v705);
                v707 = *(_QWORD *)(*a6 + v705);
                v708 = 8 * v1574;
                v709 = 8 * v706;
                do
                {
                  v710 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v711 = *(int *)((char *)*a4 + (v710 >> 30));
                  if (v711 >= 1)
                  {
                    v712 = v710 >> 29;
                    v713 = *(uint64_t *)((char *)*a5 + v712);
                    v714 = *(_QWORD *)(*a6 + v712);
                    v715 = *(_QWORD *)(*a2 + 152);
                    v716 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v708);
                    result = 8 * v713;
                    do
                    {
                      *(_BYTE *)(v715 + v64) = *v716;
                      v715 += v714;
                      v716 = (_QWORD *)((char *)v716 + result);
                      --v711;
                    }
                    while (v711);
                  }
                  v64 += v707;
                  ++v704;
                  v708 += v709;
                }
                while (v704 != v703);
              }
              break;
            case 3:
              v717 = (v66 << 30) - 0x300000000;
              v718 = *(int *)((char *)*a4 + (v717 >> 30));
              if (v718 >= 1)
              {
                v719 = 0;
                v720 = v717 >> 29;
                v721 = *(uint64_t *)((char *)*a5 + v720);
                v722 = *(_QWORD *)(*a6 + v720);
                v723 = 8 * v1574;
                v724 = 8 * v721;
                do
                {
                  v725 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v726 = *(int *)((char *)*a4 + (v725 >> 30));
                  if (v726 >= 1)
                  {
                    v727 = 0;
                    v728 = v725 >> 29;
                    v729 = *(uint64_t *)((char *)*a5 + v728);
                    v730 = *(_QWORD *)(*a6 + v728);
                    result = 8 * v729;
                    v731 = v723;
                    v732 = v64;
                    do
                    {
                      v733 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v734 = *(int *)((char *)*a4 + (v733 >> 30));
                      if (v734 >= 1)
                      {
                        v735 = v733 >> 29;
                        v736 = *(uint64_t *)((char *)*a5 + v735);
                        v737 = *(_QWORD *)(*a6 + v735);
                        v738 = *(_QWORD *)(*a2 + 152);
                        v739 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v731);
                        v740 = 8 * v736;
                        do
                        {
                          *(_BYTE *)(v738 + v732) = *v739;
                          v738 += v737;
                          v739 = (_QWORD *)((char *)v739 + v740);
                          --v734;
                        }
                        while (v734);
                      }
                      v732 += v730;
                      ++v727;
                      v731 += result;
                    }
                    while (v727 != v726);
                  }
                  v64 += v722;
                  ++v719;
                  v723 += v724;
                }
                while (v719 != v718);
              }
              break;
            case 4:
              goto LABEL_556;
            case 5:
              v741 = (v66 << 30) - 0x500000000;
              v742 = *(int *)((char *)*a4 + (v741 >> 30));
              if (v742 >= 1)
              {
                v743 = v741 >> 29;
                v744 = *(uint64_t *)((char *)*a5 + v743);
                v745 = *(_QWORD *)(*a6 + v743);
                do
                {
                  v1574 += v744;
                  v64 += v745;
                  --v742;
                }
                while (v742);
              }
              break;
            default:
              LODWORD(v680) = 1;
              v681 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v680 = a4[1][v681++] * (uint64_t)(int)v680;
              while (v681 * 4);
              if (v65[6])
              {
                result = 0;
                v1501 = *a8;
                v1513 = v680;
                do
                {
                  v682 = *a4;
                  v683 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v684 = (v683 - 1);
                  v1527 = v65;
                  v1543 = result;
                  v685 = 0;
                  if ((int)v683 - 1 >= 0)
                  {
                    v686 = *a5;
                    do
                    {
                      v687 = ldiv((int)result, v682[v684]);
                      LODWORD(result) = v687.quot;
                      v685 += v686[v684--] * v687.rem;
                    }
                    while (v684 != -1);
                  }
                  v688 = *(_QWORD *)*a2;
                  v689 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v688) >> 2;
                  v690 = *a6;
                  v691 = 0;
                  v692 = (v689 - 1);
                  if ((int)v689 - 1 >= 0)
                  {
                    quot = v1543;
                    do
                    {
                      v694 = ldiv(quot, *(int *)(v688 + 4 * v692));
                      quot = v694.quot;
                      v691 += *(_QWORD *)(v690 + 8 * v692--) * v694.rem;
                    }
                    while (v692 != -1);
                  }
                  v65 = v1527;
                  v695 = ((v65[1] - *v65) << 30) - 0x500000000;
                  v696 = *(int *)((char *)v682 + (v695 >> 30));
                  if (v696 >= 1)
                  {
                    v697 = v685 + v1574;
                    v698 = v695 >> 29;
                    v699 = *(uint64_t *)((char *)*a5 + v698);
                    v700 = *(_QWORD *)(v690 + v698);
                    v701 = v691 + v1501;
                    do
                    {
                      v697 += v699;
                      v701 += v700;
                      --v696;
                    }
                    while (v696);
                    v65 = *(_QWORD **)v12;
                  }
                  result = v1543 + v1513;
                }
                while (v65[6] > (unint64_t)(v1543 + v1513));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v17 = v8[6];
          if (v17)
          {
            v18 = **(_DWORD **)(*(_QWORD *)result + 152);
            v19 = (_DWORD *)v8[19];
            do
            {
              *v19++ = v18;
              --v17;
            }
            while (v17);
          }
          break;
        case 1:
          v75 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v75)
          {
            v76 = *(uint64_t **)(*(_QWORD *)result + 152);
            v77 = (_DWORD *)v8[19];
            v78 = 8 * v75;
            do
            {
              v79 = *v76++;
              *v77++ = v79;
              v78 -= 8;
            }
            while (v78);
          }
          break;
        case 2:
          v80 = *a7;
          v81 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v82 = *a4;
              if (**a4 >= 1)
              {
                v83 = 0;
                v84 = *(_QWORD *)(v81 + 152);
                v85 = v8[19];
                v86 = **a5;
                v87 = (_QWORD *)(v84 + 8 * v80);
                do
                {
                  *(_DWORD *)(v85 + 4 * v83) = *v87;
                  v87 += v86;
                  ++v83;
                }
                while (*v82 > (int)v83);
              }
              break;
            case 2:
              v294 = *a4;
              v295 = **a4;
              if (v295 >= 1)
              {
                v296 = 0;
                v297 = 0;
                v298 = *(_QWORD *)(v81 + 152);
                v299 = v8[19];
                v300 = **a5;
                v301 = (*a5)[1];
                v302 = v294[1];
                do
                {
                  if (v302 >= 1)
                  {
                    v303 = 0;
                    do
                    {
                      *(_DWORD *)(v299 + 4 * v297 + 4 * v303) = *(_QWORD *)(v298 + 8 * v80);
                      v80 += v301;
                      v302 = v294[1];
                      ++v303;
                    }
                    while ((int)v303 < v302);
                    v295 = *v294;
                    v297 += v303;
                  }
                  result = v302;
                  v80 = v80 + v300 - v301 * v302;
                  ++v296;
                }
                while (v296 < v295);
              }
              break;
            case 3:
              v304 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v305 = 0;
                v306 = 0;
                v307 = *(_QWORD *)(v81 + 152);
                v308 = v8[19];
                v309 = *a5;
                v310 = **a5;
                v311 = (*a5)[1];
                v312 = v304[1];
                do
                {
                  if (v312 >= 1)
                  {
                    v313 = 0;
                    v314 = *a5;
                    v315 = v309[2];
                    v316 = v304[2];
                    do
                    {
                      if (v316 >= 1)
                      {
                        v317 = 0;
                        v318 = v314[2];
                        do
                        {
                          *(_DWORD *)(v308 + 4 * v306 + 4 * v317) = *(_QWORD *)(v307 + 8 * v80);
                          v80 += v318;
                          v316 = v304[2];
                          ++v317;
                        }
                        while ((int)v317 < v316);
                        v312 = v304[1];
                        v306 += v317;
                      }
                      v80 = v80 + v311 - v315 * v316;
                      ++v313;
                    }
                    while (v313 < v312);
                    result = *v304;
                  }
                  v80 = v80 + v310 - v311 * v312;
                  ++v305;
                }
                while (v305 < (int)result);
              }
              break;
            case 4:
              v319 = *a4;
              v320 = **a4;
              if (v320 >= 1)
              {
                v321 = 0;
                v322 = 0;
                v323 = *(_QWORD *)(v81 + 152);
                v324 = v8[19];
                v325 = *a5;
                v326 = **a5;
                v327 = (*a5)[1];
                v328 = v319[1];
                do
                {
                  if (v328 >= 1)
                  {
                    v329 = 0;
                    v330 = *a5;
                    v331 = v325[2];
                    v332 = v319[2];
                    do
                    {
                      if (v332 >= 1)
                      {
                        v333 = 0;
                        v334 = *a5;
                        v335 = v330[2];
                        v336 = v330[3];
                        v337 = v319[3];
                        do
                        {
                          if (v337 >= 1)
                          {
                            v338 = 0;
                            v339 = v334[3];
                            do
                            {
                              *(_DWORD *)(v324 + 4 * v322 + 4 * v338) = *(_QWORD *)(v323 + 8 * v80);
                              v80 += v339;
                              v337 = v319[3];
                              ++v338;
                            }
                            while ((int)v338 < v337);
                            v332 = v319[2];
                            v322 += v338;
                          }
                          v80 = v80 + v335 - v336 * v337;
                          ++v333;
                        }
                        while (v333 < v332);
                        v328 = v319[1];
                      }
                      v80 = v80 + v327 - v331 * v332;
                      ++v329;
                    }
                    while (v329 < v328);
                    v320 = *v319;
                  }
                  result = v328;
                  v80 = v80 + v326 - v327 * v328;
                  ++v321;
                }
                while (v321 < v320);
              }
              break;
            default:
              v284 = v8[6];
              if (v284)
              {
                v285 = 0;
                v286 = *(_QWORD *)(v81 + 152) + 8 * v80;
                v287 = v8[19];
                v288 = *a4;
                v289 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v290 = *a5;
                do
                {
                  v291 = 0;
                  if ((v289 & 0x80000000) == 0)
                  {
                    v292 = v289;
                    LODWORD(result) = v285;
                    do
                    {
                      v293 = ldiv((int)result, v288[v292]);
                      result = v293.quot;
                      v291 += v290[v292--] * v293.rem;
                    }
                    while (v292 != -1);
                  }
                  *(_DWORD *)(v287 + 4 * v285++) = *(_QWORD *)(v286 + 8 * v291);
                }
                while (v285 != v284);
              }
              break;
          }
          break;
        case 3:
          v1428 = *a8;
          v1434 = *a7;
          v88 = *(_QWORD **)result;
          v89 = v88[1] - *v88;
          switch(v89 >> 2)
          {
            case 1:
              v90 = (v89 << 30) - 0x100000000;
              v91 = *(int *)((char *)*a4 + (v90 >> 30));
              if (v91 >= 1)
              {
                v92 = v90 >> 29;
                v93 = *(uint64_t *)((char *)*a5 + v92);
                v94 = *(_QWORD *)(*a6 + v92);
                v95 = (_DWORD *)(v8[19] + 4 * v1428);
                v96 = (_QWORD *)(v88[19] + 8 * v1434);
                v97 = 4 * v94;
                v98 = 8 * v93;
                do
                {
                  *v95 = *v96;
                  v95 = (_DWORD *)((char *)v95 + v97);
                  v96 = (_QWORD *)((char *)v96 + v98);
                  --v91;
                }
                while (v91);
              }
              break;
            case 2:
              v784 = (v89 << 30) - 0x200000000;
              v785 = *a4;
              v786 = *(int *)((char *)*a4 + (v784 >> 30));
              if (v786 >= 1)
              {
                v787 = 0;
                v788 = v784 >> 29;
                v789 = *(uint64_t *)((char *)*a5 + v788);
                v790 = *(_QWORD *)(*a6 + v788);
                v791 = (v89 << 30) - 0x100000000;
                v792 = *(uint64_t *)((char *)*a5 + (v791 >> 29));
                v793 = *(_QWORD *)(*a6 + (v791 >> 29));
                v794 = v791 >> 32;
                v795 = 4 * v1428;
                v796 = 4 * v790;
                v797 = 4 * v793;
                v798 = 8 * v1434;
                v799 = 8 * v789;
                result = 8 * v792;
                do
                {
                  v800 = v785[v794];
                  if (v800 >= 1)
                  {
                    v801 = (_DWORD *)(v8[19] + v795);
                    v802 = (_QWORD *)(v88[19] + v798);
                    do
                    {
                      *v801 = *v802;
                      v801 = (_DWORD *)((char *)v801 + v797);
                      v802 = (_QWORD *)((char *)v802 + result);
                      --v800;
                    }
                    while (v800);
                  }
                  ++v787;
                  v795 += v796;
                  v798 += v799;
                }
                while (v787 != v786);
              }
              break;
            case 3:
              v803 = (v89 << 30) - 0x300000000;
              v804 = *a4;
              v805 = *(int *)((char *)*a4 + (v803 >> 30));
              if (v805 >= 1)
              {
                v806 = 0;
                v807 = *a5;
                v808 = v803 >> 29;
                v809 = *(uint64_t *)((char *)*a5 + (v803 >> 29));
                v810 = *a6;
                v811 = *(_QWORD *)(*a6 + v808);
                v812 = v89 << 30;
                v813 = (v89 << 30) - 0x200000000;
                v814 = v813 >> 32;
                v813 >>= 29;
                v815 = *(uint64_t *)((char *)*a5 + v813);
                v816 = *(_QWORD *)(*a6 + v813);
                v817 = (v812 - 0x100000000) >> 32;
                v818 = 4 * v1428;
                v819 = 4 * v811;
                v820 = 4 * v816;
                result = 8 * v1434;
                v821 = 8 * v809;
                v822 = 8 * v815;
                do
                {
                  v823 = v804[v814];
                  if (v823 >= 1)
                  {
                    v824 = 0;
                    v825 = (_QWORD *)*a2;
                    v826 = 4 * *(_QWORD *)(v810 + 8 * v817);
                    v827 = 8 * v807[v817];
                    v828 = result;
                    v829 = v818;
                    do
                    {
                      v830 = v804[v817];
                      if (v830 >= 1)
                      {
                        v831 = (_DWORD *)(v825[19] + v829);
                        v832 = (_QWORD *)(v88[19] + v828);
                        do
                        {
                          *v831 = *v832;
                          v831 = (_DWORD *)((char *)v831 + v826);
                          v832 = (_QWORD *)((char *)v832 + v827);
                          --v830;
                        }
                        while (v830);
                      }
                      ++v824;
                      v829 += v820;
                      v828 += v822;
                    }
                    while (v824 != v823);
                  }
                  ++v806;
                  v818 += v819;
                  result += v821;
                }
                while (v806 != v805);
              }
              break;
            case 4:
              v833 = (v89 << 30) - 0x400000000;
              v834 = *a4;
              v1579 = *(int *)((char *)*a4 + (v833 >> 30));
              if (v1579 >= 1)
              {
                v835 = 0;
                v836 = *a5;
                v837 = v833 >> 29;
                v838 = v89 << 30;
                v839 = *a6;
                v1562 = (v838 - 0x300000000) >> 32;
                v840 = (v838 - 0x300000000) >> 29;
                v841 = *(uint64_t *)((char *)*a5 + v840);
                v842 = *(_QWORD *)(*a6 + v840);
                v843 = (v838 - 0x200000000) >> 32;
                v844 = (v838 - 0x100000000) >> 32;
                v845 = 4 * v1428;
                v1545 = 4 * *(_QWORD *)(*a6 + v837);
                result = 4 * v842;
                v846 = 8 * v1434;
                v1529 = 8 * *(uint64_t *)((char *)*a5 + v837);
                v847 = 8 * v841;
                do
                {
                  v848 = v834[v1562];
                  if (v848 >= 1)
                  {
                    v849 = 0;
                    v850 = 4 * *(_QWORD *)(v839 + 8 * v843);
                    v851 = 8 * v836[v843];
                    v852 = v846;
                    v853 = v845;
                    do
                    {
                      v854 = v834[v843];
                      if (v854 >= 1)
                      {
                        v855 = 0;
                        v856 = (_QWORD *)*a2;
                        v857 = 4 * *(_QWORD *)(v839 + 8 * v844);
                        v858 = 8 * v836[v844];
                        v859 = v852;
                        v860 = v853;
                        do
                        {
                          v861 = v834[v844];
                          if (v861 >= 1)
                          {
                            v862 = (_DWORD *)(v856[19] + v860);
                            v863 = (_QWORD *)(v88[19] + v859);
                            do
                            {
                              *v862 = *v863;
                              v862 = (_DWORD *)((char *)v862 + v857);
                              v863 = (_QWORD *)((char *)v863 + v858);
                              --v861;
                            }
                            while (v861);
                          }
                          ++v855;
                          v860 += v850;
                          v859 += v851;
                        }
                        while (v855 != v854);
                      }
                      ++v849;
                      v853 += result;
                      v852 += v847;
                    }
                    while (v849 != v848);
                  }
                  ++v835;
                  v845 += v1545;
                  v846 += v1529;
                }
                while (v835 != v1579);
              }
              break;
            case 5:
              v864 = (v89 << 30) - 0x500000000;
              v865 = *a4;
              v1482 = *(int *)((char *)*a4 + (v864 >> 30));
              if (v1482 >= 1)
              {
                v1492 = 0;
                v866 = *a5;
                v867 = v864 >> 29;
                v868 = *a6;
                v869 = v89 << 30;
                v870 = (v869 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v870);
                v1472 = (v869 - 0x400000000) >> 32;
                v871 = *(_QWORD *)(*a6 + v870);
                v1563 = (v869 - 0x300000000) >> 32;
                v872 = (v869 - 0x200000000) >> 32;
                v873 = (v869 - 0x100000000) >> 32;
                v1515 = 4 * v1428;
                v1462 = 4 * *(_QWORD *)(*a6 + v867);
                v1546 = 4 * v871;
                v1503 = 8 * v1434;
                v1452 = 8 * *(uint64_t *)((char *)*a5 + v867);
                v1530 = 8 * result;
                do
                {
                  v1580 = v865[v1472];
                  if (v1580 >= 1)
                  {
                    v874 = 0;
                    v875 = 4 * *(_QWORD *)(v868 + 8 * v1563);
                    v876 = 8 * v866[v1563];
                    v877 = v1503;
                    v878 = v1515;
                    do
                    {
                      v879 = v865[v1563];
                      if (v879 >= 1)
                      {
                        v880 = 0;
                        v881 = 4 * *(_QWORD *)(v868 + 8 * v872);
                        v882 = 8 * v866[v872];
                        v883 = v877;
                        v884 = v878;
                        do
                        {
                          v885 = v865[v872];
                          if (v885 >= 1)
                          {
                            v886 = 0;
                            result = *a2;
                            v887 = 4 * *(_QWORD *)(v868 + 8 * v873);
                            v888 = 8 * v866[v873];
                            v889 = v883;
                            v890 = v884;
                            do
                            {
                              v891 = v865[v873];
                              if (v891 >= 1)
                              {
                                v892 = (_DWORD *)(*(_QWORD *)(result + 152) + v890);
                                v893 = (_QWORD *)(v88[19] + v889);
                                do
                                {
                                  *v892 = *v893;
                                  v892 = (_DWORD *)((char *)v892 + v887);
                                  v893 = (_QWORD *)((char *)v893 + v888);
                                  --v891;
                                }
                                while (v891);
                              }
                              ++v886;
                              v890 += v881;
                              v889 += v882;
                            }
                            while (v886 != v885);
                          }
                          ++v880;
                          v884 += v875;
                          v883 += v876;
                        }
                        while (v880 != v879);
                      }
                      ++v874;
                      v878 += v1546;
                      v877 += v1530;
                    }
                    while (v874 != v1580);
                  }
                  v1515 += v1462;
                  v1503 += v1452;
                  ++v1492;
                }
                while (v1492 != v1482);
              }
              break;
            default:
              v746 = (char *)a4[1];
              LODWORD(v747) = 1;
              v748 = -20;
              do
              {
                v747 = *(int *)&v746[v748] * (uint64_t)(int)v747;
                v748 += 4;
              }
              while (v748);
              v1424 = v88[6];
              if (v1424)
              {
                result = 0;
                v749 = (v89 << 30) - 0x500000000;
                v750 = *a4;
                v1461 = *v8;
                v751 = *a5;
                v1409 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1414 = ((unint64_t)(v746 - (char *)*a4) >> 2) - 1;
                v1404 = v749 >> 32;
                v752 = *a6;
                v1471 = ((v89 << 30) - 0x400000000) >> 32;
                v1561 = ((v89 << 30) - 0x300000000) >> 32;
                v753 = ((v89 << 30) - 0x200000000) >> 32;
                v754 = ((v89 << 30) - 0x100000000) >> 32;
                v1445 = 8 * *(uint64_t *)((char *)*a5 + (v749 >> 29));
                v1451 = 4 * *(_QWORD *)(*a6 + (v749 >> 29));
                v1419 = v747;
                do
                {
                  v755 = v1414;
                  v1440 = result;
                  v756 = 0;
                  if ((v1414 & 0x80000000) != 0)
                  {
                    v757 = v1409;
                  }
                  else
                  {
                    v757 = v1409;
                    do
                    {
                      v758 = ldiv((int)result, v750[v755]);
                      LODWORD(result) = v758.quot;
                      v756 += v751[v755--] * v758.rem;
                    }
                    while (v755 != -1);
                  }
                  v759 = 0;
                  if ((v757 & 0x80000000) == 0)
                  {
                    v760 = v1440;
                    do
                    {
                      v761 = ldiv(v760, *(int *)(v1461 + 4 * v757));
                      v760 = v761.quot;
                      v759 += *(_QWORD *)(v752 + 8 * v757--) * v761.rem;
                    }
                    while (v757 != -1);
                  }
                  v1481 = v750[v1404];
                  if (v1481 >= 1)
                  {
                    v762 = 0;
                    v1514 = 4 * (v759 + v1428);
                    v1544 = 4 * *(_QWORD *)(v752 + 8 * v1471);
                    v1502 = 8 * (v756 + v1434);
                    v1528 = 8 * v751[v1471];
                    do
                    {
                      v1491 = v762;
                      v1578 = v750[v1471];
                      if (v1578 >= 1)
                      {
                        v763 = 0;
                        v764 = 4 * *(_QWORD *)(v752 + 8 * v1561);
                        v765 = 8 * v751[v1561];
                        v767 = v1502;
                        v766 = v1514;
                        do
                        {
                          v768 = v750[v1561];
                          if (v768 >= 1)
                          {
                            v769 = 0;
                            v770 = 4 * *(_QWORD *)(v752 + 8 * v753);
                            v771 = 8 * v751[v753];
                            v772 = v767;
                            v773 = v766;
                            do
                            {
                              v774 = v750[v753];
                              if (v774 >= 1)
                              {
                                v775 = 0;
                                v776 = (_QWORD *)*a2;
                                v777 = 4 * *(_QWORD *)(v752 + 8 * v754);
                                v778 = 8 * v751[v754];
                                v779 = v772;
                                v780 = v773;
                                do
                                {
                                  v781 = v750[v754];
                                  if (v781 >= 1)
                                  {
                                    v782 = (_DWORD *)(v776[19] + v780);
                                    v783 = (_QWORD *)(v88[19] + v779);
                                    do
                                    {
                                      *v782 = *v783;
                                      v782 = (_DWORD *)((char *)v782 + v777);
                                      v783 = (_QWORD *)((char *)v783 + v778);
                                      --v781;
                                    }
                                    while (v781);
                                  }
                                  ++v775;
                                  v780 += v770;
                                  v779 += v771;
                                }
                                while (v775 != v774);
                              }
                              ++v769;
                              v773 += v764;
                              v772 += v765;
                            }
                            while (v769 != v768);
                          }
                          ++v763;
                          v766 += v1544;
                          v767 += v1528;
                        }
                        while (v763 != v1578);
                      }
                      v762 = v1491 + 1;
                      v1514 += v1451;
                      v1502 += v1445;
                    }
                    while (v1491 + 1 != v1481);
                  }
                  result = v1440 + v1419;
                }
                while (v1424 > v1440 + v1419);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v20 = 0;
            v21 = **(_BYTE **)(*(_QWORD *)result + 152);
            v22 = v8[19];
            do
              *(_BYTE *)(v22 + v20++) = v21;
            while (*(_QWORD *)(*a2 + 48) > v20);
          }
          break;
        case 1:
          v99 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v99)
          {
            v100 = *(uint64_t **)(*(_QWORD *)result + 152);
            v101 = (_BYTE *)v8[19];
            v102 = 8 * v99;
            do
            {
              v103 = *v100++;
              *v101++ = v103;
              v102 -= 8;
            }
            while (v102);
          }
          break;
        case 2:
          v104 = *a7;
          v105 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v106 = 0;
                v107 = *(_QWORD *)(v105 + 152);
                v108 = v8[19];
                do
                {
                  *(_BYTE *)(v108 + v106) = *(_QWORD *)(v107 + 8 * v104);
                  v104 += **a5;
                  ++v106;
                }
                while (**a4 > (int)v106);
              }
              break;
            case 2:
              v349 = *a4;
              v350 = **a4;
              if (v350 >= 1)
              {
                v351 = 0;
                v352 = 0;
                v353 = *(_QWORD *)(v105 + 152);
                v354 = v8[19];
                do
                {
                  v355 = v349[1];
                  if (v355 < 1)
                  {
                    v356 = *a5;
                    v357 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v354 + v352 + result) = *(_QWORD *)(v353 + 8 * v104);
                      v356 = *a5;
                      v357 = (*a5)[1];
                      v104 += v357;
                      v349 = *a4;
                      v355 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v355);
                    v350 = *v349;
                    v352 += result;
                  }
                  v104 = *v356 + v104 - v357 * v355;
                  ++v351;
                }
                while (v351 < v350);
              }
              break;
            case 3:
              v358 = *a4;
              v359 = **a4;
              if (v359 >= 1)
              {
                v360 = 0;
                v361 = 0;
                v362 = *(_QWORD *)(v105 + 152);
                v363 = v8[19];
                do
                {
                  v364 = v358[1];
                  if (v364 < 1)
                  {
                    v368 = *a5;
                    v369 = (*a5)[1];
                  }
                  else
                  {
                    for (m = 0; m < v364; ++m)
                    {
                      v366 = v358[2];
                      if (v366 < 1)
                      {
                        v368 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v367 = 0;
                        do
                        {
                          *(_BYTE *)(v363 + v361 + v367) = *(_QWORD *)(v362 + 8 * v104);
                          v368 = *a5;
                          result = (*a5)[2];
                          v104 += result;
                          v358 = *a4;
                          v366 = (*a4)[2];
                          ++v367;
                        }
                        while ((int)v367 < v366);
                        v361 += v367;
                      }
                      v369 = v368[1];
                      v104 = v369 + v104 - result * v366;
                      v364 = v358[1];
                    }
                    v359 = *v358;
                  }
                  v104 = *v368 + v104 - v369 * v364;
                  ++v360;
                }
                while (v360 < v359);
              }
              break;
            case 4:
              v370 = *a4;
              v371 = **a4;
              if (v371 >= 1)
              {
                v372 = 0;
                v373 = 0;
                v374 = *(_QWORD *)(v105 + 152);
                v375 = v8[19];
                do
                {
                  v376 = v370[1];
                  if (v376 < 1)
                  {
                    v382 = *a5;
                    v384 = (*a5)[1];
                  }
                  else
                  {
                    for (n = 0; n < v376; ++n)
                    {
                      v378 = v370[2];
                      if (v378 < 1)
                      {
                        v382 = *a5;
                        v383 = (*a5)[2];
                      }
                      else
                      {
                        for (ii = 0; ii < v378; ++ii)
                        {
                          v380 = v370[3];
                          if (v380 < 1)
                          {
                            v382 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v381 = 0;
                            do
                            {
                              *(_BYTE *)(v375 + v373 + v381) = *(_QWORD *)(v374 + 8 * v104);
                              v382 = *a5;
                              result = (*a5)[3];
                              v104 += result;
                              v370 = *a4;
                              v380 = (*a4)[3];
                              ++v381;
                            }
                            while ((int)v381 < v380);
                            v373 += v381;
                          }
                          v383 = v382[2];
                          v104 = v383 + v104 - result * v380;
                          v378 = v370[2];
                        }
                      }
                      v384 = v382[1];
                      v104 = v384 + v104 - v383 * v378;
                      v376 = v370[1];
                    }
                    v371 = *v370;
                  }
                  v104 = *v382 + v104 - v384 * v376;
                  ++v372;
                }
                while (v372 < v371);
              }
              break;
            default:
              if (v8[6])
              {
                v340 = 0;
                v341 = *(_QWORD *)(v105 + 152) + 8 * v104;
                v342 = v8[19];
                do
                {
                  v343 = *a4;
                  v344 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v345 = 0;
                  v346 = (v344 - 1);
                  if ((int)v344 - 1 >= 0)
                  {
                    v347 = *a5;
                    LODWORD(result) = v340;
                    do
                    {
                      v348 = ldiv((int)result, v343[v346]);
                      result = v348.quot;
                      v345 += v347[v346--] * v348.rem;
                    }
                    while (v346 != -1);
                  }
                  *(_BYTE *)(v342 + v340++) = *(_QWORD *)(v341 + 8 * v345);
                }
                while (v340 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v1574 = *a7;
          v109 = *a8;
          v110 = *(_QWORD **)result;
          v111 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v111 >> 2)
          {
            case 1:
              v112 = (v111 << 30) - 0x100000000;
              v113 = *(int *)((char *)*a4 + (v112 >> 30));
              if (v113 >= 1)
              {
                v114 = v112 >> 29;
                v115 = *(uint64_t *)((char *)*a5 + v114);
                v116 = *(_QWORD *)(*a6 + v114);
                v117 = (_BYTE *)(v8[19] + v109);
                v118 = (_QWORD *)(v110[19] + 8 * v1574);
                v119 = 8 * v115;
                do
                {
                  *v117 = *v118;
                  v117 += v116;
                  v118 = (_QWORD *)((char *)v118 + v119);
                  --v113;
                }
                while (v113);
              }
              break;
            case 2:
              v916 = (v111 << 30) - 0x200000000;
              v917 = *(int *)((char *)*a4 + (v916 >> 30));
              if (v917 >= 1)
              {
                v918 = 0;
                v919 = v916 >> 29;
                v920 = *(uint64_t *)((char *)*a5 + v919);
                v921 = *(_QWORD *)(*a6 + v919);
                v922 = 8 * v1574;
                v923 = 8 * v920;
                do
                {
                  v924 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v925 = *(int *)((char *)*a4 + (v924 >> 30));
                  if (v925 >= 1)
                  {
                    v926 = v924 >> 29;
                    v927 = *(uint64_t *)((char *)*a5 + v926);
                    v928 = *(_QWORD *)(*a6 + v926);
                    v929 = *(_QWORD *)(*a2 + 152);
                    v930 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v922);
                    result = 8 * v927;
                    do
                    {
                      *(_BYTE *)(v929 + v109) = *v930;
                      v929 += v928;
                      v930 = (_QWORD *)((char *)v930 + result);
                      --v925;
                    }
                    while (v925);
                  }
                  v109 += v921;
                  ++v918;
                  v922 += v923;
                }
                while (v918 != v917);
              }
              break;
            case 3:
              v931 = (v111 << 30) - 0x300000000;
              v932 = *(int *)((char *)*a4 + (v931 >> 30));
              if (v932 >= 1)
              {
                v933 = 0;
                v934 = v931 >> 29;
                v935 = *(uint64_t *)((char *)*a5 + v934);
                v936 = *(_QWORD *)(*a6 + v934);
                v937 = 8 * v1574;
                v938 = 8 * v935;
                do
                {
                  v939 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v940 = *(int *)((char *)*a4 + (v939 >> 30));
                  if (v940 >= 1)
                  {
                    v941 = 0;
                    v942 = v939 >> 29;
                    v943 = *(uint64_t *)((char *)*a5 + v942);
                    v944 = *(_QWORD *)(*a6 + v942);
                    result = 8 * v943;
                    v945 = v937;
                    v946 = v109;
                    do
                    {
                      v947 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v948 = *(int *)((char *)*a4 + (v947 >> 30));
                      if (v948 >= 1)
                      {
                        v949 = v947 >> 29;
                        v950 = *(uint64_t *)((char *)*a5 + v949);
                        v951 = *(_QWORD *)(*a6 + v949);
                        v952 = *(_QWORD *)(*a2 + 152);
                        v953 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v945);
                        v954 = 8 * v950;
                        do
                        {
                          *(_BYTE *)(v952 + v946) = *v953;
                          v952 += v951;
                          v953 = (_QWORD *)((char *)v953 + v954);
                          --v948;
                        }
                        while (v948);
                      }
                      v946 += v944;
                      ++v941;
                      v945 += result;
                    }
                    while (v941 != v940);
                  }
                  v109 += v936;
                  ++v933;
                  v937 += v938;
                }
                while (v933 != v932);
              }
              break;
            case 4:
LABEL_556:
              break;
            case 5:
              v955 = (v111 << 30) - 0x500000000;
              v956 = *(int *)((char *)*a4 + (v955 >> 30));
              if (v956 >= 1)
              {
                v957 = v955 >> 29;
                v958 = *(uint64_t *)((char *)*a5 + v957);
                v959 = *(_QWORD *)(*a6 + v957);
                do
                {
                  v1574 += v958;
                  v109 += v959;
                  --v956;
                }
                while (v956);
              }
              break;
            default:
              LODWORD(v894) = 1;
              v895 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v894 = a4[1][v895++] * (uint64_t)(int)v894;
              while (v895 * 4);
              if (v110[6])
              {
                result = 0;
                v1504 = *a8;
                v1516 = v894;
                do
                {
                  v896 = *a4;
                  v897 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v898 = (v897 - 1);
                  v1531 = v110;
                  v1547 = result;
                  v899 = 0;
                  if ((int)v897 - 1 >= 0)
                  {
                    v900 = *a5;
                    do
                    {
                      v901 = ldiv((int)result, v896[v898]);
                      LODWORD(result) = v901.quot;
                      v899 += v900[v898--] * v901.rem;
                    }
                    while (v898 != -1);
                  }
                  v902 = *(_QWORD *)*a2;
                  v903 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v902) >> 2;
                  v904 = *a6;
                  v905 = 0;
                  v906 = (v903 - 1);
                  if ((int)v903 - 1 >= 0)
                  {
                    v907 = v1547;
                    do
                    {
                      v908 = ldiv(v907, *(int *)(v902 + 4 * v906));
                      v907 = v908.quot;
                      v905 += *(_QWORD *)(v904 + 8 * v906--) * v908.rem;
                    }
                    while (v906 != -1);
                  }
                  v110 = v1531;
                  v909 = ((v110[1] - *v110) << 30) - 0x500000000;
                  v910 = *(int *)((char *)v896 + (v909 >> 30));
                  if (v910 >= 1)
                  {
                    v911 = v899 + v1574;
                    v912 = v909 >> 29;
                    v913 = *(uint64_t *)((char *)*a5 + v912);
                    v914 = *(_QWORD *)(v904 + v912);
                    v915 = v905 + v1504;
                    do
                    {
                      v911 += v913;
                      v915 += v914;
                      --v910;
                    }
                    while (v910);
                    v110 = *(_QWORD **)v12;
                  }
                  result = v1547 + v1516;
                }
                while (v110[6] > (unint64_t)(v1547 + v1516));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v23 = v8[6];
          if (v23)
          {
            v24 = **(_DWORD **)(*(_QWORD *)result + 152);
            v25 = (_DWORD *)v8[19];
            do
            {
              *v25++ = v24;
              --v23;
            }
            while (v23);
          }
          break;
        case 1:
          v120 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v120)
          {
            v121 = *(uint64_t **)(*(_QWORD *)result + 152);
            v122 = (_DWORD *)v8[19];
            v123 = 8 * v120;
            do
            {
              v124 = *v121++;
              *v122++ = v124;
              v123 -= 8;
            }
            while (v123);
          }
          break;
        case 2:
          v125 = *a7;
          v126 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v127 = *a4;
              if (**a4 >= 1)
              {
                v128 = 0;
                v129 = *(_QWORD *)(v126 + 152);
                v130 = v8[19];
                v131 = **a5;
                v132 = (_QWORD *)(v129 + 8 * v125);
                do
                {
                  *(_DWORD *)(v130 + 4 * v128) = *v132;
                  v132 += v131;
                  ++v128;
                }
                while (*v127 > (int)v128);
              }
              break;
            case 2:
              v395 = *a4;
              v396 = **a4;
              if (v396 >= 1)
              {
                v397 = 0;
                v398 = 0;
                v399 = *(_QWORD *)(v126 + 152);
                v400 = v8[19];
                v401 = **a5;
                v402 = (*a5)[1];
                v403 = v395[1];
                do
                {
                  if (v403 >= 1)
                  {
                    v404 = 0;
                    do
                    {
                      *(_DWORD *)(v400 + 4 * v398 + 4 * v404) = *(_QWORD *)(v399 + 8 * v125);
                      v125 += v402;
                      v403 = v395[1];
                      ++v404;
                    }
                    while ((int)v404 < v403);
                    v396 = *v395;
                    v398 += v404;
                  }
                  result = v403;
                  v125 = v125 + v401 - v402 * v403;
                  ++v397;
                }
                while (v397 < v396);
              }
              break;
            case 3:
              v405 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v406 = 0;
                v407 = 0;
                v408 = *(_QWORD *)(v126 + 152);
                v409 = v8[19];
                v410 = *a5;
                v411 = **a5;
                v412 = (*a5)[1];
                v413 = v405[1];
                do
                {
                  if (v413 >= 1)
                  {
                    v414 = 0;
                    v415 = *a5;
                    v416 = v410[2];
                    v417 = v405[2];
                    do
                    {
                      if (v417 >= 1)
                      {
                        v418 = 0;
                        v419 = v415[2];
                        do
                        {
                          *(_DWORD *)(v409 + 4 * v407 + 4 * v418) = *(_QWORD *)(v408 + 8 * v125);
                          v125 += v419;
                          v417 = v405[2];
                          ++v418;
                        }
                        while ((int)v418 < v417);
                        v413 = v405[1];
                        v407 += v418;
                      }
                      v125 = v125 + v412 - v416 * v417;
                      ++v414;
                    }
                    while (v414 < v413);
                    result = *v405;
                  }
                  v125 = v125 + v411 - v412 * v413;
                  ++v406;
                }
                while (v406 < (int)result);
              }
              break;
            case 4:
              v420 = *a4;
              v421 = **a4;
              if (v421 >= 1)
              {
                v422 = 0;
                v423 = 0;
                v424 = *(_QWORD *)(v126 + 152);
                v425 = v8[19];
                v426 = *a5;
                v427 = **a5;
                v428 = (*a5)[1];
                v429 = v420[1];
                do
                {
                  if (v429 >= 1)
                  {
                    v430 = 0;
                    v431 = *a5;
                    v432 = v426[2];
                    v433 = v420[2];
                    do
                    {
                      if (v433 >= 1)
                      {
                        v434 = 0;
                        v435 = *a5;
                        v436 = v431[2];
                        v437 = v431[3];
                        v438 = v420[3];
                        do
                        {
                          if (v438 >= 1)
                          {
                            v439 = 0;
                            v440 = v435[3];
                            do
                            {
                              *(_DWORD *)(v425 + 4 * v423 + 4 * v439) = *(_QWORD *)(v424 + 8 * v125);
                              v125 += v440;
                              v438 = v420[3];
                              ++v439;
                            }
                            while ((int)v439 < v438);
                            v433 = v420[2];
                            v423 += v439;
                          }
                          v125 = v125 + v436 - v437 * v438;
                          ++v434;
                        }
                        while (v434 < v433);
                        v429 = v420[1];
                      }
                      v125 = v125 + v428 - v432 * v433;
                      ++v430;
                    }
                    while (v430 < v429);
                    v421 = *v420;
                  }
                  result = v429;
                  v125 = v125 + v427 - v428 * v429;
                  ++v422;
                }
                while (v422 < v421);
              }
              break;
            default:
              v385 = v8[6];
              if (v385)
              {
                v386 = 0;
                v387 = *(_QWORD *)(v126 + 152) + 8 * v125;
                v388 = v8[19];
                v389 = *a4;
                v390 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v391 = *a5;
                do
                {
                  v392 = 0;
                  if ((v390 & 0x80000000) == 0)
                  {
                    v393 = v390;
                    LODWORD(result) = v386;
                    do
                    {
                      v394 = ldiv((int)result, v389[v393]);
                      result = v394.quot;
                      v392 += v391[v393--] * v394.rem;
                    }
                    while (v393 != -1);
                  }
                  *(_DWORD *)(v388 + 4 * v386++) = *(_QWORD *)(v387 + 8 * v392);
                }
                while (v386 != v385);
              }
              break;
          }
          break;
        case 3:
          v1429 = *a8;
          v1435 = *a7;
          v133 = *(_QWORD **)result;
          v134 = v133[1] - *v133;
          switch(v134 >> 2)
          {
            case 1:
              v135 = (v134 << 30) - 0x100000000;
              v136 = *(int *)((char *)*a4 + (v135 >> 30));
              if (v136 >= 1)
              {
                v137 = v135 >> 29;
                v138 = *(uint64_t *)((char *)*a5 + v137);
                v139 = *(_QWORD *)(*a6 + v137);
                v140 = (_DWORD *)(v8[19] + 4 * v1429);
                v141 = (_QWORD *)(v133[19] + 8 * v1435);
                v142 = 4 * v139;
                v143 = 8 * v138;
                do
                {
                  *v140 = *v141;
                  v140 = (_DWORD *)((char *)v140 + v142);
                  v141 = (_QWORD *)((char *)v141 + v143);
                  --v136;
                }
                while (v136);
              }
              break;
            case 2:
              v998 = (v134 << 30) - 0x200000000;
              v999 = *a4;
              v1000 = *(int *)((char *)*a4 + (v998 >> 30));
              if (v1000 >= 1)
              {
                v1001 = 0;
                v1002 = v998 >> 29;
                v1003 = *(uint64_t *)((char *)*a5 + v1002);
                v1004 = *(_QWORD *)(*a6 + v1002);
                v1005 = (v134 << 30) - 0x100000000;
                v1006 = *(uint64_t *)((char *)*a5 + (v1005 >> 29));
                v1007 = *(_QWORD *)(*a6 + (v1005 >> 29));
                v1008 = v1005 >> 32;
                v1009 = 4 * v1429;
                v1010 = 4 * v1004;
                v1011 = 4 * v1007;
                v1012 = 8 * v1435;
                v1013 = 8 * v1003;
                result = 8 * v1006;
                do
                {
                  v1014 = v999[v1008];
                  if (v1014 >= 1)
                  {
                    v1015 = (_DWORD *)(v8[19] + v1009);
                    v1016 = (_QWORD *)(v133[19] + v1012);
                    do
                    {
                      *v1015 = *v1016;
                      v1015 = (_DWORD *)((char *)v1015 + v1011);
                      v1016 = (_QWORD *)((char *)v1016 + result);
                      --v1014;
                    }
                    while (v1014);
                  }
                  ++v1001;
                  v1009 += v1010;
                  v1012 += v1013;
                }
                while (v1001 != v1000);
              }
              break;
            case 3:
              v1017 = (v134 << 30) - 0x300000000;
              v1018 = *a4;
              v1019 = *(int *)((char *)*a4 + (v1017 >> 30));
              if (v1019 >= 1)
              {
                v1020 = 0;
                v1021 = *a5;
                v1022 = v1017 >> 29;
                v1023 = *(uint64_t *)((char *)*a5 + (v1017 >> 29));
                v1024 = *a6;
                v1025 = *(_QWORD *)(*a6 + v1022);
                v1026 = v134 << 30;
                v1027 = (v134 << 30) - 0x200000000;
                v1028 = v1027 >> 32;
                v1027 >>= 29;
                v1029 = *(uint64_t *)((char *)*a5 + v1027);
                v1030 = *(_QWORD *)(*a6 + v1027);
                v1031 = (v1026 - 0x100000000) >> 32;
                v1032 = 4 * v1429;
                v1033 = 4 * v1025;
                v1034 = 4 * v1030;
                result = 8 * v1435;
                v1035 = 8 * v1023;
                v1036 = 8 * v1029;
                do
                {
                  v1037 = v1018[v1028];
                  if (v1037 >= 1)
                  {
                    v1038 = 0;
                    v1039 = (_QWORD *)*a2;
                    v1040 = 4 * *(_QWORD *)(v1024 + 8 * v1031);
                    v1041 = 8 * v1021[v1031];
                    v1042 = result;
                    v1043 = v1032;
                    do
                    {
                      v1044 = v1018[v1031];
                      if (v1044 >= 1)
                      {
                        v1045 = (_DWORD *)(v1039[19] + v1043);
                        v1046 = (_QWORD *)(v133[19] + v1042);
                        do
                        {
                          *v1045 = *v1046;
                          v1045 = (_DWORD *)((char *)v1045 + v1040);
                          v1046 = (_QWORD *)((char *)v1046 + v1041);
                          --v1044;
                        }
                        while (v1044);
                      }
                      ++v1038;
                      v1043 += v1034;
                      v1042 += v1036;
                    }
                    while (v1038 != v1037);
                  }
                  ++v1020;
                  v1032 += v1033;
                  result += v1035;
                }
                while (v1020 != v1019);
              }
              break;
            case 4:
              v1047 = (v134 << 30) - 0x400000000;
              v1048 = *a4;
              v1582 = *(int *)((char *)*a4 + (v1047 >> 30));
              if (v1582 >= 1)
              {
                v1049 = 0;
                v1050 = *a5;
                v1051 = v1047 >> 29;
                v1052 = v134 << 30;
                v1053 = *a6;
                v1565 = (v1052 - 0x300000000) >> 32;
                v1054 = (v1052 - 0x300000000) >> 29;
                v1055 = *(uint64_t *)((char *)*a5 + v1054);
                v1056 = *(_QWORD *)(*a6 + v1054);
                v1057 = (v1052 - 0x200000000) >> 32;
                v1058 = (v1052 - 0x100000000) >> 32;
                v1059 = 4 * v1429;
                v1549 = 4 * *(_QWORD *)(*a6 + v1051);
                result = 4 * v1056;
                v1060 = 8 * v1435;
                v1533 = 8 * *(uint64_t *)((char *)*a5 + v1051);
                v1061 = 8 * v1055;
                do
                {
                  v1062 = v1048[v1565];
                  if (v1062 >= 1)
                  {
                    v1063 = 0;
                    v1064 = 4 * *(_QWORD *)(v1053 + 8 * v1057);
                    v1065 = 8 * v1050[v1057];
                    v1066 = v1060;
                    v1067 = v1059;
                    do
                    {
                      v1068 = v1048[v1057];
                      if (v1068 >= 1)
                      {
                        v1069 = 0;
                        v1070 = (_QWORD *)*a2;
                        v1071 = 4 * *(_QWORD *)(v1053 + 8 * v1058);
                        v1072 = 8 * v1050[v1058];
                        v1073 = v1066;
                        v1074 = v1067;
                        do
                        {
                          v1075 = v1048[v1058];
                          if (v1075 >= 1)
                          {
                            v1076 = (_DWORD *)(v1070[19] + v1074);
                            v1077 = (_QWORD *)(v133[19] + v1073);
                            do
                            {
                              *v1076 = *v1077;
                              v1076 = (_DWORD *)((char *)v1076 + v1071);
                              v1077 = (_QWORD *)((char *)v1077 + v1072);
                              --v1075;
                            }
                            while (v1075);
                          }
                          ++v1069;
                          v1074 += v1064;
                          v1073 += v1065;
                        }
                        while (v1069 != v1068);
                      }
                      ++v1063;
                      v1067 += result;
                      v1066 += v1061;
                    }
                    while (v1063 != v1062);
                  }
                  ++v1049;
                  v1059 += v1549;
                  v1060 += v1533;
                }
                while (v1049 != v1582);
              }
              break;
            case 5:
              v1078 = (v134 << 30) - 0x500000000;
              v1079 = *a4;
              v1484 = *(int *)((char *)*a4 + (v1078 >> 30));
              if (v1484 >= 1)
              {
                v1494 = 0;
                v1080 = *a5;
                v1081 = v1078 >> 29;
                v1082 = *a6;
                v1083 = v134 << 30;
                v1084 = (v1083 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1084);
                v1474 = (v1083 - 0x400000000) >> 32;
                v1085 = *(_QWORD *)(*a6 + v1084);
                v1566 = (v1083 - 0x300000000) >> 32;
                v1086 = (v1083 - 0x200000000) >> 32;
                v1087 = (v1083 - 0x100000000) >> 32;
                v1518 = 4 * v1429;
                v1464 = 4 * *(_QWORD *)(*a6 + v1081);
                v1550 = 4 * v1085;
                v1506 = 8 * v1435;
                v1454 = 8 * *(uint64_t *)((char *)*a5 + v1081);
                v1534 = 8 * result;
                do
                {
                  v1583 = v1079[v1474];
                  if (v1583 >= 1)
                  {
                    v1088 = 0;
                    v1089 = 4 * *(_QWORD *)(v1082 + 8 * v1566);
                    v1090 = 8 * v1080[v1566];
                    v1091 = v1506;
                    v1092 = v1518;
                    do
                    {
                      v1093 = v1079[v1566];
                      if (v1093 >= 1)
                      {
                        v1094 = 0;
                        v1095 = 4 * *(_QWORD *)(v1082 + 8 * v1086);
                        v1096 = 8 * v1080[v1086];
                        v1097 = v1091;
                        v1098 = v1092;
                        do
                        {
                          v1099 = v1079[v1086];
                          if (v1099 >= 1)
                          {
                            v1100 = 0;
                            result = *a2;
                            v1101 = 4 * *(_QWORD *)(v1082 + 8 * v1087);
                            v1102 = 8 * v1080[v1087];
                            v1103 = v1097;
                            v1104 = v1098;
                            do
                            {
                              v1105 = v1079[v1087];
                              if (v1105 >= 1)
                              {
                                v1106 = (_DWORD *)(*(_QWORD *)(result + 152) + v1104);
                                v1107 = (_QWORD *)(v133[19] + v1103);
                                do
                                {
                                  *v1106 = *v1107;
                                  v1106 = (_DWORD *)((char *)v1106 + v1101);
                                  v1107 = (_QWORD *)((char *)v1107 + v1102);
                                  --v1105;
                                }
                                while (v1105);
                              }
                              ++v1100;
                              v1104 += v1095;
                              v1103 += v1096;
                            }
                            while (v1100 != v1099);
                          }
                          ++v1094;
                          v1098 += v1089;
                          v1097 += v1090;
                        }
                        while (v1094 != v1093);
                      }
                      ++v1088;
                      v1092 += v1550;
                      v1091 += v1534;
                    }
                    while (v1088 != v1583);
                  }
                  v1518 += v1464;
                  v1506 += v1454;
                  ++v1494;
                }
                while (v1494 != v1484);
              }
              break;
            default:
              v960 = (char *)a4[1];
              LODWORD(v961) = 1;
              v962 = -20;
              do
              {
                v961 = *(int *)&v960[v962] * (uint64_t)(int)v961;
                v962 += 4;
              }
              while (v962);
              v1425 = v133[6];
              if (v1425)
              {
                result = 0;
                v963 = (v134 << 30) - 0x500000000;
                v964 = *a4;
                v1463 = *v8;
                v965 = *a5;
                v1410 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1415 = ((unint64_t)(v960 - (char *)*a4) >> 2) - 1;
                v1405 = v963 >> 32;
                v966 = *a6;
                v1473 = ((v134 << 30) - 0x400000000) >> 32;
                v1564 = ((v134 << 30) - 0x300000000) >> 32;
                v967 = ((v134 << 30) - 0x200000000) >> 32;
                v968 = ((v134 << 30) - 0x100000000) >> 32;
                v1446 = 8 * *(uint64_t *)((char *)*a5 + (v963 >> 29));
                v1453 = 4 * *(_QWORD *)(*a6 + (v963 >> 29));
                v1420 = v961;
                do
                {
                  v969 = v1415;
                  v1441 = result;
                  v970 = 0;
                  if ((v1415 & 0x80000000) != 0)
                  {
                    v971 = v1410;
                  }
                  else
                  {
                    v971 = v1410;
                    do
                    {
                      v972 = ldiv((int)result, v964[v969]);
                      LODWORD(result) = v972.quot;
                      v970 += v965[v969--] * v972.rem;
                    }
                    while (v969 != -1);
                  }
                  v973 = 0;
                  if ((v971 & 0x80000000) == 0)
                  {
                    v974 = v1441;
                    do
                    {
                      v975 = ldiv(v974, *(int *)(v1463 + 4 * v971));
                      v974 = v975.quot;
                      v973 += *(_QWORD *)(v966 + 8 * v971--) * v975.rem;
                    }
                    while (v971 != -1);
                  }
                  v1483 = v964[v1405];
                  if (v1483 >= 1)
                  {
                    v976 = 0;
                    v1517 = 4 * (v973 + v1429);
                    v1548 = 4 * *(_QWORD *)(v966 + 8 * v1473);
                    v1505 = 8 * (v970 + v1435);
                    v1532 = 8 * v965[v1473];
                    do
                    {
                      v1493 = v976;
                      v1581 = v964[v1473];
                      if (v1581 >= 1)
                      {
                        v977 = 0;
                        v978 = 4 * *(_QWORD *)(v966 + 8 * v1564);
                        v979 = 8 * v965[v1564];
                        v981 = v1505;
                        v980 = v1517;
                        do
                        {
                          v982 = v964[v1564];
                          if (v982 >= 1)
                          {
                            v983 = 0;
                            v984 = 4 * *(_QWORD *)(v966 + 8 * v967);
                            v985 = 8 * v965[v967];
                            v986 = v981;
                            v987 = v980;
                            do
                            {
                              v988 = v964[v967];
                              if (v988 >= 1)
                              {
                                v989 = 0;
                                v990 = (_QWORD *)*a2;
                                v991 = 4 * *(_QWORD *)(v966 + 8 * v968);
                                v992 = 8 * v965[v968];
                                v993 = v986;
                                v994 = v987;
                                do
                                {
                                  v995 = v964[v968];
                                  if (v995 >= 1)
                                  {
                                    v996 = (_DWORD *)(v990[19] + v994);
                                    v997 = (_QWORD *)(v133[19] + v993);
                                    do
                                    {
                                      *v996 = *v997;
                                      v996 = (_DWORD *)((char *)v996 + v991);
                                      v997 = (_QWORD *)((char *)v997 + v992);
                                      --v995;
                                    }
                                    while (v995);
                                  }
                                  ++v989;
                                  v994 += v984;
                                  v993 += v985;
                                }
                                while (v989 != v988);
                              }
                              ++v983;
                              v987 += v978;
                              v986 += v979;
                            }
                            while (v983 != v982);
                          }
                          ++v977;
                          v980 += v1548;
                          v981 += v1532;
                        }
                        while (v977 != v1581);
                      }
                      v976 = v1493 + 1;
                      v1517 += v1453;
                      v1505 += v1446;
                    }
                    while (v1493 + 1 != v1483);
                  }
                  result = v1441 + v1420;
                }
                while (v1425 > v1441 + v1420);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v26 = v8[6];
          if (v26)
          {
            v27 = **(_QWORD **)(*(_QWORD *)result + 152);
            v28 = (_QWORD *)v8[19];
            do
            {
              *v28++ = v27;
              --v26;
            }
            while (v26);
          }
          break;
        case 1:
          v144 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v144)
            result = (uint64_t)memmove((void *)v8[19], *(const void **)(*(_QWORD *)result + 152), 8 * v144);
          break;
        case 2:
          v145 = *a7;
          v146 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v147 = **a4;
              if ((int)v147 >= 1)
              {
                v148 = *(_QWORD *)(v146 + 152);
                v149 = (_QWORD *)v8[19];
                v150 = *a5;
                do
                {
                  *v149++ = *(_QWORD *)(v148 + 8 * v145);
                  v145 += *v150;
                  --v147;
                }
                while (v147);
              }
              break;
            case 2:
              v451 = **a4;
              if (v451 >= 1)
              {
                v452 = 0;
                v453 = 0;
                v454 = *(_QWORD *)(v146 + 152);
                v455 = v8[19];
                v456 = (*a4)[1];
                v457 = *a5;
                do
                {
                  if (v456 <= 0)
                  {
                    v459 = v457[1];
                  }
                  else
                  {
                    v458 = v456;
                    do
                    {
                      *(_QWORD *)(v455 + 8 * v453++) = *(_QWORD *)(v454 + 8 * v145);
                      v459 = v457[1];
                      v145 += v459;
                      --v458;
                    }
                    while (v458);
                  }
                  result = *v457;
                  v145 = v145 - v459 * v456 + *v457;
                  ++v452;
                }
                while (v452 != v451);
              }
              break;
            case 3:
              v460 = *a4;
              v461 = **a4;
              if (v461 >= 1)
              {
                v462 = 0;
                v463 = 0;
                v464 = *(_QWORD *)(v146 + 152);
                v465 = v8[19];
                v466 = v460[1];
                v467 = *a5;
                do
                {
                  if ((int)v466 <= 0)
                  {
                    v471 = v467[1];
                  }
                  else
                  {
                    v468 = 0;
                    result = v460[2];
                    v469 = *a5;
                    do
                    {
                      v470 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(_QWORD *)(v465 + 8 * v463++) = *(_QWORD *)(v464 + 8 * v145);
                          v145 += v469[2];
                          --v470;
                        }
                        while (v470);
                      }
                      v471 = v467[1];
                      v145 = v471 + v145 - v467[2] * (int)result;
                      ++v468;
                    }
                    while (v468 != (_DWORD)v466);
                  }
                  v145 = v145 - v471 * v466 + *v467;
                  ++v462;
                }
                while (v462 != v461);
              }
              break;
            case 4:
              v472 = *a4;
              v473 = **a4;
              if (v473 >= 1)
              {
                v474 = 0;
                v475 = 0;
                v476 = *(_QWORD *)(v146 + 152);
                v477 = v8[19];
                v478 = v472[1];
                v479 = *a5;
                do
                {
                  if ((int)v478 <= 0)
                  {
                    v486 = v479[1];
                  }
                  else
                  {
                    v480 = 0;
                    result = v472[2];
                    v481 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        v482 = 0;
                        v483 = v472[3];
                        v484 = *a5;
                        do
                        {
                          v485 = v483;
                          if (v483 >= 1)
                          {
                            do
                            {
                              *(_QWORD *)(v477 + 8 * v475++) = *(_QWORD *)(v476 + 8 * v145);
                              v145 += v484[3];
                              --v485;
                            }
                            while (v485);
                          }
                          v145 = v481[2] + v145 - v481[3] * v483;
                          ++v482;
                        }
                        while (v482 != (_DWORD)result);
                      }
                      v486 = v479[1];
                      v145 = v486 + v145 - v479[2] * result;
                      ++v480;
                    }
                    while (v480 != (_DWORD)v478);
                  }
                  v145 = v145 - v486 * v478 + *v479;
                  ++v474;
                }
                while (v474 != v473);
              }
              break;
            default:
              v441 = v8[6];
              if (v441)
              {
                v442 = 0;
                v443 = *(_QWORD *)(v146 + 152) + 8 * v145;
                v444 = v8[19];
                v445 = *a4;
                v446 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v447 = *a5;
                do
                {
                  v448 = 0;
                  if ((v446 & 0x80000000) == 0)
                  {
                    v449 = v446;
                    LODWORD(result) = v442;
                    do
                    {
                      v450 = ldiv((int)result, v445[v449]);
                      result = v450.quot;
                      v448 += v447[v449--] * v450.rem;
                    }
                    while (v449 != -1);
                  }
                  *(_QWORD *)(v444 + 8 * v442++) = *(_QWORD *)(v443 + 8 * v448);
                }
                while (v442 != v441);
              }
              break;
          }
          break;
        case 3:
          v1430 = *a8;
          v1436 = *a7;
          v151 = *(_QWORD **)result;
          v152 = v151[1] - *v151;
          switch(v152 >> 2)
          {
            case 1:
              v153 = (v152 << 30) - 0x100000000;
              v154 = *(int *)((char *)*a4 + (v153 >> 30));
              if (v154 >= 1)
              {
                v155 = v153 >> 29;
                v156 = *(uint64_t *)((char *)*a5 + v155);
                v157 = *(_QWORD *)(*a6 + v155);
                v158 = (_QWORD *)(v8[19] + 8 * v1430);
                v159 = (_QWORD *)(v151[19] + 8 * v1436);
                v160 = 8 * v157;
                v161 = 8 * v156;
                do
                {
                  *v158 = *v159;
                  v158 = (_QWORD *)((char *)v158 + v160);
                  v159 = (_QWORD *)((char *)v159 + v161);
                  --v154;
                }
                while (v154);
              }
              break;
            case 2:
              v1146 = (v152 << 30) - 0x200000000;
              v1147 = *(int *)((char *)*a4 + (v1146 >> 30));
              if (v1147 >= 1)
              {
                v1148 = 0;
                v1149 = v152 << 30;
                v1150 = *a5;
                v1149 -= 0x100000000;
                v1151 = *(int *)((char *)*a4 + (v1149 >> 30));
                v1152 = v1146 >> 29;
                v1153 = *(uint64_t *)((char *)*a5 + (v1146 >> 29));
                v1154 = *a6;
                v1155 = *(_QWORD *)(*a6 + v1152);
                v1156 = v1149 >> 32;
                v1157 = 8 * v1430;
                v1158 = 8 * v1155;
                v1159 = 8 * v1436;
                result = 8 * v1153;
                do
                {
                  if (v1151 >= 1)
                  {
                    v1160 = (_QWORD *)(v8[19] + v1157);
                    v1161 = 8 * *(_QWORD *)(v1154 + 8 * v1156);
                    v1162 = (_QWORD *)(v151[19] + v1159);
                    v1163 = 8 * v1150[v1156];
                    v1164 = v1151;
                    do
                    {
                      *v1160 = *v1162;
                      v1160 = (_QWORD *)((char *)v1160 + v1161);
                      v1162 = (_QWORD *)((char *)v1162 + v1163);
                      --v1164;
                    }
                    while (v1164);
                  }
                  ++v1148;
                  v1157 += v1158;
                  v1159 += result;
                }
                while (v1148 != v1147);
              }
              break;
            case 3:
              v1165 = (v152 << 30) - 0x300000000;
              v1166 = *a4;
              v1167 = *(int *)((char *)*a4 + (v1165 >> 30));
              if (v1167 >= 1)
              {
                v1168 = 0;
                v1169 = v152 << 30;
                v1170 = *a5;
                v1171 = v1165 >> 29;
                v1172 = *(uint64_t *)((char *)*a5 + (v1165 >> 29));
                v1173 = *a6;
                v1174 = *(_QWORD *)(*a6 + v1171);
                v1175 = v1169 - 0x200000000;
                v1176 = v1169 - 0x100000000;
                v1177 = *(int *)((char *)v1166 + ((v1169 - 0x200000000) >> 30));
                v1178 = v1175 >> 32;
                v1179 = v1176 >> 32;
                v1180 = 8 * v1430;
                v1181 = 8 * v1174;
                result = 8 * v1436;
                v1182 = 8 * v1172;
                do
                {
                  if (v1177 >= 1)
                  {
                    v1183 = 0;
                    v1184 = v1166[v1179];
                    v1185 = (_QWORD *)*a2;
                    v1186 = 8 * *(_QWORD *)(v1173 + 8 * v1178);
                    v1187 = 8 * v1170[v1178];
                    v1188 = result;
                    v1189 = v1180;
                    do
                    {
                      if (v1184 >= 1)
                      {
                        v1190 = (_QWORD *)(v1185[19] + v1189);
                        v1191 = 8 * *(_QWORD *)(v1173 + 8 * v1179);
                        v1192 = (_QWORD *)(v151[19] + v1188);
                        v1193 = 8 * v1170[v1179];
                        v1194 = v1184;
                        do
                        {
                          *v1190 = *v1192;
                          v1190 = (_QWORD *)((char *)v1190 + v1191);
                          v1192 = (_QWORD *)((char *)v1192 + v1193);
                          --v1194;
                        }
                        while (v1194);
                      }
                      ++v1183;
                      v1189 += v1186;
                      v1188 += v1187;
                    }
                    while (v1183 != v1177);
                  }
                  ++v1168;
                  v1180 += v1181;
                  result += v1182;
                }
                while (v1168 != v1167);
              }
              break;
            case 4:
              v1195 = (v152 << 30) - 0x400000000;
              v1196 = *a4;
              v1552 = *(int *)((char *)*a4 + (v1195 >> 30));
              if (v1552 >= 1)
              {
                v1584 = 0;
                v1197 = v152 << 30;
                v1198 = *a5;
                v1199 = v1195 >> 29;
                result = *(uint64_t *)((char *)*a5 + v1199);
                v1200 = *a6;
                v1520 = (v1197 - 0x300000000) >> 32;
                v1201 = *(int *)((char *)v1196 + ((v1197 - 0x300000000) >> 30));
                v1202 = (v1197 - 0x200000000) >> 32;
                v1203 = (v1197 - 0x100000000) >> 32;
                v1204 = 8 * v1430;
                v1568 = 8 * *(_QWORD *)(*a6 + v1199);
                v1205 = 8 * v1436;
                v1536 = 8 * result;
                do
                {
                  if (v1201 >= 1)
                  {
                    v1206 = 0;
                    v1207 = v1196[v1202];
                    v1208 = 8 * *(_QWORD *)(v1200 + 8 * v1520);
                    v1209 = 8 * v1198[v1520];
                    v1210 = v1205;
                    v1211 = v1204;
                    do
                    {
                      if (v1207 >= 1)
                      {
                        v1212 = 0;
                        result = *(_QWORD *)(v1200 + 8 * v1202);
                        v1213 = v1196[v1203];
                        v1214 = (_QWORD *)*a2;
                        v1215 = 8 * result;
                        v1216 = 8 * v1198[v1202];
                        v1217 = v1210;
                        v1218 = v1211;
                        do
                        {
                          if (v1213 >= 1)
                          {
                            v1219 = (_QWORD *)(v1214[19] + v1218);
                            v1220 = 8 * *(_QWORD *)(v1200 + 8 * v1203);
                            result = v151[19] + v1217;
                            v1221 = 8 * v1198[v1203];
                            v1222 = v1213;
                            do
                            {
                              *v1219 = *(_QWORD *)result;
                              v1219 = (_QWORD *)((char *)v1219 + v1220);
                              result += v1221;
                              --v1222;
                            }
                            while (v1222);
                          }
                          ++v1212;
                          v1218 += v1215;
                          v1217 += v1216;
                        }
                        while (v1212 != v1207);
                      }
                      ++v1206;
                      v1211 += v1208;
                      v1210 += v1209;
                    }
                    while (v1206 != v1201);
                  }
                  v1204 += v1568;
                  v1205 += v1536;
                  ++v1584;
                }
                while (v1584 != v1552);
              }
              break;
            case 5:
              v1223 = (v152 << 30) - 0x500000000;
              v1224 = *a4;
              v1476 = *(int *)((char *)*a4 + (v1223 >> 30));
              if (v1476 >= 1)
              {
                v1486 = 0;
                v1225 = v152 << 30;
                v1226 = *a5;
                v1227 = v1223 >> 29;
                v1228 = *a6;
                v1448 = (v1225 - 0x400000000) >> 32;
                v1569 = *(int *)((char *)v1224 + ((v1225 - 0x400000000) >> 30));
                v1229 = (v1225 - 0x200000000) >> 32;
                v1230 = (v1225 - 0x100000000) >> 32;
                v1508 = 8 * v1430;
                v1521 = (v1225 - 0x300000000) >> 32;
                v1496 = 8 * v1436;
                v1456 = 8 * *(uint64_t *)((char *)*a5 + v1227);
                v1466 = 8 * *(_QWORD *)(*a6 + v1227);
                do
                {
                  if (v1569 >= 1)
                  {
                    v1231 = 0;
                    v1232 = v1224[v1521];
                    v1537 = 8 * v1226[v1448];
                    v1553 = 8 * *(_QWORD *)(v1228 + 8 * v1448);
                    v1233 = v1496;
                    result = v1508;
                    do
                    {
                      v1585 = v1231;
                      if (v1232 >= 1)
                      {
                        v1234 = 0;
                        v1235 = v1224[v1229];
                        v1236 = 8 * *(_QWORD *)(v1228 + 8 * v1521);
                        v1237 = 8 * v1226[v1521];
                        v1238 = v1233;
                        v1239 = result;
                        do
                        {
                          if (v1235 >= 1)
                          {
                            v1240 = 0;
                            v1241 = v1224[v1230];
                            v1242 = (_QWORD *)*a2;
                            v1243 = 8 * *(_QWORD *)(v1228 + 8 * v1229);
                            v1244 = 8 * v1226[v1229];
                            v1245 = v1238;
                            v1246 = v1239;
                            do
                            {
                              if (v1241 >= 1)
                              {
                                v1247 = (_QWORD *)(v1242[19] + v1246);
                                v1248 = 8 * *(_QWORD *)(v1228 + 8 * v1230);
                                v1249 = (_QWORD *)(v151[19] + v1245);
                                v1250 = 8 * v1226[v1230];
                                v1251 = v1241;
                                do
                                {
                                  *v1247 = *v1249;
                                  v1247 = (_QWORD *)((char *)v1247 + v1248);
                                  v1249 = (_QWORD *)((char *)v1249 + v1250);
                                  --v1251;
                                }
                                while (v1251);
                              }
                              ++v1240;
                              v1246 += v1243;
                              v1245 += v1244;
                            }
                            while (v1240 != v1235);
                          }
                          ++v1234;
                          v1239 += v1236;
                          v1238 += v1237;
                        }
                        while (v1234 != v1232);
                      }
                      v1231 = v1585 + 1;
                      result += v1553;
                      v1233 += v1537;
                    }
                    while (v1585 + 1 != v1569);
                  }
                  v1508 += v1466;
                  v1496 += v1456;
                  ++v1486;
                }
                while (v1486 != v1476);
              }
              break;
            default:
              v1108 = (char *)a4[1];
              LODWORD(v1109) = 1;
              v1110 = -20;
              do
              {
                v1109 = *(int *)&v1108[v1110] * (uint64_t)(int)v1109;
                v1110 += 4;
              }
              while (v1110);
              v1426 = v151[6];
              if (v1426)
              {
                v1111 = 0;
                v1112 = (v152 << 30) - 0x500000000;
                v1113 = *a4;
                v1406 = *v8;
                v1114 = *a5;
                v1411 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1416 = ((unint64_t)(v1108 - (char *)*a4) >> 2) - 1;
                v1115 = *a6;
                v1402 = v1112 >> 32;
                v1475 = *(int *)((char *)*a4 + (v1112 >> 30));
                v1447 = ((v152 << 30) - 0x400000000) >> 32;
                v1519 = ((v152 << 30) - 0x300000000) >> 32;
                v1116 = ((v152 << 30) - 0x200000000) >> 32;
                v1117 = ((v152 << 30) - 0x100000000) >> 32;
                v1421 = v1109;
                do
                {
                  v1118 = v1416;
                  if ((v1416 & 0x80000000) != 0)
                  {
                    v1119 = 0;
                    v1120 = v1411;
                  }
                  else
                  {
                    v1119 = 0;
                    LODWORD(result) = v1111;
                    v1120 = v1411;
                    do
                    {
                      v1121 = ldiv((int)result, v1113[v1118]);
                      result = v1121.quot;
                      v1119 += v1114[v1118--] * v1121.rem;
                    }
                    while (v1118 != -1);
                  }
                  v1442 = v1111;
                  v1122 = 0;
                  if ((v1120 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1111;
                    do
                    {
                      v1123 = ldiv((int)result, *(int *)(v1406 + 4 * v1120));
                      result = v1123.quot;
                      v1122 += *(_QWORD *)(v1115 + 8 * v1120--) * v1123.rem;
                    }
                    while (v1120 != -1);
                  }
                  if (v1475 >= 1)
                  {
                    v1124 = 0;
                    v1567 = v1113[v1447];
                    v1465 = 8 * *(_QWORD *)(v1115 + 8 * v1402);
                    v1495 = 8 * (v1119 + v1436);
                    v1507 = 8 * (v1122 + v1430);
                    v1455 = 8 * v1114[v1402];
                    do
                    {
                      v1485 = v1124;
                      if (v1567 >= 1)
                      {
                        v1125 = 0;
                        v1126 = v1113[v1519];
                        v1535 = 8 * v1114[v1447];
                        v1551 = 8 * *(_QWORD *)(v1115 + 8 * v1447);
                        v1128 = v1495;
                        v1127 = v1507;
                        do
                        {
                          if (v1126 >= 1)
                          {
                            v1129 = 0;
                            v1130 = v1113[v1116];
                            v1131 = 8 * *(_QWORD *)(v1115 + 8 * v1519);
                            v1132 = 8 * v1114[v1519];
                            result = v1128;
                            v1133 = v1127;
                            do
                            {
                              if (v1130 >= 1)
                              {
                                v1134 = 0;
                                v1135 = v1113[v1117];
                                v1136 = (_QWORD *)*a2;
                                v1137 = 8 * *(_QWORD *)(v1115 + 8 * v1116);
                                v1138 = 8 * v1114[v1116];
                                v1139 = result;
                                v1140 = v1133;
                                do
                                {
                                  if (v1135 >= 1)
                                  {
                                    v1141 = (_QWORD *)(v1136[19] + v1140);
                                    v1142 = 8 * *(_QWORD *)(v1115 + 8 * v1117);
                                    v1143 = (_QWORD *)(v151[19] + v1139);
                                    v1144 = 8 * v1114[v1117];
                                    v1145 = v1135;
                                    do
                                    {
                                      *v1141 = *v1143;
                                      v1141 = (_QWORD *)((char *)v1141 + v1142);
                                      v1143 = (_QWORD *)((char *)v1143 + v1144);
                                      --v1145;
                                    }
                                    while (v1145);
                                  }
                                  ++v1134;
                                  v1140 += v1137;
                                  v1139 += v1138;
                                }
                                while (v1134 != v1130);
                              }
                              ++v1129;
                              v1133 += v1131;
                              result += v1132;
                            }
                            while (v1129 != v1126);
                          }
                          ++v1125;
                          v1127 += v1551;
                          v1128 += v1535;
                        }
                        while (v1125 != v1567);
                      }
                      v1124 = v1485 + 1;
                      v1507 += v1465;
                      v1495 += v1455;
                    }
                    while (v1485 + 1 != v1475);
                  }
                  v1111 += v1421;
                }
                while (v1426 > v1442 + v1421);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v29 = v8[6];
          if (v29)
          {
            v30 = (float)**(uint64_t **)(*(_QWORD *)result + 152);
            v31 = (float *)v8[19];
            do
            {
              *v31++ = v30;
              --v29;
            }
            while (v29);
          }
          break;
        case 1:
          v162 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v162)
          {
            v163 = *(uint64_t **)(*(_QWORD *)result + 152);
            v164 = (float *)v8[19];
            v165 = 8 * v162;
            do
            {
              v166 = *v163++;
              *v164++ = (float)v166;
              v165 -= 8;
            }
            while (v165);
          }
          break;
        case 2:
          v167 = *a7;
          v168 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v169 = **a4;
              if ((int)v169 >= 1)
              {
                v170 = (float *)v8[19];
                v171 = (uint64_t *)(*(_QWORD *)(v168 + 152) + 8 * v167);
                v172 = 8 * **a5;
                do
                {
                  *v170++ = (float)*v171;
                  v171 = (uint64_t *)((char *)v171 + v172);
                  --v169;
                }
                while (v169);
              }
              break;
            case 2:
              v497 = **a4;
              if (v497 >= 1)
              {
                v498 = 0;
                v499 = 0;
                v500 = *(_QWORD *)(v168 + 152);
                v501 = v8[19];
                v502 = (*a4)[1];
                v503 = (*a5)[1];
                v504 = **a5 - v503 * v502;
                do
                {
                  v505 = v502;
                  if ((int)v502 >= 1)
                  {
                    do
                    {
                      result = *(_QWORD *)(v500 + 8 * v167);
                      *(float *)(v501 + 4 * v499++) = (float)result;
                      v167 += v503;
                      --v505;
                    }
                    while (v505);
                  }
                  v167 += v504;
                  ++v498;
                }
                while (v498 != v497);
              }
              break;
            case 3:
              v506 = *a4;
              v507 = **a4;
              if (v507 >= 1)
              {
                v508 = 0;
                result = 0;
                v509 = *(_QWORD *)(v168 + 152);
                v510 = v8[19];
                v511 = v506[1];
                v512 = *a5;
                v513 = (*a5)[1];
                v514 = **a5 - v513 * v511;
                do
                {
                  if ((int)v511 < 1)
                  {
                    v521 = result;
                  }
                  else
                  {
                    v515 = 0;
                    v516 = v506[2];
                    v517 = *a5;
                    v518 = v513 - v512[2] * v516;
                    do
                    {
                      if ((int)v516 < 1)
                      {
                        v521 = result;
                      }
                      else
                      {
                        v519 = v517[2];
                        v520 = v516;
                        do
                        {
                          v521 = result + 1;
                          *(float *)(v510 + 4 * result) = (float)*(uint64_t *)(v509 + 8 * v167);
                          v167 += v519;
                          ++result;
                          --v520;
                        }
                        while (v520);
                      }
                      v167 += v518;
                      ++v515;
                      result = v521;
                    }
                    while (v515 != (_DWORD)v511);
                  }
                  v167 += v514;
                  ++v508;
                  result = v521;
                }
                while (v508 != v507);
              }
              break;
            case 4:
              v522 = *a4;
              v523 = **a4;
              if (v523 >= 1)
              {
                v524 = 0;
                result = 0;
                v525 = *(_QWORD *)(v168 + 152);
                v526 = v8[19];
                v527 = v522[1];
                v528 = *a5;
                v529 = (*a5)[1];
                v530 = **a5 - v529 * v527;
                do
                {
                  if ((int)v527 < 1)
                  {
                    v541 = result;
                  }
                  else
                  {
                    v531 = 0;
                    v532 = v522[2];
                    v533 = *a5;
                    v534 = v529 - v528[2] * v532;
                    do
                    {
                      if ((int)v532 < 1)
                      {
                        v541 = result;
                      }
                      else
                      {
                        v535 = 0;
                        v536 = v522[3];
                        v537 = *a5;
                        v538 = v533[2] - v533[3] * v536;
                        do
                        {
                          if ((int)v536 < 1)
                          {
                            v541 = result;
                          }
                          else
                          {
                            v539 = v537[3];
                            v540 = v536;
                            do
                            {
                              v541 = result + 1;
                              *(float *)(v526 + 4 * result) = (float)*(uint64_t *)(v525 + 8 * v167);
                              v167 += v539;
                              ++result;
                              --v540;
                            }
                            while (v540);
                          }
                          v167 += v538;
                          ++v535;
                          result = v541;
                        }
                        while (v535 != (_DWORD)v532);
                      }
                      v167 += v534;
                      ++v531;
                      result = v541;
                    }
                    while (v531 != (_DWORD)v527);
                  }
                  v167 += v530;
                  ++v524;
                  result = v541;
                }
                while (v524 != v523);
              }
              break;
            default:
              v487 = v8[6];
              if (v487)
              {
                v488 = 0;
                v489 = *(_QWORD *)(v168 + 152) + 8 * v167;
                v490 = v8[19];
                v491 = *a4;
                v492 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v493 = *a5;
                do
                {
                  v494 = 0;
                  if ((v492 & 0x80000000) == 0)
                  {
                    v495 = v492;
                    LODWORD(result) = v488;
                    do
                    {
                      v496 = ldiv((int)result, v491[v495]);
                      result = v496.quot;
                      v494 += v493[v495--] * v496.rem;
                    }
                    while (v495 != -1);
                  }
                  *(float *)(v490 + 4 * v488++) = (float)*(uint64_t *)(v489 + 8 * v494);
                }
                while (v488 != v487);
              }
              break;
          }
          break;
        case 3:
          v1437 = *a8;
          v1438 = *a7;
          v173 = *(_QWORD **)result;
          v174 = v173[1] - *v173;
          switch(v174 >> 2)
          {
            case 1:
              v175 = (v174 << 30) - 0x100000000;
              v176 = *(int *)((char *)*a4 + (v175 >> 30));
              if (v176 >= 1)
              {
                v177 = v175 >> 29;
                v178 = *(uint64_t *)((char *)*a5 + v177);
                v179 = *(_QWORD *)(*a6 + v177);
                v180 = (float *)(v8[19] + 4 * v1437);
                v181 = (uint64_t *)(v173[19] + 8 * v1438);
                v182 = 4 * v179;
                v183 = 8 * v178;
                do
                {
                  *v180 = (float)*v181;
                  v180 = (float *)((char *)v180 + v182);
                  v181 = (uint64_t *)((char *)v181 + v183);
                  --v176;
                }
                while (v176);
              }
              break;
            case 2:
              v1290 = (v174 << 30) - 0x200000000;
              v1291 = *(int *)((char *)*a4 + (v1290 >> 30));
              if (v1291 >= 1)
              {
                v1292 = 0;
                v1293 = v1290 >> 29;
                v1294 = *(uint64_t *)((char *)*a5 + v1293);
                v1295 = *(_QWORD *)(*a6 + v1293);
                v1296 = (v174 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v1296 >> 29));
                v1297 = *(_QWORD *)(*a6 + (v1296 >> 29));
                v1298 = *(int *)((char *)*a4 + (v1296 >> 30));
                v1299 = 4 * v1437;
                v1300 = 4 * v1295;
                v1301 = 4 * v1297;
                v1302 = 8 * v1438;
                v1303 = 8 * v1294;
                v1304 = 8 * result;
                do
                {
                  if (v1298 >= 1)
                  {
                    result = v8[19] + v1299;
                    v1305 = (uint64_t *)(v173[19] + v1302);
                    v1306 = v1298;
                    do
                    {
                      *(float *)result = (float)*v1305;
                      result += v1301;
                      v1305 = (uint64_t *)((char *)v1305 + v1304);
                      --v1306;
                    }
                    while (v1306);
                  }
                  ++v1292;
                  v1299 += v1300;
                  v1302 += v1303;
                }
                while (v1292 != v1291);
              }
              break;
            case 3:
              v1307 = (v174 << 30) - 0x300000000;
              v1308 = *a4;
              v1309 = *(int *)((char *)*a4 + (v1307 >> 30));
              if (v1309 >= 1)
              {
                v1310 = 0;
                v1311 = v174 << 30;
                v1312 = *a5;
                v1313 = v1307 >> 29;
                v1314 = *(uint64_t *)((char *)*a5 + (v1307 >> 29));
                v1315 = *a6;
                v1316 = *(_QWORD *)(*a6 + v1313);
                v1317 = (v1311 - 0x200000000) >> 29;
                v1318 = v1311 - 0x100000000;
                v1319 = *(uint64_t *)((char *)*a5 + v1317);
                v1320 = *(_QWORD *)(*a6 + v1317);
                v1321 = *(int *)((char *)v1308 + ((v1311 - 0x200000000) >> 30));
                v1322 = v1318 >> 32;
                v1323 = 4 * v1437;
                v1324 = 4 * v1316;
                v1325 = 4 * v1320;
                result = 8 * v1438;
                v1326 = 8 * v1314;
                v1327 = 8 * v1319;
                do
                {
                  if (v1321 >= 1)
                  {
                    v1328 = 0;
                    v1329 = v1308[v1322];
                    v1330 = (_QWORD *)*a2;
                    v1331 = 4 * *(_QWORD *)(v1315 + 8 * v1322);
                    v1332 = 8 * v1312[v1322];
                    v1333 = result;
                    v1334 = v1323;
                    do
                    {
                      if (v1329 >= 1)
                      {
                        v1335 = (float *)(v1330[19] + v1334);
                        v1336 = (uint64_t *)(v173[19] + v1333);
                        v1337 = v1329;
                        do
                        {
                          *v1335 = (float)*v1336;
                          v1335 = (float *)((char *)v1335 + v1331);
                          v1336 = (uint64_t *)((char *)v1336 + v1332);
                          --v1337;
                        }
                        while (v1337);
                      }
                      ++v1328;
                      v1334 += v1325;
                      v1333 += v1327;
                    }
                    while (v1328 != v1321);
                  }
                  ++v1310;
                  v1323 += v1324;
                  result += v1326;
                }
                while (v1310 != v1309);
              }
              break;
            case 4:
              v1338 = (v174 << 30) - 0x400000000;
              v1339 = *a4;
              v1555 = *(int *)((char *)*a4 + (v1338 >> 30));
              if (v1555 >= 1)
              {
                v1340 = 0;
                v1341 = *a5;
                v1342 = v1338 >> 29;
                v1343 = *a6;
                v1344 = v174 << 30;
                v1345 = (v1344 - 0x300000000) >> 29;
                v1346 = *(uint64_t *)((char *)*a5 + v1345);
                v1347 = *(_QWORD *)(*a6 + v1345);
                v1348 = v1344 - 0x200000000;
                v1349 = v1344 - 0x100000000;
                v1350 = *(int *)((char *)v1339 + ((v1344 - 0x300000000) >> 30));
                v1351 = v1348 >> 32;
                v1352 = v1349 >> 32;
                v1353 = 4 * v1437;
                v1571 = 4 * *(_QWORD *)(*a6 + v1342);
                result = 4 * v1347;
                v1354 = 8 * v1438;
                v1539 = 8 * *(uint64_t *)((char *)*a5 + v1342);
                v1355 = 8 * v1346;
                do
                {
                  if (v1350 >= 1)
                  {
                    v1356 = 0;
                    v1357 = v1339[v1351];
                    v1358 = 4 * *(_QWORD *)(v1343 + 8 * v1351);
                    v1359 = 8 * v1341[v1351];
                    v1360 = v1354;
                    v1361 = v1353;
                    do
                    {
                      if (v1357 >= 1)
                      {
                        v1362 = 0;
                        v1363 = v1339[v1352];
                        v1364 = (_QWORD *)*a2;
                        v1365 = 4 * *(_QWORD *)(v1343 + 8 * v1352);
                        v1366 = 8 * v1341[v1352];
                        v1367 = v1360;
                        v1368 = v1361;
                        do
                        {
                          if (v1363 >= 1)
                          {
                            v1369 = (float *)(v1364[19] + v1368);
                            v1370 = (uint64_t *)(v173[19] + v1367);
                            v1371 = v1363;
                            do
                            {
                              *v1369 = (float)*v1370;
                              v1369 = (float *)((char *)v1369 + v1365);
                              v1370 = (uint64_t *)((char *)v1370 + v1366);
                              --v1371;
                            }
                            while (v1371);
                          }
                          ++v1362;
                          v1368 += v1358;
                          v1367 += v1359;
                        }
                        while (v1362 != v1357);
                      }
                      ++v1356;
                      v1361 += result;
                      v1360 += v1355;
                    }
                    while (v1356 != v1350);
                  }
                  ++v1340;
                  v1353 += v1571;
                  v1354 += v1539;
                }
                while (v1340 != v1555);
              }
              break;
            case 5:
              v1372 = (v174 << 30) - 0x500000000;
              v1373 = *a4;
              v1488 = *(int *)((char *)*a4 + (v1372 >> 30));
              if (v1488 >= 1)
              {
                v1498 = 0;
                v1374 = *a5;
                v1375 = v1372 >> 29;
                v1376 = *a6;
                v1377 = ((v174 << 30) - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1377);
                v1378 = *(_QWORD *)(*a6 + v1377);
                v1572 = *(int *)((char *)v1373 + (((v174 << 30) - 0x400000000) >> 30));
                v1458 = ((v174 << 30) - 0x300000000) >> 32;
                v1379 = ((v174 << 30) - 0x200000000) >> 32;
                v1380 = ((v174 << 30) - 0x100000000) >> 32;
                v1523 = 4 * v1437;
                v1478 = 4 * *(_QWORD *)(*a6 + v1375);
                v1556 = 4 * v1378;
                v1510 = 8 * v1438;
                v1468 = 8 * *(uint64_t *)((char *)*a5 + v1375);
                v1540 = 8 * result;
                do
                {
                  if (v1572 >= 1)
                  {
                    v1381 = 0;
                    v1382 = v1373[v1458];
                    v1383 = 4 * *(_QWORD *)(v1376 + 8 * v1458);
                    v1384 = 8 * v1374[v1458];
                    v1385 = v1510;
                    v1386 = v1523;
                    do
                    {
                      if (v1382 >= 1)
                      {
                        v1387 = 0;
                        v1388 = v1373[v1379];
                        v1389 = 4 * *(_QWORD *)(v1376 + 8 * v1379);
                        v1390 = 8 * v1374[v1379];
                        v1391 = v1385;
                        v1392 = v1386;
                        do
                        {
                          if (v1388 >= 1)
                          {
                            v1393 = 0;
                            v1394 = v1373[v1380];
                            result = (uint64_t)a2;
                            v1395 = (_QWORD *)*a2;
                            v1396 = 4 * *(_QWORD *)(v1376 + 8 * v1380);
                            v1397 = 8 * v1374[v1380];
                            v1398 = v1391;
                            v1399 = v1392;
                            do
                            {
                              if (v1394 >= 1)
                              {
                                v1400 = (float *)(v1395[19] + v1399);
                                v1401 = (uint64_t *)(v173[19] + v1398);
                                LODWORD(result) = v1394;
                                do
                                {
                                  *v1400 = (float)*v1401;
                                  v1400 = (float *)((char *)v1400 + v1396);
                                  v1401 = (uint64_t *)((char *)v1401 + v1397);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1393;
                              v1399 += v1389;
                              v1398 += v1390;
                            }
                            while (v1393 != v1388);
                          }
                          ++v1387;
                          v1392 += v1383;
                          v1391 += v1384;
                        }
                        while (v1387 != v1382);
                      }
                      ++v1381;
                      v1386 += v1556;
                      v1385 += v1540;
                    }
                    while (v1381 != v1572);
                  }
                  v1523 += v1478;
                  v1510 += v1468;
                  ++v1498;
                }
                while (v1498 != v1488);
              }
              break;
            default:
              v1252 = (char *)a4[1];
              LODWORD(v1253) = 1;
              v1254 = -20;
              do
              {
                v1253 = *(int *)&v1252[v1254] * (uint64_t)(int)v1253;
                v1254 += 4;
              }
              while (v1254);
              v1432 = v173[6];
              if (v1432)
              {
                v1255 = 0;
                v1256 = (v174 << 30) - 0x500000000;
                v1257 = *a4;
                v1412 = *v8;
                v1258 = *a5;
                v1417 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1422 = ((unint64_t)(v1252 - (char *)*a4) >> 2) - 1;
                v1259 = *a6;
                v1487 = *(int *)((char *)*a4 + (v1256 >> 30));
                v1407 = ((v174 << 30) - 0x400000000) >> 32;
                v1260 = ((v174 << 30) - 0x200000000) >> 32;
                v1261 = ((v174 << 30) - 0x100000000) >> 32;
                v1477 = 4 * *(_QWORD *)(*a6 + (v1256 >> 29));
                v1457 = ((v174 << 30) - 0x300000000) >> 32;
                v1467 = 8 * *(uint64_t *)((char *)*a5 + (v1256 >> 29));
                v1427 = v1253;
                do
                {
                  v1262 = v1422;
                  if ((v1422 & 0x80000000) != 0)
                  {
                    v1263 = 0;
                    v1264 = v1417;
                  }
                  else
                  {
                    v1263 = 0;
                    LODWORD(result) = v1255;
                    v1264 = v1417;
                    do
                    {
                      v1265 = ldiv((int)result, v1257[v1262]);
                      result = v1265.quot;
                      v1263 += v1258[v1262--] * v1265.rem;
                    }
                    while (v1262 != -1);
                  }
                  v1449 = v1255;
                  v1266 = 0;
                  if ((v1264 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1255;
                    do
                    {
                      v1267 = ldiv((int)result, *(int *)(v1412 + 4 * v1264));
                      result = v1267.quot;
                      v1266 += *(_QWORD *)(v1259 + 8 * v1264--) * v1267.rem;
                    }
                    while (v1264 != -1);
                  }
                  if (v1487 >= 1)
                  {
                    v1268 = 0;
                    v1570 = v1257[v1407];
                    v1522 = 4 * (v1266 + v1437);
                    v1554 = 4 * *(_QWORD *)(v1259 + 8 * v1407);
                    v1509 = 8 * (v1263 + v1438);
                    v1538 = 8 * v1258[v1407];
                    do
                    {
                      v1497 = v1268;
                      if (v1570 >= 1)
                      {
                        v1269 = 0;
                        v1270 = v1257[v1457];
                        v1271 = 4 * *(_QWORD *)(v1259 + 8 * v1457);
                        v1272 = 8 * v1258[v1457];
                        v1274 = v1509;
                        v1273 = v1522;
                        do
                        {
                          if (v1270 >= 1)
                          {
                            v1275 = 0;
                            v1276 = v1257[v1260];
                            v1277 = 4 * *(_QWORD *)(v1259 + 8 * v1260);
                            v1278 = 8 * v1258[v1260];
                            result = v1274;
                            v1279 = v1273;
                            do
                            {
                              if (v1276 >= 1)
                              {
                                v1280 = 0;
                                v1281 = v1257[v1261];
                                v1282 = (_QWORD *)*a2;
                                v1283 = 4 * *(_QWORD *)(v1259 + 8 * v1261);
                                v1284 = 8 * v1258[v1261];
                                v1285 = result;
                                v1286 = v1279;
                                do
                                {
                                  if (v1281 >= 1)
                                  {
                                    v1287 = (float *)(v1282[19] + v1286);
                                    v1288 = (uint64_t *)(v173[19] + v1285);
                                    v1289 = v1281;
                                    do
                                    {
                                      *v1287 = (float)*v1288;
                                      v1287 = (float *)((char *)v1287 + v1283);
                                      v1288 = (uint64_t *)((char *)v1288 + v1284);
                                      --v1289;
                                    }
                                    while (v1289);
                                  }
                                  ++v1280;
                                  v1286 += v1277;
                                  v1285 += v1278;
                                }
                                while (v1280 != v1276);
                              }
                              ++v1275;
                              v1279 += v1271;
                              result += v1272;
                            }
                            while (v1275 != v1270);
                          }
                          ++v1269;
                          v1273 += v1554;
                          v1274 += v1538;
                        }
                        while (v1269 != v1570);
                      }
                      v1268 = v1497 + 1;
                      v1522 += v1477;
                      v1509 += v1467;
                    }
                    while (v1497 + 1 != v1487);
                  }
                  v1255 += v1427;
                }
                while (v1432 > v1449 + v1427);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<float,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  float v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  float *v27;
  BOOL *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL *v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  _BYTE *v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  _DWORD *v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  _BYTE *v95;
  uint64_t v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  float *v112;
  uint64_t v113;
  uint64_t v114;
  float *v115;
  _DWORD *v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  float *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float *v139;
  _QWORD *v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  float *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  _DWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  _DWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  ldiv_t v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int *v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int *v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  ldiv_t v241;
  int *v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t *v249;
  uint64_t v250;
  int *v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int i;
  int v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  int *v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int j;
  int v271;
  int k;
  int v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  ldiv_t v287;
  int *v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int *v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  int v307;
  uint64_t *v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  int *v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  int v323;
  uint64_t *v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  ldiv_t v342;
  int *v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t *v350;
  uint64_t v351;
  int *v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  int m;
  int v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  int *v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  int n;
  int v372;
  int ii;
  int v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int *v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  ldiv_t v388;
  int *v389;
  int v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int *v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  int v408;
  uint64_t *v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  int *v414;
  int v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t *v425;
  uint64_t v426;
  int v427;
  int v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int *v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  ldiv_t v444;
  int v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t *v451;
  int v452;
  uint64_t v453;
  int *v454;
  int v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  int v462;
  uint64_t *v463;
  int v464;
  uint64_t v465;
  int *v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t *v473;
  int v474;
  uint64_t *v475;
  int v476;
  int v477;
  uint64_t *v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int *v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  ldiv_t v490;
  int v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  int *v500;
  int v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  uint64_t v515;
  int *v516;
  int v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  uint64_t v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int *v541;
  uint64_t *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  ldiv_t v548;
  uint64_t v549;
  ldiv_t v550;
  int v551;
  int v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  float *v571;
  int v572;
  uint64_t v573;
  int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int v586;
  uint64_t v587;
  int *v588;
  int v589;
  int v590;
  uint64_t v591;
  uint64_t *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  int v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  float *v614;
  int v615;
  uint64_t v616;
  int *v617;
  int v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  float *v644;
  int v645;
  uint64_t v646;
  int *v647;
  uint64_t *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  float *v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  int *v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t *v680;
  ldiv_t v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  int quot;
  ldiv_t v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  float *v710;
  uint64_t v711;
  int v712;
  int v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  float *v733;
  uint64_t v734;
  uint64_t v735;
  int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  char *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  int *v744;
  uint64_t *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  ldiv_t v752;
  uint64_t v753;
  int v754;
  ldiv_t v755;
  int v756;
  int v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  int v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  int v769;
  _QWORD *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  int v775;
  _DWORD *v776;
  float *v777;
  uint64_t v778;
  int *v779;
  int v780;
  int v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  int v794;
  _DWORD *v795;
  float *v796;
  uint64_t v797;
  int *v798;
  int v799;
  int v800;
  uint64_t *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  int v817;
  int v818;
  _QWORD *v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  int v824;
  _DWORD *v825;
  float *v826;
  uint64_t v827;
  int *v828;
  int v829;
  uint64_t *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  int v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  int v848;
  int v849;
  _QWORD *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  _DWORD *v856;
  float *v857;
  uint64_t v858;
  int *v859;
  uint64_t *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  int v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  int v873;
  int v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  _DWORD *v886;
  float *v887;
  uint64_t v888;
  uint64_t v889;
  int *v890;
  unint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t *v894;
  ldiv_t v895;
  uint64_t v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  ldiv_t v902;
  uint64_t v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  int v911;
  int v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  int v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  float *v924;
  uint64_t v925;
  int v926;
  int v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  int v934;
  int v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  int v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  float *v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  char *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  int *v958;
  uint64_t *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  ldiv_t v966;
  uint64_t v967;
  int v968;
  ldiv_t v969;
  int v970;
  int v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  int v976;
  int v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  int v982;
  int v983;
  _QWORD *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  int v989;
  _DWORD *v990;
  float *v991;
  uint64_t v992;
  int *v993;
  int v994;
  int v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int v1008;
  _DWORD *v1009;
  float *v1010;
  uint64_t v1011;
  int *v1012;
  int v1013;
  int v1014;
  uint64_t *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  int v1032;
  _QWORD *v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  int v1038;
  _DWORD *v1039;
  float *v1040;
  uint64_t v1041;
  int *v1042;
  int v1043;
  uint64_t *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  int v1056;
  int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  int v1062;
  int v1063;
  _QWORD *v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  int v1069;
  _DWORD *v1070;
  float *v1071;
  uint64_t v1072;
  int *v1073;
  uint64_t *v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  int v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  int v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  int v1093;
  int v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  int v1099;
  _DWORD *v1100;
  float *v1101;
  char *v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  int *v1107;
  uint64_t *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  ldiv_t v1115;
  uint64_t v1116;
  ldiv_t v1117;
  int v1118;
  int v1119;
  int v1120;
  uint64_t v1121;
  uint64_t v1122;
  int v1123;
  int v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  int v1128;
  int v1129;
  uint64_t *v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  _QWORD *v1135;
  uint64_t v1136;
  float *v1137;
  uint64_t v1138;
  int v1139;
  uint64_t v1140;
  int v1141;
  int v1142;
  uint64_t v1143;
  uint64_t *v1144;
  int v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  _QWORD *v1154;
  uint64_t v1155;
  float *v1156;
  uint64_t v1157;
  int v1158;
  uint64_t v1159;
  int *v1160;
  int v1161;
  int v1162;
  uint64_t v1163;
  uint64_t *v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  int v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  int v1177;
  int v1178;
  _QWORD *v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  _QWORD *v1184;
  uint64_t v1185;
  float *v1186;
  uint64_t v1187;
  int v1188;
  uint64_t v1189;
  int *v1190;
  uint64_t v1191;
  uint64_t *v1192;
  uint64_t v1193;
  uint64_t v1194;
  int v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  int v1200;
  int v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  int v1206;
  int v1207;
  _QWORD *v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  _QWORD *v1213;
  uint64_t v1214;
  uint64_t v1215;
  int v1216;
  uint64_t v1217;
  int *v1218;
  uint64_t v1219;
  uint64_t *v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  int v1225;
  int v1226;
  uint64_t v1227;
  int v1228;
  int v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  int v1234;
  int v1235;
  _QWORD *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  _QWORD *v1241;
  uint64_t v1242;
  float *v1243;
  uint64_t v1244;
  int v1245;
  char *v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  int *v1250;
  uint64_t *v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  ldiv_t v1258;
  uint64_t v1259;
  int v1260;
  ldiv_t v1261;
  int v1262;
  int v1263;
  int v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  int v1269;
  int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  int v1275;
  int v1276;
  _QWORD *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  _DWORD *v1282;
  _DWORD *v1283;
  int v1284;
  uint64_t v1285;
  int v1286;
  int v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  _DWORD *v1300;
  int v1301;
  uint64_t v1302;
  int *v1303;
  int v1304;
  int v1305;
  uint64_t v1306;
  uint64_t *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  int v1323;
  int v1324;
  _QWORD *v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  _DWORD *v1330;
  _DWORD *v1331;
  int v1332;
  uint64_t v1333;
  int *v1334;
  int v1335;
  uint64_t *v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  int v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int v1351;
  int v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  int v1357;
  int v1358;
  _QWORD *v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  _DWORD *v1364;
  _DWORD *v1365;
  int v1366;
  uint64_t v1367;
  int *v1368;
  uint64_t *v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  int v1376;
  int v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  int v1382;
  int v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  int v1388;
  int v1389;
  _QWORD *v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  _DWORD *v1395;
  _DWORD *v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  unint64_t v1418;
  unint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  unint64_t v1425;
  unint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  int v1468;
  int v1469;
  uint64_t v1470;
  uint64_t v1471;
  int v1472;
  uint64_t v1473;
  int v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  uint64_t v1480;
  uint64_t v1481;
  int v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  uint64_t v1488;
  uint64_t v1489;
  int v1490;
  int v1491;
  uint64_t v1492;
  int v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  int v1502;
  int v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  _QWORD *v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  _QWORD *v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  int v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  int v1559;
  uint64_t v1560;
  int v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1566;
  int v1567;
  int v1568;
  int v1569;
  int v1570;
  int v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  int v1579;
  int v1580;

  v8 = *(uint64_t **)a2;
  v11 = (uint64_t *)a2;
  v12 = result;
  switch(*(_DWORD *)(*(_QWORD *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v13 = v8[6];
          if (v13)
            result = (uint64_t)memset((void *)v8[19], **(float **)(*(_QWORD *)result + 152) != 0.0, v13);
          break;
        case 1:
          v26 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v26)
          {
            v27 = *(float **)(*(_QWORD *)result + 152);
            v28 = (BOOL *)v8[19];
            v29 = 4 * v26;
            do
            {
              v30 = *v27++;
              *v28++ = v30 != 0.0;
              v29 -= 4;
            }
            while (v29);
          }
          break;
        case 2:
          v31 = *a7;
          v32 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v33 = **a4;
              if ((int)v33 >= 1)
              {
                v34 = (BOOL *)v8[19];
                v35 = (float *)(*(_QWORD *)(v32 + 152) + 4 * v31);
                v36 = 4 * **a5;
                do
                {
                  *v34++ = *v35 != 0.0;
                  v35 = (float *)((char *)v35 + v36);
                  --v33;
                }
                while (v33);
              }
              break;
            case 2:
              v188 = **a4;
              if (v188 >= 1)
              {
                v189 = 0;
                v190 = 0;
                v191 = *(_QWORD *)(v32 + 152);
                v192 = v8[19];
                v193 = (*a4)[1];
                v194 = (*a5)[1];
                v195 = **a5 - v194 * v193;
                do
                {
                  v196 = v193;
                  if ((int)v193 >= 1)
                  {
                    do
                    {
                      result = *(float *)(v191 + 4 * v31) != 0.0;
                      *(_BYTE *)(v192 + v190++) = result;
                      v31 += v194;
                      --v196;
                    }
                    while (v196);
                  }
                  v31 += v195;
                  ++v189;
                }
                while (v189 != v188);
              }
              break;
            case 3:
              v197 = *a4;
              v198 = **a4;
              if (v198 >= 1)
              {
                v199 = 0;
                result = 0;
                v200 = *(_QWORD *)(v32 + 152);
                v201 = v8[19];
                v202 = v197[1];
                v203 = *a5;
                v204 = (*a5)[1];
                v205 = **a5 - v204 * v202;
                do
                {
                  if ((int)v202 < 1)
                  {
                    v212 = result;
                  }
                  else
                  {
                    v206 = 0;
                    v207 = v197[2];
                    v208 = *a5;
                    v209 = v204 - v203[2] * v207;
                    do
                    {
                      if ((int)v207 < 1)
                      {
                        v212 = result;
                      }
                      else
                      {
                        v210 = v208[2];
                        v211 = v207;
                        do
                        {
                          v212 = result + 1;
                          *(_BYTE *)(v201 + result) = *(float *)(v200 + 4 * v31) != 0.0;
                          v31 += v210;
                          ++result;
                          --v211;
                        }
                        while (v211);
                      }
                      v31 += v209;
                      ++v206;
                      result = v212;
                    }
                    while (v206 != (_DWORD)v202);
                  }
                  v31 += v205;
                  ++v199;
                  result = v212;
                }
                while (v199 != v198);
              }
              break;
            case 4:
              v213 = *a4;
              v214 = **a4;
              if (v214 >= 1)
              {
                v215 = 0;
                result = 0;
                v216 = *(_QWORD *)(v32 + 152);
                v217 = v8[19];
                v218 = v213[1];
                v219 = *a5;
                v220 = (*a5)[1];
                v221 = **a5 - v220 * v218;
                do
                {
                  if ((int)v218 < 1)
                  {
                    v232 = result;
                  }
                  else
                  {
                    v222 = 0;
                    v223 = v213[2];
                    v224 = *a5;
                    v225 = v220 - v219[2] * v223;
                    do
                    {
                      if ((int)v223 < 1)
                      {
                        v232 = result;
                      }
                      else
                      {
                        v226 = 0;
                        v227 = v213[3];
                        v228 = *a5;
                        v229 = v224[2] - v224[3] * v227;
                        do
                        {
                          if ((int)v227 < 1)
                          {
                            v232 = result;
                          }
                          else
                          {
                            v230 = v228[3];
                            v231 = v227;
                            do
                            {
                              v232 = result + 1;
                              *(_BYTE *)(v217 + result) = *(float *)(v216 + 4 * v31) != 0.0;
                              v31 += v230;
                              ++result;
                              --v231;
                            }
                            while (v231);
                          }
                          v31 += v229;
                          ++v226;
                          result = v232;
                        }
                        while (v226 != (_DWORD)v223);
                      }
                      v31 += v225;
                      ++v222;
                      result = v232;
                    }
                    while (v222 != (_DWORD)v218);
                  }
                  v31 += v221;
                  ++v215;
                  result = v232;
                }
                while (v215 != v214);
              }
              break;
            default:
              v178 = v8[6];
              if (v178)
              {
                v179 = 0;
                v180 = *(_QWORD *)(v32 + 152) + 4 * v31;
                v181 = v8[19];
                v182 = *a4;
                v183 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v184 = *a5;
                do
                {
                  v185 = 0;
                  if ((v183 & 0x80000000) == 0)
                  {
                    v186 = v183;
                    LODWORD(result) = v179;
                    do
                    {
                      v187 = ldiv((int)result, v182[v186]);
                      result = v187.quot;
                      v185 += v184[v186--] * v187.rem;
                    }
                    while (v186 != -1);
                  }
                  *(_BYTE *)(v181 + v179++) = *(float *)(v180 + 4 * v185) != 0.0;
                }
                while (v179 != v178);
              }
              break;
          }
          break;
        case 3:
          v1427 = *a7;
          v37 = *a8;
          v38 = *(_QWORD **)result;
          v39 = v38[1] - *v38;
          switch(v39 >> 2)
          {
            case 1:
              v40 = (v39 << 30) - 0x100000000;
              v41 = *(int *)((char *)*a4 + (v40 >> 30));
              if (v41 >= 1)
              {
                v42 = v40 >> 29;
                v43 = *(uint64_t *)((char *)*a5 + v42);
                v44 = *(_QWORD *)(*a6 + v42);
                v45 = (BOOL *)(v8[19] + v37);
                v46 = (float *)(v38[19] + 4 * v1427);
                v47 = 4 * v43;
                do
                {
                  *v45 = *v46 != 0.0;
                  v45 += v44;
                  v46 = (float *)((char *)v46 + v47);
                  --v41;
                }
                while (v41);
              }
              break;
            case 2:
              v573 = (v39 << 30) - 0x200000000;
              v574 = *(int *)((char *)*a4 + (v573 >> 30));
              if (v574 >= 1)
              {
                v575 = 0;
                v576 = v573 >> 29;
                v577 = *(uint64_t *)((char *)*a5 + v576);
                v578 = *(_QWORD *)(*a6 + v576);
                v579 = (v39 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v579 >> 29));
                v580 = *(_QWORD *)(*a6 + (v579 >> 29));
                v581 = *(int *)((char *)*a4 + (v579 >> 30));
                v582 = 4 * v1427;
                v583 = 4 * v577;
                v584 = 4 * result;
                do
                {
                  if (v581 >= 1)
                  {
                    v585 = v8[19];
                    result = v38[19] + v582;
                    v586 = v581;
                    do
                    {
                      *(_BYTE *)(v585 + v37) = *(float *)result != 0.0;
                      v585 += v580;
                      result += v584;
                      --v586;
                    }
                    while (v586);
                  }
                  v37 += v578;
                  ++v575;
                  v582 += v583;
                }
                while (v575 != v574);
              }
              break;
            case 3:
              v587 = (v39 << 30) - 0x300000000;
              v588 = *a4;
              v589 = *(int *)((char *)*a4 + (v587 >> 30));
              if (v589 >= 1)
              {
                v590 = 0;
                v591 = v39 << 30;
                v592 = *a5;
                v593 = v587 >> 29;
                v594 = *(uint64_t *)((char *)*a5 + (v587 >> 29));
                v595 = *a6;
                v596 = *(_QWORD *)(*a6 + v593);
                v597 = v591 - 0x200000000;
                v598 = (v591 - 0x200000000) >> 29;
                v599 = v591 - 0x100000000;
                v600 = *(uint64_t *)((char *)*a5 + v598);
                v601 = *(_QWORD *)(*a6 + v598);
                v602 = *(int *)((char *)v588 + (v597 >> 30));
                v603 = v599 >> 32;
                v604 = 4 * v1427;
                result = 4 * v594;
                v605 = 4 * v600;
                do
                {
                  if (v602 >= 1)
                  {
                    v606 = 0;
                    v607 = *(_QWORD *)(v595 + 8 * v603);
                    v608 = v588[v603];
                    v609 = (_QWORD *)*v11;
                    v610 = 4 * v592[v603];
                    v611 = v604;
                    v612 = v37;
                    do
                    {
                      if (v608 >= 1)
                      {
                        v613 = v609[19];
                        v614 = (float *)(v38[19] + v611);
                        v615 = v608;
                        do
                        {
                          *(_BYTE *)(v613 + v612) = *v614 != 0.0;
                          v613 += v607;
                          v614 = (float *)((char *)v614 + v610);
                          --v615;
                        }
                        while (v615);
                      }
                      v612 += v601;
                      ++v606;
                      v611 += v605;
                    }
                    while (v606 != v602);
                  }
                  v37 += v596;
                  ++v590;
                  v604 += result;
                }
                while (v590 != v589);
              }
              break;
            case 4:
              v616 = (v39 << 30) - 0x400000000;
              v617 = *a4;
              v1568 = *(int *)((char *)*a4 + (v616 >> 30));
              if (v1568 >= 1)
              {
                v618 = 0;
                v619 = v39 << 30;
                v620 = *a5;
                v621 = v616 >> 29;
                v622 = *(uint64_t *)((char *)*a5 + v621);
                v623 = *a6;
                v1551 = *(_QWORD *)(*a6 + v621);
                v624 = (v39 << 30) - 0x300000000;
                v625 = *(_QWORD *)(*a6 + (v624 >> 29));
                v626 = *(int *)((char *)v617 + (v624 >> 30));
                v1518 = (v619 - 0x200000000) >> 32;
                v627 = (v619 - 0x100000000) >> 32;
                result = 4 * v1427;
                v628 = 4 * *(uint64_t *)((char *)*a5 + (v624 >> 29));
                do
                {
                  v629 = v37;
                  if (v626 >= 1)
                  {
                    v630 = 0;
                    v631 = *(_QWORD *)(v623 + 8 * v1518);
                    v632 = v617[v1518];
                    v633 = 4 * v620[v1518];
                    v634 = result;
                    v635 = v37;
                    do
                    {
                      if (v632 >= 1)
                      {
                        v636 = 0;
                        v637 = *(_QWORD *)(v623 + 8 * v627);
                        v638 = v617[v627];
                        v639 = *v11;
                        v640 = 4 * v620[v627];
                        v641 = v634;
                        v642 = v635;
                        do
                        {
                          if (v638 >= 1)
                          {
                            v643 = *(_QWORD *)(v639 + 152);
                            v644 = (float *)(v38[19] + v641);
                            v645 = v638;
                            do
                            {
                              *(_BYTE *)(v643 + v642) = *v644 != 0.0;
                              v643 += v637;
                              v644 = (float *)((char *)v644 + v640);
                              --v645;
                            }
                            while (v645);
                          }
                          v642 += v631;
                          ++v636;
                          v641 += v633;
                        }
                        while (v636 != v632);
                      }
                      v635 += v625;
                      ++v630;
                      v634 += v628;
                    }
                    while (v630 != v626);
                  }
                  v37 = v629 + v1551;
                  ++v618;
                  result += 4 * v622;
                }
                while (v618 != v1568);
              }
              break;
            case 5:
              v646 = (v39 << 30) - 0x500000000;
              v647 = *a4;
              v1483 = *(int *)((char *)*a4 + (v646 >> 30));
              if (v1483 >= 1)
              {
                v1493 = 0;
                v648 = *a5;
                v649 = v646 >> 29;
                v650 = *a6;
                v1473 = *(_QWORD *)(*a6 + v649);
                v651 = (v39 << 30) - 0x400000000;
                v1552 = *(_QWORD *)(*a6 + (v651 >> 29));
                v1569 = *(int *)((char *)v647 + (v651 >> 30));
                v1453 = ((v39 << 30) - 0x300000000) >> 32;
                v1519 = ((v39 << 30) - 0x200000000) >> 32;
                result = ((v39 << 30) - 0x100000000) >> 32;
                v1505 = 4 * v1427;
                v1463 = 4 * *(uint64_t *)((char *)*a5 + v649);
                v1534 = 4 * *(uint64_t *)((char *)*a5 + (v651 >> 29));
                do
                {
                  v1438 = v37;
                  if (v1569 >= 1)
                  {
                    v652 = 0;
                    v653 = *(_QWORD *)(v650 + 8 * v1453);
                    v654 = v647[v1453];
                    v655 = 4 * v648[v1453];
                    v656 = v1505;
                    v657 = v37;
                    do
                    {
                      if (v654 >= 1)
                      {
                        v658 = 0;
                        v659 = *(_QWORD *)(v650 + 8 * v1519);
                        v660 = v647[v1519];
                        v661 = 4 * v648[v1519];
                        v662 = v656;
                        v663 = v657;
                        do
                        {
                          if (v660 >= 1)
                          {
                            v664 = 0;
                            v665 = *(_QWORD *)(v650 + 8 * result);
                            v666 = v647[result];
                            v667 = *v11;
                            v668 = 4 * v648[result];
                            v669 = v662;
                            v670 = v663;
                            do
                            {
                              if (v666 >= 1)
                              {
                                v671 = *(_QWORD *)(v667 + 152);
                                v672 = (float *)(v38[19] + v669);
                                v673 = v666;
                                do
                                {
                                  *(_BYTE *)(v671 + v670) = *v672 != 0.0;
                                  v671 += v665;
                                  v672 = (float *)((char *)v672 + v668);
                                  --v673;
                                }
                                while (v673);
                              }
                              v670 += v659;
                              ++v664;
                              v669 += v661;
                            }
                            while (v664 != v660);
                          }
                          v663 += v653;
                          ++v658;
                          v662 += v655;
                        }
                        while (v658 != v654);
                      }
                      v657 += v1552;
                      ++v652;
                      v656 += v1534;
                    }
                    while (v652 != v1569);
                  }
                  v37 = v1438 + v1473;
                  v1505 += v1463;
                  ++v1493;
                }
                while (v1493 != v1483);
              }
              break;
            default:
              v536 = (char *)a4[1];
              LODWORD(v537) = 1;
              v538 = -20;
              do
              {
                v537 = *(int *)&v536[v538] * (uint64_t)(int)v537;
                v538 += 4;
              }
              while (v538);
              v1425 = v38[6];
              if (v1425)
              {
                v539 = 0;
                v540 = (v39 << 30) - 0x500000000;
                v541 = *a4;
                v1402 = *v8;
                v1412 = ((unint64_t)(v536 - (char *)*a4) >> 2) - 1;
                v542 = *a5;
                v543 = *a6;
                v1462 = *(_QWORD *)(*a6 + (v540 >> 29));
                v1472 = *(int *)((char *)*a4 + (v540 >> 30));
                v1407 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1398 = ((v39 << 30) - 0x400000000) >> 32;
                v1444 = ((v39 << 30) - 0x300000000) >> 32;
                v1517 = ((v39 << 30) - 0x200000000) >> 32;
                v544 = ((v39 << 30) - 0x100000000) >> 32;
                v1452 = 4 * *(uint64_t *)((char *)*a5 + (v540 >> 29));
                v1437 = *a8;
                v1417 = v537;
                do
                {
                  v545 = v1412;
                  if ((v1412 & 0x80000000) != 0)
                  {
                    v546 = 0;
                    v547 = v1407;
                  }
                  else
                  {
                    v546 = 0;
                    LODWORD(result) = v539;
                    v547 = v1407;
                    do
                    {
                      v548 = ldiv((int)result, v541[v545]);
                      result = v548.quot;
                      v546 += v542[v545--] * v548.rem;
                    }
                    while (v545 != -1);
                  }
                  v1433 = v539;
                  v549 = 0;
                  if ((v547 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v539;
                    do
                    {
                      v550 = ldiv((int)result, *(int *)(v1402 + 4 * v547));
                      result = v550.quot;
                      v549 += *(_QWORD *)(v543 + 8 * v547--) * v550.rem;
                    }
                    while (v547 != -1);
                  }
                  if (v1472 >= 1)
                  {
                    v551 = 0;
                    v1550 = *(_QWORD *)(v543 + 8 * v1398);
                    v1567 = v541[v1398];
                    v1492 = 4 * (v546 + v1427);
                    v1504 = v549 + v1437;
                    v1533 = 4 * v542[v1398];
                    do
                    {
                      v1482 = v551;
                      if (v1567 >= 1)
                      {
                        v552 = 0;
                        v553 = *(_QWORD *)(v543 + 8 * v1444);
                        v554 = v541[v1444];
                        v555 = 4 * v542[v1444];
                        v557 = v1492;
                        v556 = v1504;
                        do
                        {
                          if (v554 >= 1)
                          {
                            v558 = 0;
                            v559 = *(_QWORD *)(v543 + 8 * v1517);
                            v560 = v541[v1517];
                            v561 = 4 * v542[v1517];
                            result = v557;
                            v562 = v556;
                            do
                            {
                              if (v560 >= 1)
                              {
                                v563 = 0;
                                v564 = *(_QWORD *)(v543 + 8 * v544);
                                v565 = v541[v544];
                                v566 = *v11;
                                v567 = 4 * v542[v544];
                                v568 = result;
                                v569 = v562;
                                do
                                {
                                  if (v565 >= 1)
                                  {
                                    v570 = *(_QWORD *)(v566 + 152);
                                    v571 = (float *)(v38[19] + v568);
                                    v572 = v565;
                                    do
                                    {
                                      *(_BYTE *)(v570 + v569) = *v571 != 0.0;
                                      v570 += v564;
                                      v571 = (float *)((char *)v571 + v567);
                                      --v572;
                                    }
                                    while (v572);
                                  }
                                  v569 += v559;
                                  ++v563;
                                  v568 += v561;
                                }
                                while (v563 != v560);
                              }
                              v562 += v553;
                              ++v558;
                              result += v555;
                            }
                            while (v558 != v554);
                          }
                          v556 += v1550;
                          ++v552;
                          v557 += v1533;
                        }
                        while (v552 != v1567);
                      }
                      v1504 += v1462;
                      v551 = v1482 + 1;
                      v1492 += v1452;
                    }
                    while (v1482 + 1 != v1472);
                  }
                  v539 += v1417;
                }
                while (v1425 > v1433 + v1417);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          goto LABEL_6;
        case 1:
          v48 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v48)
          {
            v49 = *(float **)(*(_QWORD *)result + 152);
            v50 = (_BYTE *)v8[19];
            v51 = 4 * v48;
            do
            {
              v52 = *v49++;
              *v50++ = (int)v52;
              v51 -= 4;
            }
            while (v51);
          }
          break;
        case 2:
          v53 = *a7;
          v54 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v55 = 0;
                v56 = *(_QWORD *)(v54 + 152);
                v57 = v8[19];
                do
                {
                  *(_BYTE *)(v57 + v55) = (int)*(float *)(v56 + 4 * v53);
                  v53 += **a5;
                  ++v55;
                }
                while (**a4 > (int)v55);
              }
              break;
            case 2:
              v242 = *a4;
              v243 = **a4;
              if (v243 >= 1)
              {
                v244 = 0;
                v245 = 0;
                v246 = *(_QWORD *)(v54 + 152);
                v247 = v8[19];
                do
                {
                  v248 = v242[1];
                  if (v248 < 1)
                  {
                    v249 = *a5;
                    v250 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v247 + v245 + result) = (int)*(float *)(v246 + 4 * v53);
                      v249 = *a5;
                      v250 = (*a5)[1];
                      v53 += v250;
                      v242 = *a4;
                      v248 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v248);
                    v243 = *v242;
                    v245 += result;
                  }
                  v53 = *v249 + v53 - v250 * v248;
                  ++v244;
                }
                while (v244 < v243);
              }
              break;
            case 3:
              v251 = *a4;
              v252 = **a4;
              if (v252 >= 1)
              {
                v253 = 0;
                v254 = 0;
                v255 = *(_QWORD *)(v54 + 152);
                v256 = v8[19];
                do
                {
                  v257 = v251[1];
                  if (v257 < 1)
                  {
                    v261 = *a5;
                    v262 = (*a5)[1];
                  }
                  else
                  {
                    for (i = 0; i < v257; ++i)
                    {
                      v259 = v251[2];
                      if (v259 < 1)
                      {
                        v261 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v260 = 0;
                        do
                        {
                          *(_BYTE *)(v256 + v254 + v260) = (int)*(float *)(v255 + 4 * v53);
                          v261 = *a5;
                          result = (*a5)[2];
                          v53 += result;
                          v251 = *a4;
                          v259 = (*a4)[2];
                          ++v260;
                        }
                        while ((int)v260 < v259);
                        v254 += v260;
                      }
                      v262 = v261[1];
                      v53 = v262 + v53 - result * v259;
                      v257 = v251[1];
                    }
                    v252 = *v251;
                  }
                  v53 = *v261 + v53 - v262 * v257;
                  ++v253;
                }
                while (v253 < v252);
              }
              break;
            case 4:
              v263 = *a4;
              v264 = **a4;
              if (v264 >= 1)
              {
                v265 = 0;
                v266 = 0;
                v267 = *(_QWORD *)(v54 + 152);
                v268 = v8[19];
                do
                {
                  v269 = v263[1];
                  if (v269 < 1)
                  {
                    v275 = *a5;
                    v277 = (*a5)[1];
                  }
                  else
                  {
                    for (j = 0; j < v269; ++j)
                    {
                      v271 = v263[2];
                      if (v271 < 1)
                      {
                        v275 = *a5;
                        v276 = (*a5)[2];
                      }
                      else
                      {
                        for (k = 0; k < v271; ++k)
                        {
                          v273 = v263[3];
                          if (v273 < 1)
                          {
                            v275 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v274 = 0;
                            do
                            {
                              *(_BYTE *)(v268 + v266 + v274) = (int)*(float *)(v267 + 4 * v53);
                              v275 = *a5;
                              result = (*a5)[3];
                              v53 += result;
                              v263 = *a4;
                              v273 = (*a4)[3];
                              ++v274;
                            }
                            while ((int)v274 < v273);
                            v266 += v274;
                          }
                          v276 = v275[2];
                          v53 = v276 + v53 - result * v273;
                          v271 = v263[2];
                        }
                      }
                      v277 = v275[1];
                      v53 = v277 + v53 - v276 * v271;
                      v269 = v263[1];
                    }
                    v264 = *v263;
                  }
                  v53 = *v275 + v53 - v277 * v269;
                  ++v265;
                }
                while (v265 < v264);
              }
              break;
            default:
              if (v8[6])
              {
                v233 = 0;
                v234 = *(_QWORD *)(v54 + 152) + 4 * v53;
                v235 = v8[19];
                do
                {
                  v236 = *a4;
                  v237 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v238 = 0;
                  v239 = (v237 - 1);
                  if ((int)v237 - 1 >= 0)
                  {
                    v240 = *a5;
                    LODWORD(result) = v233;
                    do
                    {
                      v241 = ldiv((int)result, v236[v239]);
                      result = v241.quot;
                      v238 += v240[v239--] * v241.rem;
                    }
                    while (v239 != -1);
                  }
                  *(_BYTE *)(v235 + v233++) = (int)*(float *)(v234 + 4 * v238);
                }
                while (v233 < *(_QWORD *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          v1566 = *a7;
          v58 = *a8;
          v59 = *(_QWORD **)result;
          v60 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v60 >> 2)
          {
            case 1:
              v61 = (v60 << 30) - 0x100000000;
              v62 = *(int *)((char *)*a4 + (v61 >> 30));
              if (v62 >= 1)
              {
                v63 = v61 >> 29;
                v64 = *(uint64_t *)((char *)*a5 + v63);
                v65 = *(_QWORD *)(*a6 + v63);
                v66 = (_BYTE *)(v8[19] + v58);
                v67 = (float *)(v59[19] + 4 * v1566);
                v68 = 4 * v64;
                do
                {
                  *v66 = (int)*v67;
                  v66 += v65;
                  v67 = (float *)((char *)v67 + v68);
                  --v62;
                }
                while (v62);
              }
              break;
            case 2:
              v696 = (v60 << 30) - 0x200000000;
              v697 = *(int *)((char *)*a4 + (v696 >> 30));
              if (v697 >= 1)
              {
                v698 = 0;
                v699 = v696 >> 29;
                v700 = *(uint64_t *)((char *)*a5 + v699);
                v701 = *(_QWORD *)(*a6 + v699);
                v702 = 4 * v1566;
                v703 = 4 * v700;
                do
                {
                  v704 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v705 = *(int *)((char *)*a4 + (v704 >> 30));
                  if (v705 >= 1)
                  {
                    v706 = v704 >> 29;
                    v707 = *(uint64_t *)((char *)*a5 + v706);
                    v708 = *(_QWORD *)(*a6 + v706);
                    v709 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v710 = (float *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v702);
                    result = 4 * v707;
                    do
                    {
                      *(_BYTE *)(v709 + v58) = (int)*v710;
                      v709 += v708;
                      v710 = (float *)((char *)v710 + result);
                      --v705;
                    }
                    while (v705);
                  }
                  v58 += v701;
                  ++v698;
                  v702 += v703;
                }
                while (v698 != v697);
              }
              break;
            case 3:
              v711 = (v60 << 30) - 0x300000000;
              v712 = *(int *)((char *)*a4 + (v711 >> 30));
              if (v712 >= 1)
              {
                v713 = 0;
                v714 = v711 >> 29;
                v715 = *(uint64_t *)((char *)*a5 + v714);
                v716 = *(_QWORD *)(*a6 + v714);
                v717 = 4 * v1566;
                v718 = 4 * v715;
                do
                {
                  v719 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v720 = *(int *)((char *)*a4 + (v719 >> 30));
                  if (v720 >= 1)
                  {
                    v721 = 0;
                    v722 = v719 >> 29;
                    v723 = *(uint64_t *)((char *)*a5 + v722);
                    v724 = *(_QWORD *)(*a6 + v722);
                    result = 4 * v723;
                    v725 = v717;
                    v726 = v58;
                    do
                    {
                      v727 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v728 = *(int *)((char *)*a4 + (v727 >> 30));
                      if (v728 >= 1)
                      {
                        v729 = v727 >> 29;
                        v730 = *(uint64_t *)((char *)*a5 + v729);
                        v731 = *(_QWORD *)(*a6 + v729);
                        v732 = *(_QWORD *)(*v11 + 152);
                        v733 = (float *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v725);
                        v734 = 4 * v730;
                        do
                        {
                          *(_BYTE *)(v732 + v726) = (int)*v733;
                          v732 += v731;
                          v733 = (float *)((char *)v733 + v734);
                          --v728;
                        }
                        while (v728);
                      }
                      v726 += v724;
                      ++v721;
                      v725 += result;
                    }
                    while (v721 != v720);
                  }
                  v58 += v716;
                  ++v713;
                  v717 += v718;
                }
                while (v713 != v712);
              }
              break;
            case 4:
              goto LABEL_549;
            case 5:
              v735 = (v60 << 30) - 0x500000000;
              v736 = *(int *)((char *)*a4 + (v735 >> 30));
              if (v736 >= 1)
              {
                v737 = v735 >> 29;
                v738 = *(uint64_t *)((char *)*a5 + v737);
                v739 = *(_QWORD *)(*a6 + v737);
                do
                {
                  v1566 += v738;
                  v58 += v739;
                  --v736;
                }
                while (v736);
              }
              break;
            default:
              LODWORD(v674) = 1;
              v675 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v674 = a4[1][v675++] * (uint64_t)(int)v674;
              while (v675 * 4);
              if (v59[6])
              {
                result = 0;
                v1494 = *a8;
                v1506 = v674;
                do
                {
                  v676 = *a4;
                  v677 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v678 = (v677 - 1);
                  v1520 = v59;
                  v1535 = result;
                  v679 = 0;
                  if ((int)v677 - 1 >= 0)
                  {
                    v680 = *a5;
                    do
                    {
                      v681 = ldiv((int)result, v676[v678]);
                      LODWORD(result) = v681.quot;
                      v679 += v680[v678--] * v681.rem;
                    }
                    while (v678 != -1);
                  }
                  v682 = *(_QWORD *)*v11;
                  v683 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v682) >> 2;
                  v684 = *a6;
                  v685 = 0;
                  v686 = (v683 - 1);
                  if ((int)v683 - 1 >= 0)
                  {
                    quot = v1535;
                    do
                    {
                      v688 = ldiv(quot, *(int *)(v682 + 4 * v686));
                      quot = v688.quot;
                      v685 += *(_QWORD *)(v684 + 8 * v686--) * v688.rem;
                    }
                    while (v686 != -1);
                  }
                  v59 = v1520;
                  v689 = ((v59[1] - *v59) << 30) - 0x500000000;
                  v690 = *(int *)((char *)v676 + (v689 >> 30));
                  if (v690 >= 1)
                  {
                    v691 = v679 + v1566;
                    v692 = v689 >> 29;
                    v693 = *(uint64_t *)((char *)*a5 + v692);
                    v694 = *(_QWORD *)(v684 + v692);
                    v695 = v685 + v1494;
                    do
                    {
                      v691 += v693;
                      v695 += v694;
                      --v690;
                    }
                    while (v690);
                    v59 = *(_QWORD **)v12;
                  }
                  result = v1535 + v1506;
                }
                while (v59[6] > (unint64_t)(v1535 + v1506));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v14 = v8[6];
          if (v14)
          {
            v15 = **(float **)(*(_QWORD *)result + 152);
            v16 = (unsigned int *)v8[19];
            do
            {
              *v16++ = v15;
              --v14;
            }
            while (v14);
          }
          break;
        case 1:
          v69 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v69)
          {
            v70 = *(float **)(*(_QWORD *)result + 152);
            v71 = (_DWORD *)v8[19];
            v72 = 4 * v69;
            do
            {
              v73 = *v70++;
              *v71++ = v73;
              v72 -= 4;
            }
            while (v72);
          }
          break;
        case 2:
          v74 = *a7;
          v75 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v76 = *a4;
              if (**a4 >= 1)
              {
                v77 = 0;
                v78 = *(_QWORD *)(v75 + 152);
                v79 = v8[19];
                v80 = **a5;
                v81 = (float *)(v78 + 4 * v74);
                do
                {
                  *(_DWORD *)(v79 + 4 * v77) = *v81;
                  v81 += v80;
                  ++v77;
                }
                while (*v76 > (int)v77);
              }
              break;
            case 2:
              v288 = *a4;
              v289 = **a4;
              if (v289 >= 1)
              {
                v290 = 0;
                v291 = 0;
                v292 = *(_QWORD *)(v75 + 152);
                v293 = v8[19];
                v294 = **a5;
                v295 = (*a5)[1];
                v296 = v288[1];
                do
                {
                  if (v296 >= 1)
                  {
                    v297 = 0;
                    do
                    {
                      *(_DWORD *)(v293 + 4 * v291 + 4 * v297) = *(float *)(v292 + 4 * v74);
                      v74 += v295;
                      v296 = v288[1];
                      ++v297;
                    }
                    while ((int)v297 < v296);
                    v289 = *v288;
                    v291 += v297;
                  }
                  result = v296;
                  v74 = v74 + v294 - v295 * v296;
                  ++v290;
                }
                while (v290 < v289);
              }
              break;
            case 3:
              v298 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v299 = 0;
                v300 = 0;
                v301 = *(_QWORD *)(v75 + 152);
                v302 = v8[19];
                v303 = *a5;
                v304 = **a5;
                v305 = (*a5)[1];
                v306 = v298[1];
                do
                {
                  if (v306 >= 1)
                  {
                    v307 = 0;
                    v308 = *a5;
                    v309 = v303[2];
                    v310 = v298[2];
                    do
                    {
                      if (v310 >= 1)
                      {
                        v311 = 0;
                        v312 = v308[2];
                        do
                        {
                          *(_DWORD *)(v302 + 4 * v300 + 4 * v311) = *(float *)(v301 + 4 * v74);
                          v74 += v312;
                          v310 = v298[2];
                          ++v311;
                        }
                        while ((int)v311 < v310);
                        v306 = v298[1];
                        v300 += v311;
                      }
                      v74 = v74 + v305 - v309 * v310;
                      ++v307;
                    }
                    while (v307 < v306);
                    result = *v298;
                  }
                  v74 = v74 + v304 - v305 * v306;
                  ++v299;
                }
                while (v299 < (int)result);
              }
              break;
            case 4:
              v313 = *a4;
              v314 = **a4;
              if (v314 >= 1)
              {
                v315 = 0;
                v316 = 0;
                v317 = *(_QWORD *)(v75 + 152);
                v318 = v8[19];
                v319 = *a5;
                v320 = **a5;
                v321 = (*a5)[1];
                v322 = v313[1];
                do
                {
                  if (v322 >= 1)
                  {
                    v323 = 0;
                    v324 = *a5;
                    v325 = v319[2];
                    v326 = v313[2];
                    do
                    {
                      if (v326 >= 1)
                      {
                        v327 = 0;
                        v328 = *a5;
                        v329 = v324[2];
                        v330 = v324[3];
                        v331 = v313[3];
                        do
                        {
                          if (v331 >= 1)
                          {
                            v332 = 0;
                            v333 = v328[3];
                            do
                            {
                              *(_DWORD *)(v318 + 4 * v316 + 4 * v332) = *(float *)(v317 + 4 * v74);
                              v74 += v333;
                              v331 = v313[3];
                              ++v332;
                            }
                            while ((int)v332 < v331);
                            v326 = v313[2];
                            v316 += v332;
                          }
                          v74 = v74 + v329 - v330 * v331;
                          ++v327;
                        }
                        while (v327 < v326);
                        v322 = v313[1];
                      }
                      v74 = v74 + v321 - v325 * v326;
                      ++v323;
                    }
                    while (v323 < v322);
                    v314 = *v313;
                  }
                  result = v322;
                  v74 = v74 + v320 - v321 * v322;
                  ++v315;
                }
                while (v315 < v314);
              }
              break;
            default:
              v278 = v8[6];
              if (v278)
              {
                v279 = 0;
                v280 = *(_QWORD *)(v75 + 152) + 4 * v74;
                v281 = v8[19];
                v282 = *a4;
                v283 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v284 = *a5;
                do
                {
                  v285 = 0;
                  if ((v283 & 0x80000000) == 0)
                  {
                    v286 = v283;
                    LODWORD(result) = v279;
                    do
                    {
                      v287 = ldiv((int)result, v282[v286]);
                      result = v287.quot;
                      v285 += v284[v286--] * v287.rem;
                    }
                    while (v286 != -1);
                  }
                  *(_DWORD *)(v281 + 4 * v279++) = *(float *)(v280 + 4 * v285);
                }
                while (v279 != v278);
              }
              break;
          }
          break;
        case 3:
          v1422 = *a8;
          v1428 = *a7;
          v82 = *(_QWORD **)result;
          v83 = v82[1] - *v82;
          switch(v83 >> 2)
          {
            case 1:
              v84 = (v83 << 30) - 0x100000000;
              v85 = *(int *)((char *)*a4 + (v84 >> 30));
              if (v85 >= 1)
              {
                v86 = v84 >> 29;
                v87 = *(uint64_t *)((char *)*a5 + v86);
                v88 = *(_QWORD *)(*a6 + v86);
                v89 = (_DWORD *)(v8[19] + 4 * v1422);
                v90 = (float *)(v82[19] + 4 * v1428);
                v91 = 4 * v88;
                v92 = 4 * v87;
                do
                {
                  *v89 = *v90;
                  v89 = (_DWORD *)((char *)v89 + v91);
                  v90 = (float *)((char *)v90 + v92);
                  --v85;
                }
                while (v85);
              }
              break;
            case 2:
              v778 = (v83 << 30) - 0x200000000;
              v779 = *a4;
              v780 = *(int *)((char *)*a4 + (v778 >> 30));
              if (v780 >= 1)
              {
                v781 = 0;
                v782 = v778 >> 29;
                v783 = *(uint64_t *)((char *)*a5 + v782);
                v784 = *(_QWORD *)(*a6 + v782);
                v785 = (v83 << 30) - 0x100000000;
                v786 = *(uint64_t *)((char *)*a5 + (v785 >> 29));
                v787 = *(_QWORD *)(*a6 + (v785 >> 29));
                v788 = v785 >> 32;
                v789 = 4 * v1422;
                v790 = 4 * v784;
                v791 = 4 * v787;
                v792 = 4 * v1428;
                v793 = 4 * v783;
                result = 4 * v786;
                do
                {
                  v794 = v779[v788];
                  if (v794 >= 1)
                  {
                    v795 = (_DWORD *)(v8[19] + v789);
                    v796 = (float *)(v82[19] + v792);
                    do
                    {
                      *v795 = *v796;
                      v795 = (_DWORD *)((char *)v795 + v791);
                      v796 = (float *)((char *)v796 + result);
                      --v794;
                    }
                    while (v794);
                  }
                  ++v781;
                  v789 += v790;
                  v792 += v793;
                }
                while (v781 != v780);
              }
              break;
            case 3:
              v797 = (v83 << 30) - 0x300000000;
              v798 = *a4;
              v799 = *(int *)((char *)*a4 + (v797 >> 30));
              if (v799 >= 1)
              {
                v800 = 0;
                v801 = *a5;
                v802 = v797 >> 29;
                v803 = *(uint64_t *)((char *)*a5 + (v797 >> 29));
                v804 = *a6;
                v805 = *(_QWORD *)(*a6 + v802);
                v806 = v83 << 30;
                v807 = (v83 << 30) - 0x200000000;
                v808 = v807 >> 32;
                v807 >>= 29;
                v809 = *(uint64_t *)((char *)*a5 + v807);
                v810 = *(_QWORD *)(*a6 + v807);
                v811 = (v806 - 0x100000000) >> 32;
                v812 = 4 * v1422;
                v813 = 4 * v805;
                v814 = 4 * v810;
                result = 4 * v1428;
                v815 = 4 * v803;
                v816 = 4 * v809;
                do
                {
                  v817 = v798[v808];
                  if (v817 >= 1)
                  {
                    v818 = 0;
                    v819 = (_QWORD *)*v11;
                    v820 = 4 * *(_QWORD *)(v804 + 8 * v811);
                    v821 = 4 * v801[v811];
                    v822 = result;
                    v823 = v812;
                    do
                    {
                      v824 = v798[v811];
                      if (v824 >= 1)
                      {
                        v825 = (_DWORD *)(v819[19] + v823);
                        v826 = (float *)(v82[19] + v822);
                        do
                        {
                          *v825 = *v826;
                          v825 = (_DWORD *)((char *)v825 + v820);
                          v826 = (float *)((char *)v826 + v821);
                          --v824;
                        }
                        while (v824);
                      }
                      ++v818;
                      v823 += v814;
                      v822 += v816;
                    }
                    while (v818 != v817);
                  }
                  ++v800;
                  v812 += v813;
                  result += v815;
                }
                while (v800 != v799);
              }
              break;
            case 4:
              v827 = (v83 << 30) - 0x400000000;
              v828 = *a4;
              v1571 = *(int *)((char *)*a4 + (v827 >> 30));
              if (v1571 >= 1)
              {
                v829 = 0;
                v830 = *a5;
                v831 = v827 >> 29;
                v832 = v83 << 30;
                v833 = *a6;
                v1554 = (v832 - 0x300000000) >> 32;
                v834 = (v832 - 0x300000000) >> 29;
                v835 = *(uint64_t *)((char *)*a5 + v834);
                v836 = *(_QWORD *)(*a6 + v834);
                v837 = (v832 - 0x200000000) >> 32;
                v838 = (v832 - 0x100000000) >> 32;
                v839 = 4 * v1422;
                v1537 = 4 * *(_QWORD *)(*a6 + v831);
                result = 4 * v836;
                v840 = 4 * v1428;
                v1522 = 4 * *(uint64_t *)((char *)*a5 + v831);
                v841 = 4 * v835;
                do
                {
                  v842 = v828[v1554];
                  if (v842 >= 1)
                  {
                    v843 = 0;
                    v844 = 4 * *(_QWORD *)(v833 + 8 * v837);
                    v845 = 4 * v830[v837];
                    v846 = v840;
                    v847 = v839;
                    do
                    {
                      v848 = v828[v837];
                      if (v848 >= 1)
                      {
                        v849 = 0;
                        v850 = (_QWORD *)*v11;
                        v851 = 4 * *(_QWORD *)(v833 + 8 * v838);
                        v852 = 4 * v830[v838];
                        v853 = v846;
                        v854 = v847;
                        do
                        {
                          v855 = v828[v838];
                          if (v855 >= 1)
                          {
                            v856 = (_DWORD *)(v850[19] + v854);
                            v857 = (float *)(v82[19] + v853);
                            do
                            {
                              *v856 = *v857;
                              v856 = (_DWORD *)((char *)v856 + v851);
                              v857 = (float *)((char *)v857 + v852);
                              --v855;
                            }
                            while (v855);
                          }
                          ++v849;
                          v854 += v844;
                          v853 += v845;
                        }
                        while (v849 != v848);
                      }
                      ++v843;
                      v847 += result;
                      v846 += v841;
                    }
                    while (v843 != v842);
                  }
                  ++v829;
                  v839 += v1537;
                  v840 += v1522;
                }
                while (v829 != v1571);
              }
              break;
            case 5:
              v858 = (v83 << 30) - 0x500000000;
              v859 = *a4;
              v1475 = *(int *)((char *)*a4 + (v858 >> 30));
              if (v1475 >= 1)
              {
                v1485 = 0;
                v860 = *a5;
                v861 = v858 >> 29;
                v862 = *a6;
                v863 = v83 << 30;
                v864 = (v863 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v864);
                v1465 = (v863 - 0x400000000) >> 32;
                v865 = *(_QWORD *)(*a6 + v864);
                v1555 = (v863 - 0x300000000) >> 32;
                v866 = (v863 - 0x200000000) >> 32;
                v867 = (v863 - 0x100000000) >> 32;
                v1508 = 4 * v1422;
                v1455 = 4 * *(_QWORD *)(*a6 + v861);
                v1538 = 4 * v865;
                v1496 = 4 * v1428;
                v1446 = 4 * *(uint64_t *)((char *)*a5 + v861);
                v1523 = 4 * result;
                do
                {
                  v1572 = v859[v1465];
                  if (v1572 >= 1)
                  {
                    v868 = 0;
                    v869 = 4 * *(_QWORD *)(v862 + 8 * v1555);
                    v870 = 4 * v860[v1555];
                    v871 = v1496;
                    v872 = v1508;
                    do
                    {
                      v873 = v859[v1555];
                      if (v873 >= 1)
                      {
                        v874 = 0;
                        v875 = 4 * *(_QWORD *)(v862 + 8 * v866);
                        v876 = 4 * v860[v866];
                        v877 = v871;
                        v878 = v872;
                        do
                        {
                          v879 = v859[v866];
                          if (v879 >= 1)
                          {
                            v880 = 0;
                            result = *v11;
                            v881 = 4 * *(_QWORD *)(v862 + 8 * v867);
                            v882 = 4 * v860[v867];
                            v883 = v877;
                            v884 = v878;
                            do
                            {
                              v885 = v859[v867];
                              if (v885 >= 1)
                              {
                                v886 = (_DWORD *)(*(_QWORD *)(result + 152) + v884);
                                v887 = (float *)(v82[19] + v883);
                                do
                                {
                                  *v886 = *v887;
                                  v886 = (_DWORD *)((char *)v886 + v881);
                                  v887 = (float *)((char *)v887 + v882);
                                  --v885;
                                }
                                while (v885);
                              }
                              ++v880;
                              v884 += v875;
                              v883 += v876;
                            }
                            while (v880 != v879);
                          }
                          ++v874;
                          v878 += v869;
                          v877 += v870;
                        }
                        while (v874 != v873);
                      }
                      ++v868;
                      v872 += v1538;
                      v871 += v1523;
                    }
                    while (v868 != v1572);
                  }
                  v1508 += v1455;
                  v1496 += v1446;
                  ++v1485;
                }
                while (v1485 != v1475);
              }
              break;
            default:
              v740 = (char *)a4[1];
              LODWORD(v741) = 1;
              v742 = -20;
              do
              {
                v741 = *(int *)&v740[v742] * (uint64_t)(int)v741;
                v742 += 4;
              }
              while (v742);
              v1418 = v82[6];
              if (v1418)
              {
                result = 0;
                v743 = (v83 << 30) - 0x500000000;
                v744 = *a4;
                v1454 = *v8;
                v745 = *a5;
                v1403 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1408 = ((unint64_t)(v740 - (char *)*a4) >> 2) - 1;
                v1399 = v743 >> 32;
                v746 = *a6;
                v1464 = ((v83 << 30) - 0x400000000) >> 32;
                v1553 = ((v83 << 30) - 0x300000000) >> 32;
                v747 = ((v83 << 30) - 0x200000000) >> 32;
                v748 = ((v83 << 30) - 0x100000000) >> 32;
                v1439 = 4 * *(uint64_t *)((char *)*a5 + (v743 >> 29));
                v1445 = 4 * *(_QWORD *)(*a6 + (v743 >> 29));
                v1413 = v741;
                do
                {
                  v749 = v1408;
                  v1434 = result;
                  v750 = 0;
                  if ((v1408 & 0x80000000) != 0)
                  {
                    v751 = v1403;
                  }
                  else
                  {
                    v751 = v1403;
                    do
                    {
                      v752 = ldiv((int)result, v744[v749]);
                      LODWORD(result) = v752.quot;
                      v750 += v745[v749--] * v752.rem;
                    }
                    while (v749 != -1);
                  }
                  v753 = 0;
                  if ((v751 & 0x80000000) == 0)
                  {
                    v754 = v1434;
                    do
                    {
                      v755 = ldiv(v754, *(int *)(v1454 + 4 * v751));
                      v754 = v755.quot;
                      v753 += *(_QWORD *)(v746 + 8 * v751--) * v755.rem;
                    }
                    while (v751 != -1);
                  }
                  v1474 = v744[v1399];
                  if (v1474 >= 1)
                  {
                    v756 = 0;
                    v1507 = 4 * (v753 + v1422);
                    v1536 = 4 * *(_QWORD *)(v746 + 8 * v1464);
                    v1495 = 4 * (v750 + v1428);
                    v1521 = 4 * v745[v1464];
                    do
                    {
                      v1484 = v756;
                      v1570 = v744[v1464];
                      if (v1570 >= 1)
                      {
                        v757 = 0;
                        v758 = 4 * *(_QWORD *)(v746 + 8 * v1553);
                        v759 = 4 * v745[v1553];
                        v761 = v1495;
                        v760 = v1507;
                        do
                        {
                          v762 = v744[v1553];
                          if (v762 >= 1)
                          {
                            v763 = 0;
                            v764 = 4 * *(_QWORD *)(v746 + 8 * v747);
                            v765 = 4 * v745[v747];
                            v766 = v761;
                            v767 = v760;
                            do
                            {
                              v768 = v744[v747];
                              if (v768 >= 1)
                              {
                                v769 = 0;
                                v770 = (_QWORD *)*v11;
                                v771 = 4 * *(_QWORD *)(v746 + 8 * v748);
                                v772 = 4 * v745[v748];
                                v773 = v766;
                                v774 = v767;
                                do
                                {
                                  v775 = v744[v748];
                                  if (v775 >= 1)
                                  {
                                    v776 = (_DWORD *)(v770[19] + v774);
                                    v777 = (float *)(v82[19] + v773);
                                    do
                                    {
                                      *v776 = *v777;
                                      v776 = (_DWORD *)((char *)v776 + v771);
                                      v777 = (float *)((char *)v777 + v772);
                                      --v775;
                                    }
                                    while (v775);
                                  }
                                  ++v769;
                                  v774 += v764;
                                  v773 += v765;
                                }
                                while (v769 != v768);
                              }
                              ++v763;
                              v767 += v758;
                              v766 += v759;
                            }
                            while (v763 != v762);
                          }
                          ++v757;
                          v760 += v1536;
                          v761 += v1521;
                        }
                        while (v757 != v1570);
                      }
                      v756 = v1484 + 1;
                      v1507 += v1445;
                      v1495 += v1439;
                    }
                    while (v1484 + 1 != v1474);
                  }
                  result = v1434 + v1413;
                }
                while (v1418 > v1434 + v1413);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
LABEL_6:
          break;
        case 1:
          v93 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v93)
          {
            v94 = *(float **)(*(_QWORD *)result + 152);
            v95 = (_BYTE *)v8[19];
            v96 = 4 * v93;
            do
            {
              v97 = *v94++;
              *v95++ = (int)v97;
              v96 -= 4;
            }
            while (v96);
          }
          break;
        case 2:
          v98 = *a7;
          v99 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v100 = 0;
                v101 = *(_QWORD *)(v99 + 152);
                v102 = v8[19];
                do
                {
                  *(_BYTE *)(v102 + v100) = (int)*(float *)(v101 + 4 * v98);
                  v98 += **a5;
                  ++v100;
                }
                while (**a4 > (int)v100);
              }
              break;
            case 2:
              v343 = *a4;
              v344 = **a4;
              if (v344 >= 1)
              {
                v345 = 0;
                v346 = 0;
                v347 = *(_QWORD *)(v99 + 152);
                v348 = v8[19];
                do
                {
                  v349 = v343[1];
                  if (v349 < 1)
                  {
                    v350 = *a5;
                    v351 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v348 + v346 + result) = (int)*(float *)(v347 + 4 * v98);
                      v350 = *a5;
                      v351 = (*a5)[1];
                      v98 += v351;
                      v343 = *a4;
                      v349 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v349);
                    v344 = *v343;
                    v346 += result;
                  }
                  v98 = *v350 + v98 - v351 * v349;
                  ++v345;
                }
                while (v345 < v344);
              }
              break;
            case 3:
              v352 = *a4;
              v353 = **a4;
              if (v353 >= 1)
              {
                v354 = 0;
                v355 = 0;
                v356 = *(_QWORD *)(v99 + 152);
                v357 = v8[19];
                do
                {
                  v358 = v352[1];
                  if (v358 < 1)
                  {
                    v362 = *a5;
                    v363 = (*a5)[1];
                  }
                  else
                  {
                    for (m = 0; m < v358; ++m)
                    {
                      v360 = v352[2];
                      if (v360 < 1)
                      {
                        v362 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v361 = 0;
                        do
                        {
                          *(_BYTE *)(v357 + v355 + v361) = (int)*(float *)(v356 + 4 * v98);
                          v362 = *a5;
                          result = (*a5)[2];
                          v98 += result;
                          v352 = *a4;
                          v360 = (*a4)[2];
                          ++v361;
                        }
                        while ((int)v361 < v360);
                        v355 += v361;
                      }
                      v363 = v362[1];
                      v98 = v363 + v98 - result * v360;
                      v358 = v352[1];
                    }
                    v353 = *v352;
                  }
                  v98 = *v362 + v98 - v363 * v358;
                  ++v354;
                }
                while (v354 < v353);
              }
              break;
            case 4:
              v364 = *a4;
              v365 = **a4;
              if (v365 >= 1)
              {
                v366 = 0;
                v367 = 0;
                v368 = *(_QWORD *)(v99 + 152);
                v369 = v8[19];
                do
                {
                  v370 = v364[1];
                  if (v370 < 1)
                  {
                    v376 = *a5;
                    v378 = (*a5)[1];
                  }
                  else
                  {
                    for (n = 0; n < v370; ++n)
                    {
                      v372 = v364[2];
                      if (v372 < 1)
                      {
                        v376 = *a5;
                        v377 = (*a5)[2];
                      }
                      else
                      {
                        for (ii = 0; ii < v372; ++ii)
                        {
                          v374 = v364[3];
                          if (v374 < 1)
                          {
                            v376 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v375 = 0;
                            do
                            {
                              *(_BYTE *)(v369 + v367 + v375) = (int)*(float *)(v368 + 4 * v98);
                              v376 = *a5;
                              result = (*a5)[3];
                              v98 += result;
                              v364 = *a4;
                              v374 = (*a4)[3];
                              ++v375;
                            }
                            while ((int)v375 < v374);
                            v367 += v375;
                          }
                          v377 = v376[2];
                          v98 = v377 + v98 - result * v374;
                          v372 = v364[2];
                        }
                      }
                      v378 = v376[1];
                      v98 = v378 + v98 - v377 * v372;
                      v370 = v364[1];
                    }
                    v365 = *v364;
                  }
                  v98 = *v376 + v98 - v378 * v370;
                  ++v366;
                }
                while (v366 < v365);
              }
              break;
            default:
              if (v8[6])
              {
                v334 = 0;
                v335 = *(_QWORD *)(v99 + 152) + 4 * v98;
                v336 = v8[19];
                do
                {
                  v337 = *a4;
                  v338 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v339 = 0;
                  v340 = (v338 - 1);
                  if ((int)v338 - 1 >= 0)
                  {
                    v341 = *a5;
                    LODWORD(result) = v334;
                    do
                    {
                      v342 = ldiv((int)result, v337[v340]);
                      result = v342.quot;
                      v339 += v341[v340--] * v342.rem;
                    }
                    while (v340 != -1);
                  }
                  *(_BYTE *)(v336 + v334++) = (int)*(float *)(v335 + 4 * v339);
                }
                while (v334 < *(_QWORD *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          v1566 = *a7;
          v103 = *a8;
          v104 = *(_QWORD **)result;
          v105 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v105 >> 2)
          {
            case 1:
              v106 = (v105 << 30) - 0x100000000;
              v107 = *(int *)((char *)*a4 + (v106 >> 30));
              if (v107 >= 1)
              {
                v108 = v106 >> 29;
                v109 = *(uint64_t *)((char *)*a5 + v108);
                v110 = *(_QWORD *)(*a6 + v108);
                v111 = (_BYTE *)(v8[19] + v103);
                v112 = (float *)(v104[19] + 4 * v1566);
                v113 = 4 * v109;
                do
                {
                  *v111 = (int)*v112;
                  v111 += v110;
                  v112 = (float *)((char *)v112 + v113);
                  --v107;
                }
                while (v107);
              }
              break;
            case 2:
              v910 = (v105 << 30) - 0x200000000;
              v911 = *(int *)((char *)*a4 + (v910 >> 30));
              if (v911 >= 1)
              {
                v912 = 0;
                v913 = v910 >> 29;
                v914 = *(uint64_t *)((char *)*a5 + v913);
                v915 = *(_QWORD *)(*a6 + v913);
                v916 = 4 * v1566;
                v917 = 4 * v914;
                do
                {
                  v918 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v919 = *(int *)((char *)*a4 + (v918 >> 30));
                  if (v919 >= 1)
                  {
                    v920 = v918 >> 29;
                    v921 = *(uint64_t *)((char *)*a5 + v920);
                    v922 = *(_QWORD *)(*a6 + v920);
                    v923 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v924 = (float *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v916);
                    result = 4 * v921;
                    do
                    {
                      *(_BYTE *)(v923 + v103) = (int)*v924;
                      v923 += v922;
                      v924 = (float *)((char *)v924 + result);
                      --v919;
                    }
                    while (v919);
                  }
                  v103 += v915;
                  ++v912;
                  v916 += v917;
                }
                while (v912 != v911);
              }
              break;
            case 3:
              v925 = (v105 << 30) - 0x300000000;
              v926 = *(int *)((char *)*a4 + (v925 >> 30));
              if (v926 >= 1)
              {
                v927 = 0;
                v928 = v925 >> 29;
                v929 = *(uint64_t *)((char *)*a5 + v928);
                v930 = *(_QWORD *)(*a6 + v928);
                v931 = 4 * v1566;
                v932 = 4 * v929;
                do
                {
                  v933 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v934 = *(int *)((char *)*a4 + (v933 >> 30));
                  if (v934 >= 1)
                  {
                    v935 = 0;
                    v936 = v933 >> 29;
                    v937 = *(uint64_t *)((char *)*a5 + v936);
                    v938 = *(_QWORD *)(*a6 + v936);
                    result = 4 * v937;
                    v939 = v931;
                    v940 = v103;
                    do
                    {
                      v941 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v942 = *(int *)((char *)*a4 + (v941 >> 30));
                      if (v942 >= 1)
                      {
                        v943 = v941 >> 29;
                        v944 = *(uint64_t *)((char *)*a5 + v943);
                        v945 = *(_QWORD *)(*a6 + v943);
                        v946 = *(_QWORD *)(*v11 + 152);
                        v947 = (float *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v939);
                        v948 = 4 * v944;
                        do
                        {
                          *(_BYTE *)(v946 + v940) = (int)*v947;
                          v946 += v945;
                          v947 = (float *)((char *)v947 + v948);
                          --v942;
                        }
                        while (v942);
                      }
                      v940 += v938;
                      ++v935;
                      v939 += result;
                    }
                    while (v935 != v934);
                  }
                  v103 += v930;
                  ++v927;
                  v931 += v932;
                }
                while (v927 != v926);
              }
              break;
            case 4:
LABEL_549:
              break;
            case 5:
              v949 = (v105 << 30) - 0x500000000;
              v950 = *(int *)((char *)*a4 + (v949 >> 30));
              if (v950 >= 1)
              {
                v951 = v949 >> 29;
                v952 = *(uint64_t *)((char *)*a5 + v951);
                v953 = *(_QWORD *)(*a6 + v951);
                do
                {
                  v1566 += v952;
                  v103 += v953;
                  --v950;
                }
                while (v950);
              }
              break;
            default:
              LODWORD(v888) = 1;
              v889 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v888 = a4[1][v889++] * (uint64_t)(int)v888;
              while (v889 * 4);
              if (v104[6])
              {
                result = 0;
                v1497 = *a8;
                v1509 = v888;
                do
                {
                  v890 = *a4;
                  v891 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v892 = (v891 - 1);
                  v1524 = v104;
                  v1539 = result;
                  v893 = 0;
                  if ((int)v891 - 1 >= 0)
                  {
                    v894 = *a5;
                    do
                    {
                      v895 = ldiv((int)result, v890[v892]);
                      LODWORD(result) = v895.quot;
                      v893 += v894[v892--] * v895.rem;
                    }
                    while (v892 != -1);
                  }
                  v896 = *(_QWORD *)*v11;
                  v897 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v896) >> 2;
                  v898 = *a6;
                  v899 = 0;
                  v900 = (v897 - 1);
                  if ((int)v897 - 1 >= 0)
                  {
                    v901 = v1539;
                    do
                    {
                      v902 = ldiv(v901, *(int *)(v896 + 4 * v900));
                      v901 = v902.quot;
                      v899 += *(_QWORD *)(v898 + 8 * v900--) * v902.rem;
                    }
                    while (v900 != -1);
                  }
                  v104 = v1524;
                  v903 = ((v104[1] - *v104) << 30) - 0x500000000;
                  v904 = *(int *)((char *)v890 + (v903 >> 30));
                  if (v904 >= 1)
                  {
                    v905 = v893 + v1566;
                    v906 = v903 >> 29;
                    v907 = *(uint64_t *)((char *)*a5 + v906);
                    v908 = *(_QWORD *)(v898 + v906);
                    v909 = v899 + v1497;
                    do
                    {
                      v905 += v907;
                      v909 += v908;
                      --v904;
                    }
                    while (v904);
                    v104 = *(_QWORD **)v12;
                  }
                  result = v1539 + v1509;
                }
                while (v104[6] > (unint64_t)(v1539 + v1509));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v17 = v8[6];
          if (v17)
          {
            v18 = (int)**(float **)(*(_QWORD *)result + 152);
            v19 = (int *)v8[19];
            do
            {
              *v19++ = v18;
              --v17;
            }
            while (v17);
          }
          break;
        case 1:
          v114 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v114)
          {
            v115 = *(float **)(*(_QWORD *)result + 152);
            v116 = (_DWORD *)v8[19];
            v117 = 4 * v114;
            do
            {
              v118 = *v115++;
              *v116++ = (int)v118;
              v117 -= 4;
            }
            while (v117);
          }
          break;
        case 2:
          v119 = *a7;
          v120 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v121 = *a4;
              if (**a4 >= 1)
              {
                v122 = 0;
                v123 = *(_QWORD *)(v120 + 152);
                v124 = v8[19];
                v125 = **a5;
                v126 = (float *)(v123 + 4 * v119);
                do
                {
                  *(_DWORD *)(v124 + 4 * v122) = (int)*v126;
                  v126 += v125;
                  ++v122;
                }
                while (*v121 > (int)v122);
              }
              break;
            case 2:
              v389 = *a4;
              v390 = **a4;
              if (v390 >= 1)
              {
                v391 = 0;
                v392 = 0;
                v393 = *(_QWORD *)(v120 + 152);
                v394 = v8[19];
                v395 = **a5;
                v396 = (*a5)[1];
                v397 = v389[1];
                do
                {
                  if (v397 >= 1)
                  {
                    v398 = 0;
                    do
                    {
                      *(_DWORD *)(v394 + 4 * v392 + 4 * v398) = (int)*(float *)(v393 + 4 * v119);
                      v119 += v396;
                      v397 = v389[1];
                      ++v398;
                    }
                    while ((int)v398 < v397);
                    v390 = *v389;
                    v392 += v398;
                  }
                  result = v397;
                  v119 = v119 + v395 - v396 * v397;
                  ++v391;
                }
                while (v391 < v390);
              }
              break;
            case 3:
              v399 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v400 = 0;
                v401 = 0;
                v402 = *(_QWORD *)(v120 + 152);
                v403 = v8[19];
                v404 = *a5;
                v405 = **a5;
                v406 = (*a5)[1];
                v407 = v399[1];
                do
                {
                  if (v407 >= 1)
                  {
                    v408 = 0;
                    v409 = *a5;
                    v410 = v404[2];
                    v411 = v399[2];
                    do
                    {
                      if (v411 >= 1)
                      {
                        v412 = 0;
                        v413 = v409[2];
                        do
                        {
                          *(_DWORD *)(v403 + 4 * v401 + 4 * v412) = (int)*(float *)(v402 + 4 * v119);
                          v119 += v413;
                          v411 = v399[2];
                          ++v412;
                        }
                        while ((int)v412 < v411);
                        v407 = v399[1];
                        v401 += v412;
                      }
                      v119 = v119 + v406 - v410 * v411;
                      ++v408;
                    }
                    while (v408 < v407);
                    result = *v399;
                  }
                  v119 = v119 + v405 - v406 * v407;
                  ++v400;
                }
                while (v400 < (int)result);
              }
              break;
            case 4:
              v414 = *a4;
              v415 = **a4;
              if (v415 >= 1)
              {
                v416 = 0;
                v417 = 0;
                v418 = *(_QWORD *)(v120 + 152);
                v419 = v8[19];
                v420 = *a5;
                v421 = **a5;
                v422 = (*a5)[1];
                v423 = v414[1];
                do
                {
                  if (v423 >= 1)
                  {
                    v424 = 0;
                    v425 = *a5;
                    v426 = v420[2];
                    v427 = v414[2];
                    do
                    {
                      if (v427 >= 1)
                      {
                        v428 = 0;
                        v429 = *a5;
                        v430 = v425[2];
                        v431 = v425[3];
                        v432 = v414[3];
                        do
                        {
                          if (v432 >= 1)
                          {
                            v433 = 0;
                            v434 = v429[3];
                            do
                            {
                              *(_DWORD *)(v419 + 4 * v417 + 4 * v433) = (int)*(float *)(v418 + 4 * v119);
                              v119 += v434;
                              v432 = v414[3];
                              ++v433;
                            }
                            while ((int)v433 < v432);
                            v427 = v414[2];
                            v417 += v433;
                          }
                          v119 = v119 + v430 - v431 * v432;
                          ++v428;
                        }
                        while (v428 < v427);
                        v423 = v414[1];
                      }
                      v119 = v119 + v422 - v426 * v427;
                      ++v424;
                    }
                    while (v424 < v423);
                    v415 = *v414;
                  }
                  result = v423;
                  v119 = v119 + v421 - v422 * v423;
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            default:
              v379 = v8[6];
              if (v379)
              {
                v380 = 0;
                v381 = *(_QWORD *)(v120 + 152) + 4 * v119;
                v382 = v8[19];
                v383 = *a4;
                v384 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v385 = *a5;
                do
                {
                  v386 = 0;
                  if ((v384 & 0x80000000) == 0)
                  {
                    v387 = v384;
                    LODWORD(result) = v380;
                    do
                    {
                      v388 = ldiv((int)result, v383[v387]);
                      result = v388.quot;
                      v386 += v385[v387--] * v388.rem;
                    }
                    while (v387 != -1);
                  }
                  *(_DWORD *)(v382 + 4 * v380++) = (int)*(float *)(v381 + 4 * v386);
                }
                while (v380 != v379);
              }
              break;
          }
          break;
        case 3:
          v1423 = *a8;
          v1429 = *a7;
          v127 = *(_QWORD **)result;
          v128 = v127[1] - *v127;
          switch(v128 >> 2)
          {
            case 1:
              v129 = (v128 << 30) - 0x100000000;
              v130 = *(int *)((char *)*a4 + (v129 >> 30));
              if (v130 >= 1)
              {
                v131 = v129 >> 29;
                v132 = *(uint64_t *)((char *)*a5 + v131);
                v133 = *(_QWORD *)(*a6 + v131);
                v134 = (_DWORD *)(v8[19] + 4 * v1423);
                v135 = (float *)(v127[19] + 4 * v1429);
                v136 = 4 * v133;
                v137 = 4 * v132;
                do
                {
                  *v134 = (int)*v135;
                  v134 = (_DWORD *)((char *)v134 + v136);
                  v135 = (float *)((char *)v135 + v137);
                  --v130;
                }
                while (v130);
              }
              break;
            case 2:
              v992 = (v128 << 30) - 0x200000000;
              v993 = *a4;
              v994 = *(int *)((char *)*a4 + (v992 >> 30));
              if (v994 >= 1)
              {
                v995 = 0;
                v996 = v992 >> 29;
                v997 = *(uint64_t *)((char *)*a5 + v996);
                v998 = *(_QWORD *)(*a6 + v996);
                v999 = (v128 << 30) - 0x100000000;
                v1000 = *(uint64_t *)((char *)*a5 + (v999 >> 29));
                v1001 = *(_QWORD *)(*a6 + (v999 >> 29));
                v1002 = v999 >> 32;
                v1003 = 4 * v1423;
                v1004 = 4 * v998;
                v1005 = 4 * v1001;
                v1006 = 4 * v1429;
                v1007 = 4 * v997;
                result = 4 * v1000;
                do
                {
                  v1008 = v993[v1002];
                  if (v1008 >= 1)
                  {
                    v1009 = (_DWORD *)(v8[19] + v1003);
                    v1010 = (float *)(v127[19] + v1006);
                    do
                    {
                      *v1009 = (int)*v1010;
                      v1009 = (_DWORD *)((char *)v1009 + v1005);
                      v1010 = (float *)((char *)v1010 + result);
                      --v1008;
                    }
                    while (v1008);
                  }
                  ++v995;
                  v1003 += v1004;
                  v1006 += v1007;
                }
                while (v995 != v994);
              }
              break;
            case 3:
              v1011 = (v128 << 30) - 0x300000000;
              v1012 = *a4;
              v1013 = *(int *)((char *)*a4 + (v1011 >> 30));
              if (v1013 >= 1)
              {
                v1014 = 0;
                v1015 = *a5;
                v1016 = v1011 >> 29;
                v1017 = *(uint64_t *)((char *)*a5 + (v1011 >> 29));
                v1018 = *a6;
                v1019 = *(_QWORD *)(*a6 + v1016);
                v1020 = v128 << 30;
                v1021 = (v128 << 30) - 0x200000000;
                v1022 = v1021 >> 32;
                v1021 >>= 29;
                v1023 = *(uint64_t *)((char *)*a5 + v1021);
                v1024 = *(_QWORD *)(*a6 + v1021);
                v1025 = (v1020 - 0x100000000) >> 32;
                v1026 = 4 * v1423;
                v1027 = 4 * v1019;
                v1028 = 4 * v1024;
                result = 4 * v1429;
                v1029 = 4 * v1017;
                v1030 = 4 * v1023;
                do
                {
                  v1031 = v1012[v1022];
                  if (v1031 >= 1)
                  {
                    v1032 = 0;
                    v1033 = (_QWORD *)*v11;
                    v1034 = 4 * *(_QWORD *)(v1018 + 8 * v1025);
                    v1035 = 4 * v1015[v1025];
                    v1036 = result;
                    v1037 = v1026;
                    do
                    {
                      v1038 = v1012[v1025];
                      if (v1038 >= 1)
                      {
                        v1039 = (_DWORD *)(v1033[19] + v1037);
                        v1040 = (float *)(v127[19] + v1036);
                        do
                        {
                          *v1039 = (int)*v1040;
                          v1039 = (_DWORD *)((char *)v1039 + v1034);
                          v1040 = (float *)((char *)v1040 + v1035);
                          --v1038;
                        }
                        while (v1038);
                      }
                      ++v1032;
                      v1037 += v1028;
                      v1036 += v1030;
                    }
                    while (v1032 != v1031);
                  }
                  ++v1014;
                  v1026 += v1027;
                  result += v1029;
                }
                while (v1014 != v1013);
              }
              break;
            case 4:
              v1041 = (v128 << 30) - 0x400000000;
              v1042 = *a4;
              v1574 = *(int *)((char *)*a4 + (v1041 >> 30));
              if (v1574 >= 1)
              {
                v1043 = 0;
                v1044 = *a5;
                v1045 = v1041 >> 29;
                v1046 = v128 << 30;
                v1047 = *a6;
                v1557 = (v1046 - 0x300000000) >> 32;
                v1048 = (v1046 - 0x300000000) >> 29;
                v1049 = *(uint64_t *)((char *)*a5 + v1048);
                v1050 = *(_QWORD *)(*a6 + v1048);
                v1051 = (v1046 - 0x200000000) >> 32;
                v1052 = (v1046 - 0x100000000) >> 32;
                v1053 = 4 * v1423;
                v1541 = 4 * *(_QWORD *)(*a6 + v1045);
                result = 4 * v1050;
                v1054 = 4 * v1429;
                v1526 = 4 * *(uint64_t *)((char *)*a5 + v1045);
                v1055 = 4 * v1049;
                do
                {
                  v1056 = v1042[v1557];
                  if (v1056 >= 1)
                  {
                    v1057 = 0;
                    v1058 = 4 * *(_QWORD *)(v1047 + 8 * v1051);
                    v1059 = 4 * v1044[v1051];
                    v1060 = v1054;
                    v1061 = v1053;
                    do
                    {
                      v1062 = v1042[v1051];
                      if (v1062 >= 1)
                      {
                        v1063 = 0;
                        v1064 = (_QWORD *)*v11;
                        v1065 = 4 * *(_QWORD *)(v1047 + 8 * v1052);
                        v1066 = 4 * v1044[v1052];
                        v1067 = v1060;
                        v1068 = v1061;
                        do
                        {
                          v1069 = v1042[v1052];
                          if (v1069 >= 1)
                          {
                            v1070 = (_DWORD *)(v1064[19] + v1068);
                            v1071 = (float *)(v127[19] + v1067);
                            do
                            {
                              *v1070 = (int)*v1071;
                              v1070 = (_DWORD *)((char *)v1070 + v1065);
                              v1071 = (float *)((char *)v1071 + v1066);
                              --v1069;
                            }
                            while (v1069);
                          }
                          ++v1063;
                          v1068 += v1058;
                          v1067 += v1059;
                        }
                        while (v1063 != v1062);
                      }
                      ++v1057;
                      v1061 += result;
                      v1060 += v1055;
                    }
                    while (v1057 != v1056);
                  }
                  ++v1043;
                  v1053 += v1541;
                  v1054 += v1526;
                }
                while (v1043 != v1574);
              }
              break;
            case 5:
              v1072 = (v128 << 30) - 0x500000000;
              v1073 = *a4;
              v1477 = *(int *)((char *)*a4 + (v1072 >> 30));
              if (v1477 >= 1)
              {
                v1487 = 0;
                v1074 = *a5;
                v1075 = v1072 >> 29;
                v1076 = *a6;
                v1077 = v128 << 30;
                v1078 = (v1077 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1078);
                v1467 = (v1077 - 0x400000000) >> 32;
                v1079 = *(_QWORD *)(*a6 + v1078);
                v1558 = (v1077 - 0x300000000) >> 32;
                v1080 = (v1077 - 0x200000000) >> 32;
                v1081 = (v1077 - 0x100000000) >> 32;
                v1511 = 4 * v1423;
                v1457 = 4 * *(_QWORD *)(*a6 + v1075);
                v1542 = 4 * v1079;
                v1499 = 4 * v1429;
                v1448 = 4 * *(uint64_t *)((char *)*a5 + v1075);
                v1527 = 4 * result;
                do
                {
                  v1575 = v1073[v1467];
                  if (v1575 >= 1)
                  {
                    v1082 = 0;
                    v1083 = 4 * *(_QWORD *)(v1076 + 8 * v1558);
                    v1084 = 4 * v1074[v1558];
                    v1085 = v1499;
                    v1086 = v1511;
                    do
                    {
                      v1087 = v1073[v1558];
                      if (v1087 >= 1)
                      {
                        v1088 = 0;
                        v1089 = 4 * *(_QWORD *)(v1076 + 8 * v1080);
                        v1090 = 4 * v1074[v1080];
                        v1091 = v1085;
                        v1092 = v1086;
                        do
                        {
                          v1093 = v1073[v1080];
                          if (v1093 >= 1)
                          {
                            v1094 = 0;
                            result = *v11;
                            v1095 = 4 * *(_QWORD *)(v1076 + 8 * v1081);
                            v1096 = 4 * v1074[v1081];
                            v1097 = v1091;
                            v1098 = v1092;
                            do
                            {
                              v1099 = v1073[v1081];
                              if (v1099 >= 1)
                              {
                                v1100 = (_DWORD *)(*(_QWORD *)(result + 152) + v1098);
                                v1101 = (float *)(v127[19] + v1097);
                                do
                                {
                                  *v1100 = (int)*v1101;
                                  v1100 = (_DWORD *)((char *)v1100 + v1095);
                                  v1101 = (float *)((char *)v1101 + v1096);
                                  --v1099;
                                }
                                while (v1099);
                              }
                              ++v1094;
                              v1098 += v1089;
                              v1097 += v1090;
                            }
                            while (v1094 != v1093);
                          }
                          ++v1088;
                          v1092 += v1083;
                          v1091 += v1084;
                        }
                        while (v1088 != v1087);
                      }
                      ++v1082;
                      v1086 += v1542;
                      v1085 += v1527;
                    }
                    while (v1082 != v1575);
                  }
                  v1511 += v1457;
                  v1499 += v1448;
                  ++v1487;
                }
                while (v1487 != v1477);
              }
              break;
            default:
              v954 = (char *)a4[1];
              LODWORD(v955) = 1;
              v956 = -20;
              do
              {
                v955 = *(int *)&v954[v956] * (uint64_t)(int)v955;
                v956 += 4;
              }
              while (v956);
              v1419 = v127[6];
              if (v1419)
              {
                result = 0;
                v957 = (v128 << 30) - 0x500000000;
                v958 = *a4;
                v1456 = *v8;
                v959 = *a5;
                v1404 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1409 = ((unint64_t)(v954 - (char *)*a4) >> 2) - 1;
                v1400 = v957 >> 32;
                v960 = *a6;
                v1466 = ((v128 << 30) - 0x400000000) >> 32;
                v1556 = ((v128 << 30) - 0x300000000) >> 32;
                v961 = ((v128 << 30) - 0x200000000) >> 32;
                v962 = ((v128 << 30) - 0x100000000) >> 32;
                v1440 = 4 * *(uint64_t *)((char *)*a5 + (v957 >> 29));
                v1447 = 4 * *(_QWORD *)(*a6 + (v957 >> 29));
                v1414 = v955;
                do
                {
                  v963 = v1409;
                  v1435 = result;
                  v964 = 0;
                  if ((v1409 & 0x80000000) != 0)
                  {
                    v965 = v1404;
                  }
                  else
                  {
                    v965 = v1404;
                    do
                    {
                      v966 = ldiv((int)result, v958[v963]);
                      LODWORD(result) = v966.quot;
                      v964 += v959[v963--] * v966.rem;
                    }
                    while (v963 != -1);
                  }
                  v967 = 0;
                  if ((v965 & 0x80000000) == 0)
                  {
                    v968 = v1435;
                    do
                    {
                      v969 = ldiv(v968, *(int *)(v1456 + 4 * v965));
                      v968 = v969.quot;
                      v967 += *(_QWORD *)(v960 + 8 * v965--) * v969.rem;
                    }
                    while (v965 != -1);
                  }
                  v1476 = v958[v1400];
                  if (v1476 >= 1)
                  {
                    v970 = 0;
                    v1510 = 4 * (v967 + v1423);
                    v1540 = 4 * *(_QWORD *)(v960 + 8 * v1466);
                    v1498 = 4 * (v964 + v1429);
                    v1525 = 4 * v959[v1466];
                    do
                    {
                      v1486 = v970;
                      v1573 = v958[v1466];
                      if (v1573 >= 1)
                      {
                        v971 = 0;
                        v972 = 4 * *(_QWORD *)(v960 + 8 * v1556);
                        v973 = 4 * v959[v1556];
                        v975 = v1498;
                        v974 = v1510;
                        do
                        {
                          v976 = v958[v1556];
                          if (v976 >= 1)
                          {
                            v977 = 0;
                            v978 = 4 * *(_QWORD *)(v960 + 8 * v961);
                            v979 = 4 * v959[v961];
                            v980 = v975;
                            v981 = v974;
                            do
                            {
                              v982 = v958[v961];
                              if (v982 >= 1)
                              {
                                v983 = 0;
                                v984 = (_QWORD *)*v11;
                                v985 = 4 * *(_QWORD *)(v960 + 8 * v962);
                                v986 = 4 * v959[v962];
                                v987 = v980;
                                v988 = v981;
                                do
                                {
                                  v989 = v958[v962];
                                  if (v989 >= 1)
                                  {
                                    v990 = (_DWORD *)(v984[19] + v988);
                                    v991 = (float *)(v127[19] + v987);
                                    do
                                    {
                                      *v990 = (int)*v991;
                                      v990 = (_DWORD *)((char *)v990 + v985);
                                      v991 = (float *)((char *)v991 + v986);
                                      --v989;
                                    }
                                    while (v989);
                                  }
                                  ++v983;
                                  v988 += v978;
                                  v987 += v979;
                                }
                                while (v983 != v982);
                              }
                              ++v977;
                              v981 += v972;
                              v980 += v973;
                            }
                            while (v977 != v976);
                          }
                          ++v971;
                          v974 += v1540;
                          v975 += v1525;
                        }
                        while (v971 != v1573);
                      }
                      v970 = v1486 + 1;
                      v1510 += v1447;
                      v1498 += v1440;
                    }
                    while (v1486 + 1 != v1476);
                  }
                  result = v1435 + v1414;
                }
                while (v1419 > v1435 + v1414);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v20 = v8[6];
          if (v20)
          {
            v21 = **(float **)(*(_QWORD *)result + 152);
            v22 = (_QWORD *)v8[19];
            do
            {
              *v22++ = (uint64_t)v21;
              --v20;
            }
            while (v20);
          }
          break;
        case 1:
          v138 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v138)
          {
            v139 = *(float **)(*(_QWORD *)result + 152);
            v140 = (_QWORD *)v8[19];
            v141 = 4 * v138;
            do
            {
              v142 = *v139++;
              *v140++ = (uint64_t)v142;
              v141 -= 4;
            }
            while (v141);
          }
          break;
        case 2:
          v143 = *a7;
          v144 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v145 = **a4;
              if ((int)v145 >= 1)
              {
                v146 = *(_QWORD *)(v144 + 152);
                v147 = (_QWORD *)v8[19];
                v148 = *a5;
                do
                {
                  *v147++ = (uint64_t)*(float *)(v146 + 4 * v143);
                  v143 += *v148;
                  --v145;
                }
                while (v145);
              }
              break;
            case 2:
              v445 = **a4;
              if (v445 >= 1)
              {
                v446 = 0;
                v447 = 0;
                v448 = *(_QWORD *)(v144 + 152);
                v449 = v8[19];
                v450 = (*a4)[1];
                v451 = *a5;
                do
                {
                  if (v450 <= 0)
                  {
                    v453 = v451[1];
                  }
                  else
                  {
                    v452 = v450;
                    do
                    {
                      *(_QWORD *)(v449 + 8 * v447++) = (uint64_t)*(float *)(v448 + 4 * v143);
                      v453 = v451[1];
                      v143 += v453;
                      --v452;
                    }
                    while (v452);
                  }
                  result = *v451;
                  v143 = v143 - v453 * v450 + *v451;
                  ++v446;
                }
                while (v446 != v445);
              }
              break;
            case 3:
              v454 = *a4;
              v455 = **a4;
              if (v455 >= 1)
              {
                v456 = 0;
                v457 = 0;
                v458 = *(_QWORD *)(v144 + 152);
                v459 = v8[19];
                v460 = v454[1];
                v461 = *a5;
                do
                {
                  if ((int)v460 <= 0)
                  {
                    v465 = v461[1];
                  }
                  else
                  {
                    v462 = 0;
                    result = v454[2];
                    v463 = *a5;
                    do
                    {
                      v464 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(_QWORD *)(v459 + 8 * v457++) = (uint64_t)*(float *)(v458 + 4 * v143);
                          v143 += v463[2];
                          --v464;
                        }
                        while (v464);
                      }
                      v465 = v461[1];
                      v143 = v465 + v143 - v461[2] * (int)result;
                      ++v462;
                    }
                    while (v462 != (_DWORD)v460);
                  }
                  v143 = v143 - v465 * v460 + *v461;
                  ++v456;
                }
                while (v456 != v455);
              }
              break;
            case 4:
              v466 = *a4;
              v467 = **a4;
              if (v467 >= 1)
              {
                v468 = 0;
                v469 = 0;
                v470 = *(_QWORD *)(v144 + 152);
                v471 = v8[19];
                v472 = v466[1];
                v473 = *a5;
                do
                {
                  if ((int)v472 <= 0)
                  {
                    v480 = v473[1];
                  }
                  else
                  {
                    v474 = 0;
                    result = v466[2];
                    v475 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        v476 = 0;
                        v477 = v466[3];
                        v478 = *a5;
                        do
                        {
                          v479 = v477;
                          if (v477 >= 1)
                          {
                            do
                            {
                              *(_QWORD *)(v471 + 8 * v469++) = (uint64_t)*(float *)(v470 + 4 * v143);
                              v143 += v478[3];
                              --v479;
                            }
                            while (v479);
                          }
                          v143 = v475[2] + v143 - v475[3] * v477;
                          ++v476;
                        }
                        while (v476 != (_DWORD)result);
                      }
                      v480 = v473[1];
                      v143 = v480 + v143 - v473[2] * result;
                      ++v474;
                    }
                    while (v474 != (_DWORD)v472);
                  }
                  v143 = v143 - v480 * v472 + *v473;
                  ++v468;
                }
                while (v468 != v467);
              }
              break;
            default:
              v435 = v8[6];
              if (v435)
              {
                v436 = 0;
                v437 = *(_QWORD *)(v144 + 152) + 4 * v143;
                v438 = v8[19];
                v439 = *a4;
                v440 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v441 = *a5;
                do
                {
                  v442 = 0;
                  if ((v440 & 0x80000000) == 0)
                  {
                    v443 = v440;
                    LODWORD(result) = v436;
                    do
                    {
                      v444 = ldiv((int)result, v439[v443]);
                      result = v444.quot;
                      v442 += v441[v443--] * v444.rem;
                    }
                    while (v443 != -1);
                  }
                  *(_QWORD *)(v438 + 8 * v436++) = (uint64_t)*(float *)(v437 + 4 * v442);
                }
                while (v436 != v435);
              }
              break;
          }
          break;
        case 3:
          v1424 = *a8;
          v1430 = *a7;
          v149 = *(_QWORD **)result;
          v150 = v149[1] - *v149;
          switch(v150 >> 2)
          {
            case 1:
              v151 = (v150 << 30) - 0x100000000;
              v152 = *(int *)((char *)*a4 + (v151 >> 30));
              if (v152 >= 1)
              {
                v153 = v151 >> 29;
                v154 = *(uint64_t *)((char *)*a5 + v153);
                v155 = *(_QWORD *)(*a6 + v153);
                v156 = (_QWORD *)(v8[19] + 8 * v1424);
                v157 = (float *)(v149[19] + 4 * v1430);
                v158 = 8 * v155;
                v159 = 4 * v154;
                do
                {
                  *v156 = (uint64_t)*v157;
                  v156 = (_QWORD *)((char *)v156 + v158);
                  v157 = (float *)((char *)v157 + v159);
                  --v152;
                }
                while (v152);
              }
              break;
            case 2:
              v1140 = (v150 << 30) - 0x200000000;
              v1141 = *(int *)((char *)*a4 + (v1140 >> 30));
              if (v1141 >= 1)
              {
                v1142 = 0;
                v1143 = v150 << 30;
                v1144 = *a5;
                v1143 -= 0x100000000;
                v1145 = *(int *)((char *)*a4 + (v1143 >> 30));
                v1146 = v1140 >> 29;
                v1147 = *(uint64_t *)((char *)*a5 + (v1140 >> 29));
                v1148 = *a6;
                v1149 = *(_QWORD *)(*a6 + v1146);
                v1150 = v1143 >> 32;
                v1151 = 8 * v1424;
                v1152 = 8 * v1149;
                v1153 = 4 * v1430;
                result = 4 * v1147;
                do
                {
                  if (v1145 >= 1)
                  {
                    v1154 = (_QWORD *)(v8[19] + v1151);
                    v1155 = 8 * *(_QWORD *)(v1148 + 8 * v1150);
                    v1156 = (float *)(v149[19] + v1153);
                    v1157 = 4 * v1144[v1150];
                    v1158 = v1145;
                    do
                    {
                      *v1154 = (uint64_t)*v1156;
                      v1154 = (_QWORD *)((char *)v1154 + v1155);
                      v1156 = (float *)((char *)v1156 + v1157);
                      --v1158;
                    }
                    while (v1158);
                  }
                  ++v1142;
                  v1151 += v1152;
                  v1153 += result;
                }
                while (v1142 != v1141);
              }
              break;
            case 3:
              v1159 = (v150 << 30) - 0x300000000;
              v1160 = *a4;
              v1161 = *(int *)((char *)*a4 + (v1159 >> 30));
              if (v1161 >= 1)
              {
                v1162 = 0;
                v1163 = v150 << 30;
                v1164 = *a5;
                v1165 = v1159 >> 29;
                v1166 = *(uint64_t *)((char *)*a5 + (v1159 >> 29));
                v1167 = *a6;
                v1168 = *(_QWORD *)(*a6 + v1165);
                v1169 = v1163 - 0x200000000;
                v1170 = v1163 - 0x100000000;
                v1171 = *(int *)((char *)v1160 + ((v1163 - 0x200000000) >> 30));
                v1172 = v1169 >> 32;
                v1173 = v1170 >> 32;
                v1174 = 8 * v1424;
                v1175 = 8 * v1168;
                result = 4 * v1430;
                v1176 = 4 * v1166;
                do
                {
                  if (v1171 >= 1)
                  {
                    v1177 = 0;
                    v1178 = v1160[v1173];
                    v1179 = (_QWORD *)*v11;
                    v1180 = 8 * *(_QWORD *)(v1167 + 8 * v1172);
                    v1181 = 4 * v1164[v1172];
                    v1182 = result;
                    v1183 = v1174;
                    do
                    {
                      if (v1178 >= 1)
                      {
                        v1184 = (_QWORD *)(v1179[19] + v1183);
                        v1185 = 8 * *(_QWORD *)(v1167 + 8 * v1173);
                        v1186 = (float *)(v149[19] + v1182);
                        v1187 = 4 * v1164[v1173];
                        v1188 = v1178;
                        do
                        {
                          *v1184 = (uint64_t)*v1186;
                          v1184 = (_QWORD *)((char *)v1184 + v1185);
                          v1186 = (float *)((char *)v1186 + v1187);
                          --v1188;
                        }
                        while (v1188);
                      }
                      ++v1177;
                      v1183 += v1180;
                      v1182 += v1181;
                    }
                    while (v1177 != v1171);
                  }
                  ++v1162;
                  v1174 += v1175;
                  result += v1176;
                }
                while (v1162 != v1161);
              }
              break;
            case 4:
              v1189 = (v150 << 30) - 0x400000000;
              v1190 = *a4;
              v1544 = *(int *)((char *)*a4 + (v1189 >> 30));
              if (v1544 >= 1)
              {
                v1576 = 0;
                v1191 = v150 << 30;
                v1192 = *a5;
                v1193 = v1189 >> 29;
                result = *(uint64_t *)((char *)*a5 + v1193);
                v1194 = *a6;
                v1513 = (v1191 - 0x300000000) >> 32;
                v1195 = *(int *)((char *)v1190 + ((v1191 - 0x300000000) >> 30));
                v1196 = (v1191 - 0x200000000) >> 32;
                v1197 = (v1191 - 0x100000000) >> 32;
                v1198 = 8 * v1424;
                v1560 = 8 * *(_QWORD *)(*a6 + v1193);
                v1199 = 4 * v1430;
                v1529 = 4 * result;
                do
                {
                  if (v1195 >= 1)
                  {
                    v1200 = 0;
                    v1201 = v1190[v1196];
                    v1202 = 8 * *(_QWORD *)(v1194 + 8 * v1513);
                    v1203 = 4 * v1192[v1513];
                    v1204 = v1199;
                    v1205 = v1198;
                    do
                    {
                      if (v1201 >= 1)
                      {
                        v1206 = 0;
                        result = *(_QWORD *)(v1194 + 8 * v1196);
                        v1207 = v1190[v1197];
                        v1208 = (_QWORD *)*v11;
                        v1209 = 8 * result;
                        v1210 = 4 * v1192[v1196];
                        v1211 = v1204;
                        v1212 = v1205;
                        do
                        {
                          if (v1207 >= 1)
                          {
                            v1213 = (_QWORD *)(v1208[19] + v1212);
                            v1214 = 8 * *(_QWORD *)(v1194 + 8 * v1197);
                            result = v149[19] + v1211;
                            v1215 = 4 * v1192[v1197];
                            v1216 = v1207;
                            do
                            {
                              *v1213 = (uint64_t)*(float *)result;
                              v1213 = (_QWORD *)((char *)v1213 + v1214);
                              result += v1215;
                              --v1216;
                            }
                            while (v1216);
                          }
                          ++v1206;
                          v1212 += v1209;
                          v1211 += v1210;
                        }
                        while (v1206 != v1201);
                      }
                      ++v1200;
                      v1205 += v1202;
                      v1204 += v1203;
                    }
                    while (v1200 != v1195);
                  }
                  v1198 += v1560;
                  v1199 += v1529;
                  ++v1576;
                }
                while (v1576 != v1544);
              }
              break;
            case 5:
              v1217 = (v150 << 30) - 0x500000000;
              v1218 = *a4;
              v1469 = *(int *)((char *)*a4 + (v1217 >> 30));
              if (v1469 >= 1)
              {
                v1479 = 0;
                v1219 = v150 << 30;
                v1220 = *a5;
                v1221 = v1217 >> 29;
                v1222 = *a6;
                v1442 = (v1219 - 0x400000000) >> 32;
                v1561 = *(int *)((char *)v1218 + ((v1219 - 0x400000000) >> 30));
                v1223 = (v1219 - 0x200000000) >> 32;
                v1224 = (v1219 - 0x100000000) >> 32;
                v1501 = 8 * v1424;
                v1514 = (v1219 - 0x300000000) >> 32;
                v1489 = 4 * v1430;
                v1450 = 4 * *(uint64_t *)((char *)*a5 + v1221);
                v1459 = 8 * *(_QWORD *)(*a6 + v1221);
                do
                {
                  if (v1561 >= 1)
                  {
                    v1225 = 0;
                    v1226 = v1218[v1514];
                    v1530 = 4 * v1220[v1442];
                    v1545 = 8 * *(_QWORD *)(v1222 + 8 * v1442);
                    v1227 = v1489;
                    result = v1501;
                    do
                    {
                      v1577 = v1225;
                      if (v1226 >= 1)
                      {
                        v1228 = 0;
                        v1229 = v1218[v1223];
                        v1230 = 8 * *(_QWORD *)(v1222 + 8 * v1514);
                        v1231 = 4 * v1220[v1514];
                        v1232 = v1227;
                        v1233 = result;
                        do
                        {
                          if (v1229 >= 1)
                          {
                            v1234 = 0;
                            v1235 = v1218[v1224];
                            v1236 = (_QWORD *)*v11;
                            v1237 = 8 * *(_QWORD *)(v1222 + 8 * v1223);
                            v1238 = 4 * v1220[v1223];
                            v1239 = v1232;
                            v1240 = v1233;
                            do
                            {
                              if (v1235 >= 1)
                              {
                                v1241 = (_QWORD *)(v1236[19] + v1240);
                                v1242 = 8 * *(_QWORD *)(v1222 + 8 * v1224);
                                v1243 = (float *)(v149[19] + v1239);
                                v1244 = 4 * v1220[v1224];
                                v1245 = v1235;
                                do
                                {
                                  *v1241 = (uint64_t)*v1243;
                                  v1241 = (_QWORD *)((char *)v1241 + v1242);
                                  v1243 = (float *)((char *)v1243 + v1244);
                                  --v1245;
                                }
                                while (v1245);
                              }
                              ++v1234;
                              v1240 += v1237;
                              v1239 += v1238;
                            }
                            while (v1234 != v1229);
                          }
                          ++v1228;
                          v1233 += v1230;
                          v1232 += v1231;
                        }
                        while (v1228 != v1226);
                      }
                      v1225 = v1577 + 1;
                      result += v1545;
                      v1227 += v1530;
                    }
                    while (v1577 + 1 != v1561);
                  }
                  v1501 += v1459;
                  v1489 += v1450;
                  ++v1479;
                }
                while (v1479 != v1469);
              }
              break;
            default:
              v1102 = (char *)a4[1];
              LODWORD(v1103) = 1;
              v1104 = -20;
              do
              {
                v1103 = *(int *)&v1102[v1104] * (uint64_t)(int)v1103;
                v1104 += 4;
              }
              while (v1104);
              v1420 = v149[6];
              if (v1420)
              {
                v1105 = 0;
                v1106 = (v150 << 30) - 0x500000000;
                v1107 = *a4;
                v1401 = *v8;
                v1108 = *a5;
                v1405 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1410 = ((unint64_t)(v1102 - (char *)*a4) >> 2) - 1;
                v1109 = *a6;
                v1397 = v1106 >> 32;
                v1468 = *(int *)((char *)*a4 + (v1106 >> 30));
                v1441 = ((v150 << 30) - 0x400000000) >> 32;
                v1512 = ((v150 << 30) - 0x300000000) >> 32;
                v1110 = ((v150 << 30) - 0x200000000) >> 32;
                v1111 = ((v150 << 30) - 0x100000000) >> 32;
                v1415 = v1103;
                do
                {
                  v1112 = v1410;
                  if ((v1410 & 0x80000000) != 0)
                  {
                    v1113 = 0;
                    v1114 = v1405;
                  }
                  else
                  {
                    v1113 = 0;
                    LODWORD(result) = v1105;
                    v1114 = v1405;
                    do
                    {
                      v1115 = ldiv((int)result, v1107[v1112]);
                      result = v1115.quot;
                      v1113 += v1108[v1112--] * v1115.rem;
                    }
                    while (v1112 != -1);
                  }
                  v1436 = v1105;
                  v1116 = 0;
                  if ((v1114 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1105;
                    do
                    {
                      v1117 = ldiv((int)result, *(int *)(v1401 + 4 * v1114));
                      result = v1117.quot;
                      v1116 += *(_QWORD *)(v1109 + 8 * v1114--) * v1117.rem;
                    }
                    while (v1114 != -1);
                  }
                  if (v1468 >= 1)
                  {
                    v1118 = 0;
                    v1559 = v1107[v1441];
                    v1458 = 8 * *(_QWORD *)(v1109 + 8 * v1397);
                    v1488 = 4 * (v1113 + v1430);
                    v1500 = 8 * (v1116 + v1424);
                    v1449 = 4 * v1108[v1397];
                    do
                    {
                      v1478 = v1118;
                      if (v1559 >= 1)
                      {
                        v1119 = 0;
                        v1120 = v1107[v1512];
                        v1528 = 4 * v1108[v1441];
                        v1543 = 8 * *(_QWORD *)(v1109 + 8 * v1441);
                        v1122 = v1488;
                        v1121 = v1500;
                        do
                        {
                          if (v1120 >= 1)
                          {
                            v1123 = 0;
                            v1124 = v1107[v1110];
                            v1125 = 8 * *(_QWORD *)(v1109 + 8 * v1512);
                            v1126 = 4 * v1108[v1512];
                            result = v1122;
                            v1127 = v1121;
                            do
                            {
                              if (v1124 >= 1)
                              {
                                v1128 = 0;
                                v1129 = v1107[v1111];
                                v1130 = *(uint64_t **)a2;
                                v1131 = 8 * *(_QWORD *)(v1109 + 8 * v1110);
                                v1132 = 4 * v1108[v1110];
                                v1133 = result;
                                v1134 = v1127;
                                do
                                {
                                  if (v1129 >= 1)
                                  {
                                    v1135 = (_QWORD *)(v1130[19] + v1134);
                                    v1136 = 8 * *(_QWORD *)(v1109 + 8 * v1111);
                                    v1137 = (float *)(v149[19] + v1133);
                                    v1138 = 4 * v1108[v1111];
                                    v1139 = v1129;
                                    do
                                    {
                                      *v1135 = (uint64_t)*v1137;
                                      v1135 = (_QWORD *)((char *)v1135 + v1136);
                                      v1137 = (float *)((char *)v1137 + v1138);
                                      --v1139;
                                    }
                                    while (v1139);
                                  }
                                  ++v1128;
                                  v1134 += v1131;
                                  v1133 += v1132;
                                }
                                while (v1128 != v1124);
                              }
                              ++v1123;
                              v1127 += v1125;
                              result += v1126;
                            }
                            while (v1123 != v1120);
                          }
                          ++v1119;
                          v1121 += v1543;
                          v1122 += v1528;
                        }
                        while (v1119 != v1559);
                      }
                      v1118 = v1478 + 1;
                      v1500 += v1458;
                      v1488 += v1449;
                    }
                    while (v1478 + 1 != v1468);
                  }
                  v1105 += v1415;
                }
                while (v1420 > v1436 + v1415);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v23 = v8[6];
          if (v23)
          {
            v24 = **(_DWORD **)(*(_QWORD *)result + 152);
            v25 = (_DWORD *)v8[19];
            do
            {
              *v25++ = v24;
              --v23;
            }
            while (v23);
          }
          break;
        case 1:
          v160 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v160)
            result = (uint64_t)memmove((void *)v8[19], *(const void **)(*(_QWORD *)result + 152), 4 * v160);
          break;
        case 2:
          v161 = *a7;
          v162 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v163 = **a4;
              if ((int)v163 >= 1)
              {
                v164 = (_DWORD *)v8[19];
                v165 = **a5;
                v166 = (_DWORD *)(*(_QWORD *)(v162 + 152) + 4 * v161);
                do
                {
                  *v164++ = *v166;
                  v166 += v165;
                  --v163;
                }
                while (v163);
              }
              break;
            case 2:
              v491 = **a4;
              if (v491 >= 1)
              {
                v492 = 0;
                v493 = 0;
                v494 = *(_QWORD *)(v162 + 152);
                v495 = v8[19];
                v496 = (*a4)[1];
                v497 = (*a5)[1];
                v498 = **a5 - v497 * v496;
                do
                {
                  v499 = v496;
                  if ((int)v496 >= 1)
                  {
                    do
                    {
                      *(_DWORD *)(v495 + 4 * v493++) = *(_DWORD *)(v494 + 4 * v161);
                      v161 += v497;
                      --v499;
                    }
                    while (v499);
                  }
                  v161 += v498;
                  ++v492;
                }
                while (v492 != v491);
              }
              break;
            case 3:
              v500 = *a4;
              v501 = **a4;
              if (v501 >= 1)
              {
                v502 = 0;
                result = 0;
                v503 = *(_QWORD *)(v162 + 152);
                v504 = v8[19];
                v505 = v500[1];
                v506 = *a5;
                v507 = (*a5)[1];
                v508 = **a5 - v507 * v505;
                do
                {
                  if ((int)v505 < 1)
                  {
                    v515 = result;
                  }
                  else
                  {
                    v509 = 0;
                    v510 = v500[2];
                    v511 = *a5;
                    v512 = v507 - v506[2] * v510;
                    do
                    {
                      if ((int)v510 < 1)
                      {
                        v515 = result;
                      }
                      else
                      {
                        v513 = v511[2];
                        v514 = v510;
                        do
                        {
                          v515 = result + 1;
                          *(_DWORD *)(v504 + 4 * result) = *(_DWORD *)(v503 + 4 * v161);
                          v161 += v513;
                          ++result;
                          --v514;
                        }
                        while (v514);
                      }
                      v161 += v512;
                      ++v509;
                      result = v515;
                    }
                    while (v509 != (_DWORD)v505);
                  }
                  v161 += v508;
                  ++v502;
                  result = v515;
                }
                while (v502 != v501);
              }
              break;
            case 4:
              v516 = *a4;
              v517 = **a4;
              if (v517 >= 1)
              {
                v518 = 0;
                result = 0;
                v519 = *(_QWORD *)(v162 + 152);
                v520 = v8[19];
                v521 = v516[1];
                v522 = *a5;
                v523 = (*a5)[1];
                v524 = **a5 - v523 * v521;
                do
                {
                  if ((int)v521 < 1)
                  {
                    v535 = result;
                  }
                  else
                  {
                    v525 = 0;
                    v526 = v516[2];
                    v527 = *a5;
                    v528 = v523 - v522[2] * v526;
                    do
                    {
                      if ((int)v526 < 1)
                      {
                        v535 = result;
                      }
                      else
                      {
                        v529 = 0;
                        v530 = v516[3];
                        v531 = *a5;
                        v532 = v527[2] - v527[3] * v530;
                        do
                        {
                          if ((int)v530 < 1)
                          {
                            v535 = result;
                          }
                          else
                          {
                            v533 = v531[3];
                            v534 = v530;
                            do
                            {
                              v535 = result + 1;
                              *(_DWORD *)(v520 + 4 * result) = *(_DWORD *)(v519 + 4 * v161);
                              v161 += v533;
                              ++result;
                              --v534;
                            }
                            while (v534);
                          }
                          v161 += v532;
                          ++v529;
                          result = v535;
                        }
                        while (v529 != (_DWORD)v526);
                      }
                      v161 += v528;
                      ++v525;
                      result = v535;
                    }
                    while (v525 != (_DWORD)v521);
                  }
                  v161 += v524;
                  ++v518;
                  result = v535;
                }
                while (v518 != v517);
              }
              break;
            default:
              v481 = v8[6];
              if (v481)
              {
                v482 = 0;
                v483 = *(_QWORD *)(v162 + 152) + 4 * v161;
                v484 = v8[19];
                v485 = *a4;
                v486 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v487 = *a5;
                do
                {
                  v488 = 0;
                  if ((v486 & 0x80000000) == 0)
                  {
                    v489 = v486;
                    LODWORD(result) = v482;
                    do
                    {
                      v490 = ldiv((int)result, v485[v489]);
                      result = v490.quot;
                      v488 += v487[v489--] * v490.rem;
                    }
                    while (v489 != -1);
                  }
                  *(_DWORD *)(v484 + 4 * v482++) = *(_DWORD *)(v483 + 4 * v488);
                }
                while (v482 != v481);
              }
              break;
          }
          break;
        case 3:
          v1431 = *a8;
          v1432 = *a7;
          v167 = *(_QWORD **)result;
          v168 = v167[1] - *v167;
          switch(v168 >> 2)
          {
            case 1:
              v169 = (v168 << 30) - 0x100000000;
              v170 = *(int *)((char *)*a4 + (v169 >> 30));
              if (v170 >= 1)
              {
                v171 = v169 >> 29;
                v172 = *(uint64_t *)((char *)*a5 + v171);
                v173 = *(_QWORD *)(*a6 + v171);
                v174 = (_DWORD *)(v8[19] + 4 * v1431);
                v175 = (_DWORD *)(v167[19] + 4 * v1432);
                v176 = 4 * v173;
                v177 = 4 * v172;
                do
                {
                  *v174 = *v175;
                  v174 = (_DWORD *)((char *)v174 + v176);
                  v175 = (_DWORD *)((char *)v175 + v177);
                  --v170;
                }
                while (v170);
              }
              break;
            case 2:
              v1285 = (v168 << 30) - 0x200000000;
              v1286 = *(int *)((char *)*a4 + (v1285 >> 30));
              if (v1286 >= 1)
              {
                v1287 = 0;
                v1288 = v1285 >> 29;
                v1289 = *(uint64_t *)((char *)*a5 + v1288);
                v1290 = *(_QWORD *)(*a6 + v1288);
                v1291 = (v168 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v1291 >> 29));
                v1292 = *(_QWORD *)(*a6 + (v1291 >> 29));
                v1293 = *(int *)((char *)*a4 + (v1291 >> 30));
                v1294 = 4 * v1431;
                v1295 = 4 * v1290;
                v1296 = 4 * v1292;
                v1297 = 4 * v1432;
                v1298 = 4 * v1289;
                v1299 = 4 * result;
                do
                {
                  if (v1293 >= 1)
                  {
                    result = v8[19] + v1294;
                    v1300 = (_DWORD *)(v167[19] + v1297);
                    v1301 = v1293;
                    do
                    {
                      *(_DWORD *)result = *v1300;
                      result += v1296;
                      v1300 = (_DWORD *)((char *)v1300 + v1299);
                      --v1301;
                    }
                    while (v1301);
                  }
                  ++v1287;
                  v1294 += v1295;
                  v1297 += v1298;
                }
                while (v1287 != v1286);
              }
              break;
            case 3:
              v1302 = (v168 << 30) - 0x300000000;
              v1303 = *a4;
              v1304 = *(int *)((char *)*a4 + (v1302 >> 30));
              if (v1304 >= 1)
              {
                v1305 = 0;
                v1306 = v168 << 30;
                v1307 = *a5;
                v1308 = v1302 >> 29;
                v1309 = *(uint64_t *)((char *)*a5 + (v1302 >> 29));
                v1310 = *a6;
                v1311 = *(_QWORD *)(*a6 + v1308);
                v1312 = (v1306 - 0x200000000) >> 29;
                v1313 = v1306 - 0x100000000;
                v1314 = *(uint64_t *)((char *)*a5 + v1312);
                v1315 = *(_QWORD *)(*a6 + v1312);
                v1316 = *(int *)((char *)v1303 + ((v1306 - 0x200000000) >> 30));
                v1317 = v1313 >> 32;
                v1318 = 4 * v1431;
                v1319 = 4 * v1311;
                v1320 = 4 * v1315;
                result = 4 * v1432;
                v1321 = 4 * v1309;
                v1322 = 4 * v1314;
                do
                {
                  if (v1316 >= 1)
                  {
                    v1323 = 0;
                    v1324 = v1303[v1317];
                    v1325 = (_QWORD *)*v11;
                    v1326 = 4 * *(_QWORD *)(v1310 + 8 * v1317);
                    v1327 = 4 * v1307[v1317];
                    v1328 = result;
                    v1329 = v1318;
                    do
                    {
                      if (v1324 >= 1)
                      {
                        v1330 = (_DWORD *)(v1325[19] + v1329);
                        v11 = (uint64_t *)a2;
                        v1331 = (_DWORD *)(v167[19] + v1328);
                        v1332 = v1324;
                        do
                        {
                          *v1330 = *v1331;
                          v1330 = (_DWORD *)((char *)v1330 + v1326);
                          v1331 = (_DWORD *)((char *)v1331 + v1327);
                          --v1332;
                        }
                        while (v1332);
                      }
                      ++v1323;
                      v1329 += v1320;
                      v1328 += v1322;
                    }
                    while (v1323 != v1316);
                  }
                  ++v1305;
                  v1318 += v1319;
                  result += v1321;
                }
                while (v1305 != v1304);
              }
              break;
            case 4:
              v1333 = (v168 << 30) - 0x400000000;
              v1334 = *a4;
              v1579 = *(int *)((char *)*a4 + (v1333 >> 30));
              if (v1579 >= 1)
              {
                v1335 = 0;
                v1336 = *a5;
                v1337 = v1333 >> 29;
                v1338 = *a6;
                v1339 = v168 << 30;
                v1340 = (v1339 - 0x300000000) >> 29;
                v1341 = *(uint64_t *)((char *)*a5 + v1340);
                v1342 = *(_QWORD *)(*a6 + v1340);
                v1343 = v1339 - 0x200000000;
                v1344 = v1339 - 0x100000000;
                v1345 = *(int *)((char *)v1334 + ((v1339 - 0x300000000) >> 30));
                v1346 = v1343 >> 32;
                v1347 = v1344 >> 32;
                v1348 = 4 * v1431;
                v1563 = 4 * *(_QWORD *)(*a6 + v1337);
                result = 4 * v1342;
                v1349 = 4 * v1432;
                v1547 = 4 * *(uint64_t *)((char *)*a5 + v1337);
                v1350 = 4 * v1341;
                do
                {
                  if (v1345 >= 1)
                  {
                    v1351 = 0;
                    v1352 = v1334[v1346];
                    v1353 = 4 * *(_QWORD *)(v1338 + 8 * v1346);
                    v1354 = 4 * v1336[v1346];
                    v1355 = v1349;
                    v1356 = v1348;
                    do
                    {
                      if (v1352 >= 1)
                      {
                        v1357 = 0;
                        v1358 = v1334[v1347];
                        v1359 = (_QWORD *)*v11;
                        v1360 = 4 * *(_QWORD *)(v1338 + 8 * v1347);
                        v1361 = 4 * v1336[v1347];
                        v1362 = v1355;
                        v1363 = v1356;
                        do
                        {
                          if (v1358 >= 1)
                          {
                            v1364 = (_DWORD *)(v1359[19] + v1363);
                            v1365 = (_DWORD *)(v167[19] + v1362);
                            v1366 = v1358;
                            do
                            {
                              *v1364 = *v1365;
                              v1364 = (_DWORD *)((char *)v1364 + v1360);
                              v1365 = (_DWORD *)((char *)v1365 + v1361);
                              --v1366;
                            }
                            while (v1366);
                          }
                          ++v1357;
                          v1363 += v1353;
                          v1362 += v1354;
                        }
                        while (v1357 != v1352);
                      }
                      ++v1351;
                      v1356 += result;
                      v1355 += v1350;
                    }
                    while (v1351 != v1345);
                  }
                  ++v1335;
                  v1348 += v1563;
                  v1349 += v1547;
                }
                while (v1335 != v1579);
              }
              break;
            case 5:
              v1367 = (v168 << 30) - 0x500000000;
              v1368 = *a4;
              v1491 = *(int *)((char *)*a4 + (v1367 >> 30));
              if (v1491 >= 1)
              {
                v1503 = 0;
                v1369 = *a5;
                v1370 = v1367 >> 29;
                v1371 = *a6;
                v1372 = ((v168 << 30) - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1372);
                v1373 = *(_QWORD *)(*a6 + v1372);
                v1580 = *(int *)((char *)v1368 + (((v168 << 30) - 0x400000000) >> 30));
                v1461 = ((v168 << 30) - 0x300000000) >> 32;
                v1374 = ((v168 << 30) - 0x200000000) >> 32;
                v1375 = ((v168 << 30) - 0x100000000) >> 32;
                v1532 = 4 * v1431;
                v1481 = 4 * *(_QWORD *)(*a6 + v1370);
                v1564 = 4 * v1373;
                v1516 = 4 * v1432;
                v1471 = 4 * *(uint64_t *)((char *)*a5 + v1370);
                v1548 = 4 * result;
                do
                {
                  if (v1580 >= 1)
                  {
                    v1376 = 0;
                    v1377 = v1368[v1461];
                    v1378 = 4 * *(_QWORD *)(v1371 + 8 * v1461);
                    v1379 = 4 * v1369[v1461];
                    v1380 = v1516;
                    v1381 = v1532;
                    do
                    {
                      if (v1377 >= 1)
                      {
                        v1382 = 0;
                        v1383 = v1368[v1374];
                        v1384 = 4 * *(_QWORD *)(v1371 + 8 * v1374);
                        v1385 = 4 * v1369[v1374];
                        v1386 = v1380;
                        v1387 = v1381;
                        do
                        {
                          if (v1383 >= 1)
                          {
                            v1388 = 0;
                            v1389 = v1368[v1375];
                            v1390 = (_QWORD *)*v11;
                            v1391 = 4 * *(_QWORD *)(v1371 + 8 * v1375);
                            v1392 = 4 * v1369[v1375];
                            v1393 = v1386;
                            v1394 = v1387;
                            do
                            {
                              if (v1389 >= 1)
                              {
                                v1395 = (_DWORD *)(v1390[19] + v1394);
                                v1396 = (_DWORD *)(v167[19] + v1393);
                                LODWORD(result) = v1389;
                                do
                                {
                                  *v1395 = *v1396;
                                  v1395 = (_DWORD *)((char *)v1395 + v1391);
                                  v1396 = (_DWORD *)((char *)v1396 + v1392);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1388;
                              v1394 += v1384;
                              v1393 += v1385;
                            }
                            while (v1388 != v1383);
                          }
                          ++v1382;
                          v1387 += v1378;
                          v1386 += v1379;
                        }
                        while (v1382 != v1377);
                      }
                      ++v1376;
                      v1381 += v1564;
                      v1380 += v1548;
                    }
                    while (v1376 != v1580);
                  }
                  v1532 += v1481;
                  v1516 += v1471;
                  ++v1503;
                }
                while (v1503 != v1491);
              }
              break;
            default:
              v1246 = (char *)a4[1];
              LODWORD(v1247) = 1;
              v1248 = -20;
              do
              {
                v1247 = *(int *)&v1246[v1248] * (uint64_t)(int)v1247;
                v1248 += 4;
              }
              while (v1248);
              v1426 = v167[6];
              if (v1426)
              {
                result = 0;
                v1249 = (v168 << 30) - 0x500000000;
                v1250 = *a4;
                v1480 = *v8;
                v1251 = *a5;
                v1411 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1416 = ((unint64_t)(v1246 - (char *)*a4) >> 2) - 1;
                v1252 = *a6;
                v1490 = *(int *)((char *)*a4 + (v1249 >> 30));
                v1406 = ((v168 << 30) - 0x400000000) >> 32;
                v1253 = ((v168 << 30) - 0x200000000) >> 32;
                v1254 = ((v168 << 30) - 0x100000000) >> 32;
                v1470 = 4 * *(_QWORD *)(*a6 + (v1249 >> 29));
                v1451 = ((v168 << 30) - 0x300000000) >> 32;
                v1460 = 4 * *(uint64_t *)((char *)*a5 + (v1249 >> 29));
                v1421 = v1247;
                do
                {
                  v1255 = v1416;
                  v1443 = result;
                  v1256 = 0;
                  if ((v1416 & 0x80000000) != 0)
                  {
                    v1257 = v1411;
                  }
                  else
                  {
                    v1257 = v1411;
                    do
                    {
                      v1258 = ldiv((int)result, v1250[v1255]);
                      LODWORD(result) = v1258.quot;
                      v1256 += v1251[v1255--] * v1258.rem;
                    }
                    while (v1255 != -1);
                  }
                  v1259 = 0;
                  if ((v1257 & 0x80000000) == 0)
                  {
                    v1260 = v1443;
                    do
                    {
                      v1261 = ldiv(v1260, *(int *)(v1480 + 4 * v1257));
                      v1260 = v1261.quot;
                      v1259 += *(_QWORD *)(v1252 + 8 * v1257--) * v1261.rem;
                    }
                    while (v1257 != -1);
                  }
                  if (v1490 >= 1)
                  {
                    v1262 = 0;
                    v1578 = v1250[v1406];
                    v1531 = 4 * (v1259 + v1431);
                    v1562 = 4 * *(_QWORD *)(v1252 + 8 * v1406);
                    v1515 = 4 * (v1256 + v1432);
                    v1546 = 4 * v1251[v1406];
                    do
                    {
                      v1502 = v1262;
                      if (v1578 >= 1)
                      {
                        v1263 = 0;
                        v1264 = v1250[v1451];
                        v1265 = 4 * *(_QWORD *)(v1252 + 8 * v1451);
                        v1266 = 4 * v1251[v1451];
                        v1267 = v1515;
                        v1268 = v1531;
                        do
                        {
                          if (v1264 >= 1)
                          {
                            v1269 = 0;
                            v1270 = v1250[v1253];
                            v1271 = 4 * *(_QWORD *)(v1252 + 8 * v1253);
                            v1272 = 4 * v1251[v1253];
                            v1273 = v1267;
                            v1274 = v1268;
                            do
                            {
                              if (v1270 >= 1)
                              {
                                v1275 = 0;
                                v1276 = v1250[v1254];
                                v1277 = (_QWORD *)*v11;
                                v1278 = 4 * *(_QWORD *)(v1252 + 8 * v1254);
                                v1279 = 4 * v1251[v1254];
                                v1280 = v1273;
                                v1281 = v1274;
                                do
                                {
                                  if (v1276 >= 1)
                                  {
                                    v1282 = (_DWORD *)(v1277[19] + v1281);
                                    v1283 = (_DWORD *)(v167[19] + v1280);
                                    v1284 = v1276;
                                    do
                                    {
                                      *v1282 = *v1283;
                                      v1282 = (_DWORD *)((char *)v1282 + v1278);
                                      v1283 = (_DWORD *)((char *)v1283 + v1279);
                                      --v1284;
                                    }
                                    while (v1284);
                                  }
                                  ++v1275;
                                  v1281 += v1271;
                                  v1280 += v1272;
                                }
                                while (v1275 != v1270);
                              }
                              ++v1269;
                              v1274 += v1265;
                              v1273 += v1266;
                            }
                            while (v1269 != v1264);
                          }
                          ++v1263;
                          v1268 += v1562;
                          v1267 += v1546;
                        }
                        while (v1263 != v1578);
                      }
                      v1262 = v1502 + 1;
                      v1531 += v1470;
                      v1515 += v1460;
                    }
                    while (v1502 + 1 != v1490);
                  }
                  result = v1443 + v1421;
                }
                while (v1426 > v1443 + v1421);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *mlx_linalg_cholesky(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::linalg::cholesky((char ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242461F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_linalg_inv(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::linalg::inv((char ***)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242461FFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_linalg_norm_p(uint64_t a1, const void *a2, unint64_t a3, int a4, uint64_t a5, double a6)
{
  _QWORD *v12;
  char v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v18[2];
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  char v22;
  _QWORD v23[2];

  v12 = (_QWORD *)operator new();
  if (a2)
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v18, a2, (uint64_t)a2 + 4 * a3, a3);
    *(_OWORD *)__p = *(_OWORD *)v18;
    v21 = v19;
    v18[1] = 0;
    v19 = 0;
    v18[0] = 0;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    LOBYTE(__p[0]) = 0;
  }
  v22 = v13;
  mlx::core::linalg::norm((_QWORD *)(a1 + 16), (uint64_t)__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v23, a6);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v14 = v23[1];
  v12[2] = v23[0];
  v12[3] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::array::~array((mlx::core::array *)v23);
  if (v22 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a2 && v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  return v12;
}

void sub_242462168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A82C4](v16, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_linalg_norm_ord(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v12;
  char v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v18[2];
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  char v22;
  _QWORD v23[2];

  v12 = (_QWORD *)operator new();
  if (a3)
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v18, a3, (uint64_t)a3 + 4 * a4, a4);
    *(_OWORD *)__p = *(_OWORD *)v18;
    v21 = v19;
    v18[1] = 0;
    v19 = 0;
    v18[0] = 0;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    LOBYTE(__p[0]) = 0;
  }
  v22 = v13;
  mlx::core::linalg::norm((_QWORD *)(a1 + 16), (const void **)(a2 + 16), (uint64_t)__p, a5, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v23);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v14 = v23[1];
  v12[2] = v23[0];
  v12[3] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::array::~array((mlx::core::array *)v23);
  if (v22 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a3 && v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  return v12;
}

void sub_242462308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A82C4](v16, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_linalg_norm(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  char v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  char v20;
  _QWORD v21[2];

  v10 = (_QWORD *)operator new();
  if (a2)
  {
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v16, a2, (uint64_t)a2 + 4 * a3, a3);
    *(_OWORD *)__p = *(_OWORD *)v16;
    v19 = v17;
    v16[1] = 0;
    v17 = 0;
    v16[0] = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    LOBYTE(__p[0]) = 0;
  }
  v20 = v11;
  mlx::core::linalg::norm((const void ***)(a1 + 16), (uint64_t)__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v21);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v12 = v21[1];
  v10[2] = v21[0];
  v10[3] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  mlx::core::array::~array((mlx::core::array *)v21);
  if (v20 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a2 && v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  return v10;
}

void sub_242462498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A82C4](v16, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_linalg_qr(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v6[2];
  uint64_t v7;

  v4 = (_QWORD *)operator new();
  mlx::core::linalg::qr((char ***)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v6);
  mlx_vector_array_::mlx_vector_array_(v4, v6);
  mlx::core::array::~array((mlx::core::array *)&v7);
  mlx::core::array::~array((mlx::core::array *)v6);
  return v4;
}

void sub_242462578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  mlx::core::array::~array((mlx::core::array *)(v10 + 16));
  mlx::core::array::~array((mlx::core::array *)&a9);
  MEMORY[0x2426A82C4](v9, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_linalg_svd(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  void **v8;

  v4 = operator new();
  mlx::core::linalg::svd((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, (uint64_t *)&v6);
  *(_QWORD *)v4 = &off_25134E728;
  *(_QWORD *)(v4 + 8) = 1;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v7;
  v6 = 0uLL;
  v7 = 0;
  v8 = (void **)&v6;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v4;
}

void sub_242462654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::linalg::at_least_float(int *a1)
{
  if (mlx::core::issubdtype((unsigned int *)a1, &mlx::core::inexact))
    return *(_QWORD *)a1;
  else
    return mlx::core::promote_types(a1, (int *)&mlx::core::float32);
}

void mlx::core::linalg::norm(const void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _DWORD *v9;
  std::logic_error *exception;
  void *__p;
  void *v12;
  _DWORD *v13;
  char v14;
  _BYTE v15[16];

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 9uLL)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[linalg::norm] Received too many axes for norm.");
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    mlx::core::linalg::l2_norm(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    mlx::core::flatten(a1, a4, a5, (uint64_t)v15);
    v9 = operator new(4uLL);
    *v9 = 0;
    __p = v9;
    v12 = v9 + 1;
    v13 = v9 + 1;
    v14 = 1;
    mlx::core::linalg::norm(v15, &__p, a3, a4, a5);
    if (v14 && __p)
    {
      v12 = __p;
      operator delete(__p);
    }
    mlx::core::array::~array((mlx::core::array *)v15);
  }
}

void sub_2424627D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void mlx::core::linalg::l2_norm(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  mlx::core *v12;
  mlx::core::array *v13;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  unsigned int v17[4];

  *(_QWORD *)v17 = *(_QWORD *)(*a1 + 56);
  if (mlx::core::issubdtype(v17, &mlx::core::complexfloating))
  {
    mlx::core::abs(a1, a4, a5, v15);
    mlx::core::abs(a1, a4, a5, v14);
    mlx::core::operator*(v15, v14, v12, v16);
    mlx::core::sum((uint64_t)v16, a2, a3, a4, a5, (mlx::core::array *)v17);
    mlx::core::sqrt(v17, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v17);
    mlx::core::array::~array((mlx::core::array *)v16);
    mlx::core::array::~array((mlx::core::array *)v14);
    v13 = (mlx::core::array *)v15;
  }
  else
  {
    mlx::core::square(a1, a4, a5, v16);
    mlx::core::sum((uint64_t)v16, a2, a3, a4, a5, (mlx::core::array *)v17);
    mlx::core::sqrt(v17, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v17);
    v13 = (mlx::core::array *)v16;
  }
  mlx::core::array::~array(v13);
}

void sub_242462958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::linalg::norm(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v15;
  std::vector<int>::pointer v16;
  uint64_t v17;
  std::logic_error *exception;
  std::vector<int> v19;

  memset(&v19, 0, sizeof(v19));
  if (*(_BYTE *)(a2 + 24))
  {
    if (&v19 == (std::vector<int> *)a2)
    {
      begin = 0;
      end = 0;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v19, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      begin = v19.__begin_;
      end = v19.__end_;
    }
  }
  else
  {
    std::vector<int>::resize(&v19, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2);
    begin = v19.__begin_;
    end = v19.__end_;
    if (v19.__begin_ == v19.__end_)
    {
      end = v19.__begin_;
    }
    else
    {
      v15 = 0;
      v16 = v19.__begin_;
      do
        *v16++ = v15++;
      while (v16 != end);
    }
  }
  v17 = end - begin;
  if (v17 == 2)
  {
    mlx::core::linalg::matrix_norm(a1, &v19.__begin_, a3, a4, a5, a6, a7);
  }
  else
  {
    if (v17 != 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "[linalg::norm] Received too many axes for norm.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    mlx::core::linalg::vector_norm(a1, (uint64_t)&v19, a3, a4, a5, a6, a7);
  }
  if (v19.__begin_)
  {
    v19.__end_ = v19.__begin_;
    operator delete(v19.__begin_);
  }
}

void sub_242462B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  __cxa_free_exception(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void mlx::core::linalg::vector_norm(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  uint64_t v15;
  mlx::core::array *v16;
  uint64_t **v17;
  int **v18[2];
  int **v19[2];
  const void **v20[2];
  uint64_t *v21[2];
  uint64_t *v22[2];
  _QWORD v23[2];
  int **v24[2];
  uint64_t *v25[2];
  _QWORD v26[2];

  v25[0] = *(uint64_t **)(*a1 + 56);
  v14 = mlx::core::linalg::at_least_float((int *)v25);
  if (a7 == 0.0)
  {
    v15 = mlx::core::TypeToDtype<int>::operator mlx::core::Dtype();
    mlx::core::array::array<int>(v24, 0, v15);
    mlx::core::not_equal(a1, v24, a4, a5, v25);
    mlx::core::sum((uint64_t)v25, a2, a3, a4, a5, (mlx::core::array *)v26);
    mlx::core::astype(v26, v14, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v26);
    mlx::core::array::~array((mlx::core::array *)v25);
    v16 = (mlx::core::array *)v24;
LABEL_6:
    mlx::core::array::~array(v16);
    return;
  }
  if (a7 == 1.0)
  {
    mlx::core::abs(a1, a4, a5, v25);
    mlx::core::sum((uint64_t)v25, a2, a3, a4, a5, (mlx::core::array *)v23);
    mlx::core::astype(v23, v14, a4, a5, a6);
    v17 = (uint64_t **)v23;
LABEL_5:
    mlx::core::array::~array((mlx::core::array *)v17);
    v16 = (mlx::core::array *)v25;
    goto LABEL_6;
  }
  if (a7 != 2.0)
  {
    if (a7 == INFINITY)
    {
      mlx::core::abs(a1, a4, a5, v25);
      mlx::core::max(v25, a2, a3, a4, a5, v22);
      mlx::core::astype(v22, v14, a4, a5, a6);
      v17 = v22;
    }
    else
    {
      if (a7 != -INFINITY)
      {
        mlx::core::abs(a1, a4, a5, v20);
        mlx::core::array::array<double>(v19, v14, a7);
        mlx::core::power(v20, (const void ***)v19, a4, a5, v24);
        mlx::core::sum((uint64_t)v24, a2, a3, a4, a5, (mlx::core::array *)v25);
        mlx::core::array::array<double>(v18, v14, 1.0 / a7);
        mlx::core::power((const void ***)v25, (const void ***)v18, a4, a5, a6);
        mlx::core::array::~array((mlx::core::array *)v18);
        mlx::core::array::~array((mlx::core::array *)v25);
        mlx::core::array::~array((mlx::core::array *)v24);
        mlx::core::array::~array((mlx::core::array *)v19);
        v16 = (mlx::core::array *)v20;
        goto LABEL_6;
      }
      mlx::core::abs(a1, a4, a5, v25);
      mlx::core::min(v25, a2, a3, a4, a5, v21);
      mlx::core::astype(v21, v14, a4, a5, a6);
      v17 = v21;
    }
    goto LABEL_5;
  }
  mlx::core::linalg::l2_norm(a1, a2, a3, a4, a5, a6);
}

void sub_242462E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a23);
  mlx::core::array::~array((mlx::core::array *)&a21);
  mlx::core::array::~array((mlx::core::array *)&a11);
  mlx::core::array::~array((mlx::core::array *)&a13);
  _Unwind_Resume(a1);
}

void mlx::core::linalg::matrix_norm(_QWORD *a1@<X0>, int **a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  uint64_t **v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  std::logic_error *exception;
  void *v25;
  std::string v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29[2];
  uint64_t *v30[2];
  uint64_t *v31[2];
  uint64_t *v32[2];

  v27 = *(uint64_t **)(*a1 + 56);
  v14 = mlx::core::linalg::at_least_float((int *)&v27);
  v15 = *a2;
  v16 = **a2;
  v17 = v15[1];
  if (a7 == -1.0)
  {
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v16, a3, a4, a5, (mlx::core::array *)&v27);
    v18 = (v17 > v16) & ~a3;
    if (v17 <= 0)
      v18 = 0;
    mlx::core::min(&v27, v17 - v18, a3, a4, a5, v32);
    mlx::core::astype(v32, v14, a4, a5, a6);
    v19 = v32;
  }
  else if (a7 == 1.0)
  {
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v16, a3, a4, a5, (mlx::core::array *)&v27);
    v20 = (v17 > v16) & ~a3;
    if (v17 <= 0)
      v20 = 0;
    mlx::core::max(&v27, v17 - v20, a3, a4, a5, v31);
    mlx::core::astype(v31, v14, a4, a5, a6);
    v19 = v31;
  }
  else if (a7 == INFINITY)
  {
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v17, a3, a4, a5, (mlx::core::array *)&v27);
    v21 = (v16 > v17) & ~a3;
    if (v16 <= 0)
      v21 = 0;
    mlx::core::max(&v27, v16 - v21, a3, a4, a5, v30);
    mlx::core::astype(v30, v14, a4, a5, a6);
    v19 = v30;
  }
  else
  {
    if (a7 != -INFINITY)
    {
      if (a7 != 2.0 && a7 != -2.0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"[linalg::norm] Invalid ord ", 27);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" for matrix norm.", 17);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v28, &v26);
        std::logic_error::logic_error(exception, &v26);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      v25 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](v25, "[linalg::norm] Singular value norms are not implemented.");
      __cxa_throw(v25, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v17, a3, a4, a5, (mlx::core::array *)&v27);
    v22 = (v16 > v17) & ~a3;
    if (v16 <= 0)
      v22 = 0;
    mlx::core::min(&v27, v16 - v22, a3, a4, a5, v29);
    mlx::core::astype(v29, v14, a4, a5, a6);
    v19 = v29;
  }
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)&v27);
  mlx::core::array::~array((mlx::core::array *)&v26);
}

void sub_2424632F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::linalg::norm(_QWORD *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v15;
  std::vector<int>::pointer v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::logic_error *exception;
  std::string v25;
  uint64_t v26;
  uint64_t v27;
  std::vector<int> v28;

  memset(&v28, 0, sizeof(v28));
  if (*(_BYTE *)(a3 + 24))
  {
    if (&v28 == (std::vector<int> *)a3)
    {
      begin = 0;
      end = 0;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v28, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      begin = v28.__begin_;
      end = v28.__end_;
    }
  }
  else
  {
    std::vector<int>::resize(&v28, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2);
    begin = v28.__begin_;
    end = v28.__end_;
    if (v28.__begin_ == v28.__end_)
    {
      end = v28.__begin_;
    }
    else
    {
      v15 = 0;
      v16 = v28.__begin_;
      do
        *v16++ = v15++;
      while (v16 != end);
    }
  }
  if ((char *)end - (char *)begin != 8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[linalg::norm] Norm '", 21);
    v18 = *((char *)a2 + 23);
    if (v18 >= 0)
      v19 = (uint64_t)a2;
    else
      v19 = (uint64_t)*a2;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)a2 + 23);
    else
      v20 = (uint64_t)a2[1];
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' only supported for matrices,", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" but received ", 14);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" axis/axes.", 11);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27, &v25);
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::linalg::matrix_norm(a1, a2, (uint64_t)&v28, a4, a5, a6, a7);
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
}

void sub_2424635A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;
  uint64_t v17;
  void *v19;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      v19 = *(void **)(v17 - 96);
      if (v19)
      {
        *(_QWORD *)(v17 - 88) = v19;
        operator delete(v19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void mlx::core::linalg::matrix_norm(_QWORD *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v14;
  const void *v15;
  const void **v16;
  void *exception;
  const void *v18;
  _QWORD *v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  std::logic_error *v24;
  std::string v25;
  uint64_t v26;
  uint64_t v27;

  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v15 = a2[1];
  if (v15 == (const void *)3)
  {
    if (v14 >= 0)
      v18 = a2;
    else
      v18 = *a2;
    if (memcmp(v18, "fro", 3uLL))
    {
LABEL_10:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "nuc"))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](exception, "[linalg::norm] Nuclear norm not yet implemented.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[linalg::norm] Invalid ord value '", 34);
      v20 = *((char *)a2 + 23);
      if (v20 >= 0)
        v21 = a2;
      else
        v21 = (void *)*a2;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)a2 + 23);
      else
        v22 = (uint64_t)a2[1];
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"' for matrix norm.", 18);
      v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27, &v25);
      std::logic_error::logic_error(v24, &v25);
      v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v24, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
  }
  else
  {
    if (v15 != (const void *)1)
      goto LABEL_10;
    v16 = v14 >= 0 ? a2 : (const void **)*a2;
    if (*(_BYTE *)v16 != 102)
      goto LABEL_10;
  }
  mlx::core::linalg::l2_norm(a1, a3, a4, a5, a6, a7);
}

void sub_2424637BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::linalg::qr(char ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char **v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  char *v13;
  _QWORD *v14;
  mlx::core *v15;
  int v16;
  _QWORD *v17;
  char **v18;
  char **v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t i;
  void *v33;
  std::string::size_type v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  std::logic_error *exception;
  _QWORD *v46;
  std::logic_error *v47;
  std::logic_error *v48;
  _QWORD v49[2];
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  char *v55;
  std::__shared_weak_count *v56;
  void *__p;
  void *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  std::string v63;
  void **v64;
  char v65;
  _QWORD v66[2];
  std::string *v67;
  _QWORD v68[2];
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[28];

  v71[27] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (*((_DWORD *)*a1 + 14) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v67);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"[linalg::qr] Arrays must type float32. Received array ", 54);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"with type ", 10);
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    v44 = mlx::core::operator<<(v43, &v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v68, &v63);
    std::logic_error::logic_error(exception, &v63);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v9 = *v6;
  v10 = (uint64_t)v6[1];
  v11 = v10 - (_QWORD)*v6;
  if ((unint64_t)v11 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"[linalg::qr] Arrays must have >= 2 dimensions. Received array with ", 67);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" dimensions.", 12);
    v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v68, &v63);
    std::logic_error::logic_error(v47, &v63);
    v47->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v47, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (*(_DWORD *)&v9[v11 - 4] != *(_DWORD *)&v9[v11 - 8])
  {
    v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v48, "[linalg::qr] Support for non-square matrices NYI.");
    __cxa_throw(v48, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v67 = 0;
  v68[0] = 0;
  v68[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, v9, v10, v11 >> 2);
  v12 = (const void **)*a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, *v12, (uint64_t)v12[1], ((_BYTE *)v12[1] - (_BYTE *)*v12) >> 2);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  __p = &v60;
  LOBYTE(v58) = 0;
  v60 = operator new(0x30uLL);
  v61 = v60;
  v62 = v60 + 6;
  v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v62, (uint64_t)&v67, (uint64_t)v71, v60);
  v13 = (*a1)[7];
  v14 = operator new(0x10uLL);
  v58 = v14 + 2;
  v59 = v14 + 2;
  *v14 = v13;
  v14[1] = v13;
  __p = v14;
  v15 = mlx::core::to_stream(a2, a3);
  LODWORD(v13) = v16;
  v17 = operator new(0x30uLL);
  v17[2] = 0;
  *v17 = &unk_25134E568;
  v17[1] = 0;
  v17[4] = v15;
  *((_DWORD *)v17 + 10) = (_DWORD)v13;
  v17[3] = &unk_251352BC8;
  v55 = (char *)(v17 + 3);
  v56 = (std::__shared_weak_count *)v17;
  v53 = 0;
  v54 = 0;
  v18 = *a1;
  v19 = a1[1];
  v49[0] = *a1;
  v49[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 1);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v18 = *a1;
  }
  mlx::core::astype(v49, (uint64_t)v18[7], a2, a3, v66);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v64 = (void **)&v50;
  v65 = 0;
  v22 = operator new(0x10uLL);
  v50 = v22;
  v51 = v22;
  v52 = v22 + 2;
  v23 = v66[1];
  *v22 = v66[0];
  v22[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v51 = v22 + 2;
  mlx::core::array::make_arrays((uint64_t *)&v60, &__p, &v55, &v50, (uint64_t *)&v63);
  v64 = (void **)&v50;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v64);
  mlx::core::array::~array((mlx::core::array *)v66);
  mlx::core::array::~array((mlx::core::array *)v49);
  v26 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v54;
  if (v54)
  {
    v30 = (unint64_t *)&v54->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  __p = &v60;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    v33 = (void *)v70[i - 1];
    if (v33)
    {
      v70[i] = v33;
      operator delete(v33);
    }
  }
  v34 = v63.__r_.__value_.__r.__words[0];
  v35 = *(_QWORD *)(v63.__r_.__value_.__r.__words[0] + 8);
  *a4 = *(_QWORD *)v63.__r_.__value_.__l.__data_;
  a4[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v39 = *(_QWORD *)(v34 + 16);
  v38 = *(_QWORD *)(v34 + 24);
  a4[2] = v39;
  a4[3] = v38;
  if (v38)
  {
    v40 = (unint64_t *)(v38 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v67 = &v63;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
}

void sub_242463CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v35;
  int v36;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void mlx::core::linalg::svd(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  std::string::size_type v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  mlx::core *v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t i;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::logic_error *exception;
  _QWORD *v47;
  std::logic_error *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  char *v54;
  std::__shared_weak_count *v55;
  void *__p;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _BYTE *v63;
  uint64_t v64;
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  std::string v68;
  void **v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  _QWORD v75[3];
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[25];

  v78[24] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (*(_DWORD *)(*a1 + 56) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v73);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"[linalg::svd] Input array must have type float32. Received array ", 65);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"with type ", 10);
    v68.__r_.__value_.__r.__words[0] = *(_QWORD *)(*a1 + 56);
    v45 = mlx::core::operator<<(v44, &v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v74, &v68);
    std::logic_error::logic_error(exception, &v68);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v9 = *(_DWORD **)v6;
  v10 = *(_QWORD *)(v6 + 8);
  v11 = v10 - *(_QWORD *)v6;
  if ((unint64_t)v11 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"[linalg::svd] Input array must have >= 2 dimensions. Received array with ", 73);
    v47 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" dimensions.", 12);
    v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v74, &v68);
    std::logic_error::logic_error(v48, &v68);
    v48->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v48, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v12 = (v11 >> 2) - 2;
  v13 = v9[v12];
  v14 = (v11 >> 2) - 1;
  v15 = v9[v14];
  memset(&v68, 0, sizeof(v68));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v68, v9, v10, v11 >> 2);
  v16 = v68.__r_.__value_.__r.__words[0];
  *(_DWORD *)(v68.__r_.__value_.__r.__words[0] + 4 * v12) = v13;
  *(_DWORD *)(v16 + 4 * v14) = v13;
  v17 = *a1;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v65, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v66 -= 4;
  if (v15 >= v13)
    v18 = v13;
  else
    v18 = v15;
  *((_DWORD *)v65 + v12) = v18;
  v19 = *a1;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v62, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
  v20 = v62;
  *((_DWORD *)v62 + v12) = v15;
  v20[v14] = v15;
  v73 = 0;
  v74[0] = 0;
  v74[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_, (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 2);
  memset(v75, 0, sizeof(v75));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v75, v65, (uint64_t)v66, (v66 - (_BYTE *)v65) >> 2);
  v76 = 0;
  v77[0] = 0;
  v77[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v76, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 2);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  __p = &v59;
  LOBYTE(v57) = 0;
  v59 = operator new(0x48uLL);
  v60 = v59;
  v61 = v59 + 9;
  v60 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v61, (uint64_t)&v73, (uint64_t)v78, v59);
  v21 = *(_QWORD *)(*a1 + 56);
  v22 = operator new(0x18uLL);
  v57 = v22 + 3;
  v58 = v22 + 3;
  *v22 = v21;
  v22[1] = v21;
  v22[2] = v21;
  __p = v22;
  v23 = mlx::core::to_stream(a2, a3);
  v25 = v24;
  v26 = operator new(0x30uLL);
  v26[2] = 0;
  *v26 = &unk_25134E5B8;
  v26[1] = 0;
  v26[4] = v23;
  *((_DWORD *)v26 + 10) = v25;
  v26[3] = &unk_251352C40;
  v54 = (char *)(v26 + 3);
  v55 = (std::__shared_weak_count *)v26;
  v52 = 0;
  v53 = 0;
  v28 = *a1;
  v27 = a1[1];
  v71 = *a1;
  v72 = v27;
  if (v27)
  {
    v29 = (unint64_t *)(v27 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v69 = (void **)&v49;
  v70 = 0;
  v31 = operator new(0x10uLL);
  v49 = v31;
  v50 = v31;
  v51 = v31 + 2;
  v32 = v72;
  *v31 = v28;
  v31[1] = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v50 = v31 + 2;
  mlx::core::array::make_arrays((uint64_t *)&v59, &__p, &v54, &v49, a4);
  v69 = (void **)&v49;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v69);
  mlx::core::array::~array((mlx::core::array *)&v71);
  v35 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v53;
  if (v53)
  {
    v39 = (unint64_t *)&v53->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
  __p = &v59;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    v42 = (void *)v77[i - 1];
    if (v42)
    {
      v77[i] = v42;
      operator delete(v42);
    }
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v68.__r_.__value_.__r.__words[0])
  {
    v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
    operator delete(v68.__r_.__value_.__l.__data_);
  }
}

void sub_242464364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  void *v38;
  int v39;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v39 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v38);
  goto LABEL_6;
}

void mlx::core::linalg::inv(char ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char **v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  char **v17;
  char **v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::logic_error *exception;
  _QWORD *v34;
  std::logic_error *v35;
  std::logic_error *v36;
  __int128 v37;
  _QWORD *v38;
  __int128 v39;
  void *__p[3];
  std::string v41;
  void **v42;
  _BYTE v43[256];
  _QWORD v44[3];

  v44[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (*((_DWORD *)*a1 + 14) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v42);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"[linalg::inv] Arrays must type float32. Received array ", 55);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"with type ", 10);
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    v32 = mlx::core::operator<<(v31, &v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v43, &v41);
    std::logic_error::logic_error(exception, &v41);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v9 = *v6;
  v10 = (uint64_t)v6[1];
  v11 = v10 - (_QWORD)*v6;
  if ((unint64_t)v11 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"[linalg::inv] Arrays must have >= 2 dimensions. Received array with ", 68);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" dimensions.", 12);
    v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v43, &v41);
    std::logic_error::logic_error(v35, &v41);
    v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v35, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (*(_DWORD *)&v9[v11 - 4] != *(_DWORD *)&v9[v11 - 8])
  {
    v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v36, "[linalg::inv] Inverses are only defined for square matrices.");
    __cxa_throw(v36, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v9, v10, v11 >> 2);
  v12 = (uint64_t)(*a1)[7];
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134E608;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251352CB8;
  *(_QWORD *)&v39 = v16 + 3;
  *((_QWORD *)&v39 + 1) = v16;
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = 0uLL;
  v18 = *a1;
  v17 = a1[1];
  v44[0] = v18;
  v44[1] = v17;
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 1);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v37 = 0uLL;
  v38 = 0;
  v42 = (void **)&v37;
  v43[0] = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v37 = v21;
  v38 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 1);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v37 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v12, &v39, &v37);
  v42 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v42);
  mlx::core::array::~array((mlx::core::array *)v44);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  size = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
  if (v41.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24246487C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::linalg::cholesky(char ***a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char **v7;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  mlx::core *v15;
  int v16;
  _QWORD *v17;
  char **v18;
  char **v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::logic_error *exception;
  _QWORD *v35;
  std::logic_error *v36;
  std::logic_error *v37;
  __int128 v38;
  _QWORD *v39;
  __int128 v40;
  void *__p[3];
  std::string v42;
  void **v43;
  _BYTE v44[256];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  if (*((_DWORD *)*a1 + 14) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"[linalg::cholesky] Arrays must type float32. Received array ", 60);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"with type ", 10);
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    v33 = mlx::core::operator<<(v32, &v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v44, &v42);
    std::logic_error::logic_error(exception, &v42);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v10 = *v7;
  v11 = (uint64_t)v7[1];
  v12 = v11 - (_QWORD)*v7;
  if ((unint64_t)v12 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"[linalg::cholesky] Arrays must have >= 2 dimensions. Received array with ", 73);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dimensions.", 12);
    v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v44, &v42);
    std::logic_error::logic_error(v36, &v42);
    v36->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v36, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (*(_DWORD *)&v10[v12 - 4] != *(_DWORD *)&v10[v12 - 8])
  {
    v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v37, "[linalg::cholesky] Cholesky decomposition is only defined for square matrices.");
    __cxa_throw(v37, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v10, v11, v12 >> 2);
  v14 = (uint64_t)(*a1)[7];
  v15 = mlx::core::to_stream(a3, a4);
  LODWORD(a4) = v16;
  v17 = operator new(0x30uLL);
  v17[2] = 0;
  *v17 = &unk_25134E658;
  v17[1] = 0;
  v17[4] = v15;
  *((_DWORD *)v17 + 10) = a4;
  v17[3] = &unk_251352D40;
  *((_BYTE *)v17 + 44) = a2;
  *(_QWORD *)&v40 = v17 + 3;
  *((_QWORD *)&v40 + 1) = v17;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  v19 = *a1;
  v18 = a1[1];
  v45[0] = v19;
  v45[1] = v18;
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 1);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v38 = 0uLL;
  v39 = 0;
  v43 = (void **)&v38;
  v44[0] = 0;
  v22 = operator new(0x10uLL);
  *(_QWORD *)&v38 = v22;
  v39 = v22 + 2;
  *v22 = v19;
  v22[1] = v18;
  if (v18)
  {
    v23 = (unint64_t *)(v18 + 1);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *((_QWORD *)&v38 + 1) = v22 + 2;
  mlx::core::array::array(a5, (__int128 *)__p, v14, &v40, &v38);
  v43 = (void **)&v38;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v43);
  mlx::core::array::~array((mlx::core::array *)v45);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  size = (std::__shared_weak_count *)v42.__r_.__value_.__l.__size_;
  if (v42.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(v42.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242464CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

int ***mlx::core::array::array<int>(int ***a1, int a2, uint64_t a3)
{
  void *__p;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = a3;
  v8 = a2;
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v9, a1);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<int *>(a1, &v8);
  return a1;
}

void sub_242465020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<int *>(int ***a1, int *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  int *v10;
  BOOL *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  float *v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v30[0] = &unk_2513463C8;
  v30[1] = mlx::core::allocator::free;
  v31 = v30;
  mlx::core::array::set_data(a1, v4, (uint64_t)v30);
  v6 = v31;
  if (v31 == v30)
  {
    v7 = 4;
    v6 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v10 = v8[6];
      if (v10)
      {
        v11 = (BOOL *)v8[19];
        v12 = 4 * (_QWORD)v10;
        do
        {
          v13 = *a2++;
          *v11++ = v13 != 0;
          v12 -= 4;
        }
        while (v12);
      }
      break;
    case 1:
      v14 = v8[6];
      if (v14)
      {
        v15 = v8[19];
        v16 = 4 * (_QWORD)v14;
        do
        {
          v17 = *a2++;
          *(_BYTE *)v15 = v17;
          v15 = (int *)((char *)v15 + 1);
          v16 -= 4;
        }
        while (v16);
      }
      break;
    case 2:
    case 4:
      v9 = v8[6];
      if (v9)
        memmove(v8[19], a2, 4 * (_QWORD)v9);
      break;
    case 3:
      v18 = v8[6];
      if (v18)
      {
        v19 = v8[19];
        v20 = 4 * (_QWORD)v18;
        do
        {
          v21 = *a2++;
          *(_BYTE *)v19 = v21;
          v19 = (int *)((char *)v19 + 1);
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 5:
      v22 = v8[6];
      if (v22)
      {
        v23 = v8[19];
        v24 = 4 * (_QWORD)v22;
        do
        {
          v25 = *a2++;
          *(_QWORD *)v23 = v25;
          v23 += 2;
          v24 -= 4;
        }
        while (v24);
      }
      break;
    case 6:
      v26 = v8[6];
      if (v26)
      {
        v27 = (float *)v8[19];
        v28 = 4 * (_QWORD)v26;
        do
        {
          v29 = *a2++;
          result = (float)v29;
          *v27++ = (float)v29;
          v28 -= 4;
        }
        while (v28);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_242465218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void std::__shared_ptr_emplace<mlx::core::QRF>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::QRF>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::QRF>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::SVD>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::SVD>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::SVD>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Inverse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Inverse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Inverse>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Cholesky>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Cholesky>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Cholesky>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *mlx_stream_::tostring(mlx_stream_ *this)
{
  _QWORD *v2;
  std::string *v3;
  void *__p[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  mlx::core::operator<<(&v7, (uint64_t)this + 16);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, __p);
  v2 = (_QWORD *)operator new();
  *v2 = &off_25134DAE8;
  v2[1] = 1;
  v3 = (std::string *)(v2 + 2);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v2[4] = v6;
  }
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2426A8294](&v10);
  return v2;
}

void sub_242465548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A82C4](v16, 0x1093C401FB1DE5ELL);
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t mlx_stream_new(int a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;

  result = operator new();
  LODWORD(v5) = a1;
  *(_QWORD *)((char *)&v5 + 4) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)result = &off_25134E6A8;
  *(_QWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = DWORD2(v5);
  return result;
}

uint64_t mlx_stream_new_on_device(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = operator new();
  v3 = mlx::core::new_stream(*(mlx::core::metal **)(a1 + 16));
  *(_QWORD *)v2 = &off_25134E6A8;
  *(_QWORD *)(v2 + 8) = 1;
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 24) = v4;
  return v2;
}

void sub_242465660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

BOOL mlx_stream_equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

_QWORD *mlx_stream_get_device(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 20);
  *result = &off_25134DA08;
  result[1] = 1;
  result[2] = v3;
  return result;
}

void mlx_synchronize(uint64_t a1)
{
  mlx::core::synchronize(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24));
}

uint64_t mlx_default_stream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = operator new();
  v3 = mlx::core::default_stream(*(mlx::core::metal **)(a1 + 16));
  *(_QWORD *)v2 = &off_25134E6A8;
  *(_QWORD *)(v2 + 8) = 1;
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 24) = v4;
  return v2;
}

void sub_242465754(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_set_default_stream(uint64_t a1)
{
  mlx::core::set_default_stream(*(mlx::core::metal **)(a1 + 16), *(_DWORD *)(a1 + 24));
  return a1;
}

uint64_t mlx_cpu_stream()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v0 = operator new();
  v1 = mlx::core::default_stream(0);
  *(_QWORD *)v0 = &off_25134E6A8;
  *(_QWORD *)(v0 + 8) = 1;
  *(_QWORD *)(v0 + 16) = v1;
  *(_DWORD *)(v0 + 24) = v2;
  return v0;
}

void sub_2424657FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_gpu_stream()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v0 = operator new();
  v1 = mlx::core::default_stream((mlx::core::metal *)1);
  *(_QWORD *)v0 = &off_25134E6A8;
  *(_QWORD *)(v0 + 8) = 1;
  *(_QWORD *)(v0 + 16) = v1;
  *(_DWORD *)(v0 + 24) = v2;
  return v0;
}

void sub_242465878(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void mlx_stream_::~mlx_stream_(mlx_stream_ *this)
{
  JUMPOUT(0x2426A82C4);
}

float mlx::core::erfinv(mlx::core *this, float a2)
{
  float v3;
  float v4;
  float v5;

  v3 = logf((float)(a2 * (float)(0.0 - a2)) + 1.0);
  if (fabsf(v3) <= 6.125)
  {
    v4 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 * 0.0000000054388) + 0.00000014329) * v3) + 0.0000012277)
                                                                                               * v3)
                                                                                       + 0.00000011296)
                                                                               * v3)
                                                                       + -0.000056153)
                                                               * v3)
                                                       + -0.0001477)
                                               * v3)
                                       + 0.0023147)
                               * v3)
                       + 0.011539)
               * v3)
       + -0.23202;
    v5 = 0.88623;
  }
  else
  {
    v4 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 * 3.037e-10) + 0.000000029324)
                                                                                               * v3)
                                                                                       + 0.0000012215)
                                                                               * v3)
                                                                       + 0.000028411)
                                                               * v3)
                                                       + 0.00039355)
                                               * v3)
                                       + 0.003027)
                               * v3)
                       + 0.0048319)
               * v3)
       + -0.26465;
    v5 = 0.84002;
  }
  return (float)(v5 + (float)(v4 * v3)) * a2;
}

void mlx::core::cholesky_impl(mlx::core *this, const mlx::core::array *a2, mlx::core::array *a3, float a4)
{
  int v4;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  unint64_t v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;

  v4 = (int)a3;
  if ((_DWORD)a3)
    v7 = 76;
  else
    v7 = 85;
  v25 = v7;
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) != 0)
    v8 = 1;
  else
    v8 = 2;
  mlx::core::copy(this, a2, v8, a4);
  v9 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v9 == **(_QWORD **)this)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v10 = *(unsigned int *)(v9 - 4);
  v11 = *(_QWORD *)(*(_QWORD *)this + 48);
  v12 = (v10 * v10);
  if (v11 >= v12)
  {
    v13 = 0;
    v14 = v11 / v12;
    v15 = *(char **)(*(_QWORD *)a2 + 152);
    v16 = 4 * (int)v10;
    if (v14 <= 1)
      v14 = 1;
    v23 = v14;
    v24 = v10;
    v17 = 4 * v10;
    while (1)
    {
      v28 = v25;
      v27 = v10;
      v26 = 0;
      spotrf_NEWLAPACK();
      if ((int)v10 >= 1)
        break;
LABEL_21:
      ++v13;
      LODWORD(v10) = v24;
      if (v13 == v23)
        return;
    }
    v18 = 0;
    v19 = v15 + 4;
    v20 = -4;
    while (1)
    {
      if (v4)
      {
        if (v18)
        {
          v21 = v15;
          v22 = v18;
LABEL_19:
          bzero(v21, v22);
        }
      }
      else if (v16 + v20 >= 1)
      {
        v22 = 4 * (((unint64_t)(v16 + v20) >> 2) - (v16 - 4 != v18)) + 4;
        v21 = v19;
        goto LABEL_19;
      }
      v20 -= 4;
      v18 += 4;
      v19 += v16 + 4;
      v15 += v16;
      if (v17 == v18)
        goto LABEL_21;
    }
  }
}

void sub_242465BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void mlx::core::Cholesky::eval(uint64_t a1, mlx::core **a2, mlx::core::array *a3, float a4)
{
  void *exception;

  if (*(_DWORD *)(*(_QWORD *)*a2 + 56) != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[Cholesky::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mlx::core::cholesky_impl(*a2, a3, (mlx::core::array *)*(unsigned __int8 *)(a1 + 20), a4);
}

void sub_242465C80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgReduce::eval(uint64_t a1, const void ****a2, int ***a3)
{
  const void ***v3;
  mlx::core::scheduler *v6;
  _QWORD *v7;
  uint64_t v8;
  const void **v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  char *v17;
  int64_t v18;
  char *v19;
  int *v20;
  char *v21;
  int **v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  ldiv_t v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  const void **v43;
  char *v44;
  int64_t v45;
  int *v46;
  char *v47;
  int **v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  ldiv_t v58;
  int v59;
  int v60;
  int *v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  const void **v69;
  char *v70;
  int64_t v71;
  int *v72;
  char *v73;
  int **v74;
  int *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  ldiv_t v84;
  int v85;
  int v86;
  unsigned int *v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  const void **v95;
  char *v96;
  int64_t v97;
  int *v98;
  char *v99;
  char *v100;
  int **v101;
  int *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  ldiv_t v110;
  int v111;
  int v112;
  char *v113;
  char v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  const void **v122;
  char *v123;
  int64_t v124;
  int *v125;
  char *v126;
  char *v127;
  int **v128;
  int *v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  ldiv_t v137;
  int v138;
  int v139;
  unsigned __int8 *v140;
  unsigned __int8 v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  const void **v149;
  char *v150;
  int64_t v151;
  int *v152;
  char *v153;
  int **v154;
  int *v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  ldiv_t v164;
  int v165;
  int v166;
  uint64_t *v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  const void **v175;
  char *v176;
  int64_t v177;
  int *v178;
  char *v179;
  int **v180;
  int *v181;
  unint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  int *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  ldiv_t v190;
  int v191;
  int v192;
  float *v193;
  float v194;
  int v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  const void **v199;
  char *v200;
  int64_t v201;
  int *v202;
  char *v203;
  int **v204;
  int *v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  ldiv_t v214;
  int v215;
  int v216;
  int *v217;
  int v218;
  int v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  const void **v223;
  char *v224;
  int64_t v225;
  int *v226;
  char *v227;
  int **v228;
  int *v229;
  unint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  int *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  ldiv_t v238;
  int v239;
  int v240;
  unsigned int *v241;
  unsigned int v242;
  int v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  const void **v247;
  char *v248;
  int64_t v249;
  int *v250;
  char *v251;
  char *v252;
  int **v253;
  int *v254;
  unint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  ldiv_t v262;
  int v263;
  int v264;
  char *v265;
  char v266;
  int v267;
  int v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  const void **v272;
  char *v273;
  int64_t v274;
  int *v275;
  char *v276;
  int **v277;
  int *v278;
  unint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  int *v282;
  uint64_t v283;
  uint64_t v284;
  int quot;
  ldiv_t v286;
  int v287;
  int v288;
  _BYTE *v289;
  char v290;
  int v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  const void **v295;
  char *v296;
  int64_t v297;
  int *v298;
  char *v299;
  char *v300;
  int **v301;
  int *v302;
  unint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  int *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  ldiv_t v310;
  int v311;
  int v312;
  unsigned __int8 *v313;
  unsigned __int8 v314;
  unsigned int v315;
  int v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  const void **v320;
  char *v321;
  int64_t v322;
  int *v323;
  char *v324;
  int **v325;
  int *v326;
  unint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  int *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  ldiv_t v335;
  int v336;
  int v337;
  uint64_t *v338;
  uint64_t v339;
  int v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  const void **v344;
  char *v345;
  int64_t v346;
  int *v347;
  char *v348;
  int **v349;
  int *v350;
  unint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  int *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  ldiv_t v359;
  int v360;
  int v361;
  float *v362;
  float v363;
  _BYTE *v364;
  char *v365;
  char *v366;
  _BYTE *v367;
  _BYTE *v368;
  char *v369;
  char *v370;
  char *v371;
  char *v372;
  _BYTE *v373;
  _BYTE *v374;
  _BYTE *v375;
  char *v376;
  char *v377;
  int *v378;
  int *v379;
  uint64_t v380;
  void *__p;
  char *v382;
  uint64_t v383;
  _QWORD v384[3];
  _QWORD *v385;
  uint64_t v386;

  v386 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ArgReduce::eval();
  v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
  v384[0] = &unk_2513463C8;
  v384[1] = mlx::core::allocator::free;
  v385 = v384;
  mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)v384);
  v7 = v385;
  if (v385 == v384)
  {
    v8 = 4;
    v7 = v384;
  }
  else
  {
    if (!v385)
      goto LABEL_7;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_7:
  v9 = *v3;
  switch(*((_DWORD *)*v3 + 14))
  {
    case 0:
      v10 = *(_DWORD *)(a1 + 20);
      v11 = *(int *)(a1 + 24);
      if (v10 == 1)
      {
        v268 = *((_DWORD *)*v9 + v11);
        v269 = v9[3];
        v270 = (uint64_t)v9[4];
        v271 = v269[v11];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v269, v270, (v270 - (uint64_t)v269) >> 3);
        v272 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v272, (uint64_t)v272[1], ((_BYTE *)v272[1] - (_BYTE *)*v272) >> 2);
        v273 = (char *)__p + 8 * v11;
        v274 = v382 - (v273 + 8);
        if (v382 != v273 + 8)
          memmove((char *)__p + 8 * v11, v273 + 8, v382 - (v273 + 8));
        v382 = &v273[v274];
        v19 = (char *)v378;
        v275 = &v378[v11];
        v276 = (char *)((char *)v379 - (char *)(v275 + 1));
        if (v379 != v275 + 1)
        {
          memmove(v275, v275 + 1, (char *)v379 - (char *)(v275 + 1));
          v19 = (char *)v378;
        }
        v277 = *a3;
        v278 = (*a3)[6];
        if (v278)
        {
          v279 = 0;
          v280 = ((unint64_t)(&v276[(_QWORD)v275] - v19) >> 2) - 1;
          v281 = __p;
          v374 = (*v3)[19];
          v282 = v277[19];
          do
          {
            v283 = 0;
            if ((v280 & 0x80000000) == 0)
            {
              v284 = v280;
              quot = v279;
              do
              {
                v286 = ldiv(quot, *(int *)&v19[4 * v284]);
                quot = v286.quot;
                v283 += v281[v284--] * v286.rem;
              }
              while (v284 != -1);
            }
            if (v268)
            {
              v287 = 0;
              v288 = 0;
              v289 = &v374[v283];
              v290 = v374[v283];
              do
              {
                if (v290 == 0 && *v289 != 0)
                {
                  v288 = v287;
                  v290 = 1;
                }
                ++v287;
                v289 += v271;
              }
              while (v268 != v287);
            }
            else
            {
              v288 = 0;
            }
            v282[v279] = v288;
            v279 = (v279 + 1);
          }
          while ((unint64_t)v278 > v279);
        }
        goto LABEL_295;
      }
      if (!v10)
      {
        v12 = *((_DWORD *)*v9 + v11);
        v13 = v9[3];
        v14 = (uint64_t)v9[4];
        v15 = v13[v11];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v13, v14, (v14 - (uint64_t)v13) >> 3);
        v16 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v16, (uint64_t)v16[1], ((_BYTE *)v16[1] - (_BYTE *)*v16) >> 2);
        v17 = (char *)__p + 8 * v11;
        v18 = v382 - (v17 + 8);
        if (v382 != v17 + 8)
          memmove((char *)__p + 8 * v11, v17 + 8, v382 - (v17 + 8));
        v382 = &v17[v18];
        v19 = (char *)v378;
        v20 = &v378[v11];
        v21 = (char *)((char *)v379 - (char *)(v20 + 1));
        if (v379 != v20 + 1)
        {
          memmove(v20, v20 + 1, (char *)v379 - (char *)(v20 + 1));
          v19 = (char *)v378;
        }
        v22 = *a3;
        v23 = (*a3)[6];
        if (v23)
        {
          v24 = 0;
          v25 = ((unint64_t)(&v21[(_QWORD)v20] - v19) >> 2) - 1;
          v26 = __p;
          v364 = (*v3)[19];
          v27 = v22[19];
          do
          {
            v28 = 0;
            if ((v25 & 0x80000000) == 0)
            {
              v29 = v25;
              v30 = v24;
              do
              {
                v31 = ldiv(v30, *(int *)&v19[4 * v29]);
                v30 = v31.quot;
                v28 += v26[v29--] * v31.rem;
              }
              while (v29 != -1);
            }
            if (v12)
            {
              v32 = 0;
              v33 = 0;
              v34 = &v364[v28];
              v35 = v364[v28];
              do
              {
                v36 = *v34;
                if (v35 > v36)
                  v33 = v32;
                if (v35 >= v36)
                  v35 = *v34;
                ++v32;
                v34 += v15;
              }
              while (v12 != v32);
            }
            else
            {
              v33 = 0;
            }
            v27[v24] = v33;
            v24 = (v24 + 1);
          }
          while ((unint64_t)v23 > v24);
        }
        goto LABEL_295;
      }
      break;
    case 1:
      v116 = *(_DWORD *)(a1 + 20);
      v117 = *(int *)(a1 + 24);
      if (v116 == 1)
      {
        v291 = *((_DWORD *)*v9 + v117);
        v292 = v9[3];
        v293 = (uint64_t)v9[4];
        v294 = v292[v117];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v292, v293, (v293 - (uint64_t)v292) >> 3);
        v295 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v295, (uint64_t)v295[1], ((_BYTE *)v295[1] - (_BYTE *)*v295) >> 2);
        v296 = (char *)__p + 8 * v117;
        v297 = v382 - (v296 + 8);
        if (v382 != v296 + 8)
          memmove((char *)__p + 8 * v117, v296 + 8, v382 - (v296 + 8));
        v382 = &v296[v297];
        v19 = (char *)v378;
        v298 = &v378[v117];
        v299 = (char *)((char *)v379 - (char *)(v298 + 1));
        if (v379 != v298 + 1)
        {
          memmove(v298, v298 + 1, (char *)v379 - (char *)(v298 + 1));
          v19 = (char *)v378;
        }
        v300 = &v299[(_QWORD)v298];
        v379 = (int *)&v299[(_QWORD)v298];
        v301 = *a3;
        v302 = (*a3)[6];
        if (v302)
        {
          v303 = 0;
          v304 = ((unint64_t)(v300 - v19) >> 2) - 1;
          v305 = __p;
          v375 = (*v3)[19];
          v306 = v301[19];
          do
          {
            v307 = 0;
            if ((v304 & 0x80000000) == 0)
            {
              v308 = v304;
              v309 = v303;
              do
              {
                v310 = ldiv(v309, *(int *)&v19[4 * v308]);
                v309 = v310.quot;
                v307 += v305[v308--] * v310.rem;
              }
              while (v308 != -1);
            }
            if (v291)
            {
              v311 = 0;
              v312 = 0;
              v313 = &v375[v307];
              v314 = v375[v307];
              do
              {
                v315 = *v313;
                if (v314 < v315)
                  v312 = v311;
                if (v314 <= v315)
                  v314 = *v313;
                ++v311;
                v313 += v294;
              }
              while (v291 != v311);
            }
            else
            {
              v312 = 0;
            }
            v306[v303] = v312;
            v303 = (v303 + 1);
          }
          while ((unint64_t)v302 > v303);
        }
        goto LABEL_295;
      }
      if (!v116)
      {
        v118 = *((_DWORD *)*v9 + v117);
        v119 = v9[3];
        v120 = (uint64_t)v9[4];
        v121 = v119[v117];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v119, v120, (v120 - (uint64_t)v119) >> 3);
        v122 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v122, (uint64_t)v122[1], ((_BYTE *)v122[1] - (_BYTE *)*v122) >> 2);
        v123 = (char *)__p + 8 * v117;
        v124 = v382 - (v123 + 8);
        if (v382 != v123 + 8)
          memmove((char *)__p + 8 * v117, v123 + 8, v382 - (v123 + 8));
        v382 = &v123[v124];
        v19 = (char *)v378;
        v125 = &v378[v117];
        v126 = (char *)((char *)v379 - (char *)(v125 + 1));
        if (v379 != v125 + 1)
        {
          memmove(v125, v125 + 1, (char *)v379 - (char *)(v125 + 1));
          v19 = (char *)v378;
        }
        v127 = &v126[(_QWORD)v125];
        v379 = (int *)&v126[(_QWORD)v125];
        v128 = *a3;
        v129 = (*a3)[6];
        if (v129)
        {
          v130 = 0;
          v131 = ((unint64_t)(v127 - v19) >> 2) - 1;
          v132 = __p;
          v368 = (*v3)[19];
          v133 = v128[19];
          do
          {
            v134 = 0;
            if ((v131 & 0x80000000) == 0)
            {
              v135 = v131;
              v136 = v130;
              do
              {
                v137 = ldiv(v136, *(int *)&v19[4 * v135]);
                v136 = v137.quot;
                v134 += v132[v135--] * v137.rem;
              }
              while (v135 != -1);
            }
            if (v118)
            {
              v138 = 0;
              v139 = 0;
              v140 = &v368[v134];
              v141 = v368[v134];
              do
              {
                v142 = *v140;
                if (v141 > v142)
                  v139 = v138;
                if (v141 >= v142)
                  v141 = *v140;
                ++v138;
                v140 += v121;
              }
              while (v118 != v138);
            }
            else
            {
              v139 = 0;
            }
            v133[v130] = v139;
            v130 = (v130 + 1);
          }
          while ((unint64_t)v129 > v130);
        }
        goto LABEL_295;
      }
      break;
    case 2:
      v63 = *(_DWORD *)(a1 + 20);
      v64 = *(int *)(a1 + 24);
      if (v63 == 1)
      {
        v219 = *((_DWORD *)*v9 + v64);
        v220 = v9[3];
        v221 = (uint64_t)v9[4];
        v222 = v220[v64];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v220, v221, (v221 - (uint64_t)v220) >> 3);
        v223 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v223, (uint64_t)v223[1], ((_BYTE *)v223[1] - (_BYTE *)*v223) >> 2);
        v224 = (char *)__p + 8 * v64;
        v225 = v382 - (v224 + 8);
        if (v382 != v224 + 8)
          memmove((char *)__p + 8 * v64, v224 + 8, v382 - (v224 + 8));
        v382 = &v224[v225];
        v19 = (char *)v378;
        v226 = &v378[v64];
        v227 = (char *)((char *)v379 - (char *)(v226 + 1));
        if (v379 != v226 + 1)
        {
          memmove(v226, v226 + 1, (char *)v379 - (char *)(v226 + 1));
          v19 = (char *)v378;
        }
        v228 = *a3;
        v229 = (*a3)[6];
        if (v229)
        {
          v230 = 0;
          v231 = ((unint64_t)(&v227[(_QWORD)v226] - v19) >> 2) - 1;
          v232 = __p;
          v372 = (char *)(*v3)[19];
          v233 = v228[19];
          v234 = 4 * v222;
          do
          {
            v235 = 0;
            if ((v231 & 0x80000000) == 0)
            {
              v236 = v231;
              v237 = v230;
              do
              {
                v238 = ldiv(v237, *(int *)&v19[4 * v236]);
                v237 = v238.quot;
                v235 += v232[v236--] * v238.rem;
              }
              while (v236 != -1);
            }
            if (v219)
            {
              v239 = 0;
              v240 = 0;
              v241 = (unsigned int *)&v372[4 * v235];
              v242 = *v241;
              do
              {
                if (v242 < *v241)
                  v240 = v239;
                if (v242 <= *v241)
                  v242 = *v241;
                ++v239;
                v241 = (unsigned int *)((char *)v241 + v234);
              }
              while (v219 != v239);
            }
            else
            {
              v240 = 0;
            }
            v233[v230] = v240;
            v230 = (v230 + 1);
          }
          while ((unint64_t)v229 > v230);
        }
        goto LABEL_295;
      }
      if (!v63)
      {
        v65 = *((_DWORD *)*v9 + v64);
        v66 = v9[3];
        v67 = (uint64_t)v9[4];
        v68 = v66[v64];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v66, v67, (v67 - (uint64_t)v66) >> 3);
        v69 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v69, (uint64_t)v69[1], ((_BYTE *)v69[1] - (_BYTE *)*v69) >> 2);
        v70 = (char *)__p + 8 * v64;
        v71 = v382 - (v70 + 8);
        if (v382 != v70 + 8)
          memmove((char *)__p + 8 * v64, v70 + 8, v382 - (v70 + 8));
        v382 = &v70[v71];
        v19 = (char *)v378;
        v72 = &v378[v64];
        v73 = (char *)((char *)v379 - (char *)(v72 + 1));
        if (v379 != v72 + 1)
        {
          memmove(v72, v72 + 1, (char *)v379 - (char *)(v72 + 1));
          v19 = (char *)v378;
        }
        v74 = *a3;
        v75 = (*a3)[6];
        if (v75)
        {
          v76 = 0;
          v77 = ((unint64_t)(&v73[(_QWORD)v72] - v19) >> 2) - 1;
          v78 = __p;
          v366 = (char *)(*v3)[19];
          v79 = v74[19];
          v80 = 4 * v68;
          do
          {
            v81 = 0;
            if ((v77 & 0x80000000) == 0)
            {
              v82 = v77;
              v83 = v76;
              do
              {
                v84 = ldiv(v83, *(int *)&v19[4 * v82]);
                v83 = v84.quot;
                v81 += v78[v82--] * v84.rem;
              }
              while (v82 != -1);
            }
            if (v65)
            {
              v85 = 0;
              v86 = 0;
              v87 = (unsigned int *)&v366[4 * v81];
              v88 = *v87;
              do
              {
                if (v88 > *v87)
                  v86 = v85;
                if (v88 >= *v87)
                  v88 = *v87;
                ++v85;
                v87 = (unsigned int *)((char *)v87 + v80);
              }
              while (v65 != v85);
            }
            else
            {
              v86 = 0;
            }
            v79[v76] = v86;
            v76 = (v76 + 1);
          }
          while ((unint64_t)v75 > v76);
        }
        goto LABEL_295;
      }
      break;
    case 3:
      v89 = *(_DWORD *)(a1 + 20);
      v90 = *(int *)(a1 + 24);
      if (v89 == 1)
      {
        v243 = *((_DWORD *)*v9 + v90);
        v244 = v9[3];
        v245 = (uint64_t)v9[4];
        v246 = v244[v90];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v244, v245, (v245 - (uint64_t)v244) >> 3);
        v247 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v247, (uint64_t)v247[1], ((_BYTE *)v247[1] - (_BYTE *)*v247) >> 2);
        v248 = (char *)__p + 8 * v90;
        v249 = v382 - (v248 + 8);
        if (v382 != v248 + 8)
          memmove((char *)__p + 8 * v90, v248 + 8, v382 - (v248 + 8));
        v382 = &v248[v249];
        v19 = (char *)v378;
        v250 = &v378[v90];
        v251 = (char *)((char *)v379 - (char *)(v250 + 1));
        if (v379 != v250 + 1)
        {
          memmove(v250, v250 + 1, (char *)v379 - (char *)(v250 + 1));
          v19 = (char *)v378;
        }
        v252 = &v251[(_QWORD)v250];
        v379 = (int *)&v251[(_QWORD)v250];
        v253 = *a3;
        v254 = (*a3)[6];
        if (v254)
        {
          v255 = 0;
          v256 = ((unint64_t)(v252 - v19) >> 2) - 1;
          v257 = __p;
          v373 = (*v3)[19];
          v258 = v253[19];
          do
          {
            v259 = 0;
            if ((v256 & 0x80000000) == 0)
            {
              v260 = v256;
              v261 = v255;
              do
              {
                v262 = ldiv(v261, *(int *)&v19[4 * v260]);
                v261 = v262.quot;
                v259 += v257[v260--] * v262.rem;
              }
              while (v260 != -1);
            }
            if (v243)
            {
              v263 = 0;
              v264 = 0;
              v265 = &v373[v259];
              v266 = v373[v259];
              do
              {
                v267 = *v265;
                if (v266 < v267)
                  v264 = v263;
                if (v266 <= v267)
                  v266 = *v265;
                ++v263;
                v265 += v246;
              }
              while (v243 != v263);
            }
            else
            {
              v264 = 0;
            }
            v258[v255] = v264;
            v255 = (v255 + 1);
          }
          while ((unint64_t)v254 > v255);
        }
        goto LABEL_295;
      }
      if (!v89)
      {
        v91 = *((_DWORD *)*v9 + v90);
        v92 = v9[3];
        v93 = (uint64_t)v9[4];
        v94 = v92[v90];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v92, v93, (v93 - (uint64_t)v92) >> 3);
        v95 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v95, (uint64_t)v95[1], ((_BYTE *)v95[1] - (_BYTE *)*v95) >> 2);
        v96 = (char *)__p + 8 * v90;
        v97 = v382 - (v96 + 8);
        if (v382 != v96 + 8)
          memmove((char *)__p + 8 * v90, v96 + 8, v382 - (v96 + 8));
        v382 = &v96[v97];
        v19 = (char *)v378;
        v98 = &v378[v90];
        v99 = (char *)((char *)v379 - (char *)(v98 + 1));
        if (v379 != v98 + 1)
        {
          memmove(v98, v98 + 1, (char *)v379 - (char *)(v98 + 1));
          v19 = (char *)v378;
        }
        v100 = &v99[(_QWORD)v98];
        v379 = (int *)&v99[(_QWORD)v98];
        v101 = *a3;
        v102 = (*a3)[6];
        if (v102)
        {
          v103 = 0;
          v104 = ((unint64_t)(v100 - v19) >> 2) - 1;
          v105 = __p;
          v367 = (*v3)[19];
          v106 = v101[19];
          do
          {
            v107 = 0;
            if ((v104 & 0x80000000) == 0)
            {
              v108 = v104;
              v109 = v103;
              do
              {
                v110 = ldiv(v109, *(int *)&v19[4 * v108]);
                v109 = v110.quot;
                v107 += v105[v108--] * v110.rem;
              }
              while (v108 != -1);
            }
            if (v91)
            {
              v111 = 0;
              v112 = 0;
              v113 = &v367[v107];
              v114 = v367[v107];
              do
              {
                v115 = *v113;
                if (v114 > v115)
                  v112 = v111;
                if (v114 >= v115)
                  v114 = *v113;
                ++v111;
                v113 += v94;
              }
              while (v91 != v111);
            }
            else
            {
              v112 = 0;
            }
            v106[v103] = v112;
            v103 = (v103 + 1);
          }
          while ((unint64_t)v102 > v103);
        }
        goto LABEL_295;
      }
      break;
    case 4:
      v37 = *(_DWORD *)(a1 + 20);
      v38 = *(int *)(a1 + 24);
      if (v37 == 1)
      {
        v195 = *((_DWORD *)*v9 + v38);
        v196 = v9[3];
        v197 = (uint64_t)v9[4];
        v198 = v196[v38];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v196, v197, (v197 - (uint64_t)v196) >> 3);
        v199 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v199, (uint64_t)v199[1], ((_BYTE *)v199[1] - (_BYTE *)*v199) >> 2);
        v200 = (char *)__p + 8 * v38;
        v201 = v382 - (v200 + 8);
        if (v382 != v200 + 8)
          memmove((char *)__p + 8 * v38, v200 + 8, v382 - (v200 + 8));
        v382 = &v200[v201];
        v19 = (char *)v378;
        v202 = &v378[v38];
        v203 = (char *)((char *)v379 - (char *)(v202 + 1));
        if (v379 != v202 + 1)
        {
          memmove(v202, v202 + 1, (char *)v379 - (char *)(v202 + 1));
          v19 = (char *)v378;
        }
        v204 = *a3;
        v205 = (*a3)[6];
        if (v205)
        {
          v206 = 0;
          v207 = ((unint64_t)(&v203[(_QWORD)v202] - v19) >> 2) - 1;
          v208 = __p;
          v371 = (char *)(*v3)[19];
          v209 = v204[19];
          v210 = 4 * v198;
          do
          {
            v211 = 0;
            if ((v207 & 0x80000000) == 0)
            {
              v212 = v207;
              v213 = v206;
              do
              {
                v214 = ldiv(v213, *(int *)&v19[4 * v212]);
                v213 = v214.quot;
                v211 += v208[v212--] * v214.rem;
              }
              while (v212 != -1);
            }
            if (v195)
            {
              v215 = 0;
              v216 = 0;
              v217 = (int *)&v371[4 * v211];
              v218 = *v217;
              do
              {
                if (v218 < *v217)
                  v216 = v215;
                if (v218 <= *v217)
                  v218 = *v217;
                ++v215;
                v217 = (int *)((char *)v217 + v210);
              }
              while (v195 != v215);
            }
            else
            {
              v216 = 0;
            }
            v209[v206] = v216;
            v206 = (v206 + 1);
          }
          while ((unint64_t)v205 > v206);
        }
        goto LABEL_295;
      }
      if (!v37)
      {
        v39 = *((_DWORD *)*v9 + v38);
        v40 = v9[3];
        v41 = (uint64_t)v9[4];
        v42 = v40[v38];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v40, v41, (v41 - (uint64_t)v40) >> 3);
        v43 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v43, (uint64_t)v43[1], ((_BYTE *)v43[1] - (_BYTE *)*v43) >> 2);
        v44 = (char *)__p + 8 * v38;
        v45 = v382 - (v44 + 8);
        if (v382 != v44 + 8)
          memmove((char *)__p + 8 * v38, v44 + 8, v382 - (v44 + 8));
        v382 = &v44[v45];
        v19 = (char *)v378;
        v46 = &v378[v38];
        v47 = (char *)((char *)v379 - (char *)(v46 + 1));
        if (v379 != v46 + 1)
        {
          memmove(v46, v46 + 1, (char *)v379 - (char *)(v46 + 1));
          v19 = (char *)v378;
        }
        v48 = *a3;
        v49 = (*a3)[6];
        if (v49)
        {
          v50 = 0;
          v51 = ((unint64_t)(&v47[(_QWORD)v46] - v19) >> 2) - 1;
          v52 = __p;
          v365 = (char *)(*v3)[19];
          v53 = v48[19];
          v54 = 4 * v42;
          do
          {
            v55 = 0;
            if ((v51 & 0x80000000) == 0)
            {
              v56 = v51;
              v57 = v50;
              do
              {
                v58 = ldiv(v57, *(int *)&v19[4 * v56]);
                v57 = v58.quot;
                v55 += v52[v56--] * v58.rem;
              }
              while (v56 != -1);
            }
            if (v39)
            {
              v59 = 0;
              v60 = 0;
              v61 = (int *)&v365[4 * v55];
              v62 = *v61;
              do
              {
                if (v62 > *v61)
                  v60 = v59;
                if (v62 >= *v61)
                  v62 = *v61;
                ++v59;
                v61 = (int *)((char *)v61 + v54);
              }
              while (v39 != v59);
            }
            else
            {
              v60 = 0;
            }
            v53[v50] = v60;
            v50 = (v50 + 1);
          }
          while ((unint64_t)v49 > v50);
        }
        goto LABEL_295;
      }
      break;
    case 5:
      v143 = *(_DWORD *)(a1 + 20);
      v144 = *(int *)(a1 + 24);
      if (v143 == 1)
      {
        v316 = *((_DWORD *)*v9 + v144);
        v317 = v9[3];
        v318 = (uint64_t)v9[4];
        v319 = v317[v144];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v317, v318, (v318 - (uint64_t)v317) >> 3);
        v320 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v320, (uint64_t)v320[1], ((_BYTE *)v320[1] - (_BYTE *)*v320) >> 2);
        v321 = (char *)__p + 8 * v144;
        v322 = v382 - (v321 + 8);
        if (v382 != v321 + 8)
          memmove((char *)__p + 8 * v144, v321 + 8, v382 - (v321 + 8));
        v382 = &v321[v322];
        v19 = (char *)v378;
        v323 = &v378[v144];
        v324 = (char *)((char *)v379 - (char *)(v323 + 1));
        if (v379 != v323 + 1)
        {
          memmove(v323, v323 + 1, (char *)v379 - (char *)(v323 + 1));
          v19 = (char *)v378;
        }
        v325 = *a3;
        v326 = (*a3)[6];
        if (v326)
        {
          v327 = 0;
          v328 = ((unint64_t)(&v324[(_QWORD)v323] - v19) >> 2) - 1;
          v329 = __p;
          v376 = (char *)(*v3)[19];
          v330 = v325[19];
          v331 = 8 * v319;
          do
          {
            v332 = 0;
            if ((v328 & 0x80000000) == 0)
            {
              v333 = v328;
              v334 = v327;
              do
              {
                v335 = ldiv(v334, *(int *)&v19[4 * v333]);
                v334 = v335.quot;
                v332 += v329[v333--] * v335.rem;
              }
              while (v333 != -1);
            }
            if (v316)
            {
              v336 = 0;
              v337 = 0;
              v338 = (uint64_t *)&v376[8 * v332];
              v339 = *v338;
              do
              {
                if (v339 < *v338)
                  v337 = v336;
                if (v339 <= *v338)
                  v339 = *v338;
                ++v336;
                v338 = (uint64_t *)((char *)v338 + v331);
              }
              while (v316 != v336);
            }
            else
            {
              v337 = 0;
            }
            v330[v327] = v337;
            v327 = (v327 + 1);
          }
          while ((unint64_t)v326 > v327);
        }
        goto LABEL_295;
      }
      if (!v143)
      {
        v145 = *((_DWORD *)*v9 + v144);
        v146 = v9[3];
        v147 = (uint64_t)v9[4];
        v148 = v146[v144];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v146, v147, (v147 - (uint64_t)v146) >> 3);
        v149 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v149, (uint64_t)v149[1], ((_BYTE *)v149[1] - (_BYTE *)*v149) >> 2);
        v150 = (char *)__p + 8 * v144;
        v151 = v382 - (v150 + 8);
        if (v382 != v150 + 8)
          memmove((char *)__p + 8 * v144, v150 + 8, v382 - (v150 + 8));
        v382 = &v150[v151];
        v19 = (char *)v378;
        v152 = &v378[v144];
        v153 = (char *)((char *)v379 - (char *)(v152 + 1));
        if (v379 != v152 + 1)
        {
          memmove(v152, v152 + 1, (char *)v379 - (char *)(v152 + 1));
          v19 = (char *)v378;
        }
        v154 = *a3;
        v155 = (*a3)[6];
        if (v155)
        {
          v156 = 0;
          v157 = ((unint64_t)(&v153[(_QWORD)v152] - v19) >> 2) - 1;
          v158 = __p;
          v369 = (char *)(*v3)[19];
          v159 = v154[19];
          v160 = 8 * v148;
          do
          {
            v161 = 0;
            if ((v157 & 0x80000000) == 0)
            {
              v162 = v157;
              v163 = v156;
              do
              {
                v164 = ldiv(v163, *(int *)&v19[4 * v162]);
                v163 = v164.quot;
                v161 += v158[v162--] * v164.rem;
              }
              while (v162 != -1);
            }
            if (v145)
            {
              v165 = 0;
              v166 = 0;
              v167 = (uint64_t *)&v369[8 * v161];
              v168 = *v167;
              do
              {
                if (v168 > *v167)
                  v166 = v165;
                if (v168 >= *v167)
                  v168 = *v167;
                ++v165;
                v167 = (uint64_t *)((char *)v167 + v160);
              }
              while (v145 != v165);
            }
            else
            {
              v166 = 0;
            }
            v159[v156] = v166;
            v156 = (v156 + 1);
          }
          while ((unint64_t)v155 > v156);
        }
        goto LABEL_295;
      }
      break;
    case 6:
      v169 = *(_DWORD *)(a1 + 20);
      v170 = *(int *)(a1 + 24);
      if (v169 == 1)
      {
        v340 = *((_DWORD *)*v9 + v170);
        v341 = v9[3];
        v342 = (uint64_t)v9[4];
        v343 = v341[v170];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v341, v342, (v342 - (uint64_t)v341) >> 3);
        v344 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v344, (uint64_t)v344[1], ((_BYTE *)v344[1] - (_BYTE *)*v344) >> 2);
        v345 = (char *)__p + 8 * v170;
        v346 = v382 - (v345 + 8);
        if (v382 != v345 + 8)
          memmove((char *)__p + 8 * v170, v345 + 8, v382 - (v345 + 8));
        v382 = &v345[v346];
        v19 = (char *)v378;
        v347 = &v378[v170];
        v348 = (char *)((char *)v379 - (char *)(v347 + 1));
        if (v379 != v347 + 1)
        {
          memmove(v347, v347 + 1, (char *)v379 - (char *)(v347 + 1));
          v19 = (char *)v378;
        }
        v349 = *a3;
        v350 = (*a3)[6];
        if (v350)
        {
          v351 = 0;
          v352 = ((unint64_t)(&v348[(_QWORD)v347] - v19) >> 2) - 1;
          v353 = __p;
          v377 = (char *)(*v3)[19];
          v354 = v349[19];
          v355 = 4 * v343;
          do
          {
            v356 = 0;
            if ((v352 & 0x80000000) == 0)
            {
              v357 = v352;
              v358 = v351;
              do
              {
                v359 = ldiv(v358, *(int *)&v19[4 * v357]);
                v358 = v359.quot;
                v356 += v353[v357--] * v359.rem;
              }
              while (v357 != -1);
            }
            if (v340)
            {
              v360 = 0;
              v361 = 0;
              v362 = (float *)&v377[4 * v356];
              v363 = *v362;
              do
              {
                if (v363 < *v362)
                {
                  v361 = v360;
                  v363 = *v362;
                }
                ++v360;
                v362 = (float *)((char *)v362 + v355);
              }
              while (v340 != v360);
            }
            else
            {
              v361 = 0;
            }
            v354[v351] = v361;
            v351 = (v351 + 1);
          }
          while ((unint64_t)v350 > v351);
        }
      }
      else
      {
        if (v169)
          return;
        v171 = *((_DWORD *)*v9 + v170);
        v172 = v9[3];
        v173 = (uint64_t)v9[4];
        v174 = v172[v170];
        __p = 0;
        v382 = 0;
        v383 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v172, v173, (v173 - (uint64_t)v172) >> 3);
        v175 = *v3;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v378, *v175, (uint64_t)v175[1], ((_BYTE *)v175[1] - (_BYTE *)*v175) >> 2);
        v176 = (char *)__p + 8 * v170;
        v177 = v382 - (v176 + 8);
        if (v382 != v176 + 8)
          memmove((char *)__p + 8 * v170, v176 + 8, v382 - (v176 + 8));
        v382 = &v176[v177];
        v19 = (char *)v378;
        v178 = &v378[v170];
        v179 = (char *)((char *)v379 - (char *)(v178 + 1));
        if (v379 != v178 + 1)
        {
          memmove(v178, v178 + 1, (char *)v379 - (char *)(v178 + 1));
          v19 = (char *)v378;
        }
        v180 = *a3;
        v181 = (*a3)[6];
        if (v181)
        {
          v182 = 0;
          v183 = ((unint64_t)(&v179[(_QWORD)v178] - v19) >> 2) - 1;
          v184 = __p;
          v370 = (char *)(*v3)[19];
          v185 = v180[19];
          v186 = 4 * v174;
          do
          {
            v187 = 0;
            if ((v183 & 0x80000000) == 0)
            {
              v188 = v183;
              v189 = v182;
              do
              {
                v190 = ldiv(v189, *(int *)&v19[4 * v188]);
                v189 = v190.quot;
                v187 += v184[v188--] * v190.rem;
              }
              while (v188 != -1);
            }
            if (v171)
            {
              v191 = 0;
              v192 = 0;
              v193 = (float *)&v370[4 * v187];
              v194 = *v193;
              do
              {
                if (v194 > *v193)
                {
                  v192 = v191;
                  v194 = *v193;
                }
                ++v191;
                v193 = (float *)((char *)v193 + v186);
              }
              while (v171 != v191);
            }
            else
            {
              v192 = 0;
            }
            v185[v182] = v192;
            v182 = (v182 + 1);
          }
          while ((unint64_t)v181 > v182);
        }
      }
LABEL_295:
      if (v19)
      {
        v379 = (int *)v19;
        operator delete(v19);
      }
      if (__p)
      {
        v382 = (char *)__p;
        operator delete(__p);
      }
      break;
    default:
      return;
  }
}

void sub_2424670DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::distributed::Group::rank(mlx::core::distributed::Group *this)
{
  return 0;
}

uint64_t mlx::core::distributed::Group::size(mlx::core::distributed::Group *this)
{
  return 1;
}

void mlx::core::distributed::Group::split(mlx::core::distributed::Group *this)
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Cannot split the distributed group further");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424671B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::distributed::is_available(mlx::core::distributed *this)
{
  return 0;
}

void mlx::core::distributed::init(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t mlx::core::distributed::detail::communication_stream(mlx::core::distributed::detail *this)
{
  unsigned __int8 v1;
  int v3;

  if ((v1 & 1) == 0
  {
    mlx::core::distributed::detail::communication_stream(void)::comm_stream = mlx::core::new_stream(0);
    mlx::core::distributed::detail::communication_stream(void)::comm_stream = v3;
  }
  return mlx::core::distributed::detail::communication_stream(void)::comm_stream;
}

void sub_242467240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void mlx::core::Abs::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Abs has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246729C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Add::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Add has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424672EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::AddMM::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "AddMM has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246733C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Arange::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Arange has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246738C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCos::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArcCos has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424673DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCosh::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArcCosh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246742C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSin::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArcSin has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246747C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSinh::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArcSinh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424674CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArcTan has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246751C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan2::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArcTan2 has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246756C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTanh::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArcTanh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424675BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgPartition::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArgPartition has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246760C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgReduce::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArgReduce has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246765C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ArgSort has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424676AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::AsType::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "AsType has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424676FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::AsStrided::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "AsStrided has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246774C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BitwiseBinary::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "BitwiseBinary has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246779C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BlockMaskedMM::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "BlockMaskedMM has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424677EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Broadcast has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246783C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Ceil::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Ceil has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246788C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Concatenate::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Concatenate has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424678DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Copy::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Copy has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246792C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Cos::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Cos has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246797C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Cosh::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Cosh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424679CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::CustomVJP::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "CustomVJP has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467A1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Depends::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Depends has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467A6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Divide has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467ABC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::DivMod::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "DivMod has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467B0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::NumberOfElements::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "NumberOfElements has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467B5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Remainder has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467BAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Equal::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Equal has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467BFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Erf::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Erf has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467C4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "ErfInv has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467C9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Exp has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467CEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Expm1 has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467D3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Floor::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Floor has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467D8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Full::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Full has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Gather has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467E2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::GatherMM::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "GatherMM has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467E7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Greater::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Greater has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467ECC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "GreaterEqual has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467F1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Less::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Less has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467F6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "LessEqual has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242467FBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Log::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Log has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246800C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Log1p::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Log1p has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246805C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalNot::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "LogicalNot has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424680AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "LogicalAnd has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424680FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "LogicalOr has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246814C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "LogAddExp has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246819C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Matmul::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Matmul has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424681EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Maximum has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246823C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Minimum has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246828C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Multiply has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424682DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Negative::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Negative has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246832C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "NotEqual has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246837C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Pad::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Pad has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424683CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Partition::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Partition has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246841C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Power::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Power has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246846C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::QRF::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "QRF has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424684BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::RandomBits::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "RandomBits has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246850C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Reduce::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Reduce has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246855C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Reshape has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424685AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Round::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Round has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424685FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Scan::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Scan has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246864C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Scatter::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Scatter has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246869C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Select::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Select has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424686EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Sigmoid has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246873C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sign::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Sign has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246878C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sin::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Sin has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424687DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sinh::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Sinh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246882C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Slice::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Slice has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246887C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::SliceUpdate::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "SliceUpdate has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424688CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sort::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Sort has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246891C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Split::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Split has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_24246896C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Square::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Square has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424689BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Sqrt has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468A0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::StopGradient::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "StopGradient has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468A5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Subtract has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468AAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::SVD::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "SVD has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468AFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Tan::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Tan has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468B4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Tanh::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Tanh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468B9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Transpose::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Transpose has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468BEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Inverse::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Inverse has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468C3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Cholesky::eval_gpu()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Cholesky has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242468C8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlx_array_::tostring(mlx_array_ *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  std::string *v6;
  void *__p[2];
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  v2 = *((_QWORD *)this + 3);
  v10[0] = *((_QWORD *)this + 2);
  v10[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  mlx::core::operator<<(&v11, (mlx::core::array *)v10);
  mlx::core::array::~array((mlx::core::array *)v10);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, __p);
  v5 = (_QWORD *)operator new();
  *v5 = &off_25134DAE8;
  v5[1] = 1;
  v6 = (std::string *)(v5 + 2);
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v5[4] = v9;
  }
  v11 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2426A8294](&v14);
  return v5;
}

void sub_242468DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  MEMORY[0x2426A82C4](v18, 0x1093C401FB1DE5ELL);
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *mlx_vector_array_::tostring(mlx_vector_array_ *this)
{
  _QWORD *v1;
  _QWORD *v2;
  std::string *v3;
  void *__p[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"vector of arrays (size=", 23);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, __p);
  v2 = (_QWORD *)operator new();
  *v2 = &off_25134DAE8;
  v2[1] = 1;
  v3 = (std::string *)(v2 + 2);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v2[4] = v6;
  }
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2426A8294](&v10);
  return v2;
}

void sub_242468F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A82C4](v16, 0x1093C401FB1DE5ELL);
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *mlx_vector_vector_array_::tostring(mlx_vector_vector_array_ *this)
{
  _QWORD *v1;
  _QWORD *v2;
  std::string *v3;
  void *__p[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"vector of vector of arrays (size=", 33);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, __p);
  v2 = (_QWORD *)operator new();
  *v2 = &off_25134DAE8;
  v2[1] = 1;
  v3 = (std::string *)(v2 + 2);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v2[4] = v6;
  }
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2426A8294](&v10);
  return v2;
}

void sub_24246913C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A82C4](v16, 0x1093C401FB1DE5ELL);
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *mlx_vector_array_new()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_25134E728;
  result[1] = 1;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t mlx_vector_array_from_arrays(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  char **v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (a2)
  {
    v2 = a2;
    do
    {
      std::vector<mlx::core::array>::push_back[abi:ne180100](&v6, (_QWORD *)(*(_QWORD *)a1 + 16));
      a1 += 8;
      --v2;
    }
    while (v2);
  }
  v4 = operator new();
  *(_QWORD *)v4 = &off_25134E728;
  *(_QWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)(v4 + 16), v6, v7, (v7 - v6) >> 4);
  v9 = &v6;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  return v4;
}

void sub_242469274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  MEMORY[0x2426A82C4](v12, 0x10A1C405897D53FLL);
  a12 = (void **)&a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *mlx_vector_array_from_array(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  char v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v16[0] = v4;
  v16[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = (void **)&v11;
  v15 = 0;
  v7 = operator new(0x10uLL);
  *v7 = v4;
  v7[1] = v3;
  if (v3)
  {
    v8 = (unint64_t *)(v3 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *v2 = &off_25134E728;
  v2[1] = 1;
  v2[2] = v7;
  v2[3] = v7 + 2;
  v2[4] = v7 + 2;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = (void **)&v11;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v14);
  mlx::core::array::~array((mlx::core::array *)v16);
  return v2;
}

void sub_2424693BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, void **);
  v8 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  MEMORY[0x2426A82C4](v4, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_vector_array_add(uint64_t a1, uint64_t a2)
{
  return std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)(a1 + 16), (_QWORD *)(a2 + 16));
}

uint64_t mlx_vector_array_add_arrays(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char **v5;
  uint64_t v6;

  if (a3)
  {
    v3 = a3;
    v5 = (char **)(result + 16);
    do
    {
      v6 = *a2++;
      result = std::vector<mlx::core::array>::push_back[abi:ne180100](v5, (_QWORD *)(v6 + 16));
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *mlx_vector_array_get(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[2];

  v4 = (_QWORD *)operator new();
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (a2 >= (*(_QWORD *)(a1 + 24) - v6) >> 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v7 = (uint64_t *)(v6 + 16 * a2);
  v8 = *v7;
  v9 = v7[1];
  v14[0] = *v7;
  v14[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *v4 = &off_25134E6E8;
    v4[1] = 1;
    v4[2] = v8;
    v4[3] = v9;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    *v4 = &off_25134E6E8;
    v4[1] = 1;
    v4[2] = v8;
    v4[3] = 0;
  }
  mlx::core::array::~array((mlx::core::array *)v14);
  return v5;
}

void sub_242469518(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_vector_array_size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
}

_QWORD *mlx_vector_vector_array_new()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_25134E768;
  result[1] = 1;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t mlx_vector_vector_array_add(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD **v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1 + 2;
  v4 = (_QWORD **)(a2 + 16);
  v5 = a1[3];
  if (v5 >= a1[4])
  {
    result = std::vector<std::vector<mlx::core::array>>::__push_back_slow_path<std::vector<mlx::core::array> const&>(v3, v4);
  }
  else
  {
    std::vector<std::vector<mlx::core::array>>::__construct_one_at_end[abi:ne180100]<std::vector<mlx::core::array> const&>((uint64_t)v3, v4);
    result = v5 + 24;
  }
  a1[3] = result;
  return result;
}

uint64_t mlx_vector_vector_array_get(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = operator new();
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 24) - v6) >> 3) <= a2)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)v4 = &off_25134E728;
  *(_QWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)(v4 + 16), *(_QWORD **)(v6 + 24 * a2), *(_QWORD **)(v6 + 24 * a2 + 8), (uint64_t)(*(_QWORD *)(v6 + 24 * a2 + 8) - *(_QWORD *)(v6 + 24 * a2)) >> 4);
  return v5;
}

void sub_242469678(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

_QWORD *mlx_vector_vector_array_get2d(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 24) - v7) >> 3) <= a2)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v8 = (_QWORD *)(v7 + 24 * a2);
  if (a3 >= (uint64_t)(v8[1] - *v8) >> 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v9 = (uint64_t *)(*v8 + 16 * a3);
  v10 = *v9;
  v11 = v9[1];
  v16[0] = *v9;
  v16[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *v6 = &off_25134E6E8;
    v6[1] = 1;
    v6[2] = v10;
    v6[3] = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    *v6 = &off_25134E6E8;
    v6[1] = 1;
    v6[2] = v10;
    v6[3] = 0;
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  return v6;
}

void sub_2424697A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

unint64_t mlx_vector_vector_array_size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
}

uint64_t mlx_array_from_BOOL(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  int **v4;
  unint64_t *v5;
  unint64_t v6;
  int **v8[2];

  v2 = operator new();
  v3 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
  mlx::core::array::array<BOOL>(v8, a1, v3);
  *(_QWORD *)v2 = &off_25134E6E8;
  *(_QWORD *)(v2 + 8) = 1;
  v4 = v8[1];
  *(int ***)(v2 + 16) = v8[0];
  *(_QWORD *)(v2 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  mlx::core::array::~array((mlx::core::array *)v8);
  return v2;
}

void sub_242469878(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_from_int(int a1)
{
  uint64_t v2;
  uint64_t v3;
  int **v4;
  unint64_t *v5;
  unint64_t v6;
  int **v8[2];

  v2 = operator new();
  v3 = mlx::core::TypeToDtype<int>::operator mlx::core::Dtype();
  mlx::core::array::array<int>(v8, a1, v3);
  *(_QWORD *)v2 = &off_25134E6E8;
  *(_QWORD *)(v2 + 8) = 1;
  v4 = v8[1];
  *(int ***)(v2 + 16) = v8[0];
  *(_QWORD *)(v2 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  mlx::core::array::~array((mlx::core::array *)v8);
  return v2;
}

void sub_242469930(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_from_float(float a1)
{
  uint64_t v2;
  uint64_t v3;
  int **v4;
  unint64_t *v5;
  unint64_t v6;
  int **v8[2];

  v2 = operator new();
  v3 = mlx::core::TypeToDtype<float>::operator mlx::core::Dtype();
  mlx::core::array::array<float>(v8, v3, a1);
  *(_QWORD *)v2 = &off_25134E6E8;
  *(_QWORD *)(v2 + 8) = 1;
  v4 = v8[1];
  *(int ***)(v2 + 16) = v8[0];
  *(_QWORD *)(v2 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  mlx::core::array::~array((mlx::core::array *)v8);
  return v2;
}

void sub_2424699F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_from_data(unsigned __int8 *a1, char *a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int **v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  void **v12;
  int **v13;
  unint64_t *v14;
  unint64_t v15;
  int **v16;
  unint64_t *v17;
  unint64_t v18;
  int **v19;
  unint64_t *v20;
  unint64_t v21;
  int **v22;
  unint64_t *v23;
  unint64_t v24;
  int **v25;
  unint64_t *v26;
  unint64_t v27;
  int **v28;
  unint64_t *v29;
  unint64_t v30;
  void *__p[3];
  int **v33[2];
  _QWORD v34[3];
  int **v35[2];
  _QWORD v36[3];
  int **v37[2];
  _QWORD v38[3];
  int **v39[2];
  _QWORD v40[3];
  int **v41[2];
  _QWORD v42[3];
  int **v43[2];
  _QWORD v44[3];
  int **v45[2];
  void *v46;
  _BYTE *v47;
  uint64_t v48;

  v46 = 0;
  v47 = 0;
  v48 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v46, a2, (uint64_t)&a2[4 * a3], a3);
  v6 = mlx_cpp_dtypes[a4];
  switch((int)v6)
  {
    case 0:
      v7 = operator new();
      memset(v44, 0, sizeof(v44));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v44, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
      mlx::core::array::array<BOOL *>(v45, a1, (uint64_t)v44, v6);
      *(_QWORD *)v7 = &off_25134E6E8;
      *(_QWORD *)(v7 + 8) = 1;
      v8 = v45[1];
      *(int ***)(v7 + 16) = v45[0];
      *(_QWORD *)(v7 + 24) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 1);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      mlx::core::array::~array((mlx::core::array *)v45);
      v11 = (void *)v44[0];
      if (v44[0])
      {
        v12 = (void **)v44;
        goto LABEL_38;
      }
      break;
    case 1:
      v7 = operator new();
      memset(v42, 0, sizeof(v42));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v42, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
      mlx::core::array::array<unsigned char *>(v43, a1, (uint64_t)v42, v6);
      *(_QWORD *)v7 = &off_25134E6E8;
      *(_QWORD *)(v7 + 8) = 1;
      v13 = v43[1];
      *(int ***)(v7 + 16) = v43[0];
      *(_QWORD *)(v7 + 24) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 1);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      mlx::core::array::~array((mlx::core::array *)v43);
      v11 = (void *)v42[0];
      if (v42[0])
      {
        v12 = (void **)v42;
        goto LABEL_38;
      }
      break;
    case 2:
      v7 = operator new();
      memset(v40, 0, sizeof(v40));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v40, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
      mlx::core::array::array<unsigned int *>(v41, (unsigned int *)a1, (uint64_t)v40, v6);
      *(_QWORD *)v7 = &off_25134E6E8;
      *(_QWORD *)(v7 + 8) = 1;
      v16 = v41[1];
      *(int ***)(v7 + 16) = v41[0];
      *(_QWORD *)(v7 + 24) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 1);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      mlx::core::array::~array((mlx::core::array *)v41);
      v11 = (void *)v40[0];
      if (v40[0])
      {
        v12 = (void **)v40;
        goto LABEL_38;
      }
      break;
    case 3:
      v7 = operator new();
      memset(v38, 0, sizeof(v38));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v38, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
      mlx::core::array::array<signed char *>(v39, a1, (uint64_t)v38, v6);
      *(_QWORD *)v7 = &off_25134E6E8;
      *(_QWORD *)(v7 + 8) = 1;
      v19 = v39[1];
      *(int ***)(v7 + 16) = v39[0];
      *(_QWORD *)(v7 + 24) = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 1);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      mlx::core::array::~array((mlx::core::array *)v39);
      v11 = (void *)v38[0];
      if (v38[0])
      {
        v12 = (void **)v38;
        goto LABEL_38;
      }
      break;
    case 4:
      v7 = operator new();
      memset(v36, 0, sizeof(v36));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v36, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
      mlx::core::array::array<int *>(v37, (int *)a1, (uint64_t)v36, v6);
      *(_QWORD *)v7 = &off_25134E6E8;
      *(_QWORD *)(v7 + 8) = 1;
      v22 = v37[1];
      *(int ***)(v7 + 16) = v37[0];
      *(_QWORD *)(v7 + 24) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 1);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      mlx::core::array::~array((mlx::core::array *)v37);
      v11 = (void *)v36[0];
      if (v36[0])
      {
        v12 = (void **)v36;
        goto LABEL_38;
      }
      break;
    case 5:
      v7 = operator new();
      memset(v34, 0, sizeof(v34));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v34, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
      mlx::core::array::array<long long *>(v35, (uint64_t *)a1, (uint64_t)v34, v6);
      *(_QWORD *)v7 = &off_25134E6E8;
      *(_QWORD *)(v7 + 8) = 1;
      v25 = v35[1];
      *(int ***)(v7 + 16) = v35[0];
      *(_QWORD *)(v7 + 24) = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 1);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      mlx::core::array::~array((mlx::core::array *)v35);
      v11 = (void *)v34[0];
      if (v34[0])
      {
        v12 = (void **)v34;
        goto LABEL_38;
      }
      break;
    case 6:
      v7 = operator new();
      memset(__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
      mlx::core::array::array<float *>(v33, (float *)a1, (uint64_t)__p, v6);
      *(_QWORD *)v7 = &off_25134E6E8;
      *(_QWORD *)(v7 + 8) = 1;
      v28 = v33[1];
      *(int ***)(v7 + 16) = v33[0];
      *(_QWORD *)(v7 + 24) = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 1);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      mlx::core::array::~array((mlx::core::array *)v33);
      v11 = __p[0];
      if (__p[0])
      {
        v12 = __p;
LABEL_38:
        v12[1] = v11;
        operator delete(v11);
      }
      break;
    default:
      v7 = 0;
      break;
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  return v7;
}

void sub_242469EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  void *v33;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v30, 0x10A1C407049A3A3);
  v33 = *(void **)(v31 - 56);
  if (v33)
  {
    *(_QWORD *)(v31 - 48) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx_array_itemsize(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 60);
}

uint64_t mlx_array_size(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
}

uint64_t mlx_array_nbytes(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 60) * *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
}

uint64_t mlx_array_ndim(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 2;
}

uint64_t mlx_array_shape(uint64_t a1)
{
  return **(_QWORD **)(a1 + 16);
}

uint64_t mlx_array_strides(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
}

uint64_t mlx_array_dim(uint64_t a1, int a2)
{
  return mlx::core::array::shape((mlx::core::array *)(a1 + 16), a2);
}

uint64_t mlx_array_get_dtype(uint64_t a1)
{
  return *(unsigned int *)((char *)&mlx_c_dtypes + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) << 32) >> 30));
}

void mlx_array_eval(uint64_t a1)
{
  mlx::core::array::eval((mlx::core::array *)(a1 + 16));
}

uint64_t mlx_array_item_BOOL(uint64_t a1)
{
  return mlx::core::array::item<BOOL>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<BOOL>(mlx::core::array *a1)
{
  std::logic_error *exception;

  if (*(_QWORD *)(*(_QWORD *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::array::eval(a1);
  return **(unsigned __int8 **)(*(_QWORD *)a1 + 152);
}

void sub_24246A098(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_item_uint8(uint64_t a1)
{
  return mlx::core::array::item<BOOL>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx_array_item_uint32(uint64_t a1)
{
  return mlx::core::array::item<unsigned int>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<unsigned int>(mlx::core::array *a1)
{
  std::logic_error *exception;

  if (*(_QWORD *)(*(_QWORD *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::array::eval(a1);
  return **(unsigned int **)(*(_QWORD *)a1 + 152);
}

void sub_24246A128(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_item_int8(uint64_t a1)
{
  return mlx::core::array::item<signed char>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<signed char>(mlx::core::array *a1)
{
  std::logic_error *exception;

  if (*(_QWORD *)(*(_QWORD *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::array::eval(a1);
  return **(char **)(*(_QWORD *)a1 + 152);
}

void sub_24246A1B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_item_int32(uint64_t a1)
{
  return mlx::core::array::item<unsigned int>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx_array_item_int64(uint64_t a1)
{
  return mlx::core::array::item<long long>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<long long>(mlx::core::array *a1)
{
  std::logic_error *exception;

  if (*(_QWORD *)(*(_QWORD *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::array::eval(a1);
  return **(_QWORD **)(*(_QWORD *)a1 + 152);
}

void sub_24246A240(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float mlx_array_item_float32(uint64_t a1)
{
  return mlx::core::array::item<float>((mlx::core::array *)(a1 + 16));
}

float mlx::core::array::item<float>(mlx::core::array *a1)
{
  std::logic_error *exception;

  if (*(_QWORD *)(*(_QWORD *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::array::eval(a1);
  return **(float **)(*(_QWORD *)a1 + 152);
}

void sub_24246A2C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_data_BOOL(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_uint8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_uint32(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_int8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_int32(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_int64(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_float32(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
}

void mlx_array_::~mlx_array_(mlx_array_ *this)
{
  *(_QWORD *)this = &off_25134E6E8;
  mlx::core::array::~array((mlx_array_ *)((char *)this + 16));
}

{
  *(_QWORD *)this = &off_25134E6E8;
  mlx::core::array::~array((mlx_array_ *)((char *)this + 16));
  JUMPOUT(0x2426A82C4);
}

void mlx_vector_array_::~mlx_vector_array_(mlx_vector_array_ *this)
{
  void **v1;

  *(_QWORD *)this = &off_25134E728;
  v1 = (void **)((char *)this + 16);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &off_25134E728;
  v2 = (void **)((char *)this + 16);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2426A82C4](this, 0x10A1C405897D53FLL);
}

void mlx_vector_vector_array_::~mlx_vector_vector_array_(mlx_vector_vector_array_ *this)
{
  void **v1;

  *(_QWORD *)this = &off_25134E768;
  v1 = (void **)((char *)this + 16);
  std::vector<std::vector<mlx::core::array>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &off_25134E768;
  v2 = (void **)((char *)this + 16);
  std::vector<std::vector<mlx::core::array>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2426A82C4](this, 0x10A1C405897D53FLL);
}

char *std::vector<std::vector<mlx::core::array>>::__construct_one_at_end[abi:ne180100]<std::vector<mlx::core::array> const&>(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_24246A520(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<mlx::core::array>>::__push_back_slow_path<std::vector<mlx::core::array> const&>(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  std::vector<std::vector<mlx::core::array>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<mlx::core::array>>::~__split_buffer(v14);
  return v12;
}

void sub_24246A628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<mlx::core::array>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<mlx::core::array>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<mlx::core::array>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<mlx::core::array>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<mlx::core::array>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

int ***mlx::core::array::array<BOOL>(int ***a1, unsigned __int8 a2, uint64_t a3)
{
  void *__p;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;

  v9 = a3;
  v8 = a2;
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v9, a1);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<BOOL *>(a1, &v8);
  return a1;
}

void sub_24246A8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::array::init<BOOL *>(int ***a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int **v7;
  size_t v8;
  int *v9;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  int *v15;
  int *v16;
  unsigned int v17;
  int *v18;
  float *v19;
  float v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v22[0] = &unk_2513463C8;
  v22[1] = mlx::core::allocator::free;
  v23 = v22;
  mlx::core::array::set_data(a1, v4, (uint64_t)v22);
  result = v23;
  if (v23 == v22)
  {
    v6 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_6:
  v7 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
    case 1:
    case 3:
      v8 = (size_t)v7[6];
      if (v8)
        result = memmove(v7[19], a2, v8);
      break;
    case 2:
      v9 = v7[6];
      if (v9)
      {
        v10 = v7[19];
        do
        {
          v11 = *a2++;
          *v10++ = v11;
          v9 = (int *)((char *)v9 - 1);
        }
        while (v9);
      }
      break;
    case 4:
      v12 = v7[6];
      if (v12)
      {
        v13 = v7[19];
        do
        {
          v14 = *a2++;
          *v13++ = v14;
          v12 = (int *)((char *)v12 - 1);
        }
        while (v12);
      }
      break;
    case 5:
      v15 = v7[6];
      if (v15)
      {
        v16 = v7[19];
        do
        {
          v17 = *a2++;
          *(_QWORD *)v16 = v17;
          v16 += 2;
          v15 = (int *)((char *)v15 - 1);
        }
        while (v15);
      }
      break;
    case 6:
      v18 = v7[6];
      if (v18)
      {
        v19 = (float *)v7[19];
        do
        {
          if (*a2++)
            v21 = 1.0;
          else
            v21 = 0.0;
          *v19++ = v21;
          v18 = (int *)((char *)v18 - 1);
        }
        while (v18);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_24246AA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<BOOL *>(int ***a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<BOOL *>(a1, a2);
  return a1;
}

void sub_24246AB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array<unsigned char *>(int ***a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<unsigned char *>(a1, a2);
  return a1;
}

void sub_24246AB6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<unsigned char *>(int ***a1, unsigned __int8 *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  size_t v9;
  int *v10;
  BOOL *v11;
  int v12;
  int *v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int *v19;
  int *v20;
  unsigned int v21;
  int *v22;
  float *v23;
  unsigned int v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v25[0] = &unk_2513463C8;
  v25[1] = mlx::core::allocator::free;
  v26 = v25;
  mlx::core::array::set_data(a1, v4, (uint64_t)v25);
  v6 = v26;
  if (v26 == v25)
  {
    v7 = 4;
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v10 = v8[6];
      if (v10)
      {
        v11 = (BOOL *)v8[19];
        do
        {
          v12 = *a2++;
          *v11++ = v12 != 0;
          v10 = (int *)((char *)v10 - 1);
        }
        while (v10);
      }
      break;
    case 1:
    case 3:
      v9 = (size_t)v8[6];
      if (v9)
        memmove(v8[19], a2, v9);
      break;
    case 2:
      v13 = v8[6];
      if (v13)
      {
        v14 = v8[19];
        do
        {
          v15 = *a2++;
          *v14++ = v15;
          v13 = (int *)((char *)v13 - 1);
        }
        while (v13);
      }
      break;
    case 4:
      v16 = v8[6];
      if (v16)
      {
        v17 = v8[19];
        do
        {
          v18 = *a2++;
          *v17++ = v18;
          v16 = (int *)((char *)v16 - 1);
        }
        while (v16);
      }
      break;
    case 5:
      v19 = v8[6];
      if (v19)
      {
        v20 = v8[19];
        do
        {
          v21 = *a2++;
          *(_QWORD *)v20 = v21;
          v20 += 2;
          v19 = (int *)((char *)v19 - 1);
        }
        while (v19);
      }
      break;
    case 6:
      v22 = v8[6];
      if (v22)
      {
        v23 = (float *)v8[19];
        do
        {
          v24 = *a2++;
          result = (float)v24;
          *v23++ = (float)v24;
          v22 = (int *)((char *)v22 - 1);
        }
        while (v22);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_24246AD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<unsigned int *>(int ***a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<unsigned int *>(a1, a2);
  return a1;
}

void sub_24246ADC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array<signed char *>(int ***a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<signed char *>(a1, a2);
  return a1;
}

void sub_24246AE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<signed char *>(int ***a1, unsigned __int8 *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  size_t v9;
  int *v10;
  BOOL *v11;
  int v12;
  int *v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int *v22;
  float *v23;
  int v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v25[0] = &unk_2513463C8;
  v25[1] = mlx::core::allocator::free;
  v26 = v25;
  mlx::core::array::set_data(a1, v4, (uint64_t)v25);
  v6 = v26;
  if (v26 == v25)
  {
    v7 = 4;
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v10 = v8[6];
      if (v10)
      {
        v11 = (BOOL *)v8[19];
        do
        {
          v12 = *a2++;
          *v11++ = v12 != 0;
          v10 = (int *)((char *)v10 - 1);
        }
        while (v10);
      }
      break;
    case 1:
    case 3:
      v9 = (size_t)v8[6];
      if (v9)
        memmove(v8[19], a2, v9);
      break;
    case 2:
      v13 = v8[6];
      if (v13)
      {
        v14 = v8[19];
        do
        {
          v15 = (char)*a2++;
          *v14++ = v15;
          v13 = (int *)((char *)v13 - 1);
        }
        while (v13);
      }
      break;
    case 4:
      v16 = v8[6];
      if (v16)
      {
        v17 = v8[19];
        do
        {
          v18 = (char)*a2++;
          *v17++ = v18;
          v16 = (int *)((char *)v16 - 1);
        }
        while (v16);
      }
      break;
    case 5:
      v19 = v8[6];
      if (v19)
      {
        v20 = v8[19];
        do
        {
          v21 = (char)*a2++;
          *(_QWORD *)v20 = v21;
          v20 += 2;
          v19 = (int *)((char *)v19 - 1);
        }
        while (v19);
      }
      break;
    case 6:
      v22 = v8[6];
      if (v22)
      {
        v23 = (float *)v8[19];
        do
        {
          v24 = (char)*a2++;
          result = (float)v24;
          *v23++ = (float)v24;
          v22 = (int *)((char *)v22 - 1);
        }
        while (v22);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_24246AFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<int *>(int ***a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<int *>(a1, a2);
  return a1;
}

void sub_24246B07C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array<long long *>(int ***a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<long long *>(a1, a2);
  return a1;
}

void sub_24246B0E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<long long *>(int ***a1, uint64_t *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  BOOL *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v34[0] = &unk_2513463C8;
  v34[1] = mlx::core::allocator::free;
  v35 = v34;
  mlx::core::array::set_data(a1, v4, (uint64_t)v34);
  v6 = v35;
  if (v35 == v34)
  {
    v7 = 4;
    v6 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v9 = v8[6];
      if (v9)
      {
        v10 = (BOOL *)v8[19];
        v11 = 8 * (_QWORD)v9;
        do
        {
          v12 = *a2++;
          *v10++ = v12 != 0;
          v11 -= 8;
        }
        while (v11);
      }
      break;
    case 1:
      v25 = v8[6];
      if (v25)
      {
        v26 = v8[19];
        v27 = 8 * (_QWORD)v25;
        do
        {
          v28 = *a2++;
          *(_BYTE *)v26 = v28;
          v26 = (int *)((char *)v26 + 1);
          v27 -= 8;
        }
        while (v27);
      }
      break;
    case 2:
      v13 = v8[6];
      if (v13)
      {
        v14 = v8[19];
        v15 = 8 * (_QWORD)v13;
        do
        {
          v16 = *a2++;
          *v14++ = v16;
          v15 -= 8;
        }
        while (v15);
      }
      break;
    case 3:
      v17 = v8[6];
      if (v17)
      {
        v18 = v8[19];
        v19 = 8 * (_QWORD)v17;
        do
        {
          v20 = *a2++;
          *(_BYTE *)v18 = v20;
          v18 = (int *)((char *)v18 + 1);
          v19 -= 8;
        }
        while (v19);
      }
      break;
    case 4:
      v21 = v8[6];
      if (v21)
      {
        v22 = v8[19];
        v23 = 8 * (_QWORD)v21;
        do
        {
          v24 = *a2++;
          *v22++ = v24;
          v23 -= 8;
        }
        while (v23);
      }
      break;
    case 5:
      v29 = v8[6];
      if (v29)
        memmove(v8[19], a2, 8 * (_QWORD)v29);
      break;
    case 6:
      v30 = v8[6];
      if (v30)
      {
        v31 = (float *)v8[19];
        v32 = 8 * (_QWORD)v30;
        do
        {
          v33 = *a2++;
          result = (float)v33;
          *v31++ = (float)v33;
          v32 -= 8;
        }
        while (v32);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_24246B2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<float *>(int ***a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<float *>(a1, a2);
  return a1;
}

void sub_24246B374(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::array::array(_QWORD *a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v7;

  v7 = a3;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>(a2, &v7, a4, a5, a1);
  return a1;
}

{
  uint64_t v7;

  v7 = a3;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>(a2, &v7, a4, a5, a1);
  return a1;
}

void mlx::core::array::make_arrays(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v6 + v12;
      v16 = (uint64_t *)(*a2 + v11);
      if ((unint64_t)v13 >= a5[2])
      {
        v13 = (_QWORD *)std::vector<mlx::core::array>::__emplace_back_slow_path<std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&>(a5, v15, v16, a3, a4);
      }
      else
      {
        std::construct_at[abi:ne180100]<mlx::core::array,std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&,mlx::core::array*>(v13, v15, v16, a3, a4);
        v13 += 2;
        a5[1] = (uint64_t)v13;
      }
      a5[1] = (uint64_t)v13;
      ++v14;
      v6 = *a1;
      v12 += 24;
      v11 += 8;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    v17 = (_QWORD *)*a5;
    if (v13 != (_QWORD *)*a5)
    {
      v18 = 0;
      v19 = 0;
      v20 = ((uint64_t)v13 - *a5) >> 4;
      do
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v30, v17, v13, v20);
        v21 = v31;
        v22 = v30 + 16 * v19;
        v23 = v22 + 16;
        if (v22 + 16 != v31)
        {
          v24 = v30 + 16 * v19;
          v22 = v30 + v18;
          do
          {
            std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v24, (__int128 *)(v24 + 16));
            v22 += 16;
            v25 = v24 + 32;
            v24 += 16;
          }
          while (v25 != v21);
          v23 = v31;
        }
        while (v23 != v22)
          mlx::core::array::~array((mlx::core::array *)(v23 - 16));
        v26 = *a5;
        *(_QWORD *)&v28 = v30;
        *((_QWORD *)&v28 + 1) = v22;
        v29 = v32;
        v31 = 0;
        v32 = 0;
        v30 = 0;
        v27 = *(_QWORD *)(v26 + 16 * v19);
        std::vector<mlx::core::array>::__vdeallocate((void **)(v27 + 200));
        *(_OWORD *)(v27 + 200) = v28;
        *(_QWORD *)(v27 + 216) = v29;
        v29 = 0;
        v28 = 0uLL;
        *(_DWORD *)(*(_QWORD *)(v26 + 16 * v19) + 224) = (unsigned __int16)v19;
        v33 = (void **)&v28;
        std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
        v33 = (void **)&v30;
        std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
        ++v19;
        v17 = (_QWORD *)*a5;
        v13 = (_QWORD *)a5[1];
        v20 = ((uint64_t)v13 - *a5) >> 4;
        v18 += 16;
      }
      while (v19 < v20);
    }
  }
}

void sub_24246B600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array(int ***a1, float *a2, int a3)
{
  _DWORD *v6;
  void *__p;
  void *v9;
  _DWORD *v10;

  v6 = operator new(4uLL);
  __p = v6;
  *v6 = a3;
  v9 = v6 + 1;
  v10 = v6 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype const&,void>((uint64_t)&__p, &mlx::core::float32, a1);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<float const*>(a1, a2);
  return a1;
}

void sub_24246B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::array::init<float const*>(int ***a1, float *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int **v7;
  int *v8;
  BOOL *v9;
  uint64_t v10;
  float v11;
  int *v12;
  int *v13;
  uint64_t v14;
  float v15;
  int *v16;
  int *v17;
  uint64_t v18;
  float v19;
  int *v20;
  int *v21;
  uint64_t v22;
  float v23;
  int *v24;
  int *v25;
  uint64_t v26;
  float v27;
  int *v28;
  int *v29;
  uint64_t v30;
  float v31;
  int *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v33[0] = &unk_2513463C8;
  v33[1] = mlx::core::allocator::free;
  v34 = v33;
  mlx::core::array::set_data(a1, v4, (uint64_t)v33);
  result = v34;
  if (v34 == v33)
  {
    v6 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_6:
  v7 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v8 = v7[6];
      if (v8)
      {
        v9 = (BOOL *)v7[19];
        v10 = 4 * (_QWORD)v8;
        do
        {
          v11 = *a2++;
          *v9++ = v11 != 0.0;
          v10 -= 4;
        }
        while (v10);
      }
      break;
    case 1:
      v24 = v7[6];
      if (v24)
      {
        v25 = v7[19];
        v26 = 4 * (_QWORD)v24;
        do
        {
          v27 = *a2++;
          *(_BYTE *)v25 = (int)v27;
          v25 = (int *)((char *)v25 + 1);
          v26 -= 4;
        }
        while (v26);
      }
      break;
    case 2:
      v12 = v7[6];
      if (v12)
      {
        v13 = v7[19];
        v14 = 4 * (_QWORD)v12;
        do
        {
          v15 = *a2++;
          *v13++ = v15;
          v14 -= 4;
        }
        while (v14);
      }
      break;
    case 3:
      v16 = v7[6];
      if (v16)
      {
        v17 = v7[19];
        v18 = 4 * (_QWORD)v16;
        do
        {
          v19 = *a2++;
          *(_BYTE *)v17 = (int)v19;
          v17 = (int *)((char *)v17 + 1);
          v18 -= 4;
        }
        while (v18);
      }
      break;
    case 4:
      v20 = v7[6];
      if (v20)
      {
        v21 = v7[19];
        v22 = 4 * (_QWORD)v20;
        do
        {
          v23 = *a2++;
          *v21++ = (int)v23;
          v22 -= 4;
        }
        while (v22);
      }
      break;
    case 5:
      v28 = v7[6];
      if (v28)
      {
        v29 = v7[19];
        v30 = 4 * (_QWORD)v28;
        do
        {
          v31 = *a2++;
          *(_QWORD *)v29 = (uint64_t)v31;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
      }
      break;
    case 6:
      v32 = v7[6];
      if (v32)
        result = memmove(v7[19], a2, 4 * (_QWORD)v32);
      break;
    default:
      return result;
  }
  return result;
}

void sub_24246B8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array(int ***a1, int *a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  void *__p;
  void *v10;
  _DWORD *v11;
  uint64_t v12;

  v12 = a4;
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a3;
  v10 = v7 + 1;
  v11 = v7 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v12, a1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<int const*>(a1, a2);
  return a1;
}

void sub_24246B990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<int const*>(int ***a1, int *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  int *v10;
  BOOL *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  float *v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v30[0] = &unk_2513463C8;
  v30[1] = mlx::core::allocator::free;
  v31 = v30;
  mlx::core::array::set_data(a1, v4, (uint64_t)v30);
  v6 = v31;
  if (v31 == v30)
  {
    v7 = 4;
    v6 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v10 = v8[6];
      if (v10)
      {
        v11 = (BOOL *)v8[19];
        v12 = 4 * (_QWORD)v10;
        do
        {
          v13 = *a2++;
          *v11++ = v13 != 0;
          v12 -= 4;
        }
        while (v12);
      }
      break;
    case 1:
      v14 = v8[6];
      if (v14)
      {
        v15 = v8[19];
        v16 = 4 * (_QWORD)v14;
        do
        {
          v17 = *a2++;
          *(_BYTE *)v15 = v17;
          v15 = (int *)((char *)v15 + 1);
          v16 -= 4;
        }
        while (v16);
      }
      break;
    case 2:
    case 4:
      v9 = v8[6];
      if (v9)
        memmove(v8[19], a2, 4 * (_QWORD)v9);
      break;
    case 3:
      v18 = v8[6];
      if (v18)
      {
        v19 = v8[19];
        v20 = 4 * (_QWORD)v18;
        do
        {
          v21 = *a2++;
          *(_BYTE *)v19 = v21;
          v19 = (int *)((char *)v19 + 1);
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 5:
      v22 = v8[6];
      if (v22)
      {
        v23 = v8[19];
        v24 = 4 * (_QWORD)v22;
        do
        {
          v25 = *a2++;
          *(_QWORD *)v23 = v25;
          v23 += 2;
          v24 -= 4;
        }
        while (v24);
      }
      break;
    case 6:
      v26 = v8[6];
      if (v26)
      {
        v27 = (float *)v8[19];
        v28 = 4 * (_QWORD)v26;
        do
        {
          v29 = *a2++;
          result = (float)v29;
          *v27++ = (float)v29;
          v28 -= 4;
        }
        while (v28);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_24246BB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array(int ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v11, a1);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v12, a5);
  mlx::core::array::set_data(a1, a2, (uint64_t)v12);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void sub_24246BC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::array::set_data(int ***a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  int **v8;
  int *v9;
  int **v10;
  int *v11;
  int *v12;
  int *v13;
  int v15;
  int *v16;
  int v17;
  int v18;
  BOOL v19;
  unint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;

  v23 = a2;
  std::allocate_shared[abi:ne180100]<mlx::core::array::Data,std::allocator<mlx::core::array::Data>,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,void>(&v23, a3, &v22);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)(*a1 + 17), &v22);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  result = mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v23);
  v8 = *a1;
  v9 = (*a1)[6];
  v8[19] = (int *)result;
  v8[20] = v9;
  *((_BYTE *)v8 + 168) |= 1u;
  *((_BYTE *)*a1 + 168) |= 2u;
  v10 = *a1;
  v11 = **a1;
  v12 = (*a1)[1];
  v13 = v11 + 1;
  if (v11 != v12 && v13 != v12)
  {
    v15 = *v11;
    v16 = v11 + 1;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = v15 < v18;
      if (v15 <= v18)
        v15 = v17;
      if (v19)
        v11 = v13;
      v13 = v16;
    }
    while (v16 != v12);
  }
  v20 = (unint64_t)v10[6];
  if (v20 >= 2)
    v21 = 4 * (v20 == *v11);
  else
    v21 = 4;
  *((_BYTE *)v10 + 168) = (_BYTE)v10[21] & 0xFB | v21;
  return result;
}

void mlx::core::array::detach(mlx::core::array *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;

  v2 = *(_QWORD *)this;
  v3 = *(uint64_t **)(*(_QWORD *)this + 200);
  v4 = *(uint64_t **)(*(_QWORD *)this + 208);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v7 = *(_QWORD *)(*v3 + 176);
      v6 = *(_QWORD *)(*v3 + 184);
      v8 = *v3;
      if (v6 != v7)
      {
        do
          mlx::core::array::~array((mlx::core::array *)(v6 - 16));
        while (v6 != v7);
        v8 = *v3;
      }
      *(_QWORD *)(v5 + 184) = v7;
      v10 = *(_QWORD *)(v8 + 200);
      v9 = *(_QWORD *)(v8 + 208);
      v11 = v8;
      if (v9 != v10)
      {
        do
          mlx::core::array::~array((mlx::core::array *)(v9 - 16));
        while (v9 != v10);
        v11 = *v3;
      }
      *(_QWORD *)(v8 + 208) = v10;
      *(_DWORD *)(v11 + 224) = 0;
      v24 = 0uLL;
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v11 + 64, &v24);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
    v2 = *(_QWORD *)this;
  }
  v16 = *(_QWORD *)(v2 + 176);
  v15 = *(_QWORD *)(v2 + 184);
  v17 = v2;
  if (v15 != v16)
  {
    do
      mlx::core::array::~array((mlx::core::array *)(v15 - 16));
    while (v15 != v16);
    v17 = *(_QWORD *)this;
  }
  *(_QWORD *)(v2 + 184) = v16;
  v19 = *(_QWORD *)(v17 + 200);
  v18 = *(_QWORD *)(v17 + 208);
  v20 = v17;
  if (v18 != v19)
  {
    do
      mlx::core::array::~array((mlx::core::array *)(v18 - 16));
    while (v18 != v19);
    v20 = *(_QWORD *)this;
  }
  *(_QWORD *)(v17 + 208) = v19;
  *(_DWORD *)(v20 + 224) = 0;
  v24 = 0uLL;
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v20 + 64, &v24);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void mlx::core::array::eval(mlx::core::array *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _QWORD *v11;
  void **v12;
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)this;
  v3 = *(_DWORD *)(*(_QWORD *)this + 80);
  if (v3)
  {
    if (v3 == 1)
    {
      mlx::core::Event::wait((mlx::core::Event *)(v2 + 88));
      *(_DWORD *)(*(_QWORD *)this + 80) = 2;
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 1);
    v14[0] = *(_QWORD *)this;
    v14[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v10 = 0uLL;
    v11 = 0;
    v12 = (void **)&v10;
    v13 = 0;
    v7 = operator new(0x10uLL);
    *(_QWORD *)&v10 = v7;
    v11 = v7 + 2;
    *v7 = v2;
    v7[1] = v4;
    if (v4)
    {
      v8 = (unint64_t *)(v4 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *((_QWORD *)&v10 + 1) = v7 + 2;
    mlx::core::eval(&v10);
    v12 = (void **)&v10;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v12);
    mlx::core::array::~array((mlx::core::array *)v14);
  }
}

void sub_24246C094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::array::is_tracer(mlx::core::array *this)
{
  BOOL v1;

  if (*(_BYTE *)(*(_QWORD *)this + 128))
    v1 = mlx::core::detail::InTracing::tracing_counter <= 0;
  else
    v1 = 1;
  return !v1;
}

void mlx::core::array::set_data(uint64_t *a1, uint64_t a2, uint64_t a3, __n128 *a4, char a5, uint64_t a6)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v16 = a2;
  std::allocate_shared[abi:ne180100]<mlx::core::array::Data,std::allocator<mlx::core::array::Data>,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,void>(&v16, a6, &v15);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](*a1 + 136, &v15);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v16);
  v14 = *a1;
  *(_QWORD *)(v14 + 152) = v13;
  *(_QWORD *)(v14 + 160) = a3;
  std::vector<unsigned long>::__move_assign(v14 + 24, a4);
  *(_BYTE *)(*a1 + 168) = a5;
}

char *mlx::core::array::copy_shared_buffer(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  char *result;
  uint64_t v14;

  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((_QWORD *)(*a1 + 136), (uint64_t *)(*(_QWORD *)a2 + 136));
  v12 = *a1;
  result = (char *)(*a1 + 24);
  if (result != (char *)a3)
  {
    result = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(result, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    v12 = *a1;
  }
  *(_BYTE *)(v12 + 168) = a4;
  v14 = *a1;
  *(_QWORD *)(v14 + 152) = *(_QWORD *)(*(_QWORD *)a2 + 152) + *(unsigned __int8 *)(*a1 + 60) * a6;
  *(_QWORD *)(v14 + 160) = a5;
  return result;
}

char *mlx::core::array::copy_shared_buffer(mlx::core::array *this, const mlx::core::array *a2)
{
  return mlx::core::array::copy_shared_buffer((uint64_t *)this, (uint64_t)a2, *(_QWORD *)a2 + 24, *(_BYTE *)(*(_QWORD *)a2 + 168), *(_QWORD *)(*(_QWORD *)a2 + 160), 0);
}

char *mlx::core::array::move_shared_buffer(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  char *result;
  uint64_t v14;

  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](*a1 + 136, (__int128 *)(*(_QWORD *)a2 + 136));
  v12 = *a1;
  result = (char *)(*a1 + 24);
  if (result != (char *)a3)
  {
    result = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(result, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    v12 = *a1;
  }
  *(_BYTE *)(v12 + 168) = a4;
  v14 = *a1;
  *(_QWORD *)(v14 + 152) = *(_QWORD *)(*(_QWORD *)a2 + 152) + *(unsigned __int8 *)(*a1 + 60) * a6;
  *(_QWORD *)(v14 + 160) = a5;
  return result;
}

void mlx::core::array::move_shared_buffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = *a2;
  v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v2 = *a2;
  }
  mlx::core::array::move_shared_buffer(a1, (uint64_t)v6, v2 + 24, *(_BYTE *)(v2 + 168), *(_QWORD *)(v2 + 160), 0);
  mlx::core::array::~array((mlx::core::array *)v6);
}

void sub_24246C34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::array::~array(mlx::core::array *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (!*(_DWORD *)(v2 + 80))
    {
      v4 = *(_QWORD *)(v2 + 200);
      v3 = *(_QWORD *)(v2 + 208);
      if (v3 != v4)
      {
        v5 = (v3 - v4) >> 4;
        v6 = *((_QWORD *)this + 1);
        if (v6)
          v6 = *(_QWORD *)(v6 + 8) + 1;
        v7 = v6 == v5 + 1;
        v8 = v4;
        while (1)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
            v9 = *(_QWORD *)(v9 + 8) + 1;
          if (!v7 || v9 != v5)
            break;
          v8 += 16;
          v7 = 1;
          if (v8 == v3)
          {
            do
            {
              v10 = (uint64_t *)(*(_QWORD *)v4 + 208);
              v11 = *v10;
              v12 = *(_QWORD *)(*(_QWORD *)v4 + 200);
              if (v12 != *v10)
              {
                do
                {
                  v17 = 0uLL;
                  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v12, &v17);
                  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
                  if (*((_QWORD *)&v17 + 1))
                  {
                    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
                    do
                      v15 = __ldaxr(v14);
                    while (__stlxr(v15 - 1, v14));
                    if (!v15)
                    {
                      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                      std::__shared_weak_count::__release_weak(v13);
                    }
                  }
                  v12 += 16;
                }
                while (v12 != v11);
                v10 = (uint64_t *)(*(_QWORD *)v4 + 208);
                v16 = *v10;
                v12 = *(_QWORD *)(*(_QWORD *)v4 + 200);
                while (v16 != v12)
                  mlx::core::array::~array((mlx::core::array *)(v16 - 16));
              }
              *v10 = v12;
              v4 += 16;
            }
            while (v4 != v3);
            break;
          }
        }
      }
    }
  }
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void mlx::core::array::ArrayDesc::init(mlx::core::array::ArrayDesc *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;

  v2 = (_QWORD *)((char *)this + 24);
  std::vector<unsigned long>::resize((uint64_t)this + 24, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_QWORD *)this + 6) = 1;
  v3 = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
  v4 = v3 - 1;
  if ((int)v3 - 1 >= 0)
  {
    v5 = (int *)(*(_QWORD *)this + 4 * v4);
    v6 = (uint64_t *)(*v2 + 8 * v4);
    v7 = 1;
    do
    {
      *v6-- = v7;
      v8 = *v5--;
      v7 = *((_QWORD *)this + 6) * v8;
      *((_QWORD *)this + 6) = v7;
      LODWORD(v3) = v3 - 1;
    }
    while ((_DWORD)v3);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 22);
  v10 = (uint64_t *)*((_QWORD *)this + 23);
  if (v9 != v10)
  {
    v11 = mlx::core::detail::InTracing::tracing_counter;
    v12 = *((unsigned __int8 *)this + 128);
    do
    {
      v13 = *v9;
      v9 += 2;
      if (*(_BYTE *)(v13 + 128))
        v14 = v11 <= 0;
      else
        v14 = 1;
      v15 = !v14;
      v12 |= v15;
      *((_BYTE *)this + 128) = v12;
    }
    while (v9 != v10);
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t mlx::core::array::ArrayDesc::ArrayDesc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 2;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  mlx::core::array::ArrayDesc::init((mlx::core::array::ArrayDesc *)a1);
  return a1;
}

void sub_24246C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  void *v18;
  void *v19;

  v15 = v14;
  v16 = v12;
  a10 = (void **)(v10 + 200);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v11);
  v18 = *(void **)(v10 + 24);
  if (v18)
  {
    *(_QWORD *)(v10 + 32) = v18;
    operator delete(v18);
  }
  v19 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::array::ArrayDesc::ArrayDesc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  mlx::core::array::ArrayDesc::init((mlx::core::array::ArrayDesc *)a1);
  return a1;
}

void sub_24246C794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a2);
  v7 = v6;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v3);
  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v2 + 32) = v9;
    operator delete(v9);
  }
  v10 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void mlx::core::array::ArrayDesc::~ArrayDesc(mlx::core::array::ArrayDesc *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char **v19;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v2 = *((_QWORD *)this + 22);
  v3 = *((_QWORD *)this + 23);
  v4 = (char *)this + 176;
  if (v2 != v3)
  {
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (v5 && !*(_QWORD *)(v5 + 8))
        std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::push_back[abi:ne180100](&v16, v2);
      v2 += 16;
    }
    while (v2 != v3);
    while (1)
    {
      v13 = v17;
      if (v16 == v17)
        break;
      v7 = *((_QWORD *)v17 - 2);
      v6 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v17 = (char *)std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)(v17 - 16));
      v8 = *(_QWORD *)(v7 + 176);
      v9 = *(_QWORD *)(v7 + 184);
      while (v8 != v9)
      {
        v10 = *(_QWORD *)(v8 + 8);
        if (v10 && !*(_QWORD *)(v10 + 8))
          std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::push_back[abi:ne180100](&v16, v8);
        v8 += 16;
      }
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  v19 = &v16;
  std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  v16 = (char *)this + 200;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v16 = v4;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  v14 = (void *)*((_QWORD *)this + 3);
  if (v14)
  {
    *((_QWORD *)this + 4) = v14;
    operator delete(v14);
  }
  v15 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v15;
    operator delete(v15);
  }
}

uint64_t std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v25 = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v12);
    v15 = &v13[16 * v9];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v16);
      v18 = &v13[16 * v9];
    }
    else
    {
      v18 = &v13[16 * v9];
      do
      {
        v19 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v18 - 1) = v19;
        v18 -= 16;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
      }
      while (v16 != v17);
      v20 = *(int64x2_t *)a1;
    }
    v8 = v15 + 16;
    *a1 = v18;
    a1[1] = v15 + 16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = &v13[16 * v14];
    v24 = v21;
    v22 = v20.i64[0];
    result = std::__split_buffer<std::shared_ptr<mlx::core::array::ArrayDesc>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = v7 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  a1[1] = v8;
  return result;
}

uint64_t mlx::core::array::ArrayIterator::ArrayIterator(uint64_t this, const mlx::core::array *a2, int a3)
{
  std::logic_error *exception;

  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = a3;
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == **(_QWORD **)a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Cannot iterate over 0-d array.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  return this;
}

void sub_24246CAD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::array::ArrayIterator::operator*(int *a1@<X0>, const void ***a2@<X8>)
{
  std::vector<int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  mlx::core *v7;
  char *v8;
  int64_t v9;
  mlx::core *v10;
  void *__p;
  void *v12;
  uint64_t v13;
  const void **v14[2];
  void *v15;
  char *v16;
  uint64_t v17;
  std::vector<int>::value_type __x[2];
  void *v19;
  uint64_t v20;
  std::vector<int> v21;

  v4 = (uint64_t)(*(_QWORD *)(**(_QWORD **)a1 + 8) - ***(_QWORD ***)a1) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v21, v4, __x);
  v5 = **(_QWORD **)a1;
  v19 = 0;
  v20 = 0;
  *(_QWORD *)__x = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  v6 = **(_QWORD **)a1;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
  v8 = (char *)v15;
  v9 = v16 - ((_BYTE *)v15 + 4);
  if (v16 != (char *)v15 + 4)
    memmove(v15, (char *)v15 + 4, v16 - ((_BYTE *)v15 + 4));
  v16 = &v8[v9];
  *v21.__begin_ = a1[2];
  **(_DWORD **)__x = a1[2] + 1;
  mlx::core::slice(*(const void ****)a1, (uint64_t)&v21, (uint64_t)__x, v7, 0, v14);
  __p = 0;
  v12 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 2);
  mlx::core::reshape(v14, (uint64_t)&__p, v10, 0, a2);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)v14);
  if (v15)
  {
    v16 = (char *)v15;
    operator delete(v15);
  }
  if (*(_QWORD *)__x)
  {
    v19 = *(void **)__x;
    operator delete(*(void **)__x);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_24246CC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a12);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(_QWORD *)(v18 - 48) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlx::core::array>::__emplace_back_slow_path<std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&>(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD **a5)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  int64x2_t v22;
  char *v23;
  char *v25;
  int64x2_t v26;
  char *v27;
  _QWORD *v28;

  v6 = (_QWORD *)*a1;
  v7 = (a1[1] - *a1) >> 4;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v13 = (uint64_t)(a1 + 2);
  v14 = a1[2] - (_QWORD)v6;
  if (v14 >> 3 > v8)
    v8 = v14 >> 3;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
    v15 = 0xFFFFFFFFFFFFFFFLL;
  else
    v15 = v8;
  v28 = a1 + 2;
  if (v15)
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v13, v15);
  else
    v16 = 0;
  v25 = v16;
  v26.i64[0] = (uint64_t)&v16[16 * v7];
  v27 = &v16[16 * v15];
  std::construct_at[abi:ne180100]<mlx::core::array,std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&,mlx::core::array*>(v26.i64[0], a2, a3, a4, a5);
  v17 = v26.i64[0];
  v18 = v26.i64[0] + 16;
  v26.i64[1] = v26.i64[0] + 16;
  v20 = (_QWORD *)*a1;
  v19 = (_QWORD *)a1[1];
  if (v19 == (_QWORD *)*a1)
  {
    v22 = vdupq_n_s64((unint64_t)v19);
  }
  else
  {
    do
    {
      v21 = *((_OWORD *)v19 - 1);
      v19 -= 2;
      *(_OWORD *)(v17 - 16) = v21;
      v17 -= 16;
      *v19 = 0;
      v19[1] = 0;
    }
    while (v19 != v20);
    v22 = *(int64x2_t *)a1;
    v18 = v26.i64[1];
  }
  *a1 = v17;
  a1[1] = v18;
  v26 = v22;
  v23 = (char *)a1[2];
  a1[2] = (uint64_t)v27;
  v27 = v23;
  v25 = (char *)v22.i64[0];
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v25);
  return v18;
}

void sub_24246CDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::construct_at[abi:ne180100]<mlx::core::array,std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&,mlx::core::array*>(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD **a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;
  void **v20;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *a3;
  v7 = a4[1];
  *(_QWORD *)&v16 = *a4;
  *((_QWORD *)&v16 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v14 = 0uLL;
  v15 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v14, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  v19 = v6;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>((__int128 *)__p, &v19, &v16, &v14, a1);
  v20 = (void **)&v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_24246CF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 - 24) = v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 24));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<mlx::core::array>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        mlx::core::array::~array((mlx::core::array *)(v3 - 16));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 std::vector<unsigned long>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t std::__split_buffer<std::shared_ptr<mlx::core::array::ArrayDesc>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, __int128 *a3@<X3>, __int128 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x100uLL);
  result = std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,std::allocator<mlx::core::array::ArrayDesc>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_24246D318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,std::allocator<mlx::core::array::ArrayDesc>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3, __int128 *a4, __int128 *a5)
{
  a1[2] = 0;
  *a1 = &unk_25134DA48;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,mlx::core::array::ArrayDesc*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_24246D364(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,mlx::core::array::ArrayDesc*>(uint64_t a1, __int128 *a2, uint64_t *a3, __int128 *a4, __int128 *a5)
{
  __int128 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *__p[2];
  uint64_t v16;
  void **v17;

  v6 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  v14 = *a4;
  *(_OWORD *)__p = v6;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v12 = *a5;
  v13 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  mlx::core::array::ArrayDesc::ArrayDesc(a1, (uint64_t)__p, v7, (uint64_t)&v14, (uint64_t)&v12);
  v17 = (void **)&v12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  return a1;
}

void sub_24246D440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 24) = v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 24));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype const&,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x100uLL);
  result = std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype const&,std::allocator<mlx::core::array::ArrayDesc>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24246D4B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype const&,std::allocator<mlx::core::array::ArrayDesc>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_25134DA48;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype const&,mlx::core::array::ArrayDesc*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_24246D504(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype const&,mlx::core::array::ArrayDesc*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *__p[2];
  uint64_t v6;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  mlx::core::array::ArrayDesc::ArrayDesc(a1, (uint64_t)__p, *a3);
  if (__p[0])
    operator delete(__p[0]);
  return a1;
}

void sub_24246D570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::array::Data,std::allocator<mlx::core::array::Data>,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<mlx::core::array::Data>::__shared_ptr_emplace[abi:ne180100]<mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,std::allocator<mlx::core::array::Data>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24246D5D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::array::Data>::__shared_ptr_emplace[abi:ne180100]<mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,std::allocator<mlx::core::array::Data>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[2] = 0;
  *a1 = &unk_25134E7A8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<mlx::core::array::Data,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,mlx::core::array::Data*>(a1 + 3, a2, a3);
  return a1;
}

void sub_24246D620(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::array::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E7A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::array::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E7A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

void std::__shared_ptr_emplace<mlx::core::array::Data>::__on_zero_shared(uint64_t a1)
{
  mlx::core::array::Data::~Data((mlx::core::array::Data *)(a1 + 24));
}

_QWORD *std::construct_at[abi:ne180100]<mlx::core::array::Data,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,mlx::core::array::Data*>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  *a1 = v4;
  if (v9)
  {
    if (v9 == v8)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
    }
    else
    {
      a1[4] = (*(uint64_t (**)(void))(*v9 + 16))();
    }
    v5 = v9;
    if (v9 == v8)
    {
      v6 = 4;
      v5 = v8;
      goto LABEL_10;
    }
    if (v9)
    {
      v6 = 5;
LABEL_10:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  else
  {
    a1[4] = 0;
  }
  return a1;
}

void sub_24246D768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx_metal_start_capture(uint64_t a1)
{
  std::string __p;

  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    __p = *(std::string *)(a1 + 16);
  mlx::core::metal::start_capture(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24246D830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::BlockMaskedMM::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  int *v3;
  mlx::core::scheduler *v7;
  _QWORD *v8;
  uint64_t v9;
  mlx::core::array *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  uint64_t v27;
  ldiv_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  ldiv_t v36;
  float *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *exception;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int ***v48;
  unint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t *v56;
  _BYTE v57[8];
  uint64_t v58;
  uint64_t *v59;
  _QWORD v60[3];
  _QWORD *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v3 = (*a3)[7];
  if ((_DWORD)v3 != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[BlockMaskedMM::eval] Currently only supports float32.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v3)));
  v60[0] = &unk_2513463C8;
  v60[1] = mlx::core::allocator::free;
  v61 = v60;
  mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)v60);
  v8 = v61;
  if (v61 == v60)
  {
    v9 = 4;
    v8 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_7;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_7:
  v10 = *(mlx::core::array **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v49 = v11 - *(_QWORD *)a2;
  mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()(*(mlx::core::array **)a2, v49 > 0x30, *(_DWORD *)(*(_QWORD *)(v11 - 16) + 56) != 0, (uint64_t)v57);
  mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()((mlx::core::array *)((char *)v10 + 16), v49 > 0x30, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) - 16) + 56) != 0, (uint64_t)v54);
  v12 = v59[1] - *v59;
  if ((unint64_t)v12 <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v13 = v56[1];
  if (v13 == *v56)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v14 = *v59 + 4 * (v12 >> 2);
  v15 = *(_DWORD *)(v13 - 4);
  v50 = *(_DWORD *)(v14 - 8);
  if (v50)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = *(_DWORD *)(v14 - 4);
    if (v17)
    {
      v51 = v17;
      v18 = v15;
      v19 = *a3;
      v53 = v15 * (uint64_t)v50;
      if (v53 <= (unint64_t)(*a3)[6])
      {
        v20 = 0;
        v52 = (uint64_t)v49 >> 4;
        v44 = v17 * v15;
        v45 = v17 * v50;
        v47 = (_QWORD *)a2;
        v48 = a3;
        v46 = a1;
        do
        {
          v21 = v59[19];
          v22 = *v59;
          v23 = (unint64_t)(v59[1] - *v59) >> 2;
          v24 = 0;
          v25 = (v23 - 1);
          if ((int)v23 - 1 >= 0)
          {
            quot = v45 * v20;
            v27 = v59[3];
            do
            {
              v28 = ldiv(quot, *(int *)(v22 + 4 * v25));
              quot = v28.quot;
              v24 += *(_QWORD *)(v27 + 8 * v25--) * v28.rem;
            }
            while (v25 != -1);
          }
          v29 = v56[19];
          v30 = *v56;
          v31 = (unint64_t)(v56[1] - *v56) >> 2;
          v32 = 0;
          v33 = (v31 - 1);
          if ((int)v31 - 1 >= 0)
          {
            v34 = v44 * v20;
            v35 = v56[3];
            do
            {
              v36 = ldiv(v34, *(int *)(v30 + 4 * v33));
              v34 = v36.quot;
              v32 += *(_QWORD *)(v35 + 8 * v33--) * v36.rem;
            }
            while (v33 != -1);
          }
          v37 = (float *)(v21 + 4 * v24);
          v38 = v19[19];
          if (v49 >= 0x31)
          {
            if (v57[0])
              v39 = 1;
            else
              v39 = v58;
            if (v57[0])
              v40 = v58;
            else
              v40 = 1;
            mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(v47[1] - 32, v37, *(_DWORD *)(v46 + 20), v20, v50, v51, v39, v40);
            if (v54[0])
              v41 = 1;
            else
              v41 = v55;
            if (v54[0])
              v42 = v55;
            else
              v42 = 1;
            mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(v47[1] - 16, (float *)(v29 + 4 * v32), *(_DWORD *)(v46 + 20), v20, v51, v18, v41, v42);
            v19 = *v48;
          }
          if (v19[1] == *v19)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          cblas_sgemm_NEWLAPACK();
          if (v52 == 5 || v52 == 3)
            mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(*v47 + 32, (float *)&v38[v20 * v53], *(_DWORD *)(v46 + 20), v20, v50, v18, v18, 1);
          ++v20;
          v19 = *v48;
        }
        while ((unint64_t)(*v48)[6] / v53 > v20);
      }
    }
    else
    {
      bzero((*a3)[19], *((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v56);
  mlx::core::array::~array((mlx::core::array *)&v59);
}

void sub_24246DCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, mlx::core::array *a14, mlx::core::array *a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()(mlx::core::array *a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  float v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  void *__p[3];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  void *v59[3];
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;

  v8 = *(_QWORD *)a1;
  v9 = *(const void **)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - *(_QWORD *)v8;
  v12 = v11 >> 2;
  if ((a3 & 1) != 0)
    goto LABEL_2;
  if ((const void *)v10 == v9)
    goto LABEL_56;
  v24 = *(_QWORD *)(v8 + 24);
  v25 = *(_QWORD *)(v24 + 8 * (v12 - 2));
  v26 = *(_QWORD *)(v24 + 8 * (v12 - 1));
  if (v25 == *((_DWORD *)v9 + v12 - 1) && v26 == 1)
  {
    if (a2)
    {
      v64 = 0;
      v63 = 0uLL;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v63, v9, v10, v12);
      v37 = *(_QWORD *)(*(_QWORD *)a1 + 56);
      v62 = 0uLL;
      v61 = 0;
      v60 = 0uLL;
      mlx::core::array::array(&v65, &v63, v37, &v62, &v60);
      v67 = (void **)&v60;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v67);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      if (*((_QWORD *)&v62 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if ((_QWORD)v63)
      {
        *((_QWORD *)&v63 + 1) = v63;
        operator delete((void *)v63);
      }
      mlx::core::copy(a1, (mlx::core::array *)&v65, 1, v38);
      *(_BYTE *)a4 = 0;
      v43 = v65;
      v42 = v66;
      *(_QWORD *)(a4 + 8) = v25;
      *(_QWORD *)(a4 + 16) = v43;
      *(_QWORD *)(a4 + 24) = v42;
      if (v42)
      {
        v44 = (unint64_t *)(v42 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      goto LABEL_13;
    }
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v25;
    *(_QWORD *)(a4 + 16) = v8;
    v46 = *((_QWORD *)a1 + 1);
    *(_QWORD *)(a4 + 24) = v46;
    if (v46)
    {
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    return;
  }
  if (v25 != 1)
  {
LABEL_2:
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v9, v10, v12);
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 56);
    v54 = 0uLL;
    v53 = 0;
    v52 = 0uLL;
    mlx::core::array::array(&v65, (__int128 *)__p, v13, &v54, &v52);
    v67 = (void **)&v52;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v67);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    mlx::core::copy(a1, (mlx::core::array *)&v65, 2, v14);
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v18 == **(_QWORD **)a1)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v19 = *(int *)(v18 - 4);
    *(_BYTE *)a4 = 0;
    v21 = v65;
    v20 = v66;
    *(_QWORD *)(a4 + 8) = v19;
    *(_QWORD *)(a4 + 16) = v21;
    *(_QWORD *)(a4 + 24) = v20;
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
LABEL_13:
    mlx::core::array::~array((mlx::core::array *)&v65);
    return;
  }
  if ((unint64_t)v11 <= 4)
LABEL_56:
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  if (v26 != *((_DWORD *)v9 + v12 - 2))
    goto LABEL_2;
  if (a2)
  {
    memset(v59, 0, sizeof(v59));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v59, v9, v10, v12);
    v28 = *(_QWORD *)(*(_QWORD *)a1 + 56);
    v58 = 0uLL;
    v57 = 0;
    v56 = 0uLL;
    mlx::core::array::array(&v65, (__int128 *)v59, v28, &v58, &v56);
    v67 = (void **)&v56;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v67);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v59[0])
    {
      v59[1] = v59[0];
      operator delete(v59[0]);
    }
    mlx::core::copy(a1, (mlx::core::array *)&v65, 1, v29);
    *(_BYTE *)a4 = 1;
    v34 = v65;
    v33 = v66;
    *(_QWORD *)(a4 + 8) = v26;
    *(_QWORD *)(a4 + 16) = v34;
    *(_QWORD *)(a4 + 24) = v33;
    if (v33)
    {
      v35 = (unint64_t *)(v33 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    goto LABEL_13;
  }
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = v26;
  *(_QWORD *)(a4 + 16) = v8;
  v49 = *((_QWORD *)a1 + 1);
  *(_QWORD *)(a4 + 24) = v49;
  if (v49)
  {
    v50 = (unint64_t *)(v49 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
}

void sub_24246E0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;

  mlx::core::array::~array((mlx::core::array *)(v24 - 72));
  _Unwind_Resume(a1);
}

uint64_t mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(uint64_t result, float *a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  ldiv_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  float *v32;
  int v33;
  uint64_t v34;
  float v35;
  uint64_t v37;
  int v38;
  float *v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  float *v47;
  int v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v58;

  v8 = *(uint64_t **)result;
  v9 = **(_QWORD **)result;
  v10 = *(_QWORD *)(*(_QWORD *)result + 8) - v9;
  if (v10 <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v15 = (*(_QWORD *)(*(_QWORD *)result + 8) - v9) >> 2;
  v16 = v15 - 2;
  v17 = v10 >> 2;
  v18 = v8[3];
  v19 = (v17 - 1);
  v58 = v15 - 1;
  v20 = 0;
  if ((int)v17 - 1 >= 0)
  {
    LODWORD(result) = *(_DWORD *)(v9 + 4 * (v15 - 1)) * a4 * *(_DWORD *)(v9 + 4 * v16);
    do
    {
      v21 = ldiv((int)result, *(int *)(v9 + 4 * v19));
      result = v21.quot;
      v20 += *(_QWORD *)(v18 + 8 * v19--) * v21.rem;
    }
    while (v19 != -1);
  }
  v22 = *(_QWORD *)(v18 + 8 * v16);
  v23 = *(_QWORD *)(v18 + 8 * v58);
  v24 = v8[19];
  v25 = a3 - 1;
  v26 = ((a3 - 1 + a5) / a3);
  if (*((_DWORD *)v8 + 14))
  {
    if ((int)v26 >= 1)
    {
      v27 = 0;
      LODWORD(result) = a5;
      v28 = ((v25 + a6) / a3);
      do
      {
        if (a3 >= (int)result)
          v29 = result;
        else
          v29 = a3;
        if ((int)v28 >= 1)
        {
          v30 = 0;
          v31 = a5 - v27 * a3;
          if (v31 >= a3)
            v31 = a3;
          v32 = a2;
          v33 = a6;
          do
          {
            v34 = v33;
            if (a3 < (uint64_t)v33)
              v34 = a3;
            v35 = *(float *)(v24 + 4 * (v20 + v27 * v22 + v30 * v23));
            if (v35 != 1.0 && v31 >= 1)
            {
              v37 = 0;
              v38 = a6 - v30 * a3;
              if (v38 >= a3)
                v38 = a3;
              v39 = v32;
              do
              {
                v40 = v39;
                v41 = v34;
                if (v38 >= 1)
                {
                  do
                  {
                    *v40 = v35 * *v40;
                    v40 += a8;
                    --v41;
                  }
                  while (v41);
                }
                ++v37;
                v39 += a7;
              }
              while (v37 != v29);
            }
            ++v30;
            v33 -= a3;
            v32 += a8 * a3;
          }
          while (v30 != v28);
        }
        ++v27;
        result = (result - a3);
        a2 += a7 * a3;
      }
      while (v27 != v26);
    }
  }
  else if ((int)v26 >= 1)
  {
    v42 = 0;
    LODWORD(result) = a5;
    v43 = ((v25 + a6) / a3);
    do
    {
      if (a3 >= (int)result)
        v44 = result;
      else
        v44 = a3;
      if ((int)v43 >= 1)
      {
        v45 = 0;
        v46 = a5 - v42 * a3;
        if (v46 >= a3)
          v46 = a3;
        v47 = a2;
        v48 = a6;
        do
        {
          v49 = v48;
          if (a3 < (uint64_t)v48)
            v49 = a3;
          if (*(_BYTE *)(v24 + v20 + v42 * v22 + v45 * v23))
            v50 = 1;
          else
            v50 = v46 < 1;
          if (!v50)
          {
            v51 = 0;
            v52 = a6 - v45 * a3;
            if (v52 >= a3)
              v52 = a3;
            v53 = v47;
            do
            {
              v54 = v53;
              v55 = v49;
              if (v52 >= 1)
              {
                do
                {
                  *v54 = 0.0;
                  v54 += a8;
                  --v55;
                }
                while (v55);
              }
              ++v51;
              v53 += a7;
            }
            while (v51 != v44);
          }
          ++v45;
          v48 -= a3;
          v47 += a8 * a3;
        }
        while (v45 != v43);
      }
      ++v42;
      result = (result - a3);
      a2 += a7 * a3;
    }
    while (v42 != v26);
  }
  return result;
}

void mlx::core::GatherMM::eval(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  int *v3;
  int ***v4;
  mlx::core::scheduler *v6;
  _QWORD *v7;
  uint64_t v8;
  mlx::core::array *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  int **v16;
  unint64_t v17;
  mlx::core::array *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  const void *v22;
  uint64_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  unint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int quot;
  ldiv_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  ldiv_t v50;
  int ***v51;
  int v52;
  int *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  ldiv_t v58;
  int *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  ldiv_t v64;
  void *exception;
  uint64_t v66;
  mlx::core::array *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  void *__p;
  void *v73;
  uint64_t v74;
  void *v75;
  _BYTE *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  _BYTE *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  char v87[8];
  const void **v88;
  char v89[8];
  const void **v90;
  void *v91;
  _BYTE *v92;
  uint64_t v93;
  _QWORD v94[3];
  _QWORD *v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v3 = (*a3)[7];
  if ((_DWORD)v3 != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[GatherMM::eval] Currently only supports float32.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v4 = a3;
  v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v3)));
  v94[0] = &unk_2513463C8;
  v94[1] = mlx::core::allocator::free;
  v95 = v94;
  mlx::core::array::set_data(v4, (uint64_t)v6, (uint64_t)v94);
  v7 = v95;
  if (v95 == v94)
  {
    v8 = 4;
    v7 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_7;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_7:
  v9 = *a2;
  mlx::core::GatherMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(*a2, (uint64_t)v89);
  mlx::core::GatherMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()((mlx::core::array *)((char *)v9 + 16), (uint64_t)v87);
  v10 = (_BYTE *)v90[1] - (_BYTE *)*v90;
  if ((unint64_t)v10 <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v11 = v88[1];
  if (v11 == *v88)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v12 = (uint64_t)*v90 + 4 * (v10 >> 2);
  v13 = *(v11 - 1);
  v71 = *(_DWORD *)(v12 - 8);
  if (v71)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v15 = *(_DWORD *)(v12 - 4);
    v16 = *v4;
    if (v15)
    {
      v17 = (unint64_t)v16[6];
      v18 = *a2;
      v19 = *v16;
      v20 = (uint64_t)(v16[1] - 2);
      v21 = (v20 - (uint64_t)*v16) >> 2;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v91, v19, v20, v21);
      v84 = 0;
      v85 = 0;
      v86 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v84, v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 2);
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      v22 = *v90;
      v23 = (uint64_t)v90[1] - 8;
      v24 = (v23 - (uint64_t)*v90) >> 2;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v91, v22, v23, v24);
      v81 = 0;
      v82 = 0;
      v83 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 2);
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      v25 = v90[3];
      v26 = (uint64_t)v90[4] - 16;
      v92 = 0;
      v93 = 0;
      v91 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(&v91, v25, v26, (v26 - (uint64_t)v25) >> 3);
      v78 = 0;
      v79 = 0;
      v80 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v78, v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 3);
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      v27 = *v88;
      v28 = (uint64_t)v88[1] - 8;
      v29 = (v28 - (uint64_t)*v88) >> 2;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v91, v27, v28, v29);
      v75 = 0;
      v76 = 0;
      v77 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v75, v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 2);
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      v30 = v88[3];
      v31 = (uint64_t)v88[4] - 16;
      v92 = 0;
      v93 = 0;
      v91 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(&v91, v30, v31, (v31 - (uint64_t)v30) >> 3);
      __p = 0;
      v73 = 0;
      v74 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 3);
      v70 = v13 * (uint64_t)v71;
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      if (v70 <= v17)
      {
        v32 = 0;
        v33 = v17 / v70;
        v68 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 152);
        v69 = *(_QWORD *)(*((_QWORD *)v18 + 4) + 152);
        if (v17 / v70 <= 1)
          v33 = 1;
        v66 = v33;
        v67 = v18;
        do
        {
          v34 = (uint64_t *)*((_QWORD *)v18 + 4);
          v35 = v32;
          if ((v34[21] & 2) == 0)
          {
            v36 = *v34;
            v37 = (unint64_t)(v34[1] - *v34) >> 2;
            v35 = 0;
            v38 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v39 = v34[3];
              quot = v32;
              do
              {
                v41 = ldiv(quot, *(int *)(v36 + 4 * v38));
                quot = v41.quot;
                v35 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = *(_DWORD *)(v69 + 4 * v35);
          v43 = (uint64_t *)*((_QWORD *)v18 + 6);
          v44 = v32;
          if ((v43[21] & 2) == 0)
          {
            v45 = *v43;
            v46 = (unint64_t)(v43[1] - *v43) >> 2;
            v44 = 0;
            v47 = (v46 - 1);
            if ((int)v46 - 1 >= 0)
            {
              v48 = v43[3];
              v49 = v32;
              do
              {
                v50 = ldiv(v49, *(int *)(v45 + 4 * v47));
                v49 = v50.quot;
                v44 += *(_QWORD *)(v48 + 8 * v47--) * v50.rem;
              }
              while (v47 != -1);
            }
          }
          v51 = v4;
          v52 = *(_DWORD *)(v68 + 4 * v44);
          v53 = (int *)v81;
          v54 = (unint64_t)(v82 - (_BYTE *)v81) >> 2;
          v55 = 0;
          v56 = (v54 - 1);
          if ((int)v54 - 1 >= 0)
          {
            v57 = v78;
            do
            {
              v58 = ldiv(v42, v53[v56]);
              v55 += v57[v56--] * v58.rem;
              v42 = v58.quot;
            }
            while (v56 != -1);
          }
          v59 = (int *)v75;
          v60 = (unint64_t)(v76 - (_BYTE *)v75) >> 2;
          v61 = 0;
          v62 = (v60 - 1);
          if ((int)v60 - 1 >= 0)
          {
            v63 = __p;
            do
            {
              v64 = ldiv(v52, v59[v62]);
              v61 += v63[v62--] * v64.rem;
              v52 = v64.quot;
            }
            while (v62 != -1);
          }
          if ((*v51)[1] == **v51)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v4 = v51;
          cblas_sgemm_NEWLAPACK();
          ++v32;
          v18 = v67;
        }
        while (v32 != v66);
      }
      if (__p)
      {
        v73 = __p;
        operator delete(__p);
      }
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
      if (v78)
      {
        v79 = v78;
        operator delete(v78);
      }
      if (v81)
      {
        v82 = v81;
        operator delete(v81);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
    }
    else
    {
      bzero(v16[19], *((unsigned __int8 *)v16 + 60) * (_QWORD)v16[6]);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v88);
  mlx::core::array::~array((mlx::core::array *)&v90);
}

void sub_24246EA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, mlx::core::array *a13, mlx::core::array *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 152);
  if (v40)
  {
    *(_QWORD *)(v38 - 144) = v40;
    operator delete(v40);
  }
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  mlx::core::array::~array(a13);
  mlx::core::array::~array(a14);
  _Unwind_Resume(a1);
}

void mlx::core::GatherMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(mlx::core::array *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  void **v37;

  v4 = *(_QWORD *)a1;
  v5 = *(const void **)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - *(_QWORD *)v4;
  if (v6 == *(_QWORD *)v4)
    goto LABEL_30;
  v8 = v7 >> 2;
  v9 = (v7 >> 2) - 2;
  v10 = (v7 >> 2) - 1;
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v11 + 8 * v9);
  v13 = *(_QWORD *)(v11 + 8 * v10);
  if (v12 != *((_DWORD *)v5 + v10) || v13 != 1)
  {
    if (v12 != 1)
    {
LABEL_17:
      memset(__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v5, v6, v8);
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 56);
      v34 = 0uLL;
      v33 = 0;
      v32 = 0uLL;
      mlx::core::array::array(v36, (__int128 *)__p, v21, &v34, &v32);
      v37 = (void **)&v32;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v37);
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      mlx::core::copy(a1, (mlx::core::array *)v36, 2, v22);
      v26 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v26 == **(_QWORD **)a1)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v27 = *(int *)(v26 - 4);
      *(_BYTE *)a2 = 0;
      v29 = v36[0];
      v28 = v36[1];
      *(_QWORD *)(a2 + 8) = v27;
      *(_QWORD *)(a2 + 16) = v29;
      *(_QWORD *)(a2 + 24) = v28;
      if (v28)
      {
        v30 = (unint64_t *)(v28 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      mlx::core::array::~array((mlx::core::array *)v36);
      return;
    }
    if ((unint64_t)(v6 - *(_QWORD *)v4) > 4)
    {
      if (v13 == *((_DWORD *)v5 + v9))
      {
        *(_BYTE *)a2 = 1;
        *(_QWORD *)(a2 + 8) = v13;
        *(_QWORD *)(a2 + 16) = v4;
        v15 = *((_QWORD *)a1 + 1);
        *(_QWORD *)(a2 + 24) = v15;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        return;
      }
      goto LABEL_17;
    }
LABEL_30:
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v4;
  v18 = *((_QWORD *)a1 + 1);
  *(_QWORD *)(a2 + 24) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
}

void sub_24246ED94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24246EE34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::arange(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  double v12;
  BOOL v13;
  double v16;
  _DWORD *v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::logic_error *exception;
  std::logic_error *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  void *__p[3];
  std::string v35;
  double v36;
  _QWORD v37[33];

  v37[32] = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
    v28 = mlx::core::operator<<(&v36, &mlx::core::BOOL_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" not supported for arange.", 26);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v37, &v35);
    std::logic_error::logic_error(exception, &v35);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v13 = fabs(a5) == INFINITY;
  v12 = fabs(a6);
  v13 = v13 || v12 == INFINITY;
  if (v13)
  {
    v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v30, "[arange] Cannot compute length.");
    goto LABEL_29;
  }
  if (fabs(a7) == INFINITY && (a5 < a6 && a7 > 0.0 || a5 > a6 && a7 < 0.0))
  {
    v36 = a5;
    mlx::core::array::array<double>(a4, &v36, 1, a1);
    return;
  }
  v16 = ceil((a6 - a5) / a7);
  if (v16 > 2147483650.0)
  {
    v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v30, "[arange] Maximum size exceeded.");
LABEL_29:
    __cxa_throw(v30, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v17 = operator new(4uLL);
  *v17 = (int)v16 & ~((int)v16 >> 31);
  __p[1] = v17 + 1;
  __p[2] = v17 + 1;
  __p[0] = v17;
  v18 = mlx::core::to_stream(a2, a3);
  v20 = v19;
  v21 = operator new(0x48uLL);
  v21[2] = 0;
  *v21 = &unk_25134E7F8;
  v21[1] = 0;
  v21[4] = v18;
  *((_DWORD *)v21 + 10) = v20;
  v21[3] = &unk_2513504B8;
  *((double *)v21 + 6) = a5;
  *((double *)v21 + 7) = a6;
  *((double *)v21 + 8) = a7;
  *(_QWORD *)&v33 = v21 + 3;
  *((_QWORD *)&v33 + 1) = v21;
  v36 = 0.0;
  v37[0] = 0;
  v32 = 0;
  v31 = 0uLL;
  mlx::core::array::array(a4, (__int128 *)__p, a1, &v33, &v31);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)v37[0];
  if (v37[0])
  {
    v26 = (unint64_t *)(v37[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24246F18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  int v25;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::arange(mlx::core *a1@<X0>, uint64_t a2@<X1>, int ***a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  mlx::core *v10;
  unsigned int v11;

  v10 = mlx::core::to_stream(a1, a2);
  mlx::core::arange(0x400000006, v10, v11 | 0x100000000, a3, a4, a5, a6);
}

void mlx::core::arange(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  mlx::core *v10;
  unsigned int v11;

  v10 = mlx::core::to_stream(a2, a3);
  mlx::core::arange(a1, v10, v11 | 0x100000000, a4, a5, a6, 1.0);
}

void mlx::core::arange(mlx::core *a1@<X0>, uint64_t a2@<X1>, int ***a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  mlx::core *v8;
  unsigned int v9;

  v8 = mlx::core::to_stream(a1, a2);
  mlx::core::arange(0x400000006, v8, v9 | 0x100000000, a3, a4, a5, 1.0);
}

void mlx::core::arange(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>, double a5@<D0>)
{
  mlx::core *v8;
  unsigned int v9;

  v8 = mlx::core::to_stream(a2, a3);
  mlx::core::arange(a1, v8, v9 | 0x100000000, a4, 0.0, a5, 1.0);
}

void mlx::core::arange(mlx::core *a1@<X0>, uint64_t a2@<X1>, int ***a3@<X8>, double a4@<D0>)
{
  mlx::core *v6;
  unsigned int v7;

  v6 = mlx::core::to_stream(a1, a2);
  mlx::core::arange(0x400000006, v6, v7 | 0x100000000, a3, 0.0, a4, 1.0);
}

void mlx::core::arange(int a1@<W0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, int ***a6@<X8>)
{
  double v7;
  double v8;
  double v9;
  mlx::core *v10;
  unsigned int v11;

  v7 = (double)a1;
  v8 = (double)a2;
  v9 = (double)a3;
  v10 = mlx::core::to_stream(a4, a5);
  mlx::core::arange(0x400000004, v10, v11 | 0x100000000, a6, v7, v8, v9);
}

void mlx::core::arange(int a1@<W0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, int ***a5@<X8>)
{
  double v6;
  double v7;
  mlx::core *v8;
  unsigned int v9;

  v6 = (double)a1;
  v7 = (double)a2;
  v8 = mlx::core::to_stream(a3, a4);
  mlx::core::arange(0x400000004, v8, v9 | 0x100000000, a5, v6, v7, 1.0);
}

void mlx::core::arange(int a1@<W0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>)
{
  double v5;
  mlx::core *v6;
  unsigned int v7;

  v5 = (double)a1;
  v6 = mlx::core::to_stream(a2, a3);
  mlx::core::arange(0x400000004, v6, v7 | 0x100000000, a4, 0.0, v5, 1.0);
}

void mlx::core::linspace(int a1@<W0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, int **a6@<D0>, double a7@<D1>)
{
  int v12;
  uint64_t v13;
  mlx::core *v14;
  unsigned int v15;
  int ***v16;
  double v18;
  mlx::core *v19;
  unsigned int v20;
  mlx::core *v21;
  unsigned int v22;
  uint64_t v23;
  float v24;
  mlx::core *v25;
  unsigned int v26;
  uint64_t v27;
  mlx::core *v28;
  unsigned int v29;
  mlx::core *v30;
  unsigned int v31;
  _QWORD *v32;
  std::logic_error *exception;
  int **v34[2];
  int **v35[2];
  _QWORD v36[2];
  int **v37[2];
  std::string v38;
  int **v39;
  _QWORD v40[33];

  v40[32] = *MEMORY[0x24BDAC8D0];
  if (a1 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[linspace] number of samples, ", 30);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", must be non-negative.", 23);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v40, &v38);
    std::logic_error::logic_error(exception, &v38);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v12 = a1 - 1;
  if (a1 == 1)
  {
    v39 = a6;
    v13 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
    mlx::core::array::array<double>(v37, (double *)&v39, 1, v13);
    v14 = mlx::core::to_stream(a3, a4);
    mlx::core::astype(v37, a2, v14, v15 | 0x100000000, a5);
    v16 = v37;
  }
  else
  {
    v18 = (double)a1;
    v19 = mlx::core::to_stream(a3, a4);
    v21 = mlx::core::to_stream(v19, v20 | 0x100000000);
    mlx::core::arange(0x400000006, v21, v22 | 0x100000000, &v39, 0.0, v18, 1.0);
    v23 = mlx::core::TypeToDtype<float>::operator mlx::core::Dtype();
    v24 = (a7 - *(double *)&a6) / (double)v12;
    mlx::core::array::array<float>(v35, v23, v24);
    v25 = mlx::core::to_stream(a3, a4);
    mlx::core::multiply(&v39, v35, v25, v26 | 0x100000000, &v38);
    v27 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
    mlx::core::array::array<double>(v34, v27, *(double *)&a6);
    v28 = mlx::core::to_stream(a3, a4);
    mlx::core::add(&v38, v34, v28, v29 | 0x100000000, v36);
    v30 = mlx::core::to_stream(a3, a4);
    mlx::core::astype(v36, a2, v30, v31 | 0x100000000, a5);
    mlx::core::array::~array((mlx::core::array *)v36);
    mlx::core::array::~array((mlx::core::array *)v34);
    mlx::core::array::~array((mlx::core::array *)&v38);
    mlx::core::array::~array((mlx::core::array *)v35);
    v16 = &v39;
  }
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_24246F7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void mlx::core::astype(_QWORD *a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  void **v35;
  char v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  if ((_DWORD)a2 == *(_DWORD *)(*a1 + 56))
  {
    v9 = a1[1];
    *a5 = v8;
    a5[1] = v9;
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v33[0] = 0;
    v33[1] = 0;
    v34 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v33, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
    *(_OWORD *)__p = *(_OWORD *)v33;
    v32 = v34;
    v33[1] = 0;
    v34 = 0;
    v33[0] = 0;
    v12 = mlx::core::to_stream(a3, a4);
    LODWORD(a4) = v13;
    v14 = operator new(0x38uLL);
    v14[2] = 0;
    *v14 = &unk_25134E848;
    v14[1] = 0;
    v14[4] = v12;
    v14[3] = &unk_251350A90;
    *((_DWORD *)v14 + 10) = a4;
    *(_QWORD *)((char *)v14 + 44) = a2;
    *(_QWORD *)&v30 = v14 + 3;
    *((_QWORD *)&v30 + 1) = v14;
    v28 = 0;
    v29 = 0;
    v15 = a1[1];
    v37[0] = *a1;
    v16 = v37[0];
    v37[1] = v15;
    *a1 = 0;
    a1[1] = 0;
    v26 = 0uLL;
    v27 = 0;
    v35 = (void **)&v26;
    v36 = 0;
    v17 = operator new(0x10uLL);
    *(_QWORD *)&v26 = v17;
    v27 = v17 + 2;
    *v17 = v16;
    v17[1] = v15;
    if (v15)
    {
      v18 = (unint64_t *)(v15 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *((_QWORD *)&v26 + 1) = v17 + 2;
    mlx::core::array::array(a5, (__int128 *)__p, a2, &v30, &v26);
    v35 = (void **)&v26;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
    mlx::core::array::~array((mlx::core::array *)v37);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v33[0])
    {
      v33[1] = v33[0];
      operator delete(v33[0]);
    }
  }
}

void sub_24246FAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 88) = v23;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  mlx::core::array::~array((mlx::core::array *)(v24 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void mlx::core::add(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134F1F8;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251350430;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_24246FD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::multiply(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134F298;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251351D80;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242470060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::as_strided(const void ***a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _QWORD *v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p;
  void *v27;
  _DWORD *v28;
  __int128 v29;
  char *v30;
  mlx::core *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  uint64_t v39;
  void **v40;
  char v41;
  const void **v42[3];

  v42[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  v39 = a4;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v37, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v13 = (uint64_t)(*a1)[7];
  *(_OWORD *)v35 = *(_OWORD *)v37;
  v36 = v38;
  v37[1] = 0;
  v38 = 0;
  v37[0] = 0;
  v31 = mlx::core::to_stream(a5, a6);
  v32 = v14;
  std::allocate_shared[abi:ne180100]<mlx::core::AsStrided,std::allocator<mlx::core::AsStrided>,mlx::core::Stream,std::vector<int>,std::vector<unsigned long>,unsigned long &,void>((uint64_t *)&v31, (__int128 *)a2, a3, &v39, &v33);
  v34 = v33;
  v33 = 0uLL;
  v15 = operator new(4uLL);
  __p = v15;
  *v15 = -1;
  v27 = v15 + 1;
  v28 = v15 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a5, a6, v42);
  v29 = 0uLL;
  v30 = 0;
  v40 = (void **)&v29;
  v41 = 0;
  v16 = operator new(0x10uLL);
  *(_QWORD *)&v29 = v16;
  *((_QWORD *)&v29 + 1) = v16;
  v30 = (char *)(v16 + 2);
  v17 = v42[1];
  *v16 = v42[0];
  v16[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v29 + 1) = v16 + 2;
  mlx::core::array::array(a7, (__int128 *)v35, v13, &v34, &v29);
  v40 = (void **)&v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v40);
  mlx::core::array::~array((mlx::core::array *)v42);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
}

void sub_242470344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 104) = v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 104));
  mlx::core::array::~array((mlx::core::array *)(v28 - 88));
  if (__p)
    operator delete(__p);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void mlx::core::reshape(const void ***a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  const void **v10;
  _BYTE *v11;
  size_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t quot;
  int v22;
  __int128 v23;
  const void **v24;
  const void **v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  const void **v38;
  unint64_t *v39;
  unint64_t v40;
  std::logic_error *exception;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  std::logic_error *v45;
  __int128 v46;
  _QWORD *v47;
  __int128 v48;
  void *__p[2];
  uint64_t v50;
  std::string v51;
  void **v52;
  int v53[64];
  _QWORD v54[3];

  v54[2] = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = **a1;
  v12 = (_BYTE *)v10[1] - v11;
  v13 = *(int **)a2;
  v14 = *(int **)(a2 + 8);
  v15 = (uint64_t)v14 - *(_QWORD *)a2;
  if (v12 == v15 && !memcmp(v11, *(const void **)a2, v12))
  {
    v38 = a1[1];
    *a5 = v10;
    a5[1] = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 1);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    return;
  }
  if (v14 == v13)
  {
    v19 = 1;
    goto LABEL_18;
  }
  v16 = 0;
  v17 = v15 >> 2;
  if ((unint64_t)(v15 >> 2) <= 1)
    v17 = 1;
  v18 = -1;
  v19 = 1;
  do
  {
    v20 = v13[v16];
    if ((_DWORD)v20 == -1)
    {
      if ((v18 & 0x80000000) == 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "[reshape] Reshape can only infer one dimension.");
        goto LABEL_42;
      }
      v18 = v16;
    }
    else
    {
      v19 *= v20;
    }
    ++v16;
  }
  while (v17 != v16);
  if (!v19)
  {
    if ((v18 & 0x80000000) != 0)
    {
      v19 = 0;
      goto LABEL_18;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[reshape] Cannot infer the shape of an empty array");
LABEL_42:
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if ((v18 & 0x80000000) == 0)
  {
    quot = ldiv((uint64_t)v10[6], v19).quot;
    v13[v18] = quot;
    v19 *= quot;
  }
LABEL_18:
  if (v10[6] != (const void *)v19)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"[reshape] Cannot reshape array of size ", 39);
    v42 = (_QWORD *)std::ostream::operator<<();
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" into shape ", 12);
    v44 = mlx::core::operator<<(v43, (_QWORD *)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)".", 1);
    v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v53, &v51);
    std::logic_error::logic_error(v45, &v51);
    v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v45, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v52 = (void **)mlx::core::to_stream(a3, a4);
  v53[0] = v22;
  std::allocate_shared[abi:ne180100]<mlx::core::Reshape,std::allocator<mlx::core::Reshape>,mlx::core::Stream,std::vector<int> &,void>((uint64_t *)&v52, a2, &v51);
  v23 = *(_OWORD *)a2;
  v50 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = *a1;
  v24 = a1[1];
  v26 = (uint64_t)v25[7];
  v48 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
  *(_OWORD *)__p = v23;
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
  v54[0] = v25;
  v54[1] = v24;
  if (v24)
  {
    v27 = (unint64_t *)(v24 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v46 = 0uLL;
  v47 = 0;
  v52 = (void **)&v46;
  LOBYTE(v53[0]) = 0;
  v29 = operator new(0x10uLL);
  *(_QWORD *)&v46 = v29;
  v47 = v29 + 2;
  *v29 = v25;
  v29[1] = v24;
  if (v24)
  {
    v30 = (unint64_t *)(v24 + 1);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *((_QWORD *)&v46 + 1) = v29 + 2;
  mlx::core::array::array(a5, (__int128 *)__p, v26, &v48, &v46);
  v52 = (void **)&v46;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v52);
  mlx::core::array::~array((mlx::core::array *)v54);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  size = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
  if (v51.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_242470784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  int v27;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void mlx::core::copy(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  void *__p[2];
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  void **v33;
  char v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v31[1] = 0;
  v32 = 0;
  v31[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v31, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  *(_OWORD *)__p = *(_OWORD *)v31;
  v30 = v32;
  v31[1] = 0;
  v32 = 0;
  v31[0] = 0;
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134E8E8;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_251350E48;
  *(_QWORD *)&v28 = v12 + 3;
  *((_QWORD *)&v28 + 1) = v12;
  v26 = 0;
  v27 = 0;
  v13 = a1[1];
  v35[0] = *a1;
  v14 = v35[0];
  v35[1] = v13;
  *a1 = 0;
  a1[1] = 0;
  v24 = 0uLL;
  v25 = 0;
  v33 = (void **)&v24;
  v34 = 0;
  v15 = operator new(0x10uLL);
  *(_QWORD *)&v24 = v15;
  v25 = v15 + 2;
  *v15 = v14;
  v15[1] = v13;
  if (v13)
  {
    v16 = (unint64_t *)(v13 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_QWORD *)&v24 + 1) = v15 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v28, &v24);
  v33 = (void **)&v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
  mlx::core::array::~array((mlx::core::array *)v35);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
}

void sub_242470A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 88) = v23;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  mlx::core::array::~array((mlx::core::array *)(v24 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void mlx::core::full(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  mlx::core *v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  const void **v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::logic_error *exception;
  __int128 v30;
  const void **v31[2];
  __int128 v32;
  char *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  void *__p[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void **v41;
  char v42;
  const void **v43[3];

  v43[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  v12 = *(_DWORD **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v13)
  {
    v14 = *(_DWORD **)a1;
    do
    {
      if ((*v14 & 0x80000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "[full] Negative dimensions not allowed.");
        __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      ++v14;
    }
    while (v14 != (_DWORD *)v13);
  }
  v39[0] = 0;
  v39[1] = 0;
  v40 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v39, v12, v13, (v13 - (uint64_t)v12) >> 2);
  *(_OWORD *)__p = *(_OWORD *)v39;
  v38 = v40;
  v39[1] = 0;
  v40 = 0;
  v39[0] = 0;
  v15 = mlx::core::to_stream(a4, a5);
  v17 = v16;
  v18 = operator new(0x30uLL);
  v18[2] = 0;
  *v18 = &unk_25134E938;
  v18[1] = 0;
  v18[4] = v15;
  *((_DWORD *)v18 + 10) = v17;
  v18[3] = &unk_251351610;
  *(_QWORD *)&v36 = v18 + 3;
  *((_QWORD *)&v36 + 1) = v18;
  v34 = 0;
  v35 = 0;
  v30 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  mlx::core::astype(&v30, a3, a4, a5, v31);
  mlx::core::broadcast_to(v31, (const void **)a1, a4, a5, v43);
  v32 = 0uLL;
  v33 = 0;
  v41 = (void **)&v32;
  v42 = 0;
  v19 = operator new(0x10uLL);
  *(_QWORD *)&v32 = v19;
  *((_QWORD *)&v32 + 1) = v19;
  v33 = (char *)(v19 + 2);
  v20 = v43[1];
  *v19 = v43[0];
  v19[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 1);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)&v32 + 1) = v19 + 2;
  mlx::core::array::array(a6, (__int128 *)__p, a3, &v36, &v32);
  v41 = (void **)&v32;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v41);
  mlx::core::array::~array((mlx::core::array *)v43);
  mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::array::~array((mlx::core::array *)&v30);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
}

void sub_242470D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 120) = v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 120));
  mlx::core::array::~array((mlx::core::array *)(v28 - 104));
  mlx::core::array::~array((mlx::core::array *)&a13);
  mlx::core::array::~array((mlx::core::array *)&a10);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void mlx::core::broadcast_to(const void ***a1@<X0>, const void **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  const void **v10;
  _BYTE *v11;
  size_t v12;
  _BYTE *v13;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  uint64_t v17;
  int v18;
  const void **v19;
  const void **v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  const void **v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::logic_error *exception;
  __int128 v40;
  _QWORD *v41;
  mlx::core *v42;
  int v43;
  __int128 v44;
  void *__p[3];
  std::string v46;
  void **v47;
  char v48[256];
  std::vector<int> v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = **a1;
  v12 = (_BYTE *)v10[1] - v11;
  v13 = *a2;
  if (v12 == (_BYTE *)a2[1] - v13 && !memcmp(v11, v13, v12))
  {
    v32 = a1[1];
    *a5 = v10;
    a5[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 1);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
  }
  else
  {
    mlx::core::broadcast_shapes(v10, a2, &v49);
    begin = v49.__begin_;
    end = v49.__end_;
    if ((char *)v49.__end_ - (char *)v49.__begin_ != (_BYTE *)a2[1] - (_BYTE *)*a2
      || memcmp(v49.__begin_, *a2, (char *)v49.__end_ - (char *)v49.__begin_))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Cannot broadcast array of shape ", 32);
      v36 = mlx::core::operator<<(v35, *a1);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" into shape ", 12);
      v38 = mlx::core::operator<<(v37, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)".", 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v48, &v46);
      std::logic_error::logic_error(exception, &v46);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    __p[0] = begin;
    __p[1] = end;
    __p[2] = v49.__end_cap_.__value_;
    memset(&v49, 0, sizeof(v49));
    v17 = (uint64_t)(*a1)[7];
    v42 = mlx::core::to_stream(a3, a4);
    v43 = v18;
    std::allocate_shared[abi:ne180100]<mlx::core::Broadcast,std::allocator<mlx::core::Broadcast>,mlx::core::Stream,std::vector<int> const&,void>((uint64_t *)&v42, (uint64_t)a2, &v46);
    v44 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
    v20 = *a1;
    v19 = a1[1];
    v50[0] = *a1;
    v50[1] = v19;
    if (v19)
    {
      v21 = (unint64_t *)(v19 + 1);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v40 = 0uLL;
    v41 = 0;
    v47 = (void **)&v40;
    v48[0] = 0;
    v23 = operator new(0x10uLL);
    *(_QWORD *)&v40 = v23;
    v41 = v23 + 2;
    *v23 = v20;
    v23[1] = v19;
    if (v19)
    {
      v24 = (unint64_t *)(v19 + 1);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    *((_QWORD *)&v40 + 1) = v23 + 2;
    mlx::core::array::array(a5, (__int128 *)__p, v17, &v44, &v40);
    v47 = (void **)&v40;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v47);
    mlx::core::array::~array((mlx::core::array *)v50);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    size = (std::__shared_weak_count *)v46.__r_.__value_.__l.__size_;
    if (v46.__r_.__value_.__l.__size_)
    {
      v30 = (unint64_t *)(v46.__r_.__value_.__l.__size_ + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v49.__begin_)
    {
      v49.__end_ = v49.__begin_;
      operator delete(v49.__begin_);
    }
  }
}

void sub_242471124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  void *v31;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      v31 = *(void **)(v29 - 112);
      if (v31)
      {
        *(_QWORD *)(v29 - 104) = v31;
        operator delete(v31);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void mlx::core::full(__int128 *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  __int128 v7;
  mlx::core *v8;
  unsigned int v9;
  __int128 v10;
  void *__p[2];
  uint64_t v12;

  v6 = *(_QWORD *)(*a2 + 56);
  v7 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v10 = *(_OWORD *)a2;
  *(_OWORD *)__p = v7;
  *a2 = 0;
  a2[1] = 0;
  v8 = mlx::core::to_stream(a3, a4);
  mlx::core::full((uint64_t)__p, &v10, v6, v8, v9 | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)&v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247126C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::zeros(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  mlx::core *v9;
  unsigned int v10;
  int **v11[2];
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  mlx::core::array::array<int>(v11, 0, a2);
  v9 = mlx::core::to_stream(a3, a4);
  mlx::core::full((__int128 *)__p, v11, v9, v10 | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242471334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::zeros_like(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  mlx::core *v7;
  unsigned int v8;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 56);
  v7 = mlx::core::to_stream(a2, a3);
  mlx::core::zeros(v5, v6, v7, v8 | 0x100000000, a4);
}

void mlx::core::ones(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  mlx::core *v9;
  unsigned int v10;
  int **v11[2];
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  mlx::core::array::array<int>(v11, 1, a2);
  v9 = mlx::core::to_stream(a3, a4);
  mlx::core::full((__int128 *)__p, v11, v9, v10 | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242471454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::ones_like(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  mlx::core *v7;
  unsigned int v8;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 56);
  v7 = mlx::core::to_stream(a2, a3);
  mlx::core::ones(v5, v6, v7, v8 | 0x100000000, a4);
}

void mlx::core::eye(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  char *v14;
  char **v15;
  int v16;
  mlx::core *v17;
  unsigned int v18;
  mlx::core *v19;
  unsigned int v20;
  char *v21;
  _QWORD *v22;
  std::logic_error *exception;
  void *__p;
  void *v25;
  _QWORD *v26;
  _QWORD v27[2];
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int v32;
  int v33;

  v32 = a2;
  v33 = a1;
  if (a1 < 1 || (int)a2 <= 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[eye] N and M must be positive integers.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v14 = (char *)operator new(8uLL);
  *(_QWORD *)v14 = a1 | (unint64_t)(a2 << 32);
  v29 = v14 + 8;
  v30 = v14 + 8;
  v28 = v14;
  mlx::core::zeros((uint64_t)&v28, a4, a5, a6, &v31);
  operator delete(v14);
  if ((int)a2 <= a3 || -a3 >= a1)
  {
    *(_OWORD *)a7 = v31;
    v31 = 0uLL;
  }
  else
  {
    if (a3 < 0)
    {
      LODWORD(v28) = a3 + a1;
      v15 = &v28;
      if (a3 + a1 > (int)a2)
        v15 = (char **)&v32;
    }
    else
    {
      LODWORD(v28) = a2 - a3;
      v15 = (char **)&v33;
      if ((int)a2 - a3 < a1)
        v15 = &v28;
    }
    v16 = *(_DWORD *)v15;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v17 = mlx::core::to_stream(a5, a6);
    mlx::core::arange(0x400000004, v17, v18 | 0x100000000, (int ***)&__p, (double)(-a3 & ~(-a3 >> 31)), (double)(v16 + (-a3 & ~(-a3 >> 31))), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v28, (uint64_t)&__p);
    mlx::core::array::~array((mlx::core::array *)&__p);
    v19 = mlx::core::to_stream(a5, a6);
    mlx::core::arange(0x400000004, v19, v20 | 0x100000000, (int ***)&__p, (double)(a3 & ~(a3 >> 31)), (double)(v16 + (a3 & ~(a3 >> 31))), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v28, (uint64_t)&__p);
    mlx::core::array::~array((mlx::core::array *)&__p);
    v21 = (char *)operator new(0xCuLL);
    v25 = v21 + 12;
    v26 = v21 + 12;
    *(_DWORD *)v21 = v16;
    *(_QWORD *)(v21 + 4) = 0x100000001;
    __p = v21;
    mlx::core::ones((uint64_t)&__p, a4, a5, a6, v27);
    operator delete(v21);
    v22 = operator new(8uLL);
    __p = v22;
    *v22 = 0x100000000;
    v25 = v22 + 1;
    v26 = v22 + 1;
    mlx::core::scatter((mlx::core::array *)&v31, (const void ****)&v28, (mlx::core::array *)v27, (int **)&__p, 4, a5, a6, a7);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    mlx::core::array::~array((mlx::core::array *)v27);
    __p = &v28;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  mlx::core::array::~array((mlx::core::array *)&v31);
}

void sub_242471760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a12);
  __p = &a14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a17);
  _Unwind_Resume(a1);
}

void mlx::core::scatter(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  mlx::core::scatter(a1, a2, a3, a4, 4, a5, a6, a7);
}

void mlx::core::identity(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  mlx::core::eye(a1, a1, 0, a2, a3, a4, a5);
}

void mlx::core::flatten(const void ***a1@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  const void **v16;
  unint64_t *v17;
  unint64_t v18;
  int *v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer end;
  int *v22;
  std::vector<int>::pointer begin;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  int *v29;
  int *v30;
  int v31;
  char *v32;
  std::logic_error *exception;
  void *v34;
  void *v35;
  uint64_t v36;
  std::vector<int> __p;
  int *v38;
  int *v39;
  _DWORD *v40;

  v11 = **a1;
  v12 = (*a1)[1];
  v13 = (unint64_t)(v12 - v11) >> 2;
  if ((int)((v13 & (a3 >> 31)) + a3) >= (int)v13 - 1)
    v14 = v13 - 1;
  else
    v14 = (v13 & (a3 >> 31)) + a3;
  if (v12 == v11)
  {
    v19 = (int *)operator new(4uLL);
    v38 = v19;
    *v19 = 1;
    v39 = v19 + 1;
    v40 = v19 + 1;
    mlx::core::reshape(a1, (uint64_t)&v38, a4, a5, (const void ***)a6);
    v20 = v38;
    if (!v38)
      return;
    v39 = v38;
    goto LABEL_33;
  }
  v15 = ((v13 & (a2 >> 31)) + a2) & ~((int)((v13 & (a2 >> 31)) + a2) >> 31);
  if (v14 < (int)v15)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[flatten] start_axis must be less than or equal to end_axis");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if ((_DWORD)v15 == v14)
  {
    v16 = a1[1];
    *(_QWORD *)a6 = *a1;
    *(_QWORD *)(a6 + 8) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 1);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    return;
  }
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v11, (uint64_t)&v11[4 * v15], v15);
  end = __p.__end_;
  if (__p.__end_ >= __p.__end_cap_.__value_)
  {
    begin = __p.__begin_;
    v24 = __p.__end_ - __p.__begin_;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v26 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v25)
      v25 = v26 >> 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v27);
      begin = __p.__begin_;
      end = __p.__end_;
    }
    else
    {
      v28 = 0;
    }
    v29 = (int *)&v28[4 * v24];
    v30 = (int *)&v28[4 * v27];
    *v29 = -1;
    v22 = v29 + 1;
    while (end != begin)
    {
      v31 = *--end;
      *--v29 = v31;
    }
    __p.__begin_ = v29;
    __p.__end_ = v22;
    __p.__end_cap_.__value_ = v30;
    if (begin)
      operator delete(begin);
  }
  else
  {
    *__p.__end_ = -1;
    v22 = end + 1;
  }
  __p.__end_ = v22;
  v32 = (char *)**a1 + 4 * v14 + 4;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (uint64_t)v22, v32, (char *)(*a1)[1], ((_BYTE *)(*a1)[1] - v32) >> 2);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, __p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
  mlx::core::reshape(a1, (uint64_t)&v34, a4, a5, (const void ***)a6);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v20 = __p.__begin_;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
LABEL_33:
    operator delete(v20);
  }
}

void sub_242471A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::flatten(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core::flatten(a1, 0, ((unint64_t)((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2) - 1, a2, a3, a4);
}

void mlx::core::squeeze(mlx::core::array *this@<X0>, unsigned int **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  mlx::core *v17;
  uint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  std::string::size_type size;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  const void *v33;
  _QWORD *v34;
  _QWORD *v35;
  std::logic_error *exception;
  _QWORD *v37;
  _QWORD *v38;
  std::logic_error *v39;
  std::logic_error *v40;
  const void ***v41;
  void *v42;
  void *v43;
  uint64_t v44;
  std::string __p;
  void *v46;
  _QWORD v47[32];
  int v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;

  v50 = 0;
  v51 = 0;
  v49 = (uint64_t *)&v50;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
    v13 = 0;
    v14 = *a2;
  }
  else
  {
    do
    {
      v12 = *v9;
      if ((v12 & 0x80000000) != 0)
        v12 += (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
      v48 = v12;
      if ((v12 & 0x80000000) != 0
        || v12 >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[squeeze] Invalid axes ", 23);
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for array with ", 16);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &__p);
        std::logic_error::logic_error(exception, &__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      if (mlx::core::array::shape(this, v12) != 1)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[squeeze] Cannot squeeze axis ", 30);
        v37 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" with size ", 11);
        mlx::core::array::shape(this, v48);
        v38 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" which is not equal to 1.", 25);
        v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &__p);
        std::logic_error::logic_error(v39, &__p);
        v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v39, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      std::__tree<int>::__emplace_unique_key_args<int,int>(&v49, &v48, &v48);
      ++v9;
    }
    while (v9 != v10);
    v13 = v51;
    v9 = *a2;
    v14 = a2[1];
  }
  if (v13 != v14 - v9)
  {
    v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v40, "[squeeze] Received duplicate axes.");
    v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v40, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v46, v49, &v50);
  memset(&__p, 0, sizeof(__p));
  v15 = *(uint64_t **)this;
  v16 = **(_QWORD **)this;
  if (*(_QWORD *)(*(_QWORD *)this + 8) == v16)
  {
    v19 = 0;
    v33 = 0;
  }
  else
  {
    v41 = a5;
    v17 = a3;
    v18 = a4;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      if (v21 < (unint64_t)((uint64_t)(v47[0] - (_QWORD)v46) >> 2) && v20 == *((_DWORD *)v46 + v21))
      {
        ++v21;
      }
      else
      {
        v22 = mlx::core::array::shape(this, v20);
        v23 = v22;
        size = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v25 = (void *)__p.__r_.__value_.__r.__words[0];
          v26 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v28 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v29);
            size = __p.__r_.__value_.__l.__size_;
            v25 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = v23;
          v19 = (std::string::size_type)(v31 + 4);
          while ((void *)size != v25)
          {
            v32 = *(_DWORD *)(size - 4);
            size -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
          __p.__r_.__value_.__l.__size_ = v19;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v22;
          v19 = size + 4;
        }
        __p.__r_.__value_.__l.__size_ = v19;
        v15 = *(uint64_t **)this;
        v16 = **(_QWORD **)this;
      }
      ++v20;
    }
    while (v20 < (v15[1] - v16) >> 2);
    v33 = (const void *)__p.__r_.__value_.__r.__words[0];
    a4 = v18;
    a3 = v17;
    a5 = v41;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, v33, v19, (uint64_t)(v19 - (_QWORD)v33) >> 2);
  mlx::core::reshape((const void ***)this, (uint64_t)&v42, a3, a4, a5);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v46)
  {
    v47[0] = v46;
    operator delete(v46);
  }
  std::__tree<int>::destroy((uint64_t)&v49, v50);
}

void sub_242471F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;
  int v21;
  uint64_t v22;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      std::__tree<int>::destroy(v22 - 120, *(_QWORD **)(v22 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::squeeze(mlx::core::array *this@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, const void ***a4@<X8>)
{
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  void *__p;
  char *v20;
  char *v21;

  v20 = 0;
  v21 = 0;
  __p = 0;
  if (*(_QWORD *)(*(_QWORD *)this + 8) != **(_QWORD **)this)
  {
    v8 = 0;
    do
    {
      if (mlx::core::array::shape(this, v8) == 1)
      {
        v9 = v20;
        if (v20 >= v21)
        {
          v11 = (char *)__p;
          v12 = (v20 - (_BYTE *)__p) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v14 = v21 - (_BYTE *)__p;
          if ((v21 - (_BYTE *)__p) >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v21, v15);
            v11 = (char *)__p;
            v9 = v20;
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * v12];
          *(_DWORD *)v17 = v8;
          v10 = v17 + 4;
          while (v9 != v11)
          {
            v18 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          __p = v17;
          v20 = v10;
          v21 = &v16[4 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_DWORD *)v20 = v8;
          v10 = v9 + 4;
        }
        v20 = v10;
      }
      ++v8;
    }
    while (v8 < (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2);
  }
  mlx::core::squeeze(this, (unsigned int **)&__p, a2, a3, a4);
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2424721E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::expand_dims(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  const void *v9;
  uint64_t v10;
  int v11;
  int v12;
  std::vector<int>::const_iterator v14;
  _QWORD *v15;
  _QWORD *v16;
  std::logic_error *exception;
  std::vector<int> __p;
  std::string __x;
  std::vector<int> v20;

  v9 = **a1;
  v10 = (uint64_t)(*a1)[1];
  v11 = ((unint64_t)(v10 - (_QWORD)v9) >> 2) + 1;
  v12 = (v11 & (a2 >> 31)) + a2;
  if (v12 < 0 || v12 >= v11)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"[expand_dims] Invalid axis ", 27);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" for output array with ", 23);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v20.__end_, &__x);
    std::logic_error::logic_error(exception, &__x);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, v9, v10, (v10 - (uint64_t)v9) >> 2);
  v14.__i_ = &v20.__begin_[v12];
  LODWORD(__x.__r_.__value_.__l.__data_) = 1;
  std::vector<int>::insert(&v20, v14, (std::vector<int>::value_type *)&__x);
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, a5);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
}

void sub_2424723AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19)
{
  void *v19;
  int v20;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void mlx::core::expand_dims(const void ***a1@<X0>, int **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  int *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int *v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  const void **v20;
  std::string::size_type v21;
  unint64_t v22;
  std::vector<int>::const_iterator v23;
  _QWORD *v24;
  _QWORD *v25;
  std::logic_error *v26;
  std::logic_error *exception;
  std::logic_error *v28;
  std::vector<int> __p;
  std::vector<int>::value_type __x;
  std::vector<int> v31;
  std::string v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;

  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>((uint64_t)&v33, *a2, a2[1]);
  if (v35 != a2[1] - *a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[expand_dims] Received duplicate axes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::__tree<int>::destroy((uint64_t)&v33, v34);
  v10 = *a2;
  v11 = (uint64_t)a2[1];
  v12 = (v11 - (uint64_t)*a2) >> 2;
  v14 = **a1;
  v13 = (*a1)[1];
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, v10, v11, v12);
  v15 = v36;
  v16 = v37;
  if (v36 != v37)
  {
    v17 = ((unint64_t)(v13 - v14) >> 2) + v12;
    v18 = v36;
    do
    {
      v19 = (v17 & (*v18 >> 31)) + *v18;
      *v18 = v19;
      if (v19 < 0 || v19 >= v17)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"[expand_dims] Invalid axis ", 27);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" for output array with ", 23);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" dimensions.", 12);
        v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v34, &v32);
        std::logic_error::logic_error(v26, &v32);
        v26->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v26, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      ++v18;
    }
    while (v18 != v16);
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int *>>((uint64_t)&v33, v15, v16);
  if (v35 != a2[1] - *a2)
  {
    v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "[expand_dims] Received duplicate axes.");
    v28->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v28, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v32, v33, &v34);
  v20 = *a1;
  memset(&v31, 0, sizeof(v31));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *v20, (uint64_t)v20[1], ((_BYTE *)v20[1] - (_BYTE *)*v20) >> 2);
  v21 = v32.__r_.__value_.__r.__words[0];
  if (v32.__r_.__value_.__l.__size_ != v32.__r_.__value_.__r.__words[0])
  {
    v22 = 0;
    do
    {
      v23.__i_ = &v31.__begin_[*(int *)(v21 + 4 * v22)];
      __x = 1;
      std::vector<int>::insert(&v31, v23, &__x);
      ++v22;
      v21 = v32.__r_.__value_.__r.__words[0];
    }
    while (v22 < (uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 2);
  }
  __p = v31;
  memset(&v31, 0, sizeof(v31));
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, a5);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
  if (v32.__r_.__value_.__r.__words[0])
  {
    v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::__tree<int>::destroy((uint64_t)&v33, v34);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_24247276C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  void *v23;
  int v24;
  uint64_t v25;
  void *v27;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      v27 = *(void **)(v25 - 104);
      if (v27)
      {
        *(_QWORD *)(v25 - 96) = v27;
        operator delete(v27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void mlx::core::slice(const void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  uint64_t v9;
  const void **v10;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  const void **v23;
  const void **v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const void **v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::logic_error *exception;
  const void ***v42;
  __int128 v43;
  _QWORD *v44;
  mlx::core *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  void *__p[3];
  std::string v50;
  uint64_t v51;
  void *__s1;
  _BYTE *v53;
  _QWORD v54[4];

  v54[2] = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v10 = *a1;
  if (v9 != ((_BYTE *)v10[1] - (_BYTE *)*v10) >> 2
    || v9 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2
    || v9 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v51);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"[slice] Invalid number of indices or strides for ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"array with dimension ", 21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__s1, &v50);
    std::logic_error::logic_error(exception, &v50);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v42 = a7;
  v16 = __s1;
  if ((_BYTE)v51)
  {
    v17 = (uint64_t)v53;
    v18 = v53 - (_BYTE *)__s1;
LABEL_8:
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v16, v17, v18 >> 2);
    v21 = (uint64_t)(*a1)[7];
    v45 = mlx::core::to_stream(a5, a6);
    v46 = v22;
    std::allocate_shared[abi:ne180100]<mlx::core::Slice,std::allocator<mlx::core::Slice>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>((uint64_t)&v45, a2, a3, a4, &v47);
    v48 = v47;
    v47 = 0uLL;
    v24 = *a1;
    v23 = a1[1];
    v54[0] = v24;
    v54[1] = v23;
    if (v23)
    {
      v25 = (unint64_t *)(v23 + 1);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v43 = 0uLL;
    v44 = 0;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    v50.__r_.__value_.__s.__data_[8] = 0;
    v27 = operator new(0x10uLL);
    *(_QWORD *)&v43 = v27;
    v44 = v27 + 2;
    *v27 = v24;
    v27[1] = v23;
    if (v23)
    {
      v28 = (unint64_t *)(v23 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    *((_QWORD *)&v43 + 1) = v27 + 2;
    mlx::core::array::array(v42, (__int128 *)__p, v21, &v48, &v43);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    mlx::core::array::~array((mlx::core::array *)v54);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_26;
  }
  v19 = *a1;
  v17 = (uint64_t)v53;
  v18 = v53 - (_BYTE *)__s1;
  v20 = **a1;
  if (v53 - (_BYTE *)__s1 != (_BYTE *)(*a1)[1] - v20 || memcmp(__s1, v20, v53 - (_BYTE *)__s1))
    goto LABEL_8;
  v36 = a1[1];
  *v42 = v19;
  v42[1] = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 1);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
LABEL_26:
  if (__s1)
  {
    v53 = __s1;
    operator delete(__s1);
  }
}

void sub_242472BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31)
{
  void *v31;
  int v32;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

void mlx::core::`anonymous namespace'::normalize_slice(int **a1@<X0>, int **a2@<X1>, int **a3@<X2>, _DWORD **a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int *v15;
  _DWORD *v16;
  std::vector<int>::pointer begin;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  std::vector<int> v26;

  std::vector<int>::vector(&v26, a1[1] - *a1);
  v10 = *a1;
  v11 = 0;
  v12 = (char *)a1[1] - (char *)*a1;
  if (v12)
  {
    v13 = v12 >> 2;
    v14 = *a2;
    v15 = *a3;
    v16 = *a4;
    begin = v26.__begin_;
    if (v13 <= 1)
      v13 = 1;
    do
    {
      v19 = *v10++;
      v18 = v19;
      v20 = (v19 & (*v14 >> 31)) + *v14;
      v21 = (v19 & (*v15 >> 31)) + *v15;
      if ((*v16 & 0x80000000) != 0)
      {
        v24 = v18 - 1;
        if (v18 - 1 >= v20)
          v24 = v20;
        if (v21 < 0)
          v25 = -1;
        else
          v25 = v21;
        *v14 = v24;
        if (v25 < v24)
          v24 = v25;
        *v15 = v24;
        v23 = (*v14 + ~(*v16 + v24)) / -*v16;
        v11 = 1;
      }
      else
      {
        if (v18 < v20)
          v20 = v18;
        v22 = v20 & ~(v20 >> 31);
        if (v18 >= v21)
          v18 = v21;
        *v14 = v22;
        if (v18 <= v22)
          v18 = v22;
        *v15 = v18;
        v23 = (v18 + ~*v14 + *v16) / *v16;
      }
      *begin++ = v23;
      ++v16;
      ++v15;
      ++v14;
      --v13;
    }
    while (v13);
  }
  *(_BYTE *)a5 = v11;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a5 + 8), v26.__begin_, (uint64_t)v26.__end_, v26.__end_ - v26.__begin_);
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
}

void sub_242472E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::slice(const void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  std::vector<int>::size_type v11;
  mlx::core *v12;
  unsigned int v13;
  std::vector<int>::value_type __x;
  std::vector<int> v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  __p = 0;
  v17 = 0;
  v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v11 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  __x = 1;
  std::vector<int>::vector(&v15, v11, &__x);
  v12 = mlx::core::to_stream(a4, a5);
  mlx::core::slice(a1, (uint64_t)&v19, (uint64_t)&__p, (uint64_t)&v15, v12, v13 | 0x100000000, a6);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_242472F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void mlx::core::slice_update(_QWORD *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  int v20;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::string::size_type *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t i;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  std::logic_error *exception;
  __int128 v45;
  _QWORD *v46;
  mlx::core *v47;
  int v48;
  __int128 v49;
  __int128 v50;
  void *__p[3];
  _QWORD v52[2];
  const void **v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _BYTE *v57;
  void **v58;
  char v59;
  std::string v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
  v11 = *a1;
  if (v10 != (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2
    || v10 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2
    || v10 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v55);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"[slice] Invalid number of indices or strides for ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"array with dimension ", 21);
    v43 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v56, &v60);
    std::logic_error::logic_error(exception, &v60);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::broadcast_to(a2, (const void **)&v56, a6, a7, &v53);
  v18 = *a1;
  if (!(_BYTE)v55
    && v57 - (_BYTE *)v56 == *(_QWORD *)(v18 + 8) - *(_QWORD *)v18
    && !memcmp(v56, *(const void **)v18, v57 - (_BYTE *)v56))
  {
    v52[0] = v53;
    v52[1] = v54;
    if (v54)
    {
      v40 = (unint64_t *)(v54 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v18 = *a1;
    }
    mlx::core::astype(v52, *(_QWORD *)(v18 + 56), a6, a7, a8);
    mlx::core::array::~array((mlx::core::array *)v52);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 2);
    v19 = *(_QWORD *)(*a1 + 56);
    v47 = mlx::core::to_stream(a6, a7);
    v48 = v20;
    std::allocate_shared[abi:ne180100]<mlx::core::SliceUpdate,std::allocator<mlx::core::SliceUpdate>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>((uint64_t)&v47, a3, a4, a5, &v49);
    v50 = v49;
    v49 = 0uLL;
    v21 = a1[1];
    v60.__r_.__value_.__r.__words[0] = *a1;
    v60.__r_.__value_.__l.__size_ = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v60.__r_.__value_.__r.__words[2] = (std::string::size_type)v53;
    v61 = v54;
    if (v54)
    {
      v24 = (unint64_t *)(v54 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v45 = 0uLL;
    v46 = 0;
    v58 = (void **)&v45;
    v59 = 0;
    v26 = operator new(0x20uLL);
    v27 = 0;
    *(_QWORD *)&v45 = v26;
    *((_QWORD *)&v45 + 1) = v26;
    v46 = v26 + 4;
    do
    {
      v28 = (std::string::size_type *)((char *)&v60 + 16 * v27);
      v30 = *v28;
      v29 = v28[1];
      *v26 = v30;
      v26[1] = v29;
      if (v29)
      {
        v31 = (unint64_t *)(v29 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      ++v27;
      v26 += 2;
    }
    while (v27 != 2);
    *((_QWORD *)&v45 + 1) = v26;
    mlx::core::array::array(a8, (__int128 *)__p, v19, &v50, &v45);
    v58 = (void **)&v45;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v58);
    for (i = 16; i != -16; i -= 16)
      mlx::core::array::~array((mlx::core::array *)((char *)&v60 + i));
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
    if (*((_QWORD *)&v49 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v53);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_242473380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,void *__p,uint64_t a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  if (*(char *)(v31 - 97) < 0)
  {
    operator delete(*(void **)(v31 - 120));
    if ((v30 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void mlx::core::slice_update(_QWORD *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  std::vector<int>::size_type v14;
  std::vector<int> __p;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  std::vector<int>::value_type __x;
  std::vector<int> v21;

  v14 = (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2;
  __x = 1;
  std::vector<int>::vector(&v21, v14, &__x);
  *(_OWORD *)v18 = *(_OWORD *)a3;
  v19 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)v16 = *(_OWORD *)a4;
  v17 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  __p = v21;
  memset(&v21, 0, sizeof(v21));
  mlx::core::slice_update(a1, a2, (uint64_t)v18, (uint64_t)v16, (uint64_t)&__p, a5, a6, a7);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_24247358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a17)
    operator delete(a17);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void mlx::core::split(int **this@<X0>, uint64_t a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  int *v8;
  uint64_t v9;
  unint64_t v10;
  char *v12;
  int *v13;
  char *v16;
  int v17;
  int v18;
  int *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int *v28;
  std::vector<int>::pointer begin;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  int v38;
  int *v39;
  int *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::vector<int>::size_type v52;
  int *v53;
  int *v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  mlx::core *v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  std::logic_error *exception;
  std::vector<int>::value_type __x[2];
  _QWORD *v68;
  _QWORD *v69;
  mlx::core *v70;
  int v71;
  __int128 v72;
  __int128 v73;
  std::vector<int>::pointer v74;
  __int128 v75;
  void *__p;
  _QWORD v77[32];
  unint64_t v78;
  std::vector<int>::value_type *v79;
  char v80;
  _QWORD v81[2];
  std::vector<int> v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v8 = *this;
  v9 = *((_QWORD *)*this + 1) - *(_QWORD *)*this;
  if (a3 >= 0)
    v10 = a3;
  else
    v10 = (v9 >> 2) + a3;
  v78 = v10;
  if (v10 >= v9 >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid axis (", 14);
    v62 = (_QWORD *)std::ostream::operator<<();
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)") passed to split", 17);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" for array with shape ", 22);
    v65 = mlx::core::operator<<(v64, *this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v77, &v82);
    std::logic_error::logic_error(exception, (const std::string *)&v82);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v13 = *(int **)a2;
  v12 = *(char **)(a2 + 8);
  if (*(char **)a2 != v12)
  {
    if ((unint64_t)(v12 - (char *)v13) <= 0x27)
    {
      v16 = (char *)(v13 + 1);
      while (v16 != v12)
      {
        v18 = *((_DWORD *)v16 - 1);
        v17 = *(_DWORD *)v16;
        v16 += 4;
        if (v17 < v18)
          goto LABEL_42;
      }
      if (*v13 >= 1)
      {
        v25 = *((_DWORD *)v12 - 1);
        v26 = mlx::core::array::shape((mlx::core::array *)this, v10);
        v8 = *this;
        if (v25 < v26)
        {
          v27 = ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) + 1;
          v82.__begin_ = (std::vector<int>::pointer)*((_QWORD *)v8 + 7);
          std::vector<mlx::core::Dtype>::vector(&__p, v27, &v82);
          std::vector<std::vector<int>>::vector(&v82, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) + 1, (uint64_t)*this);
          v28 = *(int **)a2;
          begin = v82.__begin_;
          *(_DWORD *)(*(_QWORD *)v82.__begin_ + 4 * v10) = **(_DWORD **)a2;
          v30 = *(_QWORD *)(a2 + 8) - (_QWORD)v28;
          if ((unint64_t)v30 >= 5)
          {
            v31 = v30 >> 2;
            if (v31 <= 2)
              v31 = 2;
            v32 = (uint64_t *)(begin + 6);
            v33 = v28 + 1;
            v34 = v31 - 1;
            do
            {
              v35 = *v32;
              v32 += 3;
              *(_DWORD *)(v35 + 4 * v10) = *v33 - *(v33 - 1);
              ++v33;
              --v34;
            }
            while (v34);
          }
          v36 = mlx::core::array::shape((mlx::core::array *)this, v10) - *(_DWORD *)(*(_QWORD *)(a2 + 8) - 4);
          v74 = v82.__begin_;
          v37 = *(_OWORD *)&v82.__end_;
          *(_DWORD *)(*((_QWORD *)v82.__end_ - 3) + 4 * v10) = v36;
          v75 = v37;
          memset(&v82, 0, sizeof(v82));
          v70 = mlx::core::to_stream(a4, a5);
          v71 = v38;
          std::allocate_shared[abi:ne180100]<mlx::core::Split,std::allocator<mlx::core::Split>,mlx::core::Stream,std::vector<int> const&,unsigned long &,void>((uint64_t *)&v70, a2, (uint64_t *)&v78, &v72);
          v73 = v72;
          v72 = 0uLL;
          v40 = *this;
          v39 = this[1];
          v81[0] = v40;
          v81[1] = v39;
          if (v39)
          {
            v41 = (unint64_t *)(v39 + 2);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          *(_QWORD *)__x = 0;
          v68 = 0;
          v69 = 0;
          v79 = __x;
          v80 = 0;
          v43 = operator new(0x10uLL);
          *(_QWORD *)__x = v43;
          v69 = v43 + 2;
          *v43 = v40;
          v43[1] = v39;
          if (v39)
          {
            v44 = (unint64_t *)(v39 + 2);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v68 = v43 + 2;
          mlx::core::array::make_arrays((uint64_t *)&v74, &__p, &v73, (_QWORD **)__x, a6);
          v79 = __x;
          std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
          mlx::core::array::~array((mlx::core::array *)v81);
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
          if (*((_QWORD *)&v73 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v49 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
          if (*((_QWORD *)&v72 + 1))
          {
            v50 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          *(_QWORD *)__x = &v74;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          *(_QWORD *)__x = &v82;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          goto LABEL_53;
        }
      }
    }
LABEL_42:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    __p = 0;
    v77[0] = 0;
    v77[1] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *((_QWORD *)v8 + 1), (uint64_t)(*((_QWORD *)v8 + 1) - *(_QWORD *)v8) >> 2);
    v52 = (uint64_t)(*((_QWORD *)*this + 1) - *(_QWORD *)*this) >> 2;
    __x[0] = 0;
    std::vector<int>::vector(&v82, v52, __x);
    v53 = *this;
    v68 = 0;
    v69 = 0;
    *(_QWORD *)__x = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)v53, *((_QWORD *)v53 + 1), (uint64_t)(*((_QWORD *)v53 + 1) - *(_QWORD *)v53) >> 2);
    v54 = *(int **)a2;
    v55 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (v55 == -4)
    {
      v56 = *(_QWORD **)__x;
      if (!*(_QWORD *)__x)
      {
LABEL_51:
        if (v82.__begin_)
        {
          v82.__end_ = v82.__begin_;
          operator delete(v82.__begin_);
        }
LABEL_53:
        if (__p)
        {
          v77[0] = __p;
          operator delete(__p);
        }
        return;
      }
    }
    else
    {
      v57 = 0;
      v58 = v55 >> 2;
      do
      {
        if (v58 <= v57)
          v59 = mlx::core::array::shape((mlx::core::array *)this, v10);
        else
          v59 = v54[v57];
        *(_DWORD *)(*(_QWORD *)__x + 4 * v10) = v59;
        v60 = mlx::core::to_stream(a4, a5);
        mlx::core::slice((const void ***)this, (uint64_t)&v82, (uint64_t)__x, v60, v61 | 0x100000000, (const void ***)&v79);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&v79);
        mlx::core::array::~array((mlx::core::array *)&v79);
        v56 = *(_QWORD **)__x;
        v82.__begin_[v10] = *(_DWORD *)(*(_QWORD *)__x + 4 * v10);
        ++v57;
        v54 = *(int **)a2;
        v58 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
      }
      while (v58 + 1 > v57);
    }
    v68 = v56;
    operator delete(v56);
    goto LABEL_51;
  }
  v19 = this[1];
  v82.__begin_ = v8;
  v82.__end_ = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 2);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  __p = a6;
  LOBYTE(v77[0]) = 0;
  v22 = operator new(0x10uLL);
  *a6 = (uint64_t)v22;
  a6[1] = (uint64_t)v22;
  a6[2] = (uint64_t)(v22 + 2);
  *v22 = v8;
  v22[1] = v19;
  if (v19)
  {
    v23 = (unint64_t *)(v19 + 2);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  a6[1] = (uint64_t)(v22 + 2);
  mlx::core::array::~array((mlx::core::array *)&v82);
}

void sub_242473B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  int v25;
  uint64_t v26;

  if (*(char *)(v26 - 89) < 0)
  {
    operator delete(*(void **)(v26 - 112));
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::split(int **a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  mlx::core::split(a1, a2, 0, a3, a4, a5);
}

void mlx::core::split(mlx::core::array *this@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  int v14;
  ldiv_t v15;
  std::vector<int>::pointer begin;
  unint64_t v17;
  int quot;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::logic_error *exception;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  std::logic_error *v29;
  std::string v30;
  std::vector<int> v31;

  v9 = *(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this;
  v10 = (v9 >> 2) + a3;
  if (a3 >= 0)
    v10 = a3;
  if (v10 >= v9 >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Invalid axis ", 13);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" passed to split", 16);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for array with shape ", 22);
    v22 = mlx::core::operator<<(v21, *(_QWORD **)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v31.__end_, &v30);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v14 = mlx::core::array::shape(this, a3);
  v15 = ldiv(v14, a2);
  if (v15.rem)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Array split does not result in sub arrays with equal size:", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" attempting ", 12);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" splits along axis ", 19);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" for shape ", 11);
    v28 = mlx::core::operator<<(v27, *(_QWORD **)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)".", 1);
    v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v31.__end_, &v30);
    std::logic_error::logic_error(v29, &v30);
    v29->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v29, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::vector<int>::vector(&v31, a2 - 1);
  begin = v31.__begin_;
  if (v31.__end_ != v31.__begin_)
  {
    v17 = v31.__end_ - v31.__begin_;
    if (v17 <= 1)
      v17 = 1;
    quot = v15.quot;
    do
    {
      *begin++ = quot;
      quot += LODWORD(v15.quot);
      --v17;
    }
    while (v17);
  }
  mlx::core::split((int **)this, (uint64_t)&v31, a3, a4, a5, a6);
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
}

void sub_242473F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_242473FE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x242473FDCLL);
}

void mlx::core::split(mlx::core::array *a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  mlx::core *v8;
  unsigned int v9;

  v8 = mlx::core::to_stream(a3, a4);
  mlx::core::split(a1, a2, 0, v8, v9 | 0x100000000, a5);
}

void mlx::core::meshgrid(const void ****a1@<X0>, char a2@<W1>, unsigned __int16 *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v13;
  _WORD *v15;
  const void ***v16;
  const void ***v17;
  uint64_t v18;
  std::vector<int>::size_type v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::vector<int>::pointer begin;
  const void ***v24;
  unsigned __int16 *v25;
  _BOOL4 v26;
  const void ***v27;
  std::vector<int>::pointer v28;
  std::vector<int>::pointer v29;
  const void ***v30;
  std::logic_error *exception;
  uint64_t v32;
  unsigned __int16 *v33;
  void *v35;
  __int128 v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *__p;
  __int128 v41;
  __int128 __x;
  std::vector<int> v43;

  v7 = *((unsigned __int8 *)a3 + 23);
  v8 = v7;
  v9 = *((_QWORD *)a3 + 1);
  if ((v7 & 0x80u) == 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = *((_QWORD *)a3 + 1);
  if (v10 != 2)
    goto LABEL_35;
  v13 = a2;
  v15 = *(_WORD **)a3;
  if ((v7 & 0x80u) == 0)
    v15 = a3;
  if (*v15 != 31096 && *v15 != 27241)
  {
LABEL_35:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[meshgrid] Invalid indexing value. Valid values are 'xy' and 'ij'.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v17 = *a1;
  v16 = a1[1];
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  v18 = (char *)v16 - (char *)v17;
  v19 = v18 >> 4;
  if (v18)
  {
    v32 = v18;
    v33 = a3;
    v20 = 0;
    v21 = 0;
    if (v19 <= 1)
      v22 = 1;
    else
      v22 = v18 >> 4;
    do
    {
      LODWORD(__x) = 1;
      std::vector<int>::vector(&v43, v19, (const std::vector<int>::value_type *)&__x);
      begin = v43.__begin_;
      v43.__begin_[v21] = -1;
      v24 = &(*a1)[v20];
      __p = begin;
      v41 = *(_OWORD *)&v43.__end_;
      memset(&v43, 0, sizeof(v43));
      mlx::core::reshape(v24, (uint64_t)&__p, a4, a5, (const void ***)&__x);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&__x);
      mlx::core::array::~array((mlx::core::array *)&__x);
      if (__p)
      {
        *(_QWORD *)&v41 = __p;
        operator delete(__p);
      }
      if (v43.__begin_)
      {
        v43.__end_ = v43.__begin_;
        operator delete(v43.__begin_);
      }
      ++v21;
      v20 += 2;
    }
    while (v22 != v21);
    v18 = v32;
    a3 = v33;
    v7 = *((unsigned __int8 *)v33 + 23);
    v9 = *((_QWORD *)v33 + 1);
    v8 = *((_BYTE *)v33 + 23);
    v13 = a2;
  }
  if (v8 < 0)
    v7 = v9;
  if (v7 == 2)
  {
    v25 = *(unsigned __int16 **)a3;
    if (v8 >= 0)
      v25 = a3;
    v26 = *v25 != 31096;
    if ((unint64_t)v18 >= 0x11 && !v26)
    {
      LODWORD(__x) = 1;
      std::vector<int>::vector(&v43, v19, (const std::vector<int>::value_type *)&__x);
      v27 = *a1;
      v28 = v43.__begin_;
      v43.__begin_[1] = (**a1)[6];
      v38 = 0;
      v39 = 0;
      v37 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v28, (uint64_t)v43.__end_, v43.__end_ - v28);
      mlx::core::reshape(v27, (uint64_t)&v37, a4, a5, (const void ***)&__x);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](*(_QWORD *)a6, &__x);
      mlx::core::array::~array((mlx::core::array *)&__x);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      v29 = v43.__begin_;
      v43.__begin_[1] = 1;
      v30 = *a1 + 2;
      *v29 = (*v30)[6];
      v35 = v29;
      v36 = *(_OWORD *)&v43.__end_;
      memset(&v43, 0, sizeof(v43));
      mlx::core::reshape(v30, (uint64_t)&v35, a4, a5, (const void ***)&__x);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](*(_QWORD *)a6 + 16, &__x);
      mlx::core::array::~array((mlx::core::array *)&__x);
      if (v35)
      {
        *(_QWORD *)&v36 = v35;
        operator delete(v35);
      }
      if (v43.__begin_)
      {
        v43.__end_ = v43.__begin_;
        operator delete(v43.__begin_);
      }
    }
  }
  if ((v13 & 1) == 0)
  {
    mlx::core::broadcast_arrays((const void ****)a6, a4, a5, (uint64_t)&v43);
    std::vector<mlx::core::array>::__vdeallocate((void **)a6);
    *(std::vector<int> *)a6 = v43;
    memset(&v43, 0, sizeof(v43));
    *(_QWORD *)&__x = &v43;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  }
}

void sub_24247437C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void mlx::core::broadcast_arrays(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void ***v5;
  const void ***v6;
  std::vector<int>::pointer begin;
  const void ***v11;
  const void ***v12;
  int *v13;
  std::vector<int> v14;
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  do
  {
    mlx::core::broadcast_shapes(&__p, *v5, &v14);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    begin = v14.__begin_;
    __p = v14;
    v5 += 2;
  }
  while (v5 != v6);
  v12 = *a1;
  v11 = a1[1];
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (v12 == v11)
  {
    v13 = begin;
    if (!begin)
      return;
    goto LABEL_11;
  }
  do
  {
    mlx::core::broadcast_to(v12, (const void **)&__p.__begin_, a2, a3, (const void ***)&v14);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)&v14);
    mlx::core::array::~array((mlx::core::array *)&v14);
    v12 += 2;
  }
  while (v12 != v11);
  v13 = __p.__begin_;
  if (__p.__begin_)
  {
LABEL_11:
    __p.__end_ = v13;
    operator delete(v13);
  }
}

void sub_242474518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::clip(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::logic_error *exception;
  __int128 v16;
  _QWORD v17[2];

  if (!(*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a3 + 16)))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "At most one of a_min and a_max may be None");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v11 = *a1;
  v12 = a1[1];
  v17[0] = *a1;
  v17[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v11 = *a1;
  }
  mlx::core::astype(v17, *(_QWORD *)(v11 + 56), a4, a5, a6);
  mlx::core::array::~array((mlx::core::array *)v17);
  if (*(_BYTE *)(a2 + 16))
  {
    mlx::core::maximum(a6, (_QWORD *)a2, a4, a5, &v16);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v16);
    mlx::core::array::~array((mlx::core::array *)&v16);
  }
  if (*(_BYTE *)(a3 + 16))
  {
    mlx::core::minimum(a6, (_QWORD *)a3, a4, a5, &v16);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v16);
    mlx::core::array::~array((mlx::core::array *)&v16);
  }
}

void sub_242474688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void mlx::core::maximum(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134F3D8;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251351C70;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242474918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::minimum(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134F428;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251351CF8;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242474C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::concatenate(uint64_t *a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v12;
  mlx::core::array *v13;
  mlx::core::array *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  mlx::core *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD **v36;
  _QWORD **v37;
  _QWORD *v38;
  _QWORD *v39;
  std::logic_error *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  std::logic_error *v44;
  std::logic_error *exception;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  std::logic_error *v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  void *__p[2];
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  std::string v58;
  uint64_t v59;
  _QWORD v60[32];

  if (a1[1] == *a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[concatenate] No arrays provided for concatenation");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v7 = *(_QWORD *)*a1;
  v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7;
  if (a2 >= 0)
    v9 = a2;
  else
    v9 = (v8 >> 2) + a2;
  if (v9 >= v8 >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"[concatenate] Invalid axis (", 28);
    v46 = (_QWORD *)std::ostream::operator<<();
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)") passed to concatenate", 23);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for array with shape ", 22);
    v49 = mlx::core::operator<<(v48, *(_QWORD **)*a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)".", 1);
    v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v60, &v58);
    std::logic_error::logic_error(v50, &v58);
    v50->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v50, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v56[0] = 0;
  v56[1] = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v56, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
  v12 = v56[0];
  *((_DWORD *)v56[0] + v9) = 0;
  v13 = (mlx::core::array *)*a1;
  v14 = (mlx::core::array *)a1[1];
  while (v13 != v14)
  {
    v15 = *(uint64_t **)v13;
    v16 = **(_QWORD **)v13;
    v17 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if (v17 - v16 != (char *)v56[1] - (char *)v12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"[concatenate] All the input arrays must have the same number of ", 64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"dimensions. However, got arrays with dimensions ", 48);
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" and ", 5);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)".", 1);
      v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v60, &v58);
      std::logic_error::logic_error(v44, &v58);
      v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v44, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    if (v17 != v16)
    {
      v18 = 0;
      do
      {
        if (v9 != v18)
        {
          v19 = mlx::core::array::shape(v13, v18);
          if (v19 != *((_DWORD *)v56[0] + v18))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"[concatenate] All the input array dimensions must match exactly ", 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"except for the concatenation axis. However, the provided shapes are ", 68);
            v36 = (_QWORD **)*a1;
            v37 = (_QWORD **)a1[1];
            if ((_QWORD **)*a1 != v37)
            {
              do
              {
                v38 = mlx::core::operator<<(&v59, *v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", ", 2);
                v36 += 2;
              }
              while (v36 != v37);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"and the concatenation axis is ", 30);
            v39 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
            v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v60, &v58);
            std::logic_error::logic_error(v40, &v58);
            v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v40, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
          }
          v15 = *(uint64_t **)v13;
          v16 = **(_QWORD **)v13;
        }
        ++v18;
      }
      while (v18 < (v15[1] - v16) >> 2);
    }
    v20 = mlx::core::array::shape(v13, v9);
    v12 = v56[0];
    *((_DWORD *)v56[0] + v9) += v20;
    v13 = (mlx::core::array *)((char *)v13 + 16);
  }
  v21 = mlx::core::result_type(a1);
  *(_OWORD *)__p = *(_OWORD *)v56;
  v55 = v57;
  v56[1] = 0;
  v57 = 0;
  v56[0] = 0;
  v22 = mlx::core::to_stream(a3, a4);
  v24 = v23;
  v25 = operator new(0x30uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &unk_25134EAC8;
  v25[4] = v22;
  v25[3] = &unk_251350DC0;
  *((_DWORD *)v25 + 10) = v24;
  *((_DWORD *)v25 + 11) = v9;
  *(_QWORD *)&v53 = v25 + 3;
  *((_QWORD *)&v53 + 1) = v25;
  v59 = 0;
  v60[0] = 0;
  v52 = 0;
  v26 = (_QWORD *)*a1;
  v27 = (_QWORD *)a1[1];
  v28 = ((uint64_t)v27 - *a1) >> 4;
  v51 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v51, v26, v27, v28);
  mlx::core::array::array(a5, (__int128 *)__p, v21, &v53, &v51);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)v60[0];
  if (v60[0])
  {
    v33 = (unint64_t *)(v60[0] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
}

void sub_2424751D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  int v44;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v44 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v43);
  goto LABEL_6;
}

void mlx::core::concatenate(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const void ***v7;
  const void ***v8;
  _DWORD *v9;
  void *__p;
  void *v11;
  _DWORD *v12;
  void **v13[2];
  char *v14[3];

  memset(v14, 0, sizeof(v14));
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    do
    {
      v11 = 0;
      v12 = 0;
      __p = 0;
      v9 = operator new(4uLL);
      __p = v9;
      *v9 = -1;
      v11 = v9 + 1;
      v12 = v9 + 1;
      mlx::core::reshape(v7, (uint64_t)&__p, a2, a3, (const void ***)v13);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v14, (uint64_t)v13);
      mlx::core::array::~array((mlx::core::array *)v13);
      if (__p)
      {
        v11 = __p;
        operator delete(__p);
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
  mlx::core::concatenate((uint64_t *)v14, 0, a2, a3, a4);
  v13[0] = (void **)v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v13);
}

void sub_242475468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, char a14)
{
  a12 = &a14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void mlx::core::stack(const void ****a1@<X0>, mlx::core *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  const void ***v11;
  const void ***v12;
  std::logic_error *exception;
  void **v14[2];
  char *v15[3];

  if (*a1 == a1[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "No arrays provided for stacking");
    goto LABEL_9;
  }
  if ((mlx::core::is_same_shape(a1) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "All arrays must have the same shape");
LABEL_9:
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v10 = mlx::core::normalize_axis(a2, ((unint64_t)((_BYTE *)(**a1)[1] - (_BYTE *)***a1) >> 2) + 1);
  memset(v15, 0, sizeof(v15));
  std::vector<mlx::core::array>::reserve(v15, ((char *)a1[1] - (char *)*a1) >> 4);
  v12 = *a1;
  v11 = a1[1];
  while (v12 != v11)
  {
    mlx::core::expand_dims(v12, v10, a3, a4, (const void ***)v14);
    std::vector<mlx::core::array>::emplace_back<mlx::core::array>(v15, (uint64_t)v14);
    mlx::core::array::~array((mlx::core::array *)v14);
    v12 += 2;
  }
  mlx::core::concatenate((uint64_t *)v15, (int)a2, a3, a4, a5);
  v14[0] = (void **)v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v14);
}

void sub_242475604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

char *std::vector<mlx::core::array>::emplace_back<mlx::core::array>(char **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    v24 = v15;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v8 = v14 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v23.i64[1] = (uint64_t)(v14 + 16);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    v23 = v19;
    v20 = a1[2];
    a1[2] = v15;
    v24 = v20;
    v22 = v19.i64[0];
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = v7 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  a1[1] = v8;
  return v8 - 16;
}

void mlx::core::stack(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::stack(a1, 0, a2, a3, a4);
}

void mlx::core::repeat(mlx::core *this@<X2>, const void ***a2@<X0>, std::vector<int>::value_type a3@<W1>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v11;
  const void **v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  const void **v16;
  std::vector<int>::const_iterator v17;
  uint64_t v18;
  std::vector<int>::pointer begin;
  int *v20;
  void *v21;
  char *v22;
  char *v23;
  std::logic_error *exception;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;
  std::vector<int> v29;
  std::vector<int>::value_type __x;

  __x = a3;
  v11 = mlx::core::normalize_axis(this, (unint64_t)((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2);
  if (a3 < 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[repeat] Number of repeats cannot be negative");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (a3 == 1)
  {
    v12 = a2[1];
    *(_QWORD *)a6 = *a2;
    *(_QWORD *)(a6 + 8) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else if (a3)
  {
    v15 = v11;
    v16 = *a2;
    memset(&v29, 0, sizeof(v29));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *v16, (uint64_t)v16[1], ((_BYTE *)v16[1] - (_BYTE *)*v16) >> 2);
    v17.__i_ = &v29.__begin_[v15 + 1];
    std::vector<int>::insert(&v29, v17, &__x);
    mlx::core::expand_dims(a2, v15 + 1, a4, a5, (const void ***)a6);
    mlx::core::broadcast_to((const void ***)a6, (const void **)&v29.__begin_, a4, a5, (const void ***)&v28);
    v18 = v15;
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](a6, &v28);
    mlx::core::array::~array((mlx::core::array *)&v28);
    begin = v29.__begin_;
    v20 = &v29.__begin_[v15];
    v21 = v20 + 1;
    v22 = (char *)(v20 + 2);
    v23 = (char *)((char *)v29.__end_ - v22);
    if ((char *)v29.__end_ != v22)
    {
      memmove(v21, v22, (char *)v29.__end_ - v22);
      begin = v29.__begin_;
    }
    v29.__end_ = (std::vector<int>::pointer)&v23[(_QWORD)v21];
    begin[v18] *= __x;
    v26 = 0;
    v27 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)&v23[(_QWORD)v21], (&v23[(_QWORD)v21] - (char *)begin) >> 2);
    mlx::core::reshape((const void ***)a6, (uint64_t)&__p, a4, a5, (const void ***)&v28);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](a6, &v28);
    mlx::core::array::~array((mlx::core::array *)&v28);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    if (v29.__begin_)
    {
      v29.__end_ = v29.__begin_;
      operator delete(v29.__begin_);
    }
  }
  else
  {
    mlx::core::array::array(a6, 0, 0, (*a2)[7]);
  }
}

void sub_242475990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  mlx::core::array *v16;

  if (__p)
    operator delete(__p);
  mlx::core::array::~array(v16);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  std::vector<int>::const_reference v3;
  int *i;
  const int *end;
  int *value;
  std::__compressed_pair<int *> *p_end_cap;
  std::__wrap_iter<const int *>::iterator_type v9;
  const int *v10;
  std::vector<int>::pointer v11;
  int v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  std::__split_buffer<int> __v;

  v3 = __x;
  i = (int *)__position.__i_;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v14 = end - this->__begin_ + 1;
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (char *)__position.__i_ - (char *)begin;
    v16 = __position.__i_ - begin;
    v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<int> *)&this->__end_cap_;
    if (v18)
      v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this->__end_cap_, v18);
    else
      v19 = 0;
    v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (begin == i)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v22);
        v20 = (int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *v20 = *v3;
    __v.__end_ = v20 + 1;
    i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v9 = __position.__i_ + 1;
    v10 = end - 1;
    v11 = this->__end_;
    while (v10 < end)
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9)
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    if (i <= v3)
      v3 += this->__end_ > v3;
    *i = *v3;
  }
  return (std::vector<int>::iterator)i;
}

void sub_242475BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::repeat(const void ***a1@<X0>, std::vector<int>::value_type a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const void **v9[2];

  mlx::core::flatten(a1, 0, ((unint64_t)((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2) - 1, a3, a4, (uint64_t)v9);
  mlx::core::repeat(0, v9, a2, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_242475CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::tile(const void ***a1@<X0>, std::vector<int> *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  const void **v10;
  std::vector<int>::const_iterator v11;
  unint64_t v12;
  std::vector<int>::pointer end;
  const int *begin;
  unint64_t v15;
  std::vector<int>::const_iterator v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  std::vector<int>::pointer v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  std::vector<int>::pointer v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  int *v69;
  int v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  mlx::core *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  void *v82;
  void *v83;
  uint64_t v84;
  __int128 v85;
  void *v86;
  _DWORD *v87;
  unint64_t v88;
  void *__p;
  char *v90;
  char *v91;
  std::vector<int>::value_type __x[2];
  char *v93;
  char *v94;
  std::vector<int> v95;

  v10 = *a1;
  memset(&v95, 0, sizeof(v95));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v95, *v10, (uint64_t)v10[1], ((_BYTE *)v10[1] - (_BYTE *)*v10) >> 2);
  v11.__i_ = a2->__begin_;
  v12 = a2->__end_ - a2->__begin_;
  begin = v95.__begin_;
  end = v95.__end_;
  v15 = v95.__end_ - v95.__begin_;
  if (v15 > v12)
  {
    __x[0] = 1;
    std::vector<int>::insert(a2, v11, v15 - v12, __x);
    begin = v95.__begin_;
    end = v95.__end_;
    v12 = a2->__end_ - a2->__begin_;
    v15 = v95.__end_ - v95.__begin_;
  }
  if (v12 > v15)
  {
    __x[0] = 1;
    v16.__i_ = begin;
    std::vector<int>::insert(&v95, v16, v12 - v15, __x);
    begin = v95.__begin_;
    end = v95.__end_;
  }
  *(_QWORD *)__x = 0;
  v93 = 0;
  v94 = 0;
  __p = 0;
  v90 = 0;
  v91 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  if (end == begin)
  {
    v72 = 0;
    v71 = 0;
  }
  else
  {
    v77 = a3;
    v17 = 0;
    do
    {
      v19 = v93;
      v18 = (unint64_t)v94;
      if (a2->__begin_[v17] != 1)
      {
        if (v93 >= v94)
        {
          v21 = *(char **)__x;
          v22 = (uint64_t)&v93[-*(_QWORD *)__x] >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v24 = (uint64_t)&v94[-*(_QWORD *)__x];
          if ((uint64_t)&v94[-*(_QWORD *)__x] >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v25);
            v21 = *(char **)__x;
            v19 = v93;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[4 * v22];
          *(_DWORD *)v27 = 1;
          v20 = v27 + 4;
          while (v19 != v21)
          {
            v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          *(_QWORD *)__x = v27;
          v93 = v20;
          v94 = &v26[4 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v93 = 1;
          v20 = v19 + 4;
        }
        v93 = v20;
        v29 = a2->__begin_;
        v30 = v90;
        if (v90 >= v91)
        {
          v32 = (char *)__p;
          v33 = (v90 - (_BYTE *)__p) >> 2;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62)
            goto LABEL_112;
          v35 = v91 - (_BYTE *)__p;
          if ((v91 - (_BYTE *)__p) >> 1 > v34)
            v34 = v35 >> 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
            v36 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91, v36);
            v32 = (char *)__p;
            v30 = v90;
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[4 * v33];
          *(_DWORD *)v38 = v29[v17];
          v31 = v38 + 4;
          while (v30 != v32)
          {
            v39 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v38 - 1) = v39;
            v38 -= 4;
          }
          __p = v38;
          v90 = v31;
          v91 = &v37[4 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_DWORD *)v90 = v29[v17];
          v31 = v30 + 4;
        }
        v90 = v31;
        v18 = (unint64_t)v94;
        begin = v95.__begin_;
        v19 = v93;
      }
      if ((unint64_t)v19 >= v18)
      {
        v41 = *(char **)__x;
        v42 = (uint64_t)&v19[-*(_QWORD *)__x] >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          goto LABEL_112;
        v44 = v18 - *(_QWORD *)__x;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v45);
          v41 = *(char **)__x;
          v19 = v93;
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[4 * v42];
        *(_DWORD *)v47 = begin[v17];
        v40 = v47 + 4;
        while (v19 != v41)
        {
          v48 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        *(_QWORD *)__x = v47;
        v93 = v40;
        v94 = &v46[4 * v45];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_DWORD *)v19 = begin[v17];
        v40 = v19 + 4;
      }
      v93 = v40;
      v49 = v95.__begin_;
      v50 = v90;
      if (v90 >= v91)
      {
        v52 = (char *)__p;
        v53 = (v90 - (_BYTE *)__p) >> 2;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62)
LABEL_112:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v55 = v91 - (_BYTE *)__p;
        if ((v91 - (_BYTE *)__p) >> 1 > v54)
          v54 = v55 >> 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91, v56);
          v52 = (char *)__p;
          v50 = v90;
        }
        else
        {
          v57 = 0;
        }
        v58 = &v57[4 * v53];
        *(_DWORD *)v58 = v49[v17];
        v51 = v58 + 4;
        while (v50 != v52)
        {
          v59 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *((_DWORD *)v58 - 1) = v59;
          v58 -= 4;
        }
        __p = v58;
        v90 = v51;
        v91 = &v57[4 * v56];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_DWORD *)v90 = v95.__begin_[v17];
        v51 = v50 + 4;
      }
      v90 = v51;
      v60 = v95.__begin_[v17] * a2->__begin_[v17];
      v61 = v87;
      if ((unint64_t)v87 >= v88)
      {
        v63 = v86;
        v64 = ((char *)v87 - (_BYTE *)v86) >> 2;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v66 = v88 - (_QWORD)v86;
        if ((uint64_t)(v88 - (_QWORD)v86) >> 1 > v65)
          v65 = v66 >> 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v67 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v88, v67);
          v63 = v86;
          v61 = v87;
        }
        else
        {
          v68 = 0;
        }
        v69 = (int *)&v68[4 * v64];
        *v69 = v60;
        v62 = v69 + 1;
        while (v61 != v63)
        {
          v70 = *--v61;
          *--v69 = v70;
        }
        v86 = v69;
        v87 = v62;
        v88 = (unint64_t)&v68[4 * v67];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v87 = v60;
        v62 = v61 + 1;
      }
      v87 = v62;
      ++v17;
      begin = v95.__begin_;
    }
    while (v17 < v95.__end_ - v95.__begin_);
    v71 = *(char **)__x;
    v72 = (uint64_t)v93;
    a3 = v77;
  }
  v83 = 0;
  v84 = 0;
  v82 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v82, v71, v72, (v72 - (uint64_t)v71) >> 2);
  mlx::core::reshape(a1, (uint64_t)&v82, a3, a4, (const void ***)&v85);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  mlx::core::broadcast_to((const void ***)&v85, (const void **)&__p, a3, a4, (const void ***)&v81);
  v73 = v81;
  v81 = 0uLL;
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  v85 = v73;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v81);
  v79 = 0;
  v80 = 0;
  v78 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v78, v86, (uint64_t)v87, ((char *)v87 - (_BYTE *)v86) >> 2);
  mlx::core::reshape((const void ***)&v85, (uint64_t)&v78, a3, a4, a5);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  mlx::core::array::~array((mlx::core::array *)&v85);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (__p)
  {
    v90 = (char *)__p;
    operator delete(__p);
  }
  if (*(_QWORD *)__x)
  {
    v93 = *(char **)__x;
    operator delete(*(void **)__x);
  }
  if (v95.__begin_)
  {
    v95.__end_ = v95.__begin_;
    operator delete(v95.__begin_);
  }
}

void sub_2424762D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(_QWORD *)(v30 - 104) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  int *i;
  int *v5;
  std::__compressed_pair<int *> *p_end_cap;
  int *v9;
  int *value;
  const int *v11;
  std::vector<int>::pointer begin;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  std::vector<int>::size_type v20;
  int *v21;
  const int *v22;
  const int *v23;
  int *v24;
  int v25;
  std::vector<int>::size_type v26;
  int *v27;
  int *v28;
  std::vector<int>::size_type v29;
  int *v30;
  std::__split_buffer<int> __v;

  i = (int *)__position.__i_;
  if (__n)
  {
    v5 = (int *)__x;
    value = this->__end_cap_.__value_;
    p_end_cap = &this->__end_cap_;
    v9 = value;
    v11 = p_end_cap[-1].__value_;
    if (__n <= value - v11)
    {
      v18 = (char *)v11 - (char *)__position.__i_;
      if (__n <= v11 - __position.__i_)
      {
        v21 = p_end_cap[-1].__value_;
        v20 = __n;
      }
      else
      {
        v19 = 0;
        v20 = v18 >> 2;
        v21 = (int *)&v11[__n - (v18 >> 2)];
        do
        {
          v11[v19 / 4] = *__x;
          v19 += 4;
        }
        while (4 * __n - 4 * v20 != v19);
        this->__end_ = v21;
        if (v11 == __position.__i_)
          return (std::vector<int>::iterator)i;
      }
      v22 = &__position.__i_[__n];
      v23 = &v21[-__n];
      v24 = v21;
      if (v23 < v11)
      {
        v24 = v21;
        do
        {
          v25 = *v23++;
          *v24++ = v25;
        }
        while (v23 < v11);
      }
      this->__end_ = v24;
      if (v21 != v22)
        memmove(&v21[-(v21 - v22)], __position.__i_, (char *)v21 - (char *)v22);
      if (i <= v5)
      {
        if (this->__end_ <= v5)
          v26 = 0;
        else
          v26 = __n;
        v5 += v26;
      }
      v27 = i;
      do
      {
        *v27++ = *v5;
        --v20;
      }
      while (v20);
    }
    else
    {
      begin = this->__begin_;
      v13 = __n + v11 - this->__begin_;
      if (v13 >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = __position.__i_ - begin;
      v15 = (char *)v9 - (char *)begin;
      if (v15 >> 1 > v13)
        v13 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
      if (v16)
        v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v16);
      else
        v17 = 0;
      v28 = &v17[v14];
      __v.__first_ = v17;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v17[v16];
      v29 = 4 * __n;
      v30 = &v28[__n];
      do
      {
        *v28++ = *v5;
        v29 -= 4;
      }
      while (v29);
      __v.__end_ = v30;
      i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
      if (__v.__end_ != __v.__begin_)
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_)
        operator delete(__v.__first_);
    }
  }
  return (std::vector<int>::iterator)i;
}

void sub_242476574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::pad(const void ***a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v10;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  std::string::size_type v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const void **v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t i;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  std::logic_error *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  std::logic_error *v59;
  _QWORD *v60;
  std::logic_error *exception;
  _QWORD v62[2];
  __int128 v63;
  _QWORD *v64;
  mlx::core *v65;
  int v66;
  __int128 v67;
  __int128 v68;
  void *__p[3];
  std::string v70;
  std::string v71;
  const void **v72;
  const void **v73;
  _QWORD v74[32];

  v74[31] = *MEMORY[0x24BDAC8D0];
  v10 = (a2[1] - *a2) >> 2;
  if (v10 != (a3[1] - *a3) >> 2 || v10 != (a4[1] - *a4) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v72);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Invalid number of padding sizes passed to pad ", 46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"with axes of size ", 18);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v73, &v71);
    std::logic_error::logic_error(exception, &v71);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v17 = *a1;
  memset(&v71, 0, sizeof(v71));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v71, *v17, (uint64_t)v17[1], ((_BYTE *)v17[1] - (_BYTE *)*v17) >> 2);
  v18 = *a2;
  v19 = a2[1] - *a2;
  if (v19)
  {
    v20 = 0;
    v21 = v19 >> 2;
    v22 = *a3;
    v23 = *a4;
    v24 = *a1;
    v25 = v71.__r_.__value_.__r.__words[0];
    if (v21 <= 1)
      v21 = 1;
    do
    {
      v26 = *(_DWORD *)(v22 + 4 * v20);
      if (v26 < 0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Invalid low padding size (", 26);
        v52 = (_QWORD *)std::ostream::operator<<();
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)") passed to pad", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" for axis ", 10);
        v54 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)". Padding sizes must be non-negative", 36);
        v55 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v73, &v70);
        std::logic_error::logic_error(v55, &v70);
        v55->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v55, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      v27 = *(_DWORD *)(v23 + 4 * v20);
      if (v27 < 0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Invalid high padding size (", 27);
        v56 = (_QWORD *)std::ostream::operator<<();
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)") passed to pad", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" for axis ", 10);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)". Padding sizes must be non-negative", 36);
        v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v73, &v70);
        std::logic_error::logic_error(v59, &v70);
        v59->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v59, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      v28 = *(int *)(v18 + 4 * v20);
      if ((v28 & 0x80000000) != 0)
        v29 = v28 + (((_BYTE *)v24[1] - (_BYTE *)*v24) >> 2);
      else
        v29 = *(unsigned int *)(v18 + 4 * v20);
      *(_DWORD *)(v25 + 4 * v29) += v27 + v26;
      ++v20;
    }
    while (v21 != v20);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_, (uint64_t)(v71.__r_.__value_.__l.__size_ - v71.__r_.__value_.__r.__words[0]) >> 2);
  v30 = (uint64_t)(*a1)[7];
  v65 = mlx::core::to_stream(a6, a7);
  v66 = v31;
  std::allocate_shared[abi:ne180100]<mlx::core::Pad,std::allocator<mlx::core::Pad>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,void>((uint64_t)&v65, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, &v67);
  v68 = v67;
  v67 = 0uLL;
  v32 = a1[1];
  v72 = *a1;
  v73 = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 1);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = a5[1];
  v62[0] = *a5;
  v62[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  mlx::core::astype(v62, (uint64_t)(*a1)[7], a6, a7, v74);
  v63 = 0uLL;
  v64 = 0;
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  v70.__r_.__value_.__s.__data_[8] = 0;
  v38 = operator new(0x20uLL);
  v39 = 0;
  *(_QWORD *)&v63 = v38;
  *((_QWORD *)&v63 + 1) = v38;
  v64 = v38 + 4;
  do
  {
    v40 = (uint64_t *)&(&v72)[2 * v39];
    v42 = *v40;
    v41 = v40[1];
    *v38 = v42;
    v38[1] = v41;
    if (v41)
    {
      v43 = (unint64_t *)(v41 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    ++v39;
    v38 += 2;
  }
  while (v39 != 2);
  *((_QWORD *)&v63 + 1) = v38;
  mlx::core::array::array(a8, (__int128 *)__p, v30, &v68, &v63);
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  for (i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&(&v72)[i]);
  mlx::core::array::~array((mlx::core::array *)v62);
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v71.__r_.__value_.__r.__words[0])
  {
    v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
    operator delete(v71.__r_.__value_.__l.__data_);
  }
}

void sub_242476B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  void *v37;
  int v38;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

void mlx::core::pad(const void ***a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::vector<int>::size_type v10;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  void *__p;
  char *v39;
  char *v40;
  std::vector<int>::value_type __x[2];
  char *v42;
  char *v43;
  std::vector<int> v44;

  v10 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v44, v10, __x);
  begin = v44.__begin_;
  end = v44.__end_;
  if (v44.__begin_ != v44.__end_)
  {
    v13 = 0;
    do
      *begin++ = v13++;
    while (begin != end);
  }
  *(_QWORD *)__x = 0;
  v42 = 0;
  v43 = 0;
  __p = 0;
  v39 = 0;
  v40 = 0;
  v14 = *(_DWORD **)a2;
  v15 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v15)
  {
    do
    {
      v16 = v42;
      if (v42 >= v43)
      {
        v18 = *(char **)__x;
        v19 = (uint64_t)&v42[-*(_QWORD *)__x] >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          goto LABEL_45;
        v21 = (uint64_t)&v43[-*(_QWORD *)__x];
        if ((uint64_t)&v43[-*(_QWORD *)__x] >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v43, v22);
          v18 = *(char **)__x;
          v16 = v42;
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        *(_DWORD *)v24 = *v14;
        v17 = v24 + 4;
        while (v16 != v18)
        {
          v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *(_QWORD *)__x = v24;
        v42 = v17;
        v43 = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_DWORD *)v42 = *v14;
        v17 = v16 + 4;
      }
      v42 = v17;
      v26 = v39;
      if (v39 >= v40)
      {
        v28 = (char *)__p;
        v29 = (v39 - (_BYTE *)__p) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
LABEL_45:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v31 = v40 - (_BYTE *)__p;
        if ((v40 - (_BYTE *)__p) >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v40, v32);
          v28 = (char *)__p;
          v26 = v39;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = v14[1];
        v27 = v34 + 4;
        while (v26 != v28)
        {
          v35 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        __p = v34;
        v39 = v27;
        v40 = &v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v39 = v14[1];
        v27 = v26 + 4;
      }
      v39 = v27;
      v14 += 2;
    }
    while (v14 != v15);
  }
  mlx::core::pad(a1, (uint64_t *)&v44, (uint64_t *)__x, (uint64_t *)&__p, a3, a4, a5, a6);
  if (__p)
  {
    v39 = (char *)__p;
    operator delete(__p);
  }
  if (*(_QWORD *)__x)
  {
    v42 = *(char **)__x;
    operator delete(*(void **)__x);
  }
  if (v44.__begin_)
  {
    v44.__end_ = v44.__begin_;
    operator delete(v44.__begin_);
  }
}

void sub_242476ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void mlx::core::pad(const void ***a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  void *__p[3];

  std::vector<std::pair<int,int>>::vector(__p, ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2, a2);
  mlx::core::pad(a1, (uint64_t)__p, a3, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242476FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::pad(const void ***a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  void *__p[3];

  v11 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  LODWORD(v12) = a2;
  HIDWORD(v12) = a2;
  std::vector<std::pair<int,int>>::vector(__p, v11, &v12);
  mlx::core::pad(a1, (uint64_t)__p, a3, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242477054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::moveaxis(uint64_t **a1@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::vector<int>::value_type v11;
  int v12;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v15;
  std::vector<int>::pointer v16;
  int *v17;
  char *v18;
  std::vector<int>::const_iterator v19;
  void *__p;
  void *v21;
  uint64_t v22;
  std::vector<int> v23;
  uint64_t **v24;
  std::vector<int>::value_type __x;

  v24 = a1;
  v11 = mlx::core::moveaxis(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v24, a2);
  __x = v11;
  v12 = mlx::core::moveaxis(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v24, a3);
  std::vector<int>::vector(&v23, ((*a1)[1] - **a1) >> 2);
  begin = v23.__begin_;
  end = v23.__end_;
  if (v23.__begin_ != v23.__end_)
  {
    v15 = 0;
    v16 = v23.__begin_;
    do
      *v16++ = v15++;
    while (v16 != end);
  }
  v17 = &begin[v11];
  v18 = (char *)((char *)end - (char *)(v17 + 1));
  if (end != v17 + 1)
  {
    memmove(v17, v17 + 1, (char *)end - (char *)(v17 + 1));
    begin = v23.__begin_;
  }
  v23.__end_ = (std::vector<int>::pointer)&v18[(_QWORD)v17];
  v19.__i_ = &begin[v12];
  std::vector<int>::insert(&v23, v19, &__x);
  __p = 0;
  v21 = 0;
  v22 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v23.__begin_, (uint64_t)v23.__end_, v23.__end_ - v23.__begin_);
  mlx::core::transpose(a1, (unsigned int **)&__p, a4, a5, a6);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v23.__begin_)
  {
    v23.__end_ = v23.__begin_;
    operator delete(v23.__begin_);
  }
}

void sub_2424771A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::moveaxis(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  std::logic_error *exception;
  std::string v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (*(_QWORD *)(**(_QWORD **)a1 + 8) - ***(_QWORD ***)a1) >> 2;
  if (-(int)v2 > a2 || (int)v2 <= a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"[moveaxis] Invalid axis ", 24);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for array with ", 16);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v10, &v8);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
  }
  return (v2 & (a2 >> 31)) + a2;
}

void sub_2424772E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::transpose(uint64_t **a1@<X0>, unsigned int **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v10;
  unsigned int *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  std::vector<int>::size_type v15;
  char *v16;
  unsigned int *v17;
  uint64_t *v18;
  std::vector<int>::pointer begin;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::vector<int>::pointer v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  std::logic_error *v43;
  std::logic_error *v44;
  _QWORD *v45;
  _QWORD *v46;
  std::logic_error *exception;
  __int128 v48;
  _QWORD *v49;
  mlx::core *v50;
  int v51;
  __int128 v52;
  std::vector<int> __p;
  std::string v54;
  std::vector<int> v55;
  std::vector<int>::value_type __x[2];
  _BYTE v57[256];
  _QWORD v58[3];

  v58[2] = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    v12 = *a1;
    v13 = *a2;
    do
    {
      v14 = *v13;
      if ((v14 & 0x80000000) != 0)
        v14 += (v12[1] - *v12) >> 2;
      *v13++ = v14;
    }
    while (v13 != v11);
  }
  v15 = v11 - v10;
  if (v15 != ((*a1)[1] - **a1) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"[transpose] Recived ", 20);
    v45 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" axes for array with ", 21);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v57, &v55);
    std::logic_error::logic_error(exception, (const std::string *)&v55);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  __x[0] = 0;
  std::vector<int>::vector(&v55, v15, __x);
  v16 = (char *)*a2;
  v17 = a2[1];
  if (*a2 != v17)
  {
    v18 = *a1;
    begin = v55.__begin_;
    v20 = *a2;
    do
    {
      v21 = *v20;
      if ((v21 & 0x80000000) != 0 || v21 >= (v18[1] - *v18) >> 2)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"[transpose] Invalid axis (", 26);
        v41 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)") for array with ", 17);
        v42 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" dimensions.", 12);
        v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v57, &v54);
        std::logic_error::logic_error(v43, &v54);
        v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v43, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      if (begin[v21])
      {
        v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v44, "[transpose] Repeat axes not allowed.");
        v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v44, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      begin[v21] = 1;
      ++v20;
    }
    while (v20 != v17);
    v22 = ((char *)v17 - v16) >> 2;
    v23 = **a1;
    v24 = v55.__begin_;
    if (v22 <= 1)
      v22 = 1;
    do
    {
      v25 = *(int *)v16;
      v16 += 4;
      *v24++ = *(_DWORD *)(v23 + 4 * v25);
      --v22;
    }
    while (v22);
  }
  __p = v55;
  memset(&v55, 0, sizeof(v55));
  v26 = (*a1)[7];
  v50 = mlx::core::to_stream(a3, a4);
  v51 = v27;
  std::allocate_shared[abi:ne180100]<mlx::core::Transpose,std::allocator<mlx::core::Transpose>,mlx::core::Stream,std::vector<int>,void>((uint64_t *)&v50, (uint64_t)a2, &v54);
  v52 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = 0uLL;
  v29 = *a1;
  v28 = a1[1];
  v58[0] = v29;
  v58[1] = v28;
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 1);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v48 = 0uLL;
  v49 = 0;
  *(_QWORD *)__x = &v48;
  v57[0] = 0;
  v32 = operator new(0x10uLL);
  *(_QWORD *)&v48 = v32;
  v49 = v32 + 2;
  *v32 = v29;
  v32[1] = v28;
  if (v28)
  {
    v33 = (unint64_t *)(v28 + 1);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *((_QWORD *)&v48 + 1) = v32 + 2;
  mlx::core::array::array(a5, (__int128 *)&__p, v26, &v52, &v48);
  *(_QWORD *)__x = &v48;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  mlx::core::array::~array((mlx::core::array *)v58);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  size = (std::__shared_weak_count *)v54.__r_.__value_.__l.__size_;
  if (v54.__r_.__value_.__l.__size_)
  {
    v39 = (unint64_t *)(v54.__r_.__value_.__l.__size_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_2424777BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  int v37;

  if (a34 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void mlx::core::swapaxes(uint64_t **a1@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v11;
  int v12;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v15;
  std::vector<int>::pointer v16;
  int v17;
  void *__p;
  void *v19;
  int *value;
  std::vector<int> v21;
  uint64_t **v22;

  v22 = a1;
  v11 = mlx::core::swapaxes(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v22, a2);
  v12 = mlx::core::swapaxes(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v22, a3);
  std::vector<int>::vector(&v21, ((*a1)[1] - **a1) >> 2);
  begin = v21.__begin_;
  end = v21.__end_;
  if (v21.__begin_ != v21.__end_)
  {
    v15 = 0;
    v16 = v21.__begin_;
    do
      *v16++ = v15++;
    while (v16 != end);
  }
  v17 = begin[v11];
  begin[v11] = begin[v12];
  begin[v12] = v17;
  __p = begin;
  v19 = end;
  value = v21.__end_cap_.__value_;
  memset(&v21, 0, sizeof(v21));
  mlx::core::transpose(a1, (unsigned int **)&__p, a4, a5, a6);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_2424779C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::swapaxes(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  std::logic_error *exception;
  std::string v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (*(_QWORD *)(**(_QWORD **)a1 + 8) - ***(_QWORD ***)a1) >> 2;
  if (-(int)v2 > a2 || (int)v2 <= a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"[swapaxes] Invalid axis ", 24);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for array with ", 16);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v10, &v8);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
  }
  return (v2 & (a2 >> 31)) + a2;
}

void sub_242477AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::transpose(uint64_t **a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int v10;
  std::vector<int>::pointer v11;
  mlx::core *v12;
  unsigned int v13;
  void *__p;
  void *v15;
  int *value;
  std::vector<int> v17;

  std::vector<int>::vector(&v17, ((*a1)[1] - **a1) >> 2);
  begin = v17.__begin_;
  end = v17.__end_;
  if (v17.__end_ != v17.__begin_)
  {
    v10 = 0;
    v11 = v17.__end_;
    do
      *--v11 = v10++;
    while (v11 != begin);
  }
  __p = begin;
  v15 = end;
  value = v17.__end_cap_.__value_;
  memset(&v17, 0, sizeof(v17));
  v12 = mlx::core::to_stream(a2, a3);
  mlx::core::transpose(a1, (unsigned int **)&__p, v12, v13 | 0x100000000, a4);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_242477C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void mlx::core::broadcast_arrays(const void ***a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  const void ***v12;
  const void **v13;
  const void **v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t i;
  std::vector<int> __p;
  _QWORD *v19;
  char v20;
  const void **v21[2];
  const void **v22[3];

  v22[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  mlx::core::broadcast_shapes(*a1, *a2, &__p);
  mlx::core::broadcast_to(a1, (const void **)&__p.__begin_, a3, a4, v21);
  mlx::core::broadcast_to(a2, (const void **)&__p.__begin_, a3, a4, v22);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v19 = a5;
  v20 = 0;
  v10 = operator new(0x20uLL);
  v11 = 0;
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 4;
  do
  {
    v12 = &v21[2 * v11];
    v14 = *v12;
    v13 = v12[1];
    *v10 = v14;
    v10[1] = v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 1);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ++v11;
    v10 += 2;
  }
  while (v11 != 2);
  a5[1] = v10;
  for (i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v21[i]);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_242477D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t i;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  for (i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a14 + i));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::equal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = &unk_25134EC08;
  v21[4] = v18;
  *((_DWORD *)v21 + 10) = v20;
  v21[3] = &unk_2513512E0;
  *((_BYTE *)v21 + 44) = 0;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_24247803C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::not_equal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134EC58;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251351E90;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242478328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::greater(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134ECA8;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251351720;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242478614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::greater_equal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134ECF8;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_2513517A8;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242478900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::less(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134ED48;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251351830;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242478BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::less_equal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134ED98;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_2513518B8;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242478ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::array_equal(const void ***a1@<X0>, const void ***a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  const void **v10;
  const void **v11;
  _BYTE *v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v17;
  char v18;
  const void **v19;
  mlx::core *v20;
  int v21;
  int v22;
  _QWORD *v23;
  const void **v24;
  unint64_t *v25;
  unint64_t v26;
  const void **v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t i;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  void *__p[3];
  _QWORD v52[2];
  uint64_t v53;
  void **v54;
  char v55;
  int v56[4];
  _QWORD v57[3];

  v57[2] = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = *a2;
  v12 = **a1;
  v13 = (_BYTE *)v10[1] - v12;
  v14 = **a2;
  if (v13 == (_BYTE *)v11[1] - v14 && !memcmp(v12, v14, v13))
  {
    *(_QWORD *)v56 = v10[7];
    v54 = (void **)v11[7];
    v53 = mlx::core::promote_types(v56, (int *)&v54);
    v18 = mlx::core::issubdtype((unsigned int *)&v53, &mlx::core::inexact);
    v19 = *a1;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v19, (uint64_t)v19[1], ((_BYTE *)v19[1] - (_BYTE *)*v19) >> 2);
    v20 = mlx::core::to_stream(a4, a5);
    v22 = v21;
    v23 = operator new(0x30uLL);
    v23[2] = 0;
    *v23 = &unk_25134EC08;
    v23[1] = 0;
    v23[4] = v20;
    *((_DWORD *)v23 + 10) = v22;
    v23[3] = &unk_2513512E0;
    *((_BYTE *)v23 + 44) = v18 & a3;
    *(_QWORD *)&v50 = v23 + 3;
    *((_QWORD *)&v50 + 1) = v23;
    v48 = 0;
    v49 = 0;
    v24 = a1[1];
    v45[0] = *a1;
    v45[1] = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 1);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    mlx::core::astype(v45, v53, a4, a5, v56);
    v27 = a2[1];
    v44[0] = *a2;
    v44[1] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    mlx::core::astype(v44, v53, a4, a5, v57);
    v46 = 0uLL;
    v47 = 0;
    v54 = (void **)&v46;
    v55 = 0;
    v30 = operator new(0x20uLL);
    v31 = 0;
    *(_QWORD *)&v46 = v30;
    *((_QWORD *)&v46 + 1) = v30;
    v47 = v30 + 4;
    do
    {
      v32 = (uint64_t *)&v56[4 * v31];
      v34 = *v32;
      v33 = v32[1];
      *v30 = v34;
      v30[1] = v33;
      if (v33)
      {
        v35 = (unint64_t *)(v33 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      ++v31;
      v30 += 2;
    }
    while (v31 != 2);
    *((_QWORD *)&v46 + 1) = v30;
    mlx::core::array::array(v52, (__int128 *)__p, 0x100000000, &v50, &v46);
    mlx::core::all((uint64_t)v52, 0, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v52);
    v54 = (void **)&v46;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v54);
    for (i = 4; i != -4; i -= 4)
      mlx::core::array::~array((mlx::core::array *)&v56[i]);
    mlx::core::array::~array((mlx::core::array *)v44);
    mlx::core::array::~array((mlx::core::array *)v45);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v17 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
    mlx::core::array::array<BOOL>((int ***)a6, 0, v17);
  }
}

void sub_2424792B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  uint64_t v26;
  uint64_t i;

  mlx::core::array::~array((mlx::core::array *)&a23);
  a26 = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  for (i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(v26 - 120 + i));
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::all(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int> v13;

  std::vector<int>::vector(&v13, (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2);
  begin = v13.__begin_;
  end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::all(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_242479410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::isnan(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(*a1 + 56);
  if ((mlx::core::issubdtype((unsigned int *)&v12, &mlx::core::integer) & 1) != 0)
  {
    v8 = *a1;
  }
  else
  {
    v8 = *a1;
    if (*(_DWORD *)(*a1 + 56))
    {
      mlx::core::not_equal(a1, a1, a2, a3, a4);
      return;
    }
  }
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  mlx::core::full<BOOL>((uint64_t)&__p, 0, 0x100000000, a2, a3, a4);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_2424794FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::full<BOOL>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  mlx::core *v9;
  unsigned int v10;
  int **v11[2];
  void *__p[2];
  uint64_t v13;

  *(_OWORD *)__p = *(_OWORD *)a1;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  mlx::core::array::array<BOOL>(v11, a2, a3);
  v9 = mlx::core::to_stream(a4, a5);
  mlx::core::full((__int128 *)__p, v11, v9, v10 | 0x100000000, a6);
  mlx::core::array::~array((mlx::core::array *)v11);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_2424795AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, char a10, uint64_t a11, uint64_t a12)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

void mlx::core::isinf(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD v8[2];
  _QWORD v9[2];

  mlx::core::isposinf(a1, a2, a3, v9);
  mlx::core::isneginf(a1, a2, a3, v8);
  mlx::core::logical_or(v9, v8, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v8);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_242479658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  _Unwind_Resume(a1);
}

void mlx::core::logical_or(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  mlx::core *v16;
  int v17;
  int v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  void *__p[3];
  _QWORD v30[2];
  void **v31[2];
  _QWORD v32[2];
  void **v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;

  v9 = a1[1];
  v32[0] = *a1;
  v32[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v32, 0x100000000, a3, a4, &v33);
  v12 = a2[1];
  v30[0] = *a2;
  v30[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  mlx::core::astype(v30, 0x100000000, a3, a4, v31);
  mlx::core::broadcast_arrays((const void ***)&v33, (const void ***)v31, a3, a4, &v35);
  mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)&v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  v15 = *(_QWORD *)v35;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 2);
  v16 = mlx::core::to_stream(a3, a4);
  v18 = v17;
  v19 = operator new(0x30uLL);
  v19[2] = 0;
  *v19 = &unk_25134F1A8;
  v19[1] = 0;
  v19[4] = v16;
  v19[3] = &unk_251351B60;
  *((_DWORD *)v19 + 10) = v18;
  *(_QWORD *)&v28 = v19 + 3;
  *((_QWORD *)&v28 + 1) = v19;
  v33 = 0;
  v34 = 0;
  v26 = v35;
  v27 = v36;
  v35 = 0uLL;
  v36 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v28, &v26);
  v31[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v31);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v33 = (void **)&v35;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_2424798A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 80);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 80) = v21 - 64;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 80));
  _Unwind_Resume(a1);
}

void mlx::core::isposinf(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int **v10[2];
  void *__p;
  void *v12;
  uint64_t v13;

  v10[0] = *(int ***)(*a1 + 56);
  if ((mlx::core::issubdtype((unsigned int *)v10, &mlx::core::integer) & 1) != 0)
  {
    v8 = *a1;
  }
  else
  {
    v8 = *a1;
    v9 = *(_QWORD *)(*a1 + 56);
    if ((_DWORD)v9)
    {
      mlx::core::array::array<float>(v10, v9, INFINITY);
      mlx::core::equal(a1, v10, a2, a3, a4);
      mlx::core::array::~array((mlx::core::array *)v10);
      return;
    }
  }
  __p = 0;
  v12 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  mlx::core::full<BOOL>((uint64_t)&__p, 0, 0x100000000, a2, a3, a4);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_242479A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mlx::core::array::~array((mlx::core::array *)&a10);
  _Unwind_Resume(a1);
}

void mlx::core::isneginf(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int **v10[2];
  void *__p;
  void *v12;
  uint64_t v13;

  v10[0] = *(int ***)(*a1 + 56);
  if ((mlx::core::issubdtype((unsigned int *)v10, &mlx::core::integer) & 1) != 0)
  {
    v8 = *a1;
  }
  else
  {
    v8 = *a1;
    v9 = *(_QWORD *)(*a1 + 56);
    if ((_DWORD)v9)
    {
      mlx::core::array::array<float>(v10, v9, -INFINITY);
      mlx::core::equal(a1, v10, a2, a3, a4);
      mlx::core::array::~array((mlx::core::array *)v10);
      return;
    }
  }
  __p = 0;
  v12 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  mlx::core::full<BOOL>((uint64_t)&__p, 0, 0x100000000, a2, a3, a4);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_242479B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mlx::core::array::~array((mlx::core::array *)&a10);
  _Unwind_Resume(a1);
}

void mlx::core::where(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  uint64_t v24;
  void ***v25;
  void **v26;
  void **v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t i;
  uint64_t v31;
  mlx::core *v32;
  int v33;
  int v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  void *__p[3];
  _QWORD v46[2];
  _QWORD v47[2];
  void **v48;
  void **v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD v53[2];
  void **v54;
  std::__shared_weak_count *v55;
  void ***v56;
  char v57;
  char **v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  _QWORD v61[3];

  v61[2] = *MEMORY[0x24BDAC8D0];
  v11 = a1[1];
  v53[0] = *a1;
  v53[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v53, 0x100000000, a4, a5, &v54);
  mlx::core::array::~array((mlx::core::array *)v53);
  v58 = *(char ***)(*a2 + 56);
  v51 = *(char **)(*a3 + 56);
  v14 = mlx::core::promote_types((int *)&v58, (int *)&v51);
  v58 = (char **)v54;
  v59 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = a2[1];
  v47[0] = *a2;
  v47[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  mlx::core::astype(v47, v14, a4, a5, &v60);
  v20 = a3[1];
  v46[0] = *a3;
  v46[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  mlx::core::astype(v46, v14, a4, a5, v61);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v56 = &v48;
  v57 = 0;
  v23 = (void **)operator new(0x30uLL);
  v24 = 0;
  v48 = v23;
  v49 = v23;
  v50 = (char *)(v23 + 6);
  do
  {
    v25 = (void ***)&(&v58)[2 * v24];
    v27 = *v25;
    v26 = v25[1];
    *v23 = v27;
    v23[1] = v26;
    if (v26)
    {
      v28 = (unint64_t *)(v26 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    ++v24;
    v23 += 2;
  }
  while (v24 != 3);
  v49 = v23;
  mlx::core::broadcast_arrays((const void ****)&v48, a4, a5, (uint64_t)&v51);
  v56 = &v48;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (i = 4; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&(&v58)[i]);
  mlx::core::array::~array((mlx::core::array *)v46);
  mlx::core::array::~array((mlx::core::array *)v47);
  v31 = *(_QWORD *)v51;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v31, *(_QWORD *)(v31 + 8), (uint64_t)(*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 2);
  v32 = mlx::core::to_stream(a4, a5);
  v34 = v33;
  v35 = operator new(0x30uLL);
  v35[2] = 0;
  *v35 = &unk_25134EDE8;
  v35[1] = 0;
  v35[4] = v32;
  v35[3] = &unk_2513511D0;
  *((_DWORD *)v35 + 10) = v34;
  *(_QWORD *)&v44 = v35 + 3;
  *((_QWORD *)&v44 + 1) = v35;
  v58 = 0;
  v59 = 0;
  v43 = 0;
  v42 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v42, v51, v52, (v52 - v51) >> 4);
  mlx::core::array::array(a6, (__int128 *)__p, v14, &v44, &v42);
  v48 = (void **)&v42;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v48);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v59;
  if (v59)
  {
    v40 = (unint64_t *)&v59->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v58 = &v51;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  mlx::core::array::~array((mlx::core::array *)&v54);
}

void sub_242479EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v28 - 120);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v28 - 120) = &a25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 120));
  mlx::core::array::~array((mlx::core::array *)(v28 - 152));
  _Unwind_Resume(a1);
}

void mlx::core::allclose(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  mlx::core *v11;
  unsigned int v12;
  _QWORD v13[2];

  mlx::core::isclose(a1, a2, a3, a4, a5, v13, a7, a8);
  v11 = mlx::core::to_stream(a4, a5);
  mlx::core::all((uint64_t)v13, 0, v11, v12 | 0x100000000, a6);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_24247A054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::isclose(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  int **v24[2];
  uint64_t v25[2];
  int **v26[2];
  _QWORD v27[2];

  v16 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v26, v16, a8);
  v17 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v24, v17, a7);
  mlx::core::abs(a2, a4, a5, &v23);
  mlx::core::multiply(v24, &v23, a4, a5, v25);
  mlx::core::add(v26, v25, a4, a5, v27);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::subtract(a1, a2, a4, a5, v25);
  mlx::core::abs(v25, a4, a5, v26);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::less_equal(v26, v27, a4, a5, a6);
  mlx::core::isinf(a1, a4, a5, v24);
  mlx::core::isinf(a2, a4, a5, &v23);
  mlx::core::logical_or(v24, &v23, a4, a5, v25);
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::isposinf(a1, a4, a5, &v22);
  mlx::core::isposinf(a2, a4, a5, v21);
  mlx::core::logical_and(&v22, v21, a4, a5, &v23);
  mlx::core::isneginf(a1, a4, a5, v19);
  mlx::core::isneginf(a2, a4, a5, v18);
  mlx::core::logical_and(v19, v18, a4, a5, v20);
  mlx::core::logical_or(&v23, v20, a4, a5, v24);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)v21);
  mlx::core::array::~array((mlx::core::array *)&v22);
  mlx::core::logical_not(v25, a4, a5, &v22);
  mlx::core::logical_and(a6, &v22, a4, a5, &v23);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v23);
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)&v22);
  mlx::core::logical_or(a6, v24, a4, a5, &v23);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v23);
  mlx::core::array::~array((mlx::core::array *)&v23);
  if (a3)
  {
    mlx::core::isnan(a1, a4, a5, &v22);
    mlx::core::isnan(a2, a4, a5, v21);
    mlx::core::logical_and(&v22, v21, a4, a5, &v23);
    mlx::core::array::~array((mlx::core::array *)v21);
    mlx::core::array::~array((mlx::core::array *)&v22);
    mlx::core::logical_or(a6, &v23, a4, a5, &v22);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v22);
    mlx::core::array::~array((mlx::core::array *)&v22);
    mlx::core::array::~array((mlx::core::array *)&v23);
  }
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::array::~array((mlx::core::array *)v27);
}

void sub_24247A3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  mlx::core::array *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array(v11);
  mlx::core::array::~array((mlx::core::array *)(v12 - 96));
  mlx::core::array::~array((mlx::core::array *)(v12 - 80));
  _Unwind_Resume(a1);
}

void mlx::core::abs(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  void *__p[3];
  void **v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134F018;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_2513503A8;
  *(_QWORD *)&v30 = v12 + 3;
  *((_QWORD *)&v30 + 1) = v12;
  v28 = 0;
  v29 = 0;
  v14 = *a1;
  v13 = a1[1];
  v34[0] = v14;
  v34[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v26 = 0uLL;
  v27 = 0;
  v32 = (void **)&v26;
  v33 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v26 = v17;
  v27 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v26 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v30, &v26);
  v32 = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)v34);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247A720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::subtract(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134F248;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_2513529A8;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_24247A9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::logical_and(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  mlx::core *v16;
  int v17;
  int v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  void *__p[3];
  _QWORD v30[2];
  void **v31[2];
  _QWORD v32[2];
  void **v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;

  v9 = a1[1];
  v32[0] = *a1;
  v32[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v32, 0x100000000, a3, a4, &v33);
  v12 = a2[1];
  v30[0] = *a2;
  v30[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  mlx::core::astype(v30, 0x100000000, a3, a4, v31);
  mlx::core::broadcast_arrays((const void ***)&v33, (const void ***)v31, a3, a4, &v35);
  mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)&v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  v15 = *(_QWORD *)v35;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 2);
  v16 = mlx::core::to_stream(a3, a4);
  v18 = v17;
  v19 = operator new(0x30uLL);
  v19[2] = 0;
  *v19 = &unk_25134F158;
  v19[1] = 0;
  v19[4] = v16;
  v19[3] = &unk_251351AD8;
  *((_DWORD *)v19 + 10) = v18;
  *(_QWORD *)&v28 = v19 + 3;
  *((_QWORD *)&v28 + 1) = v19;
  v33 = 0;
  v34 = 0;
  v26 = v35;
  v27 = v36;
  v35 = 0uLL;
  v36 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, 0x100000000, &v28, &v26);
  v31[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v31);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v33 = (void **)&v35;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_24247AC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 80);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 80) = v21 - 64;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 80));
  _Unwind_Resume(a1);
}

void mlx::core::logical_not(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  mlx::core *v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  void *__p[3];
  void **v33;
  char v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = mlx::core::to_stream(a2, a3);
  v11 = v10;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134F108;
  v12[1] = 0;
  v12[4] = v9;
  *((_DWORD *)v12 + 10) = v11;
  v12[3] = &unk_251351A50;
  *(_QWORD *)&v31 = v12 + 3;
  *((_QWORD *)&v31 + 1) = v12;
  v29 = 0;
  v30 = 0;
  v13 = a1[1];
  v26[0] = *a1;
  v26[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::astype(v26, 0x100000000, a2, a3, v35);
  v27 = 0uLL;
  v28 = 0;
  v33 = (void **)&v27;
  v34 = 0;
  v16 = operator new(0x10uLL);
  *(_QWORD *)&v27 = v16;
  *((_QWORD *)&v27 + 1) = v16;
  v28 = v16 + 2;
  v17 = v35[1];
  *v16 = v35[0];
  v16[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v27 + 1) = v16 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, 0x100000000, &v31, &v27);
  v33 = (void **)&v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
  mlx::core::array::~array((mlx::core::array *)v35);
  mlx::core::array::~array((mlx::core::array *)v26);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247AF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  mlx::core::array::~array((mlx::core::array *)&a10);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::all(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  _QWORD *v29;
  int v30;
  mlx::core *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  void *__p[3];
  void *v36;
  _BYTE *v37;
  void *v38[3];
  _QWORD v39[2];
  __int128 v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v25 = *(_QWORD *)(a1 + 8);
    v39[0] = *(_QWORD *)a1;
    v39[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    mlx::core::astype(v39, 0x100000000, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v39);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 2);
    v31 = mlx::core::to_stream(a4, a5);
    v32 = v11;
    v30 = 0;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v31, &v30, (uint64_t)v38, &v33);
    v34 = v33;
    v33 = 0uLL;
    v13 = *(uint64_t **)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v41[0] = v13;
    v41[1] = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v28 = 0uLL;
    v29 = 0;
    *(_QWORD *)&v40 = &v28;
    BYTE8(v40) = 0;
    v16 = operator new(0x10uLL);
    *(_QWORD *)&v28 = v16;
    v29 = v16 + 2;
    *v16 = v13;
    v16[1] = v12;
    if (v12)
    {
      v17 = (unint64_t *)(v12 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *((_QWORD *)&v28 + 1) = v16 + 2;
    mlx::core::array::array(a6, (__int128 *)__p, 0x100000000, &v34, &v28);
    *(_QWORD *)&v40 = &v28;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    mlx::core::array::~array((mlx::core::array *)v41);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v38, a4, a5, (const void ***)&v40);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v40);
      mlx::core::array::~array((mlx::core::array *)&v40);
    }
    if (v38[0])
    {
      v38[1] = v38[0];
      operator delete(v38[0]);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_24247B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  mlx::core::array *v22;

  mlx::core::array::~array(v22);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_24247B2C8()
{
  JUMPOUT(0x24247B2C0);
}

void mlx::core::`anonymous namespace'::compute_reduce_shape(int **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  std::logic_error *exception;
  std::logic_error *v37;
  std::string v39;
  void *__p;
  char *v41;
  _QWORD v42[31];
  int v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;

  v45 = 0;
  v46 = 0;
  v44 = (uint64_t *)&v45;
  v5 = *a2;
  v4 = a2[1];
  v6 = v4 - *a2;
  v7 = v6 >> 2;
  v9 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
  {
    v13 = 0;
    v14 = *a1;
  }
  else
  {
    v11 = (unint64_t)v6 >> 2;
    do
    {
      v12 = (v11 & (*v9 >> 31)) + *v9;
      v43 = v12;
      if ((v12 & 0x80000000) != 0 || v7 <= v12)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid axis ", 13);
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for array with ", 16);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v41, &v39);
        std::logic_error::logic_error(exception, &v39);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(exception, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
      }
      std::__tree<int>::__emplace_unique_key_args<int,int>(&v44, &v43, &v43);
      ++v9;
    }
    while (v9 != v8);
    v13 = v46;
    v9 = *a1;
    v14 = a1[1];
  }
  if (v13 != v14 - v9)
  {
    v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v37, "Duplicate axes detected in reduction.");
    v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v37, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  __p = 0;
  v41 = 0;
  v42[0] = 0;
  if (v4 == v5)
    goto LABEL_49;
  v15 = 0;
  v16 = 0;
  if (v7 <= 1)
    v7 = 1;
  do
  {
    v17 = v45;
    if (!v45)
    {
LABEL_17:
      v19 = *a2;
      if ((unint64_t)v15 < v42[0])
      {
        *(_DWORD *)v15 = *(_DWORD *)(v19 + 4 * v16);
        v20 = v15 + 4;
        goto LABEL_29;
      }
      v21 = (char *)__p;
      v22 = (v15 - (_BYTE *)__p) >> 2;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v24 = v42[0] - (_QWORD)__p;
      if ((uint64_t)(v42[0] - (_QWORD)__p) >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v42, v25);
        v21 = (char *)__p;
        v15 = v41;
      }
      else
      {
        v26 = 0;
      }
      v28 = &v26[4 * v22];
      *(_DWORD *)v28 = *(_DWORD *)(v19 + 4 * v16);
      v27 = v28 + 4;
      while (v15 != v21)
      {
        v29 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      goto LABEL_46;
    }
    while (1)
    {
      v18 = *((int *)v17 + 7);
      if (v16 >= v18)
        break;
LABEL_16:
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_17;
    }
    if (v16 > v18)
    {
      ++v17;
      goto LABEL_16;
    }
    if ((unint64_t)v15 >= v42[0])
    {
      v21 = (char *)__p;
      v30 = (v15 - (_BYTE *)__p) >> 2;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v32 = v42[0] - (_QWORD)__p;
      if ((uint64_t)(v42[0] - (_QWORD)__p) >> 1 > v31)
        v31 = v32 >> 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v31;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v42, v25);
        v21 = (char *)__p;
        v15 = v41;
      }
      else
      {
        v26 = 0;
      }
      v28 = &v26[4 * v30];
      *(_DWORD *)v28 = 1;
      v27 = v28 + 4;
      while (v15 != v21)
      {
        v33 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v28 - 1) = v33;
        v28 -= 4;
      }
LABEL_46:
      __p = v28;
      v41 = v27;
      v42[0] = &v26[4 * v25];
      if (v21)
        operator delete(v21);
      goto LABEL_48;
    }
    *(_DWORD *)v15 = 1;
    v20 = v15 + 4;
LABEL_29:
    v27 = v20;
LABEL_48:
    v41 = v27;
    ++v16;
    v15 = v27;
  }
  while (v16 != v7);
LABEL_49:
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v39, v44, &v45);
  std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]<std::vector<int>&,std::vector<int>&,0>(a3, (uint64_t)&__p, (uint64_t)&v39);
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v41 = (char *)__p;
    operator delete(__p);
  }
  std::__tree<int>::destroy((uint64_t)&v44, v45);
}

void sub_24247B684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  void *v18;
  int v19;
  uint64_t v20;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      std::__tree<int>::destroy(v20 - 120, *(_QWORD **)(v20 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t std::pair<std::vector<int>,std::vector<int>>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void mlx::core::all(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  _DWORD *v12;
  _QWORD v13[3];

  v12 = operator new(4uLL);
  *v12 = a2;
  v13[1] = v12 + 1;
  v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::all(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_24247B804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::any(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int> v13;

  std::vector<int>::vector(&v13, (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2);
  begin = v13.__begin_;
  end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::any(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_24247B8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::any(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  _QWORD *v29;
  int v30;
  mlx::core *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  void *__p[3];
  void *v36;
  _BYTE *v37;
  void *v38[3];
  _QWORD v39[2];
  __int128 v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v25 = *(_QWORD *)(a1 + 8);
    v39[0] = *(_QWORD *)a1;
    v39[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    mlx::core::astype(v39, 0x100000000, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v39);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 2);
    v31 = mlx::core::to_stream(a4, a5);
    v32 = v11;
    v30 = 1;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v31, &v30, (uint64_t)v38, &v33);
    v34 = v33;
    v33 = 0uLL;
    v13 = *(uint64_t **)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v41[0] = v13;
    v41[1] = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v28 = 0uLL;
    v29 = 0;
    *(_QWORD *)&v40 = &v28;
    BYTE8(v40) = 0;
    v16 = operator new(0x10uLL);
    *(_QWORD *)&v28 = v16;
    v29 = v16 + 2;
    *v16 = v13;
    v16[1] = v12;
    if (v12)
    {
      v17 = (unint64_t *)(v12 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *((_QWORD *)&v28 + 1) = v16 + 2;
    mlx::core::array::array(a6, (__int128 *)__p, 0x100000000, &v34, &v28);
    *(_QWORD *)&v40 = &v28;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    mlx::core::array::~array((mlx::core::array *)v41);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v38, a4, a5, (const void ***)&v40);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v40);
      mlx::core::array::~array((mlx::core::array *)&v40);
    }
    if (v38[0])
    {
      v38[1] = v38[0];
      operator delete(v38[0]);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_24247BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  mlx::core::array *v22;

  mlx::core::array::~array(v22);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_24247BC08()
{
  JUMPOUT(0x24247BC00);
}

void mlx::core::any(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  _DWORD *v12;
  _QWORD v13[3];

  v12 = operator new(4uLL);
  *v12 = a2;
  v13[1] = v12 + 1;
  v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::any(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_24247BC9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::sum(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int> v13;

  std::vector<int>::vector(&v13, (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2);
  begin = v13.__begin_;
  end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::sum(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_24247BD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::sum(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  _QWORD *v30;
  int v31;
  mlx::core *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  void *__p[3];
  void *v37;
  _BYTE *v38;
  void *v39[3];
  __int128 v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v26 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a6 = *(_QWORD *)a1;
    *((_QWORD *)a6 + 1) = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)a1 + 56))
      v11 = *(_QWORD *)(*(_QWORD *)a1 + 56);
    else
      v11 = 0x400000004;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v37, (uint64_t)v38, (v38 - (_BYTE *)v37) >> 2);
    v32 = mlx::core::to_stream(a4, a5);
    v33 = v12;
    v31 = 2;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v32, &v31, (uint64_t)v39, &v34);
    v35 = v34;
    v34 = 0uLL;
    v14 = *(uint64_t **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v41[0] = v14;
    v41[1] = v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v29 = 0uLL;
    v30 = 0;
    *(_QWORD *)&v40 = &v29;
    BYTE8(v40) = 0;
    v17 = operator new(0x10uLL);
    *(_QWORD *)&v29 = v17;
    v30 = v17 + 2;
    *v17 = v14;
    v17[1] = v13;
    if (v13)
    {
      v18 = (unint64_t *)(v13 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *((_QWORD *)&v29 + 1) = v17 + 2;
    mlx::core::array::array(a6, (__int128 *)__p, v11, &v35, &v29);
    *(_QWORD *)&v40 = &v29;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    mlx::core::array::~array((mlx::core::array *)v41);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v39, a4, a5, (const void ***)&v40);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v40);
      mlx::core::array::~array((mlx::core::array *)&v40);
    }
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
  }
}

void sub_24247C018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  mlx::core::array *v22;

  mlx::core::array::~array(v22);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_24247C08C()
{
  JUMPOUT(0x24247C084);
}

void mlx::core::sum(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  _DWORD *v12;
  _QWORD v13[3];

  v12 = operator new(4uLL);
  *v12 = a2;
  v13[1] = v12 + 1;
  v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::sum(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_24247C120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::mean(_QWORD *a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  mlx::core *v13;
  unsigned int v14;
  std::vector<int> v15;

  std::vector<int>::vector(&v15, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2);
  begin = v15.__begin_;
  end = v15.__end_;
  if (v15.__begin_ != v15.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  v13 = mlx::core::to_stream(a3, a4);
  mlx::core::mean(a1, (uint64_t)&v15, a2, v13, v14 | 0x100000000, a5);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
}

void sub_24247C1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::mean(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::logic_error *exception;
  void *__p;
  void *v21;
  uint64_t v22;
  std::string v23;
  uint64_t v24;
  uint64_t v25;

  v12 = (_QWORD *)*a1;
  v13 = *(_DWORD **)a2;
  v14 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v14)
  {
    do
    {
      if (*v13 < -(int)((v12[1] - *v12) >> 2) || *v13 >= (int)((v12[1] - *v12) >> 2))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"[mean] axis ", 12);
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is out of bounds for array with ", 33);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v25, &v23);
        std::logic_error::logic_error(exception, &v23);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  v24 = v12[7];
  v21 = 0;
  v22 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  mlx::core::number_of_elements(a1, (int **)&__p, 1, v16, a4, a5, &v24);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  mlx::core::sum((uint64_t)a1, a2, a3, a4, a5, (mlx::core::array *)&v23);
  mlx::core::multiply(&v23, &v24, a4, a5, a6);
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)&v24);
}

void sub_24247C3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t mlx::core::`anonymous namespace'::at_least_float(int *a1)
{
  if (mlx::core::issubdtype((unsigned int *)a1, &mlx::core::inexact))
    return *(_QWORD *)a1;
  else
    return mlx::core::promote_types(a1, (int *)&mlx::core::float32);
}

void mlx::core::number_of_elements(_QWORD *a1@<X0>, int **a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int *v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  mlx::core *v16;
  int v17;
  int v18;
  _QWORD *v19;
  int *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  mlx::core *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::logic_error *exception;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  void *__p[3];
  std::string v45;
  void **v46;
  char v47[256];
  _QWORD v48[3];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    v14 = (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2;
    do
    {
      v15 = (v14 + *v13) % v14;
      if ((v15 & 0x80000000) != 0 || (int)v15 >= v14)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[number_of_elements] Can't get the shape for axis ", 50);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" from an array with ", 20);
        v37 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v45);
        std::logic_error::logic_error(exception, &v45);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      *v13++ = v15;
    }
    while (v13 != v12);
  }
  memset(__p, 0, sizeof(__p));
  v16 = mlx::core::to_stream(a5, a6);
  v18 = v17;
  v19 = operator new(0x58uLL);
  v19[2] = 0;
  *v19 = &unk_25134FFB8;
  v19[1] = 0;
  v20 = a2[2];
  v21 = *(_OWORD *)a2;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v19[4] = v16;
  *((_DWORD *)v19 + 10) = v18;
  v19[3] = off_251351F18;
  *((_OWORD *)v19 + 3) = v21;
  v19[8] = v20;
  *((_BYTE *)v19 + 72) = a3;
  *(_QWORD *)((char *)v19 + 76) = a4;
  *(_QWORD *)&v43 = v19 + 3;
  *((_QWORD *)&v43 + 1) = v19;
  v41 = 0;
  v42 = 0;
  v23 = *a1;
  v22 = a1[1];
  v48[0] = v23;
  v48[1] = v22;
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v39 = 0uLL;
  v40 = 0;
  v46 = (void **)&v39;
  v47[0] = 0;
  v26 = operator new(0x10uLL);
  *(_QWORD *)&v39 = v26;
  v40 = v26 + 2;
  *v26 = v23;
  v26[1] = v22;
  if (v22)
  {
    v27 = (unint64_t *)(v22 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *((_QWORD *)&v39 + 1) = v26 + 2;
  mlx::core::array::array(&v45, (__int128 *)__p, a4, &v43, &v39);
  mlx::core::stop_gradient(&v45, v29, 0, a7);
  mlx::core::array::~array((mlx::core::array *)&v45);
  v46 = (void **)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v46);
  mlx::core::array::~array((mlx::core::array *)v48);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247C7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  void *v26;
  int v27;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void mlx::core::mean(_QWORD *a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _DWORD *v12;
  mlx::core *v13;
  unsigned int v14;
  _QWORD v15[3];

  v12 = operator new(4uLL);
  *v12 = a2;
  v15[1] = v12 + 1;
  v15[2] = v12 + 1;
  v15[0] = v12;
  v13 = mlx::core::to_stream(a4, a5);
  mlx::core::mean(a1, (uint64_t)v15, a3, v13, v14 | 0x100000000, a6);
  operator delete(v12);
}

void sub_24247C920(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::var(_QWORD *a1@<X0>, char a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v14;
  mlx::core *v15;
  unsigned int v16;
  std::vector<int> v17;

  std::vector<int>::vector(&v17, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2);
  begin = v17.__begin_;
  end = v17.__end_;
  if (v17.__begin_ != v17.__end_)
  {
    v14 = 0;
    do
      *begin++ = v14++;
    while (begin != end);
  }
  v15 = mlx::core::to_stream(a4, a5);
  mlx::core::var(a1, (uint64_t)&v17, a2, a3, v15, v16 | 0x100000000, a6);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_24247C9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::var(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  int **v15[2];
  int **v16[2];
  _QWORD v17[2];
  __int128 v18;
  void *v19[2];
  void *__p;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  int v25[4];

  *(_QWORD *)v25 = *(_QWORD *)(*a1 + 56);
  mlx::core::mean(a1, a2, a3, a5, a6, v24);
  mlx::core::square(v24, a5, a6, v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::square(a1, a5, a6, v23);
  mlx::core::mean(v23, a2, a3, a5, a6, v24);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::subtract(v24, v25, a5, a6, a7);
  if (a4)
  {
    v21 = 0;
    v22 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    mlx::core::number_of_elements(a1, (int **)&__p, 0, v14, a5, a6, v23);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
    mlx::core::array::array<int>(v16, a4, v14);
    mlx::core::subtract(v23, v16, a5, a6, v17);
    mlx::core::array::array<int>(v15, 0, v14);
    mlx::core::maximum(v17, v15, a5, a6, &v18);
    mlx::core::divide(v23, &v18, a5, a6, v19);
    mlx::core::array::~array((mlx::core::array *)&v18);
    mlx::core::array::~array((mlx::core::array *)v15);
    mlx::core::array::~array((mlx::core::array *)v17);
    mlx::core::array::~array((mlx::core::array *)v16);
    mlx::core::multiply(a7, v19, a5, a6, &v18);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a7, &v18);
    mlx::core::array::~array((mlx::core::array *)&v18);
    mlx::core::array::~array((mlx::core::array *)v19);
    mlx::core::array::~array((mlx::core::array *)v23);
  }
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v25);
}

void sub_24247CC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  mlx::core::array *v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array(v10);
  mlx::core::array::~array((mlx::core::array *)(v11 - 96));
  mlx::core::array::~array((mlx::core::array *)(v11 - 80));
  _Unwind_Resume(a1);
}

void sub_24247CC98()
{
  JUMPOUT(0x24247CC70);
}

void sub_24247CCA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x24247CC78);
}

void sub_24247CCB8()
{
  JUMPOUT(0x24247CC78);
}

void sub_24247CCC0()
{
  JUMPOUT(0x24247CC80);
}

void sub_24247CCC8()
{
  JUMPOUT(0x24247CC84);
}

void sub_24247CCD4()
{
  JUMPOUT(0x24247CC88);
}

void sub_24247CCDC()
{
  JUMPOUT(0x24247CC8CLL);
}

void mlx::core::square(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  void *__p[3];
  void **v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134F518;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_251352810;
  *(_QWORD *)&v30 = v12 + 3;
  *((_QWORD *)&v30 + 1) = v12;
  v28 = 0;
  v29 = 0;
  v14 = *a1;
  v13 = a1[1];
  v34[0] = v14;
  v34[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v26 = 0uLL;
  v27 = 0;
  v32 = (void **)&v26;
  v33 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v26 = v17;
  v27 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v26 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v30, &v26);
  v32 = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)v34);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247CEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::divide(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  mlx::core *v17;
  unsigned int v18;
  uint64_t v19;
  mlx::core *v20;
  int v21;
  int v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  void *__p[3];
  _QWORD v34[2];
  void **v35[2];
  _QWORD v36[2];
  void **v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;

  v37 = *(void ***)(*a1 + 56);
  v35[0] = *(void ***)(*a2 + 56);
  *(_QWORD *)&v39 = mlx::core::promote_types((int *)&v37, (int *)v35);
  v11 = a1[1];
  v36[0] = *a1;
  v36[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v36, v10, a3, a4, &v37);
  v14 = a2[1];
  v34[0] = *a2;
  v34[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = mlx::core::to_stream(a3, a4);
  mlx::core::astype(v34, v10, v17, v18 | 0x100000000, v35);
  mlx::core::broadcast_arrays((const void ***)&v37, (const void ***)v35, a3, a4, &v39);
  mlx::core::array::~array((mlx::core::array *)v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  mlx::core::array::~array((mlx::core::array *)&v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v19 = *(_QWORD *)v39;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
  v20 = mlx::core::to_stream(a3, a4);
  v22 = v21;
  v23 = operator new(0x30uLL);
  v23[2] = 0;
  *v23 = &unk_25134F2E8;
  v23[1] = 0;
  v23[4] = v20;
  v23[3] = &unk_2513510D0;
  *((_DWORD *)v23 + 10) = v22;
  *(_QWORD *)&v32 = v23 + 3;
  *((_QWORD *)&v32 + 1) = v23;
  v37 = 0;
  v38 = 0;
  v30 = v39;
  v31 = v40;
  v39 = 0uLL;
  v40 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v32, &v30);
  v35[0] = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v35);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v37 = (void **)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v37);
}

void sub_24247D1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::var(_QWORD *a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _DWORD *v14;
  mlx::core *v15;
  unsigned int v16;
  _QWORD v17[3];

  v14 = operator new(4uLL);
  *v14 = a2;
  v17[1] = v14 + 1;
  v17[2] = v14 + 1;
  v17[0] = v14;
  v15 = mlx::core::to_stream(a5, a6);
  mlx::core::var(a1, (uint64_t)v17, a3, a4, v15, v16 | 0x100000000, a7);
  operator delete(v14);
}

void sub_24247D2EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::std(_QWORD *a1@<X0>, char a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v14;
  mlx::core *v15;
  unsigned int v16;
  std::vector<int> v17;

  std::vector<int>::vector(&v17, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2);
  begin = v17.__begin_;
  end = v17.__end_;
  if (v17.__begin_ != v17.__end_)
  {
    v14 = 0;
    do
      *begin++ = v14++;
    while (begin != end);
  }
  v15 = mlx::core::to_stream(a4, a5);
  mlx::core::std(a1, (uint64_t)&v17, a2, a3, v15, v16 | 0x100000000, a6);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_24247D3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::std(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD v10[2];

  mlx::core::var(a1, a2, a3, a4, a5, a6, v10);
  mlx::core::sqrt(v10, a5, a6, a7);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_24247D434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::sqrt(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  void *__p[3];
  void **v34;
  char v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v34 = *(void ***)(*a1 + 56);
  v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  v10 = mlx::core::to_stream(a2, a3);
  v12 = v11;
  v13 = operator new(0x30uLL);
  v13[2] = 0;
  *v13 = &unk_25134FD88;
  v13[1] = 0;
  v13[4] = v10;
  *((_DWORD *)v13 + 10) = v12;
  v13[3] = &unk_251352898;
  *((_BYTE *)v13 + 44) = 0;
  *(_QWORD *)&v32 = v13 + 3;
  *((_QWORD *)&v32 + 1) = v13;
  v30 = 0;
  v31 = 0;
  v14 = a1[1];
  v27[0] = *a1;
  v27[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v27, v8, a2, a3, v36);
  v28 = 0uLL;
  v29 = 0;
  v34 = (void **)&v28;
  v35 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v28 = v17;
  *((_QWORD *)&v28 + 1) = v17;
  v29 = v17 + 2;
  v18 = v36[1];
  *v17 = v36[0];
  v17[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_QWORD *)&v28 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v32, &v28);
  v34 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v34);
  mlx::core::array::~array((mlx::core::array *)v36);
  mlx::core::array::~array((mlx::core::array *)v27);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247D688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v22 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::std(_QWORD *a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _DWORD *v14;
  mlx::core *v15;
  unsigned int v16;
  _QWORD v17[3];

  v14 = operator new(4uLL);
  *v14 = a2;
  v17[1] = v14 + 1;
  v17[2] = v14 + 1;
  v17[0] = v14;
  v15 = mlx::core::to_stream(a5, a6);
  mlx::core::std(a1, (uint64_t)v17, a3, a4, v15, v16 | 0x100000000, a7);
  operator delete(v14);
}

void sub_24247D794(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::prod(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int> v13;

  std::vector<int>::vector(&v13, (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2);
  begin = v13.__begin_;
  end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::prod(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_24247D850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::prod(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  _QWORD *v30;
  int v31;
  mlx::core *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  void *__p[3];
  void *v37;
  _BYTE *v38;
  void *v39[3];
  __int128 v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v26 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a6 = *(_QWORD *)a1;
    *((_QWORD *)a6 + 1) = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v37, (uint64_t)v38, (v38 - (_BYTE *)v37) >> 2);
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 56);
    v32 = mlx::core::to_stream(a4, a5);
    v33 = v12;
    v31 = 3;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v32, &v31, (uint64_t)v39, &v34);
    v35 = v34;
    v34 = 0uLL;
    v14 = *(uint64_t **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v41[0] = v14;
    v41[1] = v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v29 = 0uLL;
    v30 = 0;
    *(_QWORD *)&v40 = &v29;
    BYTE8(v40) = 0;
    v17 = operator new(0x10uLL);
    *(_QWORD *)&v29 = v17;
    v30 = v17 + 2;
    *v17 = v14;
    v17[1] = v13;
    if (v13)
    {
      v18 = (unint64_t *)(v13 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *((_QWORD *)&v29 + 1) = v17 + 2;
    mlx::core::array::array(a6, (__int128 *)__p, v11, &v35, &v29);
    *(_QWORD *)&v40 = &v29;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    mlx::core::array::~array((mlx::core::array *)v41);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v39, a4, a5, (const void ***)&v40);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v40);
      mlx::core::array::~array((mlx::core::array *)&v40);
    }
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
  }
}

void sub_24247DB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  mlx::core::array *v22;

  mlx::core::array::~array(v22);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_24247DB78()
{
  JUMPOUT(0x24247DB70);
}

void mlx::core::prod(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  _DWORD *v12;
  _QWORD v13[3];

  v12 = operator new(4uLL);
  *v12 = a2;
  v13[1] = v12 + 1;
  v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::prod(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_24247DC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::max(uint64_t **a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int> v13;

  std::vector<int>::vector(&v13, ((*a1)[1] - **a1) >> 2);
  begin = v13.__begin_;
  end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::max(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_24247DCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::max(uint64_t **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t *v7;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::logic_error *exception;
  __int128 v31;
  _QWORD *v32;
  int v33;
  mlx::core *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  void *__p[3];
  void *v39;
  _BYTE *v40;
  void *v41[3];
  __int128 v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[max] Cannot max reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v27 = a1[1];
    *a6 = v7;
    a6[1] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
    v12 = (*a1)[7];
    v34 = mlx::core::to_stream(a4, a5);
    v35 = v13;
    v33 = 5;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v34, &v33, (uint64_t)v41, &v36);
    v37 = v36;
    v36 = 0uLL;
    v15 = *a1;
    v14 = a1[1];
    v43[0] = v15;
    v43[1] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v31 = 0uLL;
    v32 = 0;
    *(_QWORD *)&v42 = &v31;
    BYTE8(v42) = 0;
    v18 = operator new(0x10uLL);
    *(_QWORD *)&v31 = v18;
    v32 = v18 + 2;
    *v18 = v15;
    v18[1] = v14;
    if (v14)
    {
      v19 = (unint64_t *)(v14 + 1);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    *((_QWORD *)&v31 + 1) = v18 + 2;
    mlx::core::array::array(a6, (__int128 *)__p, v12, &v37, &v31);
    *(_QWORD *)&v42 = &v31;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    mlx::core::array::~array((mlx::core::array *)v43);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze((mlx::core::array *)a6, (unsigned int **)v41, a4, a5, (const void ***)&v42);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v42);
      mlx::core::array::~array((mlx::core::array *)&v42);
    }
    if (v41[0])
    {
      v41[1] = v41[0];
      operator delete(v41[0]);
    }
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
  }
}

void sub_24247DFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  mlx::core::array *v22;

  mlx::core::array::~array(v22);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_24247E038()
{
  JUMPOUT(0x24247E030);
}

void mlx::core::max(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  _DWORD *v12;
  _QWORD v13[3];

  v12 = operator new(4uLL);
  *v12 = a2;
  v13[1] = v12 + 1;
  v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::max(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_24247E0CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::min(uint64_t **a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int> v13;

  std::vector<int>::vector(&v13, ((*a1)[1] - **a1) >> 2);
  begin = v13.__begin_;
  end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::min(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_24247E188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::min(uint64_t **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t *v7;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::logic_error *exception;
  __int128 v31;
  _QWORD *v32;
  int v33;
  mlx::core *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  void *__p[3];
  void *v39;
  _BYTE *v40;
  void *v41[3];
  __int128 v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[min] Cannot min reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v27 = a1[1];
    *a6 = v7;
    a6[1] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
    v12 = (*a1)[7];
    v34 = mlx::core::to_stream(a4, a5);
    v35 = v13;
    v33 = 4;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v34, &v33, (uint64_t)v41, &v36);
    v37 = v36;
    v36 = 0uLL;
    v15 = *a1;
    v14 = a1[1];
    v43[0] = v15;
    v43[1] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v31 = 0uLL;
    v32 = 0;
    *(_QWORD *)&v42 = &v31;
    BYTE8(v42) = 0;
    v18 = operator new(0x10uLL);
    *(_QWORD *)&v31 = v18;
    v32 = v18 + 2;
    *v18 = v15;
    v18[1] = v14;
    if (v14)
    {
      v19 = (unint64_t *)(v14 + 1);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    *((_QWORD *)&v31 + 1) = v18 + 2;
    mlx::core::array::array(a6, (__int128 *)__p, v12, &v37, &v31);
    *(_QWORD *)&v42 = &v31;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    mlx::core::array::~array((mlx::core::array *)v43);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze((mlx::core::array *)a6, (unsigned int **)v41, a4, a5, (const void ***)&v42);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v42);
      mlx::core::array::~array((mlx::core::array *)&v42);
    }
    if (v41[0])
    {
      v41[1] = v41[0];
      operator delete(v41[0]);
    }
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
  }
}

void sub_24247E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  mlx::core::array *v22;

  mlx::core::array::~array(v22);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_24247E4F8()
{
  JUMPOUT(0x24247E4F0);
}

void mlx::core::min(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  _DWORD *v12;
  _QWORD v13[3];

  v12 = operator new(4uLL);
  *v12 = a2;
  v13[1] = v12 + 1;
  v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::min(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_24247E58C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::argmin(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  const void *v10;
  _DWORD *v11;
  std::vector<int>::size_type v12;
  std::vector<int>::value_type __x;
  std::vector<int> v14;
  void *__p;
  void *v16;
  _DWORD *v17;
  __int128 v18;

  v10 = (*a1)[6];
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = (_DWORD)v10;
  v16 = v11 + 1;
  v17 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, (const void ***)&v18);
  mlx::core::argmin((uint64_t **)&v18, 0, 1, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)&v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (a2)
  {
    v12 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
    __x = 1;
    std::vector<int>::vector(&v14, v12, &__x);
    mlx::core::reshape((const void ***)a5, (uint64_t)&v14, a3, a4, (const void ***)&v18);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a5, &v18);
    mlx::core::array::~array((mlx::core::array *)&v18);
    if (v14.__begin_)
    {
      v14.__end_ = v14.__begin_;
      operator delete(v14.__begin_);
    }
  }
  else
  {
    mlx::core::squeeze(a5, a3, a4, (const void ***)&v18);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a5, &v18);
    mlx::core::array::~array((mlx::core::array *)&v18);
  }
}

void sub_24247E6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  mlx::core::array *v17;

  mlx::core::array::~array(v17);
  _Unwind_Resume(a1);
}

void mlx::core::argmin(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t *v7;
  _DWORD *v13;
  mlx::core *v14;
  int v15;
  int v16;
  int *v17;
  _QWORD *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::logic_error *exception;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  void *__p[3];
  __int128 v40;
  _DWORD *v41;
  void *v42;
  _BYTE *v43;
  void *v44[3];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[argmin] Cannot argmin reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v13 = operator new(4uLL);
  *v13 = a2;
  *((_QWORD *)&v40 + 1) = v13 + 1;
  v41 = v13 + 1;
  *(_QWORD *)&v40 = v13;
  operator delete(v13);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 2);
  v14 = mlx::core::to_stream(a4, a5);
  v16 = v15;
  v17 = (int *)v44[0];
  v18 = operator new(0x38uLL);
  v18[2] = 0;
  *v18 = &unk_25134EE88;
  v18[1] = 0;
  v19 = *v17;
  v18[3] = &unk_251350980;
  v18[4] = v14;
  *((_DWORD *)v18 + 10) = v16;
  *((_DWORD *)v18 + 11) = 0;
  *((_DWORD *)v18 + 12) = v19;
  *(_QWORD *)&v38 = v18 + 3;
  *((_QWORD *)&v38 + 1) = v18;
  v36 = 0;
  v37 = 0;
  v21 = *a1;
  v20 = a1[1];
  v45[0] = v21;
  v45[1] = v20;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 1);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v34 = 0uLL;
  v35 = 0;
  *(_QWORD *)&v40 = &v34;
  BYTE8(v40) = 0;
  v24 = operator new(0x10uLL);
  *(_QWORD *)&v34 = v24;
  v35 = v24 + 2;
  *v24 = v21;
  v24[1] = v20;
  if (v20)
  {
    v25 = (unint64_t *)(v20 + 1);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *((_QWORD *)&v34 + 1) = v24 + 2;
  mlx::core::array::array(a6, (__int128 *)__p, 0x400000002, &v38, &v34);
  *(_QWORD *)&v40 = &v34;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  mlx::core::array::~array((mlx::core::array *)v45);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((a3 & 1) == 0)
  {
    mlx::core::squeeze(a6, (unsigned int **)v44, a4, a5, (const void ***)&v40);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v40);
    mlx::core::array::~array((mlx::core::array *)&v40);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void sub_24247EA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_24247EA98()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x24247EA90);
}

void mlx::core::argmax(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  const void *v10;
  _DWORD *v11;
  std::vector<int>::size_type v12;
  std::vector<int>::value_type __x;
  std::vector<int> v14;
  void *__p;
  void *v16;
  _DWORD *v17;
  __int128 v18;

  v10 = (*a1)[6];
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = (_DWORD)v10;
  v16 = v11 + 1;
  v17 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, (const void ***)&v18);
  mlx::core::argmax((uint64_t **)&v18, 0, 1, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)&v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (a2)
  {
    v12 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
    __x = 1;
    std::vector<int>::vector(&v14, v12, &__x);
    mlx::core::reshape((const void ***)a5, (uint64_t)&v14, a3, a4, (const void ***)&v18);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a5, &v18);
    mlx::core::array::~array((mlx::core::array *)&v18);
    if (v14.__begin_)
    {
      v14.__end_ = v14.__begin_;
      operator delete(v14.__begin_);
    }
  }
  else
  {
    mlx::core::squeeze(a5, a3, a4, (const void ***)&v18);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a5, &v18);
    mlx::core::array::~array((mlx::core::array *)&v18);
  }
}

void sub_24247EBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  mlx::core::array *v17;

  mlx::core::array::~array(v17);
  _Unwind_Resume(a1);
}

void mlx::core::argmax(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t *v7;
  _DWORD *v13;
  mlx::core *v14;
  int v15;
  int *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::logic_error *exception;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  void *__p[3];
  __int128 v39;
  _DWORD *v40;
  void *v41;
  _BYTE *v42;
  void *v43[3];
  _QWORD v44[3];

  v44[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[argmax] Cannot argmax reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v13 = operator new(4uLL);
  *v13 = a2;
  *((_QWORD *)&v39 + 1) = v13 + 1;
  v40 = v13 + 1;
  *(_QWORD *)&v39 = v13;
  operator delete(v13);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
  v14 = mlx::core::to_stream(a4, a5);
  LODWORD(v13) = v15;
  v16 = (int *)v43[0];
  v17 = operator new(0x38uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &unk_25134EE88;
  v18 = *v16;
  v17[4] = v14;
  v17[3] = &unk_251350980;
  *((_DWORD *)v17 + 10) = (_DWORD)v13;
  *((_DWORD *)v17 + 11) = 1;
  *((_DWORD *)v17 + 12) = v18;
  *(_QWORD *)&v37 = v17 + 3;
  *((_QWORD *)&v37 + 1) = v17;
  v35 = 0;
  v36 = 0;
  v20 = *a1;
  v19 = a1[1];
  v44[0] = v20;
  v44[1] = v19;
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 1);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v33 = 0uLL;
  v34 = 0;
  *(_QWORD *)&v39 = &v33;
  BYTE8(v39) = 0;
  v23 = operator new(0x10uLL);
  *(_QWORD *)&v33 = v23;
  v34 = v23 + 2;
  *v23 = v20;
  v23[1] = v19;
  if (v19)
  {
    v24 = (unint64_t *)(v19 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *((_QWORD *)&v33 + 1) = v23 + 2;
  mlx::core::array::array(a6, (__int128 *)__p, 0x400000002, &v37, &v33);
  *(_QWORD *)&v39 = &v33;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  mlx::core::array::~array((mlx::core::array *)v44);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((a3 & 1) == 0)
  {
    mlx::core::squeeze(a6, (unsigned int **)v43, a4, a5, (const void ***)&v39);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a6, &v39);
    mlx::core::array::~array((mlx::core::array *)&v39);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_24247EF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_24247EFA4()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x24247EF9CLL);
}

void mlx::core::sort(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const void *v8;
  _DWORD *v9;
  void *__p;
  void *v11;
  _DWORD *v12;
  const void **v13[2];

  v8 = (*a1)[6];
  v9 = operator new(4uLL);
  __p = v9;
  *v9 = (_DWORD)v8;
  v11 = v9 + 1;
  v12 = v9 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a2, a3, v13);
  mlx::core::sort((mlx::core::array *)v13, 0, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v13);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_24247F058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::sort(mlx::core::array *this@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::logic_error *exception;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  __int128 v37;
  _QWORD *v38;
  __int128 v39;
  void *__p[3];
  std::string v41;
  void **v42;
  _BYTE v43[256];
  _QWORD v44[3];

  v44[2] = *MEMORY[0x24BDAC8D0];
  v8 = (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
  if ((int)v8 <= a2 || (_DWORD)v8 + a2 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"[sort] Received invalid axis ", 29);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" for array with ", 16);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v43, &v41);
    std::logic_error::logic_error(exception, &v41);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (mlx::core::array::shape(this, a2) >= 0x200000
    && (unint64_t)mlx::core::to_stream(a3, a4) >> 32 == 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v42);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"[sort] GPU sort cannot handle sort axis of >= 2M elements,", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" got array with sort axis size ", 31);
    mlx::core::array::shape(this, a2);
    v34 = (_QWORD *)std::ostream::operator<<();
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)".", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" Please place this operation on the CPU instead.", 48);
    v36 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v43, &v41);
    MEMORY[0x2426A8084](v36, &v41);
    __cxa_throw(v36, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v11 = *(_QWORD *)this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2);
  v12 = *(_QWORD *)(*(_QWORD *)this + 56);
  v13 = mlx::core::to_stream(a3, a4);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134EED8;
  v16[1] = 0;
  v16[4] = v13;
  v16[3] = &unk_251352710;
  *((_DWORD *)v16 + 10) = v15;
  *((_DWORD *)v16 + 11) = a2;
  *(_QWORD *)&v39 = v16 + 3;
  *((_QWORD *)&v39 + 1) = v16;
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = 0uLL;
  v18 = *(_QWORD *)this;
  v17 = *((_QWORD *)this + 1);
  v44[0] = v18;
  v44[1] = v17;
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v37 = 0uLL;
  v38 = 0;
  v42 = (void **)&v37;
  v43[0] = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v37 = v21;
  v38 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v37 + 1) = v21 + 2;
  mlx::core::array::array(a5, (__int128 *)__p, v12, &v39, &v37);
  v42 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v42);
  mlx::core::array::~array((mlx::core::array *)v44);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  size = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
  if (v41.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247F44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::argsort(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const void *v8;
  _DWORD *v9;
  void *__p;
  void *v11;
  _DWORD *v12;
  const void **v13[2];

  v8 = (*a1)[6];
  v9 = operator new(4uLL);
  __p = v9;
  *v9 = (_DWORD)v8;
  v11 = v9 + 1;
  v12 = v9 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a2, a3, v13);
  mlx::core::argsort((mlx::core::array *)v13, 0, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v13);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_24247F598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::argsort(mlx::core::array *this@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  mlx::core *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  std::logic_error *exception;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  __int128 v36;
  _QWORD *v37;
  __int128 v38;
  void *__p[3];
  std::string v40;
  void **v41;
  _BYTE v42[256];
  _QWORD v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  v8 = (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
  if ((int)v8 <= a2 || (_DWORD)v8 + a2 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"[argsort] Received invalid axis ", 32);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" for array with ", 16);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v42, &v40);
    std::logic_error::logic_error(exception, &v40);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (mlx::core::array::shape(this, a2) >= 0x200000
    && (unint64_t)mlx::core::to_stream(a3, a4) >> 32 == 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v41);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"[argsort] GPU sort cannot handle sort axis of >= 2M elements,", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" got array with sort axis size ", 31);
    mlx::core::array::shape(this, a2);
    v33 = (_QWORD *)std::ostream::operator<<();
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)".", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" Please place this operation on the CPU instead.", 48);
    v35 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v42, &v40);
    MEMORY[0x2426A8084](v35, &v40);
    __cxa_throw(v35, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v11 = *(_QWORD *)this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2);
  v12 = mlx::core::to_stream(a3, a4);
  v14 = v13;
  v15 = operator new(0x30uLL);
  v15[2] = 0;
  *v15 = &unk_25134EF28;
  v15[1] = 0;
  v15[4] = v12;
  v15[3] = &unk_251350A08;
  *((_DWORD *)v15 + 10) = v14;
  *((_DWORD *)v15 + 11) = a2;
  *(_QWORD *)&v38 = v15 + 3;
  *((_QWORD *)&v38 + 1) = v15;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = 0uLL;
  v17 = *(_QWORD *)this;
  v16 = *((_QWORD *)this + 1);
  v43[0] = v17;
  v43[1] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v36 = 0uLL;
  v37 = 0;
  v41 = (void **)&v36;
  v42[0] = 0;
  v20 = operator new(0x10uLL);
  *(_QWORD *)&v36 = v20;
  v37 = v20 + 2;
  *v20 = v17;
  v20[1] = v16;
  if (v16)
  {
    v21 = (unint64_t *)(v16 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)&v36 + 1) = v20 + 2;
  mlx::core::array::array(a5, (__int128 *)__p, 0x400000002, &v38, &v36);
  v41 = (void **)&v36;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v41);
  mlx::core::array::~array((mlx::core::array *)v43);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  size = (std::__shared_weak_count *)v40.__r_.__value_.__l.__size_;
  if (v40.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(v40.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247F980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::partition(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  const void *v10;
  _DWORD *v11;
  void *__p;
  void *v13;
  _DWORD *v14;
  const void **v15[2];

  v10 = (*a1)[6];
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = (_DWORD)v10;
  v13 = v11 + 1;
  v14 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v15);
  mlx::core::partition((mlx::core::array *)v15, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_24247FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::partition(mlx::core::array *this@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  mlx::core *v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  std::logic_error *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::logic_error *exception;
  __int128 v40;
  _QWORD *v41;
  __int128 v42;
  void *__p[3];
  std::string v44;
  void **v45;
  _BYTE v46[256];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  v9 = (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
  if ((int)v9 <= a3 || (_DWORD)v9 + a3 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"[partition] Received invalid axis ", 34);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" for array with ", 16);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46, &v44);
    std::logic_error::logic_error(exception, &v44);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v12 = a2;
  if (a2 < 0 && (v12 = mlx::core::array::shape(this, a3) + a2, v12 < 0)
    || (v13 = (v9 & (a3 >> 31)) + a3, v12 >= (int)mlx::core::array::shape(this, v13)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"[partition] Received invalid kth ", 33);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"along axis ", 11);
    v34 = (_QWORD *)std::ostream::operator<<();
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for array with shape: ", 23);
    mlx::core::operator<<(v35, *(_QWORD **)this);
    v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46, &v44);
    std::logic_error::logic_error(v36, &v44);
    v36->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v36, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v14 = *(_QWORD *)this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
  v15 = *(_QWORD *)(*(_QWORD *)this + 56);
  v16 = mlx::core::to_stream(a4, a5);
  v18 = v17;
  v19 = operator new(0x38uLL);
  *v19 = &unk_25134EF78;
  v19[1] = 0;
  v19[3] = &unk_251352028;
  v19[2] = 0;
  v19[4] = v16;
  *((_DWORD *)v19 + 10) = v18;
  *((_DWORD *)v19 + 11) = v12;
  *((_DWORD *)v19 + 12) = v13;
  *(_QWORD *)&v42 = v19 + 3;
  *((_QWORD *)&v42 + 1) = v19;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = 0uLL;
  v21 = *(_QWORD *)this;
  v20 = *((_QWORD *)this + 1);
  v47[0] = v21;
  v47[1] = v20;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v40 = 0uLL;
  v41 = 0;
  v45 = (void **)&v40;
  v46[0] = 0;
  v24 = operator new(0x10uLL);
  *(_QWORD *)&v40 = v24;
  v41 = v24 + 2;
  *v24 = v21;
  v24[1] = v20;
  if (v20)
  {
    v25 = (unint64_t *)(v20 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *((_QWORD *)&v40 + 1) = v24 + 2;
  mlx::core::array::array(a6, (__int128 *)__p, v15, &v42, &v40);
  v45 = (void **)&v40;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v45);
  mlx::core::array::~array((mlx::core::array *)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  size = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
  if (v44.__r_.__value_.__l.__size_)
  {
    v31 = (unint64_t *)(v44.__r_.__value_.__l.__size_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24247FEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::argpartition(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  const void *v10;
  _DWORD *v11;
  void *__p;
  void *v13;
  _DWORD *v14;
  const void **v15[2];

  v10 = (*a1)[6];
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = (_DWORD)v10;
  v13 = v11 + 1;
  v14 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v15);
  mlx::core::argpartition((mlx::core::array *)v15, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_242480034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::argpartition(mlx::core::array *this@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  int v12;
  int v13;
  uint64_t v14;
  mlx::core *v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::logic_error *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::logic_error *exception;
  __int128 v39;
  _QWORD *v40;
  __int128 v41;
  void *__p[3];
  std::string v43;
  void **v44;
  _BYTE v45[256];
  _QWORD v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  v9 = (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
  if ((int)v9 <= a3 || (_DWORD)v9 + a3 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"[argpartition] Received invalid axis ", 37);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" for array with ", 16);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v45, &v43);
    std::logic_error::logic_error(exception, &v43);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v12 = a2;
  if (a2 < 0 && (v12 = mlx::core::array::shape(this, a3) + a2, v12 < 0)
    || (v13 = (v9 & (a3 >> 31)) + a3, v12 >= (int)mlx::core::array::shape(this, v13)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"[argpartition] Received invalid kth ", 36);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" along axis ", 12);
    v33 = (_QWORD *)std::ostream::operator<<();
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" for array with shape: ", 23);
    mlx::core::operator<<(v34, *(_QWORD **)this);
    v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v45, &v43);
    std::logic_error::logic_error(v35, &v43);
    v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v35, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v14 = *(_QWORD *)this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
  v15 = mlx::core::to_stream(a4, a5);
  v17 = v16;
  v18 = operator new(0x38uLL);
  *v18 = &unk_25134EFC8;
  v18[1] = 0;
  v18[3] = &unk_2513508F8;
  v18[2] = 0;
  v18[4] = v15;
  *((_DWORD *)v18 + 10) = v17;
  *((_DWORD *)v18 + 11) = v12;
  *((_DWORD *)v18 + 12) = v13;
  *(_QWORD *)&v41 = v18 + 3;
  *((_QWORD *)&v41 + 1) = v18;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = 0uLL;
  v20 = *(_QWORD *)this;
  v19 = *((_QWORD *)this + 1);
  v46[0] = v20;
  v46[1] = v19;
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v39 = 0uLL;
  v40 = 0;
  v44 = (void **)&v39;
  v45[0] = 0;
  v23 = operator new(0x10uLL);
  *(_QWORD *)&v39 = v23;
  v40 = v23 + 2;
  *v23 = v20;
  v23[1] = v19;
  if (v19)
  {
    v24 = (unint64_t *)(v19 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *((_QWORD *)&v39 + 1) = v23 + 2;
  mlx::core::array::array(a6, (__int128 *)__p, 0x400000002, &v41, &v39);
  v44 = (void **)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v44);
  mlx::core::array::~array((mlx::core::array *)v46);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24248043C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::topk(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const void *v10;
  _DWORD *v11;
  void *__p;
  void *v13;
  _DWORD *v14;
  const void **v15[2];

  v10 = (*a1)[6];
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = (_DWORD)v10;
  v13 = v11 + 1;
  v14 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v15);
  mlx::core::topk((mlx::core::array *)v15, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_242480590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::topk(mlx::core::array *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::vector<int>::size_type v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  std::logic_error *exception;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::logic_error *v24;
  const void **v25[2];
  std::string __x;
  std::vector<int> v27;

  LODWORD(v11) = a3;
  if ((a3 & 0x80000000) != 0)
    v11 = a3 + ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2);
  if ((v11 & 0x80000000) != 0 || (int)v11 >= (int)((*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"[topk] Received invalid axis ", 29);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" for array with ", 16);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27.__end_, &__x);
    std::logic_error::logic_error(exception, &__x);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (a2 < 0 || (int)mlx::core::array::shape(this, v11) < a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"[topk] Received invalid k=", 26);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" along axis ", 12);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" for array with shape: ", 23);
    mlx::core::operator<<(v23, *(_QWORD **)this);
    v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27.__end_, &__x);
    std::logic_error::logic_error(v24, &__x);
    v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v24, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (mlx::core::array::shape(this, v11) == a2)
  {
    v12 = *((_QWORD *)this + 1);
    *(_QWORD *)a6 = *(_QWORD *)this;
    *(_QWORD *)(a6 + 8) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    mlx::core::partition(this, -a2, v11, a4, a5, v25);
    v15 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
    LODWORD(__x.__r_.__value_.__l.__data_) = 0;
    std::vector<int>::vector(&v27, v15, (const std::vector<int>::value_type *)&__x);
    v16 = *(_QWORD *)this;
    memset(&__x, 0, sizeof(__x));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 2);
    v17 = mlx::core::array::shape(this, v11);
    v27.__begin_[v11] = v17 - a2;
    mlx::core::slice(v25, (uint64_t)&v27, (uint64_t)&__x, a4, a5, (const void ***)a6);
    if (__x.__r_.__value_.__r.__words[0])
    {
      __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    if (v27.__begin_)
    {
      v27.__end_ = v27.__begin_;
      operator delete(v27.__begin_);
    }
    mlx::core::array::~array((mlx::core::array *)v25);
  }
}

void sub_2424808B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  void *v18;
  int v19;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void mlx::core::logsumexp(uint64_t **a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int> v13;

  std::vector<int>::vector(&v13, ((*a1)[1] - **a1) >> 2);
  begin = v13.__begin_;
  end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::logsumexp(a1, (unsigned int **)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_2424809F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::logsumexp(uint64_t **a1@<X0>, unsigned int **a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];
  const void **v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;

  mlx::core::max(a1, (uint64_t)a2, 1, a4, a5, (uint64_t **)&v26);
  mlx::core::stop_gradient(&v26, a4, a5, &v27);
  mlx::core::array::~array((mlx::core::array *)&v26);
  mlx::core::subtract(a1, &v27, a4, a5, v23);
  mlx::core::exp(v23, a4, a5, v24);
  mlx::core::sum((uint64_t)v24, (uint64_t)a2, a3, a4, a5, (mlx::core::array *)&v25);
  mlx::core::log(&v25, a4, a5, &v26);
  mlx::core::array::~array((mlx::core::array *)&v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v23);
  v21 = 0;
  v22 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v26, *(_QWORD *)(v26 + 8), (uint64_t)(*(_QWORD *)(v26 + 8) - *(_QWORD *)v26) >> 2);
  mlx::core::reshape((const void ***)&v27, (uint64_t)&__p, a4, a5, v24);
  mlx::core::add(&v26, v24, a4, a5, &v25);
  v12 = v25;
  v25 = 0uLL;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  v26 = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if ((a3 & 1) == 0)
  {
    mlx::core::squeeze((mlx::core::array *)&v27, a2, a4, a5, (const void ***)&v25);
    v16 = v25;
    v25 = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    v27 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v25);
  }
  mlx::core::isinf(&v27, a4, a5, &v25);
  mlx::core::where(&v25, &v27, &v26, a4, a5, a6);
  mlx::core::array::~array((mlx::core::array *)&v25);
  mlx::core::array::~array((mlx::core::array *)&v26);
  mlx::core::array::~array((mlx::core::array *)&v27);
}

void sub_242480C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  mlx::core::array::~array((mlx::core::array *)&a19);
  mlx::core::array::~array((mlx::core::array *)(v19 - 64));
  _Unwind_Resume(a1);
}

void sub_242480CDC()
{
  JUMPOUT(0x242480CCCLL);
}

void sub_242480CE4()
{
  JUMPOUT(0x242480CD0);
}

void mlx::core::stop_gradient(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  void *__p[3];
  void **v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134FBF8;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_251352920;
  *(_QWORD *)&v30 = v12 + 3;
  *((_QWORD *)&v30 + 1) = v12;
  v28 = 0;
  v29 = 0;
  v14 = *a1;
  v13 = a1[1];
  v34[0] = v14;
  v34[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v26 = 0uLL;
  v27 = 0;
  v32 = (void **)&v26;
  v33 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v26 = v17;
  v27 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v26 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v30, &v26);
  v32 = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)v34);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242480EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::log(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  *v16 = &unk_25134FA18;
  v16[1] = 0;
  v16[3] = &unk_251351940;
  v16[2] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  *((_DWORD *)v16 + 11) = 2;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_2424811A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void sub_242481208()
{
  JUMPOUT(0x2424811FCLL);
}

void sub_242481214()
{
  JUMPOUT(0x242481200);
}

void mlx::core::exp(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F568;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251351478;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242481474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::logsumexp(uint64_t **a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unsigned int *v12;
  unsigned int *v13[3];

  v12 = (unsigned int *)operator new(4uLL);
  *v12 = a2;
  v13[1] = v12 + 1;
  v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::logsumexp(a1, v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_242481574(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::negative(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::logic_error *exception;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  void *__p[3];
  void **v33;
  char v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (!*(_DWORD *)(*a1 + 56))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[negative] Not supported for BOOL, use logical_not instead.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134F068;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_251351E08;
  *(_QWORD *)&v31 = v12 + 3;
  *((_QWORD *)&v31 + 1) = v12;
  v29 = 0;
  v30 = 0;
  v14 = *a1;
  v13 = a1[1];
  v35[0] = v14;
  v35[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v27 = 0uLL;
  v28 = 0;
  v33 = (void **)&v27;
  v34 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v27 = v17;
  v28 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v27 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v31, &v27);
  v33 = (void **)&v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
  mlx::core::array::~array((mlx::core::array *)v35);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2424817C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void mlx::core::operator-(_QWORD *a1@<X0>, mlx::core *a2@<X1>, _QWORD *a3@<X8>)
{
  mlx::core::negative(a1, a2, 0, a3);
}

void mlx::core::sign(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  void *__p[3];
  void **v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134F0B8;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_251352468;
  *(_QWORD *)&v30 = v12 + 3;
  *((_QWORD *)&v30 + 1) = v12;
  v28 = 0;
  v29 = 0;
  v14 = *a1;
  v13 = a1[1];
  v34[0] = v14;
  v34[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v26 = 0uLL;
  v27 = 0;
  v32 = (void **)&v26;
  v33 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v26 = v17;
  v27 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v26 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v30, &v26);
  v32 = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)v34);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242481A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::operator&&(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::logical_and(a1, a2, a3, 0, a4);
}

void mlx::core::operator||(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::logical_or(a1, a2, a3, 0, a4);
}

void mlx::core::reciprocal(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  mlx::core *v9;
  unsigned int v10;
  int **v11[2];

  v11[0] = *(int ***)(*a1 + 56);
  mlx::core::array::array<float>(v11, v8, 1.0);
  v9 = mlx::core::to_stream(a2, a3);
  mlx::core::divide(v11, a1, v9, v10 | 0x100000000, a4);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_242481B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::operator+(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::add(a1, a2, a3, 0, a4);
}

void mlx::core::operator-(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::subtract(a1, a2, a3, 0, a4);
}

void mlx::core::operator*(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::multiply(a1, a2, a3, 0, a4);
}

void mlx::core::operator/(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::divide(a1, a2, a3, 0, a4);
}

void mlx::core::operator/(_QWORD *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  mlx::core *v7;
  int **v8[2];

  v6 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v8, v6, a3);
  mlx::core::divide(v8, a1, v7, 0, a2);
  mlx::core::array::~array((mlx::core::array *)v8);
}

{
  uint64_t v6;
  mlx::core *v7;
  int **v8[2];

  v6 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v8, v6, a3);
  mlx::core::divide(a1, v8, v7, 0, a2);
  mlx::core::array::~array((mlx::core::array *)v8);
}

void sub_242481BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void sub_242481C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::floor_divide(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)&v37 = *(_QWORD *)(*a1 + 56);
  v35 = *(void ***)(*a2 + 56);
  v39 = mlx::core::promote_types((int *)&v37, (int *)&v35);
  if (mlx::core::issubdtype((unsigned int *)&v39, &mlx::core::inexact))
  {
    mlx::core::divide(a1, a2, a3, a4, &v37);
    mlx::core::floor(&v37, a3, a4, a5);
    mlx::core::array::~array((mlx::core::array *)&v37);
  }
  else
  {
    v10 = a1[1];
    v34[0] = *a1;
    v34[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    mlx::core::astype(v34, v39, a3, a4, &v35);
    v13 = a2[1];
    v32[0] = *a2;
    v32[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    mlx::core::astype(v32, v39, a3, a4, v33);
    mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
    mlx::core::array::~array((mlx::core::array *)v33);
    mlx::core::array::~array((mlx::core::array *)v32);
    mlx::core::array::~array((mlx::core::array *)&v35);
    mlx::core::array::~array((mlx::core::array *)v34);
    v16 = *(_QWORD *)v37;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 2);
    v17 = v39;
    v18 = mlx::core::to_stream(a3, a4);
    v20 = v19;
    v21 = operator new(0x30uLL);
    v21[2] = 0;
    *v21 = &unk_25134F2E8;
    v21[1] = 0;
    v21[4] = v18;
    v21[3] = &unk_2513510D0;
    *((_DWORD *)v21 + 10) = v20;
    *(_QWORD *)&v30 = v21 + 3;
    *((_QWORD *)&v30 + 1) = v21;
    v35 = 0;
    v36 = 0;
    v28 = v37;
    v29 = v38;
    v37 = 0uLL;
    v38 = 0;
    mlx::core::array::array(a5, (__int128 *)__p, v17, &v30, &v28);
    v33[0] = (void **)&v28;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v35 = (void **)&v37;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
  }
}

void sub_242481EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::floor(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  void *__p[3];
  void **v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134F478;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_251351588;
  *(_QWORD *)&v30 = v12 + 3;
  *((_QWORD *)&v30 + 1) = v12;
  v28 = 0;
  v29 = 0;
  v14 = *a1;
  v13 = a1[1];
  v34[0] = v14;
  v34[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v26 = 0uLL;
  v27 = 0;
  v32 = (void **)&v26;
  v33 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v26 = v17;
  v27 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v26 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v30, &v26);
  v32 = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)v34);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242482198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::remainder(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  mlx::core *v17;
  unsigned int v18;
  uint64_t v19;
  mlx::core *v20;
  int v21;
  int v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  void *__p[3];
  _QWORD v34[2];
  void **v35[2];
  _QWORD v36[2];
  void **v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;

  *(_QWORD *)&v39 = *(_QWORD *)(*a1 + 56);
  v37 = *(void ***)(*a2 + 56);
  v10 = mlx::core::promote_types((int *)&v39, (int *)&v37);
  v11 = a1[1];
  v36[0] = *a1;
  v36[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v36, v10, a3, a4, &v37);
  v14 = a2[1];
  v34[0] = *a2;
  v34[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = mlx::core::to_stream(a3, a4);
  mlx::core::astype(v34, v10, v17, v18 | 0x100000000, v35);
  mlx::core::broadcast_arrays((const void ***)&v37, (const void ***)v35, a3, a4, &v39);
  mlx::core::array::~array((mlx::core::array *)v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  mlx::core::array::~array((mlx::core::array *)&v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v19 = *(_QWORD *)v39;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
  v20 = mlx::core::to_stream(a3, a4);
  v22 = v21;
  v23 = operator new(0x30uLL);
  v23[2] = 0;
  *v23 = &unk_25134F338;
  v23[1] = 0;
  v23[4] = v20;
  v23[3] = &unk_251351258;
  *((_DWORD *)v23 + 10) = v22;
  *(_QWORD *)&v32 = v23 + 3;
  *((_QWORD *)&v32 + 1) = v23;
  v37 = 0;
  v38 = 0;
  v30 = v39;
  v31 = v40;
  v39 = 0uLL;
  v40 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v32, &v30);
  v35[0] = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v35);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v37 = (void **)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v37);
}

void sub_24248245C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::operator%(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::remainder(a1, a2, a3, 0, a4);
}

void mlx::core::divmod(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  mlx::core *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  mlx::core *v23;
  int v24;
  int v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t i;
  const void **v31;
  std::logic_error *exception;
  char *v33;
  std::__shared_weak_count *v34;
  void *__p;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD v41[2];
  _QWORD v42[2];
  int v43[6];
  uint64_t v44;
  const void **v45[3];
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v45[0] = *(const void ***)(*a1 + 56);
  *(_QWORD *)v43 = *(_QWORD *)(*a2 + 56);
  v44 = mlx::core::promote_types((int *)v45, v43);
  if (mlx::core::issubdtype((unsigned int *)&v44, &mlx::core::complexfloating))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[divmod] Complex type not supported.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v10 = a1[1];
  v42[0] = *a1;
  v42[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  mlx::core::astype(v42, v44, a3, a4, v45);
  v13 = a2[1];
  v41[0] = *a2;
  v41[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = v44;
  v17 = mlx::core::to_stream(a3, a4);
  mlx::core::astype(v41, v16, v17, v18 | 0x100000000, &__p);
  mlx::core::broadcast_arrays(v45, (const void ***)&__p, a3, a4, v43);
  mlx::core::array::~array((mlx::core::array *)&__p);
  mlx::core::array::~array((mlx::core::array *)v41);
  mlx::core::array::~array((mlx::core::array *)v45);
  mlx::core::array::~array((mlx::core::array *)v42);
  v19 = **(_QWORD **)v43;
  memset(v45, 0, sizeof(v45));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v45, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
  v20 = **(_QWORD **)v43;
  v47[0] = 0;
  v47[1] = 0;
  v46 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  __p = &v38;
  LOBYTE(v36) = 0;
  v38 = operator new(0x30uLL);
  v39 = v38;
  v40 = v38 + 6;
  v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v40, (uint64_t)v45, (uint64_t)&v48, v38);
  v21 = *(_QWORD *)(**(_QWORD **)v43 + 56);
  v22 = operator new(0x10uLL);
  v36 = v22 + 2;
  v37 = v22 + 2;
  *v22 = v21;
  v22[1] = v21;
  __p = v22;
  v23 = mlx::core::to_stream(a3, a4);
  v25 = v24;
  v26 = operator new(0x30uLL);
  v26[2] = 0;
  *v26 = &unk_25134F388;
  v26[1] = 0;
  v26[4] = v23;
  *((_DWORD *)v26 + 10) = v25;
  v26[3] = &unk_251351158;
  v33 = (char *)(v26 + 3);
  v34 = (std::__shared_weak_count *)v26;
  mlx::core::array::make_arrays((uint64_t *)&v38, &__p, &v33, (_QWORD **)v43, a5);
  v27 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  __p = &v38;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    v31 = v45[i + 3];
    if (v31)
    {
      v47[i] = v31;
      operator delete(v31);
    }
  }
  v45[0] = (const void **)v43;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
}

void sub_242482880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  void *v24;

  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

void mlx::core::ceil(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  void *__p[3];
  void **v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_QWORD *)(*a1 + 56);
  v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134F4C8;
  v12[1] = 0;
  v12[4] = v10;
  *((_DWORD *)v12 + 10) = a3;
  v12[3] = &unk_251350D38;
  *(_QWORD *)&v30 = v12 + 3;
  *((_QWORD *)&v30 + 1) = v12;
  v28 = 0;
  v29 = 0;
  v14 = *a1;
  v13 = a1[1];
  v34[0] = v14;
  v34[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v26 = 0uLL;
  v27 = 0;
  v32 = (void **)&v26;
  v33 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v26 = v17;
  v27 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v26 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v9, &v30, &v26);
  v32 = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)v34);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242482B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::expm1(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F5B8;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251351500;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242482E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::sin(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F608;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_2513524F0;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242483108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::cos(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F658;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251350ED0;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_2424833D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::tan(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F6A8;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251352A30;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_2424836A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::arcsin(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F6F8;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251350650;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_24248396C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::arccos(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F748;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251350540;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242483C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::arctan(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F798;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251350760;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242483F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::arctan2(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  v35 = *(void ***)(*a1 + 56);
  v33[0] = *(void ***)(*a2 + 56);
  *(_QWORD *)&v37 = mlx::core::promote_types((int *)&v35, (int *)v33);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134F7E8;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_2513507E8;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_2424841E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::sinh(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F838;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251352578;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_2424844C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::cosh(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F888;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251350F58;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242484794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::tanh(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F8D8;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251352AB8;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242484A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::arcsinh(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F928;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_2513506D8;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242484D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::arccosh(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F978;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_2513505C8;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242484FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::arctanh(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134F9C8;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_251350870;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_2424852C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::degrees(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  int **v9[2];

  v9[0] = *(int ***)(*a1 + 56);
  mlx::core::array::array<double>(v9, v8, 57.2957795);
  mlx::core::multiply(a1, v9, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424853B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::radians(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  int **v9[2];

  v9[0] = *(int ***)(*a1 + 56);
  mlx::core::array::array<double>(v9, v8, 0.0174532925);
  mlx::core::multiply(a1, v9, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_24248544C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::log2(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134FA18;
  v16[1] = 0;
  v16[4] = v13;
  v16[3] = &unk_251351940;
  *((_DWORD *)v16 + 10) = v15;
  *((_DWORD *)v16 + 11) = 0;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_2424856B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void sub_24248571C()
{
  JUMPOUT(0x242485710);
}

void sub_242485728()
{
  JUMPOUT(0x242485714);
}

void mlx::core::log10(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  *v16 = &unk_25134FA18;
  v16[1] = 0;
  v16[3] = &unk_251351940;
  v16[2] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  *((_DWORD *)v16 + 11) = 1;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_24248598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void sub_2424859F0()
{
  JUMPOUT(0x2424859E4);
}

void sub_2424859FC()
{
  JUMPOUT(0x2424859E8);
}

void mlx::core::log1p(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134FA68;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_2513519C8;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242485C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::logaddexp(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  mlx::core *v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *__p[3];
  _QWORD v32[2];
  void **v33[2];
  _QWORD v34[2];
  void **v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  v35 = *(void ***)(*a1 + 56);
  v33[0] = *(void ***)(*a2 + 56);
  *(_QWORD *)&v37 = mlx::core::promote_types((int *)&v35, (int *)v33);
  v11 = a1[1];
  v34[0] = *a1;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v34, v10, a3, a4, &v35);
  v14 = a2[1];
  v32[0] = *a2;
  v32[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v32, v10, a3, a4, v33);
  mlx::core::broadcast_arrays((const void ***)&v35, (const void ***)v33, a3, a4, &v37);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  v17 = *(_QWORD *)v37;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = mlx::core::to_stream(a3, a4);
  v20 = v19;
  v21 = operator new(0x30uLL);
  v21[2] = 0;
  *v21 = &unk_25134FAB8;
  v21[1] = 0;
  v21[4] = v18;
  v21[3] = &unk_251351BE8;
  *((_DWORD *)v21 + 10) = v20;
  *(_QWORD *)&v30 = v21 + 3;
  *((_QWORD *)&v30 + 1) = v21;
  v35 = 0;
  v36 = 0;
  v28 = v37;
  v29 = v38;
  v37 = 0uLL;
  v38 = 0;
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v30, &v28);
  v33[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v33);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = (void **)&v37;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_242485F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v21 - 96);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v21 - 96) = v21 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::sigmoid(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  mlx::core *v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v39 = *(void ***)(*a1 + 56);
  v9 = a1[1];
  v36[0] = *a1;
  v36[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::astype(v36, v8, a2, a3, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v12 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = mlx::core::to_stream(a2, a3);
  v15 = v14;
  v16 = operator new(0x30uLL);
  v16[2] = 0;
  *v16 = &unk_25134FB08;
  v16[1] = 0;
  v16[4] = v13;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_2513523E0;
  *(_QWORD *)&v34 = v16 + 3;
  *((_QWORD *)&v34 + 1) = v16;
  v32 = 0;
  v33 = 0;
  v18 = v37;
  v17 = v38;
  v41[0] = v37;
  v41[1] = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v30 = 0uLL;
  v31 = 0;
  v39 = (void **)&v30;
  v40 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)&v30 = v21;
  v31 = v21 + 2;
  *v21 = v18;
  v21[1] = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)&v30 + 1) = v21 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v34, &v30);
  v39 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_242486220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a22);
  _Unwind_Resume(a1);
}

void mlx::core::erf(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  void *__p[3];
  void **v34;
  char v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v34 = *(void ***)(*a1 + 56);
  v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  v10 = mlx::core::to_stream(a2, a3);
  v12 = v11;
  v13 = operator new(0x30uLL);
  v13[2] = 0;
  *v13 = &unk_25134FB58;
  v13[1] = 0;
  v13[4] = v10;
  *((_DWORD *)v13 + 10) = v12;
  v13[3] = &unk_251351368;
  *(_QWORD *)&v32 = v13 + 3;
  *((_QWORD *)&v32 + 1) = v13;
  v30 = 0;
  v31 = 0;
  v14 = a1[1];
  v27[0] = *a1;
  v27[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v27, v8, a2, a3, v36);
  v28 = 0uLL;
  v29 = 0;
  v34 = (void **)&v28;
  v35 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v28 = v17;
  *((_QWORD *)&v28 + 1) = v17;
  v29 = v17 + 2;
  v18 = v36[1];
  *v17 = v36[0];
  v17[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_QWORD *)&v28 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v32, &v28);
  v34 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v34);
  mlx::core::array::~array((mlx::core::array *)v36);
  mlx::core::array::~array((mlx::core::array *)v27);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2424864D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v22 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::erfinv(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  void *__p[3];
  void **v34;
  char v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v34 = *(void ***)(*a1 + 56);
  v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  v10 = mlx::core::to_stream(a2, a3);
  v12 = v11;
  v13 = operator new(0x30uLL);
  v13[2] = 0;
  *v13 = &unk_25134FBA8;
  v13[1] = 0;
  v13[4] = v10;
  *((_DWORD *)v13 + 10) = v12;
  v13[3] = &unk_2513513F0;
  *(_QWORD *)&v32 = v13 + 3;
  *((_QWORD *)&v32 + 1) = v13;
  v30 = 0;
  v31 = 0;
  v14 = a1[1];
  v27[0] = *a1;
  v27[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v27, v8, a2, a3, v36);
  v28 = 0uLL;
  v29 = 0;
  v34 = (void **)&v28;
  v35 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v28 = v17;
  *((_QWORD *)&v28 + 1) = v17;
  v29 = v17 + 2;
  v18 = v36[1];
  *v17 = v36[0];
  v17[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_QWORD *)&v28 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v32, &v28);
  v34 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v34);
  mlx::core::array::~array((mlx::core::array *)v36);
  mlx::core::array::~array((mlx::core::array *)v27);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_242486774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v22 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::round(int ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  float v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int **v22;
  uint64_t v23;
  mlx::core *v24;
  int v25;
  int v26;
  _QWORD *v27;
  int **v28;
  int **v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  void *__p[3];
  __int128 v47;
  int **v48[3];

  v48[2] = *(int ***)MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_QWORD *)&v47 = (*a1)[7];
    v11 = __exp10((double)a2);
    mlx::core::array::array<float>((int ***)&v44, v10, v11);
    mlx::core::multiply(a1, &v44, a3, a4, &v47);
    mlx::core::array::~array((mlx::core::array *)&v44);
    mlx::core::round(&v44, &v47, 0, a3, a4);
    v12 = v44;
    v44 = 0uLL;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    v47 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v44);
    mlx::core::array::array<float>(v48, v10, 1.0 / v11);
    mlx::core::multiply(&v47, v48, a3, a4, &v44);
    v16 = v44;
    v44 = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    v47 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v44);
    mlx::core::array::~array((mlx::core::array *)v48);
    v41 = v47;
    if (*((_QWORD *)&v47 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    mlx::core::astype(&v41, (uint64_t)(*a1)[7], a3, a4, a5);
    mlx::core::array::~array((mlx::core::array *)&v41);
    mlx::core::array::~array((mlx::core::array *)&v47);
  }
  else
  {
    v22 = *a1;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v22, (uint64_t)v22[1], v22[1] - *v22);
    v23 = (uint64_t)(*a1)[7];
    v24 = mlx::core::to_stream(a3, a4);
    v26 = v25;
    v27 = operator new(0x30uLL);
    v27[2] = 0;
    *v27 = &unk_25134FC48;
    v27[1] = 0;
    v27[4] = v24;
    *((_DWORD *)v27 + 10) = v26;
    v27[3] = &unk_251352248;
    *(_QWORD *)&v45 = v27 + 3;
    *((_QWORD *)&v45 + 1) = v27;
    v44 = 0uLL;
    v29 = *a1;
    v28 = a1[1];
    v48[0] = v29;
    v48[1] = v28;
    if (v28)
    {
      v30 = (unint64_t *)(v28 + 1);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v42 = 0uLL;
    v43 = 0;
    *(_QWORD *)&v47 = &v42;
    BYTE8(v47) = 0;
    v32 = operator new(0x10uLL);
    *(_QWORD *)&v42 = v32;
    v43 = v32 + 2;
    *v32 = v29;
    v32[1] = v28;
    if (v28)
    {
      v33 = (unint64_t *)(v28 + 1);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    *((_QWORD *)&v42 + 1) = v32 + 2;
    mlx::core::array::array(a5, (__int128 *)__p, v23, &v45, &v42);
    *(_QWORD *)&v47 = &v42;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    mlx::core::array::~array((mlx::core::array *)v48);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_242486B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  mlx::core::array::~array((mlx::core::array *)(v23 - 88));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::matmul(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  std::string::size_type size;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  mlx::core *v66;
  int v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  char *v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t i;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  const void *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  std::vector<int>::pointer end;
  int *v92;
  std::vector<int>::pointer begin;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  int *v99;
  int *v100;
  int v101;
  uint64_t v102;
  int v103;
  int *v104;
  std::vector<int>::pointer v105;
  uint64_t v106;
  unint64_t v107;
  int64_t v108;
  unint64_t v109;
  char *v110;
  int *v111;
  int *v112;
  int v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  std::vector<int>::pointer v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  mlx::core *v125;
  int v126;
  int v127;
  _QWORD *v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  void **v138;
  char *v139;
  void *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t j;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  std::string::size_type v150;
  std::string::size_type v152;
  uint64_t v153;
  const void *v154;
  std::string::size_type v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  void **v166;
  char *v167;
  void *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t k;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::logic_error *exception;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  std::logic_error *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  std::logic_error *v189;
  __int128 v190;
  _QWORD *v191;
  __int128 v192;
  std::string v193;
  void *v194;
  std::string::size_type v195;
  std::string::size_type v196;
  __int128 v197;
  _QWORD *v198;
  __int128 v199;
  void *v200[3];
  std::vector<int> v201;
  void *v202;
  void *v203;
  uint64_t v204;
  __int128 v205;
  _QWORD *v206;
  const void **v207;
  std::__shared_weak_count *v208;
  __int128 v209;
  void *v210[3];
  __int128 v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  std::string v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  void *__p;
  void *v223;
  _QWORD *v224;
  __int128 v225;
  __int128 v226;
  void *v227[2];
  __int128 v228;
  uint64_t v229;

  v229 = *MEMORY[0x24BDAC8D0];
  v10 = (_QWORD *)*a1;
  v11 = a1[1];
  *(_QWORD *)&v226 = *a1;
  *((_QWORD *)&v226 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (_QWORD *)*a2;
  v15 = a2[1];
  *(_QWORD *)&v225 = *a2;
  *((_QWORD *)&v225 + 1) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = v10[1] - *v10;
  if (!v18 || (v21 = v14, v20 = *v14, v19 = v21[1], v19 == v20))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[matmul] Got 0 dimension input. Inputs must have at least one dimension.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v18 == 4)
  {
    v22 = operator new(8uLL);
    __p = v22;
    *v22 = 0xFFFFFFFF00000001;
    v223 = v22 + 1;
    v224 = v22 + 1;
    mlx::core::reshape((const void ***)&v226, (uint64_t)&__p, a3, a4, (const void ***)v227);
    v23 = *(_OWORD *)v227;
    v227[0] = 0;
    v227[1] = 0;
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
    v226 = v23;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v227);
    if (__p)
    {
      v223 = __p;
      operator delete(__p);
    }
    v20 = *(_QWORD *)v225;
    v19 = *(_QWORD *)(v225 + 8);
  }
  if (v19 - v20 == 4)
  {
    v27 = operator new(8uLL);
    v219 = v27;
    *v27 = 0x1FFFFFFFFLL;
    v220 = v27 + 1;
    v221 = v27 + 1;
    mlx::core::reshape((const void ***)&v225, (uint64_t)&v219, a3, a4, (const void ***)v227);
    v28 = *(_OWORD *)v227;
    v227[0] = 0;
    v227[1] = 0;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
    v225 = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v227);
    if (v219)
    {
      v220 = v219;
      operator delete(v219);
    }
  }
  v32 = *(_QWORD *)(v226 + 8);
  if (v32 == *(_QWORD *)v226 || *(_QWORD *)(v225 + 8) - *(_QWORD *)v225 <= 4uLL)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  if (*(_DWORD *)(v32 - 4) != *(_DWORD *)(*(_QWORD *)(v225 + 8) - 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v227);
    v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)"[matmul] Last dimension of first input with shape ", 50);
    v177 = mlx::core::operator<<(v176, (_QWORD *)v226);
    v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" must match second to last dimension of", 39);
    v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)" second input with shape ", 25);
    v180 = mlx::core::operator<<(v179, (_QWORD *)v225);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)".", 1);
    v181 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v227[1], &v218);
    std::logic_error::logic_error(v181, &v218);
    v181->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v181, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v227[0] = *(void **)(v226 + 56);
  v218.__r_.__value_.__r.__words[0] = *(_QWORD *)(v225 + 56);
  v217 = mlx::core::promote_types((int *)v227, (int *)&v218);
  if ((mlx::core::issubdtype((unsigned int *)&v217, (unsigned int *)&mlx::core::floating) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v227);
    v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)"[matmul] Only real floating point types are supported but ", 58);
    v218.__r_.__value_.__r.__words[0] = *(_QWORD *)(v226 + 56);
    v183 = mlx::core::operator<<(v182, &v218);
    v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)" and ", 5);
    v201.__begin_ = *(std::vector<int>::pointer *)(v225 + 56);
    v185 = mlx::core::operator<<(v184, &v201);
    v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)" were provided which results", 28);
    v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)" in ", 4);
    v188 = mlx::core::operator<<(v187, &v217);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)", which is not a real floating point type.", 42);
    v189 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v227[1], &v218);
    std::logic_error::logic_error(v189, &v218);
    v189->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v189, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v33 = *(_DWORD *)(v226 + 56);
  if ((_DWORD)v217 != v33)
  {
    v216 = v226;
    if (*((_QWORD *)&v226 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    mlx::core::astype(&v216, v217, a3, a4, v227);
    v36 = *(_OWORD *)v227;
    v227[0] = 0;
    v227[1] = 0;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
    v226 = v36;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v227);
    mlx::core::array::~array((mlx::core::array *)&v216);
    v33 = v217;
  }
  if (v33 != *(_DWORD *)(v225 + 56))
  {
    v215 = v225;
    if (*((_QWORD *)&v225 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    mlx::core::astype(&v215, v217, a3, a4, v227);
    v42 = *(_OWORD *)v227;
    v227[0] = 0;
    v227[1] = 0;
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
    v225 = v42;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v227);
    mlx::core::array::~array((mlx::core::array *)&v215);
  }
  v46 = v226;
  v47 = *(const void **)v226;
  v48 = *(_QWORD *)(v226 + 8);
  v49 = *(_QWORD *)(v225 + 8) - *(_QWORD *)v225;
  if ((unint64_t)(v48 - *(_QWORD *)v226) >= 9)
  {
    if (v49 == 8)
    {
      memset(&v218, 0, sizeof(v218));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v218, *(const void **)v226, *(_QWORD *)(v226 + 8), (uint64_t)(*(_QWORD *)(v226 + 8) - *(_QWORD *)v226) >> 2);
      v50 = *(unsigned int *)(v218.__r_.__value_.__l.__size_ - 4);
      v51 = operator new(8uLL);
      v212 = v51;
      *v51 = (v50 << 32) | 0xFFFFFFFFLL;
      v213 = v51 + 1;
      v214 = v51 + 1;
      mlx::core::reshape((const void ***)&v226, (uint64_t)&v212, a3, a4, (const void ***)v227);
      v52 = *(_OWORD *)v227;
      v227[0] = 0;
      v227[1] = 0;
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
      v226 = v52;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      mlx::core::array::~array((mlx::core::array *)v227);
      if (v212)
      {
        v213 = v212;
        operator delete(v212);
      }
      v56 = v225;
      v57 = *(_QWORD *)v225;
      v58 = *(_QWORD *)(v225 + 8);
      if (v58 == *(_QWORD *)v225)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v59 = *(_DWORD *)(v58 - 4);
      size = v218.__r_.__value_.__l.__size_;
      *(_DWORD *)(v218.__r_.__value_.__l.__size_ - 4) = v59;
      v61 = size - 4;
      if (*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2 == 4)
        v218.__r_.__value_.__l.__size_ = v61;
      if (*(_QWORD *)(v226 + 8) == *(_QWORD *)v226 || (unint64_t)(*(_QWORD *)(v56 + 8) - v57) <= 4)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v62 = **(unsigned int **)v226;
      v63 = *(unsigned int *)(v57 + 4);
      v64 = operator new(8uLL);
      v210[0] = v64;
      *v64 = v62 | (v63 << 32);
      v210[1] = v64 + 1;
      v210[2] = v64 + 1;
      v65 = v217;
      v66 = mlx::core::to_stream(a3, a4);
      LODWORD(v63) = v67;
      v68 = operator new(0x30uLL);
      v68[2] = 0;
      *v68 = &unk_25134FC98;
      v68[1] = 0;
      v68[4] = v66;
      *((_DWORD *)v68 + 10) = v63;
      v68[3] = &unk_25134D780;
      *(_QWORD *)&v209 = v68 + 3;
      *((_QWORD *)&v209 + 1) = v68;
      v207 = 0;
      v208 = 0;
      *(_OWORD *)v227 = v226;
      if (*((_QWORD *)&v226 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v228 = v225;
      if (*((_QWORD *)&v225 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v205 = 0uLL;
      v206 = 0;
      v201.__begin_ = (std::vector<int>::pointer)&v205;
      LOBYTE(v201.__end_) = 0;
      v73 = operator new(0x20uLL);
      v74 = 0;
      *(_QWORD *)&v205 = v73;
      *((_QWORD *)&v205 + 1) = v73;
      v206 = v73 + 4;
      do
      {
        v75 = &v227[2 * v74];
        v77 = *v75;
        v76 = (char *)v75[1];
        *v73 = v77;
        v73[1] = v76;
        if (v76)
        {
          v78 = (unint64_t *)(v76 + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        ++v74;
        v73 += 2;
      }
      while (v74 != 2);
      *((_QWORD *)&v205 + 1) = v73;
      mlx::core::array::array(&v211, (__int128 *)v210, v65, &v209, &v205);
      v201.__begin_ = (std::vector<int>::pointer)&v205;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
      for (i = 2; i != -2; i -= 2)
        mlx::core::array::~array((mlx::core::array *)&v227[i]);
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      if (*((_QWORD *)&v209 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = v208;
      if (v208)
      {
        v85 = (unint64_t *)&v208->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v210[0])
      {
        v210[1] = v210[0];
        operator delete(v210[0]);
      }
      v202 = 0;
      v203 = 0;
      v204 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v202, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_, (uint64_t)(v218.__r_.__value_.__l.__size_ - v218.__r_.__value_.__r.__words[0]) >> 2);
      mlx::core::reshape((const void ***)&v211, (uint64_t)&v202, a3, a4, a5);
      if (v202)
      {
        v203 = v202;
        operator delete(v202);
      }
      mlx::core::array::~array((mlx::core::array *)&v211);
      goto LABEL_190;
    }
    goto LABEL_93;
  }
  if (v49 >= 9)
  {
LABEL_93:
    v227[0] = 0;
    v227[1] = 0;
    *(_QWORD *)&v228 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v227, v47, v48 - 8, (v48 - 8 - (uint64_t)v47) >> 2);
    v87 = *(const void **)v225;
    v88 = *(_QWORD *)(v225 + 8) - 8;
    v89 = (v88 - *(_QWORD *)v225) >> 2;
    memset(&v218, 0, sizeof(v218));
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v218, v87, v88, v89);
    mlx::core::broadcast_shapes(v227, &v218, &v201);
    if (*(_QWORD *)(v226 + 8) - *(_QWORD *)v226 <= 4uLL)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v90 = *(_DWORD *)(*(_QWORD *)(v226 + 8) - 8);
    end = v201.__end_;
    if (v201.__end_ >= v201.__end_cap_.__value_)
    {
      begin = v201.__begin_;
      v94 = v201.__end_ - v201.__begin_;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v96 = (char *)v201.__end_cap_.__value_ - (char *)v201.__begin_;
      if (((char *)v201.__end_cap_.__value_ - (char *)v201.__begin_) >> 1 > v95)
        v95 = v96 >> 1;
      if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
        v97 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v97 = v95;
      if (v97)
      {
        v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v201.__end_cap_, v97);
        begin = v201.__begin_;
        end = v201.__end_;
      }
      else
      {
        v98 = 0;
      }
      v99 = (int *)&v98[4 * v94];
      v100 = (int *)&v98[4 * v97];
      *v99 = v90;
      v92 = v99 + 1;
      while (end != begin)
      {
        v101 = *--end;
        *--v99 = v101;
      }
      v201.__begin_ = v99;
      v201.__end_ = v92;
      v201.__end_cap_.__value_ = v100;
      if (begin)
        operator delete(begin);
    }
    else
    {
      *v201.__end_ = v90;
      v92 = end + 1;
    }
    v201.__end_ = v92;
    v102 = *(_QWORD *)(v226 + 8);
    if (v102 == *(_QWORD *)v226)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v103 = *(_DWORD *)(v102 - 4);
    if (v92 >= v201.__end_cap_.__value_)
    {
      v105 = v201.__begin_;
      v106 = v92 - v201.__begin_;
      v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v108 = (char *)v201.__end_cap_.__value_ - (char *)v201.__begin_;
      if (((char *)v201.__end_cap_.__value_ - (char *)v201.__begin_) >> 1 > v107)
        v107 = v108 >> 1;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
        v109 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v109 = v107;
      if (v109)
      {
        v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v201.__end_cap_, v109);
        v105 = v201.__begin_;
        v92 = v201.__end_;
      }
      else
      {
        v110 = 0;
      }
      v111 = (int *)&v110[4 * v106];
      v112 = (int *)&v110[4 * v109];
      *v111 = v103;
      v104 = v111 + 1;
      while (v92 != v105)
      {
        v113 = *--v92;
        *--v111 = v113;
      }
      v201.__begin_ = v111;
      v201.__end_ = v104;
      v201.__end_cap_.__value_ = v112;
      if (v105)
        operator delete(v105);
    }
    else
    {
      *v92 = v103;
      v104 = v92 + 1;
    }
    v201.__end_ = v104;
    mlx::core::broadcast_to((const void ***)&v226, (const void **)&v201.__begin_, a3, a4, (const void ***)&v211);
    v114 = v211;
    v211 = 0uLL;
    v115 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
    v226 = v114;
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v211);
    if (*(_QWORD *)(v225 + 8) - *(_QWORD *)v225 <= 4uLL)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v118 = *(_QWORD *)(v225 + 8);
    v119 = v201.__end_;
    *(v201.__end_ - 2) = *(_DWORD *)(v118 - 8);
    *(v119 - 1) = *(_DWORD *)(v118 - 4);
    mlx::core::broadcast_to((const void ***)&v225, (const void **)&v201.__begin_, a3, a4, (const void ***)&v211);
    v120 = v211;
    v211 = 0uLL;
    v121 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
    v225 = v120;
    if (v121)
    {
      v122 = (unint64_t *)&v121->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v211);
    if (v201.__begin_)
    {
      v201.__end_ = v201.__begin_;
      operator delete(v201.__begin_);
    }
    if (v218.__r_.__value_.__r.__words[0])
    {
      v218.__r_.__value_.__l.__size_ = v218.__r_.__value_.__r.__words[0];
      operator delete(v218.__r_.__value_.__l.__data_);
    }
    if (v227[0])
    {
      v227[1] = v227[0];
      operator delete(v227[0]);
    }
    v46 = v226;
  }
  memset(&v218, 0, sizeof(v218));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v218, *(const void **)v46, *(_QWORD *)(v46 + 8), (uint64_t)(*(_QWORD *)(v46 + 8) - *(_QWORD *)v46) >> 2);
  v124 = *(_QWORD *)(v225 + 8);
  if (v124 == *(_QWORD *)v225)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  *(_DWORD *)(v218.__r_.__value_.__l.__size_ - 4) = *(_DWORD *)(v124 - 4);
  v125 = mlx::core::to_stream(a3, a4);
  v127 = v126;
  v128 = operator new(0x30uLL);
  v129 = v128;
  v128[2] = 0;
  *v128 = &unk_25134FC98;
  v128[1] = 0;
  v128[3] = &unk_25134D780;
  v130 = (char *)(v128 + 3);
  v128[4] = v125;
  *((_DWORD *)v128 + 10) = v127;
  *(_QWORD *)&v211 = v128 + 3;
  *((_QWORD *)&v211 + 1) = v128;
  if (*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1 == 4 || *(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2 == 4)
  {
    memset(v200, 0, sizeof(v200));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v200, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_, (uint64_t)(v218.__r_.__value_.__l.__size_ - v218.__r_.__value_.__r.__words[0]) >> 2);
    v131 = v217;
    *(_QWORD *)&v199 = v130;
    *((_QWORD *)&v199 + 1) = v129;
    v211 = 0uLL;
    *(_OWORD *)v227 = v226;
    if (*((_QWORD *)&v226 + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v133 = __ldxr(v132);
      while (__stxr(v133 + 1, v132));
    }
    v228 = v225;
    if (*((_QWORD *)&v225 + 1))
    {
      v134 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    v197 = 0uLL;
    v198 = 0;
    v201.__begin_ = (std::vector<int>::pointer)&v197;
    LOBYTE(v201.__end_) = 0;
    v136 = operator new(0x20uLL);
    v137 = 0;
    *(_QWORD *)&v197 = v136;
    *((_QWORD *)&v197 + 1) = v136;
    v198 = v136 + 4;
    do
    {
      v138 = &v227[2 * v137];
      v140 = *v138;
      v139 = (char *)v138[1];
      *v136 = v140;
      v136[1] = v139;
      if (v139)
      {
        v141 = (unint64_t *)(v139 + 8);
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      ++v137;
      v136 += 2;
    }
    while (v137 != 2);
    *((_QWORD *)&v197 + 1) = v136;
    mlx::core::array::array(&v207, (__int128 *)v200, v131, &v199, &v197);
    v201.__begin_ = (std::vector<int>::pointer)&v197;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
    for (j = 2; j != -2; j -= 2)
      mlx::core::array::~array((mlx::core::array *)&v227[j]);
    v144 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    if (*((_QWORD *)&v199 + 1))
    {
      v145 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    if (v200[0])
    {
      v200[1] = v200[0];
      operator delete(v200[0]);
    }
    v147 = *(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2;
    if (*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1 == 4)
      v148 = -2;
    else
      v148 = -1;
    v150 = v218.__r_.__value_.__l.__size_;
    v149 = (void *)v218.__r_.__value_.__r.__words[0];
    if (*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1 == 4 || v147 == 4)
    {
      v152 = v218.__r_.__value_.__l.__size_ + 4 * v148;
      if (v147 == 4)
        v153 = 0;
      else
        v153 = -1;
      v154 = (const void *)(v152 + 4 * (v153 - v148));
      v155 = v218.__r_.__value_.__l.__size_ - (_QWORD)v154;
      if ((const void *)v218.__r_.__value_.__l.__size_ != v154)
      {
        memmove((void *)(v218.__r_.__value_.__l.__size_ + 4 * v148), v154, v218.__r_.__value_.__l.__size_ - (_QWORD)v154);
        v149 = (void *)v218.__r_.__value_.__r.__words[0];
      }
      v150 = v152 + v155;
      v218.__r_.__value_.__l.__size_ = v152 + v155;
    }
    v194 = v149;
    v195 = v150;
    v196 = v218.__r_.__value_.__r.__words[2];
    memset(&v218, 0, sizeof(v218));
    mlx::core::reshape(&v207, (uint64_t)&v194, a3, a4, a5);
    if (v194)
    {
      v195 = (std::string::size_type)v194;
      operator delete(v194);
    }
    mlx::core::array::~array((mlx::core::array *)&v207);
  }
  else
  {
    v193 = v218;
    memset(&v218, 0, sizeof(v218));
    v159 = v217;
    *(_QWORD *)&v192 = v128 + 3;
    *((_QWORD *)&v192 + 1) = v128;
    v211 = 0uLL;
    *(_OWORD *)v227 = v226;
    if (*((_QWORD *)&v226 + 1))
    {
      v160 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
    }
    v228 = v225;
    if (*((_QWORD *)&v225 + 1))
    {
      v162 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    v190 = 0uLL;
    v191 = 0;
    v201.__begin_ = (std::vector<int>::pointer)&v190;
    LOBYTE(v201.__end_) = 0;
    v164 = operator new(0x20uLL);
    v165 = 0;
    *(_QWORD *)&v190 = v164;
    *((_QWORD *)&v190 + 1) = v164;
    v191 = v164 + 4;
    do
    {
      v166 = &v227[2 * v165];
      v168 = *v166;
      v167 = (char *)v166[1];
      *v164 = v168;
      v164[1] = v167;
      if (v167)
      {
        v169 = (unint64_t *)(v167 + 8);
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      ++v165;
      v164 += 2;
    }
    while (v165 != 2);
    *((_QWORD *)&v190 + 1) = v164;
    mlx::core::array::array(a5, (__int128 *)&v193, v159, &v192, &v190);
    v201.__begin_ = (std::vector<int>::pointer)&v190;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
    for (k = 2; k != -2; k -= 2)
      mlx::core::array::~array((mlx::core::array *)&v227[k]);
    v172 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
    if (*((_QWORD *)&v192 + 1))
    {
      v173 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    if (v193.__r_.__value_.__r.__words[0])
    {
      v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
      operator delete(v193.__r_.__value_.__l.__data_);
    }
  }
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
LABEL_190:
  if (v218.__r_.__value_.__r.__words[0])
  {
    v218.__r_.__value_.__l.__size_ = v218.__r_.__value_.__r.__words[0];
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  mlx::core::array::~array((mlx::core::array *)&v225);
  mlx::core::array::~array((mlx::core::array *)&v226);
}

void sub_242487CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a70;
  uint64_t a72;
  void *v72;
  int v73;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v73 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a72);
      mlx::core::array::~array((mlx::core::array *)&a68);
      mlx::core::array::~array((mlx::core::array *)&a70);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void mlx::core::gather(mlx::core::array *a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  std::string::size_type size;
  std::string::size_type v15;
  std::string::size_type *p_size;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  mlx::core *v24;
  char ***v25;
  char ***v26;
  char **v27;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type v30;
  uint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  std::logic_error *v43;
  _QWORD *v44;
  std::logic_error *v45;
  _QWORD *v46;
  _QWORD *v47;
  std::logic_error *exception;
  _QWORD *v49;
  _QWORD *v50;
  std::logic_error *v51;
  std::logic_error *v52;
  __int128 v53;
  uint64_t v54;
  mlx::core *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  void *__p[3];
  _QWORD v60[2];
  uint64_t v61;
  std::string v62;
  std::string v63;
  char ***v64;
  _QWORD *v65[32];
  void **v66;

  if ((a2[1] - *a2) >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"[gather] Too many index arrays. Got ", 36);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" index arrays for input with ", 29);
    v47 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v65, &v63);
    std::logic_error::logic_error(exception, &v63);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>((uint64_t)&v63, *a3, a3[1]);
  if (v63.__r_.__value_.__r.__words[2] != a3[1] - *a3)
  {
    v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v45, "[gather] Repeat axes not allowed in gather.");
    goto LABEL_53;
  }
  if (v63.__r_.__value_.__r.__words[2])
  {
    if ((*(_DWORD *)(v63.__r_.__value_.__r.__words[0] + 28) & 0x80000000) != 0)
      goto LABEL_49;
    size = v63.__r_.__value_.__l.__size_;
    if (v63.__r_.__value_.__l.__size_)
    {
      do
      {
        v15 = size;
        size = *(_QWORD *)(size + 8);
      }
      while (size);
    }
    else
    {
      p_size = &v63.__r_.__value_.__l.__size_;
      do
      {
        v15 = p_size[2];
        v17 = *(_QWORD *)v15 == (_QWORD)p_size;
        p_size = (std::string::size_type *)v15;
      }
      while (v17);
    }
    if (*(int *)(v15 + 28) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2))
    {
LABEL_49:
      v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v45, "[gather] Axes don't match array dimensions.");
      goto LABEL_53;
    }
  }
  v19 = *a2;
  v18 = a2[1];
  if (v63.__r_.__value_.__r.__words[2] != (v18 - *a2) >> 4)
  {
    v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v45, "[gather] Number of index arrays does not match number of axes.");
LABEL_53:
    v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v45, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  while (v19 != v18)
  {
    if (!*(_DWORD *)(*(_QWORD *)v19 + 56))
    {
      v44 = __cxa_allocate_exception(8uLL);
      *v44 = "[Gather] Boolean indices not supported.";
      __cxa_throw(v44, MEMORY[0x24BEDB718], 0);
    }
    v19 += 16;
  }
  v21 = **(_QWORD **)a1;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != v20 - v21)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"[gather] Got slice_sizes with size ", 35);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" for array with ", 16);
    v50 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" dimensions.", 12);
    v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v65, &v62);
    std::logic_error::logic_error(v51, &v62);
    v51->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v51, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v22);
      if (v23 < 0 || v23 > (int)mlx::core::array::shape(a1, v22))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v64);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"[gather] Slice sizes must be in [0, a.shape(i)]. Got ", 53);
        v40 = mlx::core::operator<<(v39, (_QWORD *)a4);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" for array with shape ", 22);
        v42 = mlx::core::operator<<(v41, *(_QWORD **)a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)".", 1);
        v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v65, &v62);
        std::logic_error::logic_error(v43, &v62);
        v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v43, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      ++v22;
    }
    while (v22 < (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2);
  }
  v61 = mlx::core::result_type(a2);
  if (mlx::core::issubdtype((unsigned int *)&v61, &mlx::core::inexact))
  {
    v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v52, "[gather] Got indices with invalid dtype. Indices must be integral.");
    v52->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v52, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::broadcast_arrays((const void ****)a2, v24, 0, (uint64_t)&v64);
  v25 = v64;
  v26 = (char ***)v65[0];
  if (v64 == v65[0])
  {
    v30 = 0;
    memset(&v62, 0, sizeof(v62));
  }
  else
  {
    do
    {
      v27 = v25[1];
      v60[0] = *v25;
      v60[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 1);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      mlx::core::astype(v60, v61, a5, a6, &v62);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)v25, (__int128 *)&v62);
      mlx::core::array::~array((mlx::core::array *)&v62);
      mlx::core::array::~array((mlx::core::array *)v60);
      v25 += 2;
    }
    while (v25 != v26);
    memset(&v62, 0, sizeof(v62));
    if (v64 == v65[0] || &v62 == (std::string *)*v64)
    {
      v30 = 0;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v62, **v64, (uint64_t)(*v64)[1], ((*v64)[1] - **v64) >> 2);
      v30 = v62.__r_.__value_.__l.__size_;
    }
  }
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)&v62, v30, *(char **)a4, *(char **)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  std::vector<mlx::core::array>::insert(&v64, (uint64_t)v64, (uint64_t *)a1);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_, (uint64_t)(v62.__r_.__value_.__l.__size_ - v62.__r_.__value_.__r.__words[0]) >> 2);
  v31 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v55 = mlx::core::to_stream(a5, a6);
  v56 = v32;
  std::allocate_shared[abi:ne180100]<mlx::core::Gather,std::allocator<mlx::core::Gather>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,void>((uint64_t)&v55, (uint64_t)a3, a4, &v57);
  v58 = v57;
  v57 = 0uLL;
  v54 = 0;
  v53 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v53, v64, v65[0], ((char *)v65[0] - (char *)v64) >> 4);
  mlx::core::array::array(a7, (__int128 *)__p, v31, &v58, &v53);
  v66 = (void **)&v53;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v66);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v62.__r_.__value_.__r.__words[0])
  {
    v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  std::__tree<int>::destroy((uint64_t)&v63, (_QWORD *)v63.__r_.__value_.__l.__size_);
}

void sub_2424886C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,_QWORD *a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  void *v37;
  int v38;

  if (a30 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a37);
      std::__tree<int>::destroy((uint64_t)&a31, a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t *std::vector<mlx::core::array>::insert(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v36;
  __int128 v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  int64x2_t v41;
  char *v42;
  uint64_t v43;

  v4 = (uint64_t *)a2;
  v6 = a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if (v6 >= v7)
  {
    v9 = (uint64_t *)*a1;
    v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = a2 - (_QWORD)v9;
    v12 = (a2 - (uint64_t)v9) >> 4;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v39 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v19 = (uint64_t *)&v15[16 * v12];
    v36 = v15;
    *(_QWORD *)&v37 = v19;
    *((_QWORD *)&v37 + 1) = v19;
    v38 = &v15[16 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v21 = 1;
        else
          v21 = v11 >> 3;
        v43 = v8;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v8, v21);
        v24 = v37;
        v25 = *((_QWORD *)&v37 + 1) - v37;
        if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
        {
          v30 = vdupq_n_s64(v37);
          v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          v26 = v25 >> 4;
          v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          v28 = 16 * v26;
          v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)v29 = *(_OWORD *)v24;
            v29 += 16;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          v30 = (int64x2_t)v37;
        }
        v31 = v38;
        v40 = v36;
        v36 = v22;
        *(_QWORD *)&v37 = &v22[16 * (v21 >> 2)];
        v41 = v30;
        *((_QWORD *)&v37 + 1) = v27;
        v38 = &v22[16 * v23];
        v42 = v31;
        std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v40);
        v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
      }
      else
      {
        v20 = v12 + 2;
        if (v12 >= -1)
          v20 = v12 + 1;
        v19 -= 2 * (v20 >> 1);
        *(_QWORD *)&v37 = v19;
        *((_QWORD *)&v37 + 1) = v19;
      }
    }
    *v19 = *a3;
    v32 = a3[1];
    v19[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
    }
    *((_QWORD *)&v37 + 1) = v19 + 2;
    v4 = (uint64_t *)std::vector<mlx::core::array>::__swap_out_circular_buffer(a1, &v36, v4);
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v36);
  }
  else if (a2 == v6)
  {
    *(_QWORD *)a2 = *a3;
    v16 = a3[1];
    *(_QWORD *)(a2 + 8) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<mlx::core::array>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    if (*v4 != *a3)
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v4, a3);
  }
  return v4;
}

void sub_242488A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::take(mlx::core::array *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  uint64_t v6;
  const void *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v16;
  std::vector<int>::pointer begin;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  std::vector<int>::pointer end;
  int v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::vector<int>::pointer v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::logic_error *exception;
  std::logic_error *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *__p;
  void *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  std::vector<int> v47;
  void *v48;
  _QWORD v49[32];

  LODWORD(v6) = a3;
  v10 = **(const void ***)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v12 = (unint64_t)(v11 - (_QWORD)v10) >> 2;
  if ((int)v12 <= (int)v6 || (v13 = v12 + v6, (v13 & 0x80000000) != 0))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"[take] Received invalid axis ", 29);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" for array with ", 16);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v49, &v47);
    std::logic_error::logic_error(exception, (const std::string *)&v47);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (!*(_QWORD *)(*(_QWORD *)a1 + 48) && *(_QWORD *)(*a2 + 48))
  {
    v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v38, "[take] Cannot do a non-empty take from an array with zero elements.");
    __cxa_throw(v38, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if ((int)v6 >= 0)
    v6 = v6;
  else
    v6 = v13;
  v48 = 0;
  v49[0] = 0;
  v49[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v48, v10, v11, (v11 - (uint64_t)v10) >> 2);
  *((_DWORD *)v48 + v6) = *(_QWORD *)(*a2 + 48) != 0;
  mlx::core::gather(a1, a2, v6, (uint64_t)&v48, a4, a5, &v46);
  if ((_DWORD)v6)
  {
    std::vector<int>::vector(&v47, (uint64_t)(*(_QWORD *)(v46 + 8) - *(_QWORD *)v46) >> 2);
    v16 = 0;
    begin = v47.__begin_;
    v18 = &v47.__begin_[v6];
    v20 = *(_QWORD *)*a2;
    v19 = *(_QWORD *)(*a2 + 8);
    v21 = (v19 - v20) >> 2;
    v22 = v21;
    do
      begin[v16++] = v22++;
    while (v6 != v16);
    v23 = &v18[v21];
    if (v19 != v20)
    {
      v24 = 0;
      v25 = 4 * v21;
      do
      {
        v18[v24] = v24;
        ++v24;
        v25 -= 4;
      }
      while (v25);
    }
    end = v47.__end_;
    if (v23 != v47.__end_)
    {
      v27 = v6 + ((unint64_t)(v19 - v20) >> 2);
      do
        *v23++ = v27++;
      while (v23 != end);
    }
    v43 = 0;
    v44 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)end, end - begin);
    mlx::core::transpose((uint64_t **)&v46, (unsigned int **)&__p, a4, a5, &v45);
    v28 = v45;
    v45 = 0uLL;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    v46 = v28;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v45);
    if (__p)
    {
      v43 = __p;
      operator delete(__p);
    }
    if (v47.__begin_)
    {
      v47.__end_ = v47.__begin_;
      operator delete(v47.__begin_);
    }
  }
  memset(&v47, 0, sizeof(v47));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, *(const void **)v46, *(_QWORD *)(v46 + 8), (uint64_t)(*(_QWORD *)(v46 + 8) - *(_QWORD *)v46) >> 2);
  v32 = v47.__begin_;
  v33 = (char *)&v47.__begin_[v6] + *(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2;
  v34 = (char *)((char *)v47.__end_ - (v33 + 4));
  if ((char *)v47.__end_ != v33 + 4)
  {
    memmove(v33, v33 + 4, (char *)v47.__end_ - (v33 + 4));
    v32 = v47.__begin_;
  }
  v47.__end_ = (std::vector<int>::pointer)&v34[(_QWORD)v33];
  v40 = 0;
  v41 = 0;
  v39 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, v32, (uint64_t)&v34[(_QWORD)v33], (&v34[(_QWORD)v33] - (char *)v32) >> 2);
  mlx::core::reshape((const void ***)&v46, (uint64_t)&v39, a4, a5, a6);
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)&v46);
  if (v48)
  {
    v49[0] = v48;
    operator delete(v48);
  }
}

void sub_242488E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26)
{
  void *v26;
  int v27;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void sub_242488F24()
{
  JUMPOUT(0x242488F0CLL);
}

void mlx::core::gather(mlx::core::array *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  void *__p;
  void *v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v13 = a2[1];
  v27[0] = *a2;
  v27[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  __p = &v24;
  LOBYTE(v22) = 0;
  v17 = operator new(0x10uLL);
  v24 = v17;
  v26 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v25 = v17 + 2;
  v20 = operator new(4uLL);
  __p = v20;
  *v20 = a3;
  v22 = v20 + 1;
  v23 = v20 + 1;
  mlx::core::gather(a1, (uint64_t *)&v24, (int **)&__p, a4, a5, a6, a7);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  __p = &v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v27);
}

void sub_24248906C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

void mlx::core::take(const void ***a1@<X0>, uint64_t *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  _DWORD *v10;
  void *__p;
  void *v12;
  _DWORD *v13;
  const void **v14[2];

  v10 = operator new(4uLL);
  __p = v10;
  *v10 = -1;
  v12 = v10 + 1;
  v13 = v10 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v14);
  mlx::core::take((mlx::core::array *)v14, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v14);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_242489158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::take_along_axis(mlx::core::array *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  std::vector<int>::size_type v8;
  std::vector<int>::size_type v13;
  uint64_t v14;
  int v15;
  int v16;
  mlx::core *v17;
  unsigned int v18;
  std::vector<int>::size_type v19;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v22;
  std::vector<int>::size_type v23;
  const void *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  std::logic_error *exception;
  _QWORD *v30;
  _QWORD *v31;
  std::logic_error *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  std::vector<int>::value_type v36[2];
  const void *v37;
  uint64_t v38;
  const void **v39[2];
  std::vector<int> v40;
  std::vector<int> __x;
  void *__p;
  void *v43;
  uint64_t v44;
  std::vector<int> v45;
  char *v46;
  _QWORD v47[32];

  v8 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
  if ((int)v8 <= a3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[take_along_axis] Received invalid axis ", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for array with ", 16);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v45);
    std::logic_error::logic_error(exception, (const std::string *)&v45);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v8 != (uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[take_along_axis] Indices of dimension ", 39);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" does not match array of dimension ", 35);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
    v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v45);
    std::logic_error::logic_error(v32, (const std::string *)&v45);
    v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v32, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v46 = 0;
  v47[0] = 0;
  v47[1] = 0;
  LODWORD(__x.__begin_) = 1;
  std::vector<int>::vector(&v45, v8, (const std::vector<int>::value_type *)&__x);
  if (*(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1)
  {
    v19 = 0;
  }
  else
  {
    v13 = 0;
    v14 = (v8 & (a3 >> 31)) + a3;
    do
    {
      if (v14 == v13)
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](&v46, a2);
      }
      else
      {
        v15 = mlx::core::array::shape(a1, v13);
        v45.__begin_[v13] = v15;
        v16 = mlx::core::array::shape(a1, v13);
        v17 = mlx::core::to_stream(a4, a5);
        mlx::core::arange(0x400000004, v17, v18 | 0x100000000, (int ***)&v40, 0.0, (double)v16, 1.0);
        __p = 0;
        v43 = 0;
        v44 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v45.__begin_, (uint64_t)v45.__end_, v45.__end_ - v45.__begin_);
        mlx::core::reshape((const void ***)&v40, (uint64_t)&__p, a4, a5, (const void ***)&__x);
        std::vector<mlx::core::array>::push_back[abi:ne180100](&v46, (uint64_t)&__x);
        mlx::core::array::~array((mlx::core::array *)&__x);
        if (__p)
        {
          v43 = __p;
          operator delete(__p);
        }
        mlx::core::array::~array((mlx::core::array *)&v40);
        v45.__begin_[v13] = 1;
      }
      ++v13;
      v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
    }
    while (v19 > v13);
  }
  std::vector<int>::vector(&__x, v19);
  begin = __x.__begin_;
  end = __x.__end_;
  if (__x.__begin_ != __x.__end_)
  {
    v22 = 0;
    do
      *begin++ = v22++;
    while (begin != end);
  }
  v23 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
  v36[0] = *(_QWORD *)(*(_QWORD *)a1 + 48) != 0;
  std::vector<int>::vector(&v40, v23, v36);
  mlx::core::gather(a1, (uint64_t *)&v46, &__x.__begin_, (uint64_t)&v40, a4, a5, v39);
  v24 = *v39[0];
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1;
  v26 = (char *)*v39[0] + v25;
  v37 = 0;
  v38 = 0;
  *(_QWORD *)v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v36, v24, (uint64_t)v26, v25 >> 2);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)v36, (uint64_t)v37, ((uint64_t)v37 - *(_QWORD *)v36) >> 2);
  mlx::core::reshape(v39, (uint64_t)&v33, a4, a5, a6);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (*(_QWORD *)v36)
  {
    v37 = *(const void **)v36;
    operator delete(*(void **)v36);
  }
  mlx::core::array::~array((mlx::core::array *)v39);
  if (v40.__begin_)
  {
    v40.__end_ = v40.__begin_;
    operator delete(v40.__begin_);
  }
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  v45.__begin_ = (std::vector<int>::pointer)&v46;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
}

void sub_2424895F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a32 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::scatter(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, int a5@<W4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  const void ***v11;
  const void ***v12;
  mlx::core *v17;
  std::string::size_type size;
  std::string::size_type v19;
  std::string::size_type *p_size;
  BOOL v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  const void **v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  std::logic_error *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  std::logic_error *v58;
  std::logic_error *v59;
  _QWORD *v60;
  _QWORD *v61;
  std::logic_error *exception;
  _QWORD *v63;
  _QWORD *v64;
  std::logic_error *v65;
  std::logic_error *v66;
  _QWORD *v67;
  _QWORD *v68;
  std::logic_error *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  void *__p[3];
  _QWORD v74[2];
  _QWORD v75[2];
  uint64_t v76;
  std::string v77;
  void *v78;
  _BYTE *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  std::string v83;
  __int128 v84[17];
  int v85;
  void **v86;

  v85 = a5;
  v12 = *a2;
  v11 = a2[1];
  if (((char *)v11 - (char *)*a2) >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"[scatter] Too many index arrays. Got ", 37);
    v60 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" index arrays for input with ", 29);
    v61 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v84 + 8, &v83);
    std::logic_error::logic_error(exception, &v83);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  while (v12 != v11)
  {
    if (!*((_DWORD *)*v12 + 14))
    {
      v48 = __cxa_allocate_exception(8uLL);
      *v48 = "[scatter] Boolean indices not supported.";
      __cxa_throw(v48, MEMORY[0x24BEDB718], 0);
    }
    v12 += 2;
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>((uint64_t)&v83, *a4, a4[1]);
  if (v83.__r_.__value_.__r.__words[2] != a4[1] - *a4)
  {
    v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v59, "[scatter] Repeat axes not allowed in scatter.");
    goto LABEL_63;
  }
  if (v83.__r_.__value_.__r.__words[2])
  {
    if ((*(_DWORD *)(v83.__r_.__value_.__r.__words[0] + 28) & 0x80000000) != 0)
      goto LABEL_59;
    size = v83.__r_.__value_.__l.__size_;
    if (v83.__r_.__value_.__l.__size_)
    {
      do
      {
        v19 = size;
        size = *(_QWORD *)(size + 8);
      }
      while (size);
    }
    else
    {
      p_size = &v83.__r_.__value_.__l.__size_;
      do
      {
        v19 = p_size[2];
        v21 = *(_QWORD *)v19 == (_QWORD)p_size;
        p_size = (std::string::size_type *)v19;
      }
      while (v21);
    }
    if (*(int *)(v19 + 28) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2))
    {
LABEL_59:
      v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v59, "[scatter] Axes don't match array dimensions.");
      goto LABEL_63;
    }
  }
  if (v83.__r_.__value_.__r.__words[2] != ((char *)a2[1] - (char *)*a2) >> 4)
  {
    v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v59, "[scatter] Number of index arrays does not match number of axes.");
LABEL_63:
    v59->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v59, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::broadcast_arrays(a2, v17, 0, (uint64_t)&v81);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  if (v81 == v82 || &v78 == *(void ***)v81)
  {
    v22 = 0;
    v23 = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v78, **(char ***)v81, *(_QWORD *)(*(_QWORD *)v81 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v81 + 8) - **(_QWORD **)v81) >> 2);
    v22 = v78;
    v23 = v79;
  }
  v25 = **(_QWORD **)a1;
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (((v23 - v22) >> 2) + ((v24 - v25) >> 2) != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 8) - **(_QWORD **)a3) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"[scatter] Updates with ", 23);
    v63 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" dimensions does not match the sum of the array and indices dimensions ", 71);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)".", 1);
    v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v84 + 8, &v77);
    std::logic_error::logic_error(v65, &v77);
    v65->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v65, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v23 != v22)
  {
    v26 = 0;
    do
    {
      v27 = mlx::core::array::shape(a3, v26);
      if (v27 != *((_DWORD *)v78 + v26))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v84);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"[scatter] Update shape ", 23);
        v50 = mlx::core::operator<<(v49, *(_QWORD **)a3);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" is not valid for broadcasted index shape ", 42);
        v52 = mlx::core::operator<<(v51, &v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)".", 1);
        v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v84 + 8, &v77);
        std::logic_error::logic_error(v53, &v77);
        v53->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v53, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      ++v26;
    }
    while (v26 < (v79 - (_BYTE *)v78) >> 2);
    v25 = **(_QWORD **)a1;
    v24 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  }
  if (v24 != v25)
  {
    v28 = 0;
    do
    {
      v29 = mlx::core::array::shape(a3, v28 + ((unint64_t)(v79 - (_BYTE *)v78) >> 2));
      if (v29 > (int)mlx::core::array::shape(a1, v28))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v84);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"[scatter] Updates with shape ", 29);
        v55 = mlx::core::operator<<(v54, *(_QWORD **)a3);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" are too large for array with shape ", 36);
        v57 = mlx::core::operator<<(v56, *(_QWORD **)a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
        v58 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v84 + 8, &v77);
        std::logic_error::logic_error(v58, &v77);
        v58->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v58, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      ++v28;
    }
    while (v28 < (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2);
  }
  v76 = mlx::core::result_type((uint64_t *)a2);
  if (mlx::core::issubdtype((unsigned int *)&v76, &mlx::core::inexact))
  {
    v66 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v66, "[scatter] Got indices with invalid dtype. Indices must be integral.");
    v66->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v66, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v30 = v81;
  v31 = v82;
  while (v30 != v31)
  {
    v32 = *((_QWORD *)v30 + 1);
    v75[0] = *(_QWORD *)v30;
    v75[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    mlx::core::astype(v75, v76, a6, a7, v84);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)v30, v84);
    mlx::core::array::~array((mlx::core::array *)v84);
    mlx::core::array::~array((mlx::core::array *)v75);
    v30 += 16;
  }
  *(_QWORD *)&v84[0] = mlx::core::to_stream(a6, a7);
  DWORD2(v84[0]) = v35;
  v77.__r_.__value_.__r.__words[0] = 1;
  if (mlx::core::operator==((_DWORD *)v84 + 1, &v77)
    && (unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 60) << 32 == 0x800000000)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v84);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"[scatter] GPU scatter does not yet support ", 43);
    v77.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)a1 + 56);
    v68 = mlx::core::operator<<(v67, &v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" for the input or updates.", 26);
    v69 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v84 + 8, &v77);
    std::logic_error::logic_error(v69, &v77);
    v69->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v69, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::vector<mlx::core::array>::insert(&v81, (uint64_t)v81, (uint64_t *)a1);
  v36 = (_QWORD *)*((_QWORD *)a3 + 1);
  v74[0] = *(_QWORD *)a3;
  v74[1] = v36;
  if (v36)
  {
    v37 = v36 + 1;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  mlx::core::astype(v74, *(_QWORD *)(*(_QWORD *)a1 + 56), a6, a7, v84);
  std::vector<mlx::core::array>::push_back[abi:ne180100](&v81, (uint64_t)v84);
  mlx::core::array::~array((mlx::core::array *)v84);
  mlx::core::array::~array((mlx::core::array *)v74);
  v39 = *(const void ***)a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v39, (uint64_t)v39[1], ((_BYTE *)v39[1] - (_BYTE *)*v39) >> 2);
  v40 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)mlx::core::to_stream(a6, a7);
  LODWORD(v77.__r_.__value_.__r.__words[1]) = v41;
  std::allocate_shared[abi:ne180100]<mlx::core::Scatter,std::allocator<mlx::core::Scatter>,mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,void>((uint64_t *)&v77, &v85, (uint64_t)a4, v84);
  v72 = v84[0];
  v84[0] = 0uLL;
  v71 = 0;
  v70 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v70, v81, v82, (v82 - v81) >> 4);
  mlx::core::array::array(a8, (__int128 *)__p, v40, &v72, &v70);
  v86 = (void **)&v70;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v86);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v84[0] + 1);
  if (*((_QWORD *)&v84[0] + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v84[0] + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  *(_QWORD *)&v84[0] = &v81;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  std::__tree<int>::destroy((uint64_t)&v83, (_QWORD *)v83.__r_.__value_.__l.__size_);
}

void sub_24248A064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,_QWORD *a36,int a37,__int16 a38,char a39,char a40,char *a41)
{
  void *v41;
  int v42;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a41);
      if (a29)
        operator delete(a29);
      a41 = &a32;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
      std::__tree<int>::destroy((uint64_t)&a35, a36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

void mlx::core::scatter_add(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  mlx::core::scatter(a1, a2, a3, a4, 2, a5, a6, a7);
}

void mlx::core::scatter_prod(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  mlx::core::scatter(a1, a2, a3, a4, 3, a5, a6, a7);
}

void mlx::core::scatter_max(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  mlx::core::scatter(a1, a2, a3, a4, 0, a5, a6, a7);
}

void mlx::core::scatter_min(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  mlx::core::scatter(a1, a2, a3, a4, 1, a5, a6, a7);
}

void mlx::core::rsqrt(_QWORD *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  void *__p[3];
  void **v34;
  char v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v34 = *(void ***)(*a1 + 56);
  v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  v10 = mlx::core::to_stream(a2, a3);
  v12 = v11;
  v13 = operator new(0x30uLL);
  v13[2] = 0;
  *v13 = &unk_25134FD88;
  v13[1] = 0;
  v13[4] = v10;
  *((_DWORD *)v13 + 10) = v12;
  v13[3] = &unk_251352898;
  *((_BYTE *)v13 + 44) = 1;
  *(_QWORD *)&v32 = v13 + 3;
  *((_QWORD *)&v32 + 1) = v13;
  v30 = 0;
  v31 = 0;
  v14 = a1[1];
  v27[0] = *a1;
  v27[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v27, v8, a2, a3, v36);
  v28 = 0uLL;
  v29 = 0;
  v34 = (void **)&v28;
  v35 = 0;
  v17 = operator new(0x10uLL);
  *(_QWORD *)&v28 = v17;
  *((_QWORD *)&v28 + 1) = v17;
  v29 = v17 + 2;
  v18 = v36[1];
  *v17 = v36[0];
  v17[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_QWORD *)&v28 + 1) = v17 + 2;
  mlx::core::array::array(a4, (__int128 *)__p, v8, &v32, &v28);
  v34 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v34);
  mlx::core::array::~array((mlx::core::array *)v36);
  mlx::core::array::~array((mlx::core::array *)v27);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24248A49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v22 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::power(const void ***a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  const void **v11;
  unint64_t *v12;
  unint64_t v13;
  const void **v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t i;
  _BYTE *v25;
  size_t v26;
  _BYTE *v27;
  uint64_t v28;
  mlx::core *v29;
  int v30;
  int v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  void *__p[3];
  _QWORD v43[2];
  _QWORD v44[2];
  __int128 v45;
  _QWORD *v46;
  void **v47;
  char v48;
  __int128 v49;
  _QWORD v50[4];

  v50[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v49 = (*a1)[7];
  *(_QWORD *)&v45 = (*a2)[7];
  v10 = mlx::core::promote_types((int *)&v49, (int *)&v45);
  v11 = a1[1];
  v44[0] = *a1;
  v44[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v44, v10, a3, a4, &v49);
  v14 = a2[1];
  v43[0] = *a2;
  v43[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 1);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v43, v10, a3, a4, v50);
  v45 = 0uLL;
  v46 = 0;
  v47 = (void **)&v45;
  v48 = 0;
  v17 = operator new(0x20uLL);
  v18 = 0;
  *(_QWORD *)&v45 = v17;
  *((_QWORD *)&v45 + 1) = v17;
  v46 = v17 + 4;
  do
  {
    v19 = &v50[2 * v18 - 2];
    v21 = *v19;
    v20 = v19[1];
    *v17 = v21;
    v17[1] = v20;
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    ++v18;
    v17 += 2;
  }
  while (v18 != 2);
  *((_QWORD *)&v45 + 1) = v17;
  for (i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v50[i - 2]);
  mlx::core::array::~array((mlx::core::array *)v43);
  mlx::core::array::~array((mlx::core::array *)v44);
  v25 = **a1;
  v26 = (_BYTE *)(*a1)[1] - v25;
  v27 = **a2;
  if (v26 != (_BYTE *)(*a2)[1] - v27 || memcmp(v25, v27, v26))
  {
    mlx::core::broadcast_arrays((const void ****)&v45, a3, a4, (uint64_t)&v49);
    std::vector<mlx::core::array>::__vdeallocate((void **)&v45);
    v45 = v49;
    v46 = (_QWORD *)v50[0];
    v50[0] = 0;
    v49 = 0uLL;
    v47 = (void **)&v49;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v47);
  }
  v28 = *(_QWORD *)v45;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v28, *(_QWORD *)(v28 + 8), (uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)v28) >> 2);
  v29 = mlx::core::to_stream(a3, a4);
  v31 = v30;
  v32 = operator new(0x30uLL);
  v32[2] = 0;
  *v32 = &unk_25134FDD8;
  v32[1] = 0;
  v32[4] = v29;
  v32[3] = &unk_2513520B0;
  *((_DWORD *)v32 + 10) = v31;
  *(_QWORD *)&v41 = v32 + 3;
  *((_QWORD *)&v41 + 1) = v32;
  v49 = 0uLL;
  v40 = 0;
  v39 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v39, (_QWORD *)v45, *((_QWORD **)&v45 + 1), (uint64_t)(*((_QWORD *)&v45 + 1) - v45) >> 4);
  mlx::core::array::array(a5, (__int128 *)__p, v10, &v41, &v39);
  v47 = (void **)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v47);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)&v49 = &v45;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
}

void sub_24248A870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  *(_QWORD *)(v25 - 128) = &a21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 128));
  _Unwind_Resume(a1);
}

void mlx::core::cumsum(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v18;
  mlx::core *v19;
  int v20;
  int v21;
  _QWORD *v22;
  const void **v23;
  const void **v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::logic_error *exception;
  __int128 v39;
  _QWORD *v40;
  __int128 v41;
  void *__p[3];
  std::string v43;
  void **v44;
  char v45[256];
  _QWORD v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  v11 = **a1;
  v12 = (uint64_t)(*a1)[1];
  v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"[cumsum] Axis ", 14);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" is out of bounds for array with ", 33);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v45, &v43);
    std::logic_error::logic_error(exception, &v43);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if ((*a1)[7])
    v18 = (uint64_t)(*a1)[7];
  else
    v18 = 0x400000004;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  v19 = mlx::core::to_stream(a5, a6);
  v21 = v20;
  v22 = operator new(0x38uLL);
  v22[2] = 0;
  *v22 = &unk_25134FE28;
  v22[1] = 0;
  v22[4] = v19;
  v22[3] = &unk_2513522D0;
  *((_DWORD *)v22 + 10) = v21;
  *((_DWORD *)v22 + 11) = 2;
  *((_DWORD *)v22 + 12) = (v13 + a2) % v13;
  *((_BYTE *)v22 + 52) = a3;
  *((_BYTE *)v22 + 53) = a4;
  *(_QWORD *)&v41 = v22 + 3;
  *((_QWORD *)&v41 + 1) = v22;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = 0uLL;
  v24 = *a1;
  v23 = a1[1];
  v46[0] = v24;
  v46[1] = v23;
  if (v23)
  {
    v25 = (unint64_t *)(v23 + 1);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v39 = 0uLL;
  v40 = 0;
  v44 = (void **)&v39;
  v45[0] = 0;
  v27 = operator new(0x10uLL);
  *(_QWORD *)&v39 = v27;
  v40 = v27 + 2;
  *v27 = v24;
  v27[1] = v23;
  if (v23)
  {
    v28 = (unint64_t *)(v23 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  *((_QWORD *)&v39 + 1) = v27 + 2;
  mlx::core::array::array(a7, (__int128 *)__p, v18, &v41, &v39);
  v44 = (void **)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v44);
  mlx::core::array::~array((mlx::core::array *)v46);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24248AC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::cumprod(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v18;
  mlx::core *v19;
  int v20;
  _QWORD *v21;
  const void **v22;
  const void **v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::logic_error *exception;
  __int128 v38;
  _QWORD *v39;
  __int128 v40;
  void *__p[3];
  std::string v42;
  void **v43;
  char v44[256];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v11 = **a1;
  v12 = (uint64_t)(*a1)[1];
  v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"[cumprod] Axis ", 15);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" is out of bounds for array with ", 33);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v44, &v42);
    std::logic_error::logic_error(exception, &v42);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  v18 = (uint64_t)(*a1)[7];
  v19 = mlx::core::to_stream(a5, a6);
  LODWORD(a6) = v20;
  v21 = operator new(0x38uLL);
  v21[2] = 0;
  *v21 = &unk_25134FE28;
  v21[1] = 0;
  v21[4] = v19;
  v21[3] = &unk_2513522D0;
  *((_DWORD *)v21 + 10) = a6;
  *((_DWORD *)v21 + 11) = 3;
  *((_DWORD *)v21 + 12) = (v13 + a2) % v13;
  *((_BYTE *)v21 + 52) = a3;
  *((_BYTE *)v21 + 53) = a4;
  *(_QWORD *)&v40 = v21 + 3;
  *((_QWORD *)&v40 + 1) = v21;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *a1;
  v22 = a1[1];
  v45[0] = v23;
  v45[1] = v22;
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v38 = 0uLL;
  v39 = 0;
  v43 = (void **)&v38;
  v44[0] = 0;
  v26 = operator new(0x10uLL);
  *(_QWORD *)&v38 = v26;
  v39 = v26 + 2;
  *v26 = v23;
  v26[1] = v22;
  if (v22)
  {
    v27 = (unint64_t *)(v22 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *((_QWORD *)&v38 + 1) = v26 + 2;
  mlx::core::array::array(a7, (__int128 *)__p, v18, &v40, &v38);
  v43 = (void **)&v38;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v43);
  mlx::core::array::~array((mlx::core::array *)v45);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  size = (std::__shared_weak_count *)v42.__r_.__value_.__l.__size_;
  if (v42.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v42.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24248AFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::cummax(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v18;
  mlx::core *v19;
  int v20;
  _QWORD *v21;
  const void **v22;
  const void **v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::logic_error *exception;
  __int128 v38;
  _QWORD *v39;
  __int128 v40;
  void *__p[3];
  std::string v42;
  void **v43;
  char v44[256];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v11 = **a1;
  v12 = (uint64_t)(*a1)[1];
  v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"[cummax] Axis ", 14);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" is out of bounds for array with ", 33);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v44, &v42);
    std::logic_error::logic_error(exception, &v42);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  v18 = (uint64_t)(*a1)[7];
  v19 = mlx::core::to_stream(a5, a6);
  LODWORD(a6) = v20;
  v21 = operator new(0x38uLL);
  v21[2] = 0;
  *v21 = &unk_25134FE28;
  v21[1] = 0;
  v21[4] = v19;
  v21[3] = &unk_2513522D0;
  *((_DWORD *)v21 + 10) = a6;
  *((_DWORD *)v21 + 11) = 0;
  *((_DWORD *)v21 + 12) = (v13 + a2) % v13;
  *((_BYTE *)v21 + 52) = a3;
  *((_BYTE *)v21 + 53) = a4;
  *(_QWORD *)&v40 = v21 + 3;
  *((_QWORD *)&v40 + 1) = v21;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *a1;
  v22 = a1[1];
  v45[0] = v23;
  v45[1] = v22;
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v38 = 0uLL;
  v39 = 0;
  v43 = (void **)&v38;
  v44[0] = 0;
  v26 = operator new(0x10uLL);
  *(_QWORD *)&v38 = v26;
  v39 = v26 + 2;
  *v26 = v23;
  v26[1] = v22;
  if (v22)
  {
    v27 = (unint64_t *)(v22 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *((_QWORD *)&v38 + 1) = v26 + 2;
  mlx::core::array::array(a7, (__int128 *)__p, v18, &v40, &v38);
  v43 = (void **)&v38;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v43);
  mlx::core::array::~array((mlx::core::array *)v45);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  size = (std::__shared_weak_count *)v42.__r_.__value_.__l.__size_;
  if (v42.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v42.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24248B390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::cummin(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v18;
  mlx::core *v19;
  int v20;
  _QWORD *v21;
  const void **v22;
  const void **v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::logic_error *exception;
  __int128 v38;
  _QWORD *v39;
  __int128 v40;
  void *__p[3];
  std::string v42;
  void **v43;
  char v44[256];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v11 = **a1;
  v12 = (uint64_t)(*a1)[1];
  v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"[cummin] Axis ", 14);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" is out of bounds for array with ", 33);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v44, &v42);
    std::logic_error::logic_error(exception, &v42);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  v18 = (uint64_t)(*a1)[7];
  v19 = mlx::core::to_stream(a5, a6);
  LODWORD(a6) = v20;
  v21 = operator new(0x38uLL);
  v21[2] = 0;
  *v21 = &unk_25134FE28;
  v21[1] = 0;
  v21[4] = v19;
  v21[3] = &unk_2513522D0;
  *((_DWORD *)v21 + 10) = a6;
  *((_DWORD *)v21 + 11) = 1;
  *((_DWORD *)v21 + 12) = (v13 + a2) % v13;
  *((_BYTE *)v21 + 52) = a3;
  *((_BYTE *)v21 + 53) = a4;
  *(_QWORD *)&v40 = v21 + 3;
  *((_QWORD *)&v40 + 1) = v21;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *a1;
  v22 = a1[1];
  v45[0] = v23;
  v45[1] = v22;
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v38 = 0uLL;
  v39 = 0;
  v43 = (void **)&v38;
  v44[0] = 0;
  v26 = operator new(0x10uLL);
  *(_QWORD *)&v38 = v26;
  v39 = v26 + 2;
  *v26 = v23;
  v26[1] = v22;
  if (v22)
  {
    v27 = (unint64_t *)(v22 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *((_QWORD *)&v38 + 1) = v26 + 2;
  mlx::core::array::array(a7, (__int128 *)__p, v18, &v40, &v38);
  v43 = (void **)&v38;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v43);
  mlx::core::array::~array((mlx::core::array *)v45);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  size = (std::__shared_weak_count *)v42.__r_.__value_.__l.__size_;
  if (v42.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v42.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24248B734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::tensordot(mlx::core::array *a1@<X0>, mlx::core::array *a2@<X1>, unsigned int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  int i;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  std::logic_error *exception;
  void *__p;
  char *v38;
  char *v39;
  void *v40;
  char *v41;
  char *v42;

  if ((a3 & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tensordot] axis must be greater or equal to 0.");
    goto LABEL_49;
  }
  v9 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((v10 - **(_QWORD **)a2) >> 2 < v9)
    v9 = (v10 - **(_QWORD **)a2) >> 2;
  if (v9 < a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tensordot] axis must be less than the number of dimensions of a and b.");
LABEL_49:
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  __p = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v38 = 0;
  v39 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v12 = v38;
      if (v38 >= v39)
      {
        v14 = (char *)__p;
        v15 = (v38 - (_BYTE *)__p) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v39 - (_BYTE *)__p;
        if ((v39 - (_BYTE *)__p) >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v39, v18);
          v14 = (char *)__p;
          v12 = v38;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v15];
        *(_DWORD *)v20 = i;
        v13 = v20 + 4;
        while (v12 != v14)
        {
          v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        __p = v20;
        v38 = v13;
        v39 = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)v38 = i;
        v13 = v12 + 4;
      }
      v38 = v13;
      v22 = i - a3;
      v23 = v41;
      if (v41 >= v42)
      {
        v25 = (char *)v40;
        v26 = (v41 - (_BYTE *)v40) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v28 = v42 - (_BYTE *)v40;
        if ((v42 - (_BYTE *)v40) >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, v29);
          v25 = (char *)v40;
          v23 = v41;
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[4 * v26];
        *(_DWORD *)v31 = v22;
        v24 = v31 + 4;
        while (v23 != v25)
        {
          v32 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        v40 = v31;
        v41 = v24;
        v42 = &v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_DWORD *)v41 = v22;
        v24 = v23 + 4;
      }
      v41 = v24;
    }
  }
  mlx::core::tensordot(a1, a2, (unsigned int **)&v40, (unsigned int **)&__p, a4, a5, a6);
  if (__p)
  {
    v38 = (char *)__p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = (char *)v40;
    operator delete(v40);
  }
}

void sub_24248BA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void mlx::core::tensordot(mlx::core::array *a1@<X0>, mlx::core::array *a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  _QWORD *v27;
  char *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int v112;
  _QWORD *v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  _QWORD *v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::logic_error *v123;
  std::logic_error *exception;
  const void ***v125;
  unsigned int v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  void *v135;
  void *v136;
  uint64_t v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  void *v141;
  void *v142;
  uint64_t v143;
  const void **v144[2];
  __int128 v145;
  void *__p;
  _DWORD *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  unint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  void *v155[3];
  char *v156;
  __int128 v157;
  _OWORD v158[2];

  if ((char *)a3[1] - (char *)*a3 != (char *)a4[1] - (char *)*a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tensordot] axes must have the same size.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v12 = *(uint64_t **)a1;
  v13 = *((_QWORD *)a1 + 1);
  *(_QWORD *)&v158[0] = *(_QWORD *)a1;
  *((_QWORD *)&v158[0] + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v157 = *(_QWORD *)a2;
  *((_QWORD *)&v157 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *a3;
  if (a3[1] == *a3)
  {
    v21 = 1;
  }
  else
  {
    v20 = 0;
    v21 = 1;
    do
    {
      v22 = mlx::core::array::shape((mlx::core::array *)v158, v19[v20]);
      if (v20 >= a4[1] - *a4)
        goto LABEL_173;
      if (v22 != mlx::core::array::shape((mlx::core::array *)&v157, (*a4)[v20]))
      {
        v123 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v123, "[tensordot] a and b must have the same shape on the contracted axes.");
        v123->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v123, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      if (v20 >= a3[1] - *a3)
LABEL_173:
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v21 *= mlx::core::array::shape((mlx::core::array *)v158, (*a3)[v20++]);
      v19 = *a3;
    }
    while (v20 < a3[1] - *a3);
    v12 = *(uint64_t **)&v158[0];
  }
  v23 = (v12[1] - *v12) >> 2;
  LOBYTE(v155[0]) = 0;
  std::vector<BOOL>::vector(&v156, v23, (unsigned __int8 *)v155);
  v24 = (uint64_t)(*(_QWORD *)(v157 + 8) - *(_QWORD *)v157) >> 2;
  LOBYTE(v152) = 0;
  std::vector<BOOL>::vector(v155, v24, (unsigned __int8 *)&v152);
  v25 = *a3;
  v26 = a3[1];
  if (*a3 != v26)
  {
    v27 = *(_QWORD **)&v158[0];
    v28 = v156;
    v29 = *a3;
    do
    {
      v30 = *v29;
      if ((v30 & 0x80000000) != 0)
        v30 += (uint64_t)(v27[1] - *v27) >> 2;
      *(_QWORD *)&v28[((unint64_t)(int)v30 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v30;
      ++v29;
    }
    while (v29 != v26);
  }
  v31 = *a4;
  v32 = a4[1];
  if (*a4 != v32)
  {
    v33 = (_QWORD *)v157;
    v34 = (char *)v155[0];
    do
    {
      v35 = *v31;
      if ((v35 & 0x80000000) != 0)
        v35 += (uint64_t)(v33[1] - *v33) >> 2;
      *(_QWORD *)&v34[((unint64_t)(int)v35 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v35;
      ++v31;
    }
    while (v31 != v32);
  }
  v125 = a7;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v147 = 0;
  v148 = 0;
  __p = 0;
  v36 = *(uint64_t **)a1;
  v37 = **(_QWORD **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 8) == v37)
  {
    v128 = 1;
  }
  else
  {
    v38 = 0;
    v128 = 1;
    do
    {
      if (((*(_QWORD *)&v156[(v38 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      {
        v39 = v153;
        if ((unint64_t)v153 >= v154)
        {
          v41 = v152;
          v42 = (v153 - v152) >> 2;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v44 = v154 - (_QWORD)v152;
          if ((uint64_t)(v154 - (_QWORD)v152) >> 1 > v43)
            v43 = v44 >> 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
            v45 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v154, v45);
            v41 = v152;
            v39 = v153;
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[4 * v42];
          *(_DWORD *)v47 = v38;
          v40 = v47 + 4;
          while (v39 != v41)
          {
            v48 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *((_DWORD *)v47 - 1) = v48;
            v47 -= 4;
          }
          v152 = v47;
          v153 = v40;
          v154 = (unint64_t)&v46[4 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *(_DWORD *)v153 = v38;
          v40 = v39 + 4;
        }
        v153 = v40;
        v49 = mlx::core::array::shape(a1, v38);
        v50 = mlx::core::array::shape(a1, v38);
        v51 = v50;
        v52 = v147;
        if ((unint64_t)v147 >= v148)
        {
          v54 = __p;
          v55 = ((char *)v147 - (_BYTE *)__p) >> 2;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v57 = v148 - (_QWORD)__p;
          if ((uint64_t)(v148 - (_QWORD)__p) >> 1 > v56)
            v56 = v57 >> 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
            v58 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v148, v58);
            v54 = __p;
            v52 = v147;
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[4 * v55];
          *(_DWORD *)v60 = v51;
          v53 = v60 + 4;
          while (v52 != v54)
          {
            v61 = *--v52;
            *((_DWORD *)v60 - 1) = v61;
            v60 -= 4;
          }
          __p = v60;
          v147 = v53;
          v148 = (unint64_t)&v59[4 * v58];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *v147 = v50;
          v53 = v52 + 1;
        }
        v128 *= v49;
        v147 = v53;
        v36 = *(uint64_t **)a1;
        v37 = **(_QWORD **)a1;
      }
      ++v38;
    }
    while (v38 < (v36[1] - v37) >> 2);
    v25 = *a3;
    v26 = a3[1];
  }
  if (v25 != v26)
  {
    v62 = (unsigned int *)v153;
    do
    {
      v63 = *v25;
      if ((unint64_t)v62 >= v154)
      {
        v65 = v152;
        v66 = ((char *)v62 - v152) >> 2;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v68 = v154 - (_QWORD)v152;
        if ((uint64_t)(v154 - (_QWORD)v152) >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v154, v69);
          v65 = v152;
          v62 = (unsigned int *)v153;
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[4 * v66];
        *(_DWORD *)v71 = v63;
        v64 = v71 + 4;
        while (v62 != (unsigned int *)v65)
        {
          v72 = *--v62;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
        v152 = v71;
        v153 = v64;
        v154 = (unint64_t)&v70[4 * v69];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v62 = v63;
        v64 = (char *)(v62 + 1);
      }
      v153 = v64;
      ++v25;
      v62 = (unsigned int *)v64;
    }
    while (v25 != v26);
  }
  v73 = *a4;
  v74 = a4[1];
  if (*a4 != v74)
  {
    v75 = (unsigned int *)v150;
    do
    {
      v76 = *v73;
      if ((unint64_t)v75 >= v151)
      {
        v78 = v149;
        v79 = ((char *)v75 - v149) >> 2;
        v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v81 = v151 - (_QWORD)v149;
        if ((uint64_t)(v151 - (_QWORD)v149) >> 1 > v80)
          v80 = v81 >> 1;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
          v82 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
        {
          v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v151, v82);
          v78 = v149;
          v75 = (unsigned int *)v150;
        }
        else
        {
          v83 = 0;
        }
        v84 = &v83[4 * v79];
        *(_DWORD *)v84 = v76;
        v77 = v84 + 4;
        while (v75 != (unsigned int *)v78)
        {
          v85 = *--v75;
          *((_DWORD *)v84 - 1) = v85;
          v84 -= 4;
        }
        v149 = v84;
        v150 = v77;
        v151 = (unint64_t)&v83[4 * v82];
        if (v78)
          operator delete(v78);
      }
      else
      {
        *v75 = v76;
        v77 = (char *)(v75 + 1);
      }
      v150 = v77;
      ++v73;
      v75 = (unsigned int *)v77;
    }
    while (v73 != v74);
  }
  v86 = *(uint64_t **)a2;
  v87 = **(_QWORD **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == v87)
  {
    v89 = 1;
  }
  else
  {
    v88 = 0;
    v89 = 1;
    do
    {
      if (((*(_QWORD *)((char *)v155[0] + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v88) & 1) == 0)
      {
        v90 = v150;
        if ((unint64_t)v150 >= v151)
        {
          v92 = v149;
          v93 = (v150 - v149) >> 2;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v95 = v151 - (_QWORD)v149;
          if ((uint64_t)(v151 - (_QWORD)v149) >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v151, v96);
            v92 = v149;
            v90 = v150;
          }
          else
          {
            v97 = 0;
          }
          v98 = &v97[4 * v93];
          *(_DWORD *)v98 = v88;
          v91 = v98 + 4;
          while (v90 != v92)
          {
            v99 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v98 - 1) = v99;
            v98 -= 4;
          }
          v149 = v98;
          v150 = v91;
          v151 = (unint64_t)&v97[4 * v96];
          if (v92)
            operator delete(v92);
        }
        else
        {
          *(_DWORD *)v150 = v88;
          v91 = v90 + 4;
        }
        v150 = v91;
        v100 = mlx::core::array::shape(a2, v88);
        v101 = mlx::core::array::shape(a2, v88);
        v102 = v101;
        v103 = v147;
        if ((unint64_t)v147 >= v148)
        {
          v105 = __p;
          v106 = ((char *)v147 - (_BYTE *)__p) >> 2;
          v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v108 = v148 - (_QWORD)__p;
          if ((uint64_t)(v148 - (_QWORD)__p) >> 1 > v107)
            v107 = v108 >> 1;
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
            v109 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v109 = v107;
          if (v109)
          {
            v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v148, v109);
            v105 = __p;
            v103 = v147;
          }
          else
          {
            v110 = 0;
          }
          v111 = &v110[4 * v106];
          *(_DWORD *)v111 = v102;
          v104 = v111 + 4;
          while (v103 != v105)
          {
            v112 = *--v103;
            *((_DWORD *)v111 - 1) = v112;
            v111 -= 4;
          }
          __p = v111;
          v147 = v104;
          v148 = (unint64_t)&v110[4 * v109];
          if (v105)
            operator delete(v105);
        }
        else
        {
          *v147 = v101;
          v104 = v103 + 1;
        }
        v89 = (v100 * v89);
        v147 = v104;
        v86 = *(uint64_t **)a2;
        v87 = **(_QWORD **)a2;
      }
      ++v88;
    }
    while (v88 < (v86[1] - v87) >> 2);
  }
  v142 = 0;
  v143 = 0;
  v141 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v141, v152, (uint64_t)v153, (v153 - v152) >> 2);
  mlx::core::transpose((uint64_t **)v158, (unsigned int **)&v141, a5, a6, v144);
  v113 = operator new(8uLL);
  v138 = v113;
  *v113 = v128 | ((unint64_t)v21 << 32);
  v139 = v113 + 1;
  v140 = v113 + 1;
  mlx::core::reshape(v144, (uint64_t)&v138, a5, a6, (const void ***)&v145);
  v114 = v145;
  v145 = 0uLL;
  v115 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  v158[0] = v114;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v145);
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  mlx::core::array::~array((mlx::core::array *)v144);
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  v136 = 0;
  v137 = 0;
  v135 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v135, v149, (uint64_t)v150, (v150 - v149) >> 2);
  mlx::core::transpose((uint64_t **)&v157, (unsigned int **)&v135, a5, a6, v144);
  v118 = operator new(8uLL);
  v132 = v118;
  *v118 = v21 | (unint64_t)(v89 << 32);
  v133 = v118 + 1;
  v134 = v118 + 1;
  mlx::core::reshape(v144, (uint64_t)&v132, a5, a6, (const void ***)&v145);
  v119 = v145;
  v145 = 0uLL;
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  v157 = v119;
  if (v120)
  {
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v145);
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  mlx::core::array::~array((mlx::core::array *)v144);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  mlx::core::matmul(v158, &v157, a5, a6, (const void ***)&v145);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v129, __p, (uint64_t)v147, ((char *)v147 - (_BYTE *)__p) >> 2);
  mlx::core::reshape((const void ***)&v145, (uint64_t)&v129, a5, a6, v125);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  mlx::core::array::~array((mlx::core::array *)&v145);
  if (__p)
  {
    v147 = __p;
    operator delete(__p);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v155[0])
    operator delete(v155[0]);
  if (v156)
    operator delete(v156);
  mlx::core::array::~array((mlx::core::array *)&v157);
  mlx::core::array::~array((mlx::core::array *)v158);
}

void sub_24248C5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  __cxa_free_exception(v37);
  _Unwind_Resume(a1);
}

void mlx::core::outer(const void ***a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  void *v12[2];
  void *__p;
  void *v14;
  _QWORD *v15;
  const void **v16[2];

  v10 = *((unsigned int *)*a1 + 12);
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10 | 0x100000000;
  v14 = v11 + 1;
  v15 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v16);
  mlx::core::flatten(a2, 0, ((unint64_t)((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2) - 1, a3, a4, (uint64_t)v12);
  mlx::core::multiply(v16, v12, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_24248C804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array::~array((mlx::core::array *)&a10);
  mlx::core::array::~array((mlx::core::array *)&a15);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::inner(mlx::core::array *a1@<X0>, mlx::core::array *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  _DWORD *v18;
  void *v19;
  void *v20;
  _DWORD *v21;

  v10 = **(_QWORD **)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 8) - v10;
  if (!v11 || (v12 = *(_QWORD *)(*(_QWORD *)a2 + 8), v12 == **(_QWORD **)a2))
  {
    mlx::core::multiply(a1, a2, a3, a4, a5);
  }
  else
  {
    if (*(_DWORD *)(v10 + 4 * (v11 >> 2) - 4) != *(_DWORD *)(v12 - 4))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[inner] a and b must have the same last dimension.");
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    v13 = operator new(4uLL);
    v19 = v13;
    *v13 = -1;
    v20 = v13 + 1;
    v21 = v13 + 1;
    v14 = operator new(4uLL);
    __p = v14;
    *v14 = -1;
    v17 = v14 + 1;
    v18 = v14 + 1;
    mlx::core::tensordot(a1, a2, (unsigned int **)&v19, (unsigned int **)&__p, a3, a4, a5);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }
}

void sub_24248C984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void mlx::core::addmm(const void ***a1@<X0>, const void ***a2@<X1>, const void ***a3@<X2>, int *a4@<X3>, int *a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, const void ***a8@<X8>)
{
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  _QWORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  _QWORD *v22;
  _DWORD *v23;
  const void **v24;
  const void **v25;
  unint64_t *v26;
  unint64_t v27;
  const void **v28;
  unint64_t *v29;
  unint64_t v30;
  const void **v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  const void **v35;
  _BYTE *v36;
  _BYTE *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  const void **v41;
  _BYTE *v42;
  _DWORD *v43;
  int v44;
  std::string::size_type size;
  std::string::size_type v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  mlx::core *v57;
  int v58;
  int v59;
  _QWORD *v60;
  int v61;
  int v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  const void **v66;
  unint64_t *v67;
  unint64_t v68;
  const void **v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void **v74;
  char *v75;
  void *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t i;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  const void *v86;
  uint64_t v87;
  int v88;
  std::vector<int>::pointer end;
  int *v90;
  std::vector<int>::pointer begin;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  char *v96;
  int *v97;
  int *v98;
  int v99;
  _DWORD *v100;
  int v101;
  int v102;
  int *v103;
  std::vector<int>::pointer v104;
  uint64_t v105;
  unint64_t v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  int *v110;
  int *v111;
  int v112;
  _DWORD *v113;
  std::vector<int>::pointer v114;
  _DWORD *v115;
  std::string::size_type v116;
  uint64_t v117;
  BOOL v118;
  int v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  std::vector<int>::pointer v123;
  char *v124;
  const void **v125;
  char *v126;
  void *v127;
  char *v128;
  int64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  const void **v135;
  int v136;
  _DWORD *v137;
  char *v138;
  int64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  const void **v146;
  int v147;
  uint64_t v148;
  mlx::core *v149;
  int v150;
  int v151;
  _QWORD *v152;
  int v153;
  int v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t v157;
  const void **v158;
  unint64_t *v159;
  unint64_t v160;
  const void **v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  void **v166;
  char *v167;
  void *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t j;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *p_shared_owners;
  unint64_t v177;
  std::logic_error *exception;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  std::logic_error *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  std::logic_error *v193;
  void *v197;
  void *v198;
  uint64_t v199;
  __int128 v200;
  _QWORD *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  __int128 v204;
  void *v205[3];
  void *v206;
  void *v207;
  uint64_t v208;
  std::vector<int> v209;
  std::vector<int> v210;
  void *v211;
  void *v212;
  uint64_t v213;
  __int128 v214;
  _QWORD *v215;
  __int128 v216;
  __int128 v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  _QWORD v222[2];
  _QWORD v223[2];
  _QWORD v224[2];
  uint64_t v225;
  std::string v226;
  void *v227;
  void *v228;
  _QWORD *v229;
  void *__p;
  void *v231;
  _QWORD *v232;
  __int128 v233;
  void *v234[2];
  const void **v235;
  const void **v236;
  const void **v237;
  const void **v238;
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v8 = **a2;
  v9 = (*a2)[1];
  v11 = **a3;
  v10 = (*a3)[1];
  v12 = v9 - v8;
  if (v9 == v8 || v10 == v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[addmm] Got 0 dimension input. Inputs must have at least one dimension.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v12 == 4)
  {
    v19 = operator new(8uLL);
    __p = v19;
    *v19 = 0xFFFFFFFF00000001;
    v231 = v19 + 1;
    v232 = v19 + 1;
    mlx::core::reshape(a2, (uint64_t)&__p, a6, a7, (const void ***)v234);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)v234);
    mlx::core::array::~array((mlx::core::array *)v234);
    if (__p)
    {
      v231 = __p;
      operator delete(__p);
    }
    v20 = **a3;
    v21 = (*a3)[1];
  }
  else
  {
    v20 = **a3;
    v21 = (*a3)[1];
  }
  if (v21 - v20 == 4)
  {
    v22 = operator new(8uLL);
    v227 = v22;
    *v22 = 0x1FFFFFFFFLL;
    v229 = v22 + 1;
    v228 = v22 + 1;
    mlx::core::reshape(a3, (uint64_t)&v227, a6, a7, (const void ***)v234);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)v234);
    mlx::core::array::~array((mlx::core::array *)v234);
    if (v227)
    {
      v228 = v227;
      operator delete(v227);
    }
  }
  v23 = (*a2)[1];
  if (v23 == **a2)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v24 = *a3;
  if ((unint64_t)((_BYTE *)(*a3)[1] - (_BYTE *)**a3) <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  if (*(v23 - 1) != *((_DWORD *)(*a3)[1] - 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v234);
    v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"[addmm] Last dimension of first input with shape ", 49);
    v180 = mlx::core::operator<<(v179, *a2);
    v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)" must match second to last dimension of", 39);
    v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)" second input with shape ", 25);
    v183 = mlx::core::operator<<(v182, *a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)".", 1);
    v184 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v234[1], &v226);
    std::logic_error::logic_error(v184, &v226);
    v184->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v184, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v234[0] = (void *)(*a2)[7];
  v226.__r_.__value_.__r.__words[0] = (std::string::size_type)v24[7];
  v234[0] = (void *)mlx::core::promote_types((int *)v234, (int *)&v226);
  v226.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
  v225 = mlx::core::promote_types((int *)v234, (int *)&v226);
  if ((mlx::core::issubdtype((unsigned int *)&v225, (unsigned int *)&mlx::core::floating) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v234);
    v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"[addmm] Only real floating point types are supported but ", 57);
    v226.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    v186 = mlx::core::operator<<(v185, &v226);
    v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)", ", 2);
    v210.__begin_ = (std::vector<int>::pointer)(*a2)[7];
    v188 = mlx::core::operator<<(v187, &v210);
    v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)" and ", 5);
    v209.__begin_ = (std::vector<int>::pointer)(*a3)[7];
    v190 = mlx::core::operator<<(v189, &v209);
    v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)" were provided which results in ", 32);
    v192 = mlx::core::operator<<(v191, &v225);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)", which is not a real floating point type.", 42);
    v193 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v234[1], &v226);
    std::logic_error::logic_error(v193, &v226);
    v193->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v193, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v25 = a2[1];
  v224[0] = *a2;
  v224[1] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  mlx::core::astype(v224, v225, a6, a7, v234);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)v234);
  mlx::core::array::~array((mlx::core::array *)v234);
  mlx::core::array::~array((mlx::core::array *)v224);
  v28 = a3[1];
  v223[0] = *a3;
  v223[1] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 1);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  mlx::core::astype(v223, v225, a6, a7, v234);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)v234);
  mlx::core::array::~array((mlx::core::array *)v234);
  mlx::core::array::~array((mlx::core::array *)v223);
  v31 = a1[1];
  v222[0] = *a1;
  v222[1] = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 1);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  mlx::core::astype(v222, v225, a6, a7, v234);
  v34 = (unint64_t)(v10 - v11) >> 2;
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v234);
  mlx::core::array::~array((mlx::core::array *)v234);
  mlx::core::array::~array((mlx::core::array *)v222);
  v35 = *a2;
  v36 = **a2;
  v37 = (*a2)[1];
  v38 = (_BYTE *)(*a3)[1] - (_BYTE *)**a3;
  if ((unint64_t)(v37 - v36) >= 9)
  {
    if (v38 == 8 && (unint64_t)((_BYTE *)(*a1)[1] - (_BYTE *)**a1) <= 7)
    {
      memset(&v226, 0, sizeof(v226));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v35, (uint64_t)v35[1], ((_BYTE *)v35[1] - (_BYTE *)*v35) >> 2);
      v39 = *(unsigned int *)(v226.__r_.__value_.__l.__size_ - 4);
      v40 = operator new(8uLL);
      v219 = v40;
      *v40 = (v39 << 32) | 0xFFFFFFFFLL;
      v220 = v40 + 1;
      v221 = v40 + 1;
      mlx::core::reshape(a2, (uint64_t)&v219, a6, a7, (const void ***)v234);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)v234);
      mlx::core::array::~array((mlx::core::array *)v234);
      if (v219)
      {
        v220 = v219;
        operator delete(v219);
      }
      v41 = *a3;
      v42 = **a3;
      v43 = (*a3)[1];
      if (v43 == (_DWORD *)v42)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v44 = *(v43 - 1);
      size = v226.__r_.__value_.__l.__size_;
      *(_DWORD *)(v226.__r_.__value_.__l.__size_ - 4) = v44;
      v46 = size - 4;
      if ((_DWORD)v34 == 1)
        v226.__r_.__value_.__l.__size_ = v46;
      v47 = (unsigned int *)**a2;
      if ((*a2)[1] == v47 || (unint64_t)((_BYTE *)v41[1] - v42) <= 4)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v48 = *v47;
      v49 = *((unsigned int *)v42 + 1);
      v50 = operator new(8uLL);
      v234[0] = v50;
      *v50 = v48 | (v49 << 32);
      v234[1] = v50 + 1;
      v235 = (const void **)(v50 + 1);
      mlx::core::broadcast_to(a1, (const void **)v234, a6, a7, (const void ***)&v210);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v210);
      mlx::core::array::~array((mlx::core::array *)&v210);
      if (v234[0])
      {
        v234[1] = v234[0];
        operator delete(v234[0]);
      }
      v51 = (unsigned int *)**a2;
      if ((*a2)[1] == v51 || (v52 = **a3, (unint64_t)((_BYTE *)(*a3)[1] - v52) <= 4))
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v53 = *v51;
      v54 = *((unsigned int *)v52 + 1);
      v217 = 0uLL;
      v218 = 0;
      v55 = operator new(8uLL);
      *(_QWORD *)&v217 = v55;
      *v55 = v53 | (v54 << 32);
      *((_QWORD *)&v217 + 1) = v55 + 1;
      v218 = v55 + 1;
      v56 = v225;
      v57 = mlx::core::to_stream(a6, a7);
      v59 = v58;
      v60 = operator new(0x38uLL);
      v60[1] = 0;
      v60[2] = 0;
      *v60 = &unk_25134FE78;
      v61 = *a4;
      v62 = *a5;
      v60[4] = v57;
      *((_DWORD *)v60 + 10) = v59;
      v60[3] = &unk_25134D6F8;
      *((_DWORD *)v60 + 11) = v61;
      *((_DWORD *)v60 + 12) = v62;
      *(_QWORD *)&v216 = v60 + 3;
      *((_QWORD *)&v216 + 1) = v60;
      v233 = 0uLL;
      v63 = (unint64_t *)a2[1];
      v234[0] = *a2;
      v234[1] = v63;
      if (v63)
      {
        v64 = v63 + 1;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      v66 = a3[1];
      v235 = *a3;
      v236 = v66;
      if (v66)
      {
        v67 = (unint64_t *)(v66 + 1);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = a1[1];
      v237 = *a1;
      v238 = v69;
      if (v69)
      {
        v70 = (unint64_t *)(v69 + 1);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v214 = 0uLL;
      v215 = 0;
      v210.__begin_ = (std::vector<int>::pointer)&v214;
      LOBYTE(v210.__end_) = 0;
      v72 = operator new(0x30uLL);
      v73 = 0;
      *(_QWORD *)&v214 = v72;
      *((_QWORD *)&v214 + 1) = v72;
      v215 = v72 + 6;
      do
      {
        v74 = &v234[2 * v73];
        v76 = *v74;
        v75 = (char *)v74[1];
        *v72 = v76;
        v72[1] = v75;
        if (v75)
        {
          v77 = (unint64_t *)(v75 + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        ++v73;
        v72 += 2;
      }
      while (v73 != 3);
      *((_QWORD *)&v214 + 1) = v72;
      mlx::core::array::array(&v209, &v217, v56, &v216, &v214);
      v210.__begin_ = (std::vector<int>::pointer)&v214;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
      for (i = 4; i != -2; i -= 2)
        mlx::core::array::~array((mlx::core::array *)&v234[i]);
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
      if (*((_QWORD *)&v216 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
      if (*((_QWORD *)&v233 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if ((_QWORD)v217)
      {
        *((_QWORD *)&v217 + 1) = v217;
        operator delete((void *)v217);
      }
      v211 = 0;
      v212 = 0;
      v213 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v211, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_, (uint64_t)(v226.__r_.__value_.__l.__size_ - v226.__r_.__value_.__r.__words[0]) >> 2);
      mlx::core::reshape((const void ***)&v209, (uint64_t)&v211, a6, a7, a8);
      if (v211)
      {
        v212 = v211;
        operator delete(v211);
      }
      mlx::core::array::~array((mlx::core::array *)&v209);
      goto LABEL_207;
    }
    goto LABEL_72;
  }
  if (v38 >= 9)
  {
LABEL_72:
    v234[0] = 0;
    v234[1] = 0;
    v235 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v234, v36, (uint64_t)(v37 - 8), (v37 - 8 - v36) >> 2);
    v86 = **a3;
    v87 = (uint64_t)(*a3)[1] - 8;
    memset(&v226, 0, sizeof(v226));
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v226, v86, v87, (v87 - (uint64_t)v86) >> 2);
    mlx::core::broadcast_shapes(v234, &v226, &v210);
    if ((unint64_t)((_BYTE *)(*a2)[1] - (_BYTE *)**a2) <= 4)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v88 = *((_DWORD *)(*a2)[1] - 2);
    end = v210.__end_;
    if (v210.__end_ >= v210.__end_cap_.__value_)
    {
      begin = v210.__begin_;
      v92 = v210.__end_ - v210.__begin_;
      v93 = v92 + 1;
      if ((unint64_t)(v92 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v94 = (char *)v210.__end_cap_.__value_ - (char *)v210.__begin_;
      if (((char *)v210.__end_cap_.__value_ - (char *)v210.__begin_) >> 1 > v93)
        v93 = v94 >> 1;
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
        v95 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v95 = v93;
      if (v95)
      {
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v210.__end_cap_, v95);
        begin = v210.__begin_;
        end = v210.__end_;
      }
      else
      {
        v96 = 0;
      }
      v97 = (int *)&v96[4 * v92];
      v98 = (int *)&v96[4 * v95];
      *v97 = v88;
      v90 = v97 + 1;
      while (end != begin)
      {
        v99 = *--end;
        *--v97 = v99;
      }
      v210.__begin_ = v97;
      v210.__end_ = v90;
      v210.__end_cap_.__value_ = v98;
      if (begin)
        operator delete(begin);
    }
    else
    {
      *v210.__end_ = v88;
      v90 = end + 1;
    }
    v210.__end_ = v90;
    v100 = (*a2)[1];
    if (v100 == **a2)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v101 = v34;
    v34 = v12;
    v102 = *(v100 - 1);
    if (v90 >= v210.__end_cap_.__value_)
    {
      v104 = v210.__begin_;
      v105 = v90 - v210.__begin_;
      v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v107 = (char *)v210.__end_cap_.__value_ - (char *)v210.__begin_;
      if (((char *)v210.__end_cap_.__value_ - (char *)v210.__begin_) >> 1 > v106)
        v106 = v107 >> 1;
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
        v108 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v108 = v106;
      if (v108)
      {
        v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v210.__end_cap_, v108);
        v104 = v210.__begin_;
        v90 = v210.__end_;
      }
      else
      {
        v109 = 0;
      }
      v110 = (int *)&v109[4 * v105];
      v111 = (int *)&v109[4 * v108];
      *v110 = v102;
      v103 = v110 + 1;
      while (v90 != v104)
      {
        v112 = *--v90;
        *--v110 = v112;
      }
      v210.__begin_ = v110;
      v210.__end_ = v103;
      v210.__end_cap_.__value_ = v111;
      if (v104)
        operator delete(v104);
    }
    else
    {
      *v90 = v102;
      v103 = v90 + 1;
    }
    v210.__end_ = v103;
    mlx::core::broadcast_to(a2, (const void **)&v210.__begin_, a6, a7, (const void ***)&v209);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v209);
    mlx::core::array::~array((mlx::core::array *)&v209);
    if ((unint64_t)((_BYTE *)(*a3)[1] - (_BYTE *)**a3) <= 4)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v12 = v34;
    v113 = (*a3)[1];
    v114 = v210.__end_;
    *(v210.__end_ - 2) = *(v113 - 2);
    *(v114 - 1) = *(v113 - 1);
    mlx::core::broadcast_to(a3, (const void **)&v210.__begin_, a6, a7, (const void ***)&v209);
    LODWORD(v34) = v101;
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v209);
    mlx::core::array::~array((mlx::core::array *)&v209);
    if (v210.__begin_)
    {
      v210.__end_ = v210.__begin_;
      operator delete(v210.__begin_);
    }
    if (v226.__r_.__value_.__r.__words[0])
    {
      v226.__r_.__value_.__l.__size_ = v226.__r_.__value_.__r.__words[0];
      operator delete(v226.__r_.__value_.__l.__data_);
    }
    if (v234[0])
    {
      v234[1] = v234[0];
      operator delete(v234[0]);
    }
    v35 = *a2;
  }
  memset(&v226, 0, sizeof(v226));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v35, (uint64_t)v35[1], ((_BYTE *)v35[1] - (_BYTE *)*v35) >> 2);
  v115 = (*a3)[1];
  if (v115 == **a3)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v116 = v226.__r_.__value_.__l.__size_;
  *(_DWORD *)(v226.__r_.__value_.__l.__size_ - 4) = *(v115 - 1);
  memset(&v210, 0, sizeof(v210));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v210, v226.__r_.__value_.__l.__data_, v116, (uint64_t)(v116 - v226.__r_.__value_.__r.__words[0]) >> 2);
  v117 = v12 & 0x3FFFFFFFCLL;
  v118 = (v12 & 0x3FFFFFFFCLL) == 4 || (_DWORD)v34 == 1;
  v119 = v118;
  if (v118)
  {
    v120 = -2;
    if (v117 != 4)
      v120 = -1;
    v121 = &v210.__end_[v120];
    if ((_DWORD)v34 == 1)
      v122 = 0;
    else
      v122 = -1;
    v123 = &v121[v122 - v120];
    v124 = (char *)((char *)v210.__end_ - (char *)v123);
    if (v210.__end_ != v123)
      memmove(&v210.__end_[v120], v123, (char *)v210.__end_ - (char *)v123);
    v210.__end_ = (std::vector<int>::pointer)&v124[(_QWORD)v121];
  }
  mlx::core::broadcast_shapes(*a1, &v210, &v209);
  mlx::core::broadcast_to(a1, (const void **)&v209.__begin_, a6, a7, (const void ***)v234);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v234);
  mlx::core::array::~array((mlx::core::array *)v234);
  if (v119)
  {
    v125 = *a1;
    v234[1] = 0;
    v235 = 0;
    v234[0] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v234, *v125, (uint64_t)v125[1], ((_BYTE *)v125[1] - (_BYTE *)*v125) >> 2);
    if ((_DWORD)v34 == 1)
    {
      v126 = (char *)v234[1];
      if (v234[1] >= v235)
      {
        v128 = (char *)v234[0];
        v129 = ((char *)v234[1] - (char *)v234[0]) >> 2;
        v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v131 = (char *)v235 - (char *)v234[0];
        if (((char *)v235 - (char *)v234[0]) >> 1 > v130)
          v130 = v131 >> 1;
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
          v132 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v132 = v130;
        if (v132)
        {
          v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v235, v132);
          v128 = (char *)v234[0];
          v126 = (char *)v234[1];
        }
        else
        {
          v133 = 0;
        }
        v134 = &v133[4 * v129];
        v135 = (const void **)&v133[4 * v132];
        *(_DWORD *)v134 = 1;
        v127 = v134 + 4;
        while (v126 != v128)
        {
          v136 = *((_DWORD *)v126 - 1);
          v126 -= 4;
          *((_DWORD *)v134 - 1) = v136;
          v134 -= 4;
        }
        v234[0] = v134;
        v234[1] = v127;
        v235 = v135;
        if (v128)
          operator delete(v128);
      }
      else
      {
        *(_DWORD *)v234[1] = 1;
        v127 = v126 + 4;
      }
      v234[1] = v127;
    }
    v137 = v234[1];
    if (v117 == 4)
    {
      if (v234[1] >= v235)
      {
        v138 = (char *)v234[0];
        v139 = ((char *)v234[1] - (char *)v234[0]) >> 2;
        v140 = v139 + 1;
        if ((unint64_t)(v139 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v141 = (char *)v235 - (char *)v234[0];
        if (((char *)v235 - (char *)v234[0]) >> 1 > v140)
          v140 = v141 >> 1;
        if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
          v142 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v142 = v140;
        if (v142)
        {
          v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v235, v142);
          v138 = (char *)v234[0];
          v144 = (char *)v234[1];
        }
        else
        {
          v143 = 0;
          v144 = (char *)v234[1];
        }
        v145 = &v143[4 * v139];
        v146 = (const void **)&v143[4 * v142];
        *(_DWORD *)v145 = *(v137 - 1);
        v137 = v145 + 4;
        while (v144 != v138)
        {
          v147 = *((_DWORD *)v144 - 1);
          v144 -= 4;
          *((_DWORD *)v145 - 1) = v147;
          v145 -= 4;
        }
        v234[0] = v145;
        v234[1] = v137;
        v235 = v146;
        if (v138)
          operator delete(v138);
      }
      else
      {
        *(_DWORD *)v234[1] = *((_DWORD *)v234[1] - 1);
        ++v137;
      }
      v234[1] = v137;
      *(v137 - 2) = 1;
    }
    v207 = 0;
    v208 = 0;
    v206 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v206, v234[0], (uint64_t)v137, ((char *)v137 - (char *)v234[0]) >> 2);
    mlx::core::reshape(a1, (uint64_t)&v206, a6, a7, (const void ***)&v233);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, &v233);
    mlx::core::array::~array((mlx::core::array *)&v233);
    if (v206)
    {
      v207 = v206;
      operator delete(v206);
    }
    if (v234[0])
    {
      v234[1] = v234[0];
      operator delete(v234[0]);
    }
  }
  memset(v205, 0, sizeof(v205));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v205, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_, (uint64_t)(v226.__r_.__value_.__l.__size_ - v226.__r_.__value_.__r.__words[0]) >> 2);
  v148 = v225;
  v149 = mlx::core::to_stream(a6, a7);
  v151 = v150;
  v152 = operator new(0x38uLL);
  v152[1] = 0;
  v152[2] = 0;
  *v152 = &unk_25134FE78;
  v153 = *a4;
  v154 = *a5;
  v152[4] = v149;
  *((_DWORD *)v152 + 10) = v151;
  v152[3] = &unk_25134D6F8;
  *((_DWORD *)v152 + 11) = v153;
  *((_DWORD *)v152 + 12) = v154;
  *(_QWORD *)&v204 = v152 + 3;
  *((_QWORD *)&v204 + 1) = v152;
  v202 = 0;
  v203 = 0;
  v155 = (unint64_t *)a2[1];
  v234[0] = *a2;
  v234[1] = v155;
  if (v155)
  {
    v156 = v155 + 1;
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 1, v156));
  }
  v158 = a3[1];
  v235 = *a3;
  v236 = v158;
  if (v158)
  {
    v159 = (unint64_t *)(v158 + 1);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 1, v159));
  }
  v161 = a1[1];
  v237 = *a1;
  v238 = v161;
  if (v161)
  {
    v162 = (unint64_t *)(v161 + 1);
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 1, v162));
  }
  v200 = 0uLL;
  v201 = 0;
  *(_QWORD *)&v233 = &v200;
  BYTE8(v233) = 0;
  v164 = operator new(0x30uLL);
  v165 = 0;
  *(_QWORD *)&v200 = v164;
  *((_QWORD *)&v200 + 1) = v164;
  v201 = v164 + 6;
  do
  {
    v166 = &v234[2 * v165];
    v168 = *v166;
    v167 = (char *)v166[1];
    *v164 = v168;
    v164[1] = v167;
    if (v167)
    {
      v169 = (unint64_t *)(v167 + 8);
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
    }
    ++v165;
    v164 += 2;
  }
  while (v165 != 3);
  *((_QWORD *)&v200 + 1) = v164;
  mlx::core::array::array(a8, (__int128 *)v205, v148, &v204, &v200);
  *(_QWORD *)&v233 = &v200;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v233);
  for (j = 4; j != -2; j -= 2)
    mlx::core::array::~array((mlx::core::array *)&v234[j]);
  v172 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v173 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v203;
  if (v203)
  {
    p_shared_owners = (unint64_t *)&v203->__shared_owners_;
    do
      v177 = __ldaxr(p_shared_owners);
    while (__stlxr(v177 - 1, p_shared_owners));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (v205[0])
  {
    v205[1] = v205[0];
    operator delete(v205[0]);
  }
  if (v119)
  {
    v198 = 0;
    v199 = 0;
    v197 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v197, v210.__begin_, (uint64_t)v210.__end_, v210.__end_ - v210.__begin_);
    mlx::core::reshape(a8, (uint64_t)&v197, a6, a7, (const void ***)v234);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a8, (__int128 *)v234);
    mlx::core::array::~array((mlx::core::array *)v234);
    if (v197)
    {
      v198 = v197;
      operator delete(v197);
    }
  }
  if (v209.__begin_)
  {
    v209.__end_ = v209.__begin_;
    operator delete(v209.__begin_);
  }
  if (v210.__begin_)
  {
    v210.__end_ = v210.__begin_;
    operator delete(v210.__begin_);
  }
LABEL_207:
  if (v226.__r_.__value_.__r.__words[0])
  {
    v226.__r_.__value_.__l.__size_ = v226.__r_.__value_.__r.__words[0];
    operator delete(v226.__r_.__value_.__l.__data_);
  }
}

void sub_24248DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, mlx::core::array *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  void *v69;
  int v70;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v70 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a69);
      _Unwind_Resume(a1);
    }
  }
  else if (!v70)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v69);
  goto LABEL_6;
}

void mlx::core::block_masked_mm(const void ***a1@<X0>, const void ***a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, mlx::core *a7@<X6>, uint64_t a8@<X7>, const void ***a9@<X8>)
{
  _BOOL4 v17;
  _BYTE *v18;
  int64_t v19;
  BOOL v20;
  _QWORD *v21;
  _BYTE *v22;
  _BYTE *v23;
  _QWORD *v24;
  _DWORD *v25;
  const void **v26;
  const void **v27;
  unint64_t *v28;
  unint64_t v29;
  const void **v30;
  unint64_t *v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  int *value;
  std::vector<int>::pointer end;
  int *v39;
  std::vector<int>::pointer begin;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  int *v46;
  int v47;
  int *v48;
  std::vector<int>::pointer v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  int *v55;
  int *v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  _DWORD *v60;
  std::vector<int>::pointer v61;
  int64_t v62;
  _BYTE *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  std::vector<int>::pointer v69;
  _DWORD *v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  const void **v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  void **v83;
  char *v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t i;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _DWORD *v98;
  int v99;
  void *v100;
  _DWORD *v101;
  uint64_t v102;
  unint64_t v103;
  int64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  int v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::vector<int>::pointer v119;
  int64_t v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  std::vector<int>::pointer v149;
  int64_t v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  __int128 v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::vector<int>::pointer v170;
  int64_t v171;
  unint64_t *v172;
  unint64_t v173;
  __int128 v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  mlx::core *v183;
  int v184;
  int v185;
  _QWORD *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  int64_t v197;
  std::logic_error *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  std::logic_error *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  std::logic_error *v211;
  _QWORD *v212;
  _QWORD *v213;
  std::logic_error *exception;
  uint64_t v215;
  const void ***v217;
  _BOOL4 v218;
  _BYTE *v219;
  unint64_t v220;
  _BYTE *v221;
  int v222;
  int v223;
  void *v224;
  void *v225;
  uint64_t v226;
  __int128 v227;
  _QWORD *v228;
  __int128 v229;
  void *v230[3];
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _QWORD *v238;
  void *v239;
  char *v240;
  uint64_t v241;
  std::vector<int> v242;
  void *v243;
  void *v244;
  uint64_t v245;
  _QWORD v246[2];
  _QWORD v247[2];
  uint64_t v248;
  void *v249;
  void *v250;
  _QWORD *v251;
  void *__p;
  void *v253;
  _QWORD *v254;
  std::string v255;
  __int128 v256;
  void *v257[2];
  _QWORD v258[34];

  v258[31] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a4 + 16))
  {
    if (!*(_BYTE *)(a5 + 16))
    {
      if (!*(_BYTE *)(a6 + 16))
      {
        mlx::core::matmul(a1, a2, a7, a8, a9);
        return;
      }
      goto LABEL_7;
    }
LABEL_5:
    v17 = 1;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a5 + 16))
    goto LABEL_5;
LABEL_7:
  v17 = *(_BYTE *)(a6 + 16) != 0;
LABEL_8:
  if (a3 != 32 && a3 != 64)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v257);
    v212 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)"[block_masked_mm] Only block_sizes 32, 64 are supported.", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)"Got block size ", 15);
    v213 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v257[1], &v255);
    std::logic_error::logic_error(exception, &v255);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v18 = (*a2)[1];
  v19 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  v221 = **a2;
  if (v19)
    v20 = v18 == **a2;
  else
    v20 = 1;
  if (v20)
  {
    v198 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v198, "[block_masked_mm] Got 0 dimension input. Inputs must have at least one dimension.");
    __cxa_throw(v198, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v220 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  if (v19 == 4)
  {
    v21 = operator new(8uLL);
    __p = v21;
    *v21 = 0xFFFFFFFF00000001;
    v253 = v21 + 1;
    v254 = v21 + 1;
    mlx::core::reshape(a1, (uint64_t)&__p, a7, a8, (const void ***)v257);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v257);
    mlx::core::array::~array((mlx::core::array *)v257);
    if (__p)
    {
      v253 = __p;
      operator delete(__p);
    }
    v22 = **a2;
    v23 = (*a2)[1];
  }
  else
  {
    v22 = **a2;
    v23 = (*a2)[1];
  }
  if (v23 - v22 == 4)
  {
    v24 = operator new(8uLL);
    v249 = v24;
    *v24 = 0x1FFFFFFFFLL;
    v251 = v24 + 1;
    v250 = v24 + 1;
    mlx::core::reshape(a2, (uint64_t)&v249, a7, a8, (const void ***)v257);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)v257);
    mlx::core::array::~array((mlx::core::array *)v257);
    if (v249)
    {
      v250 = v249;
      operator delete(v249);
    }
  }
  v25 = (*a1)[1];
  if (v25 == **a1)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v26 = *a2;
  if ((unint64_t)((_BYTE *)(*a2)[1] - (_BYTE *)**a2) <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  if (*(v25 - 1) != *((_DWORD *)(*a2)[1] - 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v257);
    v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)"[block_masked_mm] Last dimension of first input with shape ", 59);
    v200 = mlx::core::operator<<(v199, *a1);
    v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)" must match second to last dimension of", 39);
    v202 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)" second input with shape ", 25);
    v203 = mlx::core::operator<<(v202, *a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)".", 1);
    v204 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v257[1], &v255);
    std::logic_error::logic_error(v204, &v255);
    v204->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v204, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v257[0] = (void *)(*a1)[7];
  v255.__r_.__value_.__r.__words[0] = (std::string::size_type)v26[7];
  v248 = mlx::core::promote_types((int *)v257, (int *)&v255);
  if ((mlx::core::issubdtype((unsigned int *)&v248, (unsigned int *)&mlx::core::floating) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v257);
    v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)"[block_masked_mm] Only real floating point types are supported but ", 67);
    v255.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    v206 = mlx::core::operator<<(v205, &v255);
    v207 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)" and ", 5);
    v243 = (void *)(*a2)[7];
    v208 = mlx::core::operator<<(v207, &v243);
    v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)" were provided which results in ", 32);
    v210 = mlx::core::operator<<(v209, &v248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)", which is not a real floating point type.", 42);
    v211 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v257[1], &v255);
    std::logic_error::logic_error(v211, &v255);
    v211->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v211, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v27 = a1[1];
  v247[0] = *a1;
  v247[1] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  mlx::core::astype(v247, v248, a7, a8, v257);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v257);
  mlx::core::array::~array((mlx::core::array *)v257);
  mlx::core::array::~array((mlx::core::array *)v247);
  v30 = a2[1];
  v246[0] = *a2;
  v246[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 1);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  mlx::core::astype(v246, v248, a7, a8, v257);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)v257);
  mlx::core::array::~array((mlx::core::array *)v257);
  mlx::core::array::~array((mlx::core::array *)v246);
  v33 = **a1;
  v34 = (uint64_t)(*a1)[1] - 8;
  memset(&v255, 0, sizeof(v255));
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v255, v33, v34, (v34 - (uint64_t)v33) >> 2);
  v35 = **a2;
  v36 = (uint64_t)(*a2)[1] - 8;
  v244 = 0;
  v245 = 0;
  v243 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v243, v35, v36, (v36 - (uint64_t)v35) >> 2);
  v219 = v18;
  v218 = v17;
  v215 = a6;
  v223 = a3;
  mlx::core::broadcast_shapes(&v255, &v243, &v242);
  end = v242.__end_;
  value = v242.__end_cap_.__value_;
  if (v242.__end_ >= v242.__end_cap_.__value_)
  {
    begin = v242.__begin_;
    v41 = v242.__end_ - v242.__begin_;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v43 = (char *)v242.__end_cap_.__value_ - (char *)v242.__begin_;
    if (((char *)v242.__end_cap_.__value_ - (char *)v242.__begin_) >> 1 > v42)
      v42 = v43 >> 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v242.__end_cap_, v44);
      begin = v242.__begin_;
      end = v242.__end_;
    }
    else
    {
      v45 = 0;
    }
    v46 = (int *)&v45[4 * v41];
    value = (int *)&v45[4 * v44];
    *v46 = 1;
    v39 = v46 + 1;
    while (end != begin)
    {
      v47 = *--end;
      *--v46 = v47;
    }
    v242.__begin_ = v46;
    v242.__end_ = v39;
    v242.__end_cap_.__value_ = value;
    if (begin)
    {
      operator delete(begin);
      value = v242.__end_cap_.__value_;
    }
  }
  else
  {
    *v242.__end_ = 1;
    v39 = end + 1;
  }
  v242.__end_ = v39;
  if (v39 >= value)
  {
    v49 = v242.__begin_;
    v50 = v39 - v242.__begin_;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v52 = (char *)value - (char *)v242.__begin_;
    if (v52 >> 1 > v51)
      v51 = v52 >> 1;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
      v53 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v242.__end_cap_, v53);
      v49 = v242.__begin_;
      v39 = v242.__end_;
    }
    else
    {
      v54 = 0;
    }
    v55 = (int *)&v54[4 * v50];
    v56 = (int *)&v54[4 * v53];
    *v55 = 1;
    v48 = v55 + 1;
    while (v39 != v49)
    {
      v57 = *--v39;
      *--v55 = v57;
    }
    v242.__begin_ = v55;
    v242.__end_ = v48;
    v242.__end_cap_.__value_ = v56;
    if (v49)
      operator delete(v49);
  }
  else
  {
    *v39 = 1;
    v48 = v39 + 1;
  }
  v242.__end_ = v48;
  v58 = **a1;
  v59 = (_BYTE *)(*a1)[1] - v58;
  if ((unint64_t)v59 <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v217 = a9;
  v60 = (*a2)[1];
  if (v60 == **a2)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v61 = v242.__begin_;
  v62 = (char *)v48 - (char *)v242.__begin_;
  v63 = &v58[4 * (v59 >> 2)];
  v64 = *(v60 - 1);
  v66 = *((_DWORD *)v63 - 2);
  v65 = *((_DWORD *)v63 - 1);
  v67 = (v62 << 30) - 0x200000000;
  *(std::vector<int>::pointer)((char *)v242.__begin_ + (v67 >> 30)) = v66;
  v68 = (v62 << 30) - 0x100000000;
  *(std::vector<int>::pointer)((char *)v61 + (v68 >> 30)) = v65;
  mlx::core::broadcast_to(a1, (const void **)&v242.__begin_, a7, a8, (const void ***)v257);
  v67 >>= 32;
  v68 >>= 32;
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v257);
  mlx::core::array::~array((mlx::core::array *)v257);
  v69 = v242.__begin_;
  v242.__begin_[v67] = v65;
  v69[v68] = v64;
  mlx::core::broadcast_to(a2, (const void **)&v242.__begin_, a7, a8, (const void ***)v257);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)v257);
  mlx::core::array::~array((mlx::core::array *)v257);
  v239 = 0;
  v240 = 0;
  v241 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v239, v242.__begin_, (uint64_t)v242.__end_, v242.__end_ - v242.__begin_);
  v70 = v239;
  *((_DWORD *)v239 + v67) = v66;
  v70[v68] = v64;
  v71 = (unint64_t *)a1[1];
  v257[0] = *a1;
  v257[1] = v71;
  if (v71)
  {
    v72 = v71 + 1;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = a2[1];
  v258[0] = *a2;
  v258[1] = v74;
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 1);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v237 = 0uLL;
  v238 = 0;
  *(_QWORD *)&v256 = &v237;
  BYTE8(v256) = 0;
  v77 = operator new(0x20uLL);
  v78 = 0;
  v79 = v220 >> 2;
  v80 = (unint64_t)(v219 - v221) >> 2;
  v81 = (v223 - 1 + v66) / v223;
  v82 = (v223 - 1 + v64) / v223;
  *(_QWORD *)&v237 = v77;
  *((_QWORD *)&v237 + 1) = v77;
  v238 = v77 + 4;
  v222 = (v223 - 1 + v65) / v223;
  do
  {
    v83 = &v257[2 * v78];
    v85 = *v83;
    v84 = (char *)v83[1];
    *v77 = v85;
    v77[1] = v84;
    if (v84)
    {
      v86 = (unint64_t *)(v84 + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    ++v78;
    v77 += 2;
  }
  while (v78 != 2);
  *((_QWORD *)&v237 + 1) = v77;
  for (i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v257[i]);
  if (*(_BYTE *)(a4 + 16))
  {
    LOBYTE(v256) = 1;
    v89 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
    mlx::core::array::array<BOOL>((int ***)v257, (unsigned __int8 *)&v256, 1, v89);
    if (*(_BYTE *)(a4 + 16))
    {
      v90 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)&v236 = *(_QWORD *)a4;
      *((_QWORD *)&v236 + 1) = v90;
      if (v90)
      {
        v91 = (unint64_t *)(v90 + 8);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
    }
    else
    {
      v236 = *(_OWORD *)v257;
      v257[0] = 0;
      v257[1] = 0;
    }
    mlx::core::array::~array((mlx::core::array *)v257);
    if ((_DWORD)v79 == 1 || (_DWORD)v80 == 1)
    {
      v93 = 0;
      v257[0] = 0;
      v257[1] = 0;
      v258[0] = 0;
      if ((_DWORD)v79 == 1)
      {
        v94 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v258, 1uLL);
        v95 = (char *)v257[0];
        v96 = (char *)v257[1];
        v98 = &v94[v97];
        *v94 = -2;
        v93 = v94 + 1;
        while (v96 != v95)
        {
          v99 = *((_DWORD *)v96 - 1);
          v96 -= 4;
          *--v94 = v99;
        }
        v257[0] = v94;
        v257[1] = v93;
        v258[0] = v98;
        if (v95)
          operator delete(v95);
        v257[1] = v93;
      }
      if ((_DWORD)v80 == 1)
      {
        if ((unint64_t)v93 >= v258[0])
        {
          v101 = v257[0];
          v102 = ((char *)v93 - (char *)v257[0]) >> 2;
          v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v104 = v258[0] - (unint64_t)v257[0];
          if ((uint64_t)(v258[0] - (unint64_t)v257[0]) >> 1 > v103)
            v103 = v104 >> 1;
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
            v105 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v105 = v103;
          if (v105)
          {
            v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v258, v105);
            v101 = v257[0];
            v93 = v257[1];
          }
          else
          {
            v106 = 0;
          }
          v107 = &v106[4 * v102];
          v108 = &v106[4 * v105];
          *(_DWORD *)v107 = -1;
          v100 = v107 + 4;
          while (v93 != v101)
          {
            v109 = *--v93;
            *((_DWORD *)v107 - 1) = v109;
            v107 -= 4;
          }
          v257[0] = v107;
          v257[1] = v100;
          v258[0] = v108;
          if (v101)
            operator delete(v101);
        }
        else
        {
          *v93 = -1;
          v100 = v93 + 1;
        }
        v257[1] = v100;
      }
      mlx::core::expand_dims((const void ***)&v236, (int **)v257, a7, a8, (const void ***)&v256);
      v110 = v256;
      v256 = 0uLL;
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
      v236 = v110;
      if (v111)
      {
        p_shared_owners = (unint64_t *)&v111->__shared_owners_;
        do
          v113 = __ldaxr(p_shared_owners);
        while (__stlxr(v113 - 1, p_shared_owners));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&v256);
      if (v257[0])
      {
        v257[1] = v257[0];
        operator delete(v257[0]);
      }
    }
    v115 = *((_QWORD *)&v236 + 1);
    v114 = v236;
    if (*(_DWORD *)(v236 + 56))
      v116 = v248;
    else
      v116 = 0x100000000;
    v234 = v236;
    if (*((_QWORD *)&v236 + 1))
    {
      v117 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
      v115 = *((_QWORD *)&v234 + 1);
    }
    v119 = v242.__begin_;
    v120 = (char *)v242.__end_ - (char *)v242.__begin_;
    *(std::vector<int>::pointer)((char *)v242.__begin_
                               + (((((char *)v242.__end_ - (char *)v242.__begin_) << 30) - 0x200000000) >> 30)) = v81;
    *(std::vector<int>::pointer)((char *)v119 + (((v120 << 30) - 0x100000000) >> 30)) = v82;
    *(_QWORD *)&v256 = v114;
    *((_QWORD *)&v256 + 1) = v115;
    if (v115)
    {
      v121 = (unint64_t *)(v115 + 8);
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
    }
    mlx::core::astype(&v256, v116, a7, a8, v257);
    v123 = *(_OWORD *)v257;
    v257[0] = 0;
    v257[1] = 0;
    v124 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
    v234 = v123;
    if (v124)
    {
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v257);
    mlx::core::array::~array((mlx::core::array *)&v256);
    mlx::core::broadcast_to((const void ***)&v234, (const void **)&v242.__begin_, a7, a8, (const void ***)&v235);
    v127 = v235;
    v235 = 0uLL;
    v128 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
    v236 = v127;
    if (v128)
    {
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v235);
    mlx::core::array::~array((mlx::core::array *)&v234);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v237, &v236);
    mlx::core::array::~array((mlx::core::array *)&v236);
  }
  if (v218)
  {
    LOBYTE(v256) = 1;
    v131 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
    mlx::core::array::array<BOOL>((int ***)v257, (unsigned __int8 *)&v256, 1, v131);
    if (*(_BYTE *)(a5 + 16))
    {
      v132 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)&v236 = *(_QWORD *)a5;
      *((_QWORD *)&v236 + 1) = v132;
      if (v132)
      {
        v133 = (unint64_t *)(v132 + 8);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
    }
    else
    {
      v236 = *(_OWORD *)v257;
      v257[0] = 0;
      v257[1] = 0;
    }
    mlx::core::array::~array((mlx::core::array *)v257);
    LOBYTE(v256) = 1;
    v135 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
    mlx::core::array::array<BOOL>((int ***)v257, (unsigned __int8 *)&v256, 1, v135);
    if (*(_BYTE *)(v215 + 16))
    {
      v136 = *(_QWORD *)(v215 + 8);
      *(_QWORD *)&v235 = *(_QWORD *)v215;
      *((_QWORD *)&v235 + 1) = v136;
      if (v136)
      {
        v137 = (unint64_t *)(v136 + 8);
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
    }
    else
    {
      v235 = *(_OWORD *)v257;
      v257[0] = 0;
      v257[1] = 0;
    }
    mlx::core::array::~array((mlx::core::array *)v257);
    v139 = v236;
    if (*(_DWORD *)(v236 + 56) || *(_DWORD *)(v235 + 56))
      v140 = &v248;
    else
      v140 = &mlx::core::BOOL_;
    v141 = *v140;
    if ((_DWORD)v79 == 1)
    {
      mlx::core::expand_dims((const void ***)&v236, -2, a7, a8, (const void ***)v257);
      v142 = *(_OWORD *)v257;
      v257[0] = 0;
      v257[1] = 0;
      v143 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
      v236 = v142;
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      mlx::core::array::~array((mlx::core::array *)v257);
      v139 = v236;
      v82 = (v223 - 1 + v64) / v223;
    }
    v146 = *((_QWORD *)&v236 + 1);
    *(_QWORD *)&v232 = v139;
    *((_QWORD *)&v232 + 1) = *((_QWORD *)&v236 + 1);
    if (*((_QWORD *)&v236 + 1))
    {
      v147 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
      v146 = *((_QWORD *)&v232 + 1);
    }
    v149 = v242.__begin_;
    v150 = (char *)v242.__end_ - (char *)v242.__begin_;
    *(std::vector<int>::pointer)((char *)v242.__begin_
                               + (((((char *)v242.__end_ - (char *)v242.__begin_) << 30) - 0x200000000) >> 30)) = v81;
    *(std::vector<int>::pointer)((char *)v149 + (((v150 << 30) - 0x100000000) >> 30)) = v222;
    *(_QWORD *)&v256 = v139;
    *((_QWORD *)&v256 + 1) = v146;
    if (v146)
    {
      v151 = (unint64_t *)(v146 + 8);
      do
        v152 = __ldxr(v151);
      while (__stxr(v152 + 1, v151));
    }
    v153 = v82;
    mlx::core::astype(&v256, v141, a7, a8, v257);
    v154 = *(_OWORD *)v257;
    v257[0] = 0;
    v257[1] = 0;
    v155 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
    v232 = v154;
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v257);
    mlx::core::array::~array((mlx::core::array *)&v256);
    mlx::core::broadcast_to((const void ***)&v232, (const void **)&v242.__begin_, a7, a8, (const void ***)&v233);
    v158 = v233;
    v233 = 0uLL;
    v159 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
    v236 = v158;
    if (v159)
    {
      v160 = (unint64_t *)&v159->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v233);
    mlx::core::array::~array((mlx::core::array *)&v232);
    if ((_DWORD)v80 == 1)
    {
      mlx::core::expand_dims((const void ***)&v235, -1, a7, a8, (const void ***)v257);
      v162 = *(_OWORD *)v257;
      v257[0] = 0;
      v257[1] = 0;
      v163 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
      v235 = v162;
      if (v163)
      {
        v164 = (unint64_t *)&v163->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      mlx::core::array::~array((mlx::core::array *)v257);
    }
    v167 = *((_QWORD *)&v235 + 1);
    v166 = v235;
    v231 = v235;
    if (*((_QWORD *)&v235 + 1))
    {
      v168 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 1, v168));
      v167 = *((_QWORD *)&v231 + 1);
    }
    v170 = v242.__begin_;
    v171 = (char *)v242.__end_ - (char *)v242.__begin_;
    *(std::vector<int>::pointer)((char *)v242.__begin_
                               + (((((char *)v242.__end_ - (char *)v242.__begin_) << 30) - 0x200000000) >> 30)) = v222;
    *(std::vector<int>::pointer)((char *)v170 + (((v171 << 30) - 0x100000000) >> 30)) = v153;
    *(_QWORD *)&v256 = v166;
    *((_QWORD *)&v256 + 1) = v167;
    if (v167)
    {
      v172 = (unint64_t *)(v167 + 8);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
    mlx::core::astype(&v256, v141, a7, a8, v257);
    v174 = *(_OWORD *)v257;
    v257[0] = 0;
    v257[1] = 0;
    v175 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
    v231 = v174;
    if (v175)
    {
      v176 = (unint64_t *)&v175->__shared_owners_;
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v257);
    mlx::core::array::~array((mlx::core::array *)&v256);
    mlx::core::broadcast_to((const void ***)&v231, (const void **)&v242.__begin_, a7, a8, (const void ***)&v233);
    v178 = v233;
    v233 = 0uLL;
    v179 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
    v235 = v178;
    if (v179)
    {
      v180 = (unint64_t *)&v179->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v233);
    mlx::core::array::~array((mlx::core::array *)&v231);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v237, &v236);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v237, &v235);
    mlx::core::array::~array((mlx::core::array *)&v235);
    mlx::core::array::~array((mlx::core::array *)&v236);
  }
  memset(v230, 0, sizeof(v230));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v230, v239, (uint64_t)v240, (v240 - (_BYTE *)v239) >> 2);
  v182 = v248;
  v183 = mlx::core::to_stream(a7, a8);
  v185 = v184;
  v186 = operator new(0x30uLL);
  v186[1] = 0;
  v186[2] = 0;
  *v186 = &unk_25134FEC8;
  v186[4] = v183;
  v186[3] = &unk_251350BA0;
  *((_DWORD *)v186 + 10) = v185;
  *((_DWORD *)v186 + 11) = v223;
  *(_QWORD *)&v229 = v186 + 3;
  *((_QWORD *)&v229 + 1) = v186;
  v257[0] = 0;
  v257[1] = 0;
  v227 = v237;
  v228 = v238;
  v237 = 0uLL;
  v238 = 0;
  mlx::core::array::array(v217, (__int128 *)v230, v182, &v229, &v227);
  *(_QWORD *)&v256 = &v227;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v256);
  v187 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
  if (*((_QWORD *)&v229 + 1))
  {
    v188 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = (std::__shared_weak_count *)v257[1];
  if (v257[1])
  {
    v191 = (unint64_t *)((char *)v257[1] + 8);
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  if (v230[0])
  {
    v230[1] = v230[0];
    operator delete(v230[0]);
  }
  if ((_DWORD)v79 == 1 || (_DWORD)v80 == 1)
  {
    v193 = -2;
    if ((_DWORD)v79 != 1)
      v193 = -1;
    v194 = &v240[4 * v193];
    if ((_DWORD)v80 == 1)
      v195 = 0;
    else
      v195 = -1;
    v196 = &v194[4 * (v195 - v193)];
    v197 = v240 - v196;
    if (v240 != v196)
      memmove(&v240[4 * v193], v196, v240 - v196);
    v240 = &v194[v197];
    v225 = 0;
    v226 = 0;
    v224 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v224, v239, (uint64_t)&v194[v197], (&v194[v197] - (_BYTE *)v239) >> 2);
    mlx::core::reshape(v217, (uint64_t)&v224, a7, a8, (const void ***)v257);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)v217, (__int128 *)v257);
    mlx::core::array::~array((mlx::core::array *)v257);
    if (v224)
    {
      v225 = v224;
      operator delete(v224);
    }
  }
  v257[0] = &v237;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v257);
  if (v239)
  {
    v240 = (char *)v239;
    operator delete(v239);
  }
  if (v242.__begin_)
  {
    v242.__end_ = v242.__begin_;
    operator delete(v242.__begin_);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v255.__r_.__value_.__r.__words[0])
  {
    v255.__r_.__value_.__l.__size_ = v255.__r_.__value_.__r.__words[0];
    operator delete(v255.__r_.__value_.__l.__data_);
  }
}

void sub_24248F248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  void *a72;
  void *v72;
  int v73;

  if (a69 < 0)
  {
    operator delete(__p);
    if ((v73 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a72);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void mlx::core::gather_mm(const void ***a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  _QWORD *v20;
  _BYTE *v21;
  _BYTE *v22;
  _QWORD *v23;
  _DWORD *v24;
  const void **v25;
  const void **v26;
  unint64_t *v27;
  unint64_t v28;
  const void **v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  mlx::core *v83;
  int v84;
  int v85;
  _QWORD *v86;
  const void **v87;
  unint64_t *v88;
  unint64_t v89;
  const void **v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  int64_t v116;
  std::logic_error *exception;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  std::logic_error *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  std::logic_error *v130;
  std::logic_error *v131;
  _BYTE *v132;
  const void ***v133;
  void *v134;
  void *v135;
  uint64_t v136;
  __int128 v137;
  _QWORD *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  __int128 v141;
  void *v142[3];
  void *v143;
  char *v144;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  _QWORD v148[2];
  char v149;
  __int128 v150;
  _QWORD v151[2];
  char v152;
  __int128 v153;
  _QWORD v154[2];
  _QWORD v155[2];
  uint64_t v156;
  std::string v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  void *__p;
  void *v162;
  _QWORD *v163;
  void **v164;
  char v165;
  __int128 v166;
  const void **v167;
  const void **v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a3 + 16) && !*(_BYTE *)(a4 + 16))
  {
    mlx::core::matmul(a1, a2, a5, a6, a7);
    return;
  }
  v14 = **a1;
  v15 = (*a1)[1];
  v16 = **a2;
  v17 = (*a2)[1];
  v18 = v15 - v14;
  if (v15 == v14 || v17 == v16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[gather_mm] Got 0 dimension input. Inputs must have at least one dimension.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v18 == 4)
  {
    v20 = operator new(8uLL);
    __p = v20;
    *v20 = 0xFFFFFFFF00000001;
    v162 = v20 + 1;
    v163 = v20 + 1;
    mlx::core::reshape(a1, (uint64_t)&__p, a5, a6, (const void ***)&v166);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, &v166);
    mlx::core::array::~array((mlx::core::array *)&v166);
    if (__p)
    {
      v162 = __p;
      operator delete(__p);
    }
    v21 = **a2;
    v22 = (*a2)[1];
  }
  else
  {
    v21 = **a2;
    v22 = (*a2)[1];
  }
  if (v22 - v21 == 4)
  {
    v23 = operator new(8uLL);
    v158 = v23;
    *v23 = 0x1FFFFFFFFLL;
    v160 = v23 + 1;
    v159 = v23 + 1;
    mlx::core::reshape(a2, (uint64_t)&v158, a5, a6, (const void ***)&v166);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, &v166);
    mlx::core::array::~array((mlx::core::array *)&v166);
    if (v158)
    {
      v159 = v158;
      operator delete(v158);
    }
  }
  v24 = (*a1)[1];
  if (v24 == **a1)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v25 = *a2;
  if ((unint64_t)((_BYTE *)(*a2)[1] - (_BYTE *)**a2) <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  if (*(v24 - 1) != *((_DWORD *)(*a2)[1] - 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v166);
    v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"[gather_mm] Last dimension of first input with shape ", 53);
    v119 = mlx::core::operator<<(v118, *a1);
    v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)" must match second to last dimension of", 39);
    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)" second input with shape ", 25);
    v122 = mlx::core::operator<<(v121, *a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)".", 1);
    v123 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v166 + 8, &v157);
    std::logic_error::logic_error(v123, &v157);
    v123->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v123, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  *(_QWORD *)&v166 = (*a1)[7];
  v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v25[7];
  v156 = mlx::core::promote_types((int *)&v166, (int *)&v157);
  if ((mlx::core::issubdtype((unsigned int *)&v156, (unsigned int *)&mlx::core::floating) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v166);
    v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"[gather_mm] Only real floating point types are supported but ", 61);
    v157.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    v125 = mlx::core::operator<<(v124, &v157);
    v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)" and ", 5);
    v143 = (void *)(*a2)[7];
    v127 = mlx::core::operator<<(v126, &v143);
    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" were provided which results in ", 32);
    v129 = mlx::core::operator<<(v128, &v156);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)", which is not a real floating point type.", 42);
    v130 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v166 + 8, &v157);
    std::logic_error::logic_error(v130, &v157);
    v130->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v130, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v26 = a1[1];
  v155[0] = *a1;
  v155[1] = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  mlx::core::astype(v155, v156, a5, a6, &v166);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a1, &v166);
  mlx::core::array::~array((mlx::core::array *)&v166);
  mlx::core::array::~array((mlx::core::array *)v155);
  v29 = a2[1];
  v154[0] = *a2;
  v154[1] = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 1);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  mlx::core::astype(v154, v156, a5, a6, &v166);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)a2, &v166);
  mlx::core::array::~array((mlx::core::array *)&v166);
  mlx::core::array::~array((mlx::core::array *)v154);
  LOBYTE(v151[0]) = 0;
  v152 = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    v32 = *(_QWORD *)(a3 + 8);
    v151[0] = *(_QWORD *)a3;
    v151[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v152 = 1;
  }
  if (v152)
    mlx::core::array::~array((mlx::core::array *)v151);
  LOBYTE(v148[0]) = 0;
  v149 = 0;
  if (*(_BYTE *)(a4 + 16))
  {
    v35 = *(_QWORD *)(a4 + 8);
    v148[0] = *(_QWORD *)a4;
    v148[1] = v35;
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v149 = 1;
  }
  if (v149)
    mlx::core::array::~array((mlx::core::array *)v148);
  *(_QWORD *)&v166 = *(_QWORD *)(v153 + 56);
  if ((mlx::core::issubdtype((unsigned int *)&v166, &mlx::core::integer) & 1) == 0)
  {
    v131 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v131, "[gather_mm] Got lhs_indices with invalid dtype. Indices must be integral.");
    goto LABEL_156;
  }
  *(_QWORD *)&v166 = *(_QWORD *)(v150 + 56);
  if ((mlx::core::issubdtype((unsigned int *)&v166, &mlx::core::integer) & 1) == 0)
  {
    v131 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v131, "[gather_mm] Got rhs_indices with invalid dtype. Indices must be integral.");
LABEL_156:
    v131->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v131, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v147 = v153;
  if (*((_QWORD *)&v153 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v132 = v16;
  v133 = a7;
  mlx::core::astype(&v147, 0x400000002, a5, a6, &v166);
  v40 = v166;
  v166 = 0uLL;
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  v153 = v40;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v166);
  mlx::core::array::~array((mlx::core::array *)&v147);
  v146 = v150;
  if (*((_QWORD *)&v150 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  mlx::core::astype(&v146, 0x400000002, a5, a6, &v166);
  v46 = v166;
  v166 = 0uLL;
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  v150 = v46;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v166);
  mlx::core::array::~array((mlx::core::array *)&v146);
  if ((unint64_t)((_BYTE *)(*a1)[1] - (_BYTE *)**a1) <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v50 = (*a2)[1];
  if (v50 == **a2)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v51 = *((_DWORD *)(*a1)[1] - 2);
  v52 = *(v50 - 1);
  mlx::core::broadcast_shapes((_QWORD *)v153, (_QWORD *)v150, (std::vector<int> *)&v157);
  mlx::core::broadcast_to((const void ***)&v153, (const void **)&v157.__r_.__value_.__l.__data_, a5, a6, (const void ***)&v166);
  v53 = v166;
  v166 = 0uLL;
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  v153 = v53;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v166);
  mlx::core::broadcast_to((const void ***)&v150, (const void **)&v157.__r_.__value_.__l.__data_, a5, a6, (const void ***)&v166);
  v57 = v166;
  v166 = 0uLL;
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  v150 = v57;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v166);
  v143 = 0;
  v144 = 0;
  v145 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v143, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_, (uint64_t)(v157.__r_.__value_.__l.__size_ - v157.__r_.__value_.__r.__words[0]) >> 2);
  v62 = v144;
  v61 = (char *)v145;
  if ((unint64_t)v144 >= v145)
  {
    v64 = (char *)v143;
    v65 = (v144 - (_BYTE *)v143) >> 2;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 62)
      goto LABEL_159;
    v67 = v145 - (_QWORD)v143;
    if ((uint64_t)(v145 - (_QWORD)v143) >> 1 > v66)
      v66 = v67 >> 1;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
      v68 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    if (v68)
    {
      v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v145, v68);
      v64 = (char *)v143;
      v62 = v144;
    }
    else
    {
      v69 = 0;
    }
    v70 = &v69[4 * v65];
    v61 = &v69[4 * v68];
    *(_DWORD *)v70 = v51;
    v63 = v70 + 4;
    while (v62 != v64)
    {
      v71 = *((_DWORD *)v62 - 1);
      v62 -= 4;
      *((_DWORD *)v70 - 1) = v71;
      v70 -= 4;
    }
    v143 = v70;
    v144 = v63;
    v145 = (unint64_t)v61;
    if (v64)
    {
      operator delete(v64);
      v61 = (char *)v145;
    }
  }
  else
  {
    *(_DWORD *)v144 = v51;
    v63 = v62 + 4;
  }
  v144 = v63;
  if (v63 >= v61)
  {
    v73 = (char *)v143;
    v74 = (v63 - (_BYTE *)v143) >> 2;
    v75 = v74 + 1;
    if (!((unint64_t)(v74 + 1) >> 62))
    {
      v76 = v61 - (_BYTE *)v143;
      if (v76 >> 1 > v75)
        v75 = v76 >> 1;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
        v77 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      if (v77)
      {
        v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v145, v77);
        v73 = (char *)v143;
        v63 = v144;
      }
      else
      {
        v78 = 0;
      }
      v79 = &v78[4 * v74];
      v80 = &v78[4 * v77];
      *(_DWORD *)v79 = v52;
      v72 = (uint64_t)(v79 + 4);
      while (v63 != v73)
      {
        v81 = *((_DWORD *)v63 - 1);
        v63 -= 4;
        *((_DWORD *)v79 - 1) = v81;
        v79 -= 4;
      }
      v143 = v79;
      v144 = (char *)v72;
      v145 = (unint64_t)v80;
      if (v73)
        operator delete(v73);
      goto LABEL_101;
    }
LABEL_159:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)v63 = v52;
  v72 = (uint64_t)(v63 + 4);
LABEL_101:
  v144 = (char *)v72;
  memset(v142, 0, sizeof(v142));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v142, v143, v72, (v72 - (uint64_t)v143) >> 2);
  v82 = v156;
  v83 = mlx::core::to_stream(a5, a6);
  v85 = v84;
  v86 = operator new(0x30uLL);
  v86[2] = 0;
  *v86 = &unk_25134FF18;
  v86[1] = 0;
  v86[4] = v83;
  *((_DWORD *)v86 + 10) = v85;
  v86[3] = &unk_251350C28;
  *(_QWORD *)&v141 = v86 + 3;
  *((_QWORD *)&v141 + 1) = v86;
  v139 = 0;
  v140 = 0;
  v87 = a1[1];
  *(_QWORD *)&v166 = *a1;
  *((_QWORD *)&v166 + 1) = v87;
  if (v87)
  {
    v88 = (unint64_t *)(v87 + 1);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  v90 = a2[1];
  v167 = *a2;
  v168 = v90;
  if (v90)
  {
    v91 = (unint64_t *)(v90 + 1);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v169 = v153;
  if (*((_QWORD *)&v153 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v170 = v150;
  if (*((_QWORD *)&v150 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v137 = 0uLL;
  v138 = 0;
  v164 = (void **)&v137;
  v165 = 0;
  v97 = operator new(0x40uLL);
  v98 = 0;
  *(_QWORD *)&v137 = v97;
  *((_QWORD *)&v137 + 1) = v97;
  v138 = v97 + 8;
  do
  {
    v99 = &v166 + v98;
    v101 = *(_QWORD *)v99;
    v100 = *((_QWORD *)v99 + 1);
    *v97 = v101;
    v97[1] = v100;
    if (v100)
    {
      v102 = (unint64_t *)(v100 + 8);
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }
    ++v98;
    v97 += 2;
  }
  while (v98 != 4);
  *((_QWORD *)&v137 + 1) = v97;
  mlx::core::array::array(v133, (__int128 *)v142, v82, &v141, &v137);
  v164 = (void **)&v137;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v164);
  for (i = 48; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)((char *)&v166 + i));
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v140;
  if (v140)
  {
    v109 = (unint64_t *)&v140->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v142[0])
  {
    v142[1] = v142[0];
    operator delete(v142[0]);
  }
  v111 = (v17 - v132) & 0x3FFFFFFFCLL;
  if ((v18 & 0x3FFFFFFFCLL) == 4 || v111 == 4)
  {
    v112 = -2;
    if ((v18 & 0x3FFFFFFFCLL) != 4)
      v112 = -1;
    v113 = &v144[4 * v112];
    if (v111 == 4)
      v114 = 0;
    else
      v114 = -1;
    v115 = &v113[4 * (v114 - v112)];
    v116 = v144 - v115;
    if (v144 != v115)
      memmove(&v144[4 * v112], v115, v144 - v115);
    v144 = &v113[v116];
    v135 = 0;
    v136 = 0;
    v134 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, v143, (uint64_t)&v113[v116], (&v113[v116] - (_BYTE *)v143) >> 2);
    mlx::core::reshape(v133, (uint64_t)&v134, a5, a6, (const void ***)&v166);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)v133, &v166);
    mlx::core::array::~array((mlx::core::array *)&v166);
    if (v134)
    {
      v135 = v134;
      operator delete(v134);
    }
  }
  if (v143)
  {
    v144 = (char *)v143;
    operator delete(v143);
  }
  if (v157.__r_.__value_.__r.__words[0])
  {
    v157.__r_.__value_.__l.__size_ = v157.__r_.__value_.__r.__words[0];
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  mlx::core::array::~array((mlx::core::array *)&v150);
  mlx::core::array::~array((mlx::core::array *)&v153);
}

void sub_2424901B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, mlx::core::array *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  int v63;

  if (a53 < 0)
  {
    operator delete(__p);
    if ((v63 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a62);
      _Unwind_Resume(a1);
    }
  }
  else if (!v63)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v62);
  goto LABEL_6;
}

void sub_2424903AC()
{
  JUMPOUT(0x2424903A4);
}

void mlx::core::`anonymous namespace'::indices_or_default(uint64_t a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const void **v11;
  const void *v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  double v17;
  mlx::core *v18;
  unsigned int v19;
  void *__p;
  void *v21;
  uint64_t v22;
  int **v23[2];
  void *v24;
  _BYTE *v25;
  uint64_t v26;

  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a5 = *(_QWORD *)a1;
    *(_QWORD *)(a5 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    v11 = *a2;
    v12 = **a2;
    v13 = (uint64_t)v11[1] - 8;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v24, v12, v13, (v13 - (uint64_t)v12) >> 2);
    v14 = (int *)v24;
    if (v24 == v25)
    {
      v17 = 1.0;
    }
    else
    {
      v15 = 1;
      do
      {
        v16 = *v14++;
        v15 *= v16;
      }
      while (v14 != (int *)v25);
      v17 = (double)v15;
    }
    v18 = mlx::core::to_stream(a3, a4);
    mlx::core::arange(0x400000002, v18, v19 | 0x100000000, v23, 0.0, v17, 1.0);
    __p = 0;
    v21 = 0;
    v22 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
    mlx::core::reshape((const void ***)v23, (uint64_t)&__p, a3, a4, (const void ***)a5);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
    mlx::core::array::~array((mlx::core::array *)v23);
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
  }
}

void sub_242490500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a12);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void mlx::core::diagonal(mlx::core::array *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v16;
  int v17;
  int v18;
  int v19;
  mlx::core *v20;
  int v21;
  unsigned int v22;
  mlx::core *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  char *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t i;
  uint64_t v33;
  _DWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::logic_error *exception;
  _QWORD *v39;
  _QWORD *v40;
  std::logic_error *v41;
  _QWORD *v42;
  _QWORD *v43;
  std::logic_error *v44;
  std::logic_error *v45;
  uint64_t *v46[2];
  void *__p;
  void *v48;
  _QWORD *v49;
  _QWORD v50[2];
  std::string v51;
  void *v52;
  void *v53;
  int **v54[32];

  v54[31] = *(int ***)MEMORY[0x24BDAC8D0];
  v8 = (*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
  if ((int)v8 <= 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"[diagonal] Array must have at least two dimensions, but got ", 60);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v53, &v51);
    std::logic_error::logic_error(exception, &v51);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v9 = v8 & (a3 >> 31);
  v10 = (v9 + a3);
  if (v9 + a3 < 0 || (int)v10 >= (int)v8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"[diagonal] Invalid axis1 ", 25);
    v39 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" for array with ", 16);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" dimensions.", 12);
    v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v53, &v51);
    std::logic_error::logic_error(v41, &v51);
    v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v41, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
  }
  v11 = v8 & (a4 >> 31);
  v12 = (v11 + a4);
  if (v11 + a4 < 0 || (int)v12 >= (int)v8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"[diagonal] Invalid axis2 ", 25);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" for array with ", 16);
    v43 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" dimensions.", 12);
    v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v53, &v51);
    std::logic_error::logic_error(v44, &v51);
    v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v44, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
  }
  if ((_DWORD)v10 == (_DWORD)v12)
  {
    v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v45, "[diagonal] axis1 and axis2 cannot be the same axis");
    __cxa_throw(v45, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v16 = -a2 & ~(-a2 >> 31);
  v17 = a2 & ~(a2 >> 31);
  v18 = mlx::core::array::shape(a1, v10) - v16;
  v19 = mlx::core::array::shape(a1, v12) - v17;
  if (v19 < v18)
    v18 = v19;
  v20 = mlx::core::to_stream(a5, a6);
  v21 = v18 & ~(v18 >> 31);
  mlx::core::arange(0x400000004, v20, v22 | 0x100000000, (int ***)&v52, (double)v16, (double)(v21 + v16), 1.0);
  v23 = mlx::core::to_stream(a5, a6);
  mlx::core::arange(0x400000004, v23, v24 | 0x100000000, v54, (double)v17, (double)(v21 + v17), 1.0);
  memset(&v51, 0, sizeof(v51));
  __p = &v51;
  LOBYTE(v48) = 0;
  v25 = operator new(0x20uLL);
  v26 = 0;
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
  v51.__r_.__value_.__r.__words[2] = (std::string::size_type)(v25 + 4);
  do
  {
    v27 = &v52 + 2 * v26;
    v29 = *v27;
    v28 = (char *)v27[1];
    *v25 = v29;
    v25[1] = v28;
    if (v28)
    {
      v30 = (unint64_t *)(v28 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    ++v26;
    v25 += 2;
  }
  while (v26 != 2);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
  for (i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)((char *)&v52 + i));
  v33 = *(_QWORD *)a1;
  v53 = 0;
  v54[0] = 0;
  v52 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v52, *(const void **)v33, *(_QWORD *)(v33 + 8), (uint64_t)(*(_QWORD *)(v33 + 8) - *(_QWORD *)v33) >> 2);
  v34 = v52;
  *((_DWORD *)v52 + v10) = 1;
  v34[v12] = 1;
  v35 = operator new(8uLL);
  __p = v35;
  *v35 = v10 | (v12 << 32);
  v48 = v35 + 1;
  v49 = v35 + 1;
  mlx::core::gather(a1, (uint64_t *)&v51, (int **)&__p, (uint64_t)&v52, a5, a6, v50);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  v36 = operator new(8uLL);
  *v36 = (v10 + 1) | ((unint64_t)(v12 + 1) << 32);
  v48 = v36 + 1;
  v49 = v36 + 1;
  __p = v36;
  mlx::core::squeeze((mlx::core::array *)v50, (unsigned int **)&__p, a5, a6, (const void ***)v46);
  mlx::core::moveaxis(v46, 0, -1, a5, a6, a7);
  mlx::core::array::~array((mlx::core::array *)v46);
  operator delete(v36);
  mlx::core::array::~array((mlx::core::array *)v50);
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  v52 = &v51;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
}

void sub_242490A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  void *v23;
  int v24;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void mlx::core::diag(mlx::core::array *a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  mlx::core *v16;
  int v17;
  unsigned int v18;
  mlx::core *v19;
  unsigned int v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::logic_error *exception;
  char *v25;
  char *v26;
  char *v27;
  std::string v28;
  void *v29;
  void *v30;
  char *v31;
  const void **v32[2];
  _QWORD v33[2];

  v10 = *(_QWORD *)a1;
  v11 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
  if (v11 == 2)
  {
    mlx::core::diagonal(a1, a2, 0, 1, a3, a4, a5);
  }
  else
  {
    if (v11 != 1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"[diag] array must be 1-D or 2-D, got array with ", 48);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" dimensions.", 12);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v26, &v28);
      std::logic_error::logic_error(exception, &v28);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    v12 = *(_DWORD *)(v10 + 48);
    v13 = (char *)operator new(8uLL);
    v14 = v13;
    if (a2 >= 0)
      v15 = a2;
    else
      v15 = -a2;
    *(_QWORD *)v13 = (v15 + v12) | ((unint64_t)(v15 + v12) << 32);
    v26 = v13 + 8;
    v27 = v13 + 8;
    v25 = v13;
    mlx::core::zeros((uint64_t)&v25, *(_QWORD *)(v10 + 56), a3, a4, v33);
    operator delete(v14);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v16 = mlx::core::to_stream(a3, a4);
    v17 = -a2 & ~(-a2 >> 31);
    mlx::core::arange(0x400000002, v16, v18 | 0x100000000, (int ***)&v28, (double)v17, (double)(v17 + v12), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v25, (uint64_t)&v28);
    mlx::core::array::~array((mlx::core::array *)&v28);
    v19 = mlx::core::to_stream(a3, a4);
    mlx::core::arange(0x400000002, v19, v20 | 0x100000000, (int ***)&v28, (double)(a2 & ~(a2 >> 31)), (double)((a2 & ~(a2 >> 31)) + v12), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v25, (uint64_t)&v28);
    mlx::core::array::~array((mlx::core::array *)&v28);
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v21 = (char *)operator new(0xCuLL);
    v30 = v21 + 12;
    v31 = v21 + 12;
    *(_DWORD *)v21 = v12;
    *(_QWORD *)(v21 + 4) = 0x100000001;
    v29 = v21;
    mlx::core::reshape((const void ***)a1, (uint64_t)&v29, a3, a4, v32);
    v22 = operator new(8uLL);
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    *v22 = 0x100000000;
    v28.__r_.__value_.__l.__size_ = (std::string::size_type)(v22 + 1);
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 1);
    mlx::core::scatter((mlx::core::array *)v33, (const void ****)&v25, (mlx::core::array *)v32, (int **)&v28, 4, a3, a4, a5);
    if (v28.__r_.__value_.__r.__words[0])
    {
      v28.__r_.__value_.__l.__size_ = v28.__r_.__value_.__r.__words[0];
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    mlx::core::array::~array((mlx::core::array *)v32);
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    mlx::core::array::~array((mlx::core::array *)v33);
  }
}

void sub_242490EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  int v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v4 - 137) < 0)
  {
    operator delete(*(void **)(v4 - 160));
    if ((v3 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

void mlx::core::trace(mlx::core::array *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, mlx::core::array *a8@<X8>)
{
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v15;
  std::logic_error *exception;
  _QWORD *v17;
  _QWORD *v18;
  std::logic_error *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::logic_error *v22;
  std::logic_error *v23;
  _QWORD v24[2];
  std::string v25;
  uint64_t v26;
  _BYTE v27[263];

  v9 = (*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
  if ((int)v9 <= 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[trace] Array must have at least two dimensions, but got ", 57);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v10 = (v9 & (a3 >> 31)) + a3;
  if (v10 < 0 || v10 >= (int)v9)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[trace] Invalid axis1 ", 22);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" for array with ", 16);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" dimensions.", 12);
    v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
    std::logic_error::logic_error(v19, &v25);
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v19, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
  }
  v11 = (v9 & (a4 >> 31)) + a4;
  if (v11 < 0 || v11 >= (int)v9)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[trace] Invalid axis2 ", 22);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for array with ", 16);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" dimensions.", 12);
    v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
    std::logic_error::logic_error(v22, &v25);
    v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v22, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
  }
  if (v10 == v11)
  {
    v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v23, "[trace] axis1 and axis2 cannot be the same axis");
    __cxa_throw(v23, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::diagonal(a1, a2, a3, a4, a6, a7, v24);
  mlx::core::astype(v24, a5, a6, a7, &v26);
  mlx::core::sum((uint64_t)&v26, -1, 0, a6, a7, a8);
  mlx::core::array::~array((mlx::core::array *)&v26);
  mlx::core::array::~array((mlx::core::array *)v24);
}

void sub_242491278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void mlx::core::trace(mlx::core::array *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, mlx::core::array *a7@<X8>)
{
  mlx::core::trace(a1, a2, a3, a4, *(_QWORD *)(*(_QWORD *)a1 + 56), a5, a6, a7);
}

void mlx::core::trace(mlx::core::array *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, mlx::core::array *a4@<X8>)
{
  mlx::core::trace(a1, 0, 0, 1, *(_QWORD *)(*(_QWORD *)a1 + 56), a2, a3, a4);
}

void mlx::core::depends(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  mlx::core *v6;
  uint64_t *v7;
  uint64_t v8;
  mlx::core *v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  mlx::core *v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void **v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  unint64_t v39;
  void *__p[2];
  char *v41;
  __int128 v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v44, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  v6 = (mlx::core *)std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((uint64_t *)&v44, v45, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v7 = *a1;
  v8 = *(_QWORD *)(**a1 + 64);
  if (v8)
  {
    v9 = *(mlx::core **)(v8 + 8);
    v10 = *(_DWORD *)(v8 + 16);
  }
  else
  {
    v9 = mlx::core::to_stream(v6, 0);
    v10 = v11;
    v7 = *a1;
  }
  v43 = 0;
  v12 = 0uLL;
  v42 = 0u;
  v41 = 0;
  *(_OWORD *)__p = 0u;
  v13 = a1[1];
  if (v7 == v13)
  {
    v28 = 0;
  }
  else
  {
    do
    {
      v14 = *v7;
      v15 = (_QWORD *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1) >= v43)
      {
        v16 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int> const&>((uint64_t *)&v42, v14);
      }
      else
      {
        **((_QWORD **)&v42 + 1) = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
        v16 = (uint64_t)(v15 + 3);
      }
      *((_QWORD *)&v42 + 1) = v16;
      v17 = *(_QWORD *)(*v7 + 56);
      v18 = (char *)__p[1];
      if (__p[1] >= v41)
      {
        v20 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = (v41 - (char *)__p[0]) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if ((unint64_t)(v41 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v41, v22);
        else
          v23 = 0;
        v24 = &v23[8 * v20];
        *(_QWORD *)v24 = v17;
        v19 = v24 + 8;
        v26 = (char *)__p[0];
        v25 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v24 - 1) = v27;
            v24 -= 8;
          }
          while (v25 != v26);
          v25 = (char *)__p[0];
        }
        __p[0] = v24;
        __p[1] = v19;
        v41 = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)__p[1] = v17;
        v19 = v18 + 8;
      }
      __p[1] = v19;
      v7 += 2;
    }
    while (v7 != v13);
    v12 = v42;
    v28 = v43;
  }
  v38 = v12;
  v39 = v28;
  v43 = 0;
  v42 = 0uLL;
  v29 = mlx::core::to_stream(v9, v10 | 0x100000000);
  v31 = v30;
  v32 = (std::__shared_weak_count *)operator new(0x30uLL);
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FF68;
  v32->__shared_owners_ = 0;
  v32[1].__shared_owners_ = (uint64_t)v29;
  LODWORD(v32[1].__shared_weak_owners_) = v31;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_251351058;
  v36 = (void **)&v32[1].__vftable;
  v37 = v32;
  mlx::core::array::make_arrays((uint64_t *)&v38, __p, &v36, &v44, a3);
  v33 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (void **)&v38;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = &v42;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)&v42 = &v44;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
}

void sub_242491660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  a19 = &a22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void mlx::core::atleast_1d(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _DWORD *v11;
  void *__p;
  void *v13;
  _DWORD *v14;

  if (*(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1)
  {
    v11 = operator new(4uLL);
    __p = v11;
    *v11 = 1;
    v13 = v11 + 1;
    v14 = v11 + 1;
    mlx::core::reshape((const void ***)a1, (uint64_t)&__p, a2, a3, (const void ***)a4);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a1;
    *(_QWORD *)(a4 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
}

void sub_242491798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::atleast_1d(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a4, (a1[1] - *a1) >> 4);
  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    mlx::core::atleast_1d(v8, a2, a3, (uint64_t)v10);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
    mlx::core::array::~array((mlx::core::array *)v10);
    v8 += 16;
  }
}

void sub_24249184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void mlx::core::atleast_2d(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void **v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  const void *v12;
  _QWORD *v13;
  const void **v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  v8 = *a1;
  v9 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v9 == 1)
  {
    v12 = v8[6];
    v13 = operator new(8uLL);
    __p = v13;
    *v13 = ((_QWORD)v12 << 32) | 1;
    v18 = v13 + 1;
    v19 = v13 + 1;
    mlx::core::reshape(a1, (uint64_t)&__p, a2, a3, (const void ***)a4);
    v11 = __p;
    if (!__p)
      return;
    v18 = __p;
    goto LABEL_7;
  }
  if (!v9)
  {
    v10 = operator new(8uLL);
    v20 = v10;
    *v10 = 0x100000001;
    v21 = v10 + 1;
    v22 = v10 + 1;
    mlx::core::reshape(a1, (uint64_t)&v20, a2, a3, (const void ***)a4);
    v11 = v20;
    if (!v20)
      return;
    v21 = v20;
LABEL_7:
    operator delete(v11);
    return;
  }
  v14 = a1[1];
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 1);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
}

void sub_242491980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::atleast_2d(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void ***v8;
  const void ***v9;
  _BYTE v10[16];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a4, ((char *)a1[1] - (char *)*a1) >> 4);
  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    mlx::core::atleast_2d(v8, a2, a3, (uint64_t)v10);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
    mlx::core::array::~array((mlx::core::array *)v10);
    v8 += 2;
  }
}

void sub_242491A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void mlx::core::atleast_3d(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *__p;
  void *v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  char *v30;

  v8 = *(const void ***)a1;
  v9 = (char *)*v8;
  v10 = (char *)v8[1];
  v11 = v10 - (_BYTE *)*v8;
  v12 = v11 >> 2;
  if (v11 >> 2 == 2)
  {
    if (v10 == v9 || (unint64_t)v11 <= 4)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v15 = *(_QWORD *)v9;
    v16 = (char *)operator new(0xCuLL);
    v23 = v16 + 12;
    v24 = v16 + 12;
    *(_QWORD *)v16 = v15;
    *((_DWORD *)v16 + 2) = 1;
    v22 = v16;
    mlx::core::reshape((const void ***)a1, (uint64_t)&v22, a2, a3, (const void ***)a4);
    v14 = v22;
    if (v22)
    {
      v23 = v22;
      goto LABEL_12;
    }
  }
  else if (v12 == 1)
  {
    v17 = v8[6];
    v18 = operator new(0xCuLL);
    v26 = v18 + 3;
    v27 = v18 + 3;
    *v18 = 1;
    v18[1] = (_DWORD)v17;
    v18[2] = 1;
    __p = v18;
    mlx::core::reshape((const void ***)a1, (uint64_t)&__p, a2, a3, (const void ***)a4);
    v14 = __p;
    if (__p)
    {
      v26 = __p;
      goto LABEL_12;
    }
  }
  else if (v12)
  {
    v19 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v13 = (char *)operator new(0xCuLL);
    v29 = v13 + 12;
    v30 = v13 + 12;
    *(_QWORD *)v13 = 0x100000001;
    *((_DWORD *)v13 + 2) = 1;
    v28 = v13;
    mlx::core::reshape((const void ***)a1, (uint64_t)&v28, a2, a3, (const void ***)a4);
    v14 = v28;
    if (v28)
    {
      v29 = v28;
LABEL_12:
      operator delete(v14);
    }
  }
}

void sub_242491BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::atleast_3d(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a4, (a1[1] - *a1) >> 4);
  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    mlx::core::atleast_3d(v8, a2, a3, (uint64_t)v10);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
    mlx::core::array::~array((mlx::core::array *)v10);
    v8 += 16;
  }
}

void sub_242491CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void mlx::core::bitwise_impl(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlx::core *v20;
  int v21;
  int v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *exception;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  void *__p[3];
  _QWORD v44[2];
  void **v45[2];
  _QWORD v46[2];
  void **v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  *(_QWORD *)&v49 = *(_QWORD *)(*a1 + 56);
  v47 = *(void ***)(*a2 + 56);
  v51 = mlx::core::promote_types((int *)&v49, (int *)&v47);
  if ((mlx::core::issubdtype((unsigned int *)&v51, &mlx::core::integer) & 1) == 0 && (_DWORD)v51)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"[", 1);
    v31 = *(char *)(a4 + 23);
    if (v31 >= 0)
      v32 = a4;
    else
      v32 = *(_QWORD *)a4;
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(a4 + 23);
    else
      v33 = *(_QWORD *)(a4 + 8);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] Only allowed on integer or BOOLean types but got types ", 57);
    v47 = *(void ***)(*a1 + 56);
    v36 = mlx::core::operator<<(v35, &v47);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" and ", 5);
    v45[0] = *(void ***)(*a2 + 56);
    v38 = mlx::core::operator<<(v37, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)".", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v49 + 8, &v47);
    MEMORY[0x2426A8084](exception, &v47);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v12 = a1[1];
  v46[0] = *a1;
  v46[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  mlx::core::astype(v46, v51, *(mlx::core **)a5, *(_QWORD *)(a5 + 8), &v47);
  v15 = a2[1];
  v44[0] = *a2;
  v44[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  mlx::core::astype(v44, v51, *(mlx::core **)a5, *(_QWORD *)(a5 + 8), v45);
  mlx::core::broadcast_arrays((const void ***)&v47, (const void ***)v45, *(mlx::core **)a5, *(_QWORD *)(a5 + 8), &v49);
  mlx::core::array::~array((mlx::core::array *)v45);
  mlx::core::array::~array((mlx::core::array *)v44);
  mlx::core::array::~array((mlx::core::array *)&v47);
  mlx::core::array::~array((mlx::core::array *)v46);
  v18 = *(_QWORD *)v49;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 2);
  v19 = v51;
  v20 = mlx::core::to_stream(*(mlx::core **)a5, *(_QWORD *)(a5 + 8));
  v22 = v21;
  v23 = operator new(0x30uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &unk_251350008;
  v23[4] = v20;
  v23[3] = &unk_25134D980;
  *((_DWORD *)v23 + 10) = v22;
  *((_DWORD *)v23 + 11) = a3;
  *(_QWORD *)&v42 = v23 + 3;
  *((_QWORD *)&v42 + 1) = v23;
  v47 = 0;
  v48 = 0;
  v40 = v49;
  v41 = v50;
  v49 = 0uLL;
  v50 = 0;
  mlx::core::array::array(a6, (__int128 *)__p, v19, &v42, &v40);
  v45[0] = (void **)&v40;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v45);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v47 = (void **)&v49;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v47);
}

void sub_24249205C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  void *v30;
  int v31;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a30);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void mlx::core::bitwise_and(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *__p[2];
  char v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "bitwise_and");
  mlx::core::bitwise_impl(a1, a2, 0, (uint64_t)__p, (uint64_t)v10, a5);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_2424921AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::operator&(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::bitwise_and(a1, a2, a3, 0, a4);
}

void mlx::core::bitwise_or(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *__p[2];
  char v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "bitwise_or");
  mlx::core::bitwise_impl(a1, a2, 1, (uint64_t)__p, (uint64_t)v10, a5);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_242492244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::operator|(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::bitwise_or(a1, a2, a3, 0, a4);
}

void mlx::core::bitwise_xor(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *__p[2];
  char v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "bitwise_xor");
  mlx::core::bitwise_impl(a1, a2, 2, (uint64_t)__p, (uint64_t)v10, a5);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_2424922DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::operator^(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::bitwise_xor(a1, a2, a3, 0, a4);
}

void mlx::core::left_shift(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  int v22[4];
  _QWORD v23[2];

  v23[0] = a3;
  v23[1] = a4;
  __p[0] = *(void **)(*a1 + 56);
  *(_QWORD *)v22 = *(_QWORD *)(*a2 + 56);
  __p[0] = (void *)mlx::core::promote_types((int *)__p, v22);
  v10 = mlx::core::promote_types((int *)__p, (int *)&mlx::core::uint8);
  v11 = a1[1];
  v21[0] = *a1;
  v21[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v21, v10, a3, a4, v22);
  v14 = a2[1];
  v19[0] = *a2;
  v19[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v19, v10, a3, a4, v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "left_shift");
  mlx::core::bitwise_impl(v22, v20, 3, (uint64_t)__p, (uint64_t)v23, a5);
  if (v18 < 0)
    operator delete(__p[0]);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v21);
}

void sub_242492450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a18);
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a22);
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::operator<<(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::left_shift(a1, a2, a3, 0, a4);
}

void mlx::core::right_shift(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  int v22[4];
  _QWORD v23[2];

  v23[0] = a3;
  v23[1] = a4;
  __p[0] = *(void **)(*a1 + 56);
  *(_QWORD *)v22 = *(_QWORD *)(*a2 + 56);
  __p[0] = (void *)mlx::core::promote_types((int *)__p, v22);
  v10 = mlx::core::promote_types((int *)__p, (int *)&mlx::core::uint8);
  v11 = a1[1];
  v21[0] = *a1;
  v21[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::astype(v21, v10, a3, a4, v22);
  v14 = a2[1];
  v19[0] = *a2;
  v19[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::astype(v19, v10, a3, a4, v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "right_shift");
  mlx::core::bitwise_impl(v22, v20, 4, (uint64_t)__p, (uint64_t)v23, a5);
  if (v18 < 0)
    operator delete(__p[0]);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v21);
}

void sub_2424925FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a18);
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a22);
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::operator>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, mlx::core *a3@<X2>, _QWORD *a4@<X8>)
{
  mlx::core::right_shift(a1, a2, a3, 0, a4);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int *v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  v5 = (int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_24249282C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<int>::__vallocate[abi:ne180100](result, a4);
    return (_QWORD *)std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_242492938(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = *((_DWORD *)a2 + 7);
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_242492A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<int,int>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_242492AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]<std::vector<int>&,std::vector<int>&,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_242492B40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

int ***mlx::core::array::array<double>(int ***a1, double *a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  void *__p;
  void *v10;
  _DWORD *v11;
  uint64_t v12;

  v12 = a4;
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a3;
  v10 = v7 + 1;
  v11 = v7 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v12, a1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<double const*>(a1, a2);
  return a1;
}

void sub_242492E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

float mlx::core::array::init<double const*>(int ***a1, double *a2)
{
  uint64_t v4;
  float result;
  _QWORD *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  BOOL *v10;
  uint64_t v11;
  double v12;
  int *v13;
  int *v14;
  uint64_t v15;
  double v16;
  int *v17;
  int *v18;
  uint64_t v19;
  double v20;
  int *v21;
  int *v22;
  uint64_t v23;
  double v24;
  int *v25;
  int *v26;
  uint64_t v27;
  double v28;
  int *v29;
  int *v30;
  uint64_t v31;
  double v32;
  int *v33;
  float *v34;
  uint64_t v35;
  double v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v37[0] = &unk_2513463C8;
  v37[1] = mlx::core::allocator::free;
  v38 = v37;
  mlx::core::array::set_data(a1, v4, (uint64_t)v37);
  v6 = v38;
  if (v38 == v37)
  {
    v7 = 4;
    v6 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      v9 = v8[6];
      if (v9)
      {
        v10 = (BOOL *)v8[19];
        v11 = 8 * (_QWORD)v9;
        do
        {
          v12 = *a2++;
          result = *(float *)&v12;
          *v10++ = v12 != 0.0;
          v11 -= 8;
        }
        while (v11);
      }
      break;
    case 1:
      v25 = v8[6];
      if (v25)
      {
        v26 = v8[19];
        v27 = 8 * (_QWORD)v25;
        do
        {
          v28 = *a2++;
          result = *(float *)&v28;
          *(_BYTE *)v26 = (int)v28;
          v26 = (int *)((char *)v26 + 1);
          v27 -= 8;
        }
        while (v27);
      }
      break;
    case 2:
      v13 = v8[6];
      if (v13)
      {
        v14 = v8[19];
        v15 = 8 * (_QWORD)v13;
        do
        {
          v16 = *a2++;
          result = *(float *)&v16;
          *v14++ = v16;
          v15 -= 8;
        }
        while (v15);
      }
      break;
    case 3:
      v17 = v8[6];
      if (v17)
      {
        v18 = v8[19];
        v19 = 8 * (_QWORD)v17;
        do
        {
          v20 = *a2++;
          result = *(float *)&v20;
          *(_BYTE *)v18 = (int)v20;
          v18 = (int *)((char *)v18 + 1);
          v19 -= 8;
        }
        while (v19);
      }
      break;
    case 4:
      v21 = v8[6];
      if (v21)
      {
        v22 = v8[19];
        v23 = 8 * (_QWORD)v21;
        do
        {
          v24 = *a2++;
          result = *(float *)&v24;
          *v22++ = (int)v24;
          v23 -= 8;
        }
        while (v23);
      }
      break;
    case 5:
      v29 = v8[6];
      if (v29)
      {
        v30 = v8[19];
        v31 = 8 * (_QWORD)v29;
        do
        {
          v32 = *a2++;
          result = *(float *)&v32;
          *(_QWORD *)v30 = (uint64_t)v32;
          v30 += 2;
          v31 -= 8;
        }
        while (v31);
      }
      break;
    case 6:
      v33 = v8[6];
      if (v33)
      {
        v34 = (float *)v8[19];
        v35 = 8 * (_QWORD)v33;
        do
        {
          v36 = *a2++;
          result = v36;
          *v34++ = result;
          v35 -= 8;
        }
        while (v35);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_242493084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mlx::core::Arange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Arange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Arange>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::AsType>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::AsType>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::AsType>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

char *std::allocate_shared[abi:ne180100]<mlx::core::AsStrided,std::allocator<mlx::core::AsStrided>,mlx::core::Stream,std::vector<int>,std::vector<unsigned long>,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __int128 *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *result;

  v10 = (char *)operator new(0x68uLL);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &unk_25134E898;
  *((_QWORD *)v10 + 1) = 0;
  v11 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v13 = *((_QWORD *)a2 + 2);
  v14 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v15 = *((_QWORD *)a3 + 2);
  v16 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  v17 = *a4;
  *((_QWORD *)v10 + 4) = v11;
  *((_DWORD *)v10 + 10) = v12;
  *((_OWORD *)v10 + 3) = v14;
  *((_QWORD *)v10 + 8) = v13;
  *(_OWORD *)(v10 + 72) = v16;
  *((_QWORD *)v10 + 11) = v15;
  *((_QWORD *)v10 + 12) = v17;
  a5[1] = v10;
  *((_QWORD *)v10 + 3) = off_251350B18;
  result = v10 + 24;
  *a5 = result;
  return result;
}

void std::__shared_ptr_emplace<mlx::core::AsStrided>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::AsStrided>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::AsStrided>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Copy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E8E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Copy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E8E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Copy>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Full>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Full>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Full>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Reshape,std::allocator<mlx::core::Reshape>,mlx::core::Stream,std::vector<int> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<mlx::core::Reshape>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> &,std::allocator<mlx::core::Reshape>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_242493374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reshape>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> &,std::allocator<mlx::core::Reshape>,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134E988;
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a1 + 48;
  *(_DWORD *)(v6 - 8) = v5;
  *(_QWORD *)(v6 - 24) = off_2513521C0;
  *(_QWORD *)(v6 - 16) = v4;
  *(_OWORD *)(v6 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_2424933F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Reshape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Reshape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reshape>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2424934C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::set<int>::set[abi:ne180100]<std::__wrap_iter<int *>>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_242493774(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::Slice,std::allocator<mlx::core::Slice>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<mlx::core::Slice>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::Slice>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_2424937F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::Slice>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::Slice>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = 0;
  *a1 = &unk_25134E9D8;
  a1[1] = 0;
  mlx::core::Slice::Slice((uint64_t)(a1 + 3), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), a3, a4, a5);
  return a1;
}

void sub_242493854(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Slice>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Slice>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Slice>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t mlx::core::Slice::Slice(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_251352600;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  return a1;
}

void sub_242493968(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::SliceUpdate,std::allocator<mlx::core::SliceUpdate>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<mlx::core::SliceUpdate>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::SliceUpdate>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_242493A00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::SliceUpdate>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::SliceUpdate>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = 0;
  *a1 = &unk_25134EA28;
  a1[1] = 0;
  mlx::core::SliceUpdate::SliceUpdate((uint64_t)(a1 + 3), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), a3, a4, a5);
  return a1;
}

void sub_242493A64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::SliceUpdate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EA28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::SliceUpdate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EA28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::SliceUpdate>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t mlx::core::SliceUpdate::SliceUpdate(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_251352688;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  return a1;
}

void sub_242493B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Split,std::allocator<mlx::core::Split>,mlx::core::Stream,std::vector<int> const&,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x50uLL);
  result = std::__shared_ptr_emplace<mlx::core::Split>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,unsigned long &,std::allocator<mlx::core::Split>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_242493C08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Split>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,unsigned long &,std::allocator<mlx::core::Split>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134EA78;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *a4;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = a1 + 48;
  *(_DWORD *)(v8 - 8) = v6;
  *(_QWORD *)(v8 - 24) = &off_251352798;
  *(_QWORD *)(v8 - 16) = v5;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v8, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_DWORD *)(a1 + 72) = v7;
  return a1;
}

void sub_242493C90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Split>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EA78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Split>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EA78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Split>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Concatenate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Concatenate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Concatenate>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::Pad,std::allocator<mlx::core::Pad>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<mlx::core::Pad>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Pad>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_242493DB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::Pad>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Pad>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = 0;
  *a1 = &unk_25134EB18;
  a1[1] = 0;
  mlx::core::Pad::Pad((uint64_t)(a1 + 3), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), a3, a4, a5);
  return a1;
}

void sub_242493E1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Pad>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Pad>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Pad>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t mlx::core::Pad::Pad(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_251351FA0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  return a1;
}

void sub_242493F30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Transpose,std::allocator<mlx::core::Transpose>,mlx::core::Stream,std::vector<int>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<mlx::core::Transpose>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::allocator<mlx::core::Transpose>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_242493FB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Transpose>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::allocator<mlx::core::Transpose>,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134EB68;
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a1 + 48;
  *(_DWORD *)(v6 - 8) = v5;
  *(_QWORD *)(v6 - 24) = off_251352B40;
  *(_QWORD *)(v6 - 16) = v4;
  *(_OWORD *)(v6 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_242494030(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Transpose>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Transpose>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EB68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Transpose>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Broadcast,std::allocator<mlx::core::Broadcast>,mlx::core::Stream,std::vector<int> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<mlx::core::Broadcast>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::allocator<mlx::core::Broadcast>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_2424940E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Broadcast>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::allocator<mlx::core::Broadcast>,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134EBB8;
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a1 + 48;
  *(_DWORD *)(v6 - 8) = v5;
  *(_QWORD *)(v6 - 24) = off_251350CB0;
  *(_QWORD *)(v6 - 16) = v4;
  *(_OWORD *)(v6 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_242494168(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Broadcast>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EBB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Broadcast>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EBB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Broadcast>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Equal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EC08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Equal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EC08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Equal>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::NotEqual>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EC58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::NotEqual>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EC58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::NotEqual>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Greater>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ECA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Greater>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ECA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Greater>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::GreaterEqual>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ECF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::GreaterEqual>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ECF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::GreaterEqual>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Less>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ED48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Less>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ED48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Less>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::LessEqual>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ED98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LessEqual>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134ED98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LessEqual>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Select>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EDE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Select>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EDE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Select>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<mlx::core::Reduce>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,std::allocator<mlx::core::Reduce>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_242494498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reduce>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,std::allocator<mlx::core::Reduce>,0>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134EE38;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = a1 + 48;
  *(_QWORD *)(v8 - 24) = off_251346478;
  *(_QWORD *)(v8 - 16) = v5;
  *(_DWORD *)(v8 - 8) = v6;
  *(_DWORD *)(v8 - 4) = v7;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v8, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  return a1;
}

void sub_24249451C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Reduce>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Reduce>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reduce>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArgReduce>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArgReduce>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EE88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArgReduce>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Sort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sort>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArgSort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArgSort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArgSort>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Partition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Partition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Partition>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArgPartition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArgPartition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134EFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArgPartition>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Abs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Abs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Abs>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Negative>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Negative>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Negative>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Sign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sign>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::LogicalNot>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogicalNot>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogicalNot>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::LogicalAnd>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogicalAnd>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogicalAnd>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::LogicalOr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogicalOr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogicalOr>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Add>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F1F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Add>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F1F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Add>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Subtract>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Subtract>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Subtract>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Multiply>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Multiply>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Multiply>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Divide>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Divide>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Divide>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Remainder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Remainder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Remainder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::DivMod>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::DivMod>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::DivMod>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Maximum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Maximum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Maximum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Minimum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Minimum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Minimum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Floor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Floor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Floor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Ceil>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Ceil>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Ceil>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Square>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Square>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Square>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Exp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Exp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Exp>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Expm1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Expm1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Expm1>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Sin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sin>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Cos>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Cos>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Cos>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Tan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Tan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Tan>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArcSin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcSin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcSin>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArcCos>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcCos>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcCos>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArcTan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcTan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcTan>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArcTan2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcTan2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcTan2>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Sinh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sinh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sinh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Cosh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Cosh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Cosh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Tanh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Tanh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Tanh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArcSinh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcSinh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcSinh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArcCosh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcCosh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcCosh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ArcTanh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcTanh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134F9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcTanh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Log>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FA18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Log>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FA18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Log>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Log1p>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Log1p>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FA68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Log1p>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::LogAddExp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogAddExp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogAddExp>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Sigmoid>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sigmoid>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sigmoid>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Erf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Erf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FB58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Erf>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::ErfInv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FBA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ErfInv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FBA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ErfInv>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::StopGradient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::StopGradient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::StopGradient>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Round>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Round>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FC48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Round>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Matmul>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FC98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Matmul>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FC98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Matmul>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::Gather,std::allocator<mlx::core::Gather>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<mlx::core::Gather>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Gather>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2424955B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::Gather>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Gather>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[2] = 0;
  *a1 = &unk_25134FCE8;
  a1[1] = 0;
  mlx::core::Gather::Gather((uint64_t)(a1 + 3), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), a3, a4);
  return a1;
}

void sub_242495614(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Gather>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FCE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Gather>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FCE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Gather>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t mlx::core::Gather::Gather(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_251351698;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_2424956FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Scatter,std::allocator<mlx::core::Scatter>,mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<mlx::core::Scatter>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,std::allocator<mlx::core::Scatter>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_242495774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Scatter>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,std::allocator<mlx::core::Scatter>,0>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134FD38;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = a1 + 48;
  *(_QWORD *)(v8 - 24) = off_251352358;
  *(_QWORD *)(v8 - 16) = v5;
  *(_DWORD *)(v8 - 8) = v6;
  *(_DWORD *)(v8 - 4) = v7;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v8, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  return a1;
}

void sub_2424957F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Scatter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Scatter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FD38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Scatter>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Sqrt>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FD88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sqrt>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FD88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sqrt>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Power>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FDD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Power>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FDD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Power>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Scan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Scan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Scan>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::AddMM>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::AddMM>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FE78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::AddMM>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

int ***mlx::core::array::array<BOOL>(int ***a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  void *__p;
  void *v10;
  _DWORD *v11;
  uint64_t v12;

  v12 = a4;
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a3;
  v10 = v7 + 1;
  v11 = v7 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v12, a1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<BOOL const*>(a1, a2);
  return a1;
}

void sub_242495A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::array::init<BOOL const*>(int ***a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int **v7;
  size_t v8;
  int *v9;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  int *v15;
  int *v16;
  unsigned int v17;
  int *v18;
  float *v19;
  float v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (_QWORD)(*a1)[6]));
  v22[0] = &unk_2513463C8;
  v22[1] = mlx::core::allocator::free;
  v23 = v22;
  mlx::core::array::set_data(a1, v4, (uint64_t)v22);
  result = v23;
  if (v23 == v22)
  {
    v6 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_6:
  v7 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
    case 1:
    case 3:
      v8 = (size_t)v7[6];
      if (v8)
        result = memmove(v7[19], a2, v8);
      break;
    case 2:
      v9 = v7[6];
      if (v9)
      {
        v10 = v7[19];
        do
        {
          v11 = *a2++;
          *v10++ = v11;
          v9 = (int *)((char *)v9 - 1);
        }
        while (v9);
      }
      break;
    case 4:
      v12 = v7[6];
      if (v12)
      {
        v13 = v7[19];
        do
        {
          v14 = *a2++;
          *v13++ = v14;
          v12 = (int *)((char *)v12 - 1);
        }
        while (v12);
      }
      break;
    case 5:
      v15 = v7[6];
      if (v15)
      {
        v16 = v7[19];
        do
        {
          v17 = *a2++;
          *(_QWORD *)v16 = v17;
          v16 += 2;
          v15 = (int *)((char *)v15 - 1);
        }
        while (v15);
      }
      break;
    case 6:
      v18 = v7[6];
      if (v18)
      {
        v19 = (float *)v7[19];
        do
        {
          if (*a2++)
            v21 = 1.0;
          else
            v21 = 0.0;
          *v19++ = v21;
          v18 = (int *)((char *)v18 - 1);
        }
        while (v18);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_242495C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mlx::core::BlockMaskedMM>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::BlockMaskedMM>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::BlockMaskedMM>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::GatherMM>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FF18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::GatherMM>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FF18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::GatherMM>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::Depends>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Depends>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Depends>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::NumberOfElements>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::NumberOfElements>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134FFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::NumberOfElements>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<mlx::core::BitwiseBinary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_251350008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::BitwiseBinary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_251350008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::BitwiseBinary>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *mlx_abs(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::abs((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242495E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::add((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242495F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_addmm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  uint64_t v10;
  const void **v11;
  unint64_t *v12;
  unint64_t v13;
  const void **v14;
  unint64_t *v15;
  unint64_t v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  const void **v20;
  unint64_t *v21;
  unint64_t v22;
  const void **v24[2];
  const void **v25[2];
  const void **v26[2];
  const void **v27[2];
  float v28;
  float v29;

  v28 = a6;
  v29 = a5;
  v10 = operator new();
  v11 = *(const void ***)(a1 + 24);
  v26[0] = *(const void ***)(a1 + 16);
  v26[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(const void ***)(a2 + 24);
  v25[0] = *(const void ***)(a2 + 16);
  v25[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 1);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(const void ***)(a3 + 24);
  v24[0] = *(const void ***)(a3 + 16);
  v24[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  mlx::core::addmm(v26, v25, v24, (int *)&v29, (int *)&v28, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v27);
  *(_QWORD *)v10 = &off_25134E6E8;
  *(_QWORD *)(v10 + 8) = 1;
  v20 = v27[1];
  *(const void ***)(v10 + 16) = v27[0];
  *(_QWORD *)(v10 + 24) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 1);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v26);
  return v10;
}

void sub_2424960D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  MEMORY[0x2426A82C4](v2, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_all_axes(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = (_QWORD *)operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::all(a1 + 16, (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, (mlx::core::array *)v18);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v18[1];
  v10[2] = v18[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_2424961F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_all_axis(uint64_t a1, int a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::all(a1 + 16, a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (mlx::core::array *)v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_2424962F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_all_all(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::all(a1 + 16, a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (mlx::core::array *)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_2424963C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_allclose(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[2];

  v12 = (_QWORD *)operator new();
  mlx::core::allclose((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (mlx::core::array *)v17, a5, a6);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v17[1];
  v12[2] = v17[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v17);
  return v12;
}

void sub_2424964B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_any(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = (_QWORD *)operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::any(a1 + 16, (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, (mlx::core::array *)v18);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v18[1];
  v10[2] = v18[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_2424965C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_any_all(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::any(a1 + 16, a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (mlx::core::array *)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_2424966B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_arange(int a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v10;
  int **v11;
  unint64_t *v12;
  unint64_t v13;
  int **v15[2];

  v10 = operator new();
  mlx::core::arange(mlx_cpp_dtypes[a1], *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v15, a3, a4, a5);
  *(_QWORD *)v10 = &off_25134E6E8;
  *(_QWORD *)(v10 + 8) = 1;
  v11 = v15[1];
  *(int ***)(v10 + 16) = v15[0];
  *(_QWORD *)(v10 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_2424967A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_arccos(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::arccos((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242496870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_arccosh(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::arccosh((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242496938(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_arcsin(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::arcsin((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242496A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_arcsinh(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::arcsinh((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242496AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_arctan(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::arctan((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242496B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_arctan2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::arctan2((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242496C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_arctanh(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::arctanh((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242496D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argmax(uint64_t a1, int a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::argmax((uint64_t **)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (mlx::core::array *)v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_242496E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argmax_all(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::argmax((const void ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (mlx::core::array *)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242496ED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argmin(uint64_t a1, int a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::argmin((uint64_t **)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (mlx::core::array *)v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_242496FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argmin_all(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::argmin((const void ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (mlx::core::array *)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242497088(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argpartition(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::argpartition((mlx::core::array *)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_242497168(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argpartition_all(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::argpartition((const void ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242497238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argsort(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::argsort((mlx::core::array *)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242497308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_argsort_all(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::argsort((const void ***)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_2424973D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_array_equal(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::array_equal((const void ***)(a1 + 16), (const void ***)(a2 + 16), a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (mlx::core::array *)v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_2424974B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_as_strided(uint64_t a1, const void *a2, unint64_t a3, const void *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  const void **v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[3];
  void *v23;
  void *v24;
  uint64_t v25;
  const void **v26[2];
  _QWORD v27[2];

  v14 = (_QWORD *)operator new();
  v15 = *(const void ***)(a1 + 24);
  v26[0] = *(const void ***)(a1 + 16);
  v26[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v23, a2, (uint64_t)a2 + 4 * a3, a3);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(__p, a4, (uint64_t)a4 + 8 * a5, a5);
  mlx::core::as_strided(v26, (uint64_t)&v23, (__int128 *)__p, a6, *(mlx::core **)(a7 + 16), *(unsigned int *)(a7 + 24) | 0x100000000, v27);
  *v14 = &off_25134E6E8;
  v14[1] = 1;
  v18 = v27[1];
  v14[2] = v27[0];
  v14[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  mlx::core::array::~array((mlx::core::array *)v27);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  mlx::core::array::~array((mlx::core::array *)v26);
  return v14;
}

void sub_242497628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  mlx::core::array::~array((mlx::core::array *)&a15);
  MEMORY[0x2426A82C4](v15, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_astype(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 24);
  v14[0] = *(_QWORD *)(a1 + 16);
  v14[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::astype(v14, mlx_cpp_dtypes[a2], *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v15);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v10 = v15[1];
  v6[2] = v15[0];
  v6[3] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v14);
  return v6;
}

void sub_242497760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  mlx::core::array::~array((mlx::core::array *)&a9);
  MEMORY[0x2426A82C4](v9, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_atleast_1d(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::atleast_1d(a1 + 16, *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, (uint64_t)v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242497830(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_atleast_2d(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::atleast_2d((const void ***)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, (uint64_t)v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_2424978F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_atleast_3d(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::atleast_3d(a1 + 16, *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, (uint64_t)v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_2424979C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_bitwise_and(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::bitwise_and((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242497A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_bitwise_or(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::bitwise_or((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242497B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_bitwise_xor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::bitwise_xor((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242497C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_block_masked_mm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  const void **v15;
  unint64_t *v16;
  unint64_t v17;
  const void **v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  const void **v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;
  _QWORD v39[2];
  char v40;
  _QWORD v41[2];
  char v42;
  const void **v43[2];
  const void **v44[2];
  const void **v45[2];

  v14 = operator new();
  v15 = *(const void ***)(a1 + 24);
  v44[0] = *(const void ***)(a1 + 16);
  v44[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(const void ***)(a2 + 24);
  v43[0] = *(const void ***)(a2 + 16);
  v43[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 1);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (a4)
  {
    v21 = *(_QWORD *)(a4 + 24);
    v41[0] = *(_QWORD *)(a4 + 16);
    v41[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = 1;
  }
  else
  {
    v24 = 0;
    LOBYTE(v41[0]) = 0;
  }
  v42 = v24;
  if (a5)
  {
    v25 = *(_QWORD *)(a5 + 24);
    v39[0] = *(_QWORD *)(a5 + 16);
    v39[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = 1;
  }
  else
  {
    v28 = 0;
    LOBYTE(v39[0]) = 0;
  }
  v40 = v28;
  if (a6)
  {
    v29 = *(_QWORD *)(a6 + 24);
    v37[0] = *(_QWORD *)(a6 + 16);
    v37[1] = v29;
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = 1;
  }
  else
  {
    v32 = 0;
    LOBYTE(v37[0]) = 0;
  }
  v38 = v32;
  mlx::core::block_masked_mm(v44, v43, a3, (uint64_t)v41, (uint64_t)v39, (uint64_t)v37, *(mlx::core **)(a7 + 16), *(unsigned int *)(a7 + 24) | 0x100000000, v45);
  *(_QWORD *)v14 = &off_25134E6E8;
  *(_QWORD *)(v14 + 8) = 1;
  v33 = v45[1];
  *(const void ***)(v14 + 16) = v45[0];
  *(_QWORD *)(v14 + 24) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 1);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  mlx::core::array::~array((mlx::core::array *)v45);
  if (v38)
    mlx::core::array::~array((mlx::core::array *)v37);
  if (v40)
    mlx::core::array::~array((mlx::core::array *)v39);
  if (v42)
    mlx::core::array::~array((mlx::core::array *)v41);
  mlx::core::array::~array((mlx::core::array *)v43);
  mlx::core::array::~array((mlx::core::array *)v44);
  return v14;
}

void sub_242497E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  if ((_BYTE)v7)
    mlx::core::array::~array((mlx::core::array *)va);
  if ((_BYTE)v11)
    mlx::core::array::~array((mlx::core::array *)va1);
  if ((_BYTE)v15)
    mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va4);
  MEMORY[0x2426A82C4](v2, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_broadcast_arrays(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  void **v8;

  v4 = operator new();
  mlx::core::broadcast_arrays((const void ****)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, (uint64_t)&v6);
  *(_QWORD *)v4 = &off_25134E728;
  *(_QWORD *)(v4 + 8) = 1;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v7;
  v6 = 0uLL;
  v7 = 0;
  v8 = (void **)&v6;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v4;
}

void sub_242497F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_broadcast_to(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  const void **v16[2];

  v8 = operator new();
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::broadcast_to((const void ***)(a1 + 16), (const void **)&__p, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v16);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v16[1];
  *(const void ***)(v8 + 16) = v16[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_242498064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_ceil(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::ceil((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242498144(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_clip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  char v22;
  _QWORD v23[2];
  char v24;
  _QWORD v25[2];

  v8 = (_QWORD *)operator new();
  if (a2)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v23[0] = *(_QWORD *)(a2 + 16);
    v23[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = 1;
  }
  else
  {
    v12 = 0;
    LOBYTE(v23[0]) = 0;
  }
  v24 = v12;
  if (a3)
  {
    v13 = *(_QWORD *)(a3 + 24);
    v21[0] = *(_QWORD *)(a3 + 16);
    v21[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = 1;
  }
  else
  {
    v16 = 0;
    LOBYTE(v21[0]) = 0;
  }
  v22 = v16;
  mlx::core::clip((uint64_t *)(a1 + 16), (uint64_t)v23, (uint64_t)v21, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v25);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v17 = v25[1];
  v8[2] = v25[0];
  v8[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  mlx::core::array::~array((mlx::core::array *)v25);
  if (v22)
    mlx::core::array::~array((mlx::core::array *)v21);
  if (v24)
    mlx::core::array::~array((mlx::core::array *)v23);
  return v8;
}

void sub_2424982B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a11)
    mlx::core::array::~array((mlx::core::array *)&a9);
  if (a17)
    mlx::core::array::~array((mlx::core::array *)&a13);
  MEMORY[0x2426A82C4](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_concatenate(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::concatenate((uint64_t *)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_2424983A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_concatenate_all(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::concatenate((const void ****)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249846C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_copy(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 24);
  v12[0] = *(_QWORD *)(a1 + 16);
  v12[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::copy(v12, *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v13);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v8 = v13[1];
  v4[2] = v13[0];
  v4[3] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v12);
  return v4;
}

void sub_24249855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  mlx::core::array::~array((mlx::core::array *)&a9);
  MEMORY[0x2426A82C4](v9, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_cos(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::cos((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249862C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_cosh(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::cosh((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_2424986F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_cummax(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v10 = (_QWORD *)operator new();
  mlx::core::cummax((const void ***)(a1 + 16), a2, a3, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v15);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v15[1];
  v10[2] = v15[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_2424987DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_cummin(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v10 = (_QWORD *)operator new();
  mlx::core::cummin((const void ***)(a1 + 16), a2, a3, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v15);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v15[1];
  v10[2] = v15[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_2424988C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_cumprod(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v10 = (_QWORD *)operator new();
  mlx::core::cumprod((const void ***)(a1 + 16), a2, a3, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v15);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v15[1];
  v10[2] = v15[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_2424989AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_cumsum(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v10 = (_QWORD *)operator new();
  mlx::core::cumsum((const void ***)(a1 + 16), a2, a3, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v15);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v15[1];
  v10[2] = v15[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_242498A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_degrees(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::degrees((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242498B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_depends(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  void **v8;

  v4 = operator new();
  mlx::core::depends((uint64_t **)(a1 + 16), (uint64_t **)(a2 + 16), (uint64_t *)&v6);
  *(_QWORD *)v4 = &off_25134E728;
  *(_QWORD *)(v4 + 8) = 1;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v7;
  v6 = 0uLL;
  v7 = 0;
  v8 = (void **)&v6;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v4;
}

void sub_242498C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

_QWORD *mlx_diag(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::diag((mlx::core::array *)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242498CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_diagonal(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v10 = (_QWORD *)operator new();
  mlx::core::diagonal((mlx::core::array *)(a1 + 16), a2, a3, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v15);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v15[1];
  v10[2] = v15[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_242498DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_divide(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::divide((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242498EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_divmod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v6 = operator new();
  mlx::core::divmod((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (uint64_t *)&v8);
  *(_QWORD *)v6 = &off_25134E728;
  *(_QWORD *)(v6 + 8) = 1;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = v9;
  v8 = 0uLL;
  v9 = 0;
  v10 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v6;
}

void sub_242498F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

_QWORD *mlx_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::equal((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249903C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_erf(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::erf((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242499104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_erfinv(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::erfinv((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_2424991CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_exp(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::exp((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242499294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_expand_dims(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  const void **v16[2];

  v8 = operator new();
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::expand_dims((const void ***)(a1 + 16), (int **)&__p, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v16);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v16[1];
  *(const void ***)(v8 + 16) = v16[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_24249939C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_expm1(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::expm1((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249947C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_eye(int a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v10 = (_QWORD *)operator new();
  mlx::core::eye(a1, a2, a3, mlx_cpp_dtypes[a4], *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v15);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v15[1];
  v10[2] = v15[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_24249956C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_flatten(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::flatten((const void ***)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (uint64_t)v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249964C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_floor(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::floor((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_242499714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_floor_divide(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::floor_divide((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_2424997E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_full(const void *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  _QWORD v22[2];

  v10 = (_QWORD *)operator new();
  v20 = 0;
  v21 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a1, (uint64_t)a1 + 4 * a2, a2);
  v11 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)&v18 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&v18 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::full((uint64_t)&__p, &v18, mlx_cpp_dtypes[a4], *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v22);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v14 = v22[1];
  v10[2] = v22[0];
  v10[3] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)&v18);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_242499924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  mlx::core::array::~array((mlx::core::array *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  MEMORY[0x2426A82C4](v13, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_gather(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, const void *a5, unint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];

  v14 = (_QWORD *)operator new();
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v22, a3, (uint64_t)a3 + 4 * a4, a4);
  __p = 0;
  v20 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a5, (uint64_t)a5 + 4 * a6, a6);
  mlx::core::gather((mlx::core::array *)(a1 + 16), (uint64_t *)(a2 + 16), (int **)&v22, (uint64_t)&__p, *(mlx::core **)(a7 + 16), *(unsigned int *)(a7 + 24) | 0x100000000, v25);
  *v14 = &off_25134E6E8;
  v14[1] = 1;
  v15 = v25[1];
  v14[2] = v25[0];
  v14[3] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  mlx::core::array::~array((mlx::core::array *)v25);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  return v14;
}

void sub_242499A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  MEMORY[0x2426A82C4](v13, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_gather_mm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  const void **v11;
  unint64_t *v12;
  unint64_t v13;
  const void **v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  const void **v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;
  _QWORD v31[2];
  char v32;
  const void **v33[2];
  const void **v34[2];
  const void **v35[2];

  v10 = operator new();
  v11 = *(const void ***)(a1 + 24);
  v34[0] = *(const void ***)(a1 + 16);
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(const void ***)(a2 + 24);
  v33[0] = *(const void ***)(a2 + 16);
  v33[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 1);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (a3)
  {
    v17 = *(_QWORD *)(a3 + 24);
    v31[0] = *(_QWORD *)(a3 + 16);
    v31[1] = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = 1;
  }
  else
  {
    v20 = 0;
    LOBYTE(v31[0]) = 0;
  }
  v32 = v20;
  if (a4)
  {
    v21 = *(_QWORD *)(a4 + 24);
    v29[0] = *(_QWORD *)(a4 + 16);
    v29[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = 1;
  }
  else
  {
    v24 = 0;
    LOBYTE(v29[0]) = 0;
  }
  v30 = v24;
  mlx::core::gather_mm(v34, v33, (uint64_t)v31, (uint64_t)v29, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v35);
  *(_QWORD *)v10 = &off_25134E6E8;
  *(_QWORD *)(v10 + 8) = 1;
  v25 = v35[1];
  *(const void ***)(v10 + 16) = v35[0];
  *(_QWORD *)(v10 + 24) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  mlx::core::array::~array((mlx::core::array *)v35);
  if (v30)
    mlx::core::array::~array((mlx::core::array *)v29);
  if (v32)
    mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v34);
  return v10;
}

void sub_242499C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a11)
    mlx::core::array::~array((mlx::core::array *)&a9);
  if (a17)
    mlx::core::array::~array((mlx::core::array *)&a13);
  mlx::core::array::~array((mlx::core::array *)&a19);
  mlx::core::array::~array((mlx::core::array *)&a23);
  MEMORY[0x2426A82C4](v23, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_greater(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::greater((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242499D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_greater_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::greater_equal((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242499E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_identity(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::identity(a1, mlx_cpp_dtypes[a2], *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_242499F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void **v7;
  unint64_t *v8;
  unint64_t v9;
  const void **v11[2];

  v6 = operator new();
  mlx::core::inner((mlx::core::array *)(a1 + 16), (mlx::core::array *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *(_QWORD *)v6 = &off_25134E6E8;
  *(_QWORD *)(v6 + 8) = 1;
  v7 = v11[1];
  *(const void ***)(v6 + 16) = v11[0];
  *(_QWORD *)(v6 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249A004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_isclose(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[2];

  v12 = (_QWORD *)operator new();
  mlx::core::isclose((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v17, a5, a6);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v17[1];
  v12[2] = v17[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v17);
  return v12;
}

void sub_24249A0FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_isinf(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::isinf((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249A1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_isnan(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::isnan((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249A28C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_isneginf(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::isneginf((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249A354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_isposinf(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::isposinf((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249A41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_left_shift(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::left_shift((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249A4EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_less(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::less((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249A5BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_less_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::less_equal((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249A68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_linspace(int a1, int a2, uint64_t a3, double a4, double a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v10 = (_QWORD *)operator new();
  mlx::core::linspace(a1, mlx_cpp_dtypes[a2], *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v15, *(int ***)&a4, a5);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v15[1];
  v10[2] = v15[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v15);
  return v10;
}

void sub_24249A77C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_log(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::log((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249A844(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_log10(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::log10((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249A90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_log1p(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::log1p((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249A9D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_log2(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::log2((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249AA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_logaddexp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::logaddexp((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249AB6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_logical_and(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::logical_and((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249AC3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_logical_not(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::logical_not((uint64_t *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249AD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_logical_or(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::logical_or((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249ADD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_logsumexp(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = (_QWORD *)operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::logsumexp((uint64_t **)(a1 + 16), (unsigned int **)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v18);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v18[1];
  v10[2] = v18[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24249AEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_logsumexp_all(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::logsumexp((uint64_t **)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249AFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_matmul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void **v7;
  unint64_t *v8;
  unint64_t v9;
  const void **v11[2];

  v6 = operator new();
  mlx::core::matmul((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *(_QWORD *)v6 = &off_25134E6E8;
  *(_QWORD *)(v6 + 8) = 1;
  v7 = v11[1];
  *(const void ***)(v6 + 16) = v11[0];
  *(_QWORD *)(v6 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249B09C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_max(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  uint64_t *v18[2];

  v10 = operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::max((uint64_t **)(a1 + 16), (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v18);
  *(_QWORD *)v10 = &off_25134E6E8;
  *(_QWORD *)(v10 + 8) = 1;
  v11 = v18[1];
  *(uint64_t **)(v10 + 16) = v18[0];
  *(_QWORD *)(v10 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24249B1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_max_all(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v11[2];

  v6 = operator new();
  mlx::core::max((uint64_t **)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *(_QWORD *)v6 = &off_25134E6E8;
  *(_QWORD *)(v6 + 8) = 1;
  v7 = v11[1];
  *(uint64_t **)(v6 + 16) = v11[0];
  *(_QWORD *)(v6 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249B294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_maximum(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::maximum((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249B364(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_mean(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = (_QWORD *)operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::mean((_QWORD *)(a1 + 16), (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v18);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v18[1];
  v10[2] = v18[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24249B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_mean_all(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::mean((_QWORD *)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249B55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_meshgrid(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  std::string __p;
  __int128 v11;
  uint64_t v12;
  void **v13;

  v8 = operator new();
  if (*(char *)(a3 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  else
    __p = *(std::string *)(a3 + 16);
  mlx::core::meshgrid((const void ****)(a1 + 16), a2, (unsigned __int16 *)&__p, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (uint64_t)&v11);
  *(_QWORD *)v8 = &off_25134E728;
  *(_QWORD *)(v8 + 8) = 1;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v12;
  v11 = 0uLL;
  v12 = 0;
  v13 = (void **)&v11;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_24249B674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x2426A82C4](v14, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_min(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  uint64_t *v18[2];

  v10 = operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::min((uint64_t **)(a1 + 16), (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, v18);
  *(_QWORD *)v10 = &off_25134E6E8;
  *(_QWORD *)(v10 + 8) = 1;
  v11 = v18[1];
  *(uint64_t **)(v10 + 16) = v18[0];
  *(_QWORD *)(v10 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24249B79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_min_all(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v11[2];

  v6 = operator new();
  mlx::core::min((uint64_t **)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *(_QWORD *)v6 = &off_25134E6E8;
  *(_QWORD *)(v6 + 8) = 1;
  v7 = v11[1];
  *(uint64_t **)(v6 + 16) = v11[0];
  *(_QWORD *)(v6 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249B884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_minimum(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::minimum((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249B954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_moveaxis(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::moveaxis((uint64_t **)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249BA34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_multiply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::multiply((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249BB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_negative(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::negative((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249BBCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_not_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::not_equal((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249BC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_number_of_elements(uint64_t a1, const void *a2, unint64_t a3, char a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::number_of_elements((_QWORD *)(a1 + 16), (int **)&__p, a4, mlx_cpp_dtypes[a5], *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249BDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_ones(const void *a1, unint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = (_QWORD *)operator new();
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a1, (uint64_t)a1 + 4 * a2, a2);
  mlx::core::ones((uint64_t)&__p, mlx_cpp_dtypes[a3], *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v16);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v16[1];
  v8[2] = v16[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_24249BEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_ones_like(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::ones_like((uint64_t *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249BFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_outer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::outer((const void ***)(a1 + 16), (const void ***)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249C09C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_pad(uint64_t a1, const void *a2, unint64_t a3, const void *a4, unint64_t a5, const void *a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[2];

  v17 = (_QWORD *)operator new();
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v28, a2, (uint64_t)a2 + 4 * a3, a3);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v25, a4, (uint64_t)a4 + 4 * a5, a5);
  __p = 0;
  v23 = 0;
  v24 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a6, (uint64_t)a6 + 4 * a7, a7);
  mlx::core::pad((const void ***)(a1 + 16), (uint64_t *)&v28, (uint64_t *)&v25, (uint64_t *)&__p, (_QWORD *)(a8 + 16), *(mlx::core **)(a9 + 16), *(unsigned int *)(a9 + 24) | 0x100000000, v31);
  *v17 = &off_25134E6E8;
  v17[1] = 1;
  v18 = v31[1];
  v17[2] = v31[0];
  v17[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  mlx::core::array::~array((mlx::core::array *)v31);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return v17;
}

void sub_24249C22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  MEMORY[0x2426A82C4](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_partition(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::partition((mlx::core::array *)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249C354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_partition_all(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::partition((const void ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249C424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_power(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::power((const void ***)(a1 + 16), (const void ***)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249C4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_prod(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = (_QWORD *)operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::prod(a1 + 16, (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, (mlx::core::array *)v18);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v18[1];
  v10[2] = v18[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24249C604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_prod_all(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::prod(a1 + 16, a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (mlx::core::array *)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249C6EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_radians(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::radians((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249C7B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_reciprocal(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::reciprocal((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249C87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_remainder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::remainder((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249C94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_repeat(uint64_t a1, std::vector<int>::value_type a2, mlx::core *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::repeat(a3, (const void ***)(a1 + 16), a2, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (uint64_t)v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249CA2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_repeat_all(uint64_t a1, std::vector<int>::value_type a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::repeat((const void ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (uint64_t)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249CAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_reshape(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  const void **v16[2];

  v8 = operator new();
  v14 = 0;
  v15 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::reshape((const void ***)(a1 + 16), (uint64_t)&__p, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v16);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v16[1];
  *(const void ***)(v8 + 16) = v16[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_24249CC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_right_shift(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::right_shift((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249CCEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_round(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::round((int ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249CDBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_rsqrt(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::rsqrt((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249CE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_scatter(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a4, (uint64_t)a4 + 4 * a5, a5);
  mlx::core::scatter((mlx::core::array *)(a1 + 16), (const void ****)(a2 + 16), (mlx::core::array *)(a3 + 16), (int **)&__p, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249CFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_scatter_add(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a4, (uint64_t)a4 + 4 * a5, a5);
  mlx::core::scatter_add((mlx::core::array *)(a1 + 16), (const void ****)(a2 + 16), (mlx::core::array *)(a3 + 16), (int **)&__p, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249D0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_scatter_max(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a4, (uint64_t)a4 + 4 * a5, a5);
  mlx::core::scatter_max((mlx::core::array *)(a1 + 16), (const void ****)(a2 + 16), (mlx::core::array *)(a3 + 16), (int **)&__p, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249D214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_scatter_min(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a4, (uint64_t)a4 + 4 * a5, a5);
  mlx::core::scatter_min((mlx::core::array *)(a1 + 16), (const void ****)(a2 + 16), (mlx::core::array *)(a3 + 16), (int **)&__p, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249D34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_scatter_prod(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a4, (uint64_t)a4 + 4 * a5, a5);
  mlx::core::scatter_prod((mlx::core::array *)(a1 + 16), (const void ****)(a2 + 16), (mlx::core::array *)(a3 + 16), (int **)&__p, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249D484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sigmoid(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::sigmoid((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249D564(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sign(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::sign((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249D62C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sin(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::sin((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249D6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sinh(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::sinh((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249D7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_slice(uint64_t a1, const void *a2, unint64_t a3, const void *a4, unint64_t a5, const void *a6, unint64_t a7, uint64_t a8)
{
  uint64_t v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  const void **v30[2];

  v16 = operator new();
  v28 = 0;
  v29 = 0;
  v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v27, a2, (uint64_t)a2 + 4 * a3, a3);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v24, a4, (uint64_t)a4 + 4 * a5, a5);
  __p = 0;
  v22 = 0;
  v23 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a6, (uint64_t)a6 + 4 * a7, a7);
  mlx::core::slice((const void ***)(a1 + 16), (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&__p, *(mlx::core **)(a8 + 16), *(unsigned int *)(a8 + 24) | 0x100000000, v30);
  *(_QWORD *)v16 = &off_25134E6E8;
  *(_QWORD *)(v16 + 8) = 1;
  v17 = v30[1];
  *(const void ***)(v16 + 16) = v30[0];
  *(_QWORD *)(v16 + 24) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  mlx::core::array::~array((mlx::core::array *)v30);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  return v16;
}

void sub_24249D944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  MEMORY[0x2426A82C4](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_slice_update(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, const void *a5, unint64_t a6, const void *a7, unint64_t a8, uint64_t a9)
{
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[2];

  v17 = (_QWORD *)operator new();
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v28, a3, (uint64_t)a3 + 4 * a4, a4);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v25, a5, (uint64_t)a5 + 4 * a6, a6);
  __p = 0;
  v23 = 0;
  v24 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a7, (uint64_t)a7 + 4 * a8, a8);
  mlx::core::slice_update((_QWORD *)(a1 + 16), (const void ***)(a2 + 16), (uint64_t)&v28, (uint64_t)&v25, (uint64_t)&__p, *(mlx::core **)(a9 + 16), *(unsigned int *)(a9 + 24) | 0x100000000, v31);
  *v17 = &off_25134E6E8;
  v17[1] = 1;
  v18 = v31[1];
  v17[2] = v31[0];
  v17[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  mlx::core::array::~array((mlx::core::array *)v31);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return v17;
}

void sub_24249DB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  MEMORY[0x2426A82C4](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sort(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::sort((mlx::core::array *)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249DC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sort_all(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::sort((const void ***)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249DCFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_split_equal_parts(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  void **v12;

  v8 = operator new();
  mlx::core::split((mlx::core::array *)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (uint64_t *)&v10);
  *(_QWORD *)v8 = &off_25134E728;
  *(_QWORD *)(v8 + 8) = 1;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = v11;
  v10 = 0uLL;
  v11 = 0;
  v12 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v12);
  return v8;
}

void sub_24249DDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_split(uint64_t a1, const void *a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void **v17;

  v10 = operator new();
  __p = 0;
  v13 = 0;
  v14 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::split((int **)(a1 + 16), (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, (uint64_t *)&v15);
  *(_QWORD *)v10 = &off_25134E728;
  *(_QWORD *)(v10 + 8) = 1;
  *(_OWORD *)(v10 + 16) = v15;
  *(_QWORD *)(v10 + 32) = v16;
  v15 = 0uLL;
  v16 = 0;
  v17 = (void **)&v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24249DEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sqrt(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::sqrt((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249DFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_square(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::square((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249E08C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_squeeze(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  const void **v16[2];

  v8 = operator new();
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::squeeze((mlx::core::array *)(a1 + 16), (unsigned int **)&__p, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v16);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v16[1];
  *(const void ***)(v8 + 16) = v16[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_24249E194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_squeeze_all(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void **v5;
  unint64_t *v6;
  unint64_t v7;
  const void **v9[2];

  v4 = operator new();
  mlx::core::squeeze((mlx::core::array *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *(_QWORD *)v4 = &off_25134E6E8;
  *(_QWORD *)(v4 + 8) = 1;
  v5 = v9[1];
  *(const void ***)(v4 + 16) = v9[0];
  *(_QWORD *)(v4 + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249E274(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_stack(uint64_t a1, mlx::core *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::stack((const void ****)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249E344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_stack_all(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::stack((const void ****)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249E40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_std(uint64_t a1, const void *a2, unint64_t a3, char a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::std((_QWORD *)(a1 + 16), (uint64_t)&__p, a4, a5, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249E52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_std_all(uint64_t a1, char a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::std((_QWORD *)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249E624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_stop_gradient(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::stop_gradient((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249E6EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_subtract(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::subtract((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249E7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sum(uint64_t a1, const void *a2, unint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = (_QWORD *)operator new();
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::sum(a1 + 16, (uint64_t)&__p, a4, *(mlx::core **)(a5 + 16), *(unsigned int *)(a5 + 24) | 0x100000000, (mlx::core::array *)v18);
  *v10 = &off_25134E6E8;
  v10[1] = 1;
  v11 = v18[1];
  v10[2] = v18[0];
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24249E8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_sum_all(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::sum(a1 + 16, a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (mlx::core::array *)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249E9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_swapaxes(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::swapaxes((uint64_t **)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249EA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_take(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  const void **v13[2];

  v8 = operator new();
  mlx::core::take((mlx::core::array *)(a1 + 16), (uint64_t *)(a2 + 16), a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v13[1];
  *(const void ***)(v8 + 16) = v13[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249EB74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_take_all(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void **v7;
  unint64_t *v8;
  unint64_t v9;
  const void **v11[2];

  v6 = operator new();
  mlx::core::take((const void ***)(a1 + 16), (uint64_t *)(a2 + 16), *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, v11);
  *(_QWORD *)v6 = &off_25134E6E8;
  *(_QWORD *)(v6 + 8) = 1;
  v7 = v11[1];
  *(const void ***)(v6 + 16) = v11[0];
  *(_QWORD *)(v6 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249EC44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_take_along_axis(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  const void **v13[2];

  v8 = operator new();
  mlx::core::take_along_axis((mlx::core::array *)(a1 + 16), (_QWORD *)(a2 + 16), a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v13[1];
  *(const void ***)(v8 + 16) = v13[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249ED24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_tan(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::tan((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249EDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_tanh(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::tanh((_QWORD *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249EEB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_tensordot(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, const void *a5, unint64_t a6, uint64_t a7)
{
  uint64_t v14;
  const void **v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  const void **v25[2];

  v14 = operator new();
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v22, a3, (uint64_t)a3 + 4 * a4, a4);
  __p = 0;
  v20 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a5, (uint64_t)a5 + 4 * a6, a6);
  mlx::core::tensordot((mlx::core::array *)(a1 + 16), (mlx::core::array *)(a2 + 16), (unsigned int **)&v22, (unsigned int **)&__p, *(mlx::core **)(a7 + 16), *(unsigned int *)(a7 + 24) | 0x100000000, v25);
  *(_QWORD *)v14 = &off_25134E6E8;
  *(_QWORD *)(v14 + 8) = 1;
  v15 = v25[1];
  *(const void ***)(v14 + 16) = v25[0];
  *(_QWORD *)(v14 + 24) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  mlx::core::array::~array((mlx::core::array *)v25);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  return v14;
}

void sub_24249F004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  MEMORY[0x2426A82C4](v13, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_tensordot_along_axis(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  const void **v13[2];

  v8 = operator new();
  mlx::core::tensordot((mlx::core::array *)(a1 + 16), (mlx::core::array *)(a2 + 16), a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v13[1];
  *(const void ***)(v8 + 16) = v13[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249F114(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_tile(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  std::vector<int> __p;
  const void **v14[2];

  v8 = operator new();
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::tile((const void ***)(a1 + 16), &__p, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v14);
  *(_QWORD *)v8 = &off_25134E6E8;
  *(_QWORD *)(v8 + 8) = 1;
  v9 = v14[1];
  *(const void ***)(v8 + 16) = v14[0];
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v14);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return v8;
}

void sub_24249F21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_topk(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::topk((mlx::core::array *)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, (uint64_t)v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249F314(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_topk_all(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = (_QWORD *)operator new();
  mlx::core::topk((const void ***)(a1 + 16), a2, *(mlx::core **)(a3 + 16), *(unsigned int *)(a3 + 24) | 0x100000000, (uint64_t)v11);
  *v6 = &off_25134E6E8;
  v6[1] = 1;
  v7 = v11[1];
  v6[2] = v11[0];
  v6[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  mlx::core::array::~array((mlx::core::array *)v11);
  return v6;
}

void sub_24249F3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_trace(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[2];

  v12 = (_QWORD *)operator new();
  mlx::core::trace((mlx::core::array *)(a1 + 16), a2, a3, a4, mlx_cpp_dtypes[a5], *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, (mlx::core::array *)v17);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v17[1];
  v12[2] = v17[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v17);
  return v12;
}

void sub_24249F4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_transpose(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = (_QWORD *)operator new();
  v14 = 0;
  v15 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::transpose((uint64_t **)(a1 + 16), (unsigned int **)&__p, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v16);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v16[1];
  v8[2] = v16[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_24249F5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_transpose_all(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::transpose((uint64_t **)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249F6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_var(uint64_t a1, const void *a2, unint64_t a3, char a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v12 = (_QWORD *)operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a2, (uint64_t)a2 + 4 * a3, a3);
  mlx::core::var((_QWORD *)(a1 + 16), (uint64_t)&__p, a4, a5, *(mlx::core **)(a6 + 16), *(unsigned int *)(a6 + 24) | 0x100000000, v20);
  *v12 = &off_25134E6E8;
  v12[1] = 1;
  v13 = v20[1];
  v12[2] = v20[0];
  v12[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24249F7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_var_all(uint64_t a1, char a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::var((_QWORD *)(a1 + 16), a2, a3, *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249F8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_where(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v8 = (_QWORD *)operator new();
  mlx::core::where((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16), (_QWORD *)(a3 + 16), *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v13);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v13[1];
  v8[2] = v13[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v13);
  return v8;
}

void sub_24249F9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_zeros(const void *a1, unint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = (_QWORD *)operator new();
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, a1, (uint64_t)a1 + 4 * a2, a2);
  mlx::core::zeros((uint64_t)&__p, mlx_cpp_dtypes[a3], *(mlx::core **)(a4 + 16), *(unsigned int *)(a4 + 24) | 0x100000000, v16);
  *v8 = &off_25134E6E8;
  v8[1] = 1;
  v9 = v16[1];
  v8[2] = v16[0];
  v8[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_24249FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426A82C4](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *mlx_zeros_like(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v4 = (_QWORD *)operator new();
  mlx::core::zeros_like((uint64_t *)(a1 + 16), *(mlx::core **)(a2 + 16), *(unsigned int *)(a2 + 24) | 0x100000000, v9);
  *v4 = &off_25134E6E8;
  v4[1] = 1;
  v5 = v9[1];
  v4[2] = v9[0];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::array::~array((mlx::core::array *)v9);
  return v4;
}

void sub_24249FBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A82C4](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24249FC34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *mlx_closure_::tostring(mlx_closure_ *this)
{
  _QWORD *v1;
  std::string *v2;
  void *__p[2];
  uint64_t v5;

  v1 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "mlx_vector_array closure(mlx_vector_array, void*)");
  *v1 = &off_25134DAE8;
  v1[1] = 1;
  v2 = (std::string *)(v1 + 2);
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v1[4] = v5;
  }
  return v1;
}

void sub_24249FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x2426A82C4](v15, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

_QWORD *mlx_closure_new(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_251350058;
  result[1] = 1;
  result[2] = &off_2513500D8;
  result[5] = result + 2;
  result[3] = a1;
  return result;
}

_QWORD *mlx_closure_new_unary(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_251350058;
  result[1] = 1;
  result[2] = &off_251350158;
  result[5] = result + 2;
  result[3] = a1;
  return result;
}

_QWORD *mlx_closure_new_with_payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(&v21, a2, a3);
  v6 = v21;
  v5 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (_QWORD *)operator new();
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v24 = 0;
  v12 = operator new(0x28uLL);
  *v12 = &off_251350258;
  v12[1] = a1;
  v12[2] = v6;
  v12[3] = v5;
  v12[4] = a3;
  v24 = v12;
  *v9 = &off_251350058;
  v9[1] = 1;
  v9[5] = std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone((uint64_t)v12);
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
    goto LABEL_11;
  }
  if (v24)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  if (v5)
  {
    v15 = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v9;
}

void sub_24249FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == &a20)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v24);
  MEMORY[0x2426A82C4](v23, 0x10A1C40E41A338ALL);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t mlx_closure_apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  char **v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(&v5, v2, a2 + 16);
  v3 = operator new();
  *(_QWORD *)v3 = &off_25134E728;
  *(_QWORD *)(v3 + 8) = 1;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)(v3 + 16), v5, v6, (v6 - v5) >> 4);
  v7 = &v5;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  return v3;
}

void sub_2424A00C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  MEMORY[0x2426A82C4](v12, 0x10A1C405897D53FLL);
  a12 = (void **)&a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t mlx_closure_value_and_grad_apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5[3];
  uint64_t v6;
  void **v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v5, v2, a2 + 16);
  v3 = operator new();
  mlx_vector_vector_array_::mlx_vector_vector_array_(v3, v5);
  v7 = (void **)&v6;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)v5;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v7);
  return v3;
}

void sub_2424A0184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2426A82C4](v2, 0x10A1C405897D53FLL);
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::~pair((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *mlx_closure_value_and_grad_::tostring(mlx_closure_value_and_grad_ *this)
{
  _QWORD *v1;
  std::string *v2;
  void *__p[2];
  uint64_t v5;

  v1 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "mlx_vector_vector_array closure(mlx_vector_array, void*)");
  *v1 = &off_25134DAE8;
  v1[1] = 1;
  v2 = (std::string *)(v1 + 2);
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v1[4] = v5;
  }
  return v1;
}

void sub_2424A0254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x2426A82C4](v15, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

void mlx_closure_::~mlx_closure_(mlx_closure_ *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251350058;
  v1 = (char *)this + 16;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251350058;
  v1 = (char *)this + 16;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

void mlx_closure_value_and_grad_::~mlx_closure_value_and_grad_(mlx_closure_value_and_grad_ *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251350098;
  v1 = (char *)this + 16;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251350098;
  v1 = (char *)this + 16;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

void std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2513500D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2513500D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = operator new();
  *(_QWORD *)v6 = &off_25134E728;
  *(_QWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)(v6 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v7 = (*(uint64_t (**)(uint64_t))(a1 + 8))(v6);
  mlx_free(v6);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a3, *(_QWORD **)(v7 + 16), *(_QWORD **)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 4);
  return mlx_free(v7);
}

void sub_2424A0540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251350158;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251350158;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  void *exception;
  _QWORD v23[3];
  char v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "closure: expected unary input");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v6 = (_QWORD *)operator new();
  v7 = (uint64_t)v6;
  v8 = **a2;
  v9 = (*a2)[1];
  v23[0] = v8;
  v23[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *v6 = &off_25134E6E8;
    v6[1] = 1;
    v6[2] = v8;
    v6[3] = v9;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    *v6 = &off_25134E6E8;
    v6[1] = 1;
    v6[2] = v8;
    v6[3] = 0;
  }
  mlx::core::array::~array((mlx::core::array *)v23);
  v13 = (*(uint64_t (**)(uint64_t))(a1 + 8))(v7);
  mlx_free(v7);
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  v25[0] = v15;
  v25[1] = v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v23[2] = a3;
  v24 = 0;
  v18 = operator new(0x10uLL);
  *a3 = v18;
  a3[1] = v18;
  a3[2] = v18 + 2;
  *v18 = v15;
  v18[1] = v14;
  if (v14)
  {
    v19 = (unint64_t *)(v14 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  a3[1] = v18 + 2;
  mlx::core::array::~array((mlx::core::array *)v25);
  return mlx_free(v13);
}

void sub_2424A07E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

_QWORD *std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_2513501D8;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_2424A08D8(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_2424A08EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

_QWORD *std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_251350258;
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_251350258;
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x2426A82C4);
}

char *std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_251350258;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_251350258;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  return result;
}

uint64_t std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = operator new();
  *(_QWORD *)v6 = &off_25134E728;
  *(_QWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)(v6 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(v6, *(_QWORD *)(a1 + 16));
  mlx_free(v6);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a3, *(_QWORD **)(v7 + 16), *(_QWORD **)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 4);
  return mlx_free(v7);
}

void sub_2424A0B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

uint64_t mlx::core::random::threefry2x32_hash(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _DWORD v9[3];
  uint64_t v10;

  v2 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v4 = *a1 ^ v3 ^ 0x1BD11BDA;
  v9[0] = *a1;
  v9[1] = v3;
  v9[2] = v4;
  LODWORD(v5) = v9[0] + a2;
  LODWORD(v6) = v3 + HIDWORD(a2);
  do
  {
    for (i = 0; i != 16; i += 4)
    {
      LODWORD(v5) = v6 + v5;
      LODWORD(v6) = __ROR4__(v6, -mlx::core::random::threefry2x32_hash(std::pair<unsigned int,unsigned int> const&,std::pair<unsigned int,unsigned int>)::rotations[16 * (v2 & 1) + i]) ^ v5;
    }
    v5 = (v9[(v2 + 1) % 3u] + v5);
    v6 = (v2 + 1 + v6 + v9[(v2 + 2) % 3u]);
    ++v2;
  }
  while (v2 != 5);
  return v5 | (v6 << 32);
}

uint64_t mlx::core::Event::Event(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 850045863;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 72) = 1018212795;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)&v11 = v5;
  v6 = (_QWORD *)operator new();
  *v6 = &off_2513502D8;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = v5;
  *((_QWORD *)&v11 + 1) = v6;
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v4, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_2424A0E18(void *a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::condition_variable *v3;

  __cxa_begin_catch(a1);
  std::condition_variable::~condition_variable(v3);
  std::mutex::~mutex(v2);
  MEMORY[0x2426A82C4](v1, 0x1000C40A9FC9F90);
  __cxa_rethrow();
}

void sub_2424A0E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void mlx::core::Event::wait(mlx::core::Event *this)
{
  uint64_t v2;
  unint64_t v3;
  std::unique_lock<std::mutex> v4;

  v2 = *((_QWORD *)this + 2);
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v2 + 8));
  v3 = *((_QWORD *)this + 4);
  if (*(_QWORD *)v2 >= v3)
    goto LABEL_4;
  do
    std::condition_variable::wait((std::condition_variable *)(v2 + 72), &v4);
  while (*(_QWORD *)v2 < v3);
  if (v4.__owns_)
LABEL_4:
    std::mutex::unlock(v4.__m_);
}

void mlx::core::Event::signal(mlx::core::Event *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  std::mutex::lock((std::mutex *)(v2 + 8));
  *(_QWORD *)v2 = *((_QWORD *)this + 4);
  std::mutex::unlock((std::mutex *)(v2 + 8));
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 72));
}

void std::__shared_ptr_pointer<mlx::core::EventCounter *,mlx::core::Event::Event(mlx::core::Stream const&)::$_0,std::allocator<mlx::core::EventCounter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_pointer<mlx::core::EventCounter *,mlx::core::Event::Event(mlx::core::Stream const&)::$_0,std::allocator<mlx::core::EventCounter>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 72));
    std::mutex::~mutex((std::mutex *)(v1 + 8));
    JUMPOUT(0x2426A82C4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<mlx::core::EventCounter *,mlx::core::Event::Event(mlx::core::Stream const&)::$_0,std::allocator<mlx::core::EventCounter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void mlx::core::QRF::eval(uint64_t a1, const void ****a2, int ****a3)
{
  void *exception;

  if (*((_DWORD *)**a2 + 14) != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[QRF::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mlx::core::qrf_impl<float>(*a2, *a3, *a3 + 2);
}

void sub_2424A1058(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::qrf_impl<float>(const void ***a1, int ***a2, int ***a3)
{
  const void **v4;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  mlx::core::scheduler *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  mlx::core::allocator *v27;
  int ***v28;
  uint64_t v29;
  uint64_t v30;
  mlx::core::scheduler *v31;
  _QWORD *v32;
  uint64_t v33;
  int **v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  mlx::core::scheduler *v45;
  _QWORD *v46;
  uint64_t v47;
  int ***v48;
  mlx::core::allocator *v49;
  int v50;
  int v51;
  float v52;
  __n128 v53;
  uint64_t v54;
  void *v55;
  _BYTE *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  void *__p[3];
  uint64_t v62[2];
  mlx::core::allocator *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if ((unint64_t)((_BYTE *)v4[1] - (_BYTE *)*v4) <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v7 = v4[1];
  v8 = *(v7 - 2);
  v67 = v8;
  v9 = *(v7 - 1);
  if (v8 <= v9)
    v10 = v9;
  else
    v10 = v8;
  v65 = v10;
  v66 = v9;
  v11 = (unint64_t)v4[6];
  v12 = v9 * v8;
  v13 = v11 / v12;
  if (v9 >= v8)
    v9 = v8;
  v64 = v9;
  v63 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * v13 * v9));
  v14 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v14, (uint64_t)v14[1], ((_BYTE *)v14[1] - (_BYTE *)*v14) >> 2);
  v60 = 0uLL;
  v59 = 0;
  v58 = 0uLL;
  mlx::core::array::array(v62, (__int128 *)__p, 0x400000006, &v60, &v58);
  v55 = &v58;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v48 = a3;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v18 = *(_BYTE *)(v62[0] + 168);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v55, *(const void **)(v62[0] + 24), *(_QWORD *)(v62[0] + 32), (uint64_t)(*(_QWORD *)(v62[0] + 32) - *(_QWORD *)(v62[0] + 24)) >> 3);
  v19 = v62[0];
  v20 = (char *)v55 + 2 * (*(_QWORD *)(v62[0] + 8) - *(_QWORD *)v62[0]);
  v21 = v67;
  *((_QWORD *)v20 - 2) = 1;
  *((_QWORD *)v20 - 1) = v21;
  v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(v19 + 60)
                                                                    * *(_QWORD *)(v19 + 48)));
  v24 = *(_QWORD *)(v62[0] + 48);
  v23 = *(_QWORD *)(v62[0] + 56);
  v54 = 0;
  v53 = 0uLL;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v53, v55, (uint64_t)v56, (v56 - (_BYTE *)v55) >> 3);
  v72[0] = &unk_2513463C8;
  v72[1] = mlx::core::allocator::free;
  v73 = v72;
  mlx::core::array::set_data(v62, (uint64_t)v22, BYTE4(v23) * v24, &v53, v18 & 0xF9 | (4 * (v13 == 1)), (uint64_t)v72);
  v25 = v73;
  if (v73 == v72)
  {
    v26 = 4;
    v25 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_19;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_19:
  if (v53.n128_u64[0])
  {
    v53.n128_u64[1] = v53.n128_u64[0];
    operator delete((void *)v53.n128_u64[0]);
  }
  mlx::core::copy_inplace(a1, v62, 3);
  v52 = 0.0;
  v50 = 0;
  sgeqrf_NEWLAPACK();
  v51 = (int)0.0;
  v27 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)0.0));
  v28 = v48;
  v49 = v27;
  if (v11 >= v12)
  {
    v29 = 0;
    if (v13 <= 1)
      v30 = 1;
    else
      v30 = v11 / v12;
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v63);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v49);
      sgeqrf_NEWLAPACK();
      ++v29;
    }
    while (v30 != v29);
    v28 = v48;
    v27 = v49;
  }
  mlx::core::allocator::free(v27);
  v31 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*v28 + 60) * (_QWORD)(*v28)[6]));
  v70[0] = &unk_2513463C8;
  v70[1] = mlx::core::allocator::free;
  v71 = v70;
  mlx::core::array::set_data(v28, (uint64_t)v31, (uint64_t)v70);
  v32 = v71;
  if (v71 == v70)
  {
    v33 = 4;
    v32 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_32;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_32:
  mlx::core::copy_inplace(v62, v28, 2);
  if (v11 >= v12)
  {
    v34 = *v28;
    if ((unint64_t)((char *)(*v28)[1] - (char *)**v28) < 5)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v35 = 0;
    v36 = *((*v28)[1] - 2);
    if (v13 <= 1)
      v37 = 1;
    else
      v37 = v11 / v12;
    do
    {
      if (v36 >= 1)
      {
        v38 = 0;
        v39 = v66;
        v40 = v67 * v66 * v35;
        do
        {
          if (v38)
          {
            v41 = 0;
            v42 = v34[19];
            do
              v42[v40 + (int)v41++] = 0;
            while (v38 != v41);
          }
          ++v38;
          v40 += v39;
        }
        while (v38 != (v36 & ~(v36 >> 31)));
      }
      ++v35;
    }
    while (v35 != v37);
  }
  v51 = -1;
  sorgqr_NEWLAPACK();
  v51 = (int)v52;
  v49 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)v52));
  if (v11 >= v12)
  {
    v43 = 0;
    if (v13 <= 1)
      v44 = 1;
    else
      v44 = v11 / v12;
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v63);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v49);
      sorgqr_NEWLAPACK();
      ++v43;
    }
    while (v44 != v43);
  }
  v45 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60) * (_QWORD)(*a2)[6]));
  v68[0] = &unk_2513463C8;
  v68[1] = mlx::core::allocator::free;
  v69 = v68;
  mlx::core::array::set_data(a2, (uint64_t)v45, (uint64_t)v68);
  v46 = v69;
  if (v69 == v68)
  {
    v47 = 4;
    v46 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_54;
    v47 = 5;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v47))(v46);
LABEL_54:
  mlx::core::copy_inplace(v62, a2, 2);
  mlx::core::allocator::free(v49);
  mlx::core::allocator::free(v63);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  mlx::core::array::~array((mlx::core::array *)v62);
}

void sub_2424A1674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a30);
  _Unwind_Resume(a1);
}

void mlx::core::Primitive::jvp(uint64_t a1)
{
  std::logic_error *exception;
  std::string v3;
  uint64_t v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::jvp] Not implemented for ", 37);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)".", 1);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
}

void sub_2424A1840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  int v34;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      a17 = MEMORY[0x24BEDB848] + 16;
      if (a30 < 0)
        operator delete(a25);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2426A8294](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::Primitive::vjp(uint64_t a1)
{
  std::logic_error *exception;
  std::string v3;
  uint64_t v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::vip] Not implemented for ", 37);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)".", 1);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
}

void sub_2424A19A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  int v34;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      a17 = MEMORY[0x24BEDB848] + 16;
      if (a30 < 0)
        operator delete(a25);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2426A8294](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::Primitive::vmap(uint64_t a1)
{
  std::logic_error *exception;
  std::string v3;
  uint64_t v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::vmap] Not implemented for ", 38);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)".", 1);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
}

void sub_2424A1B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  int v34;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      a17 = MEMORY[0x24BEDB848] + 16;
      if (a30 < 0)
        operator delete(a25);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2426A8294](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::Primitive::output_shapes(uint64_t a1)
{
  std::logic_error *exception;
  std::string v3;
  uint64_t v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::output_shapes] ", 27);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)" cannot infer output shapes.", 28);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
}

void sub_2424A1C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  int v34;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      a17 = MEMORY[0x24BEDB848] + 16;
      if (a30 < 0)
        operator delete(a25);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2426A8294](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

uint64_t mlx::core::Abs::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Abs::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Abs::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Abs::jvp();
  v6 = *a3;
  v7 = a1 + 8;
  mlx::core::sign(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v6, v12, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12[2] = a5;
  v13 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v14[1];
  *v8 = v14[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424A1E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Abs::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Abs::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Abs::vmap();
  mlx::core::abs(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A1F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Add::jvp(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 < 0x11uLL)
  {
    v6 = v5[1];
    v13 = *v5;
    v14 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    mlx::core::add(v5, v5 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v13);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v9 = operator new(0x10uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 2;
  v10 = v14;
  *v9 = v13;
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a3[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)&v13);
}

void sub_2424A2090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

void mlx::core::Add::vjp(uint64_t **a1@<X2>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t i;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 == 4)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a3, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  }
  else
  {
    v4 = **a1;
    v5 = (*a1)[1];
    v19[0] = v4;
    v19[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = (*a1)[1];
      v20 = **a1;
      v21 = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v20 = v4;
      v21 = 0;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v11 = operator new(0x20uLL);
    v12 = 0;
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v11;
    *(_QWORD *)(a3 + 16) = v11 + 4;
    do
    {
      v13 = &v19[2 * v12];
      v15 = *v13;
      v14 = v13[1];
      *v11 = v15;
      v11[1] = v14;
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      ++v12;
      v11 += 2;
    }
    while (v12 != 2);
    *(_QWORD *)(a3 + 8) = v11;
    for (i = 2; i != -2; i -= 2)
      mlx::core::array::~array((mlx::core::array *)&v19[i]);
  }
}

void sub_2424A2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t i;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a12 + i));
  _Unwind_Resume(a1);
}

void mlx::core::Add::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::add(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424A23A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::`anonymous namespace'::vmap_binary_op(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v39;
  std::vector<int>::pointer v40;
  int *v41;
  char *v42;
  std::vector<int>::const_iterator v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  void *__p;
  void *v61;
  uint64_t v62;
  __int128 v63;
  std::vector<int> v64;
  __int128 v65;
  const void **v66[2];
  std::vector<int>::value_type __x;
  mlx::core *v68;
  int v69;
  int v70;
  __int128 v71;
  __int128 v72;

  v5 = *(_QWORD **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 != 32)
  v6 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 8)
  if (*v6 == -1 && v6[1] == -1)
  {
    v54 = v5[1];
    *(_QWORD *)a4 = *v5;
    *(_QWORD *)(a4 + 8) = v54;
    if (v54)
    {
      v55 = (unint64_t *)(v54 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v57 = v5[3];
    *(_QWORD *)(a4 + 16) = v5[2];
    *(_QWORD *)(a4 + 24) = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    *(_DWORD *)(a4 + 32) = -1;
  }
  else
  {
    v8 = *v5;
    v9 = v5[1];
    *(_QWORD *)&v72 = *v5;
    *((_QWORD *)&v72 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v5 = *(_QWORD **)a1;
    }
    v13 = (_QWORD *)v5[2];
    v12 = v5[3];
    *(_QWORD *)&v71 = v13;
    *((_QWORD *)&v71 + 1) = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2;
    v18 = **a2;
    v17 = (*a2)[1];
    if (v18 == -1)
      v19 = v16 + 1;
    else
      v19 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2;
    v20 = (uint64_t)(v13[1] - *v13) >> 2;
    if (v17 == -1)
      v21 = v20 + 1;
    else
      v21 = v20;
    if (v19 <= v21)
      v22 = v21;
    else
      v22 = v19;
    v68 = *(mlx::core **)a3;
    v69 = *(_DWORD *)(a3 + 8);
    v70 = v22;
    __x = v17 + v22 - v20;
    v66[0] = (const void **)v8;
    v66[1] = *((const void ***)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(_OWORD *)&v64.__begin_;
    v64.__begin_ = 0;
    v64.__end_ = 0;
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    v72 = v25;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v64);
    mlx::core::array::~array((mlx::core::array *)v66);
    v65 = v71;
    if (*((_QWORD *)&v71 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = v18 + v22 - v16;
    v32 = *(_OWORD *)&v64.__begin_;
    v64.__begin_ = 0;
    v64.__end_ = 0;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    v71 = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v64);
    mlx::core::array::~array((mlx::core::array *)&v65);
    v36 = __x;
    if (__x != v31)
    {
      std::vector<int>::vector(&v64, (uint64_t)(*(_QWORD *)(v71 + 8) - *(_QWORD *)v71) >> 2);
      begin = v64.__begin_;
      end = v64.__end_;
      if (v64.__begin_ != v64.__end_)
      {
        v39 = 0;
        v40 = v64.__begin_;
        do
          *v40++ = v39++;
        while (v40 != end);
      }
      v41 = &begin[v36];
      v42 = (char *)((char *)end - (char *)(v41 + 1));
      if (end != v41 + 1)
      {
        memmove(v41, v41 + 1, (char *)end - (char *)(v41 + 1));
        begin = v64.__begin_;
      }
      v64.__end_ = (std::vector<int>::pointer)&v42[(_QWORD)v41];
      v43.__i_ = &begin[v31];
      std::vector<int>::insert(&v64, v43, &__x);
      v61 = 0;
      v62 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v64.__begin_, (uint64_t)v64.__end_, v64.__end_ - v64.__begin_);
      mlx::core::transpose((uint64_t **)&v71, (unsigned int **)&__p, *(mlx::core **)a3, *(unsigned int *)(a3 + 8) | 0x100000000, &v63);
      v44 = v63;
      v63 = 0uLL;
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      v71 = v44;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&v63);
      if (__p)
      {
        v61 = __p;
        operator delete(__p);
      }
      if (v64.__begin_)
      {
        v64.__end_ = v64.__begin_;
        operator delete(v64.__begin_);
      }
    }
    v48 = *((_QWORD *)&v72 + 1);
    *(_QWORD *)a4 = v72;
    *(_QWORD *)(a4 + 8) = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = *((_QWORD *)&v71 + 1);
    *(_QWORD *)(a4 + 16) = v71;
    *(_QWORD *)(a4 + 24) = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    *(_DWORD *)(a4 + 32) = v31;
    mlx::core::array::~array((mlx::core::array *)&v71);
    mlx::core::array::~array((mlx::core::array *)&v72);
  }
}

void sub_2424A27EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  mlx::core::array::~array((mlx::core::array *)(v20 - 80));
  mlx::core::array::~array((mlx::core::array *)(v20 - 64));
  _Unwind_Resume(a1);
}

void mlx::core::AddMM::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  int *begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int>::pointer v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t **v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  float v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  float v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *__p;
  void *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  __int128 v49;
  int **v50[2];
  __int128 v51;
  std::vector<int> v52;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v9 = *(_QWORD **)a3;
  std::vector<int>::vector(&v52, (uint64_t)(*(_QWORD *)(**(_QWORD **)a3 + 8) - ***(_QWORD ***)a3) >> 2);
  begin = v52.__begin_;
  end = v52.__end_;
  if (v52.__begin_ != v52.__end_)
  {
    v12 = 0;
    v13 = v52.__begin_;
    do
      *v13++ = v12++;
    while (v13 != end);
  }
  *((int32x2_t *)end - 1) = vrev64_s32(*(int32x2_t *)(end - 2));
  v14 = *(_DWORD **)a4;
  v15 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v15)
  {
    while (*v14 != 1)
    {
      if (*v14)
      {
        v35 = v9[1];
        *(_QWORD *)&v51 = *v9;
        *((_QWORD *)&v51 + 1) = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = *(float *)(a1 + 24);
        if (v38 != 1.0)
        {
          mlx::core::array::array<float>(v50, *(_QWORD *)(*v9 + 56), v38);
          mlx::core::multiply(v50, &v51, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
          v39 = v49;
          v49 = 0uLL;
          v40 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
          v51 = v39;
          if (v40)
          {
            p_shared_owners = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldaxr(p_shared_owners);
            while (__stlxr(v42 - 1, p_shared_owners));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          mlx::core::array::~array((mlx::core::array *)&v49);
          mlx::core::array::~array((mlx::core::array *)v50);
        }
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v51);
        goto LABEL_43;
      }
      v16 = v9[1];
      *(_QWORD *)&v51 = *v9;
      *((_QWORD *)&v51 + 1) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(float *)(a1 + 20);
      if (v19 != 1.0)
      {
        mlx::core::array::array<float>(v50, *(_QWORD *)(*v9 + 56), v19);
        mlx::core::multiply(v50, &v51, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
        v20 = v49;
        v49 = 0uLL;
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        v51 = v20;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        mlx::core::array::~array((mlx::core::array *)&v49);
        mlx::core::array::~array((mlx::core::array *)v50);
      }
      v24 = *a2;
      v47 = 0;
      v48 = 0;
      v46 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, v52.__begin_, (uint64_t)v52.__end_, v52.__end_ - v52.__begin_);
      mlx::core::transpose(v24 + 2, &v46, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
      mlx::core::matmul(&v51, &v49, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)v50);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v50);
      mlx::core::array::~array((mlx::core::array *)v50);
      mlx::core::array::~array((mlx::core::array *)&v49);
      v25 = v46;
      if (v46)
      {
        v47 = v46;
LABEL_31:
        operator delete(v25);
      }
LABEL_43:
      mlx::core::array::~array((mlx::core::array *)&v51);
      if (++v14 == v15)
      {
        begin = v52.__begin_;
        goto LABEL_45;
      }
    }
    v26 = v9[1];
    *(_QWORD *)&v51 = *v9;
    *((_QWORD *)&v51 + 1) = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = *(float *)(a1 + 20);
    if (v29 != 1.0)
    {
      mlx::core::array::array<float>(v50, *(_QWORD *)(*v9 + 56), v29);
      mlx::core::multiply(v50, &v51, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
      v30 = v49;
      v49 = 0uLL;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      v51 = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&v49);
      mlx::core::array::~array((mlx::core::array *)v50);
    }
    v34 = *a2;
    v44 = 0;
    v45 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v52.__begin_, (uint64_t)v52.__end_, v52.__end_ - v52.__begin_);
    mlx::core::transpose(v34, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
    mlx::core::matmul(&v49, &v51, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)v50);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v50);
    mlx::core::array::~array((mlx::core::array *)v50);
    mlx::core::array::~array((mlx::core::array *)&v49);
    v25 = (unsigned int *)__p;
    if (!__p)
      goto LABEL_43;
    v44 = __p;
    goto LABEL_31;
  }
LABEL_45:
  if (begin)
  {
    v52.__end_ = begin;
    operator delete(begin);
  }
}

void sub_2424A2C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL mlx::core::AddMM::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 20) == *(float *)(a2 + 20) && *(float *)(a1 + 24) == *(float *)(a2 + 24);
}

void mlx::core::AddMM::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const void **v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  const void **v32;
  unint64_t *v33;
  unint64_t v34;
  _DWORD *v35;
  void *__p;
  void *v37;
  _DWORD *v38;
  const void **v39[2];
  const void **v40[2];
  const void **v41[2];
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  const void **v45;
  const void **v46;
  const void **v47;
  const void **v48;
  uint64_t *v49;
  const void **v50;
  const void **v51[3];

  v51[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = **a3;
  if (v9 < 1)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v49 = *(uint64_t **)v8;
    v50 = (const void **)v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v8, v9, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
  }
  v13 = *a2;
  v14 = (*a3)[1];
  if (v14 < 1)
  {
    v16 = *(const void ***)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    v47 = v16;
    v48 = (const void **)v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)(v13 + 16), v14, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v47);
  }
  v19 = *a2;
  v20 = (*a3)[2];
  if (v20 < 1)
  {
    v21 = *(const void ***)(v19 + 32);
    v22 = *(_QWORD *)(v19 + 40);
    v45 = v21;
    v46 = (const void **)v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)(v19 + 32), v20, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v45);
    v21 = v45;
  }
  v41[0] = v21;
  v41[1] = v46;
  if (v46)
  {
    v25 = (unint64_t *)(v46 + 1);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v40[0] = (const void **)v49;
  v40[1] = v50;
  if (v50)
  {
    v27 = (unint64_t *)(v50 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v39[0] = v47;
  v39[1] = v48;
  if (v48)
  {
    v29 = (unint64_t *)(v48 + 1);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  mlx::core::addmm(v41, v40, v39, (int *)(a1 + 20), (int *)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v51);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  __p = &v42;
  LOBYTE(v37) = 0;
  v31 = operator new(0x10uLL);
  v42 = v31;
  v43 = v31;
  v44 = v31 + 2;
  v32 = v51[1];
  *v31 = v51[0];
  v31[1] = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 1);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v43 = v31 + 2;
  v35 = operator new(4uLL);
  __p = v35;
  *v35 = 0;
  v37 = v35 + 1;
  v38 = v35 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v42, (uint64_t)&__p);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  __p = &v42;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v51);
  mlx::core::array::~array((mlx::core::array *)v39);
  mlx::core::array::~array((mlx::core::array *)v40);
  mlx::core::array::~array((mlx::core::array *)v41);
  mlx::core::array::~array((mlx::core::array *)&v45);
  mlx::core::array::~array((mlx::core::array *)&v47);
  mlx::core::array::~array((mlx::core::array *)&v49);
}

void sub_2424A3008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  mlx::core::array::~array((mlx::core::array *)(v22 - 88));
  mlx::core::array::~array((mlx::core::array *)(v22 - 72));
  _Unwind_Resume(a1);
}

BOOL mlx::core::Arange::is_equivalent(double *a1, double *a2)
{
  return a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t mlx::core::ArcCos::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::ArcCos::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  int **v15[2];
  _QWORD *v16;
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ArcCos::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::ArcCos::jvp();
  mlx::core::array::array<double>(v15, *(_QWORD *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
  mlx::core::subtract(v15, &v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::array::~array((mlx::core::array *)&v16);
  mlx::core::rsqrt(v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
  mlx::core::negative(&v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::~array((mlx::core::array *)&v16);
  mlx::core::multiply(*a3, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v16 = a5;
  v17 = 0;
  v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  v10 = v18[1];
  *v9 = v18[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A3284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCos::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcCos::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::ArcCos::vmap();
  mlx::core::arccos(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A3404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcCosh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::ArcCosh::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  int **v16[2];
  _QWORD *v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ArcCosh::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::ArcCosh::jvp();
  mlx::core::array::array<double>(v16, *(_QWORD *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v17);
  mlx::core::subtract(&v17, v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  mlx::core::array::~array((mlx::core::array *)&v17);
  v9 = *a3;
  mlx::core::rsqrt(v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::multiply(v9, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v17 = a5;
  v18 = 0;
  v10 = operator new(0x10uLL);
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 2;
  v11 = v19[1];
  *v10 = v19[0];
  v10[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a5[1] = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424A35C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCosh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcCosh::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::ArcCosh::vmap();
  mlx::core::arccosh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A3738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcSin::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::ArcSin::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  int **v16[2];
  _QWORD *v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ArcSin::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::ArcSin::jvp();
  mlx::core::array::array<double>(v16, *(_QWORD *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v17);
  mlx::core::subtract(v16, &v17, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  mlx::core::array::~array((mlx::core::array *)&v17);
  v9 = *a3;
  mlx::core::rsqrt(v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::multiply(v9, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v17 = a5;
  v18 = 0;
  v10 = operator new(0x10uLL);
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 2;
  v11 = v19[1];
  *v10 = v19[0];
  v10[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a5[1] = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424A38F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSin::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcSin::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::ArcSin::vmap();
  mlx::core::arcsin(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A3A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcSinh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::ArcSinh::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  int **v16[2];
  _QWORD *v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ArcSinh::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::ArcSinh::jvp();
  mlx::core::array::array<double>(v16, *(_QWORD *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v17);
  mlx::core::add(&v17, v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  mlx::core::array::~array((mlx::core::array *)&v17);
  v9 = *a3;
  mlx::core::rsqrt(v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::multiply(v9, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v17 = a5;
  v18 = 0;
  v10 = operator new(0x10uLL);
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 2;
  v11 = v19[1];
  *v10 = v19[0];
  v10[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a5[1] = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424A3C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSinh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcSinh::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::ArcSinh::vmap();
  mlx::core::arcsinh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A3DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcTan::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::ArcTan::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  int **v14[2];
  _QWORD *v15;
  char v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ArcTan::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::ArcTan::jvp();
  mlx::core::array::array<double>(v14, *(_QWORD *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v15);
  mlx::core::add(v14, &v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::~array((mlx::core::array *)&v15);
  mlx::core::divide(*a3, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v15 = a5;
  v16 = 0;
  v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  v10 = v17[1];
  *v9 = v17[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_2424A3F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcTan::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::ArcTan::vmap();
  mlx::core::arctan(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A40A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcTan2::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::ArcTan2::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t i;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD *v19;
  char v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::ArcTan2::jvp();
  if (a4[1] - *a4 != 8)
    mlx::core::ArcTan2::jvp();
  mlx::core::square(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
  mlx::core::square((_QWORD *)(*(_QWORD *)a2 + 16), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v19);
  mlx::core::add(v21, &v19, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  mlx::core::array::~array((mlx::core::array *)&v19);
  mlx::core::array::~array((mlx::core::array *)v21);
  mlx::core::divide(*a3, v18, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
  mlx::core::negative(*a3 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  mlx::core::divide(v17, v18, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v19 = a5;
  v20 = 0;
  v9 = operator new(0x20uLL);
  v10 = 0;
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 4;
  do
  {
    v11 = &v21[2 * v10];
    v13 = *v11;
    v12 = v11[1];
    *v9 = v13;
    v9[1] = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ++v10;
    v9 += 2;
  }
  while (v10 != 2);
  a5[1] = v9;
  for (i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v21[i]);
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v18);
}

void sub_2424A42C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  uint64_t i;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a14);
  for (i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a16 + i));
  mlx::core::array::~array((mlx::core::array *)&a10);
  mlx::core::array::~array((mlx::core::array *)&a12);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan2::vmap(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 32)
    mlx::core::ArcTan2::vmap();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 8)
    mlx::core::ArcTan2::vmap();
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::arctan2(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424A44C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcTanh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::ArcTanh::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  int **v14[2];
  _QWORD *v15;
  char v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ArcTanh::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::ArcTanh::jvp();
  mlx::core::array::array<double>(v14, *(_QWORD *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v15);
  mlx::core::subtract(v14, &v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::~array((mlx::core::array *)&v15);
  mlx::core::divide(*a3, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v15 = a5;
  v16 = 0;
  v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  v10 = v17[1];
  *v9 = v17[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_2424A4690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTanh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcTanh::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::ArcTanh::vmap();
  mlx::core::arctanh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A47F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgPartition::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void ***v6;
  int v8;
  int v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(const void ****)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArgPartition::vmap();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 4)
    mlx::core::ArgPartition::vmap();
  v8 = **(_DWORD **)a3;
  v9 = *(_DWORD *)(a1 + 24);
  if (v8 >= 0 && v8 <= v9)
    v11 = v9 + 1;
  else
    v11 = *(_DWORD *)(a1 + 24);
  mlx::core::argpartition(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (void **)&v16;
  v20 = 0;
  v12 = operator new(0x10uLL);
  v16 = v12;
  v17 = v12;
  v18 = v12 + 2;
  v13 = v21[1];
  *v12 = v21[0];
  v12[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, a3);
  v19 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v19);
  mlx::core::array::~array((mlx::core::array *)v21);
}

void sub_2424A494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::ArgPartition::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

BOOL mlx::core::ArgReduce::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

void mlx::core::ArgReduce::vmap(uint64_t a1@<X0>, uint64_t ***a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  int v10;
  int v12;
  uint64_t **v13;
  void **v14[2];
  char *v15[3];

  v8 = **a3;
  v10 = *(_DWORD *)(a1 + 20);
  v9 = *(_DWORD *)(a1 + 24);
  if (v8 < 0 || v9 < v8)
    v12 = *(_DWORD *)(a1 + 24);
  else
    v12 = v9 + 1;
  v13 = *a2;
  memset(v15, 0, sizeof(v15));
  if (v10)
    mlx::core::argmax(v13, v12, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v14);
  else
    mlx::core::argmin(v13, v12, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v14);
  std::vector<mlx::core::array>::push_back[abi:ne180100](v15, (uint64_t)v14);
  mlx::core::array::~array((mlx::core::array *)v14);
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<int> const&,0>(a4, (_QWORD **)v15, (uint64_t)a3);
  v14[0] = (void **)v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v14);
}

void sub_2424A4AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  mlx::core::array::~array((mlx::core::array *)&a10);
  a10 = (void **)&a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core::array *v6;
  int v8;
  int v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArgSort::vmap();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 4)
    mlx::core::ArgSort::vmap();
  v8 = **(_DWORD **)a3;
  v9 = *(_DWORD *)(a1 + 20);
  if (v8 >= 0 && v8 <= v9)
    v11 = v9 + 1;
  else
    v11 = *(_DWORD *)(a1 + 20);
  mlx::core::argsort(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (void **)&v16;
  v20 = 0;
  v12 = operator new(0x10uLL);
  v16 = v12;
  v17 = v12;
  v18 = v12 + 2;
  v13 = v21[1];
  *v12 = v21[0];
  v12[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, a3);
  v19 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v19);
  mlx::core::array::~array((mlx::core::array *)v21);
}

void sub_2424A4C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgReduce::output_shapes(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = **a2;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v8, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  v6 = v8;
  *((_DWORD *)v8 + *(int *)(a1 + 24)) = 1;
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v6, (uint64_t)v9, (v9 - (_BYTE *)v6) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v11 = a3;
  v12 = 0;
  v7 = operator new(0x18uLL);
  *a3 = v7;
  a3[1] = v7;
  a3[2] = v7 + 3;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a3 + 2), (uint64_t)&__p, (uint64_t)&v16, v7);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_2424A4D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 8) = v18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a10)
    operator delete(a10);
  _Unwind_Resume(a1);
}

BOOL mlx::core::ArgSort::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::AsType::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::logic_error *exception;
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(**a3 + 56))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[astype] Type of cotangentsgent does not much primal output type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v5 = (*a3)[1];
  v13[0] = **a3;
  v13[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlx::core::astype(v13, *(_QWORD *)(**(_QWORD **)a2 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v13[2] = a4;
  v14 = 0;
  v8 = operator new(0x10uLL);
  *a4 = v8;
  a4[1] = v8;
  a4[2] = v8 + 2;
  v9 = v15[1];
  *v8 = v15[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a4[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_2424A4ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void mlx::core::AsType::jvp(uint64_t a1@<X0>, _QWORD **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];
  char v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = (*a2)[1];
  v11[0] = **a2;
  v11[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  mlx::core::astype(v11, *(_QWORD *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v11[2] = a3;
  v12 = 0;
  v7 = operator new(0x10uLL);
  *a3 = v7;
  a3[1] = v7;
  a3[2] = v7 + 2;
  v8 = v13[1];
  *v7 = v13[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a3[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_2424A4FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::AsType::vmap(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v6 = (*a2)[1];
  v13[0] = **a2;
  v13[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  mlx::core::astype(v13, *(_QWORD *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = (void **)&v14;
  v18 = 0;
  v9 = operator new(0x10uLL);
  v14 = v9;
  v15 = v9;
  v16 = v9 + 2;
  v10 = v19[1];
  *v9 = v19[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v15 = v9 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, a3);
  v17 = (void **)&v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_2424A513C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a14);
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

BOOL mlx::core::AsType::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::AsStrided::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, const void ****a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  int v9;
  const void *v10;
  _DWORD *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const void ***v27;
  _QWORD *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  const void **v50[2];
  void *v51;
  void *v52;
  _DWORD *v53;
  void *__p[3];
  void *v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  void *v61;
  _DWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (a4[1] - *a4 != 4)
    mlx::core::AsStrided::vjp();
  v9 = *(_DWORD *)(**a2 + 48);
  v10 = (**a3)[6];
  mlx::core::zeros_like(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v63);
  v11 = operator new(4uLL);
  v60 = v11;
  *v11 = v9;
  v61 = v11 + 1;
  v62 = v11 + 1;
  mlx::core::reshape((const void ***)&v63, (uint64_t)&v60, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v64);
  v12 = v64;
  v64 = 0uLL;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  v63 = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v64);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  mlx::core::arange(v9, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (int ***)&v59);
  v58 = v59;
  if (*((_QWORD *)&v59 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v55, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  mlx::core::as_strided((const void ***)&v58, (uint64_t)&v55, (__int128 *)__p, *(_QWORD *)(a1 + 72), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v64);
  v18 = v64;
  v64 = 0uLL;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  v59 = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v64);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  mlx::core::array::~array((mlx::core::array *)&v58);
  v22 = operator new(4uLL);
  v51 = v22;
  *v22 = (_DWORD)v10;
  v52 = v22 + 1;
  v53 = v22 + 1;
  mlx::core::reshape((const void ***)&v59, (uint64_t)&v51, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v64);
  v23 = v64;
  v64 = 0uLL;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  v59 = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v64);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  v27 = *a3;
  v28 = operator new(8uLL);
  v47 = v28;
  *v28 = v10 | 0x100000000;
  v48 = v28 + 1;
  v49 = v28 + 1;
  mlx::core::reshape(v27, (uint64_t)&v47, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v50);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  mlx::core::scatter_add((mlx::core::array *)&v63, (const void ***)&v59, (mlx::core::array *)v50, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v64);
  v29 = v64;
  v64 = 0uLL;
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  v63 = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v64);
  v33 = **a2;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v44, *(const void **)v33, *(_QWORD *)(v33 + 8), (uint64_t)(*(_QWORD *)(v33 + 8) - *(_QWORD *)v33) >> 2);
  mlx::core::reshape((const void ***)&v63, (uint64_t)&v44, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v64);
  v34 = v64;
  v64 = 0uLL;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  v63 = v34;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v64);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v38 = v63;
  v65 = v63;
  if (*((_QWORD *)&v63 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v64 = a5;
  BYTE8(v64) = 0;
  v41 = operator new(0x10uLL);
  *a5 = v41;
  a5[1] = v41;
  a5[2] = v41 + 1;
  *v41 = v38;
  if (*((_QWORD *)&v38 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  a5[1] = v41 + 1;
  mlx::core::array::~array((mlx::core::array *)&v65);
  mlx::core::array::~array((mlx::core::array *)v50);
  mlx::core::array::~array((mlx::core::array *)&v59);
  mlx::core::array::~array((mlx::core::array *)&v63);
}

void sub_2424A5660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 128));
  mlx::core::array::~array((mlx::core::array *)(v29 - 104));
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a29);
  mlx::core::array::~array((mlx::core::array *)(v29 - 144));
  _Unwind_Resume(a1);
}

void mlx::core::scatter_add(mlx::core::array *a1@<X0>, const void ***a2@<X1>, mlx::core::array *a3@<X2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void **v13;
  const void **v14;
  unint64_t *v15;
  unint64_t v16;
  const void ***v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  void *__p;
  void *v22;
  _DWORD *v23;
  const void ***v24;
  char *v25;
  char *v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v13 = a2[1];
  v27[0] = *a2;
  v27[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 1);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  __p = &v24;
  LOBYTE(v22) = 0;
  v17 = (const void ***)operator new(0x10uLL);
  v24 = v17;
  v26 = (char *)(v17 + 2);
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v25 = (char *)(v17 + 2);
  v20 = operator new(4uLL);
  __p = v20;
  *v20 = a4;
  v22 = v20 + 1;
  v23 = v20 + 1;
  mlx::core::scatter_add(a1, &v24, a3, (int **)&__p, a5, a6, a7);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  __p = &v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v27);
}

void sub_2424A5898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

void mlx::core::AsStrided::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, const void ****a3@<X2>, uint64_t a4@<X8>)
{
  const void **v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  const void **v17[3];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 16)
    mlx::core::AsStrided::jvp();
  v6 = (*a3)[1];
  v17[0] = **a3;
  v17[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  mlx::core::as_strided(v17, (uint64_t)&v14, (__int128 *)__p, *(_QWORD *)(a1 + 72), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v17[2] = (const void **)a4;
  v18 = 0;
  v9 = operator new(0x10uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v9 + 2;
  v10 = v19[1];
  *v9 = v19[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a4 + 8) = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_2424A5A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 56));
  mlx::core::array::~array((mlx::core::array *)(v16 - 40));
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

BOOL mlx::core::AsStrided::is_equivalent(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;

  v5 = a1 + 3;
  v4 = (const void *)a1[3];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 3;
  v7 = (const void *)a2[3];
  if (v6 == v8[1] - (_QWORD)v7
    && !memcmp(v4, v7, v6)
    && (v9 = (const void *)a1[6], v10 = a1[7] - (_QWORD)v9, v11 = (const void *)a2[6], v10 == a2[7] - (_QWORD)v11)
    && !memcmp(v9, v11, v10))
  {
    return a1[9] == a2[9];
  }
  else
  {
    return 0;
  }
}

BOOL mlx::core::BitwiseBinary::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

_QWORD *mlx::core::BitwiseBinary::print(_QWORD *result, _QWORD *a2)
{
  const char *v2;
  const char *v3;

  switch(*((_DWORD *)result + 5))
  {
    case 0:
      v2 = "BitwiseAnd";
      goto LABEL_9;
    case 1:
      v3 = "BitwiseOr";
      goto LABEL_6;
    case 2:
      v2 = "BitwiseXor";
      goto LABEL_9;
    case 3:
      v3 = "LeftShift";
LABEL_6:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, 9);
      break;
    case 4:
      v2 = "RightShift";
LABEL_9:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v2, 10);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::BitwiseBinary::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t i;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *__p;
  void *v34;
  _DWORD *v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  void *v41[3];
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD v50[4];
  _QWORD v51[3];

  v51[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, sizeof(v41));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v41, *(const void **)v45, *(_QWORD *)(v45 + 8), (uint64_t)(*(_QWORD *)(v45 + 8) - *(_QWORD *)v45) >> 2);
  v6 = v45;
  v7 = *(_QWORD *)(v45 + 56);
  v8 = operator new(0x30uLL);
  v8[2] = 0;
  *v8 = &unk_251350008;
  v8[1] = 0;
  v8[4] = *(_QWORD *)(a1 + 8);
  v8[3] = &unk_25134D980;
  v8[5] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v40 = v8 + 3;
  *((_QWORD *)&v40 + 1) = v8;
  v38 = 0;
  v39 = 0;
  v50[0] = v6;
  v50[1] = v46;
  if (v46)
  {
    v9 = (unint64_t *)(v46 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v50[2] = v47;
  v50[3] = v48;
  if (v48)
  {
    v11 = (unint64_t *)(v48 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v36 = 0uLL;
  v37 = 0;
  __p = &v36;
  LOBYTE(v34) = 0;
  v13 = operator new(0x20uLL);
  v14 = 0;
  *(_QWORD *)&v36 = v13;
  *((_QWORD *)&v36 + 1) = v13;
  v37 = v13 + 4;
  do
  {
    v15 = &v50[2 * v14];
    v17 = *v15;
    v16 = v15[1];
    *v13 = v17;
    v13[1] = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    ++v14;
    v13 += 2;
  }
  while (v14 != 2);
  *((_QWORD *)&v36 + 1) = v13;
  mlx::core::array::array(v51, (__int128 *)v41, v7, &v40, &v36);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  __p = &v42;
  LOBYTE(v34) = 0;
  v20 = operator new(0x10uLL);
  v42 = v20;
  v43 = v20;
  v44 = v20 + 2;
  v21 = v51[1];
  *v20 = v51[0];
  v20[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v43 = v20 + 2;
  v24 = v49;
  v25 = operator new(4uLL);
  __p = v25;
  *v25 = v24;
  v34 = v25 + 1;
  v35 = v25 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v42, (uint64_t)&__p);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  __p = &v42;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v51);
  __p = &v36;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v50[i]);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v47);
  mlx::core::array::~array((mlx::core::array *)&v45);
}

void sub_2424A5EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  mlx::core::array *v25;
  uint64_t v26;
  uint64_t i;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v26 - 72));
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(v26 - 104 + i));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  mlx::core::array::~array(v25);
  mlx::core::array::~array((mlx::core::array *)&a25);
  _Unwind_Resume(a1);
}

void sub_2424A5F78()
{
  JUMPOUT(0x2424A5F70);
}

void mlx::core::Broadcast::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, mlx::core::array **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  mlx::core::array *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  _QWORD *v31;
  const void **v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  const void **v38[2];
  void *__p;
  _DWORD *v40;
  _QWORD v41[2];
  char v42;
  const void **v43[3];

  v43[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  if (a4[1] - *a4 != 4)
    mlx::core::Broadcast::vjp();
  v7 = **a2;
  v8 = *a3;
  v9 = *(uint64_t **)*a3;
  v11 = *v9;
  v10 = v9[1];
  v13 = *(const void **)v7;
  v12 = *(_QWORD *)(v7 + 8);
  __p = 0;
  v40 = 0;
  v41[0] = 0;
  if (*(_QWORD *)(*(_QWORD *)v8 + 8) != **(_QWORD **)v8)
  {
    v14 = 0;
    v15 = (int)(((unint64_t)(v10 - v11) >> 2) - ((unint64_t)(v12 - (_QWORD)v13) >> 2));
    while (v14 >= v15)
    {
      v23 = *(_DWORD *)(*(_QWORD *)v7 + 4 * (v14 - v15));
      if (v23 != mlx::core::array::shape(v8, v14))
      {
        v16 = v40;
        if ((unint64_t)v40 < v41[0])
        {
LABEL_16:
          *v16 = v14;
          v24 = v16 + 1;
LABEL_35:
          v40 = v24;
          goto LABEL_36;
        }
        v17 = __p;
        v25 = ((char *)v40 - (_BYTE *)__p) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
LABEL_46:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v41[0] - (_QWORD)__p;
        if ((uint64_t)(v41[0] - (_QWORD)__p) >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v26;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v41, v21);
          v17 = __p;
          v16 = v40;
        }
        else
        {
          v22 = 0;
        }
        v28 = &v22[4 * v25];
        *(_DWORD *)v28 = v14;
        v24 = v28 + 4;
        while (v16 != v17)
        {
          v30 = *--v16;
          *((_DWORD *)v28 - 1) = v30;
          v28 -= 4;
        }
LABEL_33:
        __p = v28;
        v40 = v24;
        v41[0] = &v22[4 * v21];
        if (v17)
          operator delete(v17);
        goto LABEL_35;
      }
LABEL_36:
      if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v8 + 8) - **(_QWORD **)v8) >> 2 <= (unint64_t)++v14)
        goto LABEL_37;
    }
    v16 = v40;
    if ((unint64_t)v40 < v41[0])
      goto LABEL_16;
    v17 = __p;
    v18 = ((char *)v40 - (_BYTE *)__p) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      goto LABEL_46;
    v20 = v41[0] - (_QWORD)__p;
    if ((uint64_t)(v41[0] - (_QWORD)__p) >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v41, v21);
      v17 = __p;
      v16 = v40;
    }
    else
    {
      v22 = 0;
    }
    v28 = &v22[4 * v18];
    *(_DWORD *)v28 = v14;
    v24 = v28 + 4;
    while (v16 != v17)
    {
      v29 = *--v16;
      *((_DWORD *)v28 - 1) = v29;
      v28 -= 4;
    }
    goto LABEL_33;
  }
LABEL_37:
  mlx::core::sum((uint64_t)v8, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v38);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
  mlx::core::reshape(v38, (uint64_t)&v35, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v43);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v41[1] = a5;
  v42 = 0;
  v31 = operator new(0x10uLL);
  *a5 = v31;
  a5[1] = v31;
  a5[2] = v31 + 2;
  v32 = v43[1];
  *v31 = v43[0];
  v31[1] = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 1);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  a5[1] = v31 + 2;
  mlx::core::array::~array((mlx::core::array *)v43);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  mlx::core::array::~array((mlx::core::array *)v38);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
}

void sub_2424A6298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a18);
  mlx::core::array::~array((mlx::core::array *)&a20);
  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::jvp(uint64_t a1@<X0>, const void ****a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  const void **v6;
  unint64_t *v7;
  unint64_t v8;
  const void **v9[3];

  v9[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  if (a3[1] - *a3 != 4)
    mlx::core::Broadcast::jvp();
  mlx::core::broadcast_to(*a2, (const void **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424A63DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  std::vector<int>::size_type v13;
  std::vector<int>::const_iterator v14;
  std::vector<int>::const_iterator v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int *v20;
  const void **v21;
  unint64_t *v22;
  unint64_t v23;
  _DWORD *v24;
  void *v25[2];
  _DWORD *v26;
  void *__p;
  void *v28;
  uint64_t v29;
  std::vector<int> v30;
  __int128 v31;
  const void **v32[3];

  v32[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Broadcast::vmap();
  if ((char *)a3[1] - (char *)*a3 != 4)
    mlx::core::Broadcast::vmap();
  v7 = **a3;
  v8 = *v5;
  v9 = v5[1];
  *(_QWORD *)&v31 = v8;
  *((_QWORD *)&v31 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if ((v7 & 0x80000000) == 0)
  {
    memset(&v30, 0, sizeof(v30));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
    v12 = ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2) - ((*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 2);
    v13 = (v12 + 1);
    if (v12 + 1 < 0)
      __assert_rtn("vmap", "primitives.cpp", 672, "diff >= 0");
    v14.__i_ = v30.__begin_;
    LODWORD(v25[0]) = 1;
    std::vector<int>::insert(&v30, v14, v13, (std::vector<int>::const_reference)v25);
    v7 += v13;
    v15.__i_ = (std::__wrap_iter<const int *>::iterator_type)(*(_QWORD *)(a1 + 24) + 4 * v7);
    std::vector<int>::insert((std::vector<int> *)(a1 + 24), v15, &v30.__begin_[v7]);
    v28 = 0;
    v29 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v30.__begin_, (uint64_t)v30.__end_, v30.__end_ - v30.__begin_);
    mlx::core::reshape((const void ***)&v31, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)v25);
    v16 = *(_OWORD *)v25;
    v25[0] = 0;
    v25[1] = 0;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    v31 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    mlx::core::array::~array((mlx::core::array *)v25);
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    if (v30.__begin_)
    {
      v30.__end_ = v30.__begin_;
      operator delete(v30.__begin_);
    }
  }
  mlx::core::broadcast_to((const void ***)&v31, (const void **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v32);
  memset(&v30, 0, sizeof(v30));
  v25[0] = &v30;
  LOBYTE(v25[1]) = 0;
  v20 = (int *)operator new(0x10uLL);
  v30.__begin_ = v20;
  v30.__end_ = v20;
  v30.__end_cap_.__value_ = v20 + 4;
  v21 = v32[1];
  *(const void ***)v20 = v32[0];
  *((_QWORD *)v20 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 1);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v30.__end_ = v20 + 4;
  v24 = operator new(4uLL);
  v25[0] = v24;
  *v24 = v7;
  v25[1] = v24 + 1;
  v26 = v24 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v30, (uint64_t)v25);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v25[0] = &v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)&v31);
}

void sub_2424A66C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  mlx::core::array::~array((mlx::core::array *)&a19);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Broadcast::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v3 = a1 + 24;
  v2 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 24;
  v5 = *(const void **)(a2 + 24);
  return v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

uint64_t mlx::core::Ceil::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Ceil::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Ceil::jvp();
  if (a3[1] - *a3 != 4)
    mlx::core::Ceil::jvp();
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424A688C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Ceil::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Ceil::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Ceil::vmap();
  mlx::core::ceil(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A69C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Cholesky::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  char **v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD *v15;
  void *__p;
  void *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char **v22[2];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v6 = **a3;
  v7 = *a2;
  if (v6 < 1)
  {
    v8 = *(char ***)(v7 + 8);
    v22[0] = *(char ***)v7;
    v22[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v7, **a3, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  }
  mlx::core::linalg::cholesky(v22, *(_BYTE *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v23);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  __p = &v19;
  LOBYTE(v17) = 0;
  v11 = operator new(0x10uLL);
  v19 = v11;
  v20 = v11;
  v21 = v11 + 2;
  v12 = v23[1];
  *v11 = v23[0];
  v11[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v20 = v11 + 2;
  v15 = operator new(4uLL);
  __p = v15;
  *v15 = v6 >> 31;
  v17 = v15 + 1;
  v18 = v15 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v19, (uint64_t)&__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  __p = &v19;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
}

void sub_2424A6B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void mlx::core::Concatenate::vjp(uint64_t a1@<X0>, mlx::core::array **a2@<X1>, const void ****a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  const void ***v9;
  std::vector<int>::size_type v10;
  const void **v11;
  char *v12;
  uint64_t v13;
  char *v14;
  mlx::core::array *v15;
  mlx::core::array *v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  int v30;
  int *v31;
  int *v32;
  int *v33;
  int **v34;
  const void **v35[2];
  void *__p;
  char *v37;
  char *v38;
  std::vector<int>::value_type __x[2];
  void *v40;
  uint64_t v41;
  std::vector<int> v42;

  v9 = *a3;
  v10 = ((_BYTE *)(**a3)[1] - (_BYTE *)***a3) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v42, v10, __x);
  v11 = *v9;
  *(_QWORD *)__x = 0;
  v40 = 0;
  v41 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *v11, (uint64_t)v11[1], ((_BYTE *)v11[1] - (_BYTE *)*v11) >> 2);
  v38 = 0;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v38, 1uLL);
  *(_DWORD *)v12 = 0;
  v14 = v12 + 4;
  v34 = a4;
  __p = v12;
  v38 = &v12[4 * v13];
  v37 = v12 + 4;
  v15 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    do
    {
      v17 = mlx::core::array::shape(v15, *(_DWORD *)(a1 + 20));
      v18 = v17;
      v19 = v37;
      if (v37 >= v38)
      {
        v20 = (char *)__p;
        v21 = (v37 - (_BYTE *)__p) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = v38 - (_BYTE *)__p;
        if ((v38 - (_BYTE *)__p) >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v38, v24);
          v20 = (char *)__p;
          v19 = v37;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        *(_DWORD *)v26 = v18;
        v14 = v26 + 4;
        while (v19 != v20)
        {
          v27 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        __p = v26;
        v37 = v14;
        v38 = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v37 = v17;
        v14 = v19 + 4;
      }
      v37 = v14;
      v15 = (mlx::core::array *)((char *)v15 + 16);
    }
    while (v15 != v16);
  }
  v28 = (char *)__p + 4;
  if (__p != v14 && v28 != v14)
  {
    v30 = *(_DWORD *)__p;
    do
    {
      v30 += *(_DWORD *)v28;
      *(_DWORD *)v28 = v30;
      v28 += 4;
    }
    while (v28 != v14);
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v31 = *v34;
  v32 = v34[1];
  while (v31 != v32)
  {
    v33 = (int *)((char *)__p + 4 * *v31);
    v42.__begin_[*(int *)(a1 + 20)] = *v33;
    *(_DWORD *)(*(_QWORD *)__x + 4 * *(int *)(a1 + 20)) = v33[1];
    mlx::core::slice(v9, (uint64_t)&v42, (uint64_t)__x, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v35);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v35);
    mlx::core::array::~array((mlx::core::array *)v35);
    ++v31;
  }
  if (__p)
  {
    v37 = (char *)__p;
    operator delete(__p);
  }
  if (*(_QWORD *)__x)
  {
    v40 = *(void **)__x;
    operator delete(*(void **)__x);
  }
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
}

void sub_2424A6E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void mlx::core::Concatenate::jvp(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *begin;
  int *end;
  int v12;
  std::vector<int>::pointer v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25[3];
  std::vector<int> v26;
  char **v27;
  char v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  std::vector<int>::vector(&v26, (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  begin = v26.__begin_;
  end = v26.__end_;
  if (v26.__begin_ != v26.__end_)
  {
    v12 = 0;
    v13 = v26.__begin_;
    do
      *v13++ = v12++;
    while (v13 != end);
  }
  v14 = 126 - 2 * __clz(end - begin);
  v25[0] = (char *)a4;
  if (end == begin)
    v15 = 0;
  else
    v15 = v14;
  std::__introsort<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *,false>(begin, end, (uint64_t **)v25, v15, 1);
  memset(v25, 0, sizeof(v25));
  v16 = *a2;
  if (a2[1] != *a2)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      if (v19 < (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2)
        && (v20 = v26.__begin_[v19], v18 == *(_DWORD *)(*(_QWORD *)a4 + 4 * v20)))
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](v25, (_QWORD *)(*a3 + 16 * v20));
        ++v19;
      }
      else
      {
        mlx::core::zeros_like((uint64_t *)(v16 + v17), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v27);
        std::vector<mlx::core::array>::push_back[abi:ne180100](v25, (uint64_t)&v27);
        mlx::core::array::~array((mlx::core::array *)&v27);
      }
      ++v18;
      v16 = *a2;
      v17 += 16;
    }
    while (v18 < (a2[1] - *a2) >> 4);
  }
  mlx::core::concatenate((uint64_t *)v25, *(_DWORD *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v29);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v27 = (char **)a5;
  v28 = 0;
  v21 = operator new(0x10uLL);
  *(_QWORD *)a5 = v21;
  *(_QWORD *)(a5 + 8) = v21;
  *(_QWORD *)(a5 + 16) = v21 + 2;
  v22 = v29[1];
  *v21 = v29[0];
  v21[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(a5 + 8) = v21 + 2;
  mlx::core::array::~array((mlx::core::array *)v29);
  v27 = v25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
}

void sub_2424A70DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, char a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  mlx::core::array::~array((mlx::core::array *)&a18);
  a16 = &a10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Concatenate::vmap(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  int v14;
  char **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _DWORD *v19;
  void *__p;
  void *v21;
  _DWORD *v22;
  char **v23;
  char **v24;
  _QWORD *v25;
  char *v26[3];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  memset(v26, 0, sizeof(v26));
  if (a3[1] == *a3)
  {
LABEL_5:
    v12 = 0;
    v13 = *(_DWORD *)(a1 + 20);
    v11 = -1;
  }
  else
  {
    v8 = 0;
    v9 = 16;
    while (1)
    {
      std::vector<mlx::core::array>::push_back[abi:ne180100](v26, (_QWORD *)(*a2 + v9 - 16));
      v10 = *a3;
      v11 = *(_DWORD *)(*a3 + 4 * v8++);
      if ((v11 & 0x80000000) == 0)
        break;
      v9 += 16;
      if (v8 >= (a3[1] - v10) >> 2)
        goto LABEL_5;
    }
    if ((a3[1] - v10) >> 2 > (unint64_t)v8)
    {
      do
      {
        v14 = *(_DWORD *)(v10 + 4 * v8);
        if (v11 == v14 || v14 < 0)
        {
          std::vector<mlx::core::array>::push_back[abi:ne180100](v26, (_QWORD *)(*a2 + v9));
        }
        else
        {
          mlx::core::moveaxis((uint64_t **)(*a2 + v9), v14, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v23);
          std::vector<mlx::core::array>::push_back[abi:ne180100](v26, (uint64_t)&v23);
          mlx::core::array::~array((mlx::core::array *)&v23);
        }
        ++v8;
        v10 = *a3;
        v9 += 16;
      }
      while (v8 < (a3[1] - *a3) >> 2);
    }
    v13 = *(_DWORD *)(a1 + 20);
    v12 = v13 >= v11;
  }
  mlx::core::concatenate((uint64_t *)v26, v12 + v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v27);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  __p = &v23;
  LOBYTE(v21) = 0;
  v15 = (char **)operator new(0x10uLL);
  v23 = v15;
  v24 = v15;
  v25 = v15 + 2;
  v16 = v27[1];
  *v15 = (char *)v27[0];
  v15[1] = (char *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v24 = v15 + 2;
  v19 = operator new(4uLL);
  __p = v19;
  *v19 = v11;
  v21 = v19 + 1;
  v22 = v19 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v23, (uint64_t)&__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  __p = &v23;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v27);
  v23 = v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_2424A7368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, char **a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a18);
  a12 = &a15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Concatenate::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

char *mlx::core::Copy::vjp@<X0>(_QWORD *a1@<X1>, _QWORD **a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  if (a1[1] - *a1 != 16)
    mlx::core::Copy::vjp();
  if (a3[1] - *a3 != 4)
    mlx::core::Copy::vjp();
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
}

char *mlx::core::Copy::jvp@<X0>(_QWORD *a1@<X1>, _QWORD **a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  if (a1[1] - *a1 != 16)
    mlx::core::Copy::jvp();
  if (a3[1] - *a3 != 4)
    mlx::core::Copy::jvp();
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
}

void mlx::core::Copy::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Copy::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Copy::vmap();
  v8 = *v5;
  v7 = v5[1];
  v15[0] = v8;
  v15[1] = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  mlx::core::copy(v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (void **)&v16;
  v20 = 0;
  v11 = operator new(0x10uLL);
  v16 = v11;
  v17 = v11;
  v18 = v11 + 2;
  v12 = v21[1];
  *v11 = v21[0];
  v11[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v17 = v11 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)a3);
  v19 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v19);
  mlx::core::array::~array((mlx::core::array *)v21);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A75CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a14);
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Cos::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Cos::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cos::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Cos::jvp();
  v7 = *a3;
  mlx::core::sin(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::negative(v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::multiply(v7, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v13[2] = a5;
  v14 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v15[1];
  *v8 = v15[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424A7760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Cos::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cos::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Cos::vmap();
  mlx::core::cos(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A78B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Cosh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Cosh::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cosh::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Cosh::jvp();
  v6 = *a3;
  v7 = a1 + 8;
  mlx::core::sinh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v6, v12, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12[2] = a5;
  v13 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v14[1];
  *v8 = v14[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424A7A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Cosh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cosh::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Cosh::vmap();
  mlx::core::cosh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A7B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::CustomVJP::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  int *v18;
  char *v19[3];
  _QWORD v20[3];
  char **v21;

  v11 = *(_QWORD **)a2;
  v12 = (_QWORD *)(*(_QWORD *)(a2 + 8) + *a5 - a5[1]);
  v13 = (uint64_t)v12 - *(_QWORD *)a2;
  memset(v20, 0, sizeof(v20));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v20, v11, v12, v13 >> 4);
  v14 = *(_QWORD *)(a1 + 48);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(char **__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v19, v14, v20, a3, a5);
  v16 = *(_QWORD **)a3;
  v15 = *(_QWORD **)(a3 + 8);
  while (v16 != v15)
  {
    std::vector<mlx::core::array>::emplace_back<mlx::core::array const&>(v19, v16);
    v16 += 2;
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a6, a4[1] - *a4);
  v18 = *a4;
  v17 = a4[1];
  while (v18 != v17)
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, &v19[0][16 * *v18++]);
  v21 = v19;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v19[0] = (char *)v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
}

void sub_2424A7CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void ***a16)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = (void **)&a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

char *std::vector<mlx::core::array>::emplace_back<mlx::core::array const&>(char **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = v4;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    v30 = v18;
    *(_QWORD *)v17 = *a2;
    v19 = a2[1];
    *((_QWORD *)v17 + 1) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v11 = v17 + 16;
    v29.i64[1] = (uint64_t)(v17 + 16);
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v25 = vdupq_n_s64((unint64_t)v22);
    }
    else
    {
      do
      {
        v24 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v17 - 1) = v24;
        v17 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v25 = *(int64x2_t *)a1;
      v11 = (char *)v29.i64[1];
      v18 = v30;
    }
    *a1 = v17;
    a1[1] = v11;
    v29 = v25;
    v26 = a1[2];
    a1[2] = v18;
    v30 = v26;
    v28 = v25.i64[0];
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *a2;
    v8 = a2[1];
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

void mlx::core::Depends::vjp(mlx::core *a1@<X1>, _QWORD *a2@<X2>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  unint64_t v9;
  _QWORD v10[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      v9 = *v4;
      if (v9 >= (uint64_t)(a2[1] - *a2) >> 4)
      {
        mlx::core::zeros_like((uint64_t *)(*(_QWORD *)a1 + 16 * v9), a1, 0, v10);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
        mlx::core::array::~array((mlx::core::array *)v10);
      }
      else
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (_QWORD *)(*a2 + 16 * v9));
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424A7EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::vjp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  mlx::core::array *v11;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v5 = *(_DWORD **)a4;
  v6 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v6)
  {
    do
    {
      if (*v5)
      {
        mlx::core::multiply(*a3, *a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
        mlx::core::square(*a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
        mlx::core::divide(v13, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
        mlx::core::negative(v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v15);
        mlx::core::array::~array((mlx::core::array *)v15);
        mlx::core::array::~array((mlx::core::array *)v14);
        mlx::core::array::~array((mlx::core::array *)v12);
        v11 = (mlx::core::array *)v13;
      }
      else
      {
        mlx::core::divide(*a3, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v15);
        v11 = (mlx::core::array *)v15;
      }
      mlx::core::array::~array(v11);
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_2424A8054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  mlx::core::array::~array((mlx::core::array *)va);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::DivMod::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  _QWORD v9[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424A814C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::DivMod::jvp(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::zeros_like(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = operator new(0x10uLL);
  *a3 = v4;
  a3[1] = v4;
  a3[2] = v4 + 2;
  v5 = v8[1];
  *v4 = v8[0];
  v4[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a3[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v8);
}

void sub_2424A8230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::DivMod::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _DWORD *v6;
  void *__p;
  void *v8;
  _DWORD *v9;
  uint64_t v10[3];
  _QWORD v11[2];
  _QWORD v12[2];
  int v13;

  v4 = a1;
  mlx::core::divmod(v11, v12, *(mlx::core **)(v4 + 8), *(unsigned int *)(v4 + 16) | 0x100000000, v10);
  LODWORD(v4) = v13;
  v6 = operator new(4uLL);
  __p = v6;
  *v6 = v4;
  v8 = v6 + 1;
  v9 = v6 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)v10, (uint64_t)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  __p = v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_2424A8318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  mlx::core::array *v16;

  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array(v16);
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD v19[4];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19[0] = a4;
  v19[1] = a3;
  v19[2] = a2;
  v19[3] = a1;
  mlx::core::Divide::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v19, 0, &v18);
  if (a4[1] - *a4 >= 5uLL)
  {
    mlx::core::Divide::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v19, 1u, &v21);
    mlx::core::add(&v18, &v21, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
    v8 = v20;
    v20 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    v18 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v20);
    mlx::core::array::~array((mlx::core::array *)&v21);
  }
  v12 = v18;
  v21 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v20 = a5;
  BYTE8(v20) = 0;
  v15 = operator new(0x10uLL);
  *a5 = v15;
  a5[1] = v15;
  a5[2] = v15 + 1;
  *v15 = v12;
  if (*((_QWORD *)&v12 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  a5[1] = v15 + 1;
  mlx::core::array::~array((mlx::core::array *)&v21);
  mlx::core::array::~array((mlx::core::array *)&v18);
}

void sub_2424A84E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  mlx::core::array::~array((mlx::core::array *)(v9 - 56));
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];

  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(**(_QWORD **)a1 + 4 * a2))
  {
    mlx::core::multiply((_QWORD *)(**(_QWORD **)(a1 + 8) + 16 * a2), **(_QWORD ***)(a1 + 16), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v7);
    mlx::core::square((_QWORD *)(**(_QWORD **)(a1 + 16) + 16), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v6);
    mlx::core::divide(v7, v6, *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v8);
    mlx::core::negative(v8, *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)v8);
    mlx::core::array::~array((mlx::core::array *)v6);
    mlx::core::array::~array((mlx::core::array *)v7);
  }
  else
  {
    mlx::core::divide((_QWORD *)(**(_QWORD **)(a1 + 8) + 16 * a2), (_QWORD *)(**(_QWORD **)(a1 + 16) + 16), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
  }
}

void sub_2424A862C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::divide(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424A87A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::vjp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v5 = *(_DWORD **)a4;
  v6 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v6)
  {
    do
    {
      if (*v5)
      {
        mlx::core::divide(*a2, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v17);
        mlx::core::floor(&v17, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
        v11 = v16;
        v16 = 0uLL;
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        v17 = v11;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        mlx::core::array::~array((mlx::core::array *)&v16);
        mlx::core::multiply(&v17, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
        mlx::core::negative(v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)&v16);
        mlx::core::array::~array((mlx::core::array *)&v16);
        mlx::core::array::~array((mlx::core::array *)v15);
        mlx::core::array::~array((mlx::core::array *)&v17);
      }
      else
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, *a3);
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_2424A8960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD v19[4];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19[0] = a4;
  v19[1] = a3;
  v19[2] = a2;
  v19[3] = a1;
  mlx::core::Remainder::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v19, 0, &v18);
  if (a4[1] - *a4 >= 5uLL)
  {
    mlx::core::Remainder::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v19, 1u, &v21);
    mlx::core::add(&v18, &v21, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
    v8 = v20;
    v20 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    v18 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v20);
    mlx::core::array::~array((mlx::core::array *)&v21);
  }
  v12 = v18;
  v21 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v20 = a5;
  BYTE8(v20) = 0;
  v15 = operator new(0x10uLL);
  *a5 = v15;
  a5[1] = v15;
  a5[2] = v15 + 1;
  *v15 = v12;
  if (*((_QWORD *)&v12 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  a5[1] = v15 + 1;
  mlx::core::array::~array((mlx::core::array *)&v21);
  mlx::core::array::~array((mlx::core::array *)&v18);
}

void sub_2424A8B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  mlx::core::array::~array((mlx::core::array *)(v9 - 56));
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  v5 = a2;
  if (*(_DWORD *)(**(_QWORD **)a1 + 4 * a2))
  {
    v6 = *(_QWORD *)(a1 + 24);
    mlx::core::divide(**(_QWORD ***)(a1 + 16), (_QWORD *)(**(_QWORD **)(a1 + 16) + 16), *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, &v16);
    mlx::core::floor(&v16, *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, &v15);
    v7 = v15;
    v15 = 0uLL;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    v16 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v15);
    mlx::core::multiply(&v16, (_QWORD *)(**(_QWORD **)(a1 + 8) + 16 * v5), *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, &v15);
    mlx::core::negative(&v15, *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)&v15);
    mlx::core::array::~array((mlx::core::array *)&v16);
  }
  else
  {
    v11 = (_QWORD *)(**(_QWORD **)(a1 + 8) + 16 * a2);
    *a3 = *v11;
    v12 = v11[1];
    a3[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
}

void sub_2424A8CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::remainder(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424A8E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Equal::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::equal(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424A8FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Equal::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  _QWORD v9[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424A90C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Equal::jvp(uint64_t a1@<X0>, _QWORD ***a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::vector<int> __p;
  _QWORD *v10;
  char v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v12[1];
  *v5 = v12[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2424A91D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Erf::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Erf::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  int **v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::Erf::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Erf::jvp();
  mlx::core::array::array<double>(&v17, *(_QWORD *)(**a2 + 56), 1.12837917);
  mlx::core::multiply(&v17, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  mlx::core::array::~array((mlx::core::array *)&v17);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::negative(v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::exp(v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  mlx::core::multiply(v16, v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v17 = (int **)a5;
  v18 = 0;
  v9 = operator new(0x10uLL);
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v9 + 2;
  v10 = v19[1];
  *v9 = v19[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a5 + 8) = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424A93BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  va_list va3;
  uint64_t v15;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v13 = va_arg(va4, _QWORD);
  v15 = va_arg(va4, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va4);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va3);
  _Unwind_Resume(a1);
}

void mlx::core::Erf::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Erf::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Erf::vmap();
  mlx::core::erf(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A9540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD **a4@<X4>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  int **v16;
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::array::array<double>(&v16, *(_QWORD *)(**(_QWORD **)a2 + 56), 0.886226925);
  mlx::core::multiply(&v16, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  mlx::core::array::~array((mlx::core::array *)&v16);
  mlx::core::square(*a4, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::exp(v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::multiply(v15, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v16 = (int **)a5;
  v17 = 0;
  v9 = operator new(0x10uLL);
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v9 + 2;
  v10 = v18[1];
  *v9 = v18[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a5 + 8) = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A96C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void sub_2424A9720()
{
  JUMPOUT(0x2424A9718);
}

void mlx::core::ErfInv::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  int **v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::ErfInv::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::ErfInv::jvp();
  mlx::core::array::array<double>(&v17, *(_QWORD *)(**a2 + 56), 0.886226925);
  mlx::core::multiply(&v17, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  mlx::core::array::~array((mlx::core::array *)&v17);
  mlx::core::erfinv(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::square(v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::exp(v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  mlx::core::multiply(v16, v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v17 = (int **)a5;
  v18 = 0;
  v9 = operator new(0x10uLL);
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v9 + 2;
  v10 = v19[1];
  *v9 = v19[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a5 + 8) = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424A98CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  va_list va3;
  uint64_t v15;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v13 = va_arg(va4, _QWORD);
  v15 = va_arg(va4, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va4);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va3);
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ErfInv::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::ErfInv::vmap();
  mlx::core::erfinv(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A9A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::vjp(uint64_t a1@<X0>, _QWORD **a2@<X2>, _QWORD **a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::multiply(*a2, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424A9B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Exp::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Exp::jvp();
  v6 = *a3;
  v7 = a1 + 8;
  mlx::core::exp(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v6, v12, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12[2] = a5;
  v13 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v14[1];
  *v8 = v14[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424A9C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Exp::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Exp::vmap();
  mlx::core::exp(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424A9DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::vjp(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int **v12[2];
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *(_QWORD **)a3;
  mlx::core::array::array<float>(v12, *(_QWORD *)(**(_QWORD **)a3 + 56), 1.0);
  mlx::core::add(v7, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::multiply(v6, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v13[2] = a4;
  v14 = 0;
  v8 = operator new(0x10uLL);
  *a4 = v8;
  a4[1] = v8;
  a4[2] = v8 + 2;
  v9 = v15[1];
  *v8 = v15[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a4[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424A9F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Expm1::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Expm1::jvp();
  v6 = *a3;
  v7 = a1 + 8;
  mlx::core::exp(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v6, v12, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12[2] = a5;
  v13 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v14[1];
  *v8 = v14[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424AA068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Expm1::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Expm1::vmap();
  mlx::core::expm1(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424AA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Floor::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Floor::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Floor::jvp();
  if (a3[1] - *a3 != 4)
    mlx::core::Floor::jvp();
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424AA2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Floor::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Floor::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Floor::vmap();
  mlx::core::floor(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424AA40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Full::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - (_QWORD)v6 != 16)
    mlx::core::Full::vjp();
  if (a4[1] - *a4 != 4)
    mlx::core::Full::vjp();
  mlx::core::multiply(*a3, v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v12[1];
  *v8 = v12[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424AA528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

char *mlx::core::Full::jvp@<X0>(_QWORD *a1@<X1>, _QWORD **a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  if (a1[1] - *a1 != 16)
    mlx::core::Full::jvp();
  if (a3[1] - *a3 != 4)
    mlx::core::Full::jvp();
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
}

void mlx::core::Full::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD *v36;
  __int128 v37;
  void *__p[3];
  uint64_t v39;
  uint64_t v40;
  __int128 **v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Full::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Full::vmap();
  v8 = *v5;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *v5;
  v10 = *(_QWORD *)(*v5 + 56);
  v11 = operator new(0x30uLL);
  v11[2] = 0;
  *v11 = &unk_25134E938;
  v11[1] = 0;
  v12 = *(_DWORD *)(a1 + 16);
  v11[4] = *(_QWORD *)(a1 + 8);
  *((_DWORD *)v11 + 10) = v12;
  v11[3] = &unk_251351610;
  *(_QWORD *)&v37 = v11 + 3;
  *((_QWORD *)&v37 + 1) = v11;
  v41 = 0;
  v42 = 0;
  v13 = v5[1];
  v43 = v9;
  v44 = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v35 = 0uLL;
  v36 = 0;
  v32 = &v35;
  LOBYTE(v33) = 0;
  v16 = operator new(0x10uLL);
  *(_QWORD *)&v35 = v16;
  v36 = v16 + 2;
  *v16 = v9;
  v16[1] = v13;
  if (v13)
  {
    v17 = (unint64_t *)(v13 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *((_QWORD *)&v35 + 1) = v16 + 2;
  mlx::core::array::array(&v39, (__int128 *)__p, v10, &v37, &v35);
  v32 = &v35;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  mlx::core::array::~array((mlx::core::array *)&v43);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v26 = v39;
  v25 = v40;
  v43 = v39;
  v44 = v40;
  if (v40)
  {
    v27 = (unint64_t *)(v40 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v41 = &v32;
  LOBYTE(v42) = 0;
  v29 = (__int128 *)operator new(0x10uLL);
  v32 = v29;
  v34 = v29 + 1;
  *(_QWORD *)v29 = v26;
  *((_QWORD *)v29 + 1) = v25;
  if (v25)
  {
    v30 = (unint64_t *)(v25 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v33 = v29 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)&v32, (uint64_t)a3);
  v41 = &v32;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  mlx::core::array::~array((mlx::core::array *)&v43);
  mlx::core::array::~array((mlx::core::array *)&v39);
}

void sub_2424AA854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  char *v7;
  mlx::core::array *v8;
  char *v9;
  int *v10;
  std::vector<int>::value_type *v11;
  int v12;
  int *v13;
  int v14;
  _BOOL4 v15;
  std::vector<int>::value_type *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD **v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  std::vector<int>::pointer end;
  int *begin;
  int v27;
  std::vector<int>::pointer v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::vector<int>::const_iterator v33;
  std::vector<int>::pointer v34;
  std::vector<int>::const_iterator v35;
  std::vector<int>::pointer v36;
  int v37;
  int v38;
  std::vector<int>::const_iterator v39;
  int *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::vector<int>::value_type v44;
  _DWORD *v45;
  void *v46[2];
  _DWORD *v47;
  void *__p;
  void *v49;
  uint64_t v50;
  std::vector<int> v51;
  std::vector<int>::value_type v52;
  std::vector<int> v53;
  std::vector<int> v54;
  _QWORD **v55;
  _QWORD **v56;
  uint64_t v57;
  std::vector<int>::value_type __x[4];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v8 = *(mlx::core::array **)a2;
  v7 = *(char **)(a2 + 8);
  v9 = (char *)(*(_QWORD *)a2 + 16);
  v56 = 0;
  v57 = 0;
  v55 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)&v55, v9, v7, (v7 - v9) >> 4);
  memset(&v54, 0, sizeof(v54));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v54, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  memset(&v53, 0, sizeof(v53));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  v10 = *a3;
  v11 = a3[1];
  v12 = **a3;
  if (*a3 + 1 == v11)
  {
    v15 = 0;
  }
  else
  {
    v13 = v10 + 2;
    do
    {
      v14 = *(v13 - 1);
      v15 = v14 >= 0;
      if ((v14 & 0x80000000) == 0)
        break;
    }
    while (v13++ != v11);
  }
  v52 = 0;
  v17 = v10;
  if (v10 != v11)
  {
    v17 = v10;
    while (*v17 < 0)
    {
      if (++v17 == v11)
      {
        v17 = v11;
        break;
      }
    }
  }
  v52 = *v17;
  if ((unint64_t)((char *)v11 - (char *)v10) >= 5)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = v10[v19];
      if (v52 != v20 && (v20 & 0x80000000) == 0)
      {
        mlx::core::moveaxis(&v55[v18], v20, v52, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v51);
        std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)&v55[v18], (__int128 *)&v51);
        mlx::core::array::~array((mlx::core::array *)&v51);
        v10 = *a3;
        v11 = a3[1];
      }
      ++v19;
      v18 += 2;
    }
    while (v19 < v11 - v10);
  }
  if ((v12 & 0x80000000) == 0)
  {
    v21 = v55;
    if (v55 == v56)
    {
      v22 = 0;
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *v21;
        v21 += 2;
        v24 = (v23[1] - *v23) >> 2;
        if (v22 <= (int)v24)
          v22 = v24;
      }
      while (v21 != v56);
    }
    begin = v54.__begin_;
    end = v54.__end_;
    if (v54.__begin_ != v54.__end_)
    {
      while (v52 > *begin)
      {
        if (++begin == v54.__end_)
        {
          begin = v54.__end_;
          goto LABEL_33;
        }
      }
    }
    while (begin < end)
      ++*begin++;
LABEL_33:
    if (v15)
    {
      LODWORD(v46[0]) = 1;
      std::vector<int>::vector(&v51, v22 - (uint64_t)v52, (const std::vector<int>::value_type *)v46);
      v27 = mlx::core::array::shape(v8, v52);
      mlx::core::arange(0, v27, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (int ***)v46);
      if (*((_QWORD *)v46[0] + 1) == *(_QWORD *)v46[0])
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v28 = v51.__begin_;
      *v51.__begin_ = **(_DWORD **)v46[0];
      v49 = 0;
      v50 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v28, (uint64_t)v51.__end_, v51.__end_ - v28);
      mlx::core::reshape((const void ***)v46, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)__x);
      v29 = *(_OWORD *)__x;
      memset(__x, 0, sizeof(__x));
      v30 = (std::__shared_weak_count *)v46[1];
      *(_OWORD *)v46 = v29;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      mlx::core::array::~array((mlx::core::array *)__x);
      if (__p)
      {
        v49 = __p;
        operator delete(__p);
      }
      v33.__i_ = &v53.__begin_[v52];
      __x[0] = 1;
      std::vector<int>::insert(&v53, v33, __x);
      v34 = v54.__begin_;
      v35.__i_ = begin;
      std::vector<int>::insert(&v54, v35, &v52);
      std::vector<mlx::core::array>::insert(&v55, (uint64_t)v55 + 4 * ((char *)begin - (char *)v34), (uint64_t *)v46);
      mlx::core::array::~array((mlx::core::array *)v46);
      if (v51.__begin_)
      {
        v51.__end_ = v51.__begin_;
        operator delete(v51.__begin_);
      }
    }
    else
    {
      v36 = v53.__begin_;
      v37 = *v10;
      v38 = mlx::core::array::shape(v8, *v10);
      v39.__i_ = &v36[v37];
      LODWORD(v51.__begin_) = v38;
      std::vector<int>::insert(&v53, v39, (std::vector<int>::value_type *)&v51);
      v52 = **a3 + v22;
    }
  }
  mlx::core::gather(v8, (uint64_t *)&v55, &v54.__begin_, (uint64_t)&v53, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, __x);
  memset(&v51, 0, sizeof(v51));
  v46[0] = &v51;
  LOBYTE(v46[1]) = 0;
  v40 = (int *)operator new(0x10uLL);
  v51.__begin_ = v40;
  v51.__end_ = v40;
  v51.__end_cap_.__value_ = v40 + 4;
  v41 = *(_QWORD *)&__x[2];
  *(_QWORD *)v40 = *(_QWORD *)__x;
  *((_QWORD *)v40 + 1) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v51.__end_ = v40 + 4;
  v44 = v52;
  v45 = operator new(4uLL);
  v46[0] = v45;
  *v45 = v44;
  v46[1] = v45 + 1;
  v47 = v45 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v51, (uint64_t)v46);
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  v46[0] = &v51;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
  mlx::core::array::~array((mlx::core::array *)__x);
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }
  v54.__begin_ = (std::vector<int>::pointer)&v55;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_2424AADA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char *a23,char *a24,uint64_t a25,char a26)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  a23 = &a26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core::array **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::logic_error *exception;
  const void ***v16[3];
  _QWORD v17[2];
  const void ****v18;
  char v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  if (a4[1] - *a4 > 4uLL || *(_DWORD *)*a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[gather] Cannot calculate VJP with respect to indices.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  v9 = *(char **)(a2 + 8);
  v10 = (char *)(*(_QWORD *)a2 + 16);
  memset(v16, 0, sizeof(v16));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v16, v10, v9, (v9 - v10) >> 4);
  mlx::core::scatter_add((mlx::core::array *)v17, v16, *a3, (int **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v18 = (const void ****)a5;
  v19 = 0;
  v11 = operator new(0x10uLL);
  *(_QWORD *)a5 = v11;
  *(_QWORD *)(a5 + 8) = v11;
  *(_QWORD *)(a5 + 16) = v11 + 2;
  v12 = v20[1];
  *v11 = v20[0];
  v11[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a5 + 8) = v11 + 2;
  mlx::core::array::~array((mlx::core::array *)v20);
  v18 = v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_2424AB008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, mlx::core::array **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  uint64_t v15[3];
  void **v16;
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if (a4[1] - *a4 > 4uLL || *(_DWORD *)*a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[gather] Cannot calculate JVP with respect to indices.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v8 = (char *)a2[1];
  v9 = (char *)(*a2 + 16);
  memset(v15, 0, sizeof(v15));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v15, v9, v8, (v8 - v9) >> 4);
  mlx::core::gather(*a3, v15, (int **)(a1 + 24), a1 + 48, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v16 = (void **)a5;
  v17 = 0;
  v10 = operator new(0x10uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v10;
  *(_QWORD *)(a5 + 16) = v10 + 2;
  v11 = v18[1];
  *v10 = v18[0];
  v10[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a5 + 8) = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v18);
  v16 = (void **)v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_2424AB1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Gather::is_equivalent(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;

  v5 = a1 + 3;
  v4 = (const void *)a1[3];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 3;
  v7 = (const void *)a2[3];
  if (v6 == v8[1] - (_QWORD)v7
    && !memcmp(v4, v7, v6)
    && (v9 = (const void *)a1[6], v10 = a1[7] - (_QWORD)v9, v11 = (const void *)a2[6], v10 == a2[7] - (_QWORD)v11))
  {
    return memcmp(v9, v11, v10) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Greater::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::greater(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424AB3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Greater::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  _QWORD v9[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424AB4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Greater::jvp(uint64_t a1@<X0>, _QWORD ***a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::vector<int> __p;
  _QWORD *v10;
  char v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v12[1];
  *v5 = v12[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2424AB5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::greater_equal(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424AB72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  _QWORD v9[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424AB820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::jvp(uint64_t a1@<X0>, _QWORD ***a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::vector<int> __p;
  _QWORD *v10;
  char v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v12[1];
  *v5 = v12[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2424AB92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::Less::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::less(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424ABAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Less::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  _QWORD v9[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424ABBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Less::jvp(uint64_t a1@<X0>, _QWORD ***a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::vector<int> __p;
  _QWORD *v10;
  char v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v12[1];
  *v5 = v12[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2424ABCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::less_equal(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424ABE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  _QWORD v9[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424ABF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::jvp(uint64_t a1@<X0>, _QWORD ***a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::vector<int> __p;
  _QWORD *v10;
  char v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v12[1];
  *v5 = v12[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2424AC02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Log::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Log::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  int v9;
  float v10;
  float v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  _OWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - (_QWORD)v6 != 16)
    mlx::core::Log::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Log::jvp();
  mlx::core::divide(*a3, v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v22);
  v9 = *(_DWORD *)(a1 + 20);
  if (v9 != 2)
  {
    v10 = 2.0;
    if (v9 == 1)
      v10 = 10.0;
    v11 = logf(v10);
    mlx::core::array::array<float>((int ***)&v24, *(_QWORD *)(v22 + 56), 1.0 / v11);
    mlx::core::multiply(&v24, &v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v23);
    v12 = v23;
    v23 = 0uLL;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    v22 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v23);
    mlx::core::array::~array((mlx::core::array *)&v24);
  }
  v16 = v22;
  v24 = v22;
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v23 = a5;
  BYTE8(v23) = 0;
  v19 = operator new(0x10uLL);
  *a5 = v19;
  a5[1] = v19;
  a5[2] = v19 + 1;
  *v19 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  a5[1] = v19 + 1;
  mlx::core::array::~array((mlx::core::array *)&v24);
  mlx::core::array::~array((mlx::core::array *)&v22);
}

void sub_2424AC234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  mlx::core::array::~array((mlx::core::array *)&a14);
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Log::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  void *__p[3];
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void **v37;
  char v38;
  _QWORD v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Log::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Log::vmap();
  v8 = *v5;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *v5;
  v10 = *(_QWORD *)(*v5 + 56);
  v11 = operator new(0x30uLL);
  v11[2] = 0;
  *v11 = &unk_25134FA18;
  v11[1] = 0;
  v11[4] = *(_QWORD *)(a1 + 8);
  v11[3] = &unk_251351940;
  v11[5] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v32 = v11 + 3;
  *((_QWORD *)&v32 + 1) = v11;
  v30 = 0;
  v31 = 0;
  v12 = v5[1];
  v39[0] = v9;
  v39[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v28 = 0uLL;
  v29 = 0;
  v37 = (void **)&v28;
  v38 = 0;
  v15 = operator new(0x10uLL);
  *(_QWORD *)&v28 = v15;
  v29 = v15 + 2;
  *v15 = v9;
  v15[1] = v12;
  if (v12)
  {
    v16 = (unint64_t *)(v12 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_QWORD *)&v28 + 1) = v15 + 2;
  mlx::core::array::array(v40, (__int128 *)__p, v10, &v32, &v28);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = (void **)&v34;
  v38 = 0;
  v18 = operator new(0x10uLL);
  v34 = v18;
  v35 = v18;
  v36 = v18 + 2;
  v19 = v40[1];
  *v18 = v40[0];
  v18[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v35 = v18 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v34, (uint64_t)a3);
  v37 = (void **)&v34;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v37);
  mlx::core::array::~array((mlx::core::array *)v40);
  v37 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v37);
  mlx::core::array::~array((mlx::core::array *)v39);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2424AC500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  uint64_t v22;
  uint64_t v23;

  a22 = (uint64_t *)v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v23 - 72));
  a22 = &a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v23 - 88));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Log1p::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Log1p::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int **v13[2];
  _QWORD v14[3];
  char v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::Log1p::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Log1p::jvp();
  v8 = *a3;
  mlx::core::array::array<float>(v13, *(_QWORD *)(**a2 + 56), 1.0);
  mlx::core::add(v13, *a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::divide(v8, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v14[2] = a5;
  v15 = 0;
  v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  v10 = v16[1];
  *v9 = v16[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_2424AC6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Log1p::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Log1p::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Log1p::vmap();
  mlx::core::log1p(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424AC824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::LogicalNot::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::LogicalNot::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 16)
    mlx::core::LogicalNot::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::LogicalNot::jvp();
  mlx::core::zeros_like(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v6 = operator new(0x10uLL);
  *a5 = v6;
  a5[1] = v6;
  a5[2] = v6 + 2;
  v7 = v10[1];
  *v6 = v10[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a5[1] = v6 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_2424AC94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalNot::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::LogicalNot::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::LogicalNot::vmap();
  mlx::core::logical_not(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424ACA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 32)
    mlx::core::LogicalAnd::vjp();
  mlx::core::zeros_like(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v7 = operator new(0x10uLL);
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v7;
  *(_QWORD *)(a5 + 16) = v7 + 2;
  v8 = v11[1];
  *v7 = v11[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a5 + 8) = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v11);
  if (a4[1] - *a4 > 4uLL)
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (_QWORD *)(*(_QWORD *)(a5 + 8) - 16));
}

void sub_2424ACBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::LogicalAnd::jvp();
  if (a3[1] - *a3 >= 9uLL)
    mlx::core::LogicalAnd::jvp();
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424ACCD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::vmap(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 32)
    mlx::core::LogicalAnd::vmap();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 8)
    mlx::core::LogicalAnd::vmap();
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::logical_and(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424ACE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 32)
    mlx::core::LogicalOr::vjp();
  mlx::core::zeros_like(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v7 = operator new(0x10uLL);
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v7;
  *(_QWORD *)(a5 + 16) = v7 + 2;
  v8 = v11[1];
  *v7 = v11[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a5 + 8) = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v11);
  if (a4[1] - *a4 > 4uLL)
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (_QWORD *)(*(_QWORD *)(a5 + 8) - 16));
}

void sub_2424ACFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::LogicalOr::jvp();
  if (a3[1] - *a3 >= 9uLL)
    mlx::core::LogicalOr::jvp();
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424AD0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::vmap(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 32)
    mlx::core::LogicalOr::vmap();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 8)
    mlx::core::LogicalOr::vmap();
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::logical_or(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424AD280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::vjp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int *v17;
  int *v18;
  int v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  int **v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];

  v9 = *a2;
  v10 = (*a2)[1];
  v29[0] = **a2;
  v29[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v9 = *a2;
  }
  v14 = v9[2];
  v13 = v9[3];
  v28[0] = v14;
  v28[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::subtract(v29, v28, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
  mlx::core::sigmoid(v25, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v26);
  mlx::core::array::~array((mlx::core::array *)v25);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v17 = *a4;
  v18 = a4[1];
  while (v17 != v18)
  {
    v19 = *v17;
    v20 = *a3;
    if (*v17)
    {
      mlx::core::array::array<float>(v23, *(_QWORD *)(v26 + 56), 1.0);
      mlx::core::subtract(v23, &v26, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v24);
    }
    else
    {
      v24[0] = v26;
      v24[1] = v27;
      if (v27)
      {
        v21 = (unint64_t *)(v27 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
    }
    mlx::core::multiply(v20, v24, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v25);
    mlx::core::array::~array((mlx::core::array *)v25);
    mlx::core::array::~array((mlx::core::array *)v24);
    if (v19)
      mlx::core::array::~array((mlx::core::array *)v23);
    ++v17;
  }
  mlx::core::array::~array((mlx::core::array *)&v26);
  mlx::core::array::~array((mlx::core::array *)v28);
  mlx::core::array::~array((mlx::core::array *)v29);
}

void sub_2424AD488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  _QWORD v28[4];
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = (*a2)[1];
  v31[0] = **a2;
  v31[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v9 = *a2;
  }
  v14 = v9[2];
  v13 = v9[3];
  v30[0] = v14;
  v30[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlx::core::subtract(v31, v30, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v28);
  mlx::core::sigmoid(v28, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v29);
  mlx::core::array::~array((mlx::core::array *)v28);
  v28[0] = a4;
  v28[1] = a3;
  v28[2] = v29;
  v28[3] = a1;
  mlx::core::LogAddExp::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v28, 0, &v27);
  if (a4[1] - *a4 >= 5uLL)
  {
    mlx::core::LogAddExp::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v28, 1u, &v33);
    mlx::core::add(&v27, &v33, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v32);
    v17 = v32;
    v32 = 0uLL;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    v27 = v17;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v32);
    mlx::core::array::~array((mlx::core::array *)&v33);
  }
  v21 = v27;
  v33 = v27;
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v32 = a5;
  BYTE8(v32) = 0;
  v24 = operator new(0x10uLL);
  *a5 = v24;
  a5[1] = v24;
  a5[2] = v24 + 1;
  *v24 = v21;
  if (*((_QWORD *)&v21 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  a5[1] = v24 + 1;
  mlx::core::array::~array((mlx::core::array *)&v33);
  mlx::core::array::~array((mlx::core::array *)&v27);
  mlx::core::array::~array((mlx::core::array *)v29);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)v31);
}

void sub_2424AD728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  mlx::core::array::~array((mlx::core::array *)(v19 - 72));
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a15);
  mlx::core::array::~array((mlx::core::array *)&a17);
  mlx::core::array::~array((mlx::core::array *)&a19);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int **v14[2];
  _QWORD v15[2];

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(**(_QWORD **)a1 + 4 * a2);
  v8 = **(_QWORD **)(a1 + 8);
  if (v7)
  {
    mlx::core::array::array<float>(v14, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 56), 1.0);
    mlx::core::subtract(v14, *(_QWORD **)(a1 + 16), *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, v15);
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 16);
    v11 = *v9;
    v10 = v9[1];
    v15[0] = v11;
    v15[1] = v10;
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  mlx::core::multiply((_QWORD *)(v8 + 16 * a2), v15, *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, a3);
  mlx::core::array::~array((mlx::core::array *)v15);
  if (v7)
    mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_2424AD870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::logaddexp(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424AD9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Matmul::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  int *begin;
  std::vector<int>::pointer end;
  int v12;
  std::vector<int>::pointer v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t **v16;
  unsigned int *v17;
  uint64_t **v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];
  const void **v26[2];
  std::vector<int> v27;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v9 = *(_QWORD **)a3;
  std::vector<int>::vector(&v27, (uint64_t)(*(_QWORD *)(**(_QWORD **)a3 + 8) - ***(_QWORD ***)a3) >> 2);
  begin = v27.__begin_;
  end = v27.__end_;
  if (v27.__begin_ != v27.__end_)
  {
    v12 = 0;
    v13 = v27.__begin_;
    do
      *v13++ = v12++;
    while (v13 != end);
  }
  *((int32x2_t *)end - 1) = vrev64_s32(*(int32x2_t *)(end - 2));
  v14 = *(_DWORD **)a4;
  v15 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v15)
  {
    while (1)
    {
      if (*v14)
      {
        v16 = *a2;
        v20 = 0;
        v21 = 0;
        v19 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, v27.__begin_, (uint64_t)v27.__end_, v27.__end_ - v27.__begin_);
        mlx::core::transpose(v16, &v19, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
        mlx::core::matmul(v25, v9, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v26);
        mlx::core::array::~array((mlx::core::array *)v26);
        mlx::core::array::~array((mlx::core::array *)v25);
        v17 = v19;
        if (v19)
        {
          v20 = v19;
LABEL_10:
          operator delete(v17);
        }
      }
      else
      {
        v18 = *a2;
        v23 = 0;
        v24 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v27.__begin_, (uint64_t)v27.__end_, v27.__end_ - v27.__begin_);
        mlx::core::transpose(v18 + 2, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
        mlx::core::matmul(v9, v25, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v26);
        mlx::core::array::~array((mlx::core::array *)v26);
        mlx::core::array::~array((mlx::core::array *)v25);
        v17 = (unsigned int *)__p;
        if (__p)
        {
          v23 = __p;
          goto LABEL_10;
        }
      }
      if (++v14 == v15)
      {
        begin = v27.__begin_;
        break;
      }
    }
  }
  if (begin)
  {
    v27.__end_ = begin;
    operator delete(begin);
  }
}

void sub_2424ADC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::Matmul::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  const void **v20;
  unint64_t *v21;
  unint64_t v22;
  _DWORD *v23;
  void *__p;
  void *v25;
  _DWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v30[2];
  _QWORD v31[2];
  const void **v32[3];

  v32[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = **a3;
  if (v9 < 1)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v31[0] = *(_QWORD *)v8;
    v31[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v8, v9, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v31);
  }
  v13 = *a2;
  v14 = (*a3)[1];
  if (v14 < 1)
  {
    v16 = *(_QWORD *)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    v30[0] = v16;
    v30[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)(v13 + 16), v14, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v30);
  }
  mlx::core::matmul(v31, v30, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v32);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = &v27;
  LOBYTE(v25) = 0;
  v19 = operator new(0x10uLL);
  v27 = v19;
  v28 = v19;
  v29 = v19 + 2;
  v20 = v32[1];
  *v19 = v32[0];
  v19[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 1);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v28 = v19 + 2;
  v23 = operator new(4uLL);
  __p = v23;
  *v23 = 0;
  v25 = v23 + 1;
  v26 = v23 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v27, (uint64_t)&__p);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  __p = &v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)v31);
}

void sub_2424ADE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  mlx::core::array::~array((mlx::core::array *)&a18);
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::vjp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  mlx::core *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD v15[2];
  void **v16[2];
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *a2;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v7 = *(_DWORD **)a4;
  v8 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 == v8)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    do
    {
      v11 = *(mlx::core **)(a1 + 8);
      v12 = *(unsigned int *)(a1 + 16) | 0x100000000;
      if (*v7)
        mlx::core::less_equal(v6, v6 + 2, v11, v12, v16);
      else
        mlx::core::greater(v6, v6 + 2, v11, v12, v16);
      mlx::core::multiply(*a3, v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
      std::vector<mlx::core::array>::push_back[abi:ne180100](&v17, (uint64_t)v15);
      mlx::core::array::~array((mlx::core::array *)v15);
      mlx::core::array::~array((mlx::core::array *)v16);
      ++v7;
    }
    while (v7 != v8);
    v13 = v17;
    v14 = v18;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a5, v13, v14, (v14 - v13) >> 4);
  v16[0] = (void **)&v17;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v16);
}

void sub_2424AE000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, int **a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  mlx::core *v12;
  uint64_t v13;
  mlx::core *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  _QWORD *v28;
  char v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = *a2 + 2;
  v11 = **a4;
  v12 = *(mlx::core **)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 16) | 0x100000000;
  if (v11)
    mlx::core::less_equal(*a2, *a2 + 2, v12, v13, &v28);
  else
    mlx::core::greater(*a2, *a2 + 2, v12, v13, &v28);
  mlx::core::multiply(*a3, &v28, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v27);
  mlx::core::array::~array((mlx::core::array *)&v28);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 5)
  {
    v14 = *(mlx::core **)(a1 + 8);
    v15 = *(unsigned int *)(a1 + 16) | 0x100000000;
    if ((*a4)[1])
      mlx::core::less_equal(v9, v10, v14, v15, &v28);
    else
      mlx::core::greater(v9, v10, v14, v15, &v28);
    mlx::core::multiply(*a3 + 2, &v28, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
    mlx::core::array::~array((mlx::core::array *)&v28);
    mlx::core::add(&v27, v26, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v30);
    v16 = v30;
    v30 = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    v27 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v30);
    mlx::core::array::~array((mlx::core::array *)v26);
  }
  v20 = v27;
  v30 = v27;
  if (*((_QWORD *)&v27 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v28 = a5;
  v29 = 0;
  v23 = operator new(0x10uLL);
  *a5 = v23;
  a5[1] = v23;
  a5[2] = v23 + 1;
  *v23 = v20;
  if (*((_QWORD *)&v20 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  a5[1] = v23 + 1;
  mlx::core::array::~array((mlx::core::array *)&v30);
  mlx::core::array::~array((mlx::core::array *)&v27);
}

void sub_2424AE268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::maximum(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424AE404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::vjp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  mlx::core *v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v5 = *a2;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v6 = *(_DWORD **)a4;
  v7 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v7)
  {
    do
    {
      v11 = *(mlx::core **)(a1 + 8);
      v12 = *(unsigned int *)(a1 + 16) | 0x100000000;
      if (*v6)
        mlx::core::greater_equal(v5, v5 + 2, v11, v12, v14);
      else
        mlx::core::less(v5, v5 + 2, v11, v12, v14);
      mlx::core::multiply(*a3, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v13);
      mlx::core::array::~array((mlx::core::array *)v13);
      mlx::core::array::~array((mlx::core::array *)v14);
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_2424AE544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::jvp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, int **a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  mlx::core *v12;
  uint64_t v13;
  mlx::core *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  _QWORD *v28;
  char v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = *a2 + 2;
  v11 = **a4;
  v12 = *(mlx::core **)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 16) | 0x100000000;
  if (v11)
    mlx::core::greater_equal(*a2, *a2 + 2, v12, v13, &v28);
  else
    mlx::core::less(*a2, *a2 + 2, v12, v13, &v28);
  mlx::core::multiply(*a3, &v28, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v27);
  mlx::core::array::~array((mlx::core::array *)&v28);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 5)
  {
    v14 = *(mlx::core **)(a1 + 8);
    v15 = *(unsigned int *)(a1 + 16) | 0x100000000;
    if ((*a4)[1])
      mlx::core::greater_equal(v9, v10, v14, v15, &v28);
    else
      mlx::core::less(v9, v10, v14, v15, &v28);
    mlx::core::multiply(*a3 + 2, &v28, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
    mlx::core::array::~array((mlx::core::array *)&v28);
    mlx::core::add(&v27, v26, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v30);
    v16 = v30;
    v30 = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    v27 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v30);
    mlx::core::array::~array((mlx::core::array *)v26);
  }
  v20 = v27;
  v30 = v27;
  if (*((_QWORD *)&v27 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v28 = a5;
  v29 = 0;
  v23 = operator new(0x10uLL);
  *a5 = v23;
  a5[1] = v23;
  a5[2] = v23 + 1;
  *v23 = v20;
  if (*((_QWORD *)&v20 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  a5[1] = v23 + 1;
  mlx::core::array::~array((mlx::core::array *)&v30);
  mlx::core::array::~array((mlx::core::array *)&v27);
}

void sub_2424AE7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::minimum(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424AE940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD **a3@<X2>, char **a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  mlx::core::multiply(*a3, (_QWORD *)(*a2 + 16 * (1 - *(int *)*a4)), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
  if ((unint64_t)(a4[1] - *a4) >= 5)
  {
    mlx::core::multiply(*a3 + 2, (_QWORD *)(*a2 + 16 * (1 - *((int *)*a4 + 1))), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v22);
    mlx::core::add(&v20, &v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v21);
    v10 = v21;
    v21 = 0uLL;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    v20 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v21);
    mlx::core::array::~array((mlx::core::array *)&v22);
  }
  v14 = v20;
  v22 = v20;
  if (*((_QWORD *)&v20 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v21 = a5;
  BYTE8(v21) = 0;
  v17 = operator new(0x10uLL);
  *a5 = v17;
  a5[1] = v17;
  a5[2] = v17 + 1;
  *v17 = v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a5[1] = v17 + 1;
  mlx::core::array::~array((mlx::core::array *)&v22);
  mlx::core::array::~array((mlx::core::array *)&v20);
}

void sub_2424AEB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  mlx::core::array::~array((mlx::core::array *)&a14);
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD **a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  int *v5;
  int *v6;
  _QWORD v11[2];

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v5 = *a4;
  v6 = a4[1];
  if (*a4 != v6)
  {
    do
    {
      mlx::core::multiply((_QWORD *)(*a2 + 16 * (1 - *v5)), *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v11);
      mlx::core::array::~array((mlx::core::array *)v11);
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_2424AEC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::multiply(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424AEDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Select::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int *v7;
  unint64_t v8;
  mlx::core *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  _QWORD v21[4];
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 48)
    mlx::core::Select::jvp();
  if (a3[1] - *a3 != 48)
    mlx::core::Select::jvp();
  v21[0] = a4;
  v21[1] = a2;
  v21[2] = a1;
  v21[3] = a3;
  mlx::core::Select::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v21, **(_DWORD **)a4, &v20);
  v7 = *(int **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 5uLL)
  {
    v8 = 1;
    do
    {
      mlx::core::Select::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v21, v7[v8], &v23);
      mlx::core::add(&v20, &v23, v9, 0, &v22);
      v10 = v22;
      v22 = 0uLL;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      v20 = v10;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&v22);
      mlx::core::array::~array((mlx::core::array *)&v23);
      ++v8;
      v7 = *(int **)a4;
    }
    while (v8 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  }
  v14 = v20;
  v23 = v20;
  if (*((_QWORD *)&v20 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v22 = a5;
  BYTE8(v22) = 0;
  v17 = operator new(0x10uLL);
  *a5 = v17;
  a5[1] = v17;
  a5[2] = v17 + 1;
  *v17 = v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a5[1] = v17 + 1;
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)&v20);
}

void sub_2424AEFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a15);
  mlx::core::array::~array((mlx::core::array *)(v15 - 56));
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Select::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  mlx::core::array *v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(**(_QWORD **)a1 + 4 * a2);
  if (v6 == 1)
  {
    v7 = **(uint64_t ***)(a1 + 8);
    v9 = *v7;
    v8 = v7[1];
    v14[0] = v9;
    v14[1] = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    mlx::core::astype(v14, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 16) + 56), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v15);
    mlx::core::multiply(v15, (_QWORD *)(**(_QWORD **)(a1 + 24) + 16), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)v15);
    v12 = (mlx::core::array *)v14;
  }
  else
  {
    if (!v6)
    {
      mlx::core::zeros_like(**(uint64_t ***)(a1 + 8), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
      return;
    }
    mlx::core::logical_not(**(uint64_t ***)(a1 + 8), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v13);
    mlx::core::astype(v13, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 32) + 56), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v15);
    mlx::core::multiply(v15, (_QWORD *)(**(_QWORD **)(a1 + 24) + 32), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)v15);
    v12 = (mlx::core::array *)v13;
  }
  mlx::core::array::~array(v12);
}

void sub_2424AF188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a13);
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Select::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD **a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  int *v7;
  int *v8;
  int v11;
  mlx::core::array *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  if ((char *)a2[1] - (char *)*a2 != 48)
    mlx::core::Select::vjp();
  if ((char *)a3[1] - (char *)*a3 != 16)
    mlx::core::Select::vjp();
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v7 = *a4;
  v8 = a4[1];
  if (*a4 != v8)
  {
    while (1)
    {
      v11 = *v7;
      if (*v7 == 2)
        break;
      if (v11 == 1)
      {
        v13 = (*a2)[1];
        v17[0] = **a2;
        v17[1] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        mlx::core::astype(v17, *(_QWORD *)(**a3 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
        mlx::core::multiply(v18, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v19);
        mlx::core::array::~array((mlx::core::array *)v19);
        mlx::core::array::~array((mlx::core::array *)v18);
        v12 = (mlx::core::array *)v17;
        goto LABEL_13;
      }
      if (!v11)
      {
        mlx::core::zeros_like(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v19);
        v12 = (mlx::core::array *)v19;
LABEL_13:
        mlx::core::array::~array(v12);
      }
      if (++v7 == v8)
        return;
    }
    mlx::core::logical_not(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
    mlx::core::astype(v16, *(_QWORD *)(**a3 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
    mlx::core::multiply(v18, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v19);
    mlx::core::array::~array((mlx::core::array *)v19);
    mlx::core::array::~array((mlx::core::array *)v18);
    v12 = (mlx::core::array *)v16;
    goto LABEL_13;
  }
}

void sub_2424AF398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void mlx::core::Select::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  std::vector<int>::value_type v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v56;
  std::vector<int>::pointer v57;
  int *v58;
  char *v59;
  std::vector<int>::const_iterator v60;
  std::vector<int>::pointer v61;
  std::vector<int>::pointer v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  std::vector<int>::pointer v71;
  std::vector<int>::pointer v72;
  int v73;
  std::vector<int>::pointer v74;
  int *v75;
  char *v76;
  std::vector<int>::const_iterator v77;
  std::vector<int>::pointer v78;
  std::vector<int>::pointer v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  _DWORD *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  std::vector<int>::value_type v109[6];
  __int128 v110;
  std::vector<int>::value_type __x[2];
  void *v112;
  _DWORD *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  const void **v117[2];
  uint64_t v118;
  int v119;
  int v120;
  __int128 v121;
  __int128 v122;
  std::vector<int> v123;
  __int128 v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 48)
    mlx::core::Select::vmap();
  v6 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 12)
    mlx::core::Select::vmap();
  if (*v6 == -1 && v6[1] == -1 && v6[2] == -1)
  {
    v96 = v5[1];
    *(_QWORD *)&v105 = *v5;
    *((_QWORD *)&v105 + 1) = v96;
    if (v96)
    {
      v97 = (unint64_t *)(v96 + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = v5[3];
    *(_QWORD *)&v106 = v5[2];
    *((_QWORD *)&v106 + 1) = v99;
    if (v99)
    {
      v100 = (unint64_t *)(v99 + 8);
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    v102 = v5[5];
    *(_QWORD *)&v107 = v5[4];
    *((_QWORD *)&v107 + 1) = v102;
    if (v102)
    {
      v103 = (unint64_t *)(v102 + 8);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v108 = -1;
  }
  else
  {
    v8 = *v5;
    v9 = v5[1];
    *(_QWORD *)&v124 = *v5;
    *((_QWORD *)&v124 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v5 = *(_QWORD **)a2;
    }
    v12 = (_QWORD *)v5[2];
    v13 = v5[3];
    *(_QWORD *)&v122 = v12;
    *((_QWORD *)&v122 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v5 = *(_QWORD **)a2;
    }
    v17 = (_QWORD *)v5[4];
    v16 = v5[5];
    *(_QWORD *)&v121 = v17;
    *((_QWORD *)&v121 + 1) = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8;
    v21 = v20 >> 2;
    v22 = **a3;
    v23 = (*a3)[1];
    if (v22 == -1)
      ++v21;
    v24 = v12[1] - *v12;
    v25 = v24 >> 2;
    if (v23 == -1)
      ++v25;
    v26 = v17[1] - *v17;
    v27 = v26 >> 2;
    v28 = (*a3)[2];
    if (v28 == -1)
      ++v27;
    if (v21 <= v25)
      v21 = v25;
    if (v21 <= v27)
      v29 = v27;
    else
      v29 = v21;
    v30 = *(_QWORD *)(a1 + 8);
    v119 = *(_DWORD *)(a1 + 16);
    v120 = v29;
    v117[0] = (const void **)v8;
    v117[1] = *((const void ***)&v124 + 1);
    v118 = v30;
    if (*((_QWORD *)&v124 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = *(_OWORD *)&v123.__begin_;
    v123.__begin_ = 0;
    v123.__end_ = 0;
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
    v124 = v33;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v123);
    mlx::core::array::~array((mlx::core::array *)v117);
    v116 = v122;
    if (*((_QWORD *)&v122 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = *(_OWORD *)&v123.__begin_;
    v123.__begin_ = 0;
    v123.__end_ = 0;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
    v122 = v39;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v123);
    mlx::core::array::~array((mlx::core::array *)&v116);
    v115 = v121;
    if (*((_QWORD *)&v121 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v22 + v29 - ((unint64_t)v20 >> 2);
    v46 = v23 + v29 - ((unint64_t)v24 >> 2);
    v47 = *(_OWORD *)&v123.__begin_;
    v123.__begin_ = 0;
    v123.__end_ = 0;
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    v121 = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v123);
    mlx::core::array::~array((mlx::core::array *)&v115);
    if (v45 != v46)
    {
      v51 = (_QWORD *)v122;
      v114 = v122;
      if (*((_QWORD *)&v122 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      __x[0] = v46;
      std::vector<int>::vector(&v123, (uint64_t)(v51[1] - *v51) >> 2);
      begin = v123.__begin_;
      end = v123.__end_;
      if (v123.__begin_ != v123.__end_)
      {
        v56 = 0;
        v57 = v123.__begin_;
        do
          *v57++ = v56++;
        while (v57 != end);
      }
      v58 = &begin[v46];
      v59 = (char *)((char *)end - (char *)(v58 + 1));
      if (end != v58 + 1)
      {
        memmove(&begin[v46], v58 + 1, (char *)end - (char *)(v58 + 1));
        begin = v123.__begin_;
      }
      v123.__end_ = (std::vector<int>::pointer)&v59[(_QWORD)v58];
      v60.__i_ = &begin[v45];
      std::vector<int>::insert(&v123, v60, __x);
      v61 = v123.__begin_;
      v62 = v123.__end_;
      mlx::core::array::~array((mlx::core::array *)&v114);
      v112 = 0;
      v113 = 0;
      *(_QWORD *)__x = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, v61, (uint64_t)v62, v62 - v61);
      mlx::core::transpose((uint64_t **)&v122, (unsigned int **)__x, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v123);
      v63 = *(_OWORD *)&v123.__begin_;
      v123.__begin_ = 0;
      v123.__end_ = 0;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      v122 = v63;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&v123);
      if (*(_QWORD *)__x)
      {
        v112 = *(void **)__x;
        operator delete(*(void **)__x);
      }
      if (v61)
        operator delete(v61);
    }
    v67 = v28 + v29 - ((unint64_t)v26 >> 2);
    if (v45 != v67)
    {
      v68 = (_QWORD *)v121;
      v110 = v121;
      if (*((_QWORD *)&v121 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v109[0] = v28 + v29 - ((unint64_t)v26 >> 2);
      std::vector<int>::vector(&v123, (uint64_t)(v68[1] - *v68) >> 2);
      v71 = v123.__begin_;
      v72 = v123.__end_;
      if (v123.__begin_ != v123.__end_)
      {
        v73 = 0;
        v74 = v123.__begin_;
        do
          *v74++ = v73++;
        while (v74 != v72);
      }
      v75 = &v71[v67];
      v76 = (char *)((char *)v72 - (char *)(v75 + 1));
      if (v72 != v75 + 1)
      {
        memmove(&v71[v67], v75 + 1, (char *)v72 - (char *)(v75 + 1));
        v71 = v123.__begin_;
      }
      v123.__end_ = (std::vector<int>::pointer)&v76[(_QWORD)v75];
      v77.__i_ = &v71[v45];
      std::vector<int>::insert(&v123, v77, v109);
      v78 = v123.__begin_;
      v79 = v123.__end_;
      mlx::core::array::~array((mlx::core::array *)&v110);
      memset(&v123, 0, sizeof(v123));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v123, v78, (uint64_t)v79, v79 - v78);
      mlx::core::transpose((uint64_t **)&v121, (unsigned int **)&v123, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v109);
      v80 = *(_OWORD *)v109;
      memset(v109, 0, 16);
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      v121 = v80;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      mlx::core::array::~array((mlx::core::array *)v109);
      if (v123.__begin_)
      {
        v123.__end_ = v123.__begin_;
        operator delete(v123.__begin_);
      }
      if (v78)
        operator delete(v78);
    }
    v105 = v124;
    if (*((_QWORD *)&v124 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v106 = v122;
    if (*((_QWORD *)&v122 + 1))
    {
      v86 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v107 = v121;
    if (*((_QWORD *)&v121 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    v108 = v45;
    mlx::core::array::~array((mlx::core::array *)&v121);
    mlx::core::array::~array((mlx::core::array *)&v122);
    mlx::core::array::~array((mlx::core::array *)&v124);
  }
  mlx::core::where(&v105, &v106, &v107, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v124);
  memset(&v123, 0, sizeof(v123));
  *(_QWORD *)__x = &v123;
  LOBYTE(v112) = 0;
  v90 = (int *)operator new(0x10uLL);
  v123.__begin_ = v90;
  v123.__end_ = v90;
  v123.__end_cap_.__value_ = v90 + 4;
  v91 = *((_QWORD *)&v124 + 1);
  *(_QWORD *)v90 = v124;
  *((_QWORD *)v90 + 1) = v91;
  if (v91)
  {
    v92 = (unint64_t *)(v91 + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v123.__end_ = v90 + 4;
  v94 = v108;
  v95 = operator new(4uLL);
  *(_QWORD *)__x = v95;
  *v95 = v94;
  v112 = v95 + 1;
  v113 = v95 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v123, (uint64_t)__x);
  if (*(_QWORD *)__x)
  {
    v112 = *(void **)__x;
    operator delete(*(void **)__x);
  }
  *(_QWORD *)__x = &v123;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  mlx::core::array::~array((mlx::core::array *)&v124);
  mlx::core::array::~array((mlx::core::array *)&v107);
  mlx::core::array::~array((mlx::core::array *)&v106);
  mlx::core::array::~array((mlx::core::array *)&v105);
}

void sub_2424AFBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  v34 = *(void **)(v32 - 160);
  if (v34)
  {
    *(_QWORD *)(v32 - 152) = v34;
    operator delete(v34);
  }
  if (v31)
    operator delete(v31);
  mlx::core::array::~array((mlx::core::array *)(v32 - 192));
  mlx::core::array::~array((mlx::core::array *)(v32 - 176));
  mlx::core::array::~array((mlx::core::array *)(v32 - 128));
  _Unwind_Resume(a1);
}

void std::tuple<mlx::core::array,mlx::core::array,mlx::core::array,int>::~tuple(uint64_t a1)
{
  mlx::core::array::~array((mlx::core::array *)(a1 + 32));
  mlx::core::array::~array((mlx::core::array *)(a1 + 16));
  mlx::core::array::~array((mlx::core::array *)a1);
}

uint64_t mlx::core::Negative::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Negative::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 16)
    mlx::core::Negative::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Negative::jvp();
  mlx::core::negative(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v6 = operator new(0x10uLL);
  *a5 = v6;
  a5[1] = v6;
  a5[2] = v6 + 2;
  v7 = v10[1];
  *v6 = v10[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a5[1] = v6 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_2424AFE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Negative::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Negative::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Negative::vmap();
  mlx::core::negative(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424AFF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[2];
  _QWORD v16[3];
  void **v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v7 = (mlx::core **)(a1 + 8);
  mlx::core::not_equal(v15, v16, *v7, *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v17 = (void **)&v12;
  v18 = 0;
  v8 = operator new(0x10uLL);
  v12 = v8;
  v13 = v8;
  v14 = v8 + 2;
  v9 = v19[1];
  *v8 = v19[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = v8 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v12, (uint64_t)a3);
  v17 = (void **)&v12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B00B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  mlx::core::array *v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)(v6 - 72));
  mlx::core::array::~array(v5);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  _QWORD v9[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424B018C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::jvp(uint64_t a1@<X0>, _QWORD ***a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::vector<int> __p;
  _QWORD *v10;
  char v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v12[1];
  *v5 = v12[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2424B0298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::Pad::vjp(uint64_t a1@<X0>, const void ****a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  const void ***v6;
  std::vector<int>::size_type v7;
  const void **v8;
  int *v9;
  int *v10;
  uint64_t v11;
  std::vector<int>::pointer begin;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  const void **v23;
  uint64_t v24;
  std::vector<int>::value_type __x[2];
  _DWORD *v26;
  uint64_t v27;
  std::vector<int> v28;
  _QWORD *v29;
  char v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  if (a3[1] - *a3 != 4 || *(_DWORD *)*a3)
    mlx::core::Pad::vjp();
  v6 = *a2;
  v7 = ((_BYTE *)(**a2)[1] - (_BYTE *)***a2) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v28, v7, __x);
  v8 = *v6;
  *(_QWORD *)__x = 0;
  v26 = 0;
  v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *v8, (uint64_t)v8[1], ((_BYTE *)v8[1] - (_BYTE *)*v8) >> 2);
  v9 = *(int **)(a1 + 24);
  v10 = *(int **)(a1 + 32);
  if (v9 != v10)
  {
    v11 = *(_QWORD *)(a1 + 48);
    begin = v28.__begin_;
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_DWORD **)__x;
    do
    {
      v15 = *v9++;
      begin[v15] = *(_DWORD *)(v11 + 4 * v15);
      v14[v15] -= *(_DWORD *)(v13 + 4 * v15);
    }
    while (v9 != v10);
  }
  mlx::core::slice(v6, (uint64_t)&v28, (uint64_t)__x, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v23);
  v17 = v23;
  v16 = v24;
  v31[0] = v23;
  v31[1] = v24;
  if (v24)
  {
    v18 = (unint64_t *)(v24 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v29 = a4;
  v30 = 0;
  v20 = operator new(0x10uLL);
  *a4 = v20;
  a4[1] = v20;
  a4[2] = v20 + 2;
  *v20 = v17;
  v20[1] = v16;
  if (v16)
  {
    v21 = (unint64_t *)(v16 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  a4[1] = v20 + 2;
  mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::array::~array((mlx::core::array *)&v23);
  if (*(_QWORD *)__x)
  {
    v26 = *(_DWORD **)__x;
    operator delete(*(void **)__x);
  }
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
}

void sub_2424B0488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 56));
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Pad::jvp(uint64_t a1@<X0>, const void ****a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  const void ***v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int **v11[3];
  char v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (a3[1] - *a3 != 4 || *(_DWORD *)*a3)
    mlx::core::Pad::jvp();
  v6 = *a2;
  mlx::core::array::array<int>(v11, 0, (uint64_t)(**a2)[7]);
  mlx::core::pad(v6, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 72), v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v11[2] = (int **)a4;
  v12 = 0;
  v7 = operator new(0x10uLL);
  *(_QWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v7 + 2;
  v8 = v13[1];
  *v7 = v13[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a4 + 8) = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_2424B05F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Pad::vmap()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "Pad vmap is NYI.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424B0668(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Pad::is_equivalent(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  size_t v5;
  const void *v6;
  const void *v7;
  size_t v8;
  const void *v9;
  const void *v10;
  size_t v11;
  const void *v12;

  v4 = (const void *)a2[3];
  v5 = a2[4] - (_QWORD)v4;
  v6 = (const void *)a1[3];
  if (v5 == a1[4] - (_QWORD)v6
    && !memcmp(v4, v6, v5)
    && (v7 = (const void *)a2[6], v8 = a2[7] - (_QWORD)v7, v9 = (const void *)a1[6], v8 == a1[7] - (_QWORD)v9)
    && !memcmp(v7, v9, v8)
    && (v10 = (const void *)a2[9], v11 = a2[10] - (_QWORD)v10, v12 = (const void *)a1[9], v11 == a1[10] - (_QWORD)v12))
  {
    return memcmp(v10, v12, v11) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlx::core::Partition::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Partition::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int *v6;
  uint64_t v7;
  const void **v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  const void **v14;
  uint64_t v15;
  _QWORD v16[3];
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Partition::jvp();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 16)
    mlx::core::Partition::jvp();
  v6 = (int *)(a1 + 24);
  mlx::core::argpartition(*(mlx::core::array **)a2, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  mlx::core::take_along_axis(*(mlx::core::array **)a3, v16, *v6, *((mlx::core **)v6 - 2), *(v6 - 2) | 0x100000000, &v14);
  v8 = v14;
  v7 = v15;
  v18[0] = v14;
  v18[1] = v15;
  if (v15)
  {
    v9 = (unint64_t *)(v15 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v16[2] = a4;
  v17 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 2;
  *v11 = v8;
  v11[1] = v7;
  if (v7)
  {
    v12 = (unint64_t *)(v7 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 2;
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)&v14);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424B086C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Partition::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void ***v6;
  int v8;
  int v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(const void ****)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Partition::vmap();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 4)
    mlx::core::Partition::vmap();
  v8 = **(_DWORD **)a3;
  v9 = *(_DWORD *)(a1 + 24);
  if (v8 >= 0 && v8 <= v9)
    v11 = v9 + 1;
  else
    v11 = *(_DWORD *)(a1 + 24);
  mlx::core::partition(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (void **)&v16;
  v20 = 0;
  v12 = operator new(0x10uLL);
  v16 = v12;
  v17 = v12;
  v18 = v12 + 2;
  v13 = v21[1];
  *v12 = v21[0];
  v12[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, a3);
  v19 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v19);
  mlx::core::array::~array((mlx::core::array *)v21);
}

void sub_2424B09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Partition::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::Power::vjp(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X3>, _QWORD **a5@<X4>, uint64_t a6@<X8>)
{
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v13;
  mlx::core::array *v14;
  uint64_t v15;
  int **v16[2];
  int **v17[2];
  _QWORD v18[2];
  __int128 v19;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  v6 = *(_DWORD **)a4;
  v7 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v7)
  {
    do
    {
      if (*v6)
      {
        v13 = *a5;
        mlx::core::log(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
        mlx::core::multiply(v18, *a5, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v19);
        mlx::core::array::~array((mlx::core::array *)v18);
        mlx::core::array::array<float>(v17, *(_QWORD *)(*v13 + 56), 0.0);
        mlx::core::where(v13, &v19, v17, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)v18);
        mlx::core::array::~array((mlx::core::array *)v18);
        mlx::core::array::~array((mlx::core::array *)v17);
        v14 = (mlx::core::array *)&v19;
      }
      else
      {
        v15 = (uint64_t)*a2;
        mlx::core::array::array<int>(v16, 1, *(_QWORD *)(**a2 + 56));
        mlx::core::subtract((_QWORD *)(v15 + 16), v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
        mlx::core::power((const void ***)v15, (const void ***)v17, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
        mlx::core::multiply(v18, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v19);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&v19);
        mlx::core::array::~array((mlx::core::array *)&v19);
        mlx::core::array::~array((mlx::core::array *)v18);
        mlx::core::array::~array((mlx::core::array *)v17);
        v14 = (mlx::core::array *)v16;
      }
      mlx::core::array::~array(v14);
      mlx::core::multiply(*a3, (_QWORD *)(*(_QWORD *)(a6 + 8) - 16), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v19);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](*(_QWORD *)(a6 + 8) - 16, &v19);
      mlx::core::array::~array((mlx::core::array *)&v19);
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_2424B0C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Power::jvp(uint64_t a1@<X0>, const void ****a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t *v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void **v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  _QWORD v28[2];
  void ***v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  mlx::core::power(*a2, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v26);
  v11 = v26;
  v10 = v27;
  v28[0] = v26;
  v28[1] = v27;
  if (v27)
  {
    v12 = v27 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v29 = &v21;
  LOBYTE(v30) = 0;
  v14 = (void **)operator new(0x10uLL);
  v21 = v14;
  v23 = (char *)(v14 + 2);
  *v14 = v11;
  v14[1] = v10;
  if (v10)
  {
    v15 = v10 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v22 = (char *)(v14 + 2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, const void ****, uint64_t, _QWORD *, void ***))(*(_QWORD *)a1 + 24))(&v24, a1, a2, a3, a4, &v21);
  v29 = &v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  mlx::core::array::~array((mlx::core::array *)v28);
  if (a4[1] - *a4 < 5uLL)
  {
    *(_OWORD *)a5 = v24;
    *(_QWORD *)(a5 + 16) = v25;
    v25 = 0;
    v24 = 0uLL;
  }
  else
  {
    mlx::core::add((_QWORD *)v24, (_QWORD *)(v24 + 16), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v29);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v21 = (void **)a5;
    LOBYTE(v22) = 0;
    v17 = operator new(0x10uLL);
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v17;
    *(_QWORD *)(a5 + 16) = v17 + 2;
    v18 = v30;
    *v17 = v29;
    v17[1] = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    *(_QWORD *)(a5 + 8) = v17 + 2;
    mlx::core::array::~array((mlx::core::array *)&v29);
  }
  v21 = (void **)&v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v21);
  mlx::core::array::~array((mlx::core::array *)&v26);
}

void sub_2424B0E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va3);
  va_copy((va_list)v3, va1);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::Power::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const void **v19[2];
  const void **v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::power(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424B1038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::RandomBits::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  std::vector<int>::size_type v13;
  uint64_t v14;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v17;
  std::vector<int>::pointer v18;
  int v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::vector<int>::const_iterator v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  _OWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  _DWORD *v46;
  void *v47[2];
  _DWORD *v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  _QWORD *v52;
  __int128 v53;
  void *v54[3];
  __int128 v55;
  void *__p;
  void *v57;
  uint64_t v58;
  std::vector<int> v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if (a2[1] - *a2 != 16)
    mlx::core::RandomBits::vmap();
  v6 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 4)
    mlx::core::RandomBits::vmap();
  v8 = *(_QWORD **)v5;
  v9 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)&v60 = v8;
  *((_QWORD *)&v60 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v6 = *a3;
  }
  v12 = *v6;
  v13 = (uint64_t)(v8[1] - *v8) >> 2;
  if (v13 - 1 == *v6)
  {
    std::vector<int>::vector(&v59, v13);
    v14 = (int)v12;
    begin = v59.__begin_;
    end = v59.__end_;
    if (v59.__begin_ != v59.__end_)
    {
      v17 = 0;
      v18 = v59.__begin_;
      do
        *v18++ = v17++;
      while (v18 != end);
    }
    --v12;
    v19 = begin[v14];
    begin[v14] = begin[v12];
    begin[v12] = v19;
    v57 = 0;
    v58 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)end, end - begin);
    mlx::core::transpose((uint64_t **)&v60, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
    v20 = v49;
    v49 = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    v60 = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v49);
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
    if (v59.__begin_)
    {
      v59.__end_ = v59.__begin_;
      operator delete(v59.__begin_);
    }
  }
  memset(&v59, 0, sizeof(v59));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  if ((v12 & 0x80000000) == 0)
  {
    v24.__i_ = &v59.__begin_[v12];
    std::vector<int>::insert(&v59, v24, (std::vector<int>::const_reference)(*(_QWORD *)v60 + 4 * v12));
  }
  v25 = *(_DWORD *)(a1 + 48);
  memset(v54, 0, sizeof(v54));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v54, v59.__begin_, (uint64_t)v59.__end_, v59.__end_ - v59.__begin_);
  if (v25 == 1)
    v26 = 0x100000001;
  else
    v26 = 0x400000002;
  std::allocate_shared[abi:ne180100]<mlx::core::RandomBits,std::allocator<mlx::core::RandomBits>,mlx::core::Stream const&,std::vector<int> &,int &,void>((uint64_t *)(a1 + 8), (uint64_t)&v59, (int *)(a1 + 48), v47);
  v53 = *(_OWORD *)v47;
  v47[0] = 0;
  v47[1] = 0;
  v27 = v60;
  v61 = v60;
  if (*((_QWORD *)&v60 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v51 = 0uLL;
  v52 = 0;
  *(_QWORD *)&v49 = &v51;
  BYTE8(v49) = 0;
  v30 = operator new(0x10uLL);
  *(_QWORD *)&v51 = v30;
  *((_QWORD *)&v51 + 1) = v30;
  v52 = v30 + 2;
  v31 = *((_QWORD *)&v61 + 1);
  *v30 = v27;
  v30[1] = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *((_QWORD *)&v51 + 1) = v30 + 2;
  mlx::core::array::array(&v55, (__int128 *)v54, v26, &v53, &v51);
  *(_QWORD *)&v49 = &v51;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  mlx::core::array::~array((mlx::core::array *)&v61);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)v47[1];
  if (v47[1])
  {
    v38 = (unint64_t *)((char *)v47[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  v40 = v55;
  v61 = v55;
  if (*((_QWORD *)&v55 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v49 = 0uLL;
  v50 = 0;
  v47[0] = &v49;
  LOBYTE(v47[1]) = 0;
  v43 = operator new(0x10uLL);
  *(_QWORD *)&v49 = v43;
  v50 = v43 + 1;
  *v43 = v40;
  if (*((_QWORD *)&v40 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  *((_QWORD *)&v49 + 1) = v43 + 1;
  v46 = operator new(4uLL);
  v47[0] = v46;
  *v46 = v12;
  v47[1] = v46 + 1;
  v48 = v46 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)&v49, (uint64_t)v47);
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  v47[0] = &v49;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
  mlx::core::array::~array((mlx::core::array *)&v61);
  mlx::core::array::~array((mlx::core::array *)&v55);
  if (v59.__begin_)
  {
    v59.__end_ = v59.__begin_;
    operator delete(v59.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)&v60);
}

void sub_2424B14DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  if (__p)
    operator delete(__p);
  v30 = *(void **)(v28 - 120);
  if (v30)
  {
    *(_QWORD *)(v28 - 112) = v30;
    operator delete(v30);
  }
  mlx::core::array::~array((mlx::core::array *)(v28 - 96));
  _Unwind_Resume(a1);
}

BOOL mlx::core::RandomBits::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v3 = a1 + 24;
  v2 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 24;
  v5 = *(const void **)(a2 + 24);
  return v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

void mlx::core::Reshape::vmap(uint64_t a1@<X0>, const void ****a2@<X1>, std::vector<int>::value_type **a3@<X2>, uint64_t a4@<X8>)
{
  const void ***v6;
  std::vector<int>::const_iterator v7;
  std::vector<int>::pointer end;
  int v9;
  std::vector<int>::pointer begin;
  const int *v11;
  int64_t v12;
  std::vector<int>::const_iterator v13;
  const void ***v14;
  const void **v15;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  void *v19;
  int *v20;
  void **v21;
  unint64_t *v22;
  unint64_t v23;
  std::vector<int>::value_type v24;
  _DWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const void ***v34;
  void *__p;
  void *v36;
  uint64_t v37;
  const void **v38[2];
  std::vector<int> v39;
  std::vector<int>::value_type __x;
  void **v41;
  void **v42;
  char *v43;
  const void **v44[3];

  v44[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  v6 = *a2;
  __x = **a3;
  if (__x < 0)
  {
    v27 = 0;
    v28 = 0;
    v26 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    mlx::core::reshape(v6, (uint64_t)&v26, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v41);
    memset(&v39, 0, sizeof(v39));
    v32 = &v39;
    LOBYTE(v33) = 0;
    v20 = (int *)operator new(0x10uLL);
    v39.__begin_ = v20;
    v39.__end_ = v20;
    v39.__end_cap_.__value_ = v20 + 4;
    v21 = v42;
    *(_QWORD *)v20 = v41;
    *((_QWORD *)v20 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 1);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v39.__end_ = v20 + 4;
    v24 = __x;
    v25 = operator new(4uLL);
    v32 = v25;
    *v25 = v24;
    v33 = v25 + 1;
    v34 = (const void ***)(v25 + 1);
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v39, (uint64_t)&v32);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    v32 = &v39;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
    mlx::core::array::~array((mlx::core::array *)&v41);
    v19 = v26;
    if (v26)
    {
      v27 = v26;
      goto LABEL_25;
    }
  }
  else
  {
    std::vector<int>::vector(&v39, ((_BYTE *)(*v6)[1] - (_BYTE *)**v6) >> 2);
    v7.__i_ = v39.__begin_;
    end = v39.__end_;
    if (v39.__begin_ != v39.__end_)
    {
      v9 = 0;
      begin = v39.__begin_;
      do
        *begin++ = v9++;
      while (begin != end);
    }
    v11 = &v7.__i_[__x];
    v12 = (char *)end - (char *)(v11 + 1);
    if (end != v11 + 1)
    {
      memmove((void *)&v7.__i_[__x], v11 + 1, (char *)end - (char *)(v11 + 1));
      v7.__i_ = v39.__begin_;
    }
    v39.__end_ = (std::vector<int>::pointer)((char *)v11 + v12);
    std::vector<int>::insert(&v39, v7, &__x);
    v36 = 0;
    v37 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v39.__begin_, (uint64_t)v39.__end_, v39.__end_ - v39.__begin_);
    mlx::core::transpose((uint64_t **)v6, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v38);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    v13.__i_ = *(std::__wrap_iter<const int *>::iterator_type *)(a1 + 24);
    std::vector<int>::insert((std::vector<int> *)(a1 + 24), v13, (std::vector<int>::const_reference)**v6 + __x);
    v30 = 0;
    v31 = 0;
    v29 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    mlx::core::reshape(v38, (uint64_t)&v29, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v41 = &v32;
    LOBYTE(v42) = 0;
    v14 = (const void ***)operator new(0x10uLL);
    v32 = v14;
    v33 = v14;
    v34 = v14 + 2;
    v15 = v44[1];
    *v14 = v44[0];
    v14[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v33 = v14 + 2;
    v18 = (void **)operator new(4uLL);
    v41 = v18;
    *(_DWORD *)v18 = 0;
    v42 = (void **)((char *)v18 + 4);
    v43 = (char *)v18 + 4;
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)&v32, (uint64_t)&v41);
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v41 = &v32;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v41);
    mlx::core::array::~array((mlx::core::array *)v44);
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    mlx::core::array::~array((mlx::core::array *)v38);
    v19 = v39.__begin_;
    if (v39.__begin_)
    {
      v39.__end_ = v39.__begin_;
LABEL_25:
      operator delete(v19);
    }
  }
}

void sub_2424B1930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  __p = &a23;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v24 - 96));
  if (a9)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, const void ****a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  const void ***v7;
  uint64_t v8;
  _QWORD *v9;
  const void **v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  const void **v18[3];

  v18[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::Reshape::vjp();
  if (a4[1] - *a4 != 4)
    mlx::core::Reshape::vjp();
  if (*(_DWORD *)*a4)
    mlx::core::Reshape::vjp();
  v7 = *a3;
  v8 = **a2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  mlx::core::reshape(v7, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v16 = a5;
  v17 = 0;
  v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  v10 = v18[1];
  *v9 = v18[0];
  v9[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v18);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_2424B1B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, const void ****a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  const void ***v7;
  _QWORD *v8;
  const void **v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  const void **v17[3];

  v17[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 16)
    mlx::core::Reshape::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Reshape::jvp();
  if (*(_DWORD *)*a4)
    mlx::core::Reshape::jvp();
  v7 = *a3;
  v13 = 0;
  v14 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  mlx::core::reshape(v7, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v15 = a5;
  v16 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v17[1];
  *v8 = v17[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_2424B1CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Reshape::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v3 = a1 + 24;
  v2 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 24;
  v5 = *(const void **)(a2 + 24);
  return v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

void mlx::core::Reduce::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, const void ****a3@<X2>, uint64_t **a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  int *v13;
  int *v14;
  _DWORD *v15;
  int *v16;
  uint64_t v17;
  const void ***v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  int *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *end;
  unint64_t *p_shared_owners;
  unint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::vector<int>::pointer v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  _QWORD *v68;
  std::vector<int>::pointer v69;
  unint64_t *v70;
  unint64_t v71;
  char *v72;
  int v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  _DWORD *v83;
  _DWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  std::vector<int>::pointer begin;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  void *exception;
  const void ***v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  __int128 v134;
  void *v135;
  void *v136;
  uint64_t v137;
  void *v138;
  _BYTE *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  void *v144;
  _DWORD *v145;
  unint64_t v146;
  __int128 __p;
  char *v148;
  mlx::core **v149;
  mlx::core *v150;
  unsigned int v151;
  void *v152;
  void *v153;
  uint64_t v154;
  _DWORD *v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t *v158[2];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  std::vector<int> v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v9 = **a2;
  v10 = (*a2)[1];
  v158[0] = v9;
  v158[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v155 = 0;
  v156 = 0;
  v157 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v155, (const void *)*v9, v9[1], (v9[1] - *v9) >> 2);
  v13 = *(int **)(a1 + 24);
  v14 = *(int **)(a1 + 32);
  if (v13 != v14)
  {
    v15 = v155;
    v16 = *(int **)(a1 + 24);
    do
    {
      v17 = *v16++;
      v15[v17] = 1;
    }
    while (v16 != v14);
  }
  v18 = *a3;
  v19 = *(_DWORD *)(a1 + 20);
  if ((v19 - 4) < 2)
  {
    v47 = **a4;
    v48 = (int *)(*a4)[1];
    v162.__begin_ = (std::vector<int>::pointer)v47;
    v162.__end_ = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 2);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    if (*(_QWORD *)(v47 + 8) - *(_QWORD *)v47 != v158[0][1] - *v158[0])
    {
      mlx::core::expand_dims((const void ***)&v162, (int **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&__p);
      v51 = __p;
      __p = 0uLL;
      end = (std::__shared_weak_count *)v162.__end_;
      *(_OWORD *)&v162.__begin_ = v51;
      if (end)
      {
        p_shared_owners = (unint64_t *)&end->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
          std::__shared_weak_count::__release_weak(end);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&__p);
    }
    mlx::core::equal(v158, &v162, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v144);
    mlx::core::sum((uint64_t)&v144, a1 + 24, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)&v138);
    v120 = 0;
    v121 = 0;
    v119 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v119, v155, (uint64_t)v156, (v156 - (_BYTE *)v155) >> 2);
    mlx::core::reshape(v18, (uint64_t)&v119, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v159);
    if (v119)
    {
      v120 = v119;
      operator delete(v119);
    }
    mlx::core::divide(&v159, &v138, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__p);
    v55 = __p;
    __p = 0uLL;
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
    v159 = v55;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&__p);
    mlx::core::multiply(&v159, &v144, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v161);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *(_QWORD *)&__p = a5;
    BYTE8(__p) = 0;
    v59 = operator new(0x10uLL);
    *a5 = v59;
    a5[1] = v59;
    a5[2] = v59 + 2;
    v60 = *((_QWORD *)&v161 + 1);
    *v59 = v161;
    v59[1] = v60;
    if (v60)
    {
      v61 = (unint64_t *)(v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    a5[1] = v59 + 2;
    mlx::core::array::~array((mlx::core::array *)&v161);
    mlx::core::array::~array((mlx::core::array *)&v159);
    mlx::core::array::~array((mlx::core::array *)&v138);
    mlx::core::array::~array((mlx::core::array *)&v144);
    mlx::core::array::~array((mlx::core::array *)&v162);
    goto LABEL_164;
  }
  if (v19 == 2)
  {
    v153 = 0;
    v154 = 0;
    v152 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v152, v155, (uint64_t)v156, (v156 - (_BYTE *)v155) >> 2);
    mlx::core::reshape(v18, (uint64_t)&v152, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v144);
    mlx::core::broadcast_to((const void ***)&v144, (const void **)v158[0], *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v162);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *(_QWORD *)&__p = a5;
    BYTE8(__p) = 0;
    v63 = operator new(0x10uLL);
    *a5 = v63;
    a5[1] = v63;
    a5[2] = v63 + 2;
    v64 = v162.__end_;
    *v63 = v162.__begin_;
    v63[1] = v64;
    if (v64)
    {
      v65 = (unint64_t *)(v64 + 2);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    a5[1] = v63 + 2;
    mlx::core::array::~array((mlx::core::array *)&v162);
    mlx::core::array::~array((mlx::core::array *)&v144);
    v67 = v152;
    if (!v152)
      goto LABEL_164;
    v153 = v152;
LABEL_163:
    operator delete(v67);
    goto LABEL_164;
  }
  if (v19 != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "Reduce type VJP not yet implemented.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v150 = *(mlx::core **)(a1 + 8);
  v151 = *(_DWORD *)(a1 + 16);
  v149 = &v150;
  if ((unint64_t)((char *)v14 - (char *)v13) < 5)
  {
    v123 = 0;
    v124 = 0;
    v122 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v122, v155, (uint64_t)v156, (v156 - (_BYTE *)v155) >> 2);
    mlx::core::reshape(v18, (uint64_t)&v122, v150, v151 | 0x100000000, (const void ***)&v144);
    mlx::core::Reduce::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v149, (const void ***)v158, &v144, **(_DWORD **)(a1 + 24), &v162);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *(_QWORD *)&__p = a5;
    BYTE8(__p) = 0;
    v68 = operator new(0x10uLL);
    *a5 = v68;
    a5[1] = v68;
    a5[2] = v68 + 2;
    v69 = v162.__end_;
    *v68 = v162.__begin_;
    v68[1] = v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 2);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    a5[1] = v68 + 2;
    mlx::core::array::~array((mlx::core::array *)&v162);
    mlx::core::array::~array((mlx::core::array *)&v144);
    v67 = v122;
    if (!v122)
      goto LABEL_164;
    v123 = v122;
    goto LABEL_163;
  }
  v118 = v18;
  __p = 0uLL;
  v148 = 0;
  memset(&v162, 0, sizeof(v162));
  v145 = 0;
  v146 = 0;
  v144 = 0;
  v20 = v158[0];
  v21 = *v158[0];
  if (v158[0][1] == *v158[0])
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = *(_QWORD *)(a1 + 24);
      if (v24 < (unint64_t)((*(_QWORD *)(a1 + 32) - v25) >> 2) && v23 == *(_DWORD *)(v25 + 4 * v24))
      {
        ++v24;
      }
      else
      {
        v26 = (char *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) >= (unint64_t)v148)
        {
          v28 = (char *)__p;
          v29 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = (uint64_t)&v148[-__p];
          if ((uint64_t)&v148[-__p] >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v148, v32);
            v26 = (char *)*((_QWORD *)&__p + 1);
            v28 = (char *)__p;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[4 * v29];
          *(_DWORD *)v34 = v23;
          v27 = v34 + 4;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          *(_QWORD *)&__p = v34;
          *((_QWORD *)&__p + 1) = v27;
          v148 = &v33[4 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          **((_DWORD **)&__p + 1) = v23;
          v27 = v26 + 4;
        }
        *((_QWORD *)&__p + 1) = v27;
        v36 = mlx::core::array::shape((mlx::core::array *)v158, v23);
        v37 = v36;
        v38 = v145;
        if ((unint64_t)v145 >= v146)
        {
          v39 = v144;
          v40 = ((char *)v145 - (_BYTE *)v144) >> 2;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v42 = v146 - (_QWORD)v144;
          if ((uint64_t)(v146 - (_QWORD)v144) >> 1 > v41)
            v41 = v42 >> 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v146, v43);
            v39 = v144;
            v38 = v145;
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[4 * v40];
          *(_DWORD *)v45 = v37;
          v22 = v45 + 4;
          while (v38 != v39)
          {
            v46 = *--v38;
            *((_DWORD *)v45 - 1) = v46;
            v45 -= 4;
          }
          v144 = v45;
          v145 = v22;
          v146 = (unint64_t)&v44[4 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v145 = v36;
          v22 = v38 + 1;
        }
        v145 = v22;
        v20 = v158[0];
        v21 = *v158[0];
      }
      ++v23;
    }
    while (v23 < (v20[1] - v21) >> 2);
    v13 = *(int **)(a1 + 24);
    v14 = *(int **)(a1 + 32);
  }
  if (v13 != v14)
  {
    v72 = (char *)*((_QWORD *)&__p + 1);
    do
    {
      v73 = *v13;
      if (v72 >= v148)
      {
        v75 = (char *)__p;
        v76 = (uint64_t)&v72[-__p] >> 2;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v78 = (uint64_t)&v148[-__p];
        if ((uint64_t)&v148[-__p] >> 1 > v77)
          v77 = v78 >> 1;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
          v79 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v148, v79);
          v72 = (char *)*((_QWORD *)&__p + 1);
          v75 = (char *)__p;
        }
        else
        {
          v80 = 0;
        }
        v81 = &v80[4 * v76];
        *(_DWORD *)v81 = v73;
        v74 = v81 + 4;
        while (v72 != v75)
        {
          v82 = *((_DWORD *)v72 - 1);
          v72 -= 4;
          *((_DWORD *)v81 - 1) = v82;
          v81 -= 4;
        }
        *(_QWORD *)&__p = v81;
        *((_QWORD *)&__p + 1) = v74;
        v148 = &v80[4 * v79];
        if (v75)
          operator delete(v75);
      }
      else
      {
        *(_DWORD *)v72 = v73;
        v74 = v72 + 4;
      }
      *((_QWORD *)&__p + 1) = v74;
      ++v13;
      v72 = v74;
    }
    while (v13 != v14);
    v22 = v145;
  }
  if ((unint64_t)v22 >= v146)
  {
    v84 = v144;
    v85 = ((char *)v22 - (_BYTE *)v144) >> 2;
    v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v87 = v146 - (_QWORD)v144;
    if ((uint64_t)(v146 - (_QWORD)v144) >> 1 > v86)
      v86 = v87 >> 1;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
      v88 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v88 = v86;
    if (v88)
    {
      v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v146, v88);
      v84 = v144;
      v22 = v145;
    }
    else
    {
      v89 = 0;
    }
    v90 = &v89[4 * v85];
    v91 = &v89[4 * v88];
    *(_DWORD *)v90 = -1;
    v83 = v90 + 4;
    while (v22 != v84)
    {
      v92 = *--v22;
      *((_DWORD *)v90 - 1) = v92;
      v90 -= 4;
    }
    v144 = v90;
    v145 = v83;
    v146 = (unint64_t)v91;
    if (v84)
      operator delete(v84);
  }
  else
  {
    *v22 = -1;
    v83 = v22 + 1;
  }
  v145 = v83;
  std::vector<int>::resize(&v162, (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
  v93 = __p;
  v94 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
  {
    v95 = 0;
    begin = v162.__begin_;
    if (v94 <= 1)
      v97 = 1;
    else
      v97 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
    do
    {
      begin[*(int *)(v93 + 4 * v95)] = v95;
      ++v95;
    }
    while (v97 != v95);
  }
  v142 = 0;
  v143 = 0;
  v141 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v141, (const void *)v93, *((uint64_t *)&v93 + 1), v94);
  mlx::core::transpose(v158, (unsigned int **)&v141, v150, v151 | 0x100000000, &v161);
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  v139 = 0;
  v140 = 0;
  v138 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v138, *(const void **)v161, *(_QWORD *)(v161 + 8), (uint64_t)(*(_QWORD *)(v161 + 8) - *(_QWORD *)v161) >> 2);
  v136 = 0;
  v137 = 0;
  v135 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v135, v144, (uint64_t)v145, ((char *)v145 - (_BYTE *)v144) >> 2);
  mlx::core::reshape((const void ***)&v161, (uint64_t)&v135, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v159);
  v98 = v159;
  v159 = 0uLL;
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  v161 = v98;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v159);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v132 = 0;
  v133 = 0;
  v131 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v131, v144, (uint64_t)v145, ((char *)v145 - (_BYTE *)v144) >> 2);
  mlx::core::reshape(v118, (uint64_t)&v131, v150, v151 | 0x100000000, (const void ***)&v159);
  mlx::core::Reduce::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v149, (const void ***)&v161, &v159, -1, &v134);
  mlx::core::array::~array((mlx::core::array *)&v159);
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  v129 = 0;
  v130 = 0;
  v128 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v128, v138, (uint64_t)v139, (v139 - (_BYTE *)v138) >> 2);
  mlx::core::reshape((const void ***)&v134, (uint64_t)&v128, v150, v151 | 0x100000000, (const void ***)&v159);
  v102 = v159;
  v159 = 0uLL;
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  v134 = v102;
  if (v103)
  {
    v104 = (unint64_t *)&v103->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v159);
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  v126 = 0;
  v127 = 0;
  v125 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v125, v162.__begin_, (uint64_t)v162.__end_, v162.__end_ - v162.__begin_);
  mlx::core::transpose((uint64_t **)&v134, (unsigned int **)&v125, v150, v151 | 0x100000000, &v159);
  v106 = v159;
  v159 = 0uLL;
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  v134 = v106;
  if (v107)
  {
    v108 = (unint64_t *)&v107->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v159);
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  v110 = v134;
  v160 = v134;
  if (*((_QWORD *)&v134 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_QWORD *)&v159 = a5;
  BYTE8(v159) = 0;
  v113 = operator new(0x10uLL);
  *a5 = v113;
  a5[1] = v113;
  a5[2] = v113 + 2;
  v114 = *((_QWORD *)&v160 + 1);
  *v113 = v110;
  v113[1] = v114;
  if (v114)
  {
    v115 = (unint64_t *)(v114 + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  a5[1] = v113 + 2;
  mlx::core::array::~array((mlx::core::array *)&v160);
  mlx::core::array::~array((mlx::core::array *)&v134);
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  mlx::core::array::~array((mlx::core::array *)&v161);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v162.__begin_)
  {
    v162.__end_ = v162.__begin_;
    operator delete(v162.__begin_);
  }
  v67 = (void *)__p;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    goto LABEL_163;
  }
LABEL_164:
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  mlx::core::array::~array((mlx::core::array *)v158);
}

void sub_2424B29A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;
  void *v43;

  if (__p)
    operator delete(__p);
  v42 = *(void **)(v40 - 128);
  if (v42)
  {
    *(_QWORD *)(v40 - 120) = v42;
    operator delete(v42);
  }
  if (a39)
    operator delete(a39);
  v43 = *(void **)(v40 - 216);
  if (v43)
  {
    *(_QWORD *)(v40 - 208) = v43;
    operator delete(v43);
  }
  mlx::core::array::~array((mlx::core::array *)(v40 - 192));
  _Unwind_Resume(a1);
}

void mlx::core::Reduce::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(mlx::core ***a1@<X0>, const void ***a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  mlx::core::cumprod(a2, a4, 0, 0, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, v12);
  mlx::core::cumprod(a2, a4, 1, 0, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, v11);
  mlx::core::multiply(v12, v11, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, v10);
  mlx::core::multiply(v10, a3, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)v10);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424B2CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  mlx::core::array::~array((mlx::core::array *)&a13);
  _Unwind_Resume(a1);
}

void mlx::core::Reduce::vmap(uint64_t a1@<X0>, uint64_t ***a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t **v11;
  uint64_t *v12[2];
  char *v13[3];
  void *__p;
  _DWORD *v15;
  uint64_t v16;

  v8 = **a3;
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = __p;
    v10 = v15;
    while (v9 != v10)
    {
      if (*v9 >= v8)
        ++*v9;
      ++v9;
    }
  }
  v11 = *a2;
  memset(v13, 0, sizeof(v13));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      mlx::core::all((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 1:
      mlx::core::any((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 2:
      mlx::core::sum((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 3:
      mlx::core::prod((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 4:
      mlx::core::min(v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 5:
      mlx::core::max(v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
LABEL_14:
      mlx::core::array::~array((mlx::core::array *)v12);
      break;
    default:
      break;
  }
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<int> const&,0>(a4, (_QWORD **)v13, (uint64_t)a3);
  v12[0] = (uint64_t *)v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_2424B2F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  a9 = &a11;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::Reduce::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && (v3 = a1 + 24,
        v2 = *(const void **)(a1 + 24),
        v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2,
        v6 = a2 + 24,
        v5 = *(const void **)(a2 + 24),
        v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Reduce::output_shapes(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int *v6;
  int *v7;
  _DWORD *i;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = **a2;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v11, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  v6 = *(int **)(a1 + 24);
  v7 = *(int **)(a1 + 32);
  for (i = v11; v6 != v7; i[v9] = 1)
    v9 = *v6++;
  __p = 0;
  v17 = 0;
  v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, i, (uint64_t)v12, (v12 - (_BYTE *)i) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v14 = a3;
  v15 = 0;
  v10 = operator new(0x18uLL);
  *a3 = v10;
  a3[1] = v10;
  a3[2] = v10 + 3;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a3 + 2), (uint64_t)&__p, (uint64_t)&v19, v10);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
}

void sub_2424B30F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 8) = v18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a10)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Round::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Round::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Round::jvp();
  if (a3[1] - *a3 != 4)
    mlx::core::Round::jvp();
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424B3238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Round::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Round::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Round::vmap();
  mlx::core::round(*(int ****)a2, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B3374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Scan::vmap(uint64_t a1@<X0>, uint64_t **a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  int v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  void *__p[3];
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void **v41;
  char v42;
  _QWORD v43[2];
  _QWORD v44[3];

  v44[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 56);
  if (!(_DWORD)v9 && *(_DWORD *)(a1 + 20) == 2)
    v9 = 0x400000004;
  v10 = **a3;
  v11 = (v10 & 0x80000000) == 0 && v10 <= *(_DWORD *)(a1 + 24);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v12 = *(_DWORD *)(a1 + 24);
  v13 = operator new(0x38uLL);
  v13[2] = 0;
  *v13 = &unk_25134FE28;
  v13[1] = 0;
  v14 = *(_WORD *)(a1 + 28);
  v13[4] = *(_QWORD *)(a1 + 8);
  v13[3] = &unk_2513522D0;
  v13[5] = *(_QWORD *)(a1 + 16);
  *((_DWORD *)v13 + 12) = v12 + v11;
  *((_WORD *)v13 + 26) = v14;
  *(_QWORD *)&v36 = v13 + 3;
  *((_QWORD *)&v36 + 1) = v13;
  v34 = 0;
  v35 = 0;
  v16 = *v7;
  v15 = v7[1];
  v43[0] = *v7;
  v43[1] = v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v32 = 0uLL;
  v33 = 0;
  v41 = (void **)&v32;
  v42 = 0;
  v19 = operator new(0x10uLL);
  *(_QWORD *)&v32 = v19;
  v33 = v19 + 2;
  *v19 = v16;
  v19[1] = v15;
  if (v15)
  {
    v20 = (unint64_t *)(v15 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_QWORD *)&v32 + 1) = v19 + 2;
  mlx::core::array::array(v44, (__int128 *)__p, v9, &v36, &v32);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = (void **)&v38;
  v42 = 0;
  v22 = operator new(0x10uLL);
  v38 = v22;
  v39 = v22;
  v40 = v22 + 2;
  v23 = v44[1];
  *v22 = v44[0];
  v22[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v39 = v22 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v38, (uint64_t)a3);
  v41 = (void **)&v38;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v41);
  mlx::core::array::~array((mlx::core::array *)v44);
  v41 = (void **)&v32;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v41);
  mlx::core::array::~array((mlx::core::array *)v43);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2424B3654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  uint64_t v22;
  uint64_t v23;

  a22 = (uint64_t *)v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v23 - 88));
  a22 = &a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  mlx::core::array::~array((mlx::core::array *)(v23 - 104));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Scan::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, const void ****a3@<X2>, _DWORD **a4@<X3>, uint64_t **a5@<X4>, _QWORD *a6@<X8>)
{
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *exception;
  _QWORD v22[2];
  const void **v23[2];
  _QWORD *v24;
  char v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Scan::vjp();
  if (**a4)
    mlx::core::Scan::vjp();
  v8 = *(_DWORD *)(a1 + 20);
  if (v8 == 3)
  {
    v14 = (*a5)[1];
    v27 = **a5;
    v28 = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    mlx::core::multiply(&v27, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v23);
    mlx::core::cumsum(v23, *(_DWORD *)(a1 + 24), *(_BYTE *)(a1 + 28) == 0, *(_BYTE *)(a1 + 29), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
    mlx::core::divide(v22, *(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    v24 = a6;
    v25 = 0;
    v17 = operator new(0x10uLL);
    *a6 = v17;
    a6[1] = v17;
    a6[2] = v17 + 2;
    v18 = v26[1];
    *v17 = v26[0];
    v17[1] = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    a6[1] = v17 + 2;
    mlx::core::array::~array((mlx::core::array *)v26);
    mlx::core::array::~array((mlx::core::array *)v22);
    mlx::core::array::~array((mlx::core::array *)v23);
  }
  else
  {
    if (v8 != 2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](exception, "VJP is not implemented for cumulative min/max");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    mlx::core::cumsum(*a3, *(_DWORD *)(a1 + 24), *(_BYTE *)(a1 + 28) == 0, *(_BYTE *)(a1 + 29), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v27);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    v24 = a6;
    v25 = 0;
    v9 = operator new(0x10uLL);
    *a6 = v9;
    a6[1] = v9;
    a6[2] = v9 + 2;
    v10 = v28;
    *v9 = v27;
    v9[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    a6[1] = v9 + 2;
  }
  mlx::core::array::~array((mlx::core::array *)&v27);
}

void sub_2424B390C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void mlx::core::Scan::jvp(uint64_t a1@<X0>, uint64_t a2@<X2>, _DWORD **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *exception;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Scan::jvp();
  if (**a3)
    mlx::core::Scan::jvp();
  if (*(_DWORD *)(a1 + 20) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "JVP is not implemented for cumulative prod/min/max");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mlx::core::cumsum(*(const void ****)a2, *(_DWORD *)(a1 + 24), *(_BYTE *)(a1 + 28), *(_BYTE *)(a1 + 29), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v10[1];
  *v5 = v10[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_2424B3AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Scan::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
}

BOOL mlx::core::Scatter::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && (v3 = a1 + 24,
        v2 = *(const void **)(a1 + 24),
        v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2,
        v6 = a2 + 24,
        v5 = *(const void **)(a2 + 24),
        v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Scatter::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core::array **a3@<X2>, int **a4@<X3>, mlx::core::array **a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  char *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v19;
  int *v20;
  int *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  mlx::core::array *v25;
  void **p_p;
  uint64_t v27;
  int *v28;
  int *v29;
  _DWORD *v30;
  uint64_t v31;
  mlx::core *v32;
  mlx::core::array *v33;
  std::logic_error *v34;
  void *exception;
  _QWORD *v36;
  mlx::core::array *v37;
  _QWORD v38[2];
  void *v39[2];
  void *__p;
  void *v41;
  uint64_t v42;
  int **v43[2];
  _QWORD v44[2];
  const void ***v45[3];

  v7 = *(_DWORD *)(a1 + 20);
  if (v7 >= 3 && v7 != 4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[scatter] VJP not implemented for scatter_prod");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v13 = (char *)(*(_QWORD *)(a2 + 8) - 16);
  v36 = *(_QWORD **)a2;
  v37 = *a5;
  memset(v45, 0, sizeof(v45));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v45, v36 + 2, v13, (v13 - (char *)(v36 + 2)) >> 4);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  v15 = *a4;
  v14 = a4[1];
  if (*a4 != v14)
  {
    do
    {
      v16 = *v15;
      if ((_DWORD)v16)
      {
        if (((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4) - 1 != v16)
        {
          v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v34, "[scatter] Cannot calculate VJP with respect to indices.");
          goto LABEL_36;
        }
        v17 = *(_DWORD *)(a1 + 20);
        if (v17 < 2)
        {
          v27 = *(_QWORD *)*a3;
          v41 = 0;
          v42 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v27, *(_QWORD *)(v27 + 8), (uint64_t)(*(_QWORD *)(v27 + 8) - *(_QWORD *)v27) >> 2);
          v28 = *(int **)(a1 + 24);
          v29 = *(int **)(a1 + 32);
          if (v28 != v29)
          {
            v30 = __p;
            do
            {
              v31 = *v28++;
              v30[v31] = 1;
            }
            while (v28 != v29);
          }
          mlx::core::gather(*a3, (uint64_t *)v45, (int **)(a1 + 24), (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          mlx::core::gather(v37, (uint64_t *)v45, (int **)(a1 + 24), (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v43);
          mlx::core::equal(v43, v13, v32, 0, v38);
          mlx::core::multiply(v44, v38, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v39);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)v39);
          mlx::core::array::~array((mlx::core::array *)v39);
          mlx::core::array::~array((mlx::core::array *)v38);
          mlx::core::array::~array((mlx::core::array *)v43);
        }
        else
        {
          if (v17 != 4 && v17 != 2)
          {
LABEL_35:
            v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v34, "");
LABEL_36:
            v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v34, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
          }
          v19 = *(_QWORD *)*a3;
          v41 = 0;
          v42 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
          v20 = *(int **)(a1 + 24);
          v21 = *(int **)(a1 + 32);
          if (v20 != v21)
          {
            v22 = __p;
            do
            {
              v23 = *v20++;
              v22[v23] = 1;
            }
            while (v20 != v21);
          }
          mlx::core::gather(*a3, (uint64_t *)v45, (int **)(a1 + 24), (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)v44);
        }
        mlx::core::array::~array((mlx::core::array *)v44);
        if (__p)
        {
          v41 = __p;
          operator delete(__p);
        }
      }
      else
      {
        v24 = *(_DWORD *)(a1 + 20);
        if (v24 < 2)
        {
          mlx::core::equal(v37, v36, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          v33 = *a3;
          mlx::core::array::array<int>(v43, 0, *(_QWORD *)(*(_QWORD *)*a3 + 56));
          mlx::core::where(v44, v33, v43, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__p);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&__p);
          mlx::core::array::~array((mlx::core::array *)&__p);
          p_p = (void **)v43;
        }
        else
        {
          if (v24 == 2)
          {
            std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, *a3);
            goto LABEL_32;
          }
          if (v24 != 4)
            goto LABEL_35;
          v25 = *a3;
          mlx::core::zeros_like((uint64_t *)v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          mlx::core::scatter(v25, v45, (mlx::core::array *)v44, (int **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__p);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&__p);
          p_p = &__p;
        }
        mlx::core::array::~array((mlx::core::array *)p_p);
        mlx::core::array::~array((mlx::core::array *)v44);
      }
LABEL_32:
      ++v15;
    }
    while (v15 != v14);
  }
  __p = v45;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2424B3F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void mlx::core::Scatter::jvp()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[scatter] JVP not yet implemented");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2424B40D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::vjp(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  int **v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  _QWORD *v13;
  char v14;
  int **v15[3];

  v15[2] = *(int ***)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)a3;
  mlx::core::array::array<float>(v15, *(_QWORD *)(**(_QWORD **)a3 + 56), 1.0);
  mlx::core::subtract(v15, v7, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v13);
  mlx::core::multiply(v7, &v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::array::~array((mlx::core::array *)&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::multiply(*a2, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v13 = a4;
  v14 = 0;
  v8 = operator new(0x10uLL);
  *a4 = v8;
  a4[1] = v8;
  a4[2] = v8 + 2;
  v9 = v15[1];
  *v8 = v15[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a4[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424B421C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  int **v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD *v14;
  char v15;
  int **v16[3];

  v16[2] = *(int ***)MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sigmoid::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Sigmoid::jvp();
  mlx::core::sigmoid(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::array<float>(v16, *(_QWORD *)(v13[0] + 56), 1.0);
  mlx::core::subtract(v16, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
  mlx::core::multiply(v13, &v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::array::~array((mlx::core::array *)&v14);
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::multiply(*a3, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v14 = a5;
  v15 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v16[1];
  *v8 = v16[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_2424B43E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sigmoid::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Sigmoid::vmap();
  mlx::core::sigmoid(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B455C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sign::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Sign::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sign::jvp();
  if (a3[1] - *a3 != 4)
    mlx::core::Sign::jvp();
  mlx::core::zeros(**(_QWORD **)a2, *(_QWORD *)(**(_QWORD **)a2 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_2424B4688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sign::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sign::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Sign::vmap();
  mlx::core::sign(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B47C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sin::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Sin::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sin::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Sin::jvp();
  v6 = *a3;
  v7 = a1 + 8;
  mlx::core::cos(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v6, v12, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12[2] = a5;
  v13 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v14[1];
  *v8 = v14[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424B4918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sin::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sin::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Sin::vmap();
  mlx::core::sin(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B4A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sinh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Sinh::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sinh::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Sinh::jvp();
  v6 = *a3;
  v7 = a1 + 8;
  mlx::core::cosh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v6, v12, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12[2] = a5;
  v13 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v14[1];
  *v8 = v14[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424B4BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sinh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sinh::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Sinh::vmap();
  mlx::core::sinh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B4D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Slice::vmap(uint64_t a1@<X0>, mlx::core::array **a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  mlx::core::array *v9;
  std::vector<int>::const_iterator v10;
  std::vector<int>::pointer begin;
  std::vector<int>::value_type v12;
  std::vector<int>::const_iterator v13;
  std::vector<int>::const_iterator v14;
  char *v15;
  const void **v16;
  unint64_t *v17;
  unint64_t v18;
  _DWORD *v19;
  void *__p;
  void *v21;
  _DWORD *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  std::vector<int>::value_type __x[2];
  char *v33;
  char *v34;
  std::vector<int> v35;
  std::vector<int> v36;
  std::vector<int> v37;
  const void **v38[3];

  v38[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  memset(&v37, 0, sizeof(v37));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  memset(&v36, 0, sizeof(v36));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  memset(&v35, 0, sizeof(v35));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  v8 = **a3;
  v9 = *a2;
  if ((v8 & 0x80000000) == 0)
  {
    v10.__i_ = &v37.__begin_[v8];
    __x[0] = 0;
    std::vector<int>::insert(&v37, v10, __x);
    begin = v36.__begin_;
    v12 = mlx::core::array::shape(v9, v8);
    v13.__i_ = &begin[v8];
    __x[0] = v12;
    std::vector<int>::insert(&v36, v13, __x);
    v14.__i_ = &v35.__begin_[v8];
    __x[0] = 1;
    std::vector<int>::insert(&v35, v14, __x);
  }
  v30 = 0;
  v31 = 0;
  v29 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, v37.__begin_, (uint64_t)v37.__end_, v37.__end_ - v37.__begin_);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, v36.__begin_, (uint64_t)v36.__end_, v36.__end_ - v36.__begin_);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v23, v35.__begin_, (uint64_t)v35.__end_, v35.__end_ - v35.__begin_);
  mlx::core::slice((const void ***)v9, (uint64_t)&v29, (uint64_t)&v26, (uint64_t)&v23, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v38);
  *(_QWORD *)__x = 0;
  v33 = 0;
  v34 = 0;
  __p = __x;
  LOBYTE(v21) = 0;
  v15 = (char *)operator new(0x10uLL);
  *(_QWORD *)__x = v15;
  v33 = v15;
  v34 = v15 + 16;
  v16 = v38[1];
  *(const void ***)v15 = v38[0];
  *((_QWORD *)v15 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 1);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v33 = v15 + 16;
  v19 = operator new(4uLL);
  __p = v19;
  *v19 = v8;
  v21 = v19 + 1;
  v22 = v19 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)__x, (uint64_t)&__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  __p = __x;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v38);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v35.__begin_)
  {
    v35.__end_ = v35.__begin_;
    operator delete(v35.__begin_);
  }
  if (v36.__begin_)
  {
    v36.__end_ = v36.__begin_;
    operator delete(v36.__begin_);
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
}

void sub_2424B4FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v26 - 96);
  if (v29)
  {
    *(_QWORD *)(v26 - 88) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::Slice::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  char *v14;
  std::vector<int>::pointer end;
  int *v16;
  std::vector<int>::pointer begin;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int *v29;
  int v30;
  char *v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int *v36;
  std::vector<int>::pointer v37;
  int v38;
  int v39;
  std::vector<int>::pointer v40;
  int *v41;
  std::vector<int>::pointer v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  int *v48;
  int v49;
  unint64_t v50;
  int v51;
  std::vector<int>::pointer v52;
  int *v53;
  int v54;
  int v55;
  std::vector<int>::pointer v56;
  int *v57;
  std::vector<int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  int *v64;
  int v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  std::vector<int>::pointer v76;
  int64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  char *v81;
  int *v82;
  int v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  std::vector<int>::pointer v92;
  const void ***v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  const void **v108[2];
  __int128 __x;
  char *v110;
  std::vector<int> v111;
  __int128 v112;
  void *__p;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  std::vector<int> v119;
  char *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Slice::vjp();
  v120 = 0;
  v121 = 0;
  v122 = 0;
  memset(&v119, 0, sizeof(v119));
  v116 = 0;
  v117 = 0;
  v118 = 0;
  __p = 0;
  v114 = 0;
  v115 = 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v8);
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v8);
      if (v9)
        v11 = 0;
      else
        v11 = v10 == 1;
      if (!v11)
      {
        if (v10 == 1)
        {
          v12 = mlx::core::TypeToDtype<int>::operator mlx::core::Dtype();
          mlx::core::array::array<int>((int ***)&v111, v9, v12);
          std::vector<mlx::core::array>::push_back[abi:ne180100](&v116, (uint64_t)&v111);
          mlx::core::array::~array((mlx::core::array *)&v111);
          v13 = v114;
          if ((unint64_t)v114 >= v115)
          {
            v23 = (char *)__p;
            v24 = (v114 - (_BYTE *)__p) >> 2;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62)
LABEL_153:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v26 = v115 - (_QWORD)__p;
            if ((uint64_t)(v115 - (_QWORD)__p) >> 1 > v25)
              v25 = v26 >> 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
              v27 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115, v27);
              v23 = (char *)__p;
              v13 = v114;
            }
            else
            {
              v28 = 0;
            }
            v31 = &v28[4 * v24];
            *(_DWORD *)v31 = v8;
            v14 = v31 + 4;
            while (v13 != v23)
            {
              v32 = *((_DWORD *)v13 - 1);
              v13 -= 4;
              *((_DWORD *)v31 - 1) = v32;
              v31 -= 4;
            }
            __p = v31;
            v114 = v14;
            v115 = (unint64_t)&v28[4 * v27];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_DWORD *)v114 = v8;
            v14 = v13 + 4;
          }
          v114 = v14;
        }
        else
        {
          mlx::core::arange(v9, *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v8), v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (int ***)&v111);
          std::vector<mlx::core::array>::push_back[abi:ne180100](&v120, (uint64_t)&v111);
          mlx::core::array::~array((mlx::core::array *)&v111);
          end = v119.__end_;
          if (v119.__end_ >= v119.__end_cap_.__value_)
          {
            begin = v119.__begin_;
            v18 = v119.__end_ - v119.__begin_;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              goto LABEL_153;
            v20 = (char *)v119.__end_cap_.__value_ - (char *)v119.__begin_;
            if (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119.__end_cap_, v21);
              begin = v119.__begin_;
              end = v119.__end_;
            }
            else
            {
              v22 = 0;
            }
            v29 = (int *)&v22[4 * v18];
            *v29 = v8;
            v16 = v29 + 1;
            while (end != begin)
            {
              v30 = *--end;
              *--v29 = v30;
            }
            v119.__begin_ = v29;
            v119.__end_ = v16;
            v119.__end_cap_.__value_ = (int *)&v22[4 * v21];
            if (begin)
              operator delete(begin);
          }
          else
          {
            *v119.__end_ = v8;
            v16 = end + 1;
          }
          v119.__end_ = v16;
        }
      }
      ++v8;
      v7 = *(_QWORD *)(a1 + 24);
    }
    while (v8 < (*(_QWORD *)(a1 + 32) - v7) >> 2);
  }
  v33 = (*a3)[1];
  *(_QWORD *)&v112 = **a3;
  *((_QWORD *)&v112 + 1) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = v119.__begin_;
  v37 = v119.__end_;
  if (v119.__begin_ != v119.__end_)
  {
    memset(&v111, 0, sizeof(v111));
    do
    {
      v38 = mlx::core::array::shape((mlx::core::array *)&v112, *v36);
      v39 = v38;
      v40 = v111.__end_;
      if (v111.__end_ >= v111.__end_cap_.__value_)
      {
        v42 = v111.__begin_;
        v43 = v111.__end_ - v111.__begin_;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v45 = (char *)v111.__end_cap_.__value_ - (char *)v111.__begin_;
        if (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v111.__end_cap_, v46);
          v42 = v111.__begin_;
          v40 = v111.__end_;
        }
        else
        {
          v47 = 0;
        }
        v48 = (int *)&v47[4 * v43];
        *v48 = v39;
        v41 = v48 + 1;
        while (v40 != v42)
        {
          v49 = *--v40;
          *--v48 = v49;
        }
        v111.__begin_ = v48;
        v111.__end_ = v41;
        v111.__end_cap_.__value_ = (int *)&v47[4 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v111.__end_ = v38;
        v41 = v40 + 1;
      }
      v111.__end_ = v41;
      ++v36;
    }
    while (v36 != v37);
    __x = 0uLL;
    v110 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x, v119.__begin_, (uint64_t)v119.__end_, v119.__end_ - v119.__begin_);
    if (*(_QWORD *)(v112 + 8) != *(_QWORD *)v112)
    {
      v50 = 0;
      v51 = 0;
      do
      {
        if (v51 < (unint64_t)(v119.__end_ - v119.__begin_) && v50 == v119.__begin_[v51])
        {
          v52 = v111.__end_;
          if (v111.__end_ >= v111.__end_cap_.__value_)
          {
            v76 = v111.__begin_;
            v77 = v111.__end_ - v111.__begin_;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v79 = (char *)v111.__end_cap_.__value_ - (char *)v111.__begin_;
            if (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 1 > v78)
              v78 = v79 >> 1;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
              v80 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v80 = v78;
            if (v80)
            {
              v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v111.__end_cap_, v80);
              v76 = v111.__begin_;
              v52 = v111.__end_;
            }
            else
            {
              v81 = 0;
            }
            v82 = (int *)&v81[4 * v77];
            *v82 = 1;
            v53 = v82 + 1;
            while (v52 != v76)
            {
              v83 = *--v52;
              *--v82 = v83;
            }
            v111.__begin_ = v82;
            v111.__end_ = v53;
            v111.__end_cap_.__value_ = (int *)&v81[4 * v80];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *v111.__end_ = 1;
            v53 = v52 + 1;
          }
          v111.__end_ = v53;
          ++v51;
        }
        else
        {
          v54 = mlx::core::array::shape((mlx::core::array *)&v112, v50);
          v55 = v54;
          v56 = v111.__end_;
          if (v111.__end_ >= v111.__end_cap_.__value_)
          {
            v58 = v111.__begin_;
            v59 = v111.__end_ - v111.__begin_;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v61 = (char *)v111.__end_cap_.__value_ - (char *)v111.__begin_;
            if (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 1 > v60)
              v60 = v61 >> 1;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
              v62 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v111.__end_cap_, v62);
              v58 = v111.__begin_;
              v56 = v111.__end_;
            }
            else
            {
              v63 = 0;
            }
            v64 = (int *)&v63[4 * v59];
            *v64 = v55;
            v57 = v64 + 1;
            while (v56 != v58)
            {
              v65 = *--v56;
              *--v64 = v65;
            }
            v111.__begin_ = v64;
            v111.__end_ = v57;
            v111.__end_cap_.__value_ = (int *)&v63[4 * v62];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *v111.__end_ = v54;
            v57 = v56 + 1;
          }
          v111.__end_ = v57;
          v66 = (char *)*((_QWORD *)&__x + 1);
          if (*((_QWORD *)&__x + 1) >= (unint64_t)v110)
          {
            v68 = (char *)__x;
            v69 = (uint64_t)(*((_QWORD *)&__x + 1) - __x) >> 2;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v71 = (uint64_t)&v110[-__x];
            if ((uint64_t)&v110[-__x] >> 1 > v70)
              v70 = v71 >> 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
              v72 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
            {
              v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v110, v72);
              v66 = (char *)*((_QWORD *)&__x + 1);
              v68 = (char *)__x;
            }
            else
            {
              v73 = 0;
            }
            v74 = &v73[4 * v69];
            *(_DWORD *)v74 = v50;
            v67 = v74 + 4;
            while (v66 != v68)
            {
              v75 = *((_DWORD *)v66 - 1);
              v66 -= 4;
              *((_DWORD *)v74 - 1) = v75;
              v74 -= 4;
            }
            *(_QWORD *)&__x = v74;
            *((_QWORD *)&__x + 1) = v67;
            v110 = &v73[4 * v72];
            if (v68)
              operator delete(v68);
          }
          else
          {
            **((_DWORD **)&__x + 1) = v50;
            v67 = v66 + 4;
          }
          *((_QWORD *)&__x + 1) = v67;
        }
        ++v50;
      }
      while (v50 < (uint64_t)(*(_QWORD *)(v112 + 8) - *(_QWORD *)v112) >> 2);
    }
    v106 = 0;
    v107 = 0;
    v105 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v105, (const void *)__x, *((uint64_t *)&__x + 1), (uint64_t)(*((_QWORD *)&__x + 1) - __x) >> 2);
    mlx::core::transpose((uint64_t **)&v112, (unsigned int **)&v105, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v108);
    v102 = 0;
    v103 = 0;
    v104 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v102, v111.__begin_, (uint64_t)v111.__end_, v111.__end_ - v111.__begin_);
    mlx::core::reshape(v108, (uint64_t)&v102, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v123);
    v84 = v123;
    v123 = 0uLL;
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    v112 = v84;
    if (v85)
    {
      p_shared_owners = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(p_shared_owners);
      while (__stlxr(v87 - 1, p_shared_owners));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v123);
    if (v102)
    {
      v103 = v102;
      operator delete(v102);
    }
    mlx::core::array::~array((mlx::core::array *)v108);
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    if ((_QWORD)__x)
    {
      *((_QWORD *)&__x + 1) = __x;
      operator delete((void *)__x);
    }
    if (v111.__begin_)
    {
      v111.__end_ = v111.__begin_;
      operator delete(v111.__begin_);
    }
  }
  LODWORD(__x) = 1;
  std::vector<int>::vector(&v111, (v121 - v120) >> 4, (const std::vector<int>::value_type *)&__x);
  v89 = v120;
  v88 = (uint64_t)v121;
  if (v121 != v120)
  {
    v90 = 0;
    v91 = 0;
    v92 = v111.__begin_;
    do
    {
      v93 = (const void ***)&v89[v90];
      v92[v91] = *(_QWORD *)(*(_QWORD *)&v89[v90] + 48);
      v100 = 0;
      v101 = 0;
      v99 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v99, v92, (uint64_t)v111.__end_, v111.__end_ - v92);
      mlx::core::reshape(v93, (uint64_t)&v99, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&__x);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)&v120[v90], &__x);
      mlx::core::array::~array((mlx::core::array *)&__x);
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v92 = v111.__begin_;
      v111.__begin_[v91++] = 1;
      v89 = v120;
      v88 = (uint64_t)v121;
      v90 += 16;
    }
    while (v91 < (v121 - v120) >> 4);
  }
  std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array*>,std::__wrap_iter<mlx::core::array*>>((uint64_t *)&v120, v88, (uint64_t *)v116, v117, ((char *)v117 - v116) >> 4);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v119, (uint64_t)v119.__end_, (char *)__p, v114, (v114 - (_BYTE *)__p) >> 2);
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v108);
  mlx::core::scatter_add((mlx::core::array *)v108, (const void ****)&v120, (mlx::core::array *)&v112, &v119.__begin_, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v123);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *(_QWORD *)&__x = a4;
  BYTE8(__x) = 0;
  v94 = operator new(0x10uLL);
  *a4 = v94;
  a4[1] = v94;
  a4[2] = v94 + 2;
  v95 = *((_QWORD *)&v123 + 1);
  *v94 = v123;
  v94[1] = v95;
  if (v95)
  {
    v96 = (unint64_t *)(v95 + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  a4[1] = v94 + 2;
  mlx::core::array::~array((mlx::core::array *)&v123);
  mlx::core::array::~array((mlx::core::array *)v108);
  if (v111.__begin_)
  {
    v111.__end_ = v111.__begin_;
    operator delete(v111.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)&v112);
  if (__p)
  {
    v114 = (char *)__p;
    operator delete(__p);
  }
  __p = &v116;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v119.__begin_)
  {
    v119.__end_ = v119.__begin_;
    operator delete(v119.__begin_);
  }
  v119.__begin_ = (std::vector<int>::pointer)&v120;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
}

void sub_2424B5A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char *a29,char *a30,uint64_t a31,char a32)
{
  uint64_t v32;
  void *v34;

  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)&a19);
  if (a16)
    operator delete(a16);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  mlx::core::array::~array((mlx::core::array *)&a27);
  if (a29)
  {
    a30 = a29;
    operator delete(a29);
  }
  a29 = &a32;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(_QWORD *)(v32 - 168) = v34;
    operator delete(v34);
  }
  *(_QWORD *)(v32 - 176) = v32 - 152;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 176));
  _Unwind_Resume(a1);
}

void mlx::core::Slice::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, const void ****a3@<X2>, _QWORD *a4@<X8>)
{
  const void ***v6;
  _QWORD *v7;
  const void **v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  const void **v22[3];

  v22[2] = *(const void ***)MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 16)
    mlx::core::Slice::jvp();
  v6 = *a3;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v17, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  __p = 0;
  v12 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  mlx::core::slice(v6, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v20 = a4;
  v21 = 0;
  v7 = operator new(0x10uLL);
  *a4 = v7;
  a4[1] = v7;
  a4[2] = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a4[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v22);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_2424B5CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 56));
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Slice::is_equivalent(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;

  v5 = a1 + 3;
  v4 = (const void *)a1[3];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 3;
  v7 = (const void *)a2[3];
  if (v6 == v8[1] - (_QWORD)v7
    && !memcmp(v4, v7, v6)
    && (v9 = (const void *)a1[6], v10 = a1[7] - (_QWORD)v9, v11 = (const void *)a2[6], v10 == a2[7] - (_QWORD)v11)
    && !memcmp(v9, v11, v10)
    && (v12 = (const void *)a1[9], v13 = a1[10] - (_QWORD)v12, v14 = (const void *)a2[9], v13 == a2[10] - (_QWORD)v14))
  {
    return memcmp(v12, v14, v13) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::SliceUpdate::vmap(uint64_t a1@<X0>, char **a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::vector<int>::const_iterator v37;
  std::vector<int>::pointer begin;
  int v39;
  std::vector<int>::const_iterator v40;
  std::vector<int>::const_iterator v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _DWORD *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _DWORD *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62[2];
  _DWORD *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  __int128 __p;
  _QWORD *v74;
  __int128 v75;
  __int128 v76;
  std::vector<int> v77;
  std::vector<int> v78;
  std::vector<int> v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 32)
    mlx::core::SliceUpdate::vmap();
  if ((char *)a3[1] - (char *)*a3 != 8)
    mlx::core::SliceUpdate::vmap();
  memset(&v79, 0, sizeof(v79));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v79, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  memset(&v78, 0, sizeof(v78));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v78, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  memset(&v77, 0, sizeof(v77));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v77, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  v8 = *a2;
  v9 = *((_QWORD *)*a2 + 1);
  *(_QWORD *)&v76 = *(_QWORD *)*a2;
  *((_QWORD *)&v76 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v8 = *a2;
  }
  v13 = *((_QWORD *)v8 + 2);
  v12 = *((_QWORD *)v8 + 3);
  *(_QWORD *)&v75 = v13;
  *((_QWORD *)&v75 + 1) = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *a3;
  v17 = **a3;
  v18 = v16[1];
  if (v17 == -1 && v18 == -1)
  {
    v71 = 0;
    v72 = 0;
    v70 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v70, v79.__begin_, (uint64_t)v79.__end_, v79.__end_ - v79.__begin_);
    v67 = 0;
    v68 = 0;
    v69 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, v78.__begin_, (uint64_t)v78.__end_, v78.__end_ - v78.__begin_);
    v64 = 0;
    v65 = 0;
    v66 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, v77.__begin_, (uint64_t)v77.__end_, v77.__end_ - v77.__begin_);
    mlx::core::slice_update(&v76, (const void ***)&v75, (uint64_t)&v70, (uint64_t)&v67, (uint64_t)&v64, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v80);
    __p = 0uLL;
    v74 = 0;
    v62[0] = &__p;
    LOBYTE(v62[1]) = 0;
    v48 = operator new(0x10uLL);
    *(_QWORD *)&__p = v48;
    *((_QWORD *)&__p + 1) = v48;
    v74 = v48 + 2;
    v49 = v81;
    *v48 = v80;
    v48[1] = v49;
    if (v49)
    {
      v50 = (unint64_t *)(v49 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    *((_QWORD *)&__p + 1) = v48 + 2;
    v52 = operator new(4uLL);
    v62[0] = v52;
    *v52 = -1;
    v62[1] = v52 + 1;
    v63 = v52 + 1;
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)&__p, (uint64_t)v62);
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    v62[0] = &__p;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    mlx::core::array::~array((mlx::core::array *)&v80);
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    v47 = v70;
    if (v70)
    {
      v71 = v70;
      goto LABEL_64;
    }
  }
  else
  {
    if (v17 == -1)
    {
      mlx::core::expand_dims((const void ***)&v76, v18, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&__p);
      v20 = __p;
      __p = 0uLL;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      v76 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&__p);
      v74 = 0;
      __p = 0uLL;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v76, *(_QWORD *)(v76 + 8), (uint64_t)(*(_QWORD *)(v76 + 8) - *(_QWORD *)v76) >> 2);
      v24 = mlx::core::array::shape((mlx::core::array *)&v75, v18);
      *(_DWORD *)(__p + 4 * v18) = v24;
      mlx::core::broadcast_to((const void ***)&v76, (const void **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)v62);
      v25 = *(_OWORD *)v62;
      v62[0] = 0;
      v62[1] = 0;
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      v76 = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      mlx::core::array::~array((mlx::core::array *)v62);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v17 = v18;
    }
    if (v18 == -1)
    {
      mlx::core::expand_dims((const void ***)&v75, v17, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&__p);
      v29 = __p;
      __p = 0uLL;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      v75 = v29;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&__p);
      v18 = v17;
    }
    if (v17 != v18)
    {
      mlx::core::moveaxis((uint64_t **)&v75, v18, v17, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__p);
      v33 = __p;
      __p = 0uLL;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      v75 = v33;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&__p);
    }
    v37.__i_ = &v79.__begin_[v17];
    LODWORD(__p) = 0;
    std::vector<int>::insert(&v79, v37, (std::vector<int>::value_type *)&__p);
    begin = v78.__begin_;
    v39 = mlx::core::array::shape((mlx::core::array *)&v76, v17);
    v40.__i_ = &begin[v17];
    LODWORD(__p) = v39;
    std::vector<int>::insert(&v78, v40, (std::vector<int>::value_type *)&__p);
    v41.__i_ = &v77.__begin_[v17];
    LODWORD(__p) = 1;
    std::vector<int>::insert(&v77, v41, (std::vector<int>::value_type *)&__p);
    v60 = 0;
    v61 = 0;
    v59 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, v79.__begin_, (uint64_t)v79.__end_, v79.__end_ - v79.__begin_);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v56, v78.__begin_, (uint64_t)v78.__end_, v78.__end_ - v78.__begin_);
    v53 = 0;
    v54 = 0;
    v55 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, v77.__begin_, (uint64_t)v77.__end_, v77.__end_ - v77.__begin_);
    mlx::core::slice_update(&v76, (const void ***)&v75, (uint64_t)&v59, (uint64_t)&v56, (uint64_t)&v53, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v80);
    __p = 0uLL;
    v74 = 0;
    v62[0] = &__p;
    LOBYTE(v62[1]) = 0;
    v42 = operator new(0x10uLL);
    *(_QWORD *)&__p = v42;
    *((_QWORD *)&__p + 1) = v42;
    v74 = v42 + 2;
    v43 = v81;
    *v42 = v80;
    v42[1] = v43;
    if (v43)
    {
      v44 = (unint64_t *)(v43 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    *((_QWORD *)&__p + 1) = v42 + 2;
    v46 = operator new(4uLL);
    v62[0] = v46;
    *v46 = v17;
    v62[1] = v46 + 1;
    v63 = v46 + 1;
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)&__p, (uint64_t)v62);
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    v62[0] = &__p;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    mlx::core::array::~array((mlx::core::array *)&v80);
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    v47 = v59;
    if (v59)
    {
      v60 = v59;
LABEL_64:
      operator delete(v47);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v75);
  mlx::core::array::~array((mlx::core::array *)&v76);
  if (v77.__begin_)
  {
    v77.__end_ = v77.__begin_;
    operator delete(v77.__begin_);
  }
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
  if (v79.__begin_)
  {
    v79.__end_ = v79.__begin_;
    operator delete(v79.__begin_);
  }
}

void sub_2424B644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  mlx::core::array::~array((mlx::core::array *)(v32 - 176));
  mlx::core::array::~array((mlx::core::array *)(v32 - 160));
  v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(_QWORD *)(v32 - 136) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v32 - 120);
  if (v35)
  {
    *(_QWORD *)(v32 - 112) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v32 - 96);
  if (v36)
  {
    *(_QWORD *)(v32 - 88) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void mlx::core::SliceUpdate::vjp(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void ****a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  const void ***v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t *v11;
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  const void **v30[2];
  const void **v31[2];

  v6 = *a2;
  if (a2[1] - *a2 != 32)
    mlx::core::SliceUpdate::vjp();
  v7 = *a3;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v8 = *(_DWORD **)a4;
  v9 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v9)
  {
    v11 = (uint64_t *)(v6 + 16);
    do
    {
      if (*v8)
      {
        v19 = 0;
        v20 = 0;
        v18 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
        v15 = 0;
        v16 = 0;
        v17 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
        __p = 0;
        v13 = 0;
        v14 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
        mlx::core::slice(v7, (uint64_t)&v18, (uint64_t)&v15, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v31);
        if (__p)
        {
          v13 = __p;
          operator delete(__p);
        }
        if (v15)
        {
          v16 = v15;
          operator delete(v15);
        }
        if (v18)
        {
          v19 = v18;
          operator delete(v18);
        }
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, v31);
      }
      else
      {
        mlx::core::zeros_like(v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v30);
        v27 = 0;
        v28 = 0;
        v29 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
        v24 = 0;
        v25 = 0;
        v26 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
        v21 = 0;
        v22 = 0;
        v23 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
        mlx::core::slice_update(v7, v30, (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&v21, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v31);
        if (v21)
        {
          v22 = v21;
          operator delete(v21);
        }
        if (v24)
        {
          v25 = v24;
          operator delete(v24);
        }
        if (v27)
        {
          v28 = v27;
          operator delete(v27);
        }
        mlx::core::array::~array((mlx::core::array *)v30);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, v31);
      }
      mlx::core::array::~array((mlx::core::array *)v31);
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_2424B6808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;

  mlx::core::array::~array((mlx::core::array *)(v23 - 64));
  *(_QWORD *)(v23 - 64) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 64));
  _Unwind_Resume(a1);
}

void mlx::core::SliceUpdate::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 32)
    mlx::core::SliceUpdate::jvp();
  v6 = *a3;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v17, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  __p = 0;
  v12 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  mlx::core::slice_update((_QWORD *)v6, (const void ***)(v6 + 16), (uint64_t)&v17, (uint64_t)&v14, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v20 = a4;
  v21 = 0;
  v7 = operator new(0x10uLL);
  *a4 = v7;
  a4[1] = v7;
  a4[2] = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a4[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v22);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_2424B6A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 56));
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(a1);
}

BOOL mlx::core::SliceUpdate::is_equivalent(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;

  v5 = a1 + 3;
  v4 = (const void *)a1[3];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 3;
  v7 = (const void *)a2[3];
  if (v6 == v8[1] - (_QWORD)v7
    && !memcmp(v4, v7, v6)
    && (v9 = (const void *)a1[6], v10 = a1[7] - (_QWORD)v9, v11 = (const void *)a2[6], v10 == a2[7] - (_QWORD)v11)
    && !memcmp(v9, v11, v10)
    && (v12 = (const void *)a1[9], v13 = a1[10] - (_QWORD)v12, v14 = (const void *)a2[9], v13 == a2[10] - (_QWORD)v14))
  {
    return memcmp(v12, v14, v13) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Sort::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core::array *v6;
  int v8;
  int v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sort::vmap();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 4)
    mlx::core::Sort::vmap();
  v8 = **(_DWORD **)a3;
  v9 = *(_DWORD *)(a1 + 20);
  if (v8 >= 0 && v8 <= v9)
    v11 = v9 + 1;
  else
    v11 = *(_DWORD *)(a1 + 20);
  mlx::core::sort(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (void **)&v16;
  v20 = 0;
  v12 = operator new(0x10uLL);
  v16 = v12;
  v17 = v12;
  v18 = v12 + 2;
  v13 = v21[1];
  *v12 = v21[0];
  v12[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, a3);
  v19 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v19);
  mlx::core::array::~array((mlx::core::array *)v21);
}

void sub_2424B6C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sort::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Sort::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int *v6;
  uint64_t v7;
  const void **v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  const void **v14;
  uint64_t v15;
  _QWORD v16[3];
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sort::jvp();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 16)
    mlx::core::Sort::jvp();
  v6 = (int *)(a1 + 20);
  mlx::core::argsort(*(mlx::core::array **)a2, *(_DWORD *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  mlx::core::take_along_axis(*(mlx::core::array **)a3, v16, *v6, *(mlx::core **)(v6 - 3), *(v6 - 1) | 0x100000000, &v14);
  v8 = v14;
  v7 = v15;
  v18[0] = v14;
  v18[1] = v15;
  if (v15)
  {
    v9 = (unint64_t *)(v15 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v16[2] = a4;
  v17 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 2;
  *v11 = v8;
  v11[1] = v7;
  if (v7)
  {
    v12 = (unint64_t *)(v7 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 2;
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)&v14);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424B6DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Sort::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::Split::vmap(uint64_t a1@<X0>, int ***a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  int v7;
  int v9;
  _QWORD *v10[3];
  void **v11;

  v6 = **a3;
  v7 = *(_DWORD *)(a1 + 48);
  if (v6 >= 0 && v6 <= v7)
    v9 = v7 + 1;
  else
    v9 = *(_DWORD *)(a1 + 48);
  mlx::core::split(*a2, a1 + 24, v9, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (uint64_t *)v10);
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, v10, (uint64_t)a3);
  v11 = (void **)v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_2424B6ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::Split::vjp(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::concatenate(a2, *(_DWORD *)(a1 + 48), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = operator new(0x10uLL);
  *a3 = v4;
  a3[1] = v4;
  a3[2] = v4 + 2;
  v5 = v8[1];
  *v4 = v8[0];
  v4[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a3[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v8);
}

void sub_2424B6FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Split::jvp(uint64_t a1@<X0>, int ***a2@<X2>, uint64_t *a3@<X8>)
{
  mlx::core::split(*a2, a1 + 24, *(_DWORD *)(a1 + 48), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, a3);
}

BOOL mlx::core::Split::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
    && (v3 = a1 + 24,
        v2 = *(const void **)(a1 + 24),
        v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2,
        v6 = a2 + 24,
        v5 = *(const void **)(a2 + 24),
        v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlx::core::Square::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Square::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int **v12[2];
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Square::jvp();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 16)
    mlx::core::Square::jvp();
  mlx::core::array::array<int>(v12, 2, *(_QWORD *)(*v5 + 56));
  mlx::core::multiply(v12, *(_QWORD **)a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::multiply(v5, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v13[2] = a4;
  v14 = 0;
  v8 = operator new(0x10uLL);
  *a4 = v8;
  a4[1] = v8;
  a4[2] = v8 + 2;
  v9 = v15[1];
  *v8 = v15[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a4[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424B717C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Square::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Square::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Square::vmap();
  mlx::core::square(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B72D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  mlx::core::array *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int **v21[2];
  int **v22[2];
  _QWORD *v23;
  char v24;
  _QWORD v25[2];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - (_QWORD)v6 != 16)
    mlx::core::Sqrt::vjp();
  if ((char *)a3[1] - (char *)*a3 != 16)
    mlx::core::Sqrt::vjp();
  v11 = *(_QWORD *)(*v6 + 56);
  if (*(_BYTE *)(a1 + 20))
  {
    mlx::core::divide(*a4, v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
    mlx::core::array::array<double>(v21, v11, -0.5);
    mlx::core::multiply(v21, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
    mlx::core::multiply(v22, v26, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v23 = a5;
    v24 = 0;
    v12 = operator new(0x10uLL);
    *a5 = v12;
    a5[1] = v12;
    a5[2] = v12 + 2;
    v13 = v25[1];
    *v12 = v25[0];
    v12[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    a5[1] = v12 + 2;
    mlx::core::array::~array((mlx::core::array *)v25);
    mlx::core::array::~array((mlx::core::array *)v22);
    mlx::core::array::~array((mlx::core::array *)v21);
    v16 = (mlx::core::array *)v26;
  }
  else
  {
    mlx::core::array::array<double>(v22, *(_QWORD *)(*v6 + 56), 0.5);
    mlx::core::multiply(v22, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
    mlx::core::divide(v25, *a4, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v23 = a5;
    v24 = 0;
    v17 = operator new(0x10uLL);
    *a5 = v17;
    a5[1] = v17;
    a5[2] = v17 + 2;
    v18 = v26[1];
    *v17 = v26[0];
    v17[1] = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    a5[1] = v17 + 2;
    mlx::core::array::~array((mlx::core::array *)v26);
    mlx::core::array::~array((mlx::core::array *)v25);
    v16 = (mlx::core::array *)v22;
  }
  mlx::core::array::~array(v16);
}

void sub_2424B7520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  void **v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void **);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::jvp(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 20))
  {
    mlx::core::rsqrt(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = (void **)&v15;
    v19 = 0;
    v8 = operator new(0x10uLL);
    v15 = v8;
    v16 = v8;
    v17 = v8 + 2;
    v9 = v21;
    *v8 = v20;
    v8[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    mlx::core::sqrt(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = (void **)&v15;
    v19 = 0;
    v8 = operator new(0x10uLL);
    v15 = v8;
    v16 = v8;
    v17 = v8 + 2;
    v12 = v21;
    *v8 = v20;
    v8[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  v16 = v8 + 2;
  (*(void (**)(uint64_t, _QWORD **, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 24))(a1, a2, a3, a4, &v15);
  v18 = (void **)&v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v18);
  mlx::core::array::~array((mlx::core::array *)&v20);
}

void sub_2424B774C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sqrt::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Sqrt::vmap();
  if (*(_BYTE *)(a1 + 20))
  {
    mlx::core::rsqrt(v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = (void **)&v15;
    v19 = 0;
    v8 = operator new(0x10uLL);
    v15 = v8;
    v16 = v8;
    v17 = v8 + 2;
    v9 = v21;
    *v8 = v20;
    v8[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    mlx::core::sqrt(v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = (void **)&v15;
    v19 = 0;
    v8 = operator new(0x10uLL);
    v15 = v8;
    v16 = v8;
    v17 = v8 + 2;
    v12 = v21;
    *v8 = v20;
    v8[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  v16 = v8 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v15, (uint64_t)a3);
  v18 = (void **)&v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v18);
  mlx::core::array::~array((mlx::core::array *)&v20);
}

void sub_2424B7918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Sqrt::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20);
}

void mlx::core::StopGradient::vmap(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  mlx::core::stop_gradient(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B7A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::vjp(uint64_t a1@<X0>, _QWORD **a2@<X2>, int **a3@<X3>, uint64_t a4@<X8>)
{
  int *v4;
  int *v5;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      v9 = *v4;
      v10 = (*a2)[1];
      *(_QWORD *)&v18 = **a2;
      *((_QWORD *)&v18 + 1) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      if (v9 == 1)
      {
        mlx::core::negative(&v18, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v17);
        v13 = v17;
        v17 = 0uLL;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
        v18 = v13;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        mlx::core::array::~array((mlx::core::array *)&v17);
      }
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, &v18);
      mlx::core::array::~array((mlx::core::array *)&v18);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2424B7B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::jvp(uint64_t a1@<X0>, _QWORD **a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  if (*(_DWORD *)*a3 == 1)
  {
    mlx::core::negative(v8, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v27);
  }
  else
  {
    v9 = v8[1];
    *(_QWORD *)&v27 = *v8;
    *((_QWORD *)&v27 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  if (a3[1] - *a3 >= 5uLL)
  {
    v12 = *a2;
    if (*(_DWORD *)(*a3 + 4) == 1)
    {
      mlx::core::negative(v12 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v29);
    }
    else
    {
      v14 = v12[2];
      v13 = v12[3];
      *(_QWORD *)&v29 = v14;
      *((_QWORD *)&v29 + 1) = v13;
      if (v13)
      {
        v15 = (unint64_t *)(v13 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
    }
    mlx::core::add(&v27, &v29, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v28);
    v17 = v28;
    v28 = 0uLL;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    v27 = v17;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v28);
    mlx::core::array::~array((mlx::core::array *)&v29);
  }
  v21 = v27;
  v29 = v27;
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *(_QWORD *)&v28 = a4;
  BYTE8(v28) = 0;
  v24 = operator new(0x10uLL);
  *a4 = v24;
  a4[1] = v24;
  a4[2] = v24 + 1;
  *v24 = v21;
  if (*((_QWORD *)&v21 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  a4[1] = v24 + 1;
  mlx::core::array::~array((mlx::core::array *)&v29);
  mlx::core::array::~array((mlx::core::array *)&v27);
}

void sub_2424B7D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  mlx::core **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  void *__p;
  void *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (mlx::core **)(a1 + 8);
  mlx::core::subtract(v19, v20, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = &v16;
  LOBYTE(v14) = 0;
  v7 = operator new(0x10uLL);
  v16 = v7;
  v17 = v7;
  v18 = v7 + 2;
  v8 = v22[1];
  *v7 = v22[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v17 = v7 + 2;
  v11 = v21;
  v12 = operator new(4uLL);
  __p = v12;
  *v12 = v11;
  v14 = v12 + 1;
  v15 = v12 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  __p = &v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_2424B7F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  mlx::core::array *v15;
  uint64_t v16;

  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Tan::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Tan::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  _QWORD *v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tan::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Tan::jvp();
  mlx::core::cos(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v13);
  mlx::core::square(&v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::array::~array((mlx::core::array *)&v13);
  mlx::core::divide(*a3, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v13 = a5;
  v14 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v15[1];
  *v8 = v15[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424B80D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Tan::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tan::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Tan::vmap();
  mlx::core::tan(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B8228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Tanh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void mlx::core::Tanh::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  _QWORD *v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tanh::jvp();
  if (a4[1] - *a4 != 4)
    mlx::core::Tanh::jvp();
  mlx::core::cosh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v13);
  mlx::core::square(&v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::array::~array((mlx::core::array *)&v13);
  mlx::core::divide(*a3, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v13 = a5;
  v14 = 0;
  v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  v9 = v15[1];
  *v8 = v15[0];
  v8[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_2424B83AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Tanh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tanh::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Tanh::vmap();
  mlx::core::tanh(*(_QWORD **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (void **)&v10;
  v14 = 0;
  v6 = operator new(0x10uLL);
  v10 = v6;
  v11 = v6;
  v12 = v6 + 2;
  v7 = v15[1];
  *v6 = v15[0];
  v6[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2424B8500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::BlockMaskedMM::vjp(uint64_t a1@<X0>, const void ****a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int v12;
  const void ***v13;
  unint64_t v14;
  int v15;
  int *v16;
  int v17;
  const void ***v18;
  const void **v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  const void **v23;
  unint64_t *v24;
  unint64_t v25;
  const void **v26;
  const void **v27;
  unint64_t *v28;
  unint64_t v29;
  int *v30;
  int *v31;
  char v32;
  int v33;
  uint64_t **v34;
  const void **v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  uint64_t **v39;
  const void **v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  const void ***v44;
  const void ***v45;
  const void **v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  const void ***v50;
  const void **v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t **v54;
  const void **v55;
  unint64_t *v56;
  unint64_t v57;
  char v58;
  uint64_t **v59;
  const void **v60;
  unint64_t *v61;
  unint64_t v62;
  char v63;
  const void ***v64;
  const void ***v65;
  const void **v66;
  unint64_t *v67;
  unint64_t v68;
  char v69;
  unint64_t *v70;
  unint64_t v71;
  const void **v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  const void ***v82;
  const void **v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  const void ***v90;
  const void **v91;
  unint64_t *v92;
  unint64_t v93;
  const void ***v94;
  const void **v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  const void ***v107;
  const void **v108;
  unint64_t *v109;
  unint64_t v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  mlx::core::array *v115;
  const void ***v116;
  const void **v117;
  unint64_t *v118;
  unint64_t v119;
  const void **v120;
  unint64_t *v121;
  unint64_t v122;
  int v123;
  const void **v124;
  const void **v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  const void ***v137;
  const void **v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  int v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 v148;
  std::__shared_weak_count *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  uint64_t *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  const void ***v157;
  unint64_t *v158;
  unint64_t v159;
  const void **v160;
  unint64_t *v161;
  unint64_t v162;
  int v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  __int128 v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::logic_error *v177;
  std::logic_error *exception;
  int v179;
  int v180;
  char v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  _QWORD v192[2];
  _QWORD v193[2];
  char v194;
  __int128 v195;
  char v196;
  _BYTE v197[16];
  char v198;
  const void **v199[2];
  __int128 v200;
  void *v201;
  void *v202;
  uint64_t v203;
  void *v204;
  void *v205;
  uint64_t v206;
  __int128 v207;
  _QWORD v208[2];
  __int128 v209;
  char v210;
  _QWORD v211[2];
  char v212;
  _BYTE v213[16];
  char v214;
  __int128 v215;
  const void **v216[2];
  void *v217;
  void *v218;
  uint64_t v219;
  void *v220;
  void *v221;
  uint64_t v222;
  __int128 v223;
  _QWORD v224[2];
  __int128 v225;
  char v226;
  _QWORD v227[2];
  char v228;
  _QWORD v229[2];
  char v230;
  const void **v231[2];
  const void **v232[2];
  _QWORD v233[2];
  _QWORD v234[2];
  char v235;
  __int128 v236;
  char v237;
  __int128 v238;
  char v239;
  const void **v240[2];
  __int128 v241;
  void *v242;
  void *v243;
  uint64_t v244;
  void *__p;
  void *v246;
  uint64_t v247;
  __int128 v248;
  _QWORD v249[2];
  __int128 v250;
  __int128 v251;
  char v252;
  _QWORD v253[2];
  char v254;
  __int128 v255;
  char v256;
  __int128 v257;
  const void **v258[2];
  void *v259;
  void *v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  char v264;
  __int128 v265;
  char v266;
  const void **v267;
  const void **v268;
  char v269;
  unsigned int *v270;
  unsigned int *v271;
  uint64_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  mlx::core **v276[2];
  int **v277[2];
  uint64_t v278;
  std::vector<int> v279;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v9 = *(_QWORD **)a3;
  std::vector<int>::vector(&v279, (uint64_t)(*(_QWORD *)(**(_QWORD **)a3 + 8) - ***(_QWORD ***)a3) >> 2);
  begin = v279.__begin_;
  end = v279.__end_;
  if (v279.__begin_ != v279.__end_)
  {
    v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  *((int32x2_t *)end - 1) = vrev64_s32(*(int32x2_t *)(end - 2));
  v13 = *a2;
  v14 = (char *)a2[1] - (char *)*a2;
  if (v14 == 80 || v14 == 48)
  {
    v187 = 3;
    v15 = 1;
  }
  else
  {
    v15 = 0;
    v187 = 2;
  }
  v16 = a4[1];
  if (*a4 == v16)
  {
    if (v14 <= 0x30)
    {
      v188 = 0;
LABEL_16:
      v183 = 0;
      goto LABEL_17;
    }
    v188 = 1;
  }
  else
  {
    v17 = *(int *)((char *)*a4 + (((char *)v16 - (char *)*a4 - 4) & 0xFFFFFFFFFFFFFFFCLL));
    v188 = v17 == v187 + 1;
    if (v17 != v187)
      goto LABEL_16;
  }
  if (!*((_DWORD *)v13[2 * v187] + 14))
    goto LABEL_306;
  v183 = 1;
LABEL_17:
  if (v188 && !*((_DWORD *)v13[2 * v187 + 2] + 14))
  {
LABEL_306:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[BlockMaskedMM] Cannot calculate VJP with respect to BOOLean masks.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v278 = a1;
  mlx::core::array::array<int>(v277, 0, *(_QWORD *)(*v9 + 56));
  v276[0] = (mlx::core **)a1;
  v276[1] = (mlx::core **)v277;
  if (*(_QWORD *)(*v9 + 8) - *(_QWORD *)*v9 <= 4uLL)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v18 = *a2;
  v19 = **a2;
  v20 = v19[1];
  if (v20 == *v19)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v21 = *(_QWORD *)(*v9 + 8);
  v179 = *(_DWORD *)(v21 - 8);
  v180 = *(_DWORD *)(v21 - 4);
  v182 = *(v20 - 1);
  v22 = *(_DWORD *)(a1 + 20);
  v23 = v18[1];
  *(_QWORD *)&v275 = **a2;
  *((_QWORD *)&v275 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v18 = *a2;
  }
  v27 = v18[2];
  v26 = v18[3];
  *(_QWORD *)&v274 = v27;
  *((_QWORD *)&v274 + 1) = v26;
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v31 = *a4;
  v30 = a4[1];
  if (v31 != v30)
  {
    v185 = v179 % v22;
    v184 = v180 % v22;
    v186 = v182 % v22;
    v189 = 0;
    v190 = v187 + 1;
    v32 = v183;
    if (v14 < 0x31)
      v32 = 1;
    v181 = v32;
    while (1)
    {
      v33 = *v31;
      if (*v31 != 2)
        break;
      if (!v15)
      {
LABEL_59:
        if (v14 >= 0x31 && v33 == v187)
        {
          v54 = (uint64_t **)*a2;
          if ((v189 & 0x100000000) == 0)
          {
            v221 = 0;
            v222 = 0;
            v220 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v220, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
            mlx::core::transpose(v54 + 2, (unsigned int **)&v220, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v265);
            if (v220)
            {
              v221 = v220;
              operator delete(v220);
            }
            if (v15)
            {
              v55 = (*a2)[5];
              v267 = (*a2)[4];
              v268 = v55;
              if (v55)
              {
                v56 = (unint64_t *)(v55 + 1);
                do
                  v57 = __ldxr(v56);
                while (__stxr(v57 + 1, v56));
              }
              v58 = 1;
            }
            else
            {
              v58 = 0;
              LOBYTE(v267) = 0;
            }
            v269 = v58;
            v137 = *a2;
            v218 = 0;
            v219 = 0;
            v217 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v217, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
            mlx::core::transpose((uint64_t **)&v137[2 * v190], (unsigned int **)&v217, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v263);
            if (v217)
            {
              v218 = v217;
              operator delete(v217);
            }
            v138 = (const void **)v9[1];
            v216[0] = *(const void ***)v9;
            v216[1] = v138;
            if (v138)
            {
              v139 = (unint64_t *)(v138 + 1);
              do
                v140 = __ldxr(v139);
              while (__stxr(v140 + 1, v139));
            }
            v215 = v265;
            if (*((_QWORD *)&v265 + 1))
            {
              v141 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
              do
                v142 = __ldxr(v141);
              while (__stxr(v142 + 1, v141));
            }
            v143 = *(_DWORD *)(a1 + 20);
            v213[0] = 0;
            v214 = 0;
            LOBYTE(v211[0]) = 0;
            v212 = 0;
            if (v269)
            {
              v211[0] = v267;
              v211[1] = v268;
              if (v268)
              {
                v144 = (unint64_t *)(v268 + 1);
                do
                  v145 = __ldxr(v144);
                while (__stxr(v145 + 1, v144));
              }
              v212 = 1;
            }
            v209 = v263;
            if (*((_QWORD *)&v263 + 1))
            {
              v146 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
              do
                v147 = __ldxr(v146);
              while (__stxr(v147 + 1, v146));
            }
            v210 = 1;
            mlx::core::block_masked_mm(v216, (const void ***)&v215, v143, (uint64_t)v213, (uint64_t)v211, (uint64_t)&v209, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v273);
            v148 = v273;
            v273 = 0uLL;
            v149 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
            v275 = v148;
            if (v149)
            {
              p_shared_owners = (unint64_t *)&v149->__shared_owners_;
              do
                v151 = __ldaxr(p_shared_owners);
              while (__stlxr(v151 - 1, p_shared_owners));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            mlx::core::array::~array((mlx::core::array *)&v273);
            if (v210)
              mlx::core::array::~array((mlx::core::array *)&v209);
            if (v212)
              mlx::core::array::~array((mlx::core::array *)v211);
            if (v214)
              mlx::core::array::~array((mlx::core::array *)v213);
            mlx::core::array::~array((mlx::core::array *)&v215);
            mlx::core::array::~array((mlx::core::array *)v216);
            mlx::core::array::~array((mlx::core::array *)&v263);
            if (v269)
              mlx::core::array::~array((mlx::core::array *)&v267);
            mlx::core::array::~array((mlx::core::array *)&v265);
            v54 = (uint64_t **)*a2;
          }
          v152 = v54[1];
          v208[0] = *v54;
          v208[1] = v152;
          if (v152)
          {
            v153 = (unint64_t *)(v152 + 1);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 1, v153));
          }
          v207 = v275;
          if (*((_QWORD *)&v275 + 1))
          {
            v155 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
            do
              v156 = __ldxr(v155);
            while (__stxr(v156 + 1, v155));
          }
          mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(v276, v208, &v207, v185, v186, (mlx::core::array *)&v267);
          mlx::core::array::~array((mlx::core::array *)&v207);
          mlx::core::array::~array((mlx::core::array *)v208);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v267);
          mlx::core::array::~array((mlx::core::array *)&v267);
          BYTE4(v189) = 1;
        }
        else
        {
          if (v14 < 0x31 || v33 != (_DWORD)v190)
          {
            v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v177, "[BlockMaskedMM] Cannot calculate VJP with respect to masks.");
            v177->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v177, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
          }
          v59 = (uint64_t **)*a2;
          if ((v189 & 1) == 0)
          {
            v205 = 0;
            v206 = 0;
            v204 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v204, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
            mlx::core::transpose(v59, (unsigned int **)&v204, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v265);
            if (v204)
            {
              v205 = v204;
              operator delete(v204);
            }
            if (v15)
            {
              v60 = (*a2)[5];
              v267 = (*a2)[4];
              v268 = v60;
              if (v60)
              {
                v61 = (unint64_t *)(v60 + 1);
                do
                  v62 = __ldxr(v61);
                while (__stxr(v62 + 1, v61));
              }
              v63 = 1;
            }
            else
            {
              v63 = 0;
              LOBYTE(v267) = 0;
            }
            v269 = v63;
            v157 = *a2;
            v202 = 0;
            v203 = 0;
            v201 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
            mlx::core::transpose((uint64_t **)&v157[2 * v187], (unsigned int **)&v201, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v263);
            if (v201)
            {
              v202 = v201;
              operator delete(v201);
            }
            v200 = v265;
            if (*((_QWORD *)&v265 + 1))
            {
              v158 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
              do
                v159 = __ldxr(v158);
              while (__stxr(v159 + 1, v158));
            }
            v160 = (const void **)v9[1];
            v199[0] = *(const void ***)v9;
            v199[1] = v160;
            if (v160)
            {
              v161 = (unint64_t *)(v160 + 1);
              do
                v162 = __ldxr(v161);
              while (__stxr(v162 + 1, v161));
            }
            v163 = *(_DWORD *)(a1 + 20);
            v197[0] = 0;
            v198 = 0;
            v195 = v263;
            if (*((_QWORD *)&v263 + 1))
            {
              v164 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
              do
                v165 = __ldxr(v164);
              while (__stxr(v165 + 1, v164));
            }
            v196 = 1;
            LOBYTE(v193[0]) = 0;
            v194 = 0;
            if (v269)
            {
              v193[0] = v267;
              v193[1] = v268;
              if (v268)
              {
                v166 = (unint64_t *)(v268 + 1);
                do
                  v167 = __ldxr(v166);
                while (__stxr(v167 + 1, v166));
              }
              v194 = 1;
            }
            mlx::core::block_masked_mm((const void ***)&v200, v199, v163, (uint64_t)v197, (uint64_t)&v195, (uint64_t)v193, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v273);
            v168 = v273;
            v273 = 0uLL;
            v169 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
            v274 = v168;
            if (v169)
            {
              v170 = (unint64_t *)&v169->__shared_owners_;
              do
                v171 = __ldaxr(v170);
              while (__stlxr(v171 - 1, v170));
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
            }
            mlx::core::array::~array((mlx::core::array *)&v273);
            if (v194)
              mlx::core::array::~array((mlx::core::array *)v193);
            if (v196)
              mlx::core::array::~array((mlx::core::array *)&v195);
            if (v198)
              mlx::core::array::~array((mlx::core::array *)v197);
            mlx::core::array::~array((mlx::core::array *)v199);
            mlx::core::array::~array((mlx::core::array *)&v200);
            mlx::core::array::~array((mlx::core::array *)&v263);
            if (v269)
              mlx::core::array::~array((mlx::core::array *)&v267);
            mlx::core::array::~array((mlx::core::array *)&v265);
            v59 = (uint64_t **)*a2;
          }
          v172 = v59[3];
          v192[0] = v59[2];
          v192[1] = v172;
          if (v172)
          {
            v173 = (unint64_t *)(v172 + 1);
            do
              v174 = __ldxr(v173);
            while (__stxr(v174 + 1, v173));
          }
          v191 = v274;
          if (*((_QWORD *)&v274 + 1))
          {
            v175 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
            do
              v176 = __ldxr(v175);
            while (__stxr(v176 + 1, v175));
          }
          mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(v276, v192, &v191, v186, v184, (mlx::core::array *)&v267);
          mlx::core::array::~array((mlx::core::array *)&v191);
          mlx::core::array::~array((mlx::core::array *)v192);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v267);
          mlx::core::array::~array((mlx::core::array *)&v267);
          LOBYTE(v189) = 1;
        }
        goto LABEL_301;
      }
      if (v14 < 0x31)
      {
        v49 = 0;
        LOBYTE(v267) = 0;
        v269 = 0;
        LOBYTE(v265) = 0;
      }
      else
      {
        v44 = *a2;
        v45 = &(*a2)[2 * v187];
        v267 = *v45;
        v46 = v45[1];
        v268 = v46;
        if (v46)
        {
          v47 = (unint64_t *)(v46 + 1);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v44 = *a2;
        }
        v49 = 1;
        v269 = 1;
        v50 = &v44[2 * v190];
        *(_QWORD *)&v265 = *v50;
        v51 = v50[1];
        *((_QWORD *)&v265 + 1) = v51;
        if (v51)
        {
          v52 = (unint64_t *)(v51 + 1);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
          v49 = 1;
        }
      }
      v266 = v49;
      v116 = *a2;
      v117 = (*a2)[1];
      v232[0] = **a2;
      v232[1] = v117;
      if (v117)
      {
        v118 = (unint64_t *)(v117 + 1);
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
        v116 = *a2;
      }
      v120 = v116[3];
      v231[0] = v116[2];
      v231[1] = v120;
      if (v120)
      {
        v121 = (unint64_t *)(v120 + 1);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
        v116 = *a2;
      }
      v123 = *(_DWORD *)(a1 + 20);
      v125 = v116[4];
      v124 = v116[5];
      v229[0] = v125;
      v229[1] = v124;
      if (v124)
      {
        v126 = (unint64_t *)(v124 + 1);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      v230 = 1;
      LOBYTE(v227[0]) = 0;
      v228 = 0;
      if (v269)
      {
        v227[0] = v267;
        v227[1] = v268;
        if (v268)
        {
          v128 = (unint64_t *)(v268 + 1);
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        v228 = 1;
      }
      LOBYTE(v225) = 0;
      v226 = 0;
      if (v266)
      {
        v225 = v265;
        if (*((_QWORD *)&v265 + 1))
        {
          v130 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
        v226 = 1;
      }
      mlx::core::block_masked_mm(v232, v231, v123, (uint64_t)v229, (uint64_t)v227, (uint64_t)&v225, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v263);
      if (v226)
        mlx::core::array::~array((mlx::core::array *)&v225);
      if (v228)
        mlx::core::array::~array((mlx::core::array *)v227);
      if (v230)
        mlx::core::array::~array((mlx::core::array *)v229);
      mlx::core::array::~array((mlx::core::array *)v231);
      mlx::core::array::~array((mlx::core::array *)v232);
      v132 = v9[1];
      v224[0] = *v9;
      v224[1] = v132;
      if (v132)
      {
        v133 = (unint64_t *)(v132 + 8);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
      v223 = v263;
      if (*((_QWORD *)&v263 + 1))
      {
        v135 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v136 = __ldxr(v135);
        while (__stxr(v136 + 1, v135));
      }
      mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(v276, v224, &v223, v185, v184, (mlx::core::array *)&v273);
      mlx::core::array::~array((mlx::core::array *)&v223);
      mlx::core::array::~array((mlx::core::array *)v224);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v273);
      mlx::core::array::~array((mlx::core::array *)&v273);
      mlx::core::array::~array((mlx::core::array *)&v263);
      if (v266)
        mlx::core::array::~array((mlx::core::array *)&v265);
      if (!v269)
        goto LABEL_301;
      v115 = (mlx::core::array *)&v267;
LABEL_186:
      mlx::core::array::~array(v115);
LABEL_301:
      if (++v31 == v30)
        goto LABEL_302;
    }
    if (v33 != 1)
    {
      if (v33)
        goto LABEL_59;
      v34 = (uint64_t **)*a2;
      v271 = 0;
      v272 = 0;
      v270 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v270, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
      mlx::core::transpose(v34 + 2, &v270, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v273);
      if (v270)
      {
        v271 = v270;
        operator delete(v270);
      }
      if (v15)
      {
        v35 = (*a2)[5];
        v267 = (*a2)[4];
        v268 = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 1);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = 1;
      }
      else
      {
        v38 = 0;
        LOBYTE(v267) = 0;
      }
      v269 = v38;
      if ((v181 & 1) != 0)
      {
        LOBYTE(v265) = 0;
        v266 = 0;
        if (v14 < 0x31)
        {
          LOBYTE(v263) = 0;
          v264 = 0;
LABEL_140:
          v95 = (const void **)v9[1];
          v258[0] = *(const void ***)v9;
          v258[1] = v95;
          if (v95)
          {
            v96 = (unint64_t *)(v95 + 1);
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          v257 = v273;
          if (*((_QWORD *)&v273 + 1))
          {
            v98 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }
          v100 = *(_DWORD *)(a1 + 20);
          LOBYTE(v255) = 0;
          v256 = 0;
          if (v266)
          {
            v255 = v265;
            if (*((_QWORD *)&v265 + 1))
            {
              v101 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
            v256 = 1;
          }
          LOBYTE(v253[0]) = 0;
          v254 = 0;
          if (v269)
          {
            v253[0] = v267;
            v253[1] = v268;
            if (v268)
            {
              v103 = (unint64_t *)(v268 + 1);
              do
                v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
            }
            v254 = 1;
          }
          LOBYTE(v251) = 0;
          v252 = 0;
          if (v264)
          {
            v251 = v263;
            if (*((_QWORD *)&v263 + 1))
            {
              v105 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            v252 = 1;
          }
          mlx::core::block_masked_mm(v258, (const void ***)&v257, v100, (uint64_t)&v255, (uint64_t)v253, (uint64_t)&v251, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v262);
          if (v252)
            mlx::core::array::~array((mlx::core::array *)&v251);
          if (v254)
            mlx::core::array::~array((mlx::core::array *)v253);
          if (v256)
            mlx::core::array::~array((mlx::core::array *)&v255);
          mlx::core::array::~array((mlx::core::array *)&v257);
          mlx::core::array::~array((mlx::core::array *)v258);
          if (v183)
          {
            if ((_QWORD)v275 != (_QWORD)v262)
              std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](&v275, (uint64_t *)&v262);
            v107 = &(*a2)[2 * v187];
            v249[0] = *v107;
            v108 = v107[1];
            v249[1] = v108;
            if (v108)
            {
              v109 = (unint64_t *)(v108 + 1);
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v278, (uint64_t)v249, v179, v182, &v250);
            mlx::core::array::~array((mlx::core::array *)v249);
            mlx::core::multiply(&v262, &v250, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v248);
            v111 = v248;
            v248 = 0uLL;
            v112 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
            v262 = v111;
            if (v112)
            {
              v113 = (unint64_t *)&v112->__shared_owners_;
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            mlx::core::array::~array((mlx::core::array *)&v248);
            mlx::core::array::~array((mlx::core::array *)&v250);
            BYTE4(v189) = 1;
          }
LABEL_179:
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v262);
          mlx::core::array::~array((mlx::core::array *)&v262);
          if (v264)
            mlx::core::array::~array((mlx::core::array *)&v263);
          if (v266)
            mlx::core::array::~array((mlx::core::array *)&v265);
          if (v269)
            mlx::core::array::~array((mlx::core::array *)&v267);
          v115 = (mlx::core::array *)&v273;
          goto LABEL_186;
        }
      }
      else
      {
        v90 = &(*a2)[2 * v187];
        *(_QWORD *)&v265 = *v90;
        v91 = v90[1];
        *((_QWORD *)&v265 + 1) = v91;
        if (v91)
        {
          v92 = (unint64_t *)(v91 + 1);
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
        v266 = 1;
      }
      v94 = *a2;
      v261 = 0;
      v259 = 0;
      v260 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v259, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
      mlx::core::transpose((uint64_t **)&v94[2 * v190], (unsigned int **)&v259, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v262);
      v263 = v262;
      v262 = 0uLL;
      v264 = 1;
      mlx::core::array::~array((mlx::core::array *)&v262);
      if (v259)
      {
        v260 = v259;
        operator delete(v259);
      }
      goto LABEL_140;
    }
    v39 = (uint64_t **)*a2;
    v247 = 0;
    __p = 0;
    v246 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
    mlx::core::transpose(v39, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v273);
    if (__p)
    {
      v246 = __p;
      operator delete(__p);
    }
    if (v15)
    {
      v40 = (*a2)[5];
      v267 = (*a2)[4];
      v268 = v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 1);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = 1;
    }
    else
    {
      v43 = 0;
      LOBYTE(v267) = 0;
    }
    v269 = v43;
    if (v14 < 0x31)
    {
      LOBYTE(v265) = 0;
      v266 = 0;
    }
    else
    {
      v64 = *a2;
      v244 = 0;
      v242 = 0;
      v243 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v242, v279.__begin_, (uint64_t)v279.__end_, v279.__end_ - v279.__begin_);
      mlx::core::transpose((uint64_t **)&v64[2 * v187], (unsigned int **)&v242, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v263);
      v265 = v263;
      v263 = 0uLL;
      v266 = 1;
      mlx::core::array::~array((mlx::core::array *)&v263);
      if (v242)
      {
        v243 = v242;
        operator delete(v242);
      }
      if (!v188)
      {
        v65 = &(*a2)[2 * v190];
        *(_QWORD *)&v263 = *v65;
        v66 = v65[1];
        *((_QWORD *)&v263 + 1) = v66;
        if (v66)
        {
          v67 = (unint64_t *)(v66 + 1);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v69 = 1;
        goto LABEL_90;
      }
    }
    v69 = 0;
    LOBYTE(v263) = 0;
LABEL_90:
    v264 = v69;
    v241 = v273;
    if (*((_QWORD *)&v273 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = (const void **)v9[1];
    v240[0] = *(const void ***)v9;
    v240[1] = v72;
    if (v72)
    {
      v73 = (unint64_t *)(v72 + 1);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    v75 = *(_DWORD *)(a1 + 20);
    LOBYTE(v238) = 0;
    v239 = 0;
    if (v264)
    {
      v238 = v263;
      if (*((_QWORD *)&v263 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      v239 = 1;
    }
    LOBYTE(v236) = 0;
    v237 = 0;
    if (v266)
    {
      v236 = v265;
      if (*((_QWORD *)&v265 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      v237 = 1;
    }
    LOBYTE(v234[0]) = 0;
    v235 = 0;
    if (v269)
    {
      v234[0] = v267;
      v234[1] = v268;
      if (v268)
      {
        v80 = (unint64_t *)(v268 + 1);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v235 = 1;
    }
    mlx::core::block_masked_mm((const void ***)&v241, v240, v75, (uint64_t)&v238, (uint64_t)&v236, (uint64_t)v234, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v262);
    if (v235)
      mlx::core::array::~array((mlx::core::array *)v234);
    if (v237)
      mlx::core::array::~array((mlx::core::array *)&v236);
    if (v239)
      mlx::core::array::~array((mlx::core::array *)&v238);
    mlx::core::array::~array((mlx::core::array *)v240);
    mlx::core::array::~array((mlx::core::array *)&v241);
    if (v188)
    {
      if ((_QWORD)v274 != (_QWORD)v262)
        std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](&v274, (uint64_t *)&v262);
      v82 = &(*a2)[2 * v190];
      v233[0] = *v82;
      v83 = v82[1];
      v233[1] = v83;
      if (v83)
      {
        v84 = (unint64_t *)(v83 + 1);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v278, (uint64_t)v233, v182, v180, &v250);
      mlx::core::array::~array((mlx::core::array *)v233);
      mlx::core::multiply(&v262, &v250, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v248);
      v86 = v248;
      v248 = 0uLL;
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
      v262 = v86;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      mlx::core::array::~array((mlx::core::array *)&v248);
      mlx::core::array::~array((mlx::core::array *)&v250);
      LOBYTE(v189) = 1;
    }
    goto LABEL_179;
  }
LABEL_302:
  mlx::core::array::~array((mlx::core::array *)&v274);
  mlx::core::array::~array((mlx::core::array *)&v275);
  mlx::core::array::~array((mlx::core::array *)v277);
  if (v279.__begin_)
  {
    v279.__end_ = v279.__begin_;
    operator delete(v279.__begin_);
  }
}

void sub_2424B98D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(_QWORD *)(v2 - 104) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v2 - 112) = v1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_2424B9C80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 232);
  if (v1)
  {
    *(_QWORD *)(v0 - 224) = v1;
    JUMPOUT(0x2424B9C90);
  }
  JUMPOUT(0x2424B9C44);
}

void mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  const void **v10;
  _QWORD *v11;
  const void **v12;
  char *v13;
  int64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  std::vector<int>::value_type __x;
  std::vector<int> v25;
  __int128 v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *__p;
  _BYTE *v31;
  _QWORD *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;

  v9 = *a1;
  v10 = *(const void ***)a2;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *v10, (uint64_t)v10[1], ((_BYTE *)v10[1] - (_BYTE *)*v10) >> 2);
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = -3;
  v31 = v11 + 1;
  v32 = v11 + 1;
  mlx::core::expand_dims((const void ***)a2, (int **)&__p, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v25);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](a2, (__int128 *)&v25);
  mlx::core::array::~array((mlx::core::array *)&v25);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  v12 = *(const void ***)a2;
  v31 = 0;
  v32 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *v12, (uint64_t)v12[1], ((_BYTE *)v12[1] - (_BYTE *)*v12) >> 2);
  v13 = (char *)__p;
  v14 = v31 - (_BYTE *)__p;
  *(_DWORD *)((char *)__p + ((((v31 - (_BYTE *)__p) << 30) - 0x100000000) >> 30)) = *(_DWORD *)(v9 + 20);
  *(_DWORD *)&v13[((v14 << 30) - 0x300000000) >> 30] = *(_DWORD *)(v9 + 20);
  mlx::core::broadcast_to((const void ***)a2, (const void **)&__p, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v25);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](a2, (__int128 *)&v25);
  mlx::core::array::~array((mlx::core::array *)&v25);
  v15 = v33;
  v16 = (uint64_t)v34;
  v17 = v34 - (char *)v33;
  v18 = ((v34 - (char *)v33) << 30) - 0x200000000;
  *(_DWORD *)((char *)v33 + (v18 >> 30)) *= *(_DWORD *)(v9 + 20);
  v19 = (v17 << 30) - 0x100000000;
  *(_DWORD *)((char *)v15 + (v19 >> 30)) *= *(_DWORD *)(v9 + 20);
  v28 = 0;
  v29 = 0;
  v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, v15, v16, v17 >> 2);
  mlx::core::reshape((const void ***)a2, (uint64_t)&v27, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v25);
  v20 = v17 << 30;
  v21 = v18 >> 32;
  v22 = v19 >> 32;
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](a2, (__int128 *)&v25);
  mlx::core::array::~array((mlx::core::array *)&v25);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v23 = v33;
  v33[v21] = a3;
  v23[v22] = a4;
  __x = 0;
  std::vector<int>::vector(&v25, v20 >> 32, &__x);
  mlx::core::slice((const void ***)a2, (uint64_t)&v25, (uint64_t)&v33, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v26);
  std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](a2, &v26);
  mlx::core::array::~array((mlx::core::array *)&v26);
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
  *a5 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v33)
  {
    v34 = (char *)v33;
    operator delete(v33);
  }
}

void sub_2424B9F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v22 = *(void **)(v20 - 88);
  if (v22)
  {
    *(_QWORD *)(v20 - 80) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(mlx::core ***a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  mlx::core **v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int *v31;
  int v32;
  int *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int *v40;
  char *v41;
  int v42;
  uint64_t v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  int *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  int *v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *__p;
  void *v75;
  _QWORD *v76;
  void *v77[2];
  _QWORD *v78;
  void *v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;

  v10 = *a1;
  mlx::core::multiply(a2, a3, (*a1)[1], *((unsigned int *)*a1 + 4) | 0x100000000, &v83);
  if (a5 | a4)
  {
    v11 = (char *)operator new(8uLL);
    v79 = v11;
    *(_QWORD *)v11 = -2;
    v80 = v11 + 8;
    v81 = v11 + 8;
    v12 = operator new(8uLL);
    v77[0] = v12;
    *v12 = 0;
    v77[1] = v12 + 1;
    v78 = v12 + 1;
    v13 = operator new(8uLL);
    __p = v13;
    *v13 = a4 | (unint64_t)(a5 << 32);
    v75 = v13 + 1;
    v76 = v13 + 1;
    mlx::core::pad((const void ***)&v83, (uint64_t *)&v79, (uint64_t *)v77, (uint64_t *)&__p, a1[1], v10[1], *((unsigned int *)v10 + 4) | 0x100000000, &v82);
    v14 = v82;
    v82 = 0uLL;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    v83 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v82);
    if (__p)
    {
      v75 = __p;
      operator delete(__p);
    }
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    if (v79)
    {
      v80 = (char *)v79;
      operator delete(v79);
    }
  }
  v18 = *(const void **)v83;
  v19 = *(_QWORD *)(v83 + 8) - 8;
  v20 = (v19 - *(_QWORD *)v83) >> 2;
  v80 = 0;
  v81 = 0;
  v79 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v79, v18, v19, v20);
  if (*(_QWORD *)(v83 + 8) - *(_QWORD *)v83 <= 4uLL)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v22 = v80;
  v21 = v81;
  v23 = *(_DWORD *)(*(_QWORD *)(v83 + 8) - 8) / *((_DWORD *)v10 + 5);
  if (v80 >= v81)
  {
    v25 = (char *)v79;
    v26 = (v80 - (_BYTE *)v79) >> 2;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v28 = v81 - (_BYTE *)v79;
    if ((v81 - (_BYTE *)v79) >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v29);
      v25 = (char *)v79;
      v22 = v80;
    }
    else
    {
      v30 = 0;
    }
    v31 = (int *)&v30[4 * v26];
    v21 = &v30[4 * v29];
    *v31 = v23;
    v24 = (char *)(v31 + 1);
    while (v22 != v25)
    {
      v32 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--v31 = v32;
    }
    v79 = v31;
    v80 = v24;
    v81 = v21;
    if (v25)
    {
      operator delete(v25);
      v21 = v81;
    }
  }
  else
  {
    *(_DWORD *)v80 = v23;
    v24 = v22 + 4;
  }
  v80 = v24;
  if (v24 >= v21)
  {
    v34 = (char *)v79;
    v35 = (v24 - (_BYTE *)v79) >> 2;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62)
      goto LABEL_93;
    v37 = v21 - (_BYTE *)v79;
    if (v37 >> 1 > v36)
      v36 = v37 >> 1;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
      v38 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v38);
      v34 = (char *)v79;
      v24 = v80;
    }
    else
    {
      v39 = 0;
    }
    v40 = (int *)&v39[4 * v35];
    v41 = &v39[4 * v38];
    *v40 = *((_DWORD *)v10 + 5);
    v33 = v40 + 1;
    while (v24 != v34)
    {
      v42 = *((_DWORD *)v24 - 1);
      v24 -= 4;
      *--v40 = v42;
    }
    v79 = v40;
    v80 = (char *)v33;
    v81 = v41;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_DWORD *)v24 = *((_DWORD *)v10 + 5);
    v33 = (int *)(v24 + 4);
  }
  v80 = (char *)v33;
  v43 = *(_QWORD *)(v83 + 8);
  if (v43 == *(_QWORD *)v83)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v44 = *(_DWORD *)(v43 - 4);
  v45 = v81;
  v46 = v44 / *((_DWORD *)v10 + 5);
  if (v33 >= (int *)v81)
  {
    v48 = (int *)v79;
    v49 = ((char *)v33 - (_BYTE *)v79) >> 2;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v51 = v81 - (_BYTE *)v79;
    if ((v81 - (_BYTE *)v79) >> 1 > v50)
      v50 = v51 >> 1;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
      v52 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (v52)
    {
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v52);
      v48 = (int *)v79;
      v33 = (int *)v80;
    }
    else
    {
      v53 = 0;
    }
    v54 = (int *)&v53[4 * v49];
    v45 = &v53[4 * v52];
    *v54 = v46;
    v47 = (char *)(v54 + 1);
    while (v33 != v48)
    {
      v55 = *--v33;
      *--v54 = v55;
    }
    v79 = v54;
    v80 = v47;
    v81 = v45;
    if (v48)
    {
      operator delete(v48);
      v45 = v81;
    }
  }
  else
  {
    *v33 = v46;
    v47 = (char *)(v33 + 1);
  }
  v80 = v47;
  if (v47 < v45)
  {
    *(_DWORD *)v47 = *((_DWORD *)v10 + 5);
    v56 = (uint64_t)(v47 + 4);
    goto LABEL_79;
  }
  v57 = (char *)v79;
  v58 = (v47 - (_BYTE *)v79) >> 2;
  v59 = v58 + 1;
  if ((unint64_t)(v58 + 1) >> 62)
LABEL_93:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v60 = v45 - (_BYTE *)v79;
  if (v60 >> 1 > v59)
    v59 = v60 >> 1;
  if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
    v61 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v61 = v59;
  if (v61)
  {
    v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v61);
    v57 = (char *)v79;
    v47 = v80;
  }
  else
  {
    v62 = 0;
  }
  v63 = &v62[4 * v58];
  v64 = &v62[4 * v61];
  *(_DWORD *)v63 = *((_DWORD *)v10 + 5);
  v56 = (uint64_t)(v63 + 4);
  while (v47 != v57)
  {
    v65 = *((_DWORD *)v47 - 1);
    v47 -= 4;
    *((_DWORD *)v63 - 1) = v65;
    v63 -= 4;
  }
  v79 = v63;
  v80 = (char *)v56;
  v81 = v64;
  if (v57)
    operator delete(v57);
LABEL_79:
  v80 = (char *)v56;
  v72 = 0;
  v73 = 0;
  v71 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v71, v79, v56, (v56 - (uint64_t)v79) >> 2);
  mlx::core::reshape((const void ***)&v83, (uint64_t)&v71, v10[1], *((unsigned int *)v10 + 4) | 0x100000000, (const void ***)v77);
  v66 = *(_OWORD *)v77;
  v77[0] = 0;
  v77[1] = 0;
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  v83 = v66;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  mlx::core::array::~array((mlx::core::array *)v77);
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  v70 = operator new(8uLL);
  v77[0] = v70;
  *v70 = -3;
  v77[1] = v70 + 1;
  v78 = v70 + 1;
  mlx::core::sum((uint64_t)&v83, (uint64_t)v77, 0, v10[1], *((unsigned int *)v10 + 4) | 0x100000000, a6);
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  if (v79)
  {
    v80 = (char *)v79;
    operator delete(v79);
  }
  mlx::core::array::~array((mlx::core::array *)&v83);
}

void sub_2424BA50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  mlx::core::array::~array((mlx::core::array *)(v19 - 64));
  _Unwind_Resume(a1);
}

void mlx::core::GatherMM::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, const void ****a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const void ***v7;
  const void **v8;
  const void *v9;
  unint64_t v10;
  const void ***v12;
  uint64_t *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const void **v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  _DWORD *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  const void **v44;
  unint64_t *v45;
  unint64_t v46;
  const void **v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::logic_error *exception;
  int v55;
  int v56;
  void *v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[16];
  char v61;
  _QWORD v62[2];
  char v63;
  const void **v64[2];
  const void **v65[2];
  void *__p;
  void *v67;
  _DWORD *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  const void **v72[2];
  __int128 v73;
  _QWORD v74[2];
  char v75;
  _BYTE v76[16];
  char v77;
  const void **v78[2];
  const void **v79[2];
  void *v80;
  void *v81;
  _DWORD *v82;
  __int128 v83;
  void *v84;
  _BYTE *v85;
  uint64_t v86;
  const void **v87;
  const void **v88;
  _OWORD v89[2];

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v7 = *a3;
  v8 = **a3;
  v9 = *v8;
  v10 = (_BYTE *)v8[1] - (_BYTE *)*v8;
  if (v10 <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v12 = (const void ***)*a2;
  v13 = **a2;
  v14 = v13[1];
  if (v14 == *v13)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v15 = *(_DWORD **)a4;
  v16 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v16)
  {
    v17 = (uint64_t)v9 + v10;
    v55 = *(_DWORD *)(v17 - 4);
    v56 = *(_DWORD *)(v17 - 8);
    v18 = *(_DWORD *)(v14 - 4);
    do
    {
      if (*v15 == 1)
      {
        mlx::core::zeros_like((uint64_t *)*a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v89);
        mlx::core::swapaxes(*a2, -1, -2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v87);
        v85 = 0;
        v86 = 0;
        v84 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v84, **(const void ***)&v89[0], *(_QWORD *)(*(_QWORD *)&v89[0] + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v89[0] + 8) - **(_QWORD **)&v89[0]) >> 2);
        v67 = 0;
        v68 = 0;
        __p = 0;
        v37 = operator new(0xCuLL);
        v67 = v37 + 3;
        v68 = v37 + 3;
        *v37 = -1;
        v37[1] = v18;
        v37[2] = v55;
        __p = v37;
        mlx::core::reshape((const void ***)v89, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v83);
        v38 = v83;
        v83 = 0uLL;
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v89[0] + 1);
        v89[0] = v38;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(p_shared_owners);
          while (__stlxr(v41 - 1, p_shared_owners));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        mlx::core::array::~array((mlx::core::array *)&v83);
        if (__p)
        {
          v67 = __p;
          operator delete(__p);
        }
        v65[0] = v87;
        v65[1] = v88;
        if (v88)
        {
          v42 = (unint64_t *)(v88 + 1);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v44 = v7[1];
        v64[0] = *v7;
        v64[1] = v44;
        if (v44)
        {
          v45 = (unint64_t *)(v44 + 1);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        v47 = v12[5];
        v62[0] = v12[4];
        v62[1] = v47;
        if (v47)
        {
          v48 = (unint64_t *)(v47 + 1);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v63 = 1;
        v60[0] = 0;
        v61 = 0;
        mlx::core::gather_mm(v65, v64, (uint64_t)v62, (uint64_t)v60, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v83);
        if (v61)
          mlx::core::array::~array((mlx::core::array *)v60);
        if (v63)
          mlx::core::array::~array((mlx::core::array *)v62);
        mlx::core::array::~array((mlx::core::array *)v64);
        mlx::core::array::~array((mlx::core::array *)v65);
        mlx::core::expand_dims((const void ***)&v83, -3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v73);
        v50 = v73;
        v73 = 0uLL;
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
        v83 = v50;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        mlx::core::array::~array((mlx::core::array *)&v73);
        mlx::core::scatter_add((mlx::core::array *)v89, v12 + 6, (mlx::core::array *)&v83, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v73);
        v58 = 0;
        v59 = 0;
        v57 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, v84, (uint64_t)v85, (v85 - (_BYTE *)v84) >> 2);
        mlx::core::reshape((const void ***)&v73, (uint64_t)&v57, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v72);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v72);
        mlx::core::array::~array((mlx::core::array *)v72);
        v36 = v57;
        if (!v57)
          goto LABEL_62;
        v58 = v57;
      }
      else
      {
        if (*v15)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "[GatherMM] Cannot calculate VJP with respect to indices.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
        }
        mlx::core::zeros_like((uint64_t *)*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v89);
        mlx::core::swapaxes(*a2 + 2, -1, -2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v87);
        v85 = 0;
        v86 = 0;
        v84 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v84, **(const void ***)&v89[0], *(_QWORD *)(*(_QWORD *)&v89[0] + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v89[0] + 8) - **(_QWORD **)&v89[0]) >> 2);
        v81 = 0;
        v82 = 0;
        v80 = 0;
        v19 = operator new(0xCuLL);
        v81 = v19 + 3;
        v82 = v19 + 3;
        *v19 = -1;
        v19[1] = v56;
        v19[2] = v18;
        v80 = v19;
        mlx::core::reshape((const void ***)v89, (uint64_t)&v80, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v83);
        v20 = v83;
        v83 = 0uLL;
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v89[0] + 1);
        v89[0] = v20;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        mlx::core::array::~array((mlx::core::array *)&v83);
        if (v80)
        {
          v81 = v80;
          operator delete(v80);
        }
        v24 = v7[1];
        v79[0] = *v7;
        v79[1] = v24;
        if (v24)
        {
          v25 = (unint64_t *)(v24 + 1);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v78[0] = v87;
        v78[1] = v88;
        if (v88)
        {
          v27 = (unint64_t *)(v88 + 1);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v76[0] = 0;
        v77 = 0;
        v29 = v12[7];
        v74[0] = v12[6];
        v74[1] = v29;
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 1);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v75 = 1;
        mlx::core::gather_mm(v79, v78, (uint64_t)v76, (uint64_t)v74, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v83);
        if (v75)
          mlx::core::array::~array((mlx::core::array *)v74);
        if (v77)
          mlx::core::array::~array((mlx::core::array *)v76);
        mlx::core::array::~array((mlx::core::array *)v78);
        mlx::core::array::~array((mlx::core::array *)v79);
        mlx::core::expand_dims((const void ***)&v83, -3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v73);
        v32 = v73;
        v73 = 0uLL;
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
        v83 = v32;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        mlx::core::array::~array((mlx::core::array *)&v73);
        mlx::core::scatter_add((mlx::core::array *)v89, v12 + 4, (mlx::core::array *)&v83, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v73);
        v70 = 0;
        v71 = 0;
        v69 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, v84, (uint64_t)v85, (v85 - (_BYTE *)v84) >> 2);
        mlx::core::reshape((const void ***)&v73, (uint64_t)&v69, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v72);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v72);
        mlx::core::array::~array((mlx::core::array *)v72);
        v36 = v69;
        if (!v69)
          goto LABEL_62;
        v70 = v69;
      }
      operator delete(v36);
LABEL_62:
      mlx::core::array::~array((mlx::core::array *)&v73);
      mlx::core::array::~array((mlx::core::array *)&v83);
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      mlx::core::array::~array((mlx::core::array *)&v87);
      mlx::core::array::~array((mlx::core::array *)v89);
      ++v15;
    }
    while (v15 != v16);
  }
}

void sub_2424BAC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  uint64_t v50;
  uint64_t v51;

  *(_QWORD *)(v51 - 152) = v50;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 152));
  _Unwind_Resume(a1);
}

BOOL mlx::core::BlockMaskedMM::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::Transpose::vjp(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t ***a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  std::vector<int>::pointer begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  std::vector<int> v22;
  _QWORD *v23;
  char v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 16)
    mlx::core::Transpose::vjp();
  if (a4[1] - *a4 != 4)
    mlx::core::Transpose::vjp();
  v8 = (uint64_t *)(a1 + 24);
  v9 = (_QWORD *)(a1 + 32);
  std::vector<int>::vector(&v22, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v10 = *v8;
  begin = v22.__begin_;
  if (*v9 != *v8)
  {
    v12 = 0;
    v13 = (*v9 - *v8) >> 2;
    if (v13 <= 1)
      v13 = 1;
    do
    {
      begin[*(int *)(v10 + 4 * v12)] = v12;
      ++v12;
    }
    while (v13 != v12);
  }
  v14 = *a3;
  v20 = 0;
  v21 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)v22.__end_, v22.__end_ - begin);
  mlx::core::transpose(v14, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v23 = a5;
  v24 = 0;
  v15 = operator new(0x10uLL);
  *a5 = v15;
  a5[1] = v15;
  a5[2] = v15 + 2;
  v16 = v25[1];
  *v15 = v25[0];
  v15[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  a5[1] = v15 + 2;
  mlx::core::array::~array((mlx::core::array *)v25);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
}

void sub_2424BAF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a16);
  mlx::core::array::~array((mlx::core::array *)&a18);
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void mlx::core::Transpose::jvp(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **v5;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 16)
    mlx::core::Transpose::jvp();
  v5 = *(uint64_t ***)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 16)
    mlx::core::Transpose::jvp();
  v12 = 0;
  v13 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  mlx::core::transpose(v5, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v14 = a4;
  v15 = 0;
  v7 = operator new(0x10uLL);
  *a4 = v7;
  a4[1] = v7;
  a4[2] = v7 + 2;
  v8 = v16[1];
  *v7 = v16[0];
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a4[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_2424BB0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  mlx::core::array::~array((mlx::core::array *)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlx::core::Transpose::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v5;
  uint64_t v7;
  std::vector<int> *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  std::vector<int>::const_iterator v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::vector<int>::value_type v18;
  _DWORD *v19;
  void *__p;
  void *v21;
  _DWORD *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  std::vector<int>::value_type __x;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t ***)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Transpose::vmap();
  if (a3[1] - *a3 != 4)
    mlx::core::Transpose::vmap();
  v7 = *(int *)*a3;
  __x = v7;
  if ((v7 & 0x80000000) == 0)
  {
    v10 = *(_DWORD **)(a1 + 24);
    v11 = *(_DWORD **)(a1 + 32);
    v9 = (std::vector<int> *)(a1 + 24);
    if (v10 != v11)
    {
      v12 = *(_DWORD **)(a1 + 24);
      do
      {
        if (*v12 >= (int)v7)
          ++*v12;
        ++v12;
      }
      while (v12 != v11);
    }
    v13.__i_ = &v10[v7];
    std::vector<int>::insert(v9, v13, &__x);
    v5 = *(uint64_t ***)a2;
  }
  v24 = 0;
  v25 = 0;
  v23 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v23, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  mlx::core::transpose(v5, (unsigned int **)&v23, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v30);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  __p = &v26;
  LOBYTE(v21) = 0;
  v14 = operator new(0x10uLL);
  v26 = v14;
  v27 = v14;
  v28 = v14 + 2;
  v15 = v30[1];
  *v14 = v30[0];
  v14[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v27 = v14 + 2;
  v18 = __x;
  v19 = operator new(4uLL);
  __p = v19;
  *v19 = v18;
  v21 = v19 + 1;
  v22 = v19 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v26, (uint64_t)&__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  __p = &v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v30);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_2424BB2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  if (a13)
  {
    a14 = (uint64_t)a13;
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::Transpose::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v3 = a1 + 24;
  v2 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 24;
  v5 = *(const void **)(a2 + 24);
  return v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

void mlx::core::NumberOfElements::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  _DWORD *v25;
  void *v26;
  void *v27;
  _DWORD *v28;
  __int128 v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  void *__p[3];
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::NumberOfElements::vmap();
  if ((char *)a3[1] - (char *)*a3 != 4)
    mlx::core::NumberOfElements::vmap();
  v37 = 0;
  v38 = 0;
  v39 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v8 = **a3;
  if ((v8 & 0x80000000) == 0)
  {
    v9 = v37;
    v10 = v38;
    while (v9 != v10)
    {
      if (*v9 >= v8)
        ++*v9;
      ++v9;
    }
  }
  memset(__p, 0, sizeof(__p));
  v11 = *(_QWORD *)(a1 + 52);
  std::allocate_shared[abi:ne180100]<mlx::core::NumberOfElements,std::allocator<mlx::core::NumberOfElements>,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,void>((uint64_t *)(a1 + 8), (uint64_t)&v37, (char *)(a1 + 48), (uint64_t *)(a1 + 52), &v29);
  v33 = v29;
  v29 = 0uLL;
  v32 = 0;
  v31 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v31, *(_QWORD **)a2, *(_QWORD **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  mlx::core::array::array(&v35, (__int128 *)__p, v11, &v33, &v31);
  v26 = &v31;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v19 = v35;
  v18 = v36;
  v40[0] = v35;
  v40[1] = v36;
  if (v36)
  {
    v20 = (unint64_t *)(v36 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v29 = 0uLL;
  v30 = 0;
  v26 = &v29;
  LOBYTE(v27) = 0;
  v22 = operator new(0x10uLL);
  *(_QWORD *)&v29 = v22;
  v30 = v22 + 2;
  *v22 = v19;
  v22[1] = v18;
  if (v18)
  {
    v23 = (unint64_t *)(v18 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *((_QWORD *)&v29 + 1) = v22 + 2;
  v25 = operator new(4uLL);
  v26 = v25;
  *v25 = -1;
  v27 = v25 + 1;
  v28 = v25 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)&v29, (uint64_t)&v26);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v26 = &v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  mlx::core::array::~array((mlx::core::array *)v40);
  mlx::core::array::~array((mlx::core::array *)&v35);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_2424BB640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v23 - 56));
  mlx::core::array::~array((mlx::core::array *)(v23 - 96));
  v25 = *(void **)(v23 - 80);
  if (v25)
  {
    *(_QWORD *)(v23 - 72) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::NumberOfElements::is_equivalent(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  uint64_t v8;

  v5 = a1 + 24;
  v4 = *(const void **)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 8) - (_QWORD)v4;
  v8 = a2 + 24;
  v7 = *(const void **)(a2 + 24);
  return v6 == *(_QWORD *)(v8 + 8) - (_QWORD)v7
      && !memcmp(v4, v7, v6)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
}

void mlx::core::SVD::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _DWORD *v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15[3];
  _QWORD v16[2];

  v6 = **a3;
  v7 = *a2;
  if (v6 < 1)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v16[0] = *(_QWORD *)v7;
    v16[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v7, **a3, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  }
  mlx::core::linalg::svd(v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  v11 = operator new(0xCuLL);
  v13 = v11 + 3;
  v14 = (char *)(v11 + 3);
  *(_QWORD *)v11 = v6 >> 31;
  v11[2] = v6 >> 31;
  __p = v11;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (_QWORD **)v15, (uint64_t)&__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  __p = v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_2424BB844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Inverse::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  char **v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD *v15;
  void *__p;
  void *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char **v22[2];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v6 = **a3;
  v7 = *a2;
  if (v6 < 1)
  {
    v8 = *(char ***)(v7 + 8);
    v22[0] = *(char ***)v7;
    v22[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v7, **a3, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
  }
  mlx::core::linalg::inv(v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v23);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  __p = &v19;
  LOBYTE(v17) = 0;
  v11 = operator new(0x10uLL);
  v19 = v11;
  v20 = v11;
  v21 = v11 + 2;
  v12 = v23[1];
  *v11 = v23[0];
  v11[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v20 = v11 + 2;
  v15 = operator new(4uLL);
  __p = v15;
  *v15 = v6 >> 31;
  v17 = v15 + 1;
  v18 = v15 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v19, (uint64_t)&__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  __p = &v19;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
}

void sub_2424BB9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_2424BBAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::`anonymous namespace'::vmap_binary_op(std::vector<mlx::core::array> const&,std::vector<int> const&,mlx::core::Stream const&)::$_0::operator()<mlx::core::array>(uint64_t a1@<X0>, const void ***a2@<X1>, const void ***a3@<X8>)
{
  const void **v6;
  std::vector<int>::const_iterator v7;
  std::vector<int>::size_type v8;
  void *__p;
  void *v10;
  uint64_t v11;
  std::vector<int>::value_type __x;
  std::vector<int> v13;

  v6 = *a2;
  memset(&v13, 0, sizeof(v13));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, *v6, (uint64_t)v6[1], ((_BYTE *)v6[1] - (_BYTE *)*v6) >> 2);
  v7.__i_ = v13.__begin_;
  v8 = *(int *)(a1 + 12) - (v13.__end_ - v13.__begin_);
  __x = 1;
  std::vector<int>::insert(&v13, v7, v8, &__x);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13.__begin_, (uint64_t)v13.__end_, v13.__end_ - v13.__begin_);
  mlx::core::reshape(a2, (uint64_t)&__p, *(mlx::core **)a1, *(unsigned int *)(a1 + 8) | 0x100000000, a3);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_2424BBB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<int> const&,0>(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_2424BBC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

int *std::__introsort<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  BOOL v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int64_t v63;
  uint64_t *v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  int *v71;
  int v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  int *v79;
  int *v80;
  int *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int *v91;
  int *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v44 = *(a2 - 1);
        v45 = *v10;
        if (*(_DWORD *)(**a3 + 4 * v44) < *(_DWORD *)(**a3 + 4 * v45))
        {
          *v10 = v44;
          *(a2 - 1) = v45;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        v46 = v10 + 2;
        v47 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v48 = *(a2 - 1);
        v49 = v10[3];
        v50 = **a3;
        if (*(_DWORD *)(v50 + 4 * v48) < *(_DWORD *)(v50 + 4 * v49))
        {
          *v47 = v48;
          *(a2 - 1) = v49;
          v51 = *v47;
          v52 = *v46;
          if (*(_DWORD *)(v50 + 4 * *v47) < *(_DWORD *)(v50 + 4 * v52))
          {
            *v46 = v51;
            *v47 = v52;
            v53 = v10[1];
            if (*(_DWORD *)(v50 + 4 * v51) < *(_DWORD *)(v50 + 4 * v53))
            {
              v10[1] = v51;
              v10[2] = v53;
              v54 = *v10;
              if (*(_DWORD *)(v50 + 4 * v51) < *(_DWORD *)(v50 + 4 * v54))
              {
                *v10 = v51;
                v10[1] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v55 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v56 = 0;
                v57 = **a3;
                v58 = v10;
                do
                {
                  v59 = v58[1];
                  v60 = *v58;
                  v58 = v55;
                  if (*(_DWORD *)(v57 + 4 * v59) < *(_DWORD *)(v57 + 4 * v60))
                  {
                    v61 = v56;
                    while (1)
                    {
                      *(int *)((char *)v10 + v61 + 4) = v60;
                      if (!v61)
                        break;
                      v60 = *(int *)((char *)v10 + v61 - 4);
                      v61 -= 4;
                      if (*(_DWORD *)(v57 + 4 * v59) >= *(_DWORD *)(v57 + 4 * v60))
                      {
                        v62 = (int *)((char *)v10 + v61 + 4);
                        goto LABEL_75;
                      }
                    }
                    v62 = v10;
LABEL_75:
                    *v62 = v59;
                  }
                  v55 = v58 + 1;
                  v56 += 4;
                }
                while (v58 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v93 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v94 = **a3;
              do
              {
                v95 = v9[1];
                v96 = *v9;
                v9 = v93;
                if (*(_DWORD *)(v94 + 4 * v95) < *(_DWORD *)(v94 + 4 * v96))
                {
                  do
                  {
                    *v93 = v96;
                    v96 = *(v93 - 2);
                    --v93;
                  }
                  while (*(_DWORD *)(v94 + 4 * v95) < *(_DWORD *)(v94 + 4 * v96));
                  *v93 = v95;
                }
                v93 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v63 = (v12 - 2) >> 1;
            v64 = *a3;
            v65 = v63;
            do
            {
              v66 = v65;
              if (v63 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &v10[v67];
                v69 = *v68;
                if (2 * v66 + 2 >= (uint64_t)v12)
                {
                  v70 = *v64;
                }
                else
                {
                  v70 = *v64;
                  if (*(_DWORD *)(*v64 + 4 * v69) < *(_DWORD *)(*v64 + 4 * v68[1]))
                  {
                    v69 = v68[1];
                    ++v68;
                    v67 = 2 * v66 + 2;
                  }
                }
                v71 = &v10[v66];
                v72 = *v71;
                result = (int *)*(unsigned int *)(v70 + 4 * v69);
                if ((int)result >= *(_DWORD *)(v70 + 4 * *v71))
                {
                  result = (int *)v72;
                  do
                  {
                    v73 = v68;
                    *v71 = v69;
                    if (v63 < v67)
                      break;
                    v74 = (2 * v67) | 1;
                    v68 = &v10[v74];
                    v67 = 2 * v67 + 2;
                    v69 = *v68;
                    if (v67 >= (uint64_t)v12)
                    {
                      v67 = v74;
                    }
                    else if (*(_DWORD *)(v70 + 4 * v69) >= *(_DWORD *)(v70 + 4 * v68[1]))
                    {
                      v67 = v74;
                    }
                    else
                    {
                      v69 = v68[1];
                      ++v68;
                    }
                    v71 = v73;
                  }
                  while (*(_DWORD *)(v70 + 4 * v69) >= *(_DWORD *)(v70 + 4 * v72));
                  *v73 = v72;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v75 = (unint64_t)v11 >> 2;
            do
            {
              v76 = 0;
              v77 = *v10;
              v78 = *a3;
              v79 = v10;
              do
              {
                v80 = &v79[v76];
                v83 = v80[1];
                v81 = v80 + 1;
                v82 = v83;
                v84 = (2 * v76) | 1;
                v76 = 2 * v76 + 2;
                if (v76 >= v75)
                {
                  v76 = v84;
                }
                else
                {
                  result = v81 + 1;
                  if (*(_DWORD *)(*v78 + 4 * v82) >= *(_DWORD *)(*v78 + 4 * v81[1]))
                  {
                    v76 = v84;
                  }
                  else
                  {
                    v82 = v81[1];
                    ++v81;
                  }
                }
                *v79 = v82;
                v79 = v81;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v81 == --a2)
              {
                *v81 = v77;
              }
              else
              {
                *v81 = *a2;
                *a2 = v77;
                v85 = (char *)v81 - (char *)v10 + 4;
                if (v85 >= 5)
                {
                  v86 = (((unint64_t)v85 >> 2) - 2) >> 1;
                  v87 = &v10[v86];
                  v88 = *v87;
                  v89 = *v81;
                  v90 = *v78;
                  if (*(_DWORD *)(v90 + 4 * v88) < *(_DWORD *)(v90 + 4 * *v81))
                  {
                    do
                    {
                      v91 = v87;
                      *v81 = v88;
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = &v10[v86];
                      v88 = *v87;
                      result = (int *)*(unsigned int *)(v90 + 4 * v89);
                      v81 = v91;
                    }
                    while (*(_DWORD *)(v90 + 4 * v88) < (int)result);
                    *v91 = v89;
                  }
                }
              }
            }
            while (v75-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(&v9[v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v9, &v9[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = **a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(_DWORD *)(v17 + 4 * v16);
          if (*(_DWORD *)(v17 + 4 * *(v9 - 1)) < v18)
            goto LABEL_12;
          if (v18 >= *(_DWORD *)(v17 + 4 * *(a2 - 1)))
          {
            v35 = v9 + 1;
            do
            {
              v10 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v18 >= *(_DWORD *)(v17 + 4 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v34 = v10[1];
              ++v10;
            }
            while (v18 >= *(_DWORD *)(v17 + 4 * v34));
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v18 < *(_DWORD *)(v17 + 4 * v37));
          }
          if (v10 < v36)
          {
            v38 = *v10;
            v39 = *v36;
            do
            {
              *v10 = v39;
              *v36 = v38;
              v40 = *(_DWORD *)(v17 + 4 * v16);
              do
              {
                v41 = v10[1];
                ++v10;
                v38 = v41;
              }
              while (v40 >= *(_DWORD *)(v17 + 4 * v41));
              do
              {
                v42 = *--v36;
                v39 = v42;
              }
              while (v40 < *(_DWORD *)(v17 + 4 * v42));
            }
            while (v10 < v36);
          }
          v43 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v43;
          a5 = 0;
          *v43 = v16;
          continue;
        }
        v18 = *(_DWORD *)(v17 + 4 * v16);
LABEL_12:
        v19 = 0;
        do
          v20 = v9[++v19];
        while (*(_DWORD *)(v17 + 4 * v20) < v18);
        v21 = &v9[v19];
        v22 = a2;
        if (v19 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *--v22;
          }
          while (*(_DWORD *)(v17 + 4 * v24) >= v18);
        }
        else
        {
          do
            v23 = *--v22;
          while (*(_DWORD *)(v17 + 4 * v23) >= v18);
        }
        if (v21 >= v22)
        {
          v32 = v21 - 1;
        }
        else
        {
          v25 = *v22;
          v26 = v20;
          v27 = v21;
          v28 = v22;
          do
          {
            *v27 = v25;
            *v28 = v26;
            v29 = *(_DWORD *)(v17 + 4 * v16);
            do
            {
              v30 = v27[1];
              ++v27;
              v26 = v30;
            }
            while (*(_DWORD *)(v17 + 4 * v30) < v29);
            do
            {
              v31 = *--v28;
              v25 = v31;
            }
            while (*(_DWORD *)(v17 + 4 * v31) >= v29);
          }
          while (v27 < v28);
          v32 = v27 - 1;
        }
        if (v32 != v9)
          *v9 = *v32;
        *v32 = v16;
        if (v21 < v22)
        {
LABEL_33:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *,false>(v9, v32, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v32 + 1;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v9, v32, a3);
        v10 = v32 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v32 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v32;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t **a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = **a4;
  v7 = *(_DWORD *)(v6 + 4 * v4);
  v8 = *a3;
  v9 = *(_DWORD *)(v6 + 4 * v8);
  if (v7 >= *(_DWORD *)(v6 + 4 * *result))
  {
    if (v9 < v7)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(_DWORD *)(v6 + 4 * v10) < *(_DWORD *)(v6 + 4 * v11))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v7)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(_DWORD *)(v6 + 4 * v12) >= *(_DWORD *)(v6 + 4 * v5))
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_DWORD *)(**a3 + 4 * v8) < *(_DWORD *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v20 = a1 + 2;
      v21 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v22 = *(a2 - 1);
      v23 = a1[3];
      v24 = **a3;
      if (*(_DWORD *)(v24 + 4 * v22) < *(_DWORD *)(v24 + 4 * v23))
      {
        *v21 = v22;
        *(a2 - 1) = v23;
        v25 = *v21;
        v26 = *v20;
        if (*(_DWORD *)(v24 + 4 * *v21) < *(_DWORD *)(v24 + 4 * v26))
        {
          *v20 = v25;
          *v21 = v26;
          v27 = a1[1];
          if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v27))
          {
            a1[1] = v25;
            a1[2] = v27;
            v28 = *a1;
            if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v28))
            {
              *a1 = v25;
              a1[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (*(_DWORD *)(v13 + 4 * *v11) < *(_DWORD *)(v13 + 4 * v16))
    {
      v17 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v17) = v16;
        v18 = v17 - 4;
        if (v17 == 4)
          break;
        v16 = *(int *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (*(_DWORD *)(v13 + 4 * v15) >= *(_DWORD *)(v13 + 4 * v16))
        {
          v19 = (int *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = **a5;
  if (*(_DWORD *)(v13 + 4 * v11) < *(_DWORD *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(_DWORD *)(v13 + 4 * v14) < *(_DWORD *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(_DWORD *)(v13 + 4 * v16) < *(_DWORD *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

void mlx::core::`anonymous namespace'::vmap_ternary_op(std::vector<mlx::core::array> const&,std::vector<int> const&,mlx::core::Stream const&)::$_0::operator()<mlx::core::array>(uint64_t a1@<X0>, const void ***a2@<X1>, const void ***a3@<X8>)
{
  const void **v6;
  std::vector<int>::const_iterator v7;
  std::vector<int>::size_type v8;
  void *__p;
  void *v10;
  uint64_t v11;
  std::vector<int>::value_type __x;
  std::vector<int> v13;

  v6 = *a2;
  memset(&v13, 0, sizeof(v13));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, *v6, (uint64_t)v6[1], ((_BYTE *)v6[1] - (_BYTE *)*v6) >> 2);
  v7.__i_ = v13.__begin_;
  v8 = *(int *)(a1 + 12) - (v13.__end_ - v13.__begin_);
  __x = 1;
  std::vector<int>::insert(&v13, v7, v8, &__x);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13.__begin_, (uint64_t)v13.__end_, v13.__end_ - v13.__begin_);
  mlx::core::reshape(a2, (uint64_t)&__p, *(mlx::core **)a1, *(unsigned int *)(a1 + 8) | 0x100000000, a3);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_2424BC858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::RandomBits,std::allocator<mlx::core::RandomBits>,mlx::core::Stream const&,std::vector<int> &,int &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x50uLL);
  result = std::__shared_ptr_emplace<mlx::core::RandomBits>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,int &,std::allocator<mlx::core::RandomBits>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_2424BC8EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::RandomBits>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,int &,std::allocator<mlx::core::RandomBits>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_25134DA98;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *a4;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = a1 + 48;
  *(_DWORD *)(v8 - 8) = v6;
  *(_QWORD *)(v8 - 24) = off_251352138;
  *(_QWORD *)(v8 - 16) = v5;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v8, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_DWORD *)(a1 + 72) = v7;
  return a1;
}

void sub_2424BC974(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::NumberOfElements,std::allocator<mlx::core::NumberOfElements>,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<mlx::core::NumberOfElements>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,std::allocator<mlx::core::NumberOfElements>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_2424BC9EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::NumberOfElements>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,std::allocator<mlx::core::NumberOfElements>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_25134FFB8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<mlx::core::NumberOfElements,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,mlx::core::NumberOfElements*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_2424BCA38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::NumberOfElements,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,mlx::core::NumberOfElements*>(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t *a5)
{
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v14 = 0;
  v13 = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v10 = *a4;
  v11 = *a5;
  *(_DWORD *)(a1 + 16) = v9;
  *(_QWORD *)a1 = off_251351F18;
  *(_QWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_BYTE *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 52) = v11;
  return a1;
}

_UNKNOWN **mlx::core::allocator::allocator(mlx::core::allocator *this)
{
  return &mlx::core::allocator::allocator(void)::allocator_;
}

uint64_t mlx::core::allocator::Buffer::raw_ptr(mlx::core::allocator::Buffer *this)
{
  return *(_QWORD *)this;
}

void mlx::core::Abs::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  uint64_t v5;
  int v6;

  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Abs::eval_cpu();
  v5 = *(_QWORD *)v3;
  v6 = *(_DWORD *)(*(_QWORD *)v3 + 56);
  if (v6 != 4)
  {
    if (v6 == 6 && (*(_BYTE *)(v5 + 168) & 1) != 0)
    {
      vDSP_vabs(*(const float **)(*(_QWORD *)v3 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)v3 + 160));
      return;
    }
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v5 + 168) & 1) == 0)
  {
LABEL_7:
    mlx::core::Abs::eval(a1, a2, a3);
    return;
  }
  vDSP_vabsi(*(const int **)(*(_QWORD *)v3 + 152), 1, *(int **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)v3 + 160));
}

void sub_2424BCE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(a1);
}

void mlx::core::Add::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::Add::eval_cpu();
  v4 = v3 + 2;
  v5 = *(_DWORD *)(*v3 + 56);
  if (v5 == 4)
  {
  }
  else if (v5 == 6)
  {
  }
  else
  {
  }
}

void mlx::core::`anonymous namespace'::binary<mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const float *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int **v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int **v85;
  int *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int **v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int **v100;
  int *v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int **v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int **v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int **v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  vDSP_Length v169;
  float *v170;
  uint64_t v171;
  _BYTE *v172;
  int *v173;
  BOOL *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  int v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  vDSP_Length v187;
  float *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  vDSP_Length v205;
  uint64_t v206;
  float *v207;
  uint64_t v208;
  _DWORD *v209;
  int *v210;
  _DWORD *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  int v216;
  int v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int *v223;
  vDSP_Length v224;
  float *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  int v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int *v241;
  vDSP_Length v242;
  uint64_t v243;
  float *v244;
  uint64_t v245;
  _DWORD *v246;
  int *v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  int v252;
  int v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  vDSP_Length v261;
  uint64_t v262;
  float *v263;
  uint64_t v264;
  _QWORD *v265;
  int *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  int v271;
  int v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int *v279;
  vDSP_Length v280;
  uint64_t v281;
  float *v282;
  uint64_t v283;
  float *v284;
  float *v285;
  float *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  ldiv_t v294;
  uint64_t v295;
  int *v296;
  uint64_t v297;
  int v298;
  ldiv_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  BOOL *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int *v327;
  uint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  int *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int *v349;
  uint64_t v350;
  unint64_t v351;
  _QWORD *v352;
  int *v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  ldiv_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  ldiv_t v383;
  int v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int *v390;
  uint64_t v391;
  unint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int *v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  int *v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  ldiv_t v439;
  uint64_t v440;
  int *v441;
  uint64_t v442;
  int v443;
  ldiv_t v444;
  int v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  int *v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  unint64_t i;
  uint64_t v461;
  int v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int *v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  int *v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  int v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  unint64_t j;
  uint64_t v483;
  uint64_t v484;
  int v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int *v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  int *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  int v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  int v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  unint64_t k;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  ldiv_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  ldiv_t v529;
  int v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int *v536;
  uint64_t v537;
  unint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  int *v541;
  uint64_t v542;
  unint64_t v543;
  int v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int *v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  _QWORD *v554;
  uint64_t v555;
  int *v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t v560;
  int v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  int *v567;
  uint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  int *v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  int v584;
  ldiv_t v585;
  uint64_t v586;
  int *v587;
  uint64_t v588;
  int v589;
  ldiv_t v590;
  int v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int *v597;
  uint64_t v598;
  uint64_t *v599;
  uint64_t v600;
  uint64_t v601;
  int *v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  unint64_t m;
  uint64_t v607;
  int v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int *v614;
  uint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t v618;
  int *v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  int v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  unint64_t n;
  uint64_t v629;
  uint64_t v630;
  int v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int *v637;
  uint64_t v638;
  uint64_t *v639;
  uint64_t v640;
  uint64_t v641;
  int *v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  int v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  int v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  unint64_t ii;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  ldiv_t v665;
  uint64_t v666;
  int *v667;
  uint64_t v668;
  int v669;
  ldiv_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int *v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  uint64_t v682;
  int *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  _QWORD *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int *v698;
  uint64_t v699;
  unint64_t v700;
  _QWORD *v701;
  uint64_t v702;
  int *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int *v720;
  uint64_t v721;
  unint64_t v722;
  _QWORD *v723;
  int *v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  ldiv_t v744;
  uint64_t v745;
  int *v746;
  uint64_t v747;
  int v748;
  ldiv_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int *v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  uint64_t v761;
  int *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  float *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  int *v777;
  uint64_t v778;
  unint64_t v779;
  _QWORD *v780;
  uint64_t v781;
  int *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  int *v799;
  uint64_t v800;
  unint64_t v801;
  _QWORD *v802;
  int *v803;
  uint64_t v804;
  unint64_t v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  unint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  int *v823;
  vDSP_Length v824;
  float *v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int *v830;
  vDSP_Length v831;
  float *v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  int *v837;
  vDSP_Length v838;
  float *v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int *v844;
  vDSP_Length v845;
  float *v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int *v851;
  vDSP_Length v852;
  uint64_t v853;
  float *v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int *v859;
  vDSP_Length v860;
  uint64_t v861;
  float *v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  int *v867;
  vDSP_Length v868;
  float *v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int *v874;
  vDSP_Length v875;
  float *v876;
  unint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int *v881;
  vDSP_Length v882;
  uint64_t v883;
  float *v884;
  unint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int *v889;
  vDSP_Length v890;
  uint64_t v891;
  float *v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  int *v897;
  vDSP_Length v898;
  uint64_t v899;
  float *v900;
  unint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  int *v905;
  vDSP_Length v906;
  uint64_t v907;
  float *v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  int *v913;
  vDSP_Length v914;
  uint64_t v915;
  float *v916;
  unint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int *v921;
  vDSP_Length v922;
  uint64_t v923;
  float *v924;
  int v925;
  uint64_t v926;
  uint64_t v927;
  float *v928;
  int *v929;
  unint64_t v930;
  _QWORD *v931;
  uint64_t v932;
  int *v933;
  uint64_t v934;
  unint64_t v935;
  unint64_t v936;
  float *v937;
  uint64_t v938;
  unint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  ldiv_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  ldiv_t v951;
  int v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  int *v957;
  vDSP_Length v958;
  float *v959;
  unint64_t v960;
  _QWORD *v961;
  uint64_t v962;
  int *v963;
  uint64_t v964;
  unint64_t v965;
  unint64_t v966;
  float *v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  int v973;
  ldiv_t v974;
  uint64_t v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  ldiv_t v981;
  int v982;
  uint64_t v983;
  uint64_t v984;
  float *v985;
  uint64_t v986;
  unint64_t v987;
  _QWORD *v988;
  uint64_t v989;
  int *v990;
  uint64_t v991;
  unint64_t v992;
  unint64_t v993;
  float *v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int v1000;
  ldiv_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int v1007;
  ldiv_t v1008;
  int v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int *v1014;
  vDSP_Length v1015;
  float *v1016;
  unint64_t v1017;
  _QWORD *v1018;
  uint64_t v1019;
  int *v1020;
  uint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  float *v1024;
  uint64_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  int v1030;
  ldiv_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  ldiv_t v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  float *v1042;
  uint64_t v1043;
  unint64_t v1044;
  _QWORD *v1045;
  uint64_t v1046;
  int *v1047;
  uint64_t v1048;
  unint64_t v1049;
  unint64_t v1050;
  float *v1051;
  uint64_t v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  ldiv_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064;
  ldiv_t v1065;
  int v1066;
  uint64_t v1067;
  uint64_t v1068;
  float *v1069;
  uint64_t v1070;
  unint64_t v1071;
  _QWORD *v1072;
  uint64_t v1073;
  int *v1074;
  uint64_t v1075;
  unint64_t v1076;
  unint64_t v1077;
  float *v1078;
  uint64_t v1079;
  unint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  ldiv_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  ldiv_t v1092;
  int v1093;
  uint64_t v1094;
  uint64_t v1095;
  float *v1096;
  uint64_t v1097;
  unint64_t v1098;
  _QWORD *v1099;
  uint64_t v1100;
  int *v1101;
  uint64_t v1102;
  unint64_t v1103;
  unint64_t v1104;
  float *v1105;
  uint64_t v1106;
  unint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  int v1111;
  ldiv_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  ldiv_t v1119;
  int v1120;
  uint64_t v1121;
  uint64_t v1122;
  float *v1123;
  int *v1124;
  unint64_t v1125;
  _QWORD *v1126;
  uint64_t v1127;
  int *v1128;
  uint64_t v1129;
  unint64_t v1130;
  unint64_t v1131;
  float *v1132;
  uint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  int quot;
  ldiv_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  int v1145;
  ldiv_t v1146;
  int v1147;
  uint64_t v1148;
  uint64_t v1149;
  float *v1150;
  int *v1151;
  unint64_t v1152;
  _QWORD *v1153;
  uint64_t v1154;
  int *v1155;
  uint64_t v1156;
  unint64_t v1157;
  unint64_t v1158;
  float *v1159;
  uint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  ldiv_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  ldiv_t v1173;
  int v1174;
  unint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  int *v1179;
  vDSP_Length v1180;
  float *v1181;
  unint64_t v1182;
  _QWORD *v1183;
  uint64_t v1184;
  int *v1185;
  uint64_t v1186;
  unint64_t v1187;
  unint64_t v1188;
  float *v1189;
  uint64_t v1190;
  unint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  int v1195;
  ldiv_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  int v1202;
  ldiv_t v1203;
  int v1204;
  unint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  int *v1209;
  vDSP_Length v1210;
  float *v1211;
  unint64_t v1212;
  _QWORD *v1213;
  uint64_t v1214;
  int *v1215;
  uint64_t v1216;
  unint64_t v1217;
  unint64_t v1218;
  float *v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  int v1225;
  ldiv_t v1226;
  uint64_t v1227;
  unint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  int v1232;
  ldiv_t v1233;
  int v1234;
  uint64_t v1235;
  uint64_t v1236;
  float *v1237;
  uint64_t v1238;
  unint64_t v1239;
  _QWORD *v1240;
  uint64_t v1241;
  int *v1242;
  uint64_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  float *v1246;
  uint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  int v1252;
  ldiv_t v1253;
  uint64_t v1254;
  unint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  int v1259;
  ldiv_t v1260;
  int v1261;
  uint64_t v1262;
  uint64_t v1263;
  float *v1264;
  uint64_t v1265;
  unint64_t v1266;
  _QWORD *v1267;
  uint64_t v1268;
  int *v1269;
  uint64_t v1270;
  unint64_t v1271;
  unint64_t v1272;
  float *v1273;
  uint64_t v1274;
  unint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  int v1279;
  ldiv_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  int v1286;
  ldiv_t v1287;
  int v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int *v1293;
  vDSP_Length v1294;
  float *v1295;
  unint64_t v1296;
  _QWORD *v1297;
  uint64_t v1298;
  int *v1299;
  uint64_t v1300;
  unint64_t v1301;
  unint64_t v1302;
  float *v1303;
  uint64_t v1304;
  unint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  int v1309;
  ldiv_t v1310;
  uint64_t v1311;
  unint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  ldiv_t v1317;
  int v1318;
  unint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  int *v1323;
  vDSP_Length v1324;
  float *v1325;
  unint64_t v1326;
  _QWORD *v1327;
  uint64_t v1328;
  int *v1329;
  uint64_t v1330;
  unint64_t v1331;
  unint64_t v1332;
  float *v1333;
  uint64_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  int v1339;
  ldiv_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  ldiv_t v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  float *v1351;
  uint64_t v1352;
  unint64_t v1353;
  _QWORD *v1354;
  uint64_t v1355;
  int *v1356;
  uint64_t v1357;
  unint64_t v1358;
  unint64_t v1359;
  float *v1360;
  uint64_t v1361;
  unint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  int v1366;
  ldiv_t v1367;
  uint64_t v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int v1373;
  ldiv_t v1374;
  int v1375;
  uint64_t v1376;
  uint64_t v1377;
  float *v1378;
  uint64_t v1379;
  unint64_t v1380;
  _QWORD *v1381;
  uint64_t v1382;
  int *v1383;
  uint64_t v1384;
  unint64_t v1385;
  unint64_t v1386;
  float *v1387;
  uint64_t v1388;
  unint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  int v1393;
  ldiv_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  int v1400;
  ldiv_t v1401;
  int v1402;
  uint64_t v1403;
  uint64_t v1404;
  float *v1405;
  uint64_t v1406;
  unint64_t v1407;
  _QWORD *v1408;
  uint64_t v1409;
  int *v1410;
  uint64_t v1411;
  unint64_t v1412;
  unint64_t v1413;
  float *v1414;
  uint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  ldiv_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  ldiv_t v1428;
  int v1429;
  uint64_t v1430;
  uint64_t v1431;
  float *v1432;
  uint64_t v1433;
  unint64_t v1434;
  _QWORD *v1435;
  uint64_t v1436;
  int *v1437;
  uint64_t v1438;
  unint64_t v1439;
  unint64_t v1440;
  float *v1441;
  uint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  int v1447;
  ldiv_t v1448;
  uint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  int v1454;
  ldiv_t v1455;
  int v1456;
  uint64_t v1457;
  uint64_t v1458;
  float *v1459;
  uint64_t v1460;
  unint64_t v1461;
  _QWORD *v1462;
  uint64_t v1463;
  int *v1464;
  uint64_t v1465;
  unint64_t v1466;
  unint64_t v1467;
  float *v1468;
  uint64_t v1469;
  unint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  int v1474;
  ldiv_t v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  ldiv_t v1482;
  int v1483;
  uint64_t v1484;
  uint64_t v1485;
  float *v1486;
  uint64_t v1487;
  unint64_t v1488;
  _QWORD *v1489;
  uint64_t v1490;
  int *v1491;
  uint64_t v1492;
  unint64_t v1493;
  unint64_t v1494;
  float *v1495;
  uint64_t v1496;
  unint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  int v1501;
  ldiv_t v1502;
  uint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  int v1508;
  ldiv_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  int *v1519;
  unint64_t v1520;
  int *v1521;
  int *v1522;
  int *v1523;
  unint64_t v1524;
  int *v1525;
  uint64_t v1526;
  unint64_t v1527;
  unint64_t v1528;
  unint64_t v1529;
  unint64_t v1530;
  unint64_t v1531;
  unint64_t v1532;
  unint64_t v1533;
  unint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  unint64_t v1537;
  unint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  vDSP_Length v1548;
  vDSP_Length v1549;
  vDSP_Length v1550;
  vDSP_Length v1551;
  vDSP_Length v1552;
  vDSP_Length v1553;
  vDSP_Length v1554;
  vDSP_Length v1555;
  vDSP_Length v1556;
  vDSP_Length v1557;
  vDSP_Length v1558;
  unint64_t v1559;
  vDSP_Length v1560;
  unint64_t v1561;
  vDSP_Length v1562;
  vDSP_Length v1563;
  vDSP_Length v1564;
  vDSP_Length v1565;
  vDSP_Length v1566;
  vDSP_Length v1567;
  vDSP_Length v1568;
  vDSP_Length v1569;
  vDSP_Length v1570;
  vDSP_Length v1571;
  vDSP_Length v1572;
  vDSP_Length v1573;
  vDSP_Length v1574;
  vDSP_Length v1575;
  vDSP_Length v1576;
  vDSP_Length v1577;
  vDSP_Length v1578;
  vDSP_Length v1579;
  vDSP_Length v1580;
  vDSP_Length v1581;
  vDSP_Length v1582;
  uint64_t v1583;
  int v1584;
  int *v1585;
  uint64_t v1586;
  int *v1587;
  uint64_t v1588;
  uint64_t v1589;
  int v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  int *v1594;
  int *v1595;
  int *v1596;
  int *v1597;
  int *v1598;
  int *v1599;
  int *v1600;
  int *v1601;
  int *v1602;
  int *v1603;
  int *v1604;
  uint64_t v1605;
  int *v1606;
  uint64_t v1607;
  int *v1608;
  int *v1609;
  int *v1610;
  int *v1611;
  int *v1612;
  int *v1613;
  int *v1614;
  int *v1615;
  int *v1616;
  int *v1617;
  int *v1618;
  int *v1619;
  int *v1620;
  int *v1621;
  int *v1622;
  int *v1623;
  int *v1624;
  int *v1625;
  int *v1626;
  int *v1627;
  int *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  vDSP_Length v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  vDSP_Length v1651;
  uint64_t v1652;
  vDSP_Length v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(unsigned __int8 **)(*a2 + 152) != -**(_BYTE **)(*a1 + 152);
          goto LABEL_8;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v16 = *(_QWORD **)a3;
          v17 = *a1;
          v18 = *(int **)*a1;
          v19 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v18) >> 2;
          v20 = (v19 - 1);
          if ((int)v20 >= -1)
            v21 = -1;
          else
            v21 = v19 - 1;
          v22 = v21 + 1;
          v23 = v19 + 1;
          break;
      }
      while (1)
      {
        v24 = v23 - 2;
        if (v23 - 2 < 0)
          break;
        --v23;
        if (*(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * v24) != *(_QWORD *)(v16[3] + 8 * v24))
          goto LABEL_68;
      }
      v23 = v22;
LABEL_68:
      v77 = (int **)*a2;
      v78 = *(int **)*a2;
      v79 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v78) >> 2;
      v80 = (v79 - 1);
      if ((int)v80 >= -1)
        v81 = -1;
      else
        v81 = v79 - 1;
      v82 = v81 + 1;
      v83 = v79 + 1;
      while (1)
      {
        v84 = v83 - 2;
        if (v83 - 2 < 0)
          break;
        --v83;
        if (*(_QWORD *)&v77[3][2 * v84] != *(_QWORD *)(v16[3] + 8 * v84))
          goto LABEL_122;
      }
      v83 = v82;
LABEL_122:
      v131 = v19 + 1;
      while (1)
      {
        v132 = v131 - 2;
        if (v131 - 2 < 0)
          break;
        --v131;
        if (*(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * v132))
          goto LABEL_157;
      }
      v131 = v22;
LABEL_157:
      v145 = v79 + 1;
      while (1)
      {
        v146 = v145 - 2;
        if (v145 - 2 < 0)
          break;
        --v145;
        if (*(_QWORD *)&v77[3][2 * v146])
          goto LABEL_192;
      }
      v145 = v82;
LABEL_192:
      v159 = (uint64_t)(v16[1] - *v16) >> 2;
      if (v23 <= v83)
        v160 = v83;
      else
        v160 = v23;
      if (v23 <= v145)
        v23 = v145;
      if (v131 > v83)
        v83 = v131;
      if (v159 > v83)
        v161 = 1;
      else
        v161 = 4;
      if (v159 <= v83)
        v83 = (uint64_t)(v16[1] - *v16) >> 2;
      if (v159 <= v23)
        v23 = v83;
      else
        v161 = 2;
      if (v159 <= v160)
      {
        v162 = v23;
      }
      else
      {
        v161 = 3;
        v162 = v160;
      }
      if (!v162)
        goto LABEL_221;
      v163 = *(_QWORD *)(v16[3] + 8 * (v162 - 1));
      if (v163 < 0x10)
        goto LABEL_221;
      switch(v161)
      {
        case 1:
          if (v162 == 2)
          {
            v1120 = *v18;
            if (*v18)
            {
              v1121 = 0;
              v1122 = 0;
              v1559 = 0;
              v1605 = *(_QWORD *)(v17 + 152);
              v1651 = (int)v163;
              v1123 = (float *)v16[19];
              v1124 = v77[19];
              do
              {
                if (v18[1])
                {
                  v1125 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)((char *)v1124 + v1121), 1, (const float *)(v1605 + v1122), v1123, 1, v1651);
                    v17 = *a1;
                    v1126 = *(_QWORD **)(*a1 + 24);
                    v1127 = v1126[1];
                    v1122 += v1127;
                    v77 = (int **)*a2;
                    v1128 = *(int **)(*a2 + 24);
                    v1129 = *((_QWORD *)v1128 + 1);
                    v1121 += v1129;
                    v1123 = (float *)((char *)v1123 + v1651);
                    ++v1125;
                    v18 = *(int **)*a1;
                    v1130 = v18[1];
                  }
                  while (v1125 < v1130);
                  v1120 = *v18;
                  v78 = *v77;
                }
                else
                {
                  v1130 = 0;
                  v1126 = *(_QWORD **)(v17 + 24);
                  v1127 = v1126[1];
                  v1128 = v77[3];
                  v1129 = *((_QWORD *)v1128 + 1);
                }
                v1122 = *v1126 + v1122 - v1130 * v1127;
                v1121 = *(_QWORD *)v1128 + v1121 - v1129 * v78[1];
                ++v1559;
              }
              while (v1559 < v1120);
            }
          }
          else if (v162 == 1)
          {
            if (*v18)
            {
              v819 = 0;
              v820 = 0;
              v821 = 0;
              v822 = *(_QWORD *)(v17 + 152);
              v823 = v77[19];
              v824 = (int)v163;
              v825 = (float *)v16[19];
              do
              {
                vDSP_vsadd((const float *)((char *)v823 + v820), 1, (const float *)(v822 + v821), v825, 1, v824);
                v821 += **(_QWORD **)(*a1 + 24);
                v820 += **(_QWORD **)(*a2 + 24);
                v825 = (float *)((char *)v825 + v824);
                ++v819;
              }
              while (v819 < **(int **)*a1);
            }
          }
          else if (v16[6])
          {
            v1131 = 0;
            v1606 = v77[19];
            v1652 = *(_QWORD *)(v17 + 152);
            v1560 = (int)v163;
            v1132 = (float *)v16[19];
            do
            {
              v1133 = *(_QWORD *)*a1;
              v1134 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1133) >> 2;
              v1135 = 0;
              v1136 = (v1134 - 1);
              if ((int)v1134 - 1 >= 0)
              {
                v1137 = *(_QWORD *)(*a1 + 24);
                quot = v1131;
                do
                {
                  v1139 = ldiv(quot, *(int *)(v1133 + 4 * v1136));
                  quot = v1139.quot;
                  v1135 += *(_QWORD *)(v1137 + 8 * v1136--) * v1139.rem;
                }
                while (v1136 != -1);
              }
              v1140 = *(_QWORD *)*a2;
              v1141 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1140) >> 2;
              v1142 = 0;
              v1143 = (v1141 - 1);
              if ((int)v1141 - 1 >= 0)
              {
                v1144 = *(_QWORD *)(*a2 + 24);
                v1145 = v1131;
                do
                {
                  v1146 = ldiv(v1145, *(int *)(v1140 + 4 * v1143));
                  v1145 = v1146.quot;
                  v1142 += *(_QWORD *)(v1144 + 8 * v1143--) * v1146.rem;
                }
                while (v1143 != -1);
              }
              vDSP_vsadd((const float *)((char *)v1606 + (int)v1142), 1, (const float *)(v1652 + (int)v1135), v1132, 1, v1560);
              v1132 = (float *)((char *)v1132 + v1560);
              v1131 += v1560;
            }
            while (v1131 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v162 == 2)
          {
            v1147 = *v18;
            if (*v18)
            {
              v1148 = 0;
              v1149 = 0;
              v1561 = 0;
              v1607 = *(_QWORD *)(v17 + 152);
              v1653 = (int)v163;
              v1150 = (float *)v16[19];
              v1151 = v77[19];
              do
              {
                if (v18[1])
                {
                  v1152 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1607 + v1149), 1, (const float *)((char *)v1151 + v1148), v1150, 1, v1653);
                    v17 = *a1;
                    v1153 = *(_QWORD **)(*a1 + 24);
                    v1154 = v1153[1];
                    v1149 += v1154;
                    v77 = (int **)*a2;
                    v1155 = *(int **)(*a2 + 24);
                    v1156 = *((_QWORD *)v1155 + 1);
                    v1148 += v1156;
                    v1150 = (float *)((char *)v1150 + v1653);
                    ++v1152;
                    v18 = *(int **)*a1;
                    v1157 = v18[1];
                  }
                  while (v1152 < v1157);
                  v1147 = *v18;
                  v78 = *v77;
                }
                else
                {
                  v1157 = 0;
                  v1153 = *(_QWORD **)(v17 + 24);
                  v1154 = v1153[1];
                  v1155 = v77[3];
                  v1156 = *((_QWORD *)v1155 + 1);
                }
                v1149 = *v1153 + v1149 - v1157 * v1154;
                v1148 = *(_QWORD *)v1155 + v1148 - v1156 * v78[1];
                ++v1561;
              }
              while (v1561 < v1147);
            }
          }
          else if (v162 == 1)
          {
            if (*v18)
            {
              v826 = 0;
              v827 = 0;
              v828 = 0;
              v829 = *(_QWORD *)(v17 + 152);
              v830 = v77[19];
              v831 = (int)v163;
              v832 = (float *)v16[19];
              do
              {
                vDSP_vsadd((const float *)(v829 + v828), 1, (const float *)((char *)v830 + v827), v832, 1, v831);
                v828 += **(_QWORD **)(*a1 + 24);
                v827 += **(_QWORD **)(*a2 + 24);
                v832 = (float *)((char *)v832 + v831);
                ++v826;
              }
              while (v826 < **(int **)*a1);
            }
          }
          else if (v16[6])
          {
            v1158 = 0;
            v1608 = v77[19];
            v1654 = *(_QWORD *)(v17 + 152);
            v1562 = (int)v163;
            v1159 = (float *)v16[19];
            do
            {
              v1160 = *(_QWORD *)*a1;
              v1161 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1160) >> 2;
              v1162 = 0;
              v1163 = (v1161 - 1);
              if ((int)v1161 - 1 >= 0)
              {
                v1164 = *(_QWORD *)(*a1 + 24);
                v1165 = v1158;
                do
                {
                  v1166 = ldiv(v1165, *(int *)(v1160 + 4 * v1163));
                  v1165 = v1166.quot;
                  v1162 += *(_QWORD *)(v1164 + 8 * v1163--) * v1166.rem;
                }
                while (v1163 != -1);
              }
              v1167 = *(_QWORD *)*a2;
              v1168 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1167) >> 2;
              v1169 = 0;
              v1170 = (v1168 - 1);
              if ((int)v1168 - 1 >= 0)
              {
                v1171 = *(_QWORD *)(*a2 + 24);
                v1172 = v1158;
                do
                {
                  v1173 = ldiv(v1172, *(int *)(v1167 + 4 * v1170));
                  v1172 = v1173.quot;
                  v1169 += *(_QWORD *)(v1171 + 8 * v1170--) * v1173.rem;
                }
                while (v1170 != -1);
              }
              vDSP_vsadd((const float *)(v1654 + (int)v1162), 1, (const float *)((char *)v1608 + (int)v1169), v1159, 1, v1562);
              v1159 = (float *)((char *)v1159 + v1562);
              v1158 += v1562;
            }
            while (v1158 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v162 == 2)
          {
            v925 = *v18;
            if (*v18)
            {
              v926 = 0;
              v927 = 0;
              v1547 = 0;
              v1593 = *(_QWORD *)(v17 + 152);
              v1639 = (int)v163;
              v928 = (float *)v16[19];
              v929 = v77[19];
              do
              {
                if (v18[1])
                {
                  v930 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1593 + v927), 1, (const float *)((char *)v929 + v926), 1, v928, 1, v1639);
                    v17 = *a1;
                    v931 = *(_QWORD **)(*a1 + 24);
                    v932 = v931[1];
                    v927 += v932;
                    v77 = (int **)*a2;
                    v933 = *(int **)(*a2 + 24);
                    v934 = *((_QWORD *)v933 + 1);
                    v926 += v934;
                    v928 = (float *)((char *)v928 + v1639);
                    ++v930;
                    v18 = *(int **)*a1;
                    v935 = v18[1];
                  }
                  while (v930 < v935);
                  v925 = *v18;
                  v78 = *v77;
                }
                else
                {
                  v935 = 0;
                  v931 = *(_QWORD **)(v17 + 24);
                  v932 = v931[1];
                  v933 = v77[3];
                  v934 = *((_QWORD *)v933 + 1);
                }
                v927 = *v931 + v927 - v935 * v932;
                v926 = *(_QWORD *)v933 + v926 - v934 * v78[1];
                ++v1547;
              }
              while (v1547 < v925);
            }
          }
          else if (v162 == 1)
          {
            if (*v18)
            {
              v164 = 0;
              v165 = 0;
              v166 = 0;
              v167 = *(_QWORD *)(v17 + 152);
              v168 = v77[19];
              v169 = (int)v163;
              v170 = (float *)v16[19];
              do
              {
                vDSP_vadd((const float *)(v167 + v166), 1, (const float *)((char *)v168 + v165), 1, v170, 1, v169);
                v166 += **(_QWORD **)(*a1 + 24);
                v165 += **(_QWORD **)(*a2 + 24);
                v170 = (float *)((char *)v170 + v169);
                ++v164;
              }
              while (v164 < **(int **)*a1);
            }
          }
          else if (v16[6])
          {
            v936 = 0;
            v1594 = v77[19];
            v1640 = *(_QWORD *)(v17 + 152);
            v1548 = (int)v163;
            v937 = (float *)v16[19];
            do
            {
              v938 = *(_QWORD *)*a1;
              v939 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v938) >> 2;
              v940 = 0;
              v941 = (v939 - 1);
              if ((int)v939 - 1 >= 0)
              {
                v942 = *(_QWORD *)(*a1 + 24);
                v943 = v936;
                do
                {
                  v944 = ldiv(v943, *(int *)(v938 + 4 * v941));
                  v943 = v944.quot;
                  v940 += *(_QWORD *)(v942 + 8 * v941--) * v944.rem;
                }
                while (v941 != -1);
              }
              v945 = *(_QWORD *)*a2;
              v946 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v945) >> 2;
              v947 = 0;
              v948 = (v946 - 1);
              if ((int)v946 - 1 >= 0)
              {
                v949 = *(_QWORD *)(*a2 + 24);
                v950 = v936;
                do
                {
                  v951 = ldiv(v950, *(int *)(v945 + 4 * v948));
                  v950 = v951.quot;
                  v947 += *(_QWORD *)(v949 + 8 * v948--) * v951.rem;
                }
                while (v948 != -1);
              }
              vDSP_vadd((const float *)(v1640 + (int)v940), 1, (const float *)((char *)v1594 + (int)v947), 1, v937, 1, v1548);
              v937 = (float *)((char *)v937 + v1548);
              v936 += v1548;
            }
            while (v936 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_221:
          switch(v159)
          {
            case 1uLL:
              v171 = v16[6];
              if (v171)
              {
                v172 = *(_BYTE **)(v17 + 152);
                v173 = v77[19];
                v174 = (BOOL *)v16[19];
                v175 = **(_QWORD **)(v17 + 24);
                v176 = *(_QWORD *)v77[3];
                do
                {
                  *v174++ = *(unsigned __int8 *)v173 != -*v172;
                  v173 = (int *)((char *)v173 + v176);
                  v172 += v175;
                  --v171;
                }
                while (v171);
              }
              break;
            case 2uLL:
              v300 = *v18;
              if ((_DWORD)v300)
              {
                v301 = 0;
                v302 = 0;
                v303 = 0;
                v304 = 0;
                v305 = *(_QWORD *)(v17 + 152);
                v306 = v77[19];
                v307 = v16[19];
                v308 = v18[1];
                v309 = *(uint64_t **)(v17 + 24);
                v310 = *v309;
                v311 = v309[1];
                v312 = v77[3];
                v313 = *(_QWORD *)v312;
                v314 = *((_QWORD *)v312 + 1);
                v315 = v313 - v314 * v78[1];
                if (v308 <= 1)
                  v316 = 1;
                else
                  v316 = v18[1];
                v317 = v310 - v311 * v308;
                do
                {
                  if ((_DWORD)v308)
                  {
                    v318 = v302 + v316;
                    v319 = (BOOL *)(v307 + v302);
                    v320 = v316;
                    do
                    {
                      *v319++ = *((unsigned __int8 *)v306 + v303) != -*(_BYTE *)(v305 + v304);
                      v304 += v311;
                      v303 += v314;
                      --v320;
                    }
                    while (v320);
                    v302 = v318;
                  }
                  v304 += v317;
                  v303 += v315;
                  ++v301;
                }
                while (v301 != v300);
              }
              break;
            case 3uLL:
              v321 = *v18;
              if ((_DWORD)v321)
              {
                v322 = 0;
                v323 = 0;
                v324 = 0;
                v325 = 0;
                v326 = *(_QWORD *)(v17 + 152);
                v327 = v77[19];
                v328 = v16[19];
                v329 = v18[1];
                v330 = *(_QWORD **)(v17 + 24);
                v331 = v330[1];
                v332 = v77[3];
                v333 = *((_QWORD *)v332 + 1);
                v334 = *(_QWORD *)v332 - v333 * v78[1];
                if (v329 <= 1)
                  v335 = 1;
                else
                  v335 = v18[1];
                v336 = *v330 - v331 * v329;
                do
                {
                  if ((_DWORD)v329)
                  {
                    v337 = 0;
                    v338 = v18[2];
                    v339 = v330[2];
                    v340 = *((_QWORD *)v332 + 2);
                    if (v338 <= 1)
                      v341 = 1;
                    else
                      v341 = v18[2];
                    v342 = v333 - v340 * v78[2];
                    do
                    {
                      v343 = v341;
                      if ((_DWORD)v338)
                      {
                        do
                        {
                          *(_BYTE *)(v328 + v323++) = *((unsigned __int8 *)v327 + v324) != -*(_BYTE *)(v326 + v325);
                          v325 += v339;
                          v324 += v340;
                          --v343;
                        }
                        while (v343);
                      }
                      v325 += v331 - v339 * v338;
                      v324 += v342;
                      ++v337;
                    }
                    while (v337 != v335);
                  }
                  v325 += v336;
                  v324 += v334;
                  ++v322;
                }
                while (v322 != v321);
              }
              break;
            case 4uLL:
              v1630 = *v18;
              if ((_DWORD)v1630)
              {
                v344 = 0;
                v345 = 0;
                v346 = 0;
                v347 = 0;
                v348 = *(_QWORD *)(v17 + 152);
                v349 = v77[19];
                v350 = v16[19];
                v351 = v18[1];
                v352 = *(_QWORD **)(v17 + 24);
                v353 = v77[3];
                v1510 = *((_QWORD *)v353 + 1);
                v1513 = v352[1];
                v1540 = *(_QWORD *)v353 - v1510 * v78[1];
                v1584 = v18[1];
                if (v351 <= 1)
                  v354 = 1;
                else
                  v354 = v18[1];
                v1520 = *v352 - v352[1] * v351;
                do
                {
                  if (v1584)
                  {
                    v355 = 0;
                    v356 = v18[2];
                    v357 = v352[2];
                    v358 = *((_QWORD *)v353 + 2);
                    if (v356 <= 1)
                      v359 = 1;
                    else
                      v359 = v18[2];
                    v360 = v1510 - v358 * v78[2];
                    do
                    {
                      if ((_DWORD)v356)
                      {
                        v361 = 0;
                        v362 = v18[3];
                        v363 = v352[3];
                        v364 = *((_QWORD *)v353 + 3);
                        if (v362 <= 1)
                          v365 = 1;
                        else
                          v365 = v18[3];
                        v366 = v358 - v364 * v78[3];
                        do
                        {
                          v367 = v365;
                          if ((_DWORD)v362)
                          {
                            do
                            {
                              *(_BYTE *)(v350 + v345++) = *((unsigned __int8 *)v349 + v346) != -*(_BYTE *)(v348 + v347);
                              v347 += v363;
                              v346 += v364;
                              --v367;
                            }
                            while (v367);
                          }
                          v347 += v357 - v363 * v362;
                          v346 += v366;
                          ++v361;
                        }
                        while (v361 != v359);
                      }
                      v347 += v1513 - v357 * v356;
                      v346 += v360;
                      ++v355;
                    }
                    while (v355 != v354);
                  }
                  v347 += v1520;
                  v346 += v1540;
                  ++v344;
                }
                while (v344 != v1630);
              }
              break;
            default:
              v1583 = v16[6];
              v1629 = v20;
              if (v1583)
              {
                v289 = 0;
                v1519 = v77[19];
                v1539 = *(_QWORD *)(v17 + 152);
                v1512 = v16[19];
                do
                {
                  v290 = v1629;
                  if ((v1629 & 0x80000000) != 0)
                  {
                    LODWORD(v291) = 0;
                  }
                  else
                  {
                    v291 = 0;
                    v292 = *(_QWORD *)(v17 + 24);
                    v293 = v289;
                    do
                    {
                      v294 = ldiv(v293, v18[v290]);
                      v293 = v294.quot;
                      v291 += *(_QWORD *)(v292 + 8 * v290--) * v294.rem;
                    }
                    while (v290 != -1);
                  }
                  v295 = 0;
                  if ((v80 & 0x80000000) == 0)
                  {
                    v296 = v77[3];
                    v297 = v80;
                    v298 = v289;
                    do
                    {
                      v299 = ldiv(v298, v78[v297]);
                      v298 = v299.quot;
                      v295 += *(_QWORD *)&v296[2 * v297--] * v299.rem;
                    }
                    while (v297 != -1);
                  }
                  *(_BYTE *)(v1512 + v289++) = *((unsigned __int8 *)v1519 + (int)v295) != -*(_BYTE *)(v1539 + (int)v291);
                }
                while (v289 != v1583);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_7;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v25 = *(_QWORD **)a3;
          v26 = *a1;
          v27 = *(int **)*a1;
          v28 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v27) >> 2;
          v29 = v28 - 1;
          if ((int)v28 - 1 >= -1)
            v29 = -1;
          v30 = v29 + 1;
          v31 = v28 + 1;
          break;
      }
      while (1)
      {
        v32 = v31 - 2;
        if (v31 - 2 < 0)
          break;
        --v31;
        if (*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v32) != *(_QWORD *)(v25[3] + 8 * v32))
          goto LABEL_76;
      }
      v31 = v30;
LABEL_76:
      v85 = (int **)*a2;
      v86 = *(int **)*a2;
      v87 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v86) >> 2;
      v88 = v87 - 1;
      if ((int)v87 - 1 >= -1)
        v88 = -1;
      v89 = v88 + 1;
      v90 = v87 + 1;
      while (1)
      {
        v91 = v90 - 2;
        if (v90 - 2 < 0)
          break;
        --v90;
        if (*(_QWORD *)&v85[3][2 * v91] != *(_QWORD *)(v25[3] + 8 * v91))
          goto LABEL_127;
      }
      v90 = v89;
LABEL_127:
      v133 = v28 + 1;
      while (1)
      {
        v134 = v133 - 2;
        if (v133 - 2 < 0)
          break;
        --v133;
        if (*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v134))
          goto LABEL_162;
      }
      v133 = v30;
LABEL_162:
      v147 = v87 + 1;
      while (1)
      {
        v148 = v147 - 2;
        if (v147 - 2 < 0)
          break;
        --v147;
        if (*(_QWORD *)&v85[3][2 * v148])
          goto LABEL_227;
      }
      v147 = v89;
LABEL_227:
      v177 = (uint64_t)(v25[1] - *v25) >> 2;
      if (v31 <= v90)
        v178 = v90;
      else
        v178 = v31;
      if (v31 <= v147)
        v31 = v147;
      if (v133 > v90)
        v90 = v133;
      if (v177 > v90)
        v179 = 1;
      else
        v179 = 4;
      if (v177 <= v90)
        v90 = (uint64_t)(v25[1] - *v25) >> 2;
      if (v177 <= v31)
        v31 = v90;
      else
        v179 = 2;
      if (v177 <= v178)
      {
        v180 = v31;
      }
      else
      {
        v179 = 3;
        v180 = v178;
      }
      if (!v180)
        goto LABEL_256;
      v181 = *(_QWORD *)(v25[3] + 8 * (v180 - 1));
      if (v181 < 0x10)
        goto LABEL_256;
      switch(v179)
      {
        case 1:
          if (v180 == 2)
          {
            v1174 = *v27;
            if (*v27)
            {
              v1175 = 0;
              v1176 = 0;
              v1177 = 0;
              v1178 = *(_QWORD *)(v26 + 152);
              v1179 = v85[19];
              v1180 = (int)v181;
              v1181 = (float *)v25[19];
              do
              {
                if (v27[1])
                {
                  v1182 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)((char *)v1179 + v1176), 1, (const float *)(v1178 + v1177), v1181, 1, v1180);
                    v26 = *a1;
                    v1183 = *(_QWORD **)(*a1 + 24);
                    v1184 = v1183[1];
                    v1177 += v1184;
                    v85 = (int **)*a2;
                    v1185 = *(int **)(*a2 + 24);
                    v1186 = *((_QWORD *)v1185 + 1);
                    v1176 += v1186;
                    v1181 = (float *)((char *)v1181 + v1180);
                    ++v1182;
                    v27 = *(int **)*a1;
                    v1187 = v27[1];
                  }
                  while (v1182 < v1187);
                  v1174 = *v27;
                  v86 = *v85;
                }
                else
                {
                  v1187 = 0;
                  v1183 = *(_QWORD **)(v26 + 24);
                  v1184 = v1183[1];
                  v1185 = v85[3];
                  v1186 = *((_QWORD *)v1185 + 1);
                }
                v1177 = *v1183 + v1177 - v1187 * v1184;
                v1176 = *(_QWORD *)v1185 + v1176 - v1186 * v86[1];
                ++v1175;
              }
              while (v1175 < v1174);
            }
          }
          else if (v180 == 1)
          {
            if (*v27)
            {
              v833 = 0;
              v834 = 0;
              v835 = 0;
              v836 = *(_QWORD *)(v26 + 152);
              v837 = v85[19];
              v838 = (int)v181;
              v839 = (float *)v25[19];
              do
              {
                vDSP_vsadd((const float *)((char *)v837 + v834), 1, (const float *)(v836 + v835), v839, 1, v838);
                v835 += **(_QWORD **)(*a1 + 24);
                v834 += **(_QWORD **)(*a2 + 24);
                v839 = (float *)((char *)v839 + v838);
                ++v833;
              }
              while (v833 < **(int **)*a1);
            }
          }
          else if (v25[6])
          {
            v1188 = 0;
            v1609 = v85[19];
            v1655 = *(_QWORD *)(v26 + 152);
            v1563 = (int)v181;
            v1189 = (float *)v25[19];
            do
            {
              v1190 = *(_QWORD *)*a1;
              v1191 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1190) >> 2;
              v1192 = 0;
              v1193 = (v1191 - 1);
              if ((int)v1191 - 1 >= 0)
              {
                v1194 = *(_QWORD *)(*a1 + 24);
                v1195 = v1188;
                do
                {
                  v1196 = ldiv(v1195, *(int *)(v1190 + 4 * v1193));
                  v1195 = v1196.quot;
                  v1192 += *(_QWORD *)(v1194 + 8 * v1193--) * v1196.rem;
                }
                while (v1193 != -1);
              }
              v1197 = *(_QWORD *)*a2;
              v1198 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1197) >> 2;
              v1199 = 0;
              v1200 = (v1198 - 1);
              if ((int)v1198 - 1 >= 0)
              {
                v1201 = *(_QWORD *)(*a2 + 24);
                v1202 = v1188;
                do
                {
                  v1203 = ldiv(v1202, *(int *)(v1197 + 4 * v1200));
                  v1202 = v1203.quot;
                  v1199 += *(_QWORD *)(v1201 + 8 * v1200--) * v1203.rem;
                }
                while (v1200 != -1);
              }
              vDSP_vsadd((const float *)((char *)v1609 + (int)v1199), 1, (const float *)(v1655 + (int)v1192), v1189, 1, v1563);
              v1189 = (float *)((char *)v1189 + v1563);
              v1188 += v1563;
            }
            while (v1188 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v180 == 2)
          {
            v1204 = *v27;
            if (*v27)
            {
              v1205 = 0;
              v1206 = 0;
              v1207 = 0;
              v1208 = *(_QWORD *)(v26 + 152);
              v1209 = v85[19];
              v1210 = (int)v181;
              v1211 = (float *)v25[19];
              do
              {
                if (v27[1])
                {
                  v1212 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1208 + v1207), 1, (const float *)((char *)v1209 + v1206), v1211, 1, v1210);
                    v26 = *a1;
                    v1213 = *(_QWORD **)(*a1 + 24);
                    v1214 = v1213[1];
                    v1207 += v1214;
                    v85 = (int **)*a2;
                    v1215 = *(int **)(*a2 + 24);
                    v1216 = *((_QWORD *)v1215 + 1);
                    v1206 += v1216;
                    v1211 = (float *)((char *)v1211 + v1210);
                    ++v1212;
                    v27 = *(int **)*a1;
                    v1217 = v27[1];
                  }
                  while (v1212 < v1217);
                  v1204 = *v27;
                  v86 = *v85;
                }
                else
                {
                  v1217 = 0;
                  v1213 = *(_QWORD **)(v26 + 24);
                  v1214 = v1213[1];
                  v1215 = v85[3];
                  v1216 = *((_QWORD *)v1215 + 1);
                }
                v1207 = *v1213 + v1207 - v1217 * v1214;
                v1206 = *(_QWORD *)v1215 + v1206 - v1216 * v86[1];
                ++v1205;
              }
              while (v1205 < v1204);
            }
          }
          else if (v180 == 1)
          {
            if (*v27)
            {
              v840 = 0;
              v841 = 0;
              v842 = 0;
              v843 = *(_QWORD *)(v26 + 152);
              v844 = v85[19];
              v845 = (int)v181;
              v846 = (float *)v25[19];
              do
              {
                vDSP_vsadd((const float *)(v843 + v842), 1, (const float *)((char *)v844 + v841), v846, 1, v845);
                v842 += **(_QWORD **)(*a1 + 24);
                v841 += **(_QWORD **)(*a2 + 24);
                v846 = (float *)((char *)v846 + v845);
                ++v840;
              }
              while (v840 < **(int **)*a1);
            }
          }
          else if (v25[6])
          {
            v1218 = 0;
            v1610 = v85[19];
            v1656 = *(_QWORD *)(v26 + 152);
            v1564 = (int)v181;
            v1219 = (float *)v25[19];
            do
            {
              v1220 = *(_QWORD *)*a1;
              v1221 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1220) >> 2;
              v1222 = 0;
              v1223 = (v1221 - 1);
              if ((int)v1221 - 1 >= 0)
              {
                v1224 = *(_QWORD *)(*a1 + 24);
                v1225 = v1218;
                do
                {
                  v1226 = ldiv(v1225, *(int *)(v1220 + 4 * v1223));
                  v1225 = v1226.quot;
                  v1222 += *(_QWORD *)(v1224 + 8 * v1223--) * v1226.rem;
                }
                while (v1223 != -1);
              }
              v1227 = *(_QWORD *)*a2;
              v1228 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1227) >> 2;
              v1229 = 0;
              v1230 = (v1228 - 1);
              if ((int)v1228 - 1 >= 0)
              {
                v1231 = *(_QWORD *)(*a2 + 24);
                v1232 = v1218;
                do
                {
                  v1233 = ldiv(v1232, *(int *)(v1227 + 4 * v1230));
                  v1232 = v1233.quot;
                  v1229 += *(_QWORD *)(v1231 + 8 * v1230--) * v1233.rem;
                }
                while (v1230 != -1);
              }
              vDSP_vsadd((const float *)(v1656 + (int)v1222), 1, (const float *)((char *)v1610 + (int)v1229), v1219, 1, v1564);
              v1219 = (float *)((char *)v1219 + v1564);
              v1218 += v1564;
            }
            while (v1218 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v180 == 2)
          {
            v952 = *v27;
            if (*v27)
            {
              v953 = 0;
              v954 = 0;
              v955 = 0;
              v956 = *(_QWORD *)(v26 + 152);
              v957 = v85[19];
              v958 = (int)v181;
              v959 = (float *)v25[19];
              do
              {
                if (v27[1])
                {
                  v960 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v956 + v955), 1, (const float *)((char *)v957 + v954), 1, v959, 1, v958);
                    v26 = *a1;
                    v961 = *(_QWORD **)(*a1 + 24);
                    v962 = v961[1];
                    v955 += v962;
                    v85 = (int **)*a2;
                    v963 = *(int **)(*a2 + 24);
                    v964 = *((_QWORD *)v963 + 1);
                    v954 += v964;
                    v959 = (float *)((char *)v959 + v958);
                    ++v960;
                    v27 = *(int **)*a1;
                    v965 = v27[1];
                  }
                  while (v960 < v965);
                  v952 = *v27;
                  v86 = *v85;
                }
                else
                {
                  v965 = 0;
                  v961 = *(_QWORD **)(v26 + 24);
                  v962 = v961[1];
                  v963 = v85[3];
                  v964 = *((_QWORD *)v963 + 1);
                }
                v955 = *v961 + v955 - v965 * v962;
                v954 = *(_QWORD *)v963 + v954 - v964 * v86[1];
                ++v953;
              }
              while (v953 < v952);
            }
          }
          else if (v180 == 1)
          {
            if (*v27)
            {
              v182 = 0;
              v183 = 0;
              v184 = 0;
              v185 = *(_QWORD *)(v26 + 152);
              v186 = v85[19];
              v187 = (int)v181;
              v188 = (float *)v25[19];
              do
              {
                vDSP_vadd((const float *)(v185 + v184), 1, (const float *)((char *)v186 + v183), 1, v188, 1, v187);
                v184 += **(_QWORD **)(*a1 + 24);
                v183 += **(_QWORD **)(*a2 + 24);
                v188 = (float *)((char *)v188 + v187);
                ++v182;
              }
              while (v182 < **(int **)*a1);
            }
          }
          else if (v25[6])
          {
            v966 = 0;
            v1595 = v85[19];
            v1641 = *(_QWORD *)(v26 + 152);
            v1549 = (int)v181;
            v967 = (float *)v25[19];
            do
            {
              v968 = *(_QWORD *)*a1;
              v969 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v968) >> 2;
              v970 = 0;
              v971 = (v969 - 1);
              if ((int)v969 - 1 >= 0)
              {
                v972 = *(_QWORD *)(*a1 + 24);
                v973 = v966;
                do
                {
                  v974 = ldiv(v973, *(int *)(v968 + 4 * v971));
                  v973 = v974.quot;
                  v970 += *(_QWORD *)(v972 + 8 * v971--) * v974.rem;
                }
                while (v971 != -1);
              }
              v975 = *(_QWORD *)*a2;
              v976 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v975) >> 2;
              v977 = 0;
              v978 = (v976 - 1);
              if ((int)v976 - 1 >= 0)
              {
                v979 = *(_QWORD *)(*a2 + 24);
                v980 = v966;
                do
                {
                  v981 = ldiv(v980, *(int *)(v975 + 4 * v978));
                  v980 = v981.quot;
                  v977 += *(_QWORD *)(v979 + 8 * v978--) * v981.rem;
                }
                while (v978 != -1);
              }
              vDSP_vadd((const float *)(v1641 + (int)v970), 1, (const float *)((char *)v1595 + (int)v977), 1, v967, 1, v1549);
              v967 = (float *)((char *)v967 + v1549);
              v966 += v1549;
            }
            while (v966 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_256:
          switch(v177)
          {
            case 1uLL:
              if (v25[6])
              {
                v189 = 0;
                v190 = 0;
                v191 = 0;
                v192 = *(_QWORD *)(v26 + 152);
                v193 = v85[19];
                v194 = v25[19];
                do
                {
                  *(_BYTE *)(v194 + v189) = *((_BYTE *)v193 + v190) + *(_BYTE *)(v192 + v191);
                  v191 += **(_QWORD **)(*a1 + 24);
                  v190 += **(_QWORD **)(*a2 + 24);
                  ++v189;
                }
                while (v189 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v384 = *v27;
              if (*v27)
              {
                v385 = 0;
                v386 = 0;
                v387 = 0;
                v388 = 0;
                v389 = *(_QWORD *)(v26 + 152);
                v390 = v85[19];
                v391 = v25[19];
                do
                {
                  if (v27[1])
                  {
                    v392 = 0;
                    do
                    {
                      *(_BYTE *)(v391 + v386 + v392) = *((_BYTE *)v390 + v387) + *(_BYTE *)(v389 + v388);
                      v26 = *a1;
                      v393 = *(_QWORD **)(*a1 + 24);
                      v394 = v393[1];
                      v388 += v394;
                      v85 = (int **)*a2;
                      v395 = *(int **)(*a2 + 24);
                      v396 = *((_QWORD *)v395 + 1);
                      v387 += v396;
                      ++v392;
                      v27 = *(int **)*a1;
                      v397 = v27[1];
                    }
                    while (v392 < v397);
                    v384 = *v27;
                    v86 = *v85;
                    v386 += v392;
                  }
                  else
                  {
                    v397 = 0;
                    v393 = *(_QWORD **)(v26 + 24);
                    v394 = v393[1];
                    v395 = v85[3];
                    v396 = *((_QWORD *)v395 + 1);
                  }
                  v388 = *v393 + v388 - v397 * v394;
                  v387 = *(_QWORD *)v395 + v387 - v396 * v86[1];
                  ++v385;
                }
                while (v385 < v384);
              }
              break;
            case 3uLL:
              v398 = *v27;
              if (*v27)
              {
                v399 = 0;
                v400 = 0;
                v401 = 0;
                v402 = 0;
                v403 = *(_QWORD *)(v26 + 152);
                v404 = v85[19];
                v405 = v25[19];
                do
                {
                  if (v27[1])
                  {
                    v406 = 0;
                    do
                    {
                      if (v27[2])
                      {
                        v407 = 0;
                        do
                        {
                          *(_BYTE *)(v405 + v400 + v407) = *((_BYTE *)v404 + v401) + *(_BYTE *)(v403 + v402);
                          v26 = *a1;
                          v408 = *(_QWORD **)(*a1 + 24);
                          v409 = v408[2];
                          v402 += v409;
                          v85 = (int **)*a2;
                          v410 = *(int **)(*a2 + 24);
                          v411 = *((_QWORD *)v410 + 2);
                          v401 += v411;
                          ++v407;
                          v27 = *(int **)*a1;
                          v412 = v27[2];
                        }
                        while (v407 < v412);
                        v86 = *v85;
                        v400 += v407;
                      }
                      else
                      {
                        v412 = 0;
                        v408 = *(_QWORD **)(v26 + 24);
                        v409 = v408[2];
                        v410 = v85[3];
                        v411 = *((_QWORD *)v410 + 2);
                      }
                      v413 = v408[1];
                      v402 = v413 + v402 - v412 * v409;
                      v401 = *((_QWORD *)v410 + 1) + v401 - v411 * v86[2];
                      ++v406;
                      v414 = v27[1];
                    }
                    while (v406 < v414);
                    v398 = *v27;
                  }
                  else
                  {
                    v414 = 0;
                    v408 = *(_QWORD **)(v26 + 24);
                    v413 = v408[1];
                  }
                  v402 = *v408 + v402 - v414 * v413;
                  v401 = *(_QWORD *)v85[3] + v401 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v399;
                }
                while (v399 < v398);
              }
              break;
            case 4uLL:
              v415 = *v27;
              if (*v27)
              {
                v416 = 0;
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = *(_QWORD *)(v26 + 152);
                v421 = v85[19];
                v422 = v25[19];
                do
                {
                  if (v27[1])
                  {
                    v423 = 0;
                    do
                    {
                      if (v27[2])
                      {
                        v424 = 0;
                        do
                        {
                          if (v27[3])
                          {
                            v425 = 0;
                            do
                            {
                              *(_BYTE *)(v422 + v417 + v425) = *((_BYTE *)v421 + v418) + *(_BYTE *)(v420 + v419);
                              v26 = *a1;
                              v426 = *(_QWORD **)(*a1 + 24);
                              v427 = v426[3];
                              v419 += v427;
                              v85 = (int **)*a2;
                              v428 = *(int **)(*a2 + 24);
                              v429 = *((_QWORD *)v428 + 3);
                              v418 += v429;
                              ++v425;
                              v27 = *(int **)*a1;
                              v430 = v27[3];
                            }
                            while (v425 < v430);
                            v86 = *v85;
                            v417 += v425;
                          }
                          else
                          {
                            v430 = 0;
                            v426 = *(_QWORD **)(v26 + 24);
                            v427 = v426[3];
                            v428 = v85[3];
                            v429 = *((_QWORD *)v428 + 3);
                          }
                          v431 = v426[2];
                          v419 = v431 + v419 - v430 * v427;
                          v418 = *((_QWORD *)v428 + 2) + v418 - v429 * v86[3];
                          ++v424;
                          v432 = v27[2];
                        }
                        while (v424 < v432);
                      }
                      else
                      {
                        v432 = 0;
                        v426 = *(_QWORD **)(v26 + 24);
                        v431 = v426[2];
                      }
                      v419 = v426[1] + v419 - v432 * v431;
                      v418 = *((_QWORD *)v85[3] + 1) + v418 - *((_QWORD *)v85[3] + 2) * v86[2];
                      ++v423;
                      v433 = v27[1];
                    }
                    while (v423 < v433);
                    v415 = *v27;
                  }
                  else
                  {
                    v433 = 0;
                  }
                  v419 = **(_QWORD **)(v26 + 24) + v419 - *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) * v433;
                  v418 = *(_QWORD *)v85[3] + v418 - *((_QWORD *)v85[3] + 1) * v86[1];
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            default:
              if (v25[6])
              {
                v368 = 0;
                v1585 = v85[19];
                v1631 = *(_QWORD *)(v26 + 152);
                v369 = v25[19];
                do
                {
                  v370 = *(_QWORD *)*a1;
                  v371 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v370) >> 2;
                  v372 = 0;
                  v373 = (v371 - 1);
                  if ((int)v371 - 1 >= 0)
                  {
                    v374 = *(_QWORD *)(*a1 + 24);
                    v375 = v368;
                    do
                    {
                      v376 = ldiv(v375, *(int *)(v370 + 4 * v373));
                      v375 = v376.quot;
                      v372 += *(_QWORD *)(v374 + 8 * v373--) * v376.rem;
                    }
                    while (v373 != -1);
                  }
                  v377 = *(_QWORD *)*a2;
                  v378 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v377) >> 2;
                  v379 = 0;
                  v380 = (v378 - 1);
                  if ((int)v378 - 1 >= 0)
                  {
                    v381 = *(_QWORD *)(*a2 + 24);
                    v382 = v368;
                    do
                    {
                      v383 = ldiv(v382, *(int *)(v377 + 4 * v380));
                      v382 = v383.quot;
                      v379 += *(_QWORD *)(v381 + 8 * v380--) * v383.rem;
                    }
                    while (v380 != -1);
                  }
                  *(_BYTE *)(v369 + v368++) = *((_BYTE *)v1585 + (int)v379) + *(_BYTE *)(v1631 + (int)v372);
                }
                while (v368 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          goto LABEL_10;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v33 = *(_QWORD **)a3;
          v34 = *a1;
          v35 = *(int **)*a1;
          v36 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v35) >> 2;
          v37 = (v36 - 1);
          if ((int)v37 >= -1)
            v38 = -1;
          else
            v38 = v36 - 1;
          v39 = v38 + 1;
          v40 = v36 + 1;
          break;
      }
      while (1)
      {
        v41 = v40 - 2;
        if (v40 - 2 < 0)
          break;
        --v40;
        if (*(_QWORD *)(*(_QWORD *)(v34 + 24) + 8 * v41) != *(_QWORD *)(v33[3] + 8 * v41))
          goto LABEL_83;
      }
      v40 = v39;
LABEL_83:
      v92 = (int **)*a2;
      v93 = *(int **)*a2;
      v94 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v93) >> 2;
      v95 = (v94 - 1);
      if ((int)v95 >= -1)
        v96 = -1;
      else
        v96 = v94 - 1;
      v97 = v96 + 1;
      v98 = v94 + 1;
      while (1)
      {
        v99 = v98 - 2;
        if (v98 - 2 < 0)
          break;
        --v98;
        if (*(_QWORD *)&v92[3][2 * v99] != *(_QWORD *)(v33[3] + 8 * v99))
          goto LABEL_132;
      }
      v98 = v97;
LABEL_132:
      v135 = v36 + 1;
      while (1)
      {
        v136 = v135 - 2;
        if (v135 - 2 < 0)
          break;
        --v135;
        if (*(_QWORD *)(*(_QWORD *)(v34 + 24) + 8 * v136))
          goto LABEL_167;
      }
      v135 = v39;
LABEL_167:
      v149 = v94 + 1;
      while (1)
      {
        v150 = v149 - 2;
        if (v149 - 2 < 0)
          break;
        --v149;
        if (*(_QWORD *)&v92[3][2 * v150])
          goto LABEL_262;
      }
      v149 = v97;
LABEL_262:
      v195 = (uint64_t)(v33[1] - *v33) >> 2;
      if (v40 <= v98)
        v196 = v98;
      else
        v196 = v40;
      if (v40 <= v149)
        v40 = v149;
      if (v135 > v98)
        v98 = v135;
      if (v195 > v98)
        v197 = 1;
      else
        v197 = 4;
      if (v195 <= v98)
        v98 = (uint64_t)(v33[1] - *v33) >> 2;
      if (v195 <= v40)
        v40 = v98;
      else
        v197 = 2;
      if (v195 <= v196)
      {
        v198 = v40;
      }
      else
      {
        v197 = 3;
        v198 = v196;
      }
      if (!v198)
        goto LABEL_291;
      v199 = *(_QWORD *)(v33[3] + 8 * (v198 - 1));
      if (v199 < 0x10)
        goto LABEL_291;
      switch(v197)
      {
        case 1:
          if (v198 == 2)
          {
            v1234 = *v35;
            if (*v35)
            {
              v1235 = 0;
              v1236 = 0;
              v1657 = *(_QWORD *)(v34 + 152);
              v1611 = v92[19];
              v1237 = (float *)v33[19];
              v1531 = 0;
              v1565 = (int)v199;
              v1238 = 4 * (int)v199;
              do
              {
                if (v35[1])
                {
                  v1239 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1611[v1235], 1, (const float *)(v1657 + 4 * v1236), v1237, 1, v1565);
                    v34 = *a1;
                    v1240 = *(_QWORD **)(*a1 + 24);
                    v1241 = v1240[1];
                    v1236 += v1241;
                    v92 = (int **)*a2;
                    v1242 = *(int **)(*a2 + 24);
                    v1243 = *((_QWORD *)v1242 + 1);
                    v1235 += v1243;
                    ++v1239;
                    v35 = *(int **)*a1;
                    v1244 = v35[1];
                    v1237 = (float *)((char *)v1237 + v1238);
                  }
                  while (v1239 < v1244);
                  v1234 = *v35;
                  v93 = *v92;
                }
                else
                {
                  v1244 = 0;
                  v1240 = *(_QWORD **)(v34 + 24);
                  v1241 = v1240[1];
                  v1242 = v92[3];
                  v1243 = *((_QWORD *)v1242 + 1);
                }
                v1236 = *v1240 + v1236 - v1244 * v1241;
                v1235 = *(_QWORD *)v1242 + v1235 - v1243 * v93[1];
                ++v1531;
              }
              while (v1531 < v1234);
            }
          }
          else if (v198 == 1)
          {
            if (*v35)
            {
              v847 = 0;
              v848 = 0;
              v849 = 0;
              v850 = *(_QWORD *)(v34 + 152);
              v851 = v92[19];
              v852 = (int)v199;
              v853 = 4 * (int)v199;
              v854 = (float *)v33[19];
              do
              {
                vDSP_vsadd((const float *)&v851[v848], 1, (const float *)(v850 + 4 * v849), v854, 1, v852);
                v849 += **(_QWORD **)(*a1 + 24);
                v848 += **(_QWORD **)(*a2 + 24);
                ++v847;
                v854 = (float *)((char *)v854 + v853);
              }
              while (v847 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            v1245 = 0;
            v1612 = v92[19];
            v1658 = *(_QWORD *)(v34 + 152);
            v1566 = (int)v199;
            v1246 = (float *)v33[19];
            do
            {
              v1247 = *(_QWORD *)*a1;
              v1248 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1247) >> 2;
              v1249 = 0;
              v1250 = (v1248 - 1);
              if ((int)v1248 - 1 >= 0)
              {
                v1251 = *(_QWORD *)(*a1 + 24);
                v1252 = v1245;
                do
                {
                  v1253 = ldiv(v1252, *(int *)(v1247 + 4 * v1250));
                  v1252 = v1253.quot;
                  v1249 += *(_QWORD *)(v1251 + 8 * v1250--) * v1253.rem;
                }
                while (v1250 != -1);
              }
              v1254 = *(_QWORD *)*a2;
              v1255 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1254) >> 2;
              v1256 = 0;
              v1257 = (v1255 - 1);
              if ((int)v1255 - 1 >= 0)
              {
                v1258 = *(_QWORD *)(*a2 + 24);
                v1259 = v1245;
                do
                {
                  v1260 = ldiv(v1259, *(int *)(v1254 + 4 * v1257));
                  v1259 = v1260.quot;
                  v1256 += *(_QWORD *)(v1258 + 8 * v1257--) * v1260.rem;
                }
                while (v1257 != -1);
              }
              vDSP_vsadd((const float *)&v1612[(int)v1256], 1, (const float *)(v1658 + 4 * (int)v1249), v1246, 1, v1566);
              v1246 += v1566;
              v1245 += v1566;
            }
            while (v1245 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v198 == 2)
          {
            v1261 = *v35;
            if (*v35)
            {
              v1262 = 0;
              v1263 = 0;
              v1659 = *(_QWORD *)(v34 + 152);
              v1613 = v92[19];
              v1264 = (float *)v33[19];
              v1532 = 0;
              v1567 = (int)v199;
              v1265 = 4 * (int)v199;
              do
              {
                if (v35[1])
                {
                  v1266 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1659 + 4 * v1263), 1, (const float *)&v1613[v1262], v1264, 1, v1567);
                    v34 = *a1;
                    v1267 = *(_QWORD **)(*a1 + 24);
                    v1268 = v1267[1];
                    v1263 += v1268;
                    v92 = (int **)*a2;
                    v1269 = *(int **)(*a2 + 24);
                    v1270 = *((_QWORD *)v1269 + 1);
                    v1262 += v1270;
                    ++v1266;
                    v35 = *(int **)*a1;
                    v1271 = v35[1];
                    v1264 = (float *)((char *)v1264 + v1265);
                  }
                  while (v1266 < v1271);
                  v1261 = *v35;
                  v93 = *v92;
                }
                else
                {
                  v1271 = 0;
                  v1267 = *(_QWORD **)(v34 + 24);
                  v1268 = v1267[1];
                  v1269 = v92[3];
                  v1270 = *((_QWORD *)v1269 + 1);
                }
                v1263 = *v1267 + v1263 - v1271 * v1268;
                v1262 = *(_QWORD *)v1269 + v1262 - v1270 * v93[1];
                ++v1532;
              }
              while (v1532 < v1261);
            }
          }
          else if (v198 == 1)
          {
            if (*v35)
            {
              v855 = 0;
              v856 = 0;
              v857 = 0;
              v858 = *(_QWORD *)(v34 + 152);
              v859 = v92[19];
              v860 = (int)v199;
              v861 = 4 * (int)v199;
              v862 = (float *)v33[19];
              do
              {
                vDSP_vsadd((const float *)(v858 + 4 * v857), 1, (const float *)&v859[v856], v862, 1, v860);
                v857 += **(_QWORD **)(*a1 + 24);
                v856 += **(_QWORD **)(*a2 + 24);
                ++v855;
                v862 = (float *)((char *)v862 + v861);
              }
              while (v855 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            v1272 = 0;
            v1614 = v92[19];
            v1660 = *(_QWORD *)(v34 + 152);
            v1568 = (int)v199;
            v1273 = (float *)v33[19];
            do
            {
              v1274 = *(_QWORD *)*a1;
              v1275 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1274) >> 2;
              v1276 = 0;
              v1277 = (v1275 - 1);
              if ((int)v1275 - 1 >= 0)
              {
                v1278 = *(_QWORD *)(*a1 + 24);
                v1279 = v1272;
                do
                {
                  v1280 = ldiv(v1279, *(int *)(v1274 + 4 * v1277));
                  v1279 = v1280.quot;
                  v1276 += *(_QWORD *)(v1278 + 8 * v1277--) * v1280.rem;
                }
                while (v1277 != -1);
              }
              v1281 = *(_QWORD *)*a2;
              v1282 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1281) >> 2;
              v1283 = 0;
              v1284 = (v1282 - 1);
              if ((int)v1282 - 1 >= 0)
              {
                v1285 = *(_QWORD *)(*a2 + 24);
                v1286 = v1272;
                do
                {
                  v1287 = ldiv(v1286, *(int *)(v1281 + 4 * v1284));
                  v1286 = v1287.quot;
                  v1283 += *(_QWORD *)(v1285 + 8 * v1284--) * v1287.rem;
                }
                while (v1284 != -1);
              }
              vDSP_vsadd((const float *)(v1660 + 4 * (int)v1276), 1, (const float *)&v1614[(int)v1283], v1273, 1, v1568);
              v1273 += v1568;
              v1272 += v1568;
            }
            while (v1272 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v198 == 2)
          {
            v982 = *v35;
            if (*v35)
            {
              v983 = 0;
              v984 = 0;
              v1642 = *(_QWORD *)(v34 + 152);
              v1596 = v92[19];
              v985 = (float *)v33[19];
              v1527 = 0;
              v1550 = (int)v199;
              v986 = 4 * (int)v199;
              do
              {
                if (v35[1])
                {
                  v987 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1642 + 4 * v984), 1, (const float *)&v1596[v983], 1, v985, 1, v1550);
                    v34 = *a1;
                    v988 = *(_QWORD **)(*a1 + 24);
                    v989 = v988[1];
                    v984 += v989;
                    v92 = (int **)*a2;
                    v990 = *(int **)(*a2 + 24);
                    v991 = *((_QWORD *)v990 + 1);
                    v983 += v991;
                    ++v987;
                    v35 = *(int **)*a1;
                    v992 = v35[1];
                    v985 = (float *)((char *)v985 + v986);
                  }
                  while (v987 < v992);
                  v982 = *v35;
                  v93 = *v92;
                }
                else
                {
                  v992 = 0;
                  v988 = *(_QWORD **)(v34 + 24);
                  v989 = v988[1];
                  v990 = v92[3];
                  v991 = *((_QWORD *)v990 + 1);
                }
                v984 = *v988 + v984 - v992 * v989;
                v983 = *(_QWORD *)v990 + v983 - v991 * v93[1];
                ++v1527;
              }
              while (v1527 < v982);
            }
          }
          else if (v198 == 1)
          {
            if (*v35)
            {
              v200 = 0;
              v201 = 0;
              v202 = 0;
              v203 = *(_QWORD *)(v34 + 152);
              v204 = v92[19];
              v205 = (int)v199;
              v206 = 4 * (int)v199;
              v207 = (float *)v33[19];
              do
              {
                vDSP_vadd((const float *)(v203 + 4 * v202), 1, (const float *)&v204[v201], 1, v207, 1, v205);
                v202 += **(_QWORD **)(*a1 + 24);
                v201 += **(_QWORD **)(*a2 + 24);
                ++v200;
                v207 = (float *)((char *)v207 + v206);
              }
              while (v200 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            v993 = 0;
            v1597 = v92[19];
            v1643 = *(_QWORD *)(v34 + 152);
            v1551 = (int)v199;
            v994 = (float *)v33[19];
            do
            {
              v995 = *(_QWORD *)*a1;
              v996 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v995) >> 2;
              v997 = 0;
              v998 = (v996 - 1);
              if ((int)v996 - 1 >= 0)
              {
                v999 = *(_QWORD *)(*a1 + 24);
                v1000 = v993;
                do
                {
                  v1001 = ldiv(v1000, *(int *)(v995 + 4 * v998));
                  v1000 = v1001.quot;
                  v997 += *(_QWORD *)(v999 + 8 * v998--) * v1001.rem;
                }
                while (v998 != -1);
              }
              v1002 = *(_QWORD *)*a2;
              v1003 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1002) >> 2;
              v1004 = 0;
              v1005 = (v1003 - 1);
              if ((int)v1003 - 1 >= 0)
              {
                v1006 = *(_QWORD *)(*a2 + 24);
                v1007 = v993;
                do
                {
                  v1008 = ldiv(v1007, *(int *)(v1002 + 4 * v1005));
                  v1007 = v1008.quot;
                  v1004 += *(_QWORD *)(v1006 + 8 * v1005--) * v1008.rem;
                }
                while (v1005 != -1);
              }
              vDSP_vadd((const float *)(v1643 + 4 * (int)v997), 1, (const float *)&v1597[(int)v1004], 1, v994, 1, v1551);
              v994 += v1551;
              v993 += v1551;
            }
            while (v993 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_291:
          switch(v195)
          {
            case 1uLL:
              v208 = v33[6];
              if (v208)
              {
                v209 = *(_DWORD **)(v34 + 152);
                v210 = v92[19];
                v211 = (_DWORD *)v33[19];
                v212 = 4 * *(_QWORD *)v92[3];
                v213 = 4 * **(_QWORD **)(v34 + 24);
                do
                {
                  *v211++ = *v210 + *v209;
                  v210 = (int *)((char *)v210 + v212);
                  v209 = (_DWORD *)((char *)v209 + v213);
                  --v208;
                }
                while (v208);
              }
              break;
            case 2uLL:
              v445 = *v35;
              if (*v35)
              {
                v446 = 0;
                v447 = 0;
                v448 = 0;
                v449 = 0;
                v450 = *(_QWORD *)(v34 + 152);
                v451 = v92[19];
                v452 = v33[19];
                v453 = *(uint64_t **)(v34 + 24);
                v454 = *v453;
                v455 = v453[1];
                v456 = v92[3];
                v458 = *(_QWORD *)v456;
                v457 = *((_QWORD *)v456 + 1);
                v459 = v35[1];
                do
                {
                  if (v459)
                  {
                    for (i = 0; i < v459; ++i)
                    {
                      *(_DWORD *)(v452 + 4 * v447 + 4 * i) = v451[v448] + *(_DWORD *)(v450 + 4 * v449);
                      v449 += v455;
                      v448 += v457;
                      v459 = v35[1];
                    }
                    v461 = v459;
                    v445 = *v35;
                    v447 += i;
                  }
                  else
                  {
                    v461 = 0;
                  }
                  v449 = v449 + v454 - v461 * v455;
                  v448 = v448 + v458 - v457 * v93[1];
                  ++v446;
                }
                while (v446 < v445);
              }
              break;
            case 3uLL:
              v462 = *v35;
              if (*v35)
              {
                v463 = 0;
                v464 = 0;
                v465 = 0;
                v466 = 0;
                v467 = *(_QWORD *)(v34 + 152);
                v468 = v92[19];
                v469 = v33[19];
                v470 = *(uint64_t **)(v34 + 24);
                v471 = *v470;
                v472 = v470[1];
                v473 = v92[3];
                v474 = *(_QWORD *)v473;
                v475 = *((_QWORD *)v473 + 1);
                v476 = v35[1];
                v477 = v476;
                do
                {
                  if (v477)
                  {
                    v478 = 0;
                    v479 = v470[2];
                    v480 = *((_QWORD *)v473 + 2);
                    v481 = v35[2];
                    do
                    {
                      if (v481)
                      {
                        for (j = 0; j < v481; ++j)
                        {
                          *(_DWORD *)(v469 + 4 * v464 + 4 * j) = v468[v465] + *(_DWORD *)(v467 + 4 * v466);
                          v466 += v479;
                          v465 += v480;
                          v481 = v35[2];
                        }
                        v483 = v481;
                        v476 = v35[1];
                        v464 += j;
                      }
                      else
                      {
                        v483 = 0;
                      }
                      v466 = v466 + v472 - v483 * v479;
                      v465 = v465 + v475 - v480 * v93[2];
                      ++v478;
                    }
                    while (v478 < v476);
                    v484 = v476;
                    v462 = *v35;
                    v477 = v476;
                  }
                  else
                  {
                    v484 = 0;
                  }
                  v466 = v466 + v471 - v484 * v472;
                  v465 = v465 + v474 - v475 * v93[1];
                  ++v463;
                }
                while (v463 < v462);
              }
              break;
            case 4uLL:
              v485 = *v35;
              if (*v35)
              {
                v486 = 0;
                v487 = 0;
                v488 = 0;
                v489 = 0;
                v490 = *(_QWORD *)(v34 + 152);
                v491 = v92[19];
                v492 = v33[19];
                v493 = *(uint64_t **)(v34 + 24);
                v494 = *v493;
                v495 = v493[1];
                v496 = v92[3];
                v497 = *(_QWORD *)v496;
                v498 = *((_QWORD *)v496 + 1);
                v499 = v35[1];
                v500 = v499;
                do
                {
                  if (v500)
                  {
                    v501 = 0;
                    v502 = v493[2];
                    v503 = *((_QWORD *)v496 + 2);
                    v504 = v35[2];
                    v505 = v504;
                    do
                    {
                      if (v505)
                      {
                        v506 = 0;
                        v507 = v493[3];
                        v508 = *((_QWORD *)v496 + 3);
                        v509 = v35[3];
                        do
                        {
                          if (v509)
                          {
                            for (k = 0; k < v509; ++k)
                            {
                              *(_DWORD *)(v492 + 4 * v487 + 4 * k) = v491[v488] + *(_DWORD *)(v490 + 4 * v489);
                              v489 += v507;
                              v488 += v508;
                              v509 = v35[3];
                            }
                            v511 = v509;
                            v504 = v35[2];
                            v487 += k;
                          }
                          else
                          {
                            v511 = 0;
                          }
                          v489 = v489 + v502 - v511 * v507;
                          v488 = v488 + v503 - v508 * v93[3];
                          ++v506;
                        }
                        while (v506 < v504);
                        v512 = v504;
                        v499 = v35[1];
                        v505 = v504;
                      }
                      else
                      {
                        v512 = 0;
                      }
                      v489 = v489 + v495 - v512 * v502;
                      v488 = v488 + v498 - v503 * v93[2];
                      ++v501;
                    }
                    while (v501 < v499);
                    v513 = v499;
                    v485 = *v35;
                    v500 = v499;
                  }
                  else
                  {
                    v513 = 0;
                  }
                  v489 = v489 + v494 - v513 * v495;
                  v488 = v488 + v497 - v498 * v93[1];
                  ++v486;
                }
                while (v486 < v485);
              }
              break;
            default:
              v1586 = v33[6];
              v1632 = v37;
              if (v1586)
              {
                v434 = 0;
                v1521 = v92[19];
                v1541 = *(_QWORD *)(v34 + 152);
                v1514 = v33[19];
                do
                {
                  v435 = v1632;
                  if ((v1632 & 0x80000000) != 0)
                  {
                    LODWORD(v436) = 0;
                  }
                  else
                  {
                    v436 = 0;
                    v437 = *(_QWORD *)(v34 + 24);
                    v438 = v434;
                    do
                    {
                      v439 = ldiv(v438, v35[v435]);
                      v438 = v439.quot;
                      v436 += *(_QWORD *)(v437 + 8 * v435--) * v439.rem;
                    }
                    while (v435 != -1);
                  }
                  v440 = 0;
                  if ((v95 & 0x80000000) == 0)
                  {
                    v441 = v92[3];
                    v442 = v95;
                    v443 = v434;
                    do
                    {
                      v444 = ldiv(v443, v93[v442]);
                      v443 = v444.quot;
                      v440 += *(_QWORD *)&v441[2 * v442--] * v444.rem;
                    }
                    while (v442 != -1);
                  }
                  *(_DWORD *)(v1514 + 4 * v434++) = v1521[(int)v440] + *(_DWORD *)(v1541 + 4 * (int)v436);
                }
                while (v434 != v1586);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v10)
      {
        case 0:
LABEL_7:
          v7 = **(_BYTE **)(*a2 + 152) + **(_BYTE **)(*a1 + 152);
LABEL_8:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v42 = *(_QWORD **)a3;
          v43 = *a1;
          v44 = *(int **)*a1;
          v45 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v44) >> 2;
          v46 = v45 - 1;
          if ((int)v45 - 1 >= -1)
            v46 = -1;
          v47 = v46 + 1;
          v48 = v45 + 1;
          break;
      }
      while (1)
      {
        v49 = v48 - 2;
        if (v48 - 2 < 0)
          break;
        --v48;
        if (*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8 * v49) != *(_QWORD *)(v42[3] + 8 * v49))
          goto LABEL_91;
      }
      v48 = v47;
LABEL_91:
      v100 = (int **)*a2;
      v101 = *(int **)*a2;
      v102 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v101) >> 2;
      v103 = v102 - 1;
      if ((int)v102 - 1 >= -1)
        v103 = -1;
      v104 = v103 + 1;
      v105 = v102 + 1;
      while (1)
      {
        v106 = v105 - 2;
        if (v105 - 2 < 0)
          break;
        --v105;
        if (*(_QWORD *)&v100[3][2 * v106] != *(_QWORD *)(v42[3] + 8 * v106))
          goto LABEL_137;
      }
      v105 = v104;
LABEL_137:
      v137 = v45 + 1;
      while (1)
      {
        v138 = v137 - 2;
        if (v137 - 2 < 0)
          break;
        --v137;
        if (*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8 * v138))
          goto LABEL_172;
      }
      v137 = v47;
LABEL_172:
      v151 = v102 + 1;
      while (1)
      {
        v152 = v151 - 2;
        if (v151 - 2 < 0)
          break;
        --v151;
        if (*(_QWORD *)&v100[3][2 * v152])
          goto LABEL_297;
      }
      v151 = v104;
LABEL_297:
      v214 = (uint64_t)(v42[1] - *v42) >> 2;
      if (v48 <= v105)
        v215 = v105;
      else
        v215 = v48;
      if (v48 <= v151)
        v48 = v151;
      if (v137 > v105)
        v105 = v137;
      if (v214 > v105)
        v216 = 1;
      else
        v216 = 4;
      if (v214 <= v105)
        v105 = (uint64_t)(v42[1] - *v42) >> 2;
      if (v214 <= v48)
        v48 = v105;
      else
        v216 = 2;
      if (v214 <= v215)
      {
        v217 = v48;
      }
      else
      {
        v216 = 3;
        v217 = v215;
      }
      if (!v217)
        goto LABEL_326;
      v218 = *(_QWORD *)(v42[3] + 8 * (v217 - 1));
      if (v218 < 0x10)
        goto LABEL_326;
      switch(v216)
      {
        case 1:
          if (v217 == 2)
          {
            v1288 = *v44;
            if (*v44)
            {
              v1289 = 0;
              v1290 = 0;
              v1291 = 0;
              v1292 = *(_QWORD *)(v43 + 152);
              v1293 = v100[19];
              v1294 = (int)v218;
              v1295 = (float *)v42[19];
              do
              {
                if (v44[1])
                {
                  v1296 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)((char *)v1293 + v1290), 1, (const float *)(v1292 + v1291), v1295, 1, v1294);
                    v43 = *a1;
                    v1297 = *(_QWORD **)(*a1 + 24);
                    v1298 = v1297[1];
                    v1291 += v1298;
                    v100 = (int **)*a2;
                    v1299 = *(int **)(*a2 + 24);
                    v1300 = *((_QWORD *)v1299 + 1);
                    v1290 += v1300;
                    v1295 = (float *)((char *)v1295 + v1294);
                    ++v1296;
                    v44 = *(int **)*a1;
                    v1301 = v44[1];
                  }
                  while (v1296 < v1301);
                  v1288 = *v44;
                  v101 = *v100;
                }
                else
                {
                  v1301 = 0;
                  v1297 = *(_QWORD **)(v43 + 24);
                  v1298 = v1297[1];
                  v1299 = v100[3];
                  v1300 = *((_QWORD *)v1299 + 1);
                }
                v1291 = *v1297 + v1291 - v1301 * v1298;
                v1290 = *(_QWORD *)v1299 + v1290 - v1300 * v101[1];
                ++v1289;
              }
              while (v1289 < v1288);
            }
          }
          else if (v217 == 1)
          {
            if (*v44)
            {
              v863 = 0;
              v864 = 0;
              v865 = 0;
              v866 = *(_QWORD *)(v43 + 152);
              v867 = v100[19];
              v868 = (int)v218;
              v869 = (float *)v42[19];
              do
              {
                vDSP_vsadd((const float *)((char *)v867 + v864), 1, (const float *)(v866 + v865), v869, 1, v868);
                v865 += **(_QWORD **)(*a1 + 24);
                v864 += **(_QWORD **)(*a2 + 24);
                v869 = (float *)((char *)v869 + v868);
                ++v863;
              }
              while (v863 < **(int **)*a1);
            }
          }
          else if (v42[6])
          {
            v1302 = 0;
            v1615 = v100[19];
            v1661 = *(_QWORD *)(v43 + 152);
            v1569 = (int)v218;
            v1303 = (float *)v42[19];
            do
            {
              v1304 = *(_QWORD *)*a1;
              v1305 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1304) >> 2;
              v1306 = 0;
              v1307 = (v1305 - 1);
              if ((int)v1305 - 1 >= 0)
              {
                v1308 = *(_QWORD *)(*a1 + 24);
                v1309 = v1302;
                do
                {
                  v1310 = ldiv(v1309, *(int *)(v1304 + 4 * v1307));
                  v1309 = v1310.quot;
                  v1306 += *(_QWORD *)(v1308 + 8 * v1307--) * v1310.rem;
                }
                while (v1307 != -1);
              }
              v1311 = *(_QWORD *)*a2;
              v1312 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1311) >> 2;
              v1313 = 0;
              v1314 = (v1312 - 1);
              if ((int)v1312 - 1 >= 0)
              {
                v1315 = *(_QWORD *)(*a2 + 24);
                v1316 = v1302;
                do
                {
                  v1317 = ldiv(v1316, *(int *)(v1311 + 4 * v1314));
                  v1316 = v1317.quot;
                  v1313 += *(_QWORD *)(v1315 + 8 * v1314--) * v1317.rem;
                }
                while (v1314 != -1);
              }
              vDSP_vsadd((const float *)((char *)v1615 + (int)v1313), 1, (const float *)(v1661 + (int)v1306), v1303, 1, v1569);
              v1303 = (float *)((char *)v1303 + v1569);
              v1302 += v1569;
            }
            while (v1302 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v217 == 2)
          {
            v1318 = *v44;
            if (*v44)
            {
              v1319 = 0;
              v1320 = 0;
              v1321 = 0;
              v1322 = *(_QWORD *)(v43 + 152);
              v1323 = v100[19];
              v1324 = (int)v218;
              v1325 = (float *)v42[19];
              do
              {
                if (v44[1])
                {
                  v1326 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1322 + v1321), 1, (const float *)((char *)v1323 + v1320), v1325, 1, v1324);
                    v43 = *a1;
                    v1327 = *(_QWORD **)(*a1 + 24);
                    v1328 = v1327[1];
                    v1321 += v1328;
                    v100 = (int **)*a2;
                    v1329 = *(int **)(*a2 + 24);
                    v1330 = *((_QWORD *)v1329 + 1);
                    v1320 += v1330;
                    v1325 = (float *)((char *)v1325 + v1324);
                    ++v1326;
                    v44 = *(int **)*a1;
                    v1331 = v44[1];
                  }
                  while (v1326 < v1331);
                  v1318 = *v44;
                  v101 = *v100;
                }
                else
                {
                  v1331 = 0;
                  v1327 = *(_QWORD **)(v43 + 24);
                  v1328 = v1327[1];
                  v1329 = v100[3];
                  v1330 = *((_QWORD *)v1329 + 1);
                }
                v1321 = *v1327 + v1321 - v1331 * v1328;
                v1320 = *(_QWORD *)v1329 + v1320 - v1330 * v101[1];
                ++v1319;
              }
              while (v1319 < v1318);
            }
          }
          else if (v217 == 1)
          {
            if (*v44)
            {
              v870 = 0;
              v871 = 0;
              v872 = 0;
              v873 = *(_QWORD *)(v43 + 152);
              v874 = v100[19];
              v875 = (int)v218;
              v876 = (float *)v42[19];
              do
              {
                vDSP_vsadd((const float *)(v873 + v872), 1, (const float *)((char *)v874 + v871), v876, 1, v875);
                v872 += **(_QWORD **)(*a1 + 24);
                v871 += **(_QWORD **)(*a2 + 24);
                v876 = (float *)((char *)v876 + v875);
                ++v870;
              }
              while (v870 < **(int **)*a1);
            }
          }
          else if (v42[6])
          {
            v1332 = 0;
            v1616 = v100[19];
            v1662 = *(_QWORD *)(v43 + 152);
            v1570 = (int)v218;
            v1333 = (float *)v42[19];
            do
            {
              v1334 = *(_QWORD *)*a1;
              v1335 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1334) >> 2;
              v1336 = 0;
              v1337 = (v1335 - 1);
              if ((int)v1335 - 1 >= 0)
              {
                v1338 = *(_QWORD *)(*a1 + 24);
                v1339 = v1332;
                do
                {
                  v1340 = ldiv(v1339, *(int *)(v1334 + 4 * v1337));
                  v1339 = v1340.quot;
                  v1336 += *(_QWORD *)(v1338 + 8 * v1337--) * v1340.rem;
                }
                while (v1337 != -1);
              }
              v1341 = *(_QWORD *)*a2;
              v1342 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1341) >> 2;
              v1343 = 0;
              v1344 = (v1342 - 1);
              if ((int)v1342 - 1 >= 0)
              {
                v1345 = *(_QWORD *)(*a2 + 24);
                v1346 = v1332;
                do
                {
                  v1347 = ldiv(v1346, *(int *)(v1341 + 4 * v1344));
                  v1346 = v1347.quot;
                  v1343 += *(_QWORD *)(v1345 + 8 * v1344--) * v1347.rem;
                }
                while (v1344 != -1);
              }
              vDSP_vsadd((const float *)(v1662 + (int)v1336), 1, (const float *)((char *)v1616 + (int)v1343), v1333, 1, v1570);
              v1333 = (float *)((char *)v1333 + v1570);
              v1332 += v1570;
            }
            while (v1332 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v217 == 2)
          {
            v1009 = *v44;
            if (*v44)
            {
              v1010 = 0;
              v1011 = 0;
              v1012 = 0;
              v1013 = *(_QWORD *)(v43 + 152);
              v1014 = v100[19];
              v1015 = (int)v218;
              v1016 = (float *)v42[19];
              do
              {
                if (v44[1])
                {
                  v1017 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1013 + v1012), 1, (const float *)((char *)v1014 + v1011), 1, v1016, 1, v1015);
                    v43 = *a1;
                    v1018 = *(_QWORD **)(*a1 + 24);
                    v1019 = v1018[1];
                    v1012 += v1019;
                    v100 = (int **)*a2;
                    v1020 = *(int **)(*a2 + 24);
                    v1021 = *((_QWORD *)v1020 + 1);
                    v1011 += v1021;
                    v1016 = (float *)((char *)v1016 + v1015);
                    ++v1017;
                    v44 = *(int **)*a1;
                    v1022 = v44[1];
                  }
                  while (v1017 < v1022);
                  v1009 = *v44;
                  v101 = *v100;
                }
                else
                {
                  v1022 = 0;
                  v1018 = *(_QWORD **)(v43 + 24);
                  v1019 = v1018[1];
                  v1020 = v100[3];
                  v1021 = *((_QWORD *)v1020 + 1);
                }
                v1012 = *v1018 + v1012 - v1022 * v1019;
                v1011 = *(_QWORD *)v1020 + v1011 - v1021 * v101[1];
                ++v1010;
              }
              while (v1010 < v1009);
            }
          }
          else if (v217 == 1)
          {
            if (*v44)
            {
              v219 = 0;
              v220 = 0;
              v221 = 0;
              v222 = *(_QWORD *)(v43 + 152);
              v223 = v100[19];
              v224 = (int)v218;
              v225 = (float *)v42[19];
              do
              {
                vDSP_vadd((const float *)(v222 + v221), 1, (const float *)((char *)v223 + v220), 1, v225, 1, v224);
                v221 += **(_QWORD **)(*a1 + 24);
                v220 += **(_QWORD **)(*a2 + 24);
                v225 = (float *)((char *)v225 + v224);
                ++v219;
              }
              while (v219 < **(int **)*a1);
            }
          }
          else if (v42[6])
          {
            v1023 = 0;
            v1598 = v100[19];
            v1644 = *(_QWORD *)(v43 + 152);
            v1552 = (int)v218;
            v1024 = (float *)v42[19];
            do
            {
              v1025 = *(_QWORD *)*a1;
              v1026 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1025) >> 2;
              v1027 = 0;
              v1028 = (v1026 - 1);
              if ((int)v1026 - 1 >= 0)
              {
                v1029 = *(_QWORD *)(*a1 + 24);
                v1030 = v1023;
                do
                {
                  v1031 = ldiv(v1030, *(int *)(v1025 + 4 * v1028));
                  v1030 = v1031.quot;
                  v1027 += *(_QWORD *)(v1029 + 8 * v1028--) * v1031.rem;
                }
                while (v1028 != -1);
              }
              v1032 = *(_QWORD *)*a2;
              v1033 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1032) >> 2;
              v1034 = 0;
              v1035 = (v1033 - 1);
              if ((int)v1033 - 1 >= 0)
              {
                v1036 = *(_QWORD *)(*a2 + 24);
                v1037 = v1023;
                do
                {
                  v1038 = ldiv(v1037, *(int *)(v1032 + 4 * v1035));
                  v1037 = v1038.quot;
                  v1034 += *(_QWORD *)(v1036 + 8 * v1035--) * v1038.rem;
                }
                while (v1035 != -1);
              }
              vDSP_vadd((const float *)(v1644 + (int)v1027), 1, (const float *)((char *)v1598 + (int)v1034), 1, v1024, 1, v1552);
              v1024 = (float *)((char *)v1024 + v1552);
              v1023 += v1552;
            }
            while (v1023 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_326:
          switch(v214)
          {
            case 1uLL:
              if (v42[6])
              {
                v226 = 0;
                v227 = 0;
                v228 = 0;
                v229 = *(_QWORD *)(v43 + 152);
                v230 = v100[19];
                v231 = v42[19];
                do
                {
                  *(_BYTE *)(v231 + v226) = *((_BYTE *)v230 + v227) + *(_BYTE *)(v229 + v228);
                  v228 += **(_QWORD **)(*a1 + 24);
                  v227 += **(_QWORD **)(*a2 + 24);
                  ++v226;
                }
                while (v226 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v530 = *v44;
              if (*v44)
              {
                v531 = 0;
                v532 = 0;
                v533 = 0;
                v534 = 0;
                v535 = *(_QWORD *)(v43 + 152);
                v536 = v100[19];
                v537 = v42[19];
                do
                {
                  if (v44[1])
                  {
                    v538 = 0;
                    do
                    {
                      *(_BYTE *)(v537 + v532 + v538) = *((_BYTE *)v536 + v533) + *(_BYTE *)(v535 + v534);
                      v43 = *a1;
                      v539 = *(_QWORD **)(*a1 + 24);
                      v540 = v539[1];
                      v534 += v540;
                      v100 = (int **)*a2;
                      v541 = *(int **)(*a2 + 24);
                      v542 = *((_QWORD *)v541 + 1);
                      v533 += v542;
                      ++v538;
                      v44 = *(int **)*a1;
                      v543 = v44[1];
                    }
                    while (v538 < v543);
                    v530 = *v44;
                    v101 = *v100;
                    v532 += v538;
                  }
                  else
                  {
                    v543 = 0;
                    v539 = *(_QWORD **)(v43 + 24);
                    v540 = v539[1];
                    v541 = v100[3];
                    v542 = *((_QWORD *)v541 + 1);
                  }
                  v534 = *v539 + v534 - v543 * v540;
                  v533 = *(_QWORD *)v541 + v533 - v542 * v101[1];
                  ++v531;
                }
                while (v531 < v530);
              }
              break;
            case 3uLL:
              v544 = *v44;
              if (*v44)
              {
                v545 = 0;
                v546 = 0;
                v547 = 0;
                v548 = 0;
                v549 = *(_QWORD *)(v43 + 152);
                v550 = v100[19];
                v551 = v42[19];
                do
                {
                  if (v44[1])
                  {
                    v552 = 0;
                    do
                    {
                      if (v44[2])
                      {
                        v553 = 0;
                        do
                        {
                          *(_BYTE *)(v551 + v546 + v553) = *((_BYTE *)v550 + v547) + *(_BYTE *)(v549 + v548);
                          v43 = *a1;
                          v554 = *(_QWORD **)(*a1 + 24);
                          v555 = v554[2];
                          v548 += v555;
                          v100 = (int **)*a2;
                          v556 = *(int **)(*a2 + 24);
                          v557 = *((_QWORD *)v556 + 2);
                          v547 += v557;
                          ++v553;
                          v44 = *(int **)*a1;
                          v558 = v44[2];
                        }
                        while (v553 < v558);
                        v101 = *v100;
                        v546 += v553;
                      }
                      else
                      {
                        v558 = 0;
                        v554 = *(_QWORD **)(v43 + 24);
                        v555 = v554[2];
                        v556 = v100[3];
                        v557 = *((_QWORD *)v556 + 2);
                      }
                      v559 = v554[1];
                      v548 = v559 + v548 - v558 * v555;
                      v547 = *((_QWORD *)v556 + 1) + v547 - v557 * v101[2];
                      ++v552;
                      v560 = v44[1];
                    }
                    while (v552 < v560);
                    v544 = *v44;
                  }
                  else
                  {
                    v560 = 0;
                    v554 = *(_QWORD **)(v43 + 24);
                    v559 = v554[1];
                  }
                  v548 = *v554 + v548 - v560 * v559;
                  v547 = *(_QWORD *)v100[3] + v547 - *((_QWORD *)v100[3] + 1) * v101[1];
                  ++v545;
                }
                while (v545 < v544);
              }
              break;
            case 4uLL:
              v561 = *v44;
              if (*v44)
              {
                v562 = 0;
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v566 = *(_QWORD *)(v43 + 152);
                v567 = v100[19];
                v568 = v42[19];
                do
                {
                  if (v44[1])
                  {
                    v569 = 0;
                    do
                    {
                      if (v44[2])
                      {
                        v570 = 0;
                        do
                        {
                          if (v44[3])
                          {
                            v571 = 0;
                            do
                            {
                              *(_BYTE *)(v568 + v563 + v571) = *((_BYTE *)v567 + v564) + *(_BYTE *)(v566 + v565);
                              v43 = *a1;
                              v572 = *(_QWORD **)(*a1 + 24);
                              v573 = v572[3];
                              v565 += v573;
                              v100 = (int **)*a2;
                              v574 = *(int **)(*a2 + 24);
                              v575 = *((_QWORD *)v574 + 3);
                              v564 += v575;
                              ++v571;
                              v44 = *(int **)*a1;
                              v576 = v44[3];
                            }
                            while (v571 < v576);
                            v101 = *v100;
                            v563 += v571;
                          }
                          else
                          {
                            v576 = 0;
                            v572 = *(_QWORD **)(v43 + 24);
                            v573 = v572[3];
                            v574 = v100[3];
                            v575 = *((_QWORD *)v574 + 3);
                          }
                          v577 = v572[2];
                          v565 = v577 + v565 - v576 * v573;
                          v564 = *((_QWORD *)v574 + 2) + v564 - v575 * v101[3];
                          ++v570;
                          v578 = v44[2];
                        }
                        while (v570 < v578);
                      }
                      else
                      {
                        v578 = 0;
                        v572 = *(_QWORD **)(v43 + 24);
                        v577 = v572[2];
                      }
                      v565 = v572[1] + v565 - v578 * v577;
                      v564 = *((_QWORD *)v100[3] + 1) + v564 - *((_QWORD *)v100[3] + 2) * v101[2];
                      ++v569;
                      v579 = v44[1];
                    }
                    while (v569 < v579);
                    v561 = *v44;
                  }
                  else
                  {
                    v579 = 0;
                  }
                  v565 = **(_QWORD **)(v43 + 24) + v565 - *(_QWORD *)(*(_QWORD *)(v43 + 24) + 8) * v579;
                  v564 = *(_QWORD *)v100[3] + v564 - *((_QWORD *)v100[3] + 1) * v101[1];
                  ++v562;
                }
                while (v562 < v561);
              }
              break;
            default:
              if (v42[6])
              {
                v514 = 0;
                v1587 = v100[19];
                v1633 = *(_QWORD *)(v43 + 152);
                v515 = v42[19];
                do
                {
                  v516 = *(_QWORD *)*a1;
                  v517 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v516) >> 2;
                  v518 = 0;
                  v519 = (v517 - 1);
                  if ((int)v517 - 1 >= 0)
                  {
                    v520 = *(_QWORD *)(*a1 + 24);
                    v521 = v514;
                    do
                    {
                      v522 = ldiv(v521, *(int *)(v516 + 4 * v519));
                      v521 = v522.quot;
                      v518 += *(_QWORD *)(v520 + 8 * v519--) * v522.rem;
                    }
                    while (v519 != -1);
                  }
                  v523 = *(_QWORD *)*a2;
                  v524 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v523) >> 2;
                  v525 = 0;
                  v526 = (v524 - 1);
                  if ((int)v524 - 1 >= 0)
                  {
                    v527 = *(_QWORD *)(*a2 + 24);
                    v528 = v514;
                    do
                    {
                      v529 = ldiv(v528, *(int *)(v523 + 4 * v526));
                      v528 = v529.quot;
                      v525 += *(_QWORD *)(v527 + 8 * v526--) * v529.rem;
                    }
                    while (v526 != -1);
                  }
                  *(_BYTE *)(v515 + v514++) = *((_BYTE *)v1587 + (int)v525) + *(_BYTE *)(v1633 + (int)v518);
                }
                while (v514 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v11)
      {
        case 0:
LABEL_10:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = **(_DWORD **)(*a2 + 152) + **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v50 = *(_QWORD **)a3;
          v51 = *a1;
          v52 = *(int **)*a1;
          v53 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v52) >> 2;
          v54 = (v53 - 1);
          if ((int)v54 >= -1)
            v55 = -1;
          else
            v55 = v53 - 1;
          v56 = v55 + 1;
          v57 = v53 + 1;
          break;
      }
      while (1)
      {
        v58 = v57 - 2;
        if (v57 - 2 < 0)
          break;
        --v57;
        if (*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8 * v58) != *(_QWORD *)(v50[3] + 8 * v58))
          goto LABEL_98;
      }
      v57 = v56;
LABEL_98:
      v107 = (int **)*a2;
      v108 = *(int **)*a2;
      v109 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v108) >> 2;
      v110 = (v109 - 1);
      if ((int)v110 >= -1)
        v111 = -1;
      else
        v111 = v109 - 1;
      v112 = v111 + 1;
      v113 = v109 + 1;
      while (1)
      {
        v114 = v113 - 2;
        if (v113 - 2 < 0)
          break;
        --v113;
        if (*(_QWORD *)&v107[3][2 * v114] != *(_QWORD *)(v50[3] + 8 * v114))
          goto LABEL_142;
      }
      v113 = v112;
LABEL_142:
      v139 = v53 + 1;
      while (1)
      {
        v140 = v139 - 2;
        if (v139 - 2 < 0)
          break;
        --v139;
        if (*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8 * v140))
          goto LABEL_177;
      }
      v139 = v56;
LABEL_177:
      v153 = v109 + 1;
      while (1)
      {
        v154 = v153 - 2;
        if (v153 - 2 < 0)
          break;
        --v153;
        if (*(_QWORD *)&v107[3][2 * v154])
          goto LABEL_332;
      }
      v153 = v112;
LABEL_332:
      v232 = (uint64_t)(v50[1] - *v50) >> 2;
      if (v57 <= v113)
        v233 = v113;
      else
        v233 = v57;
      if (v57 <= v153)
        v57 = v153;
      if (v139 > v113)
        v113 = v139;
      if (v232 > v113)
        v234 = 1;
      else
        v234 = 4;
      if (v232 <= v113)
        v113 = (uint64_t)(v50[1] - *v50) >> 2;
      if (v232 <= v57)
        v57 = v113;
      else
        v234 = 2;
      if (v232 <= v233)
      {
        v235 = v57;
      }
      else
      {
        v234 = 3;
        v235 = v233;
      }
      if (!v235)
        goto LABEL_361;
      v236 = *(_QWORD *)(v50[3] + 8 * (v235 - 1));
      if (v236 < 0x10)
        goto LABEL_361;
      switch(v234)
      {
        case 1:
          if (v235 == 2)
          {
            v1348 = *v52;
            if (*v52)
            {
              v1349 = 0;
              v1350 = 0;
              v1663 = *(_QWORD *)(v51 + 152);
              v1617 = v107[19];
              v1351 = (float *)v50[19];
              v1533 = 0;
              v1571 = (int)v236;
              v1352 = 4 * (int)v236;
              do
              {
                if (v52[1])
                {
                  v1353 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1617[v1349], 1, (const float *)(v1663 + 4 * v1350), v1351, 1, v1571);
                    v51 = *a1;
                    v1354 = *(_QWORD **)(*a1 + 24);
                    v1355 = v1354[1];
                    v1350 += v1355;
                    v107 = (int **)*a2;
                    v1356 = *(int **)(*a2 + 24);
                    v1357 = *((_QWORD *)v1356 + 1);
                    v1349 += v1357;
                    ++v1353;
                    v52 = *(int **)*a1;
                    v1358 = v52[1];
                    v1351 = (float *)((char *)v1351 + v1352);
                  }
                  while (v1353 < v1358);
                  v1348 = *v52;
                  v108 = *v107;
                }
                else
                {
                  v1358 = 0;
                  v1354 = *(_QWORD **)(v51 + 24);
                  v1355 = v1354[1];
                  v1356 = v107[3];
                  v1357 = *((_QWORD *)v1356 + 1);
                }
                v1350 = *v1354 + v1350 - v1358 * v1355;
                v1349 = *(_QWORD *)v1356 + v1349 - v1357 * v108[1];
                ++v1533;
              }
              while (v1533 < v1348);
            }
          }
          else if (v235 == 1)
          {
            if (*v52)
            {
              v877 = 0;
              v878 = 0;
              v879 = 0;
              v880 = *(_QWORD *)(v51 + 152);
              v881 = v107[19];
              v882 = (int)v236;
              v883 = 4 * (int)v236;
              v884 = (float *)v50[19];
              do
              {
                vDSP_vsadd((const float *)&v881[v878], 1, (const float *)(v880 + 4 * v879), v884, 1, v882);
                v879 += **(_QWORD **)(*a1 + 24);
                v878 += **(_QWORD **)(*a2 + 24);
                ++v877;
                v884 = (float *)((char *)v884 + v883);
              }
              while (v877 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            v1359 = 0;
            v1618 = v107[19];
            v1664 = *(_QWORD *)(v51 + 152);
            v1572 = (int)v236;
            v1360 = (float *)v50[19];
            do
            {
              v1361 = *(_QWORD *)*a1;
              v1362 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1361) >> 2;
              v1363 = 0;
              v1364 = (v1362 - 1);
              if ((int)v1362 - 1 >= 0)
              {
                v1365 = *(_QWORD *)(*a1 + 24);
                v1366 = v1359;
                do
                {
                  v1367 = ldiv(v1366, *(int *)(v1361 + 4 * v1364));
                  v1366 = v1367.quot;
                  v1363 += *(_QWORD *)(v1365 + 8 * v1364--) * v1367.rem;
                }
                while (v1364 != -1);
              }
              v1368 = *(_QWORD *)*a2;
              v1369 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1368) >> 2;
              v1370 = 0;
              v1371 = (v1369 - 1);
              if ((int)v1369 - 1 >= 0)
              {
                v1372 = *(_QWORD *)(*a2 + 24);
                v1373 = v1359;
                do
                {
                  v1374 = ldiv(v1373, *(int *)(v1368 + 4 * v1371));
                  v1373 = v1374.quot;
                  v1370 += *(_QWORD *)(v1372 + 8 * v1371--) * v1374.rem;
                }
                while (v1371 != -1);
              }
              vDSP_vsadd((const float *)&v1618[(int)v1370], 1, (const float *)(v1664 + 4 * (int)v1363), v1360, 1, v1572);
              v1360 += v1572;
              v1359 += v1572;
            }
            while (v1359 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v235 == 2)
          {
            v1375 = *v52;
            if (*v52)
            {
              v1376 = 0;
              v1377 = 0;
              v1665 = *(_QWORD *)(v51 + 152);
              v1619 = v107[19];
              v1378 = (float *)v50[19];
              v1534 = 0;
              v1573 = (int)v236;
              v1379 = 4 * (int)v236;
              do
              {
                if (v52[1])
                {
                  v1380 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1665 + 4 * v1377), 1, (const float *)&v1619[v1376], v1378, 1, v1573);
                    v51 = *a1;
                    v1381 = *(_QWORD **)(*a1 + 24);
                    v1382 = v1381[1];
                    v1377 += v1382;
                    v107 = (int **)*a2;
                    v1383 = *(int **)(*a2 + 24);
                    v1384 = *((_QWORD *)v1383 + 1);
                    v1376 += v1384;
                    ++v1380;
                    v52 = *(int **)*a1;
                    v1385 = v52[1];
                    v1378 = (float *)((char *)v1378 + v1379);
                  }
                  while (v1380 < v1385);
                  v1375 = *v52;
                  v108 = *v107;
                }
                else
                {
                  v1385 = 0;
                  v1381 = *(_QWORD **)(v51 + 24);
                  v1382 = v1381[1];
                  v1383 = v107[3];
                  v1384 = *((_QWORD *)v1383 + 1);
                }
                v1377 = *v1381 + v1377 - v1385 * v1382;
                v1376 = *(_QWORD *)v1383 + v1376 - v1384 * v108[1];
                ++v1534;
              }
              while (v1534 < v1375);
            }
          }
          else if (v235 == 1)
          {
            if (*v52)
            {
              v885 = 0;
              v886 = 0;
              v887 = 0;
              v888 = *(_QWORD *)(v51 + 152);
              v889 = v107[19];
              v890 = (int)v236;
              v891 = 4 * (int)v236;
              v892 = (float *)v50[19];
              do
              {
                vDSP_vsadd((const float *)(v888 + 4 * v887), 1, (const float *)&v889[v886], v892, 1, v890);
                v887 += **(_QWORD **)(*a1 + 24);
                v886 += **(_QWORD **)(*a2 + 24);
                ++v885;
                v892 = (float *)((char *)v892 + v891);
              }
              while (v885 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            v1386 = 0;
            v1620 = v107[19];
            v1666 = *(_QWORD *)(v51 + 152);
            v1574 = (int)v236;
            v1387 = (float *)v50[19];
            do
            {
              v1388 = *(_QWORD *)*a1;
              v1389 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1388) >> 2;
              v1390 = 0;
              v1391 = (v1389 - 1);
              if ((int)v1389 - 1 >= 0)
              {
                v1392 = *(_QWORD *)(*a1 + 24);
                v1393 = v1386;
                do
                {
                  v1394 = ldiv(v1393, *(int *)(v1388 + 4 * v1391));
                  v1393 = v1394.quot;
                  v1390 += *(_QWORD *)(v1392 + 8 * v1391--) * v1394.rem;
                }
                while (v1391 != -1);
              }
              v1395 = *(_QWORD *)*a2;
              v1396 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1395) >> 2;
              v1397 = 0;
              v1398 = (v1396 - 1);
              if ((int)v1396 - 1 >= 0)
              {
                v1399 = *(_QWORD *)(*a2 + 24);
                v1400 = v1386;
                do
                {
                  v1401 = ldiv(v1400, *(int *)(v1395 + 4 * v1398));
                  v1400 = v1401.quot;
                  v1397 += *(_QWORD *)(v1399 + 8 * v1398--) * v1401.rem;
                }
                while (v1398 != -1);
              }
              vDSP_vsadd((const float *)(v1666 + 4 * (int)v1390), 1, (const float *)&v1620[(int)v1397], v1387, 1, v1574);
              v1387 += v1574;
              v1386 += v1574;
            }
            while (v1386 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v235 == 2)
          {
            v1039 = *v52;
            if (*v52)
            {
              v1040 = 0;
              v1041 = 0;
              v1645 = *(_QWORD *)(v51 + 152);
              v1599 = v107[19];
              v1042 = (float *)v50[19];
              v1528 = 0;
              v1553 = (int)v236;
              v1043 = 4 * (int)v236;
              do
              {
                if (v52[1])
                {
                  v1044 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1645 + 4 * v1041), 1, (const float *)&v1599[v1040], 1, v1042, 1, v1553);
                    v51 = *a1;
                    v1045 = *(_QWORD **)(*a1 + 24);
                    v1046 = v1045[1];
                    v1041 += v1046;
                    v107 = (int **)*a2;
                    v1047 = *(int **)(*a2 + 24);
                    v1048 = *((_QWORD *)v1047 + 1);
                    v1040 += v1048;
                    ++v1044;
                    v52 = *(int **)*a1;
                    v1049 = v52[1];
                    v1042 = (float *)((char *)v1042 + v1043);
                  }
                  while (v1044 < v1049);
                  v1039 = *v52;
                  v108 = *v107;
                }
                else
                {
                  v1049 = 0;
                  v1045 = *(_QWORD **)(v51 + 24);
                  v1046 = v1045[1];
                  v1047 = v107[3];
                  v1048 = *((_QWORD *)v1047 + 1);
                }
                v1041 = *v1045 + v1041 - v1049 * v1046;
                v1040 = *(_QWORD *)v1047 + v1040 - v1048 * v108[1];
                ++v1528;
              }
              while (v1528 < v1039);
            }
          }
          else if (v235 == 1)
          {
            if (*v52)
            {
              v237 = 0;
              v238 = 0;
              v239 = 0;
              v240 = *(_QWORD *)(v51 + 152);
              v241 = v107[19];
              v242 = (int)v236;
              v243 = 4 * (int)v236;
              v244 = (float *)v50[19];
              do
              {
                vDSP_vadd((const float *)(v240 + 4 * v239), 1, (const float *)&v241[v238], 1, v244, 1, v242);
                v239 += **(_QWORD **)(*a1 + 24);
                v238 += **(_QWORD **)(*a2 + 24);
                ++v237;
                v244 = (float *)((char *)v244 + v243);
              }
              while (v237 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            v1050 = 0;
            v1600 = v107[19];
            v1646 = *(_QWORD *)(v51 + 152);
            v1554 = (int)v236;
            v1051 = (float *)v50[19];
            do
            {
              v1052 = *(_QWORD *)*a1;
              v1053 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1052) >> 2;
              v1054 = 0;
              v1055 = (v1053 - 1);
              if ((int)v1053 - 1 >= 0)
              {
                v1056 = *(_QWORD *)(*a1 + 24);
                v1057 = v1050;
                do
                {
                  v1058 = ldiv(v1057, *(int *)(v1052 + 4 * v1055));
                  v1057 = v1058.quot;
                  v1054 += *(_QWORD *)(v1056 + 8 * v1055--) * v1058.rem;
                }
                while (v1055 != -1);
              }
              v1059 = *(_QWORD *)*a2;
              v1060 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1059) >> 2;
              v1061 = 0;
              v1062 = (v1060 - 1);
              if ((int)v1060 - 1 >= 0)
              {
                v1063 = *(_QWORD *)(*a2 + 24);
                v1064 = v1050;
                do
                {
                  v1065 = ldiv(v1064, *(int *)(v1059 + 4 * v1062));
                  v1064 = v1065.quot;
                  v1061 += *(_QWORD *)(v1063 + 8 * v1062--) * v1065.rem;
                }
                while (v1062 != -1);
              }
              vDSP_vadd((const float *)(v1646 + 4 * (int)v1054), 1, (const float *)&v1600[(int)v1061], 1, v1051, 1, v1554);
              v1051 += v1554;
              v1050 += v1554;
            }
            while (v1050 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_361:
          switch(v232)
          {
            case 1uLL:
              v245 = v50[6];
              if (v245)
              {
                v246 = *(_DWORD **)(v51 + 152);
                v247 = v107[19];
                v248 = (_DWORD *)v50[19];
                v249 = 4 * *(_QWORD *)v107[3];
                v250 = 4 * **(_QWORD **)(v51 + 24);
                do
                {
                  *v248++ = *v247 + *v246;
                  v247 = (int *)((char *)v247 + v249);
                  v246 = (_DWORD *)((char *)v246 + v250);
                  --v245;
                }
                while (v245);
              }
              break;
            case 2uLL:
              v591 = *v52;
              if (*v52)
              {
                v592 = 0;
                v593 = 0;
                v594 = 0;
                v595 = 0;
                v596 = *(_QWORD *)(v51 + 152);
                v597 = v107[19];
                v598 = v50[19];
                v599 = *(uint64_t **)(v51 + 24);
                v600 = *v599;
                v601 = v599[1];
                v602 = v107[3];
                v604 = *(_QWORD *)v602;
                v603 = *((_QWORD *)v602 + 1);
                v605 = v52[1];
                do
                {
                  if (v605)
                  {
                    for (m = 0; m < v605; ++m)
                    {
                      *(_DWORD *)(v598 + 4 * v593 + 4 * m) = v597[v594] + *(_DWORD *)(v596 + 4 * v595);
                      v595 += v601;
                      v594 += v603;
                      v605 = v52[1];
                    }
                    v607 = v605;
                    v591 = *v52;
                    v593 += m;
                  }
                  else
                  {
                    v607 = 0;
                  }
                  v595 = v595 + v600 - v607 * v601;
                  v594 = v594 + v604 - v603 * v108[1];
                  ++v592;
                }
                while (v592 < v591);
              }
              break;
            case 3uLL:
              v608 = *v52;
              if (*v52)
              {
                v609 = 0;
                v610 = 0;
                v611 = 0;
                v612 = 0;
                v613 = *(_QWORD *)(v51 + 152);
                v614 = v107[19];
                v615 = v50[19];
                v616 = *(uint64_t **)(v51 + 24);
                v617 = *v616;
                v618 = v616[1];
                v619 = v107[3];
                v620 = *(_QWORD *)v619;
                v621 = *((_QWORD *)v619 + 1);
                v622 = v52[1];
                v623 = v622;
                do
                {
                  if (v623)
                  {
                    v624 = 0;
                    v625 = v616[2];
                    v626 = *((_QWORD *)v619 + 2);
                    v627 = v52[2];
                    do
                    {
                      if (v627)
                      {
                        for (n = 0; n < v627; ++n)
                        {
                          *(_DWORD *)(v615 + 4 * v610 + 4 * n) = v614[v611] + *(_DWORD *)(v613 + 4 * v612);
                          v612 += v625;
                          v611 += v626;
                          v627 = v52[2];
                        }
                        v629 = v627;
                        v622 = v52[1];
                        v610 += n;
                      }
                      else
                      {
                        v629 = 0;
                      }
                      v612 = v612 + v618 - v629 * v625;
                      v611 = v611 + v621 - v626 * v108[2];
                      ++v624;
                    }
                    while (v624 < v622);
                    v630 = v622;
                    v608 = *v52;
                    v623 = v622;
                  }
                  else
                  {
                    v630 = 0;
                  }
                  v612 = v612 + v617 - v630 * v618;
                  v611 = v611 + v620 - v621 * v108[1];
                  ++v609;
                }
                while (v609 < v608);
              }
              break;
            case 4uLL:
              v631 = *v52;
              if (*v52)
              {
                v632 = 0;
                v633 = 0;
                v634 = 0;
                v635 = 0;
                v636 = *(_QWORD *)(v51 + 152);
                v637 = v107[19];
                v638 = v50[19];
                v639 = *(uint64_t **)(v51 + 24);
                v640 = *v639;
                v641 = v639[1];
                v642 = v107[3];
                v643 = *(_QWORD *)v642;
                v644 = *((_QWORD *)v642 + 1);
                v645 = v52[1];
                v646 = v645;
                do
                {
                  if (v646)
                  {
                    v647 = 0;
                    v648 = v639[2];
                    v649 = *((_QWORD *)v642 + 2);
                    v650 = v52[2];
                    v651 = v650;
                    do
                    {
                      if (v651)
                      {
                        v652 = 0;
                        v653 = v639[3];
                        v654 = *((_QWORD *)v642 + 3);
                        v655 = v52[3];
                        do
                        {
                          if (v655)
                          {
                            for (ii = 0; ii < v655; ++ii)
                            {
                              *(_DWORD *)(v638 + 4 * v633 + 4 * ii) = v637[v634] + *(_DWORD *)(v636 + 4 * v635);
                              v635 += v653;
                              v634 += v654;
                              v655 = v52[3];
                            }
                            v657 = v655;
                            v650 = v52[2];
                            v633 += ii;
                          }
                          else
                          {
                            v657 = 0;
                          }
                          v635 = v635 + v648 - v657 * v653;
                          v634 = v634 + v649 - v654 * v108[3];
                          ++v652;
                        }
                        while (v652 < v650);
                        v658 = v650;
                        v645 = v52[1];
                        v651 = v650;
                      }
                      else
                      {
                        v658 = 0;
                      }
                      v635 = v635 + v641 - v658 * v648;
                      v634 = v634 + v644 - v649 * v108[2];
                      ++v647;
                    }
                    while (v647 < v645);
                    v659 = v645;
                    v631 = *v52;
                    v646 = v645;
                  }
                  else
                  {
                    v659 = 0;
                  }
                  v635 = v635 + v640 - v659 * v641;
                  v634 = v634 + v643 - v644 * v108[1];
                  ++v632;
                }
                while (v632 < v631);
              }
              break;
            default:
              v1588 = v50[6];
              v1634 = v54;
              if (v1588)
              {
                v580 = 0;
                v1522 = v107[19];
                v1542 = *(_QWORD *)(v51 + 152);
                v1515 = v50[19];
                do
                {
                  v581 = v1634;
                  if ((v1634 & 0x80000000) != 0)
                  {
                    LODWORD(v582) = 0;
                  }
                  else
                  {
                    v582 = 0;
                    v583 = *(_QWORD *)(v51 + 24);
                    v584 = v580;
                    do
                    {
                      v585 = ldiv(v584, v52[v581]);
                      v584 = v585.quot;
                      v582 += *(_QWORD *)(v583 + 8 * v581--) * v585.rem;
                    }
                    while (v581 != -1);
                  }
                  v586 = 0;
                  if ((v110 & 0x80000000) == 0)
                  {
                    v587 = v107[3];
                    v588 = v110;
                    v589 = v580;
                    do
                    {
                      v590 = ldiv(v589, v108[v588]);
                      v589 = v590.quot;
                      v586 += *(_QWORD *)&v587[2 * v588--] * v590.rem;
                    }
                    while (v588 != -1);
                  }
                  *(_DWORD *)(v1515 + 4 * v580++) = v1522[(int)v586] + *(_DWORD *)(v1542 + 4 * (int)v582);
                }
                while (v580 != v1588);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v12)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = **(_QWORD **)(*a2 + 152) + **(_QWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_19;
        default:
          v59 = *(_QWORD **)a3;
          v60 = *a1;
          v61 = *(int **)*a1;
          v62 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v61) >> 2;
          v63 = (v62 - 1);
          if ((int)v63 >= -1)
            v64 = -1;
          else
            v64 = v62 - 1;
          v65 = v64 + 1;
          v66 = v62 + 1;
          break;
      }
      while (1)
      {
        v67 = v66 - 2;
        if (v66 - 2 < 0)
          break;
        --v66;
        if (*(_QWORD *)(*(_QWORD *)(v60 + 24) + 8 * v67) != *(_QWORD *)(v59[3] + 8 * v67))
          goto LABEL_106;
      }
      v66 = v65;
LABEL_106:
      v115 = (int **)*a2;
      v116 = *(int **)*a2;
      v117 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v116) >> 2;
      v118 = (v117 - 1);
      if ((int)v118 >= -1)
        v119 = -1;
      else
        v119 = v117 - 1;
      v120 = v119 + 1;
      v121 = v117 + 1;
      while (1)
      {
        v122 = v121 - 2;
        if (v121 - 2 < 0)
          break;
        --v121;
        if (*(_QWORD *)&v115[3][2 * v122] != *(_QWORD *)(v59[3] + 8 * v122))
          goto LABEL_147;
      }
      v121 = v120;
LABEL_147:
      v141 = v62 + 1;
      while (1)
      {
        v142 = v141 - 2;
        if (v141 - 2 < 0)
          break;
        --v141;
        if (*(_QWORD *)(*(_QWORD *)(v60 + 24) + 8 * v142))
          goto LABEL_182;
      }
      v141 = v65;
LABEL_182:
      v155 = v117 + 1;
      while (1)
      {
        v156 = v155 - 2;
        if (v155 - 2 < 0)
          break;
        --v155;
        if (*(_QWORD *)&v115[3][2 * v156])
          goto LABEL_367;
      }
      v155 = v120;
LABEL_367:
      v251 = (uint64_t)(v59[1] - *v59) >> 2;
      if (v66 <= v121)
        v252 = v121;
      else
        v252 = v66;
      if (v66 <= v155)
        v66 = v155;
      if (v141 > v121)
        v121 = v141;
      if (v251 > v121)
        v253 = 1;
      else
        v253 = 4;
      if (v251 <= v121)
        v121 = (uint64_t)(v59[1] - *v59) >> 2;
      if (v251 <= v66)
        v66 = v121;
      else
        v253 = 2;
      if (v251 <= v252)
      {
        v254 = v66;
      }
      else
      {
        v253 = 3;
        v254 = v252;
      }
      if (!v254)
        goto LABEL_396;
      v255 = *(_QWORD *)(v59[3] + 8 * (v254 - 1));
      if (v255 < 0x10)
        goto LABEL_396;
      switch(v253)
      {
        case 1:
          if (v254 == 2)
          {
            v1402 = *v61;
            if (*v61)
            {
              v1403 = 0;
              v1404 = 0;
              v1667 = *(_QWORD *)(v60 + 152);
              v1621 = v115[19];
              v1405 = (float *)v59[19];
              v1535 = 0;
              v1575 = (int)v255;
              v1406 = 8 * (int)v255;
              do
              {
                if (v61[1])
                {
                  v1407 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1621[2 * v1403], 1, (const float *)(v1667 + 8 * v1404), v1405, 1, v1575);
                    v60 = *a1;
                    v1408 = *(_QWORD **)(*a1 + 24);
                    v1409 = v1408[1];
                    v1404 += v1409;
                    v115 = (int **)*a2;
                    v1410 = *(int **)(*a2 + 24);
                    v1411 = *((_QWORD *)v1410 + 1);
                    v1403 += v1411;
                    ++v1407;
                    v61 = *(int **)*a1;
                    v1412 = v61[1];
                    v1405 = (float *)((char *)v1405 + v1406);
                  }
                  while (v1407 < v1412);
                  v1402 = *v61;
                  v116 = *v115;
                }
                else
                {
                  v1412 = 0;
                  v1408 = *(_QWORD **)(v60 + 24);
                  v1409 = v1408[1];
                  v1410 = v115[3];
                  v1411 = *((_QWORD *)v1410 + 1);
                }
                v1404 = *v1408 + v1404 - v1412 * v1409;
                v1403 = *(_QWORD *)v1410 + v1403 - v1411 * v116[1];
                ++v1535;
              }
              while (v1535 < v1402);
            }
          }
          else if (v254 == 1)
          {
            if (*v61)
            {
              v893 = 0;
              v894 = 0;
              v895 = 0;
              v896 = *(_QWORD *)(v60 + 152);
              v897 = v115[19];
              v898 = (int)v255;
              v899 = 8 * (int)v255;
              v900 = (float *)v59[19];
              do
              {
                vDSP_vsadd((const float *)&v897[2 * v894], 1, (const float *)(v896 + 8 * v895), v900, 1, v898);
                v895 += **(_QWORD **)(*a1 + 24);
                v894 += **(_QWORD **)(*a2 + 24);
                ++v893;
                v900 = (float *)((char *)v900 + v899);
              }
              while (v893 < **(int **)*a1);
            }
          }
          else if (v59[6])
          {
            v1413 = 0;
            v1622 = v115[19];
            v1668 = *(_QWORD *)(v60 + 152);
            v1576 = (int)v255;
            v1414 = (float *)v59[19];
            do
            {
              v1415 = *(_QWORD *)*a1;
              v1416 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1415) >> 2;
              v1417 = 0;
              v1418 = (v1416 - 1);
              if ((int)v1416 - 1 >= 0)
              {
                v1419 = *(_QWORD *)(*a1 + 24);
                v1420 = v1413;
                do
                {
                  v1421 = ldiv(v1420, *(int *)(v1415 + 4 * v1418));
                  v1420 = v1421.quot;
                  v1417 += *(_QWORD *)(v1419 + 8 * v1418--) * v1421.rem;
                }
                while (v1418 != -1);
              }
              v1422 = *(_QWORD *)*a2;
              v1423 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1422) >> 2;
              v1424 = 0;
              v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                v1426 = *(_QWORD *)(*a2 + 24);
                v1427 = v1413;
                do
                {
                  v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  v1427 = v1428.quot;
                  v1424 += *(_QWORD *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              vDSP_vsadd((const float *)&v1622[2 * (int)v1424], 1, (const float *)(v1668 + 8 * (int)v1417), v1414, 1, v1576);
              v1414 += 2 * v1576;
              v1413 += v1576;
            }
            while (v1413 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v254 == 2)
          {
            v1429 = *v61;
            if (*v61)
            {
              v1430 = 0;
              v1431 = 0;
              v1669 = *(_QWORD *)(v60 + 152);
              v1623 = v115[19];
              v1432 = (float *)v59[19];
              v1536 = 0;
              v1577 = (int)v255;
              v1433 = 8 * (int)v255;
              do
              {
                if (v61[1])
                {
                  v1434 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1669 + 8 * v1431), 1, (const float *)&v1623[2 * v1430], v1432, 1, v1577);
                    v60 = *a1;
                    v1435 = *(_QWORD **)(*a1 + 24);
                    v1436 = v1435[1];
                    v1431 += v1436;
                    v115 = (int **)*a2;
                    v1437 = *(int **)(*a2 + 24);
                    v1438 = *((_QWORD *)v1437 + 1);
                    v1430 += v1438;
                    ++v1434;
                    v61 = *(int **)*a1;
                    v1439 = v61[1];
                    v1432 = (float *)((char *)v1432 + v1433);
                  }
                  while (v1434 < v1439);
                  v1429 = *v61;
                  v116 = *v115;
                }
                else
                {
                  v1439 = 0;
                  v1435 = *(_QWORD **)(v60 + 24);
                  v1436 = v1435[1];
                  v1437 = v115[3];
                  v1438 = *((_QWORD *)v1437 + 1);
                }
                v1431 = *v1435 + v1431 - v1439 * v1436;
                v1430 = *(_QWORD *)v1437 + v1430 - v1438 * v116[1];
                ++v1536;
              }
              while (v1536 < v1429);
            }
          }
          else if (v254 == 1)
          {
            if (*v61)
            {
              v901 = 0;
              v902 = 0;
              v903 = 0;
              v904 = *(_QWORD *)(v60 + 152);
              v905 = v115[19];
              v906 = (int)v255;
              v907 = 8 * (int)v255;
              v908 = (float *)v59[19];
              do
              {
                vDSP_vsadd((const float *)(v904 + 8 * v903), 1, (const float *)&v905[2 * v902], v908, 1, v906);
                v903 += **(_QWORD **)(*a1 + 24);
                v902 += **(_QWORD **)(*a2 + 24);
                ++v901;
                v908 = (float *)((char *)v908 + v907);
              }
              while (v901 < **(int **)*a1);
            }
          }
          else if (v59[6])
          {
            v1440 = 0;
            v1624 = v115[19];
            v1670 = *(_QWORD *)(v60 + 152);
            v1578 = (int)v255;
            v1441 = (float *)v59[19];
            do
            {
              v1442 = *(_QWORD *)*a1;
              v1443 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1442) >> 2;
              v1444 = 0;
              v1445 = (v1443 - 1);
              if ((int)v1443 - 1 >= 0)
              {
                v1446 = *(_QWORD *)(*a1 + 24);
                v1447 = v1440;
                do
                {
                  v1448 = ldiv(v1447, *(int *)(v1442 + 4 * v1445));
                  v1447 = v1448.quot;
                  v1444 += *(_QWORD *)(v1446 + 8 * v1445--) * v1448.rem;
                }
                while (v1445 != -1);
              }
              v1449 = *(_QWORD *)*a2;
              v1450 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1449) >> 2;
              v1451 = 0;
              v1452 = (v1450 - 1);
              if ((int)v1450 - 1 >= 0)
              {
                v1453 = *(_QWORD *)(*a2 + 24);
                v1454 = v1440;
                do
                {
                  v1455 = ldiv(v1454, *(int *)(v1449 + 4 * v1452));
                  v1454 = v1455.quot;
                  v1451 += *(_QWORD *)(v1453 + 8 * v1452--) * v1455.rem;
                }
                while (v1452 != -1);
              }
              vDSP_vsadd((const float *)(v1670 + 8 * (int)v1444), 1, (const float *)&v1624[2 * (int)v1451], v1441, 1, v1578);
              v1441 += 2 * v1578;
              v1440 += v1578;
            }
            while (v1440 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v254 == 2)
          {
            v1066 = *v61;
            if (*v61)
            {
              v1067 = 0;
              v1068 = 0;
              v1647 = *(_QWORD *)(v60 + 152);
              v1601 = v115[19];
              v1069 = (float *)v59[19];
              v1529 = 0;
              v1555 = (int)v255;
              v1070 = 8 * (int)v255;
              do
              {
                if (v61[1])
                {
                  v1071 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1647 + 8 * v1068), 1, (const float *)&v1601[2 * v1067], 1, v1069, 1, v1555);
                    v60 = *a1;
                    v1072 = *(_QWORD **)(*a1 + 24);
                    v1073 = v1072[1];
                    v1068 += v1073;
                    v115 = (int **)*a2;
                    v1074 = *(int **)(*a2 + 24);
                    v1075 = *((_QWORD *)v1074 + 1);
                    v1067 += v1075;
                    ++v1071;
                    v61 = *(int **)*a1;
                    v1076 = v61[1];
                    v1069 = (float *)((char *)v1069 + v1070);
                  }
                  while (v1071 < v1076);
                  v1066 = *v61;
                  v116 = *v115;
                }
                else
                {
                  v1076 = 0;
                  v1072 = *(_QWORD **)(v60 + 24);
                  v1073 = v1072[1];
                  v1074 = v115[3];
                  v1075 = *((_QWORD *)v1074 + 1);
                }
                v1068 = *v1072 + v1068 - v1076 * v1073;
                v1067 = *(_QWORD *)v1074 + v1067 - v1075 * v116[1];
                ++v1529;
              }
              while (v1529 < v1066);
            }
          }
          else if (v254 == 1)
          {
            if (*v61)
            {
              v256 = 0;
              v257 = 0;
              v258 = 0;
              v259 = *(_QWORD *)(v60 + 152);
              v260 = v115[19];
              v261 = (int)v255;
              v262 = 8 * (int)v255;
              v263 = (float *)v59[19];
              do
              {
                vDSP_vadd((const float *)(v259 + 8 * v258), 1, (const float *)&v260[2 * v257], 1, v263, 1, v261);
                v258 += **(_QWORD **)(*a1 + 24);
                v257 += **(_QWORD **)(*a2 + 24);
                ++v256;
                v263 = (float *)((char *)v263 + v262);
              }
              while (v256 < **(int **)*a1);
            }
          }
          else if (v59[6])
          {
            v1077 = 0;
            v1602 = v115[19];
            v1648 = *(_QWORD *)(v60 + 152);
            v1556 = (int)v255;
            v1078 = (float *)v59[19];
            do
            {
              v1079 = *(_QWORD *)*a1;
              v1080 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1079) >> 2;
              v1081 = 0;
              v1082 = (v1080 - 1);
              if ((int)v1080 - 1 >= 0)
              {
                v1083 = *(_QWORD *)(*a1 + 24);
                v1084 = v1077;
                do
                {
                  v1085 = ldiv(v1084, *(int *)(v1079 + 4 * v1082));
                  v1084 = v1085.quot;
                  v1081 += *(_QWORD *)(v1083 + 8 * v1082--) * v1085.rem;
                }
                while (v1082 != -1);
              }
              v1086 = *(_QWORD *)*a2;
              v1087 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1086) >> 2;
              v1088 = 0;
              v1089 = (v1087 - 1);
              if ((int)v1087 - 1 >= 0)
              {
                v1090 = *(_QWORD *)(*a2 + 24);
                v1091 = v1077;
                do
                {
                  v1092 = ldiv(v1091, *(int *)(v1086 + 4 * v1089));
                  v1091 = v1092.quot;
                  v1088 += *(_QWORD *)(v1090 + 8 * v1089--) * v1092.rem;
                }
                while (v1089 != -1);
              }
              vDSP_vadd((const float *)(v1648 + 8 * (int)v1081), 1, (const float *)&v1602[2 * (int)v1088], 1, v1078, 1, v1556);
              v1078 += 2 * v1556;
              v1077 += v1556;
            }
            while (v1077 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_396:
          switch(v251)
          {
            case 1uLL:
              v264 = v59[6];
              if (v264)
              {
                v265 = *(_QWORD **)(v60 + 152);
                v266 = v115[19];
                v267 = (_QWORD *)v59[19];
                v268 = 8 * *(_QWORD *)v115[3];
                v269 = 8 * **(_QWORD **)(v60 + 24);
                do
                {
                  *v267++ = *(_QWORD *)v266 + *v265;
                  v266 = (int *)((char *)v266 + v268);
                  v265 = (_QWORD *)((char *)v265 + v269);
                  --v264;
                }
                while (v264);
              }
              break;
            case 2uLL:
              v671 = *v61;
              if ((_DWORD)v671)
              {
                v672 = 0;
                v673 = 0;
                v674 = 0;
                v675 = 0;
                v676 = *(_QWORD *)(v60 + 152);
                v677 = v115[19];
                v678 = v59[19];
                v679 = v61[1];
                v680 = *(uint64_t **)(v60 + 24);
                v681 = *v680;
                v682 = v680[1];
                v683 = v115[3];
                v684 = *(_QWORD *)v683;
                v685 = *((_QWORD *)v683 + 1);
                v686 = v684 - v685 * v116[1];
                if (v679 <= 1)
                  v687 = 1;
                else
                  v687 = v61[1];
                v688 = v681 - v682 * v679;
                do
                {
                  if ((_DWORD)v679)
                  {
                    v689 = v673 + v687;
                    v690 = (_QWORD *)(v678 + 8 * v673);
                    v691 = v687;
                    do
                    {
                      *v690++ = *(_QWORD *)&v677[2 * v674] + *(_QWORD *)(v676 + 8 * v675);
                      v675 += v682;
                      v674 += v685;
                      --v691;
                    }
                    while (v691);
                    v673 = v689;
                  }
                  v675 += v688;
                  v674 += v686;
                  ++v672;
                }
                while (v672 != v671);
              }
              break;
            case 3uLL:
              v692 = *v61;
              if ((_DWORD)v692)
              {
                v693 = 0;
                v694 = 0;
                v695 = 0;
                v696 = 0;
                v697 = *(_QWORD *)(v60 + 152);
                v698 = v115[19];
                v699 = v59[19];
                v700 = v61[1];
                v701 = *(_QWORD **)(v60 + 24);
                v702 = v701[1];
                v703 = v115[3];
                v704 = *((_QWORD *)v703 + 1);
                v705 = *(_QWORD *)v703 - v704 * v116[1];
                if (v700 <= 1)
                  v706 = 1;
                else
                  v706 = v61[1];
                v707 = *v701 - v702 * v700;
                do
                {
                  if ((_DWORD)v700)
                  {
                    v708 = 0;
                    v709 = v61[2];
                    v710 = v701[2];
                    v711 = *((_QWORD *)v703 + 2);
                    if (v709 <= 1)
                      v712 = 1;
                    else
                      v712 = v61[2];
                    v713 = v704 - v711 * v116[2];
                    do
                    {
                      v714 = v712;
                      if ((_DWORD)v709)
                      {
                        do
                        {
                          *(_QWORD *)(v699 + 8 * v694++) = *(_QWORD *)&v698[2 * v695] + *(_QWORD *)(v697 + 8 * v696);
                          v696 += v710;
                          v695 += v711;
                          --v714;
                        }
                        while (v714);
                      }
                      v696 += v702 - v710 * v709;
                      v695 += v713;
                      ++v708;
                    }
                    while (v708 != v706);
                  }
                  v696 += v707;
                  v695 += v705;
                  ++v693;
                }
                while (v693 != v692);
              }
              break;
            case 4uLL:
              v1636 = *v61;
              if ((_DWORD)v1636)
              {
                v715 = 0;
                v716 = 0;
                v717 = 0;
                v718 = 0;
                v719 = *(_QWORD *)(v60 + 152);
                v720 = v115[19];
                v721 = v59[19];
                v722 = v61[1];
                v723 = *(_QWORD **)(v60 + 24);
                v724 = v115[3];
                v1511 = *((_QWORD *)v724 + 1);
                v1517 = v723[1];
                v1544 = *(_QWORD *)v724 - v1511 * v116[1];
                v1590 = v61[1];
                if (v722 <= 1)
                  v725 = 1;
                else
                  v725 = v61[1];
                v1524 = *v723 - v723[1] * v722;
                do
                {
                  if (v1590)
                  {
                    v726 = 0;
                    v727 = v61[2];
                    v728 = v723[2];
                    v729 = *((_QWORD *)v724 + 2);
                    if (v727 <= 1)
                      v730 = 1;
                    else
                      v730 = v61[2];
                    v731 = v1511 - v729 * v116[2];
                    do
                    {
                      if ((_DWORD)v727)
                      {
                        v732 = 0;
                        v733 = v61[3];
                        v734 = v723[3];
                        v735 = *((_QWORD *)v724 + 3);
                        if (v733 <= 1)
                          v736 = 1;
                        else
                          v736 = v61[3];
                        v737 = v729 - v735 * v116[3];
                        do
                        {
                          v738 = v736;
                          if ((_DWORD)v733)
                          {
                            do
                            {
                              *(_QWORD *)(v721 + 8 * v716++) = *(_QWORD *)&v720[2 * v717] + *(_QWORD *)(v719 + 8 * v718);
                              v718 += v734;
                              v717 += v735;
                              --v738;
                            }
                            while (v738);
                          }
                          v718 += v728 - v734 * v733;
                          v717 += v737;
                          ++v732;
                        }
                        while (v732 != v730);
                      }
                      v718 += v1517 - v728 * v727;
                      v717 += v731;
                      ++v726;
                    }
                    while (v726 != v725);
                  }
                  v718 += v1524;
                  v717 += v1544;
                  ++v715;
                }
                while (v715 != v1636);
              }
              break;
            default:
              v1589 = v59[6];
              v1635 = v63;
              if (v1589)
              {
                v660 = 0;
                v1523 = v115[19];
                v1543 = *(_QWORD *)(v60 + 152);
                v1516 = v59[19];
                do
                {
                  v661 = v1635;
                  if ((v1635 & 0x80000000) != 0)
                  {
                    LODWORD(v662) = 0;
                  }
                  else
                  {
                    v662 = 0;
                    v663 = *(_QWORD *)(v60 + 24);
                    v664 = v660;
                    do
                    {
                      v665 = ldiv(v664, v61[v661]);
                      v664 = v665.quot;
                      v662 += *(_QWORD *)(v663 + 8 * v661--) * v665.rem;
                    }
                    while (v661 != -1);
                  }
                  v666 = 0;
                  if ((v118 & 0x80000000) == 0)
                  {
                    v667 = v115[3];
                    v668 = v118;
                    v669 = v660;
                    do
                    {
                      v670 = ldiv(v669, v116[v668]);
                      v669 = v670.quot;
                      v666 += *(_QWORD *)&v667[2 * v668--] * v670.rem;
                    }
                    while (v668 != -1);
                  }
                  *(_QWORD *)(v1516 + 8 * v660++) = *(_QWORD *)&v1523[2 * (int)v666]
                                                  + *(_QWORD *)(v1543 + 8 * (int)v662);
                }
                while (v660 != v1589);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v13)
      {
        case 0:
          **(float **)(*(_QWORD *)a3 + 152) = **(float **)(*a1 + 152) + **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_16:
          v14 = *(const float **)(*a1 + 152);
          v15 = *a2;
          goto LABEL_18;
        case 2:
LABEL_17:
          v15 = *a1;
          v14 = *(const float **)(*a2 + 152);
LABEL_18:
          vDSP_vsadd(*(const float **)(v15 + 152), 1, v14, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(v15 + 160));
          return;
        case 3:
LABEL_19:
          vDSP_vadd(*(const float **)(*a1 + 152), 1, *(const float **)(*a2 + 152), 1, *(float **)(*(_QWORD *)a3 + 152), 1, *(_QWORD *)(*(_QWORD *)a3 + 48));
          return;
        default:
          v68 = *(_QWORD **)a3;
          v69 = *a1;
          v70 = *(int **)*a1;
          v71 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v70) >> 2;
          v72 = (v71 - 1);
          if ((int)v72 >= -1)
            v73 = -1;
          else
            v73 = v71 - 1;
          v74 = v73 + 1;
          v75 = v71 + 1;
          break;
      }
      while (1)
      {
        v76 = v75 - 2;
        if (v75 - 2 < 0)
          break;
        --v75;
        if (*(_QWORD *)(*(_QWORD *)(v69 + 24) + 8 * v76) != *(_QWORD *)(v68[3] + 8 * v76))
          goto LABEL_114;
      }
      v75 = v74;
LABEL_114:
      v123 = (int **)*a2;
      v124 = *(int **)*a2;
      v125 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v124) >> 2;
      v126 = (v125 - 1);
      if ((int)v126 >= -1)
        v127 = -1;
      else
        v127 = v125 - 1;
      v128 = v127 + 1;
      v129 = v125 + 1;
      while (1)
      {
        v130 = v129 - 2;
        if (v129 - 2 < 0)
          break;
        --v129;
        if (*(_QWORD *)&v123[3][2 * v130] != *(_QWORD *)(v68[3] + 8 * v130))
          goto LABEL_152;
      }
      v129 = v128;
LABEL_152:
      v143 = v71 + 1;
      while (1)
      {
        v144 = v143 - 2;
        if (v143 - 2 < 0)
          break;
        --v143;
        if (*(_QWORD *)(*(_QWORD *)(v69 + 24) + 8 * v144))
          goto LABEL_187;
      }
      v143 = v74;
LABEL_187:
      v157 = v125 + 1;
      while (1)
      {
        v158 = v157 - 2;
        if (v157 - 2 < 0)
          break;
        --v157;
        if (*(_QWORD *)&v123[3][2 * v158])
          goto LABEL_402;
      }
      v157 = v128;
LABEL_402:
      v270 = (uint64_t)(v68[1] - *v68) >> 2;
      if (v75 <= v129)
        v271 = v129;
      else
        v271 = v75;
      if (v75 <= v157)
        v75 = v157;
      if (v143 > v129)
        v129 = v143;
      if (v270 > v129)
        v272 = 1;
      else
        v272 = 4;
      if (v270 <= v129)
        v129 = (uint64_t)(v68[1] - *v68) >> 2;
      if (v270 <= v75)
        v75 = v129;
      else
        v272 = 2;
      if (v270 <= v271)
      {
        v273 = v75;
      }
      else
      {
        v272 = 3;
        v273 = v271;
      }
      if (!v273)
        goto LABEL_431;
      v274 = *(_QWORD *)(v68[3] + 8 * (v273 - 1));
      if (v274 < 0x10)
        goto LABEL_431;
      switch(v272)
      {
        case 1:
          if (v273 == 2)
          {
            v1456 = *v70;
            if (*v70)
            {
              v1457 = 0;
              v1458 = 0;
              v1671 = *(_QWORD *)(v69 + 152);
              v1625 = v123[19];
              v1459 = (float *)v68[19];
              v1537 = 0;
              v1579 = (int)v274;
              v1460 = 4 * (int)v274;
              do
              {
                if (v70[1])
                {
                  v1461 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1625[v1457], 1, (const float *)(v1671 + 4 * v1458), v1459, 1, v1579);
                    v69 = *a1;
                    v1462 = *(_QWORD **)(*a1 + 24);
                    v1463 = v1462[1];
                    v1458 += v1463;
                    v123 = (int **)*a2;
                    v1464 = *(int **)(*a2 + 24);
                    v1465 = *((_QWORD *)v1464 + 1);
                    v1457 += v1465;
                    ++v1461;
                    v70 = *(int **)*a1;
                    v1466 = v70[1];
                    v1459 = (float *)((char *)v1459 + v1460);
                  }
                  while (v1461 < v1466);
                  v1456 = *v70;
                  v124 = *v123;
                }
                else
                {
                  v1466 = 0;
                  v1462 = *(_QWORD **)(v69 + 24);
                  v1463 = v1462[1];
                  v1464 = v123[3];
                  v1465 = *((_QWORD *)v1464 + 1);
                }
                v1458 = *v1462 + v1458 - v1466 * v1463;
                v1457 = *(_QWORD *)v1464 + v1457 - v1465 * v124[1];
                ++v1537;
              }
              while (v1537 < v1456);
            }
          }
          else if (v273 == 1)
          {
            if (*v70)
            {
              v909 = 0;
              v910 = 0;
              v911 = 0;
              v912 = *(_QWORD *)(v69 + 152);
              v913 = v123[19];
              v914 = (int)v274;
              v915 = 4 * (int)v274;
              v916 = (float *)v68[19];
              do
              {
                vDSP_vsadd((const float *)&v913[v910], 1, (const float *)(v912 + 4 * v911), v916, 1, v914);
                v911 += **(_QWORD **)(*a1 + 24);
                v910 += **(_QWORD **)(*a2 + 24);
                ++v909;
                v916 = (float *)((char *)v916 + v915);
              }
              while (v909 < **(int **)*a1);
            }
          }
          else if (v68[6])
          {
            v1467 = 0;
            v1626 = v123[19];
            v1672 = *(_QWORD *)(v69 + 152);
            v1580 = (int)v274;
            v1468 = (float *)v68[19];
            do
            {
              v1469 = *(_QWORD *)*a1;
              v1470 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1469) >> 2;
              v1471 = 0;
              v1472 = (v1470 - 1);
              if ((int)v1470 - 1 >= 0)
              {
                v1473 = *(_QWORD *)(*a1 + 24);
                v1474 = v1467;
                do
                {
                  v1475 = ldiv(v1474, *(int *)(v1469 + 4 * v1472));
                  v1474 = v1475.quot;
                  v1471 += *(_QWORD *)(v1473 + 8 * v1472--) * v1475.rem;
                }
                while (v1472 != -1);
              }
              v1476 = *(_QWORD *)*a2;
              v1477 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1476) >> 2;
              v1478 = 0;
              v1479 = (v1477 - 1);
              if ((int)v1477 - 1 >= 0)
              {
                v1480 = *(_QWORD *)(*a2 + 24);
                v1481 = v1467;
                do
                {
                  v1482 = ldiv(v1481, *(int *)(v1476 + 4 * v1479));
                  v1481 = v1482.quot;
                  v1478 += *(_QWORD *)(v1480 + 8 * v1479--) * v1482.rem;
                }
                while (v1479 != -1);
              }
              vDSP_vsadd((const float *)&v1626[(int)v1478], 1, (const float *)(v1672 + 4 * (int)v1471), v1468, 1, v1580);
              v1468 += v1580;
              v1467 += v1580;
            }
            while (v1467 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 2:
          if (v273 == 2)
          {
            v1483 = *v70;
            if (*v70)
            {
              v1484 = 0;
              v1485 = 0;
              v1673 = *(_QWORD *)(v69 + 152);
              v1627 = v123[19];
              v1486 = (float *)v68[19];
              v1538 = 0;
              v1581 = (int)v274;
              v1487 = 4 * (int)v274;
              do
              {
                if (v70[1])
                {
                  v1488 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1673 + 4 * v1485), 1, (const float *)&v1627[v1484], v1486, 1, v1581);
                    v69 = *a1;
                    v1489 = *(_QWORD **)(*a1 + 24);
                    v1490 = v1489[1];
                    v1485 += v1490;
                    v123 = (int **)*a2;
                    v1491 = *(int **)(*a2 + 24);
                    v1492 = *((_QWORD *)v1491 + 1);
                    v1484 += v1492;
                    ++v1488;
                    v70 = *(int **)*a1;
                    v1493 = v70[1];
                    v1486 = (float *)((char *)v1486 + v1487);
                  }
                  while (v1488 < v1493);
                  v1483 = *v70;
                  v124 = *v123;
                }
                else
                {
                  v1493 = 0;
                  v1489 = *(_QWORD **)(v69 + 24);
                  v1490 = v1489[1];
                  v1491 = v123[3];
                  v1492 = *((_QWORD *)v1491 + 1);
                }
                v1485 = *v1489 + v1485 - v1493 * v1490;
                v1484 = *(_QWORD *)v1491 + v1484 - v1492 * v124[1];
                ++v1538;
              }
              while (v1538 < v1483);
            }
          }
          else if (v273 == 1)
          {
            if (*v70)
            {
              v917 = 0;
              v918 = 0;
              v919 = 0;
              v920 = *(_QWORD *)(v69 + 152);
              v921 = v123[19];
              v922 = (int)v274;
              v923 = 4 * (int)v274;
              v924 = (float *)v68[19];
              do
              {
                vDSP_vsadd((const float *)(v920 + 4 * v919), 1, (const float *)&v921[v918], v924, 1, v922);
                v919 += **(_QWORD **)(*a1 + 24);
                v918 += **(_QWORD **)(*a2 + 24);
                ++v917;
                v924 = (float *)((char *)v924 + v923);
              }
              while (v917 < **(int **)*a1);
            }
          }
          else if (v68[6])
          {
            v1494 = 0;
            v1628 = v123[19];
            v1674 = *(_QWORD *)(v69 + 152);
            v1582 = (int)v274;
            v1495 = (float *)v68[19];
            do
            {
              v1496 = *(_QWORD *)*a1;
              v1497 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1496) >> 2;
              v1498 = 0;
              v1499 = (v1497 - 1);
              if ((int)v1497 - 1 >= 0)
              {
                v1500 = *(_QWORD *)(*a1 + 24);
                v1501 = v1494;
                do
                {
                  v1502 = ldiv(v1501, *(int *)(v1496 + 4 * v1499));
                  v1501 = v1502.quot;
                  v1498 += *(_QWORD *)(v1500 + 8 * v1499--) * v1502.rem;
                }
                while (v1499 != -1);
              }
              v1503 = *(_QWORD *)*a2;
              v1504 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1503) >> 2;
              v1505 = 0;
              v1506 = (v1504 - 1);
              if ((int)v1504 - 1 >= 0)
              {
                v1507 = *(_QWORD *)(*a2 + 24);
                v1508 = v1494;
                do
                {
                  v1509 = ldiv(v1508, *(int *)(v1503 + 4 * v1506));
                  v1508 = v1509.quot;
                  v1505 += *(_QWORD *)(v1507 + 8 * v1506--) * v1509.rem;
                }
                while (v1506 != -1);
              }
              vDSP_vsadd((const float *)(v1674 + 4 * (int)v1498), 1, (const float *)&v1628[(int)v1505], v1495, 1, v1582);
              v1495 += v1582;
              v1494 += v1582;
            }
            while (v1494 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        case 3:
          if (v273 == 2)
          {
            v1093 = *v70;
            if (*v70)
            {
              v1094 = 0;
              v1095 = 0;
              v1649 = *(_QWORD *)(v69 + 152);
              v1603 = v123[19];
              v1096 = (float *)v68[19];
              v1530 = 0;
              v1557 = (int)v274;
              v1097 = 4 * (int)v274;
              do
              {
                if (v70[1])
                {
                  v1098 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1649 + 4 * v1095), 1, (const float *)&v1603[v1094], 1, v1096, 1, v1557);
                    v69 = *a1;
                    v1099 = *(_QWORD **)(*a1 + 24);
                    v1100 = v1099[1];
                    v1095 += v1100;
                    v123 = (int **)*a2;
                    v1101 = *(int **)(*a2 + 24);
                    v1102 = *((_QWORD *)v1101 + 1);
                    v1094 += v1102;
                    ++v1098;
                    v70 = *(int **)*a1;
                    v1103 = v70[1];
                    v1096 = (float *)((char *)v1096 + v1097);
                  }
                  while (v1098 < v1103);
                  v1093 = *v70;
                  v124 = *v123;
                }
                else
                {
                  v1103 = 0;
                  v1099 = *(_QWORD **)(v69 + 24);
                  v1100 = v1099[1];
                  v1101 = v123[3];
                  v1102 = *((_QWORD *)v1101 + 1);
                }
                v1095 = *v1099 + v1095 - v1103 * v1100;
                v1094 = *(_QWORD *)v1101 + v1094 - v1102 * v124[1];
                ++v1530;
              }
              while (v1530 < v1093);
            }
          }
          else if (v273 == 1)
          {
            if (*v70)
            {
              v275 = 0;
              v276 = 0;
              v277 = 0;
              v278 = *(_QWORD *)(v69 + 152);
              v279 = v123[19];
              v280 = (int)v274;
              v281 = 4 * (int)v274;
              v282 = (float *)v68[19];
              do
              {
                vDSP_vadd((const float *)(v278 + 4 * v277), 1, (const float *)&v279[v276], 1, v282, 1, v280);
                v277 += **(_QWORD **)(*a1 + 24);
                v276 += **(_QWORD **)(*a2 + 24);
                ++v275;
                v282 = (float *)((char *)v282 + v281);
              }
              while (v275 < **(int **)*a1);
            }
          }
          else if (v68[6])
          {
            v1104 = 0;
            v1604 = v123[19];
            v1650 = *(_QWORD *)(v69 + 152);
            v1558 = (int)v274;
            v1105 = (float *)v68[19];
            do
            {
              v1106 = *(_QWORD *)*a1;
              v1107 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1106) >> 2;
              v1108 = 0;
              v1109 = (v1107 - 1);
              if ((int)v1107 - 1 >= 0)
              {
                v1110 = *(_QWORD *)(*a1 + 24);
                v1111 = v1104;
                do
                {
                  v1112 = ldiv(v1111, *(int *)(v1106 + 4 * v1109));
                  v1111 = v1112.quot;
                  v1108 += *(_QWORD *)(v1110 + 8 * v1109--) * v1112.rem;
                }
                while (v1109 != -1);
              }
              v1113 = *(_QWORD *)*a2;
              v1114 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1113) >> 2;
              v1115 = 0;
              v1116 = (v1114 - 1);
              if ((int)v1114 - 1 >= 0)
              {
                v1117 = *(_QWORD *)(*a2 + 24);
                v1118 = v1104;
                do
                {
                  v1119 = ldiv(v1118, *(int *)(v1113 + 4 * v1116));
                  v1118 = v1119.quot;
                  v1115 += *(_QWORD *)(v1117 + 8 * v1116--) * v1119.rem;
                }
                while (v1116 != -1);
              }
              vDSP_vadd((const float *)(v1650 + 4 * (int)v1108), 1, (const float *)&v1604[(int)v1115], 1, v1105, 1, v1558);
              v1105 += v1558;
              v1104 += v1558;
            }
            while (v1104 < *(_QWORD *)(*(_QWORD *)a3 + 48));
          }
          break;
        default:
LABEL_431:
          switch(v270)
          {
            case 1uLL:
              v283 = v68[6];
              if (v283)
              {
                v284 = *(float **)(v69 + 152);
                v285 = (float *)v123[19];
                v286 = (float *)v68[19];
                v287 = 4 * *(_QWORD *)v123[3];
                v288 = 4 * **(_QWORD **)(v69 + 24);
                do
                {
                  *v286++ = *v284 + *v285;
                  v285 = (float *)((char *)v285 + v287);
                  v284 = (float *)((char *)v284 + v288);
                  --v283;
                }
                while (v283);
              }
              break;
            case 2uLL:
              v750 = *v70;
              if ((_DWORD)v750)
              {
                v751 = 0;
                v752 = 0;
                v753 = 0;
                v754 = 0;
                v755 = *(_QWORD *)(v69 + 152);
                v756 = v123[19];
                v757 = v68[19];
                v758 = v70[1];
                v759 = *(uint64_t **)(v69 + 24);
                v760 = *v759;
                v761 = v759[1];
                v762 = v123[3];
                v763 = *(_QWORD *)v762;
                v764 = *((_QWORD *)v762 + 1);
                v765 = v763 - v764 * v124[1];
                if (v758 <= 1)
                  v766 = 1;
                else
                  v766 = v70[1];
                v767 = v760 - v761 * v758;
                do
                {
                  if ((_DWORD)v758)
                  {
                    v768 = v752 + v766;
                    v769 = (float *)(v757 + 4 * v752);
                    v770 = v766;
                    do
                    {
                      *v769++ = *(float *)(v755 + 4 * v754) + *(float *)&v756[v753];
                      v754 += v761;
                      v753 += v764;
                      --v770;
                    }
                    while (v770);
                    v752 = v768;
                  }
                  v754 += v767;
                  v753 += v765;
                  ++v751;
                }
                while (v751 != v750);
              }
              break;
            case 3uLL:
              v771 = *v70;
              if ((_DWORD)v771)
              {
                v772 = 0;
                v773 = 0;
                v774 = 0;
                v775 = 0;
                v776 = *(_QWORD *)(v69 + 152);
                v777 = v123[19];
                v778 = v68[19];
                v779 = v70[1];
                v780 = *(_QWORD **)(v69 + 24);
                v781 = v780[1];
                v782 = v123[3];
                v783 = *((_QWORD *)v782 + 1);
                v784 = *(_QWORD *)v782 - v783 * v124[1];
                if (v779 <= 1)
                  v785 = 1;
                else
                  v785 = v70[1];
                v786 = *v780 - v781 * v779;
                do
                {
                  if ((_DWORD)v779)
                  {
                    v787 = 0;
                    v788 = v70[2];
                    v789 = v780[2];
                    v790 = *((_QWORD *)v782 + 2);
                    if (v788 <= 1)
                      v791 = 1;
                    else
                      v791 = v70[2];
                    v792 = v783 - v790 * v124[2];
                    do
                    {
                      v793 = v791;
                      if ((_DWORD)v788)
                      {
                        do
                        {
                          *(float *)(v778 + 4 * v773++) = *(float *)(v776 + 4 * v775) + *(float *)&v777[v774];
                          v775 += v789;
                          v774 += v790;
                          --v793;
                        }
                        while (v793);
                      }
                      v775 += v781 - v789 * v788;
                      v774 += v792;
                      ++v787;
                    }
                    while (v787 != v785);
                  }
                  v775 += v786;
                  v774 += v784;
                  ++v772;
                }
                while (v772 != v771);
              }
              break;
            case 4uLL:
              v1638 = *v70;
              if ((_DWORD)v1638)
              {
                v794 = 0;
                v795 = 0;
                v796 = 0;
                v797 = 0;
                v798 = *(_QWORD *)(v69 + 152);
                v799 = v123[19];
                v800 = v68[19];
                v801 = v70[1];
                v802 = *(_QWORD **)(v69 + 24);
                v803 = v123[3];
                v1526 = *((_QWORD *)v803 + 1);
                v1546 = v802[1];
                v1592 = *(_QWORD *)v803 - v1526 * v124[1];
                if (v801 <= 1)
                  v804 = 1;
                else
                  v804 = v70[1];
                v805 = *v802 - v802[1] * v801;
                do
                {
                  if ((_DWORD)v801)
                  {
                    v806 = 0;
                    v807 = v70[2];
                    v808 = v802[2];
                    v809 = *((_QWORD *)v803 + 2);
                    if (v807 <= 1)
                      v810 = 1;
                    else
                      v810 = v70[2];
                    v811 = v1526 - v809 * v124[2];
                    do
                    {
                      if ((_DWORD)v807)
                      {
                        v812 = 0;
                        v813 = v70[3];
                        v814 = v802[3];
                        v815 = *((_QWORD *)v803 + 3);
                        if (v813 <= 1)
                          v816 = 1;
                        else
                          v816 = v70[3];
                        v817 = v809 - v815 * v124[3];
                        do
                        {
                          v818 = v816;
                          if ((_DWORD)v813)
                          {
                            do
                            {
                              *(float *)(v800 + 4 * v795++) = *(float *)(v798 + 4 * v797) + *(float *)&v799[v796];
                              v797 += v814;
                              v796 += v815;
                              --v818;
                            }
                            while (v818);
                          }
                          v797 += v808 - v814 * v813;
                          v796 += v817;
                          ++v812;
                        }
                        while (v812 != v810);
                      }
                      v797 += v1546 - v808 * v807;
                      v796 += v811;
                      ++v806;
                    }
                    while (v806 != v804);
                  }
                  v797 += v805;
                  v796 += v1592;
                  ++v794;
                }
                while (v794 != v1638);
              }
              break;
            default:
              v1591 = v68[6];
              v1637 = v72;
              if (v1591)
              {
                v739 = 0;
                v1525 = v123[19];
                v1545 = *(_QWORD *)(v69 + 152);
                v1518 = v68[19];
                do
                {
                  v740 = v1637;
                  if ((v1637 & 0x80000000) != 0)
                  {
                    LODWORD(v741) = 0;
                  }
                  else
                  {
                    v741 = 0;
                    v742 = *(_QWORD *)(v69 + 24);
                    v743 = v739;
                    do
                    {
                      v744 = ldiv(v743, v70[v740]);
                      v743 = v744.quot;
                      v741 += *(_QWORD *)(v742 + 8 * v740--) * v744.rem;
                    }
                    while (v740 != -1);
                  }
                  v745 = 0;
                  if ((v126 & 0x80000000) == 0)
                  {
                    v746 = v123[3];
                    v747 = v126;
                    v748 = v739;
                    do
                    {
                      v749 = ldiv(v748, v124[v747]);
                      v748 = v749.quot;
                      v745 += *(_QWORD *)&v746[2 * v747--] * v749.rem;
                    }
                    while (v747 != -1);
                  }
                  *(float *)(v1518 + 4 * v739++) = *(float *)(v1545 + 4 * (int)v741) + *(float *)&v1525[(int)v745];
                }
                while (v739 != v1591);
              }
              break;
          }
          break;
      }
      break;
    default:
      return;
  }
}

